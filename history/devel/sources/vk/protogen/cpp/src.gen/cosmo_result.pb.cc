// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class InterleavingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InterleavingInfo>
     _instance;
} _InterleavingInfo_default_instance_;
class DocumentFlagsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentFlags>
     _instance;
} _DocumentFlags_default_instance_;
class PromoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PromoInfo>
     _instance;
} _PromoInfo_default_instance_;
class DocumentInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentInfo>
     _instance;
} _DocumentInfo_default_instance_;
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;
class RankerInfo_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankerInfo_Item>
     _instance;
} _RankerInfo_Item_default_instance_;
class RankerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankerInfo>
     _instance;
} _RankerInfo_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;
class RetrieverStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RetrieverStats>
     _instance;
} _RetrieverStats_default_instance_;
class MixerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MixerInfo>
     _instance;
} _MixerInfo_default_instance_;
class GeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Geo>
     _instance;
} _Geo_default_instance_;
class Metrics_SubscriptionMetricsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Metrics_SubscriptionMetrics>
     _instance;
} _Metrics_SubscriptionMetrics_default_instance_;
class MetricsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Metrics>
     _instance;
} _Metrics_default_instance_;
class DebugInfo_UserDataEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugInfo_UserDataEntry>
     _instance;
} _DebugInfo_UserDataEntry_default_instance_;
class DebugInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugInfo>
     _instance;
} _DebugInfo_default_instance_;
class SourceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Source>
     _instance;
} _Source_default_instance_;
class CategoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Category>
     _instance;
} _Category_default_instance_;
class CosmoOutputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoOutput>
     _instance;
} _CosmoOutput_default_instance_;
class FeaturesDumpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeaturesDump>
     _instance;
} _FeaturesDump_default_instance_;

namespace protobuf_cosmo_5fresult_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, showed_from_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, position_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, position_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, ranker_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterleavingInfo, is_interleaving_experiment_ruined_),
  3,
  1,
  2,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFlags, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFlags, may_be_skipped_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, hit_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, click_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, readup_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, show_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, redirect_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, pulse_utm_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, id_ac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, rub_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, user_geo_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_from_socdem_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_from_similar_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_from_visited_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_from_clicked_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, porn_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, theme_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, clicks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, shows_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, pubdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_first_doc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_commercial_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_vk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, i2i_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_relap_doc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, promo_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, comments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_user_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, is_exploration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, source_price_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  15,
  17,
  0,
  14,
  16,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, interleaving_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, document_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, erid_),
  5,
  4,
  7,
  6,
  1,
  8,
  9,
  10,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo_Item, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo_Item, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankerInfo, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, documents_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, documents_processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, documents_skipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrieverStats, sources_selected_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixerInfo, experiment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixerInfo, showed_from_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixerInfo, not_affected_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, country_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, city_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics_SubscriptionMetrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics_SubscriptionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics_SubscriptionMetrics, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics_SubscriptionMetrics, last_ts_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, has_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, has_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, has_vk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, similar_sources_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, visited_sources_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, clicked_sources_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, similar_sites_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, visited_sites_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, clicked_sites_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, visited_sources_visits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, clicked_sources_visits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, sites_for_user_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, show_category_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, show_cold_sources_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, show_hot_sources_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, category_subscription_metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, cold_sources_subscription_metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, hot_sources_subscription_metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, cold_lenta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, empty_lenta_),
  4,
  5,
  8,
  9,
  10,
  6,
  7,
  12,
  13,
  14,
  15,
  16,
  18,
  17,
  11,
  0,
  19,
  20,
  1,
  2,
  3,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo_UserDataEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo_UserDataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo_UserDataEntry, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo_UserDataEntry, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, user_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, documents_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, rank_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, rank_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, ranker_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, retriever_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, mixer_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoOutput, categories_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesDump, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesDump, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesDump, features_names_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(InterleavingInfo)},
  { 15, 21, sizeof(DocumentFlags)},
  { 22, 36, sizeof(PromoInfo)},
  { 45, 72, sizeof(DocumentInfo)},
  { 94, 110, sizeof(Document)},
  { 121, 128, sizeof(RankerInfo_Item)},
  { 130, 136, sizeof(RankerInfo)},
  { 137, 144, sizeof(Error)},
  { 146, 155, sizeof(RetrieverStats)},
  { 159, 167, sizeof(MixerInfo)},
  { 170, 178, sizeof(Geo)},
  { 181, 188, sizeof(Metrics_SubscriptionMetrics)},
  { 190, 218, sizeof(Metrics)},
  { 241, 248, sizeof(DebugInfo_UserDataEntry)},
  { 250, 256, sizeof(DebugInfo)},
  { 257, 267, sizeof(Source)},
  { 272, 279, sizeof(Category)},
  { 281, 295, sizeof(CosmoOutput)},
  { 304, 311, sizeof(FeaturesDump)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterleavingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentFlags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PromoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankerInfo_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RetrieverStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MixerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Geo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metrics_SubscriptionMetrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugInfo_UserDataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Source_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeaturesDump_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_2eproto::InitDefaults();
  _InterleavingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InterleavingInfo_default_instance_);_DocumentFlags_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentFlags_default_instance_);_PromoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PromoInfo_default_instance_);_DocumentInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentInfo_default_instance_);_Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_RankerInfo_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankerInfo_Item_default_instance_);_RankerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankerInfo_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_RetrieverStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RetrieverStats_default_instance_);_MixerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MixerInfo_default_instance_);_Geo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Geo_default_instance_);_Metrics_SubscriptionMetrics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Metrics_SubscriptionMetrics_default_instance_);_Metrics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Metrics_default_instance_);_DebugInfo_UserDataEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugInfo_UserDataEntry_default_instance_);_DebugInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugInfo_default_instance_);_Source_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Source_default_instance_);_Category_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Category_default_instance_);_CosmoOutput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoOutput_default_instance_);_FeaturesDump_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeaturesDump_default_instance_);_DocumentInfo_default_instance_._instance.get_mutable()->promo_info_ = const_cast< ::cosmo::pb::PromoInfo*>(
      ::cosmo::pb::PromoInfo::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->interleaving_info_ = const_cast< ::cosmo::pb::InterleavingInfo*>(
      ::cosmo::pb::InterleavingInfo::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->flags_ = const_cast< ::cosmo::pb::DocumentFlags*>(
      ::cosmo::pb::DocumentFlags::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->document_info_ = const_cast< ::cosmo::pb::DocumentInfo*>(
      ::cosmo::pb::DocumentInfo::internal_default_instance());
  _Metrics_default_instance_._instance.get_mutable()->geo_ = const_cast< ::cosmo::pb::Geo*>(
      ::cosmo::pb::Geo::internal_default_instance());
  _Metrics_default_instance_._instance.get_mutable()->category_subscription_metrics_ = const_cast< ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      ::cosmo::pb::Metrics_SubscriptionMetrics::internal_default_instance());
  _Metrics_default_instance_._instance.get_mutable()->cold_sources_subscription_metrics_ = const_cast< ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      ::cosmo::pb::Metrics_SubscriptionMetrics::internal_default_instance());
  _Metrics_default_instance_._instance.get_mutable()->hot_sources_subscription_metrics_ = const_cast< ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      ::cosmo::pb::Metrics_SubscriptionMetrics::internal_default_instance());
  _DebugInfo_UserDataEntry_default_instance_._instance.get_mutable()->data_ = const_cast< ::cosmo::pb::UserData*>(
      ::cosmo::pb::UserData::internal_default_instance());
  _CosmoOutput_default_instance_._instance.get_mutable()->ranker_info_ = const_cast< ::cosmo::pb::RankerInfo*>(
      ::cosmo::pb::RankerInfo::internal_default_instance());
  _CosmoOutput_default_instance_._instance.get_mutable()->retriever_stats_ = const_cast< ::cosmo::pb::RetrieverStats*>(
      ::cosmo::pb::RetrieverStats::internal_default_instance());
  _CosmoOutput_default_instance_._instance.get_mutable()->mixer_info_ = const_cast< ::cosmo::pb::MixerInfo*>(
      ::cosmo::pb::MixerInfo::internal_default_instance());
  _CosmoOutput_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::cosmo::pb::Metrics*>(
      ::cosmo::pb::Metrics::internal_default_instance());
  _CosmoOutput_default_instance_._instance.get_mutable()->debug_info_ = const_cast< ::cosmo::pb::DebugInfo*>(
      ::cosmo::pb::DebugInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022cosmo_result.proto\022\010cosmo.pb\032\013cosmo.pr"
      "oto\"\221\001\n\020InterleavingInfo\022\025\n\rshowed_from_"
      "a\030\001 \002(\010\022\022\n\nposition_a\030\002 \001(\005\022\022\n\nposition_"
      "b\030\003 \001(\005\022\023\n\013ranker_name\030\004 \001(\t\022)\n!is_inter"
      "leaving_experiment_ruined\030\005 \001(\010\"\'\n\rDocum"
      "entFlags\022\026\n\016may_be_skipped\030\001 \001(\010\"\310\001\n\tPro"
      "moInfo\022\022\n\nhit_pixels\030\001 \003(\t\022\024\n\014click_pixe"
      "ls\030\002 \003(\t\022\025\n\rreadup_pixels\030\003 \003(\t\022\023\n\013show_"
      "pixels\030\004 \003(\t\022\027\n\017redirect_pixels\030\005 \003(\t\022\030\n"
      "\020pulse_utm_labels\030\n \001(\t\022\r\n\005id_ac\030\013 \001(\003\022\021"
      "\n\trub_price\030\014 \001(\t\022\020\n\010user_geo\030\r \001(\t\"\232\004\n\014"
      "DocumentInfo\022\035\n\025is_from_socdem_source\030\001 "
      "\001(\010\022\036\n\026is_from_similar_source\030\002 \001(\010\022\036\n\026i"
      "s_from_visited_source\030\003 \001(\010\022\036\n\026is_from_c"
      "licked_source\030\004 \001(\010\022\023\n\013porn_weight\030\005 \001(\002"
      "\022\022\n\ntheme_hash\030\006 \001(\003\022\024\n\014clicks_count\030\007 \001"
      "(\003\022\023\n\013shows_count\030\010 \001(\003\022\023\n\013is_fulltext\030\t"
      " \001(\010\022\017\n\007pubdate\030\n \001(\003\022\024\n\014is_first_doc\030\013 "
      "\001(\010\022\036\n\026is_commercial_fulltext\030\014 \001(\010\022\r\n\005i"
      "s_vk\030\r \001(\010\022\022\n\ni2i_doc_id\030\016 \001(\003\022\024\n\014is_rel"
      "ap_doc\030\017 \001(\010\022\'\n\npromo_info\030\020 \001(\0132\023.cosmo"
      ".pb.PromoInfo\022\r\n\005likes\030\021 \001(\005\022\020\n\010comments"
      "\030\022 \001(\005\022\030\n\020is_user_fulltext\030\023 \001(\010\022\020\n\010is_v"
      "ideo\030\024 \001(\010\022\026\n\016is_exploration\030\025 \001(\010\022\024\n\014so"
      "urce_price\030\026 \001(\002\"\327\002\n\010Document\022\023\n\013categor"
      "y_id\030\002 \001(\005\022\016\n\006doc_id\030\003 \002(\003\022\021\n\tsource_id\030"
      "\004 \001(\003\022%\n\004type\030\005 \001(\0162\027.cosmo.pb.Document."
      "Type\0225\n\021interleaving_info\030\007 \001(\0132\032.cosmo."
      "pb.InterleavingInfo\022\014\n\004rank\030\t \001(\002\022\023\n\013sou"
      "rce_rank\030\n \001(\002\022\021\n\tsite_hash\030\013 \001(\003\022&\n\005fla"
      "gs\030\r \001(\0132\027.cosmo.pb.DocumentFlags\022-\n\rdoc"
      "ument_info\030\016 \001(\0132\026.cosmo.pb.DocumentInfo"
      "\022\014\n\004erid\030\017 \001(\t\"\032\n\004Type\022\010\n\004BASE\020\000\022\010\n\004TEXT"
      "\020\001\"[\n\nRankerInfo\022(\n\005items\030\001 \003(\0132\031.cosmo."
      "pb.RankerInfo.Item\032#\n\004Item\022\014\n\004name\030\001 \002(\t"
      "\022\r\n\005value\030\002 \002(\t\"e\n\005Error\022\013\n\003msg\030\001 \001(\t\022\"\n"
      "\004code\030\002 \001(\0162\024.cosmo.pb.Error.Code\"+\n\004Cod"
      "e\022\013\n\007DEFAULT\020\000\022\026\n\022INCOMPLETE_DATASET\020\001\"{"
      "\n\016RetrieverStats\022\027\n\017documents_total\030\001 \001("
      "\005\022\033\n\023documents_processed\030\002 \001(\005\022\031\n\021docume"
      "nts_skipped\030\003 \001(\005\022\030\n\020sources_selected\030\004 "
      "\001(\005\"O\n\tMixerInfo\022\025\n\rexperiment_id\030\001 \002(\r\022"
      "\025\n\rshowed_from_a\030\002 \001(\010\022\024\n\014not_affected\030\003"
      " \001(\010\"=\n\003Geo\022\022\n\ncountry_id\030\001 \001(\005\022\021\n\tregio"
      "n_id\030\002 \001(\005\022\017\n\007city_id\030\003 \001(\005\"\273\006\n\007Metrics\022"
      "\013\n\003age\030\001 \001(\005\022\016\n\006gender\030\002 \001(\005\022\021\n\thas_emai"
      "l\030\003 \001(\010\022\016\n\006has_ok\030\004 \001(\010\022\016\n\006has_vk\030\005 \001(\010\022"
      "\033\n\023similar_sources_cnt\030\006 \001(\r\022\033\n\023visited_"
      "sources_cnt\030\007 \001(\r\022\033\n\023clicked_sources_cnt"
      "\030\010 \001(\r\022\031\n\021similar_sites_cnt\030\t \001(\r\022\031\n\021vis"
      "ited_sites_cnt\030\n \001(\r\022\031\n\021clicked_sites_cn"
      "t\030\013 \001(\r\022\036\n\026visited_sources_visits\030\014 \001(\r\022"
      "\036\n\026clicked_sources_visits\030\r \001(\r\022\032\n\022sites"
      "_for_user_cnt\030\016 \001(\003\022\"\n\032show_category_sub"
      "scription\030\020 \001(\010\022\032\n\003geo\030\021 \001(\0132\r.cosmo.pb."
      "Geo\022&\n\036show_cold_sources_subscription\030\022 "
      "\001(\010\022%\n\035show_hot_sources_subscription\030\023 \001"
      "(\010\022L\n\035category_subscription_metrics\030\024 \001("
      "\0132%.cosmo.pb.Metrics.SubscriptionMetrics"
      "\022P\n!cold_sources_subscription_metrics\030\025 "
      "\001(\0132%.cosmo.pb.Metrics.SubscriptionMetri"
      "cs\022O\n hot_sources_subscription_metrics\030\026"
      " \001(\0132%.cosmo.pb.Metrics.SubscriptionMetr"
      "ics\022\022\n\ncold_lenta\030\027 \001(\010\022\023\n\013empty_lenta\030\030"
      " \001(\010\0323\n\023SubscriptionMetrics\022\013\n\003cnt\030\001 \002(\r"
      "\022\017\n\007last_ts\030\002 \002(\003\"\204\001\n\tDebugInfo\0224\n\tuser_"
      "data\030\001 \003(\0132!.cosmo.pb.DebugInfo.UserData"
      "Entry\032A\n\rUserDataEntry\022\016\n\006source\030\001 \001(\t\022 "
      "\n\004data\030\002 \001(\0132\022.cosmo.pb.UserData\"j\n\006Sour"
      "ce\022\021\n\tsource_id\030\001 \002(\003\022\023\n\013category_id\030\002 \001"
      "(\005\022\021\n\tsite_hash\030\003 \001(\003\022\027\n\017documents_count"
      "\030\004 \001(\r\022\014\n\004rank\030\005 \001(\002\"-\n\010Category\022\023\n\013cate"
      "gory_id\030\001 \002(\003\022\014\n\004rank\030\002 \001(\002\"\364\002\n\013CosmoOut"
      "put\022%\n\tdocuments\030\004 \003(\0132\022.cosmo.pb.Docume"
      "nt\022)\n\013ranker_info\030\t \001(\0132\024.cosmo.pb.Ranke"
      "rInfo\022\037\n\006errors\030\n \003(\0132\017.cosmo.pb.Error\0221"
      "\n\017retriever_stats\030\013 \001(\0132\030.cosmo.pb.Retri"
      "everStats\022\'\n\nmixer_info\030\014 \001(\0132\023.cosmo.pb"
      ".MixerInfo\022\"\n\007metrics\030\r \001(\0132\021.cosmo.pb.M"
      "etrics\022\'\n\ndebug_info\030\016 \001(\0132\023.cosmo.pb.De"
      "bugInfo\022!\n\007sources\030\017 \003(\0132\020.cosmo.pb.Sour"
      "ce\022&\n\ncategories\030\020 \003(\0132\022.cosmo.pb.Catego"
      "ry\"8\n\014FeaturesDump\022\020\n\010features\030\001 \003(\002\022\026\n\016"
      "features_names\030\002 \003(\tB\rB\013CosmoResult"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_result.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fresult_2eproto

const ::google::protobuf::EnumDescriptor* Document_Type_descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_enum_descriptors[0];
}
bool Document_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Document_Type Document::BASE;
const Document_Type Document::TEXT;
const Document_Type Document::Type_MIN;
const Document_Type Document::Type_MAX;
const int Document::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_enum_descriptors[1];
}
bool Error_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Code Error::DEFAULT;
const Error_Code Error::INCOMPLETE_DATASET;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterleavingInfo::kShowedFromAFieldNumber;
const int InterleavingInfo::kPositionAFieldNumber;
const int InterleavingInfo::kPositionBFieldNumber;
const int InterleavingInfo::kRankerNameFieldNumber;
const int InterleavingInfo::kIsInterleavingExperimentRuinedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterleavingInfo::InterleavingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.InterleavingInfo)
}
InterleavingInfo::InterleavingInfo(const InterleavingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ranker_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ranker_name()) {
    ranker_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ranker_name_);
  }
  ::memcpy(&position_a_, &from.position_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_interleaving_experiment_ruined_) -
    reinterpret_cast<char*>(&position_a_)) + sizeof(is_interleaving_experiment_ruined_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.InterleavingInfo)
}

void InterleavingInfo::SharedCtor() {
  _cached_size_ = 0;
  ranker_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_interleaving_experiment_ruined_) -
      reinterpret_cast<char*>(&position_a_)) + sizeof(is_interleaving_experiment_ruined_));
}

InterleavingInfo::~InterleavingInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.InterleavingInfo)
  SharedDtor();
}

void InterleavingInfo::SharedDtor() {
  ranker_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InterleavingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterleavingInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InterleavingInfo& InterleavingInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterleavingInfo* InterleavingInfo::New(::google::protobuf::Arena* arena) const {
  InterleavingInfo* n = new InterleavingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterleavingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.InterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_ranker_name()) {
    GOOGLE_DCHECK(!ranker_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ranker_name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&position_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_interleaving_experiment_ruined_) -
        reinterpret_cast<char*>(&position_a_)) + sizeof(is_interleaving_experiment_ruined_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InterleavingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.InterleavingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool showed_from_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_showed_from_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showed_from_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ranker_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ranker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ranker_name().data(), static_cast<int>(this->ranker_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.InterleavingInfo.ranker_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_interleaving_experiment_ruined = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_interleaving_experiment_ruined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interleaving_experiment_ruined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.InterleavingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.InterleavingInfo)
  return false;
#undef DO_
}

void InterleavingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.InterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed_from_a = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showed_from_a(), output);
  }

  // optional int32 position_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position_a(), output);
  }

  // optional int32 position_b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position_b(), output);
  }

  // optional string ranker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ranker_name().data(), static_cast<int>(this->ranker_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.InterleavingInfo.ranker_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ranker_name(), output);
  }

  // optional bool is_interleaving_experiment_ruined = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_interleaving_experiment_ruined(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.InterleavingInfo)
}

::google::protobuf::uint8* InterleavingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.InterleavingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool showed_from_a = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showed_from_a(), target);
  }

  // optional int32 position_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position_a(), target);
  }

  // optional int32 position_b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position_b(), target);
  }

  // optional string ranker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ranker_name().data(), static_cast<int>(this->ranker_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.InterleavingInfo.ranker_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ranker_name(), target);
  }

  // optional bool is_interleaving_experiment_ruined = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_interleaving_experiment_ruined(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.InterleavingInfo)
  return target;
}

size_t InterleavingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.InterleavingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool showed_from_a = 1;
  if (has_showed_from_a()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ranker_name = 4;
    if (has_ranker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ranker_name());
    }

    // optional int32 position_a = 2;
    if (has_position_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_a());
    }

    // optional int32 position_b = 3;
    if (has_position_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_b());
    }

  }
  // optional bool is_interleaving_experiment_ruined = 5;
  if (has_is_interleaving_experiment_ruined()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterleavingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.InterleavingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InterleavingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterleavingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.InterleavingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.InterleavingInfo)
    MergeFrom(*source);
  }
}

void InterleavingInfo::MergeFrom(const InterleavingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.InterleavingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ranker_name();
      ranker_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ranker_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_a_ = from.position_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_b_ = from.position_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      showed_from_a_ = from.showed_from_a_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_interleaving_experiment_ruined_ = from.is_interleaving_experiment_ruined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InterleavingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.InterleavingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterleavingInfo::CopyFrom(const InterleavingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.InterleavingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterleavingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void InterleavingInfo::Swap(InterleavingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterleavingInfo::InternalSwap(InterleavingInfo* other) {
  using std::swap;
  ranker_name_.Swap(&other->ranker_name_);
  swap(position_a_, other->position_a_);
  swap(position_b_, other->position_b_);
  swap(showed_from_a_, other->showed_from_a_);
  swap(is_interleaving_experiment_ruined_, other->is_interleaving_experiment_ruined_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterleavingInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterleavingInfo

// required bool showed_from_a = 1;
bool InterleavingInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InterleavingInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000008u;
}
void InterleavingInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void InterleavingInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
bool InterleavingInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.showed_from_a)
  return showed_from_a_;
}
void InterleavingInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.showed_from_a)
}

// optional int32 position_a = 2;
bool InterleavingInfo::has_position_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InterleavingInfo::set_has_position_a() {
  _has_bits_[0] |= 0x00000002u;
}
void InterleavingInfo::clear_has_position_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void InterleavingInfo::clear_position_a() {
  position_a_ = 0;
  clear_has_position_a();
}
::google::protobuf::int32 InterleavingInfo::position_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.position_a)
  return position_a_;
}
void InterleavingInfo::set_position_a(::google::protobuf::int32 value) {
  set_has_position_a();
  position_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.position_a)
}

// optional int32 position_b = 3;
bool InterleavingInfo::has_position_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InterleavingInfo::set_has_position_b() {
  _has_bits_[0] |= 0x00000004u;
}
void InterleavingInfo::clear_has_position_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void InterleavingInfo::clear_position_b() {
  position_b_ = 0;
  clear_has_position_b();
}
::google::protobuf::int32 InterleavingInfo::position_b() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.position_b)
  return position_b_;
}
void InterleavingInfo::set_position_b(::google::protobuf::int32 value) {
  set_has_position_b();
  position_b_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.position_b)
}

// optional string ranker_name = 4;
bool InterleavingInfo::has_ranker_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InterleavingInfo::set_has_ranker_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InterleavingInfo::clear_has_ranker_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InterleavingInfo::clear_ranker_name() {
  ranker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ranker_name();
}
const ::std::string& InterleavingInfo::ranker_name() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.ranker_name)
  return ranker_name_.GetNoArena();
}
void InterleavingInfo::set_ranker_name(const ::std::string& value) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.ranker_name)
}
#if LANG_CXX11
void InterleavingInfo::set_ranker_name(::std::string&& value) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.InterleavingInfo.ranker_name)
}
#endif
void InterleavingInfo::set_ranker_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.InterleavingInfo.ranker_name)
}
void InterleavingInfo::set_ranker_name(const char* value, size_t size) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.InterleavingInfo.ranker_name)
}
::std::string* InterleavingInfo::mutable_ranker_name() {
  set_has_ranker_name();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.InterleavingInfo.ranker_name)
  return ranker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InterleavingInfo::release_ranker_name() {
  // @@protoc_insertion_point(field_release:cosmo.pb.InterleavingInfo.ranker_name)
  clear_has_ranker_name();
  return ranker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InterleavingInfo::set_allocated_ranker_name(::std::string* ranker_name) {
  if (ranker_name != NULL) {
    set_has_ranker_name();
  } else {
    clear_has_ranker_name();
  }
  ranker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ranker_name);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.InterleavingInfo.ranker_name)
}

// optional bool is_interleaving_experiment_ruined = 5;
bool InterleavingInfo::has_is_interleaving_experiment_ruined() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InterleavingInfo::set_has_is_interleaving_experiment_ruined() {
  _has_bits_[0] |= 0x00000010u;
}
void InterleavingInfo::clear_has_is_interleaving_experiment_ruined() {
  _has_bits_[0] &= ~0x00000010u;
}
void InterleavingInfo::clear_is_interleaving_experiment_ruined() {
  is_interleaving_experiment_ruined_ = false;
  clear_has_is_interleaving_experiment_ruined();
}
bool InterleavingInfo::is_interleaving_experiment_ruined() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.is_interleaving_experiment_ruined)
  return is_interleaving_experiment_ruined_;
}
void InterleavingInfo::set_is_interleaving_experiment_ruined(bool value) {
  set_has_is_interleaving_experiment_ruined();
  is_interleaving_experiment_ruined_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.is_interleaving_experiment_ruined)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentFlags::kMayBeSkippedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentFlags::DocumentFlags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentFlags)
}
DocumentFlags::DocumentFlags(const DocumentFlags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  may_be_skipped_ = from.may_be_skipped_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentFlags)
}

void DocumentFlags::SharedCtor() {
  _cached_size_ = 0;
  may_be_skipped_ = false;
}

DocumentFlags::~DocumentFlags() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentFlags)
  SharedDtor();
}

void DocumentFlags::SharedDtor() {
}

void DocumentFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentFlags::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentFlags& DocumentFlags::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentFlags* DocumentFlags::New(::google::protobuf::Arena* arena) const {
  DocumentFlags* n = new DocumentFlags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  may_be_skipped_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool may_be_skipped = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_may_be_skipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_be_skipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentFlags)
  return false;
#undef DO_
}

void DocumentFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool may_be_skipped = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->may_be_skipped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentFlags)
}

::google::protobuf::uint8* DocumentFlags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool may_be_skipped = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->may_be_skipped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentFlags)
  return target;
}

size_t DocumentFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentFlags)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool may_be_skipped = 1;
  if (has_may_be_skipped()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentFlags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentFlags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentFlags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentFlags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentFlags)
    MergeFrom(*source);
  }
}

void DocumentFlags::MergeFrom(const DocumentFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_may_be_skipped()) {
    set_may_be_skipped(from.may_be_skipped());
  }
}

void DocumentFlags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentFlags::CopyFrom(const DocumentFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentFlags::IsInitialized() const {
  return true;
}

void DocumentFlags::Swap(DocumentFlags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentFlags::InternalSwap(DocumentFlags* other) {
  using std::swap;
  swap(may_be_skipped_, other->may_be_skipped_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentFlags::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentFlags

// optional bool may_be_skipped = 1;
bool DocumentFlags::has_may_be_skipped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentFlags::set_has_may_be_skipped() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentFlags::clear_has_may_be_skipped() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentFlags::clear_may_be_skipped() {
  may_be_skipped_ = false;
  clear_has_may_be_skipped();
}
bool DocumentFlags::may_be_skipped() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentFlags.may_be_skipped)
  return may_be_skipped_;
}
void DocumentFlags::set_may_be_skipped(bool value) {
  set_has_may_be_skipped();
  may_be_skipped_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentFlags.may_be_skipped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PromoInfo::kHitPixelsFieldNumber;
const int PromoInfo::kClickPixelsFieldNumber;
const int PromoInfo::kReadupPixelsFieldNumber;
const int PromoInfo::kShowPixelsFieldNumber;
const int PromoInfo::kRedirectPixelsFieldNumber;
const int PromoInfo::kPulseUtmLabelsFieldNumber;
const int PromoInfo::kIdAcFieldNumber;
const int PromoInfo::kRubPriceFieldNumber;
const int PromoInfo::kUserGeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PromoInfo::PromoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.PromoInfo)
}
PromoInfo::PromoInfo(const PromoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hit_pixels_(from.hit_pixels_),
      click_pixels_(from.click_pixels_),
      readup_pixels_(from.readup_pixels_),
      show_pixels_(from.show_pixels_),
      redirect_pixels_(from.redirect_pixels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pulse_utm_labels_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pulse_utm_labels()) {
    pulse_utm_labels_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pulse_utm_labels_);
  }
  rub_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rub_price()) {
    rub_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rub_price_);
  }
  user_geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_geo()) {
    user_geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_geo_);
  }
  id_ac_ = from.id_ac_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.PromoInfo)
}

void PromoInfo::SharedCtor() {
  _cached_size_ = 0;
  pulse_utm_labels_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rub_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ac_ = GOOGLE_LONGLONG(0);
}

PromoInfo::~PromoInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.PromoInfo)
  SharedDtor();
}

void PromoInfo::SharedDtor() {
  pulse_utm_labels_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rub_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PromoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromoInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PromoInfo& PromoInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

PromoInfo* PromoInfo::New(::google::protobuf::Arena* arena) const {
  PromoInfo* n = new PromoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PromoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_pixels_.Clear();
  click_pixels_.Clear();
  readup_pixels_.Clear();
  show_pixels_.Clear();
  redirect_pixels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pulse_utm_labels_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pulse_utm_labels_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rub_price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rub_price_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!user_geo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_geo_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ac_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PromoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.PromoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hit_pixels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hit_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hit_pixels(this->hit_pixels_size() - 1).data(),
            static_cast<int>(this->hit_pixels(this->hit_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.hit_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string click_pixels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_pixels(this->click_pixels_size() - 1).data(),
            static_cast<int>(this->click_pixels(this->click_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.click_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string readup_pixels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_readup_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readup_pixels(this->readup_pixels_size() - 1).data(),
            static_cast<int>(this->readup_pixels(this->readup_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.readup_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string show_pixels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_pixels(this->show_pixels_size() - 1).data(),
            static_cast<int>(this->show_pixels(this->show_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.show_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirect_pixels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirect_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_pixels(this->redirect_pixels_size() - 1).data(),
            static_cast<int>(this->redirect_pixels(this->redirect_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.redirect_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pulse_utm_labels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pulse_utm_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.pulse_utm_labels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 id_ac = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_id_ac();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_ac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rub_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rub_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rub_price().data(), static_cast<int>(this->rub_price().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.rub_price");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_geo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_geo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_geo().data(), static_cast<int>(this->user_geo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PromoInfo.user_geo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.PromoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.PromoInfo)
  return false;
#undef DO_
}

void PromoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hit_pixels = 1;
  for (int i = 0, n = this->hit_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hit_pixels(i).data(), static_cast<int>(this->hit_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.hit_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hit_pixels(i), output);
  }

  // repeated string click_pixels = 2;
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_pixels(i).data(), static_cast<int>(this->click_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.click_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->click_pixels(i), output);
  }

  // repeated string readup_pixels = 3;
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup_pixels(i).data(), static_cast<int>(this->readup_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.readup_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->readup_pixels(i), output);
  }

  // repeated string show_pixels = 4;
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_pixels(i).data(), static_cast<int>(this->show_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.show_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->show_pixels(i), output);
  }

  // repeated string redirect_pixels = 5;
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_pixels(i).data(), static_cast<int>(this->redirect_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.redirect_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->redirect_pixels(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pulse_utm_labels = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.pulse_utm_labels");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pulse_utm_labels(), output);
  }

  // optional int64 id_ac = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->id_ac(), output);
  }

  // optional string rub_price = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rub_price().data(), static_cast<int>(this->rub_price().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.rub_price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rub_price(), output);
  }

  // optional string user_geo = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_geo().data(), static_cast<int>(this->user_geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.user_geo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->user_geo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.PromoInfo)
}

::google::protobuf::uint8* PromoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hit_pixels = 1;
  for (int i = 0, n = this->hit_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hit_pixels(i).data(), static_cast<int>(this->hit_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.hit_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hit_pixels(i), target);
  }

  // repeated string click_pixels = 2;
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_pixels(i).data(), static_cast<int>(this->click_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.click_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->click_pixels(i), target);
  }

  // repeated string readup_pixels = 3;
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup_pixels(i).data(), static_cast<int>(this->readup_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.readup_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->readup_pixels(i), target);
  }

  // repeated string show_pixels = 4;
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_pixels(i).data(), static_cast<int>(this->show_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.show_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->show_pixels(i), target);
  }

  // repeated string redirect_pixels = 5;
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_pixels(i).data(), static_cast<int>(this->redirect_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.redirect_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->redirect_pixels(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pulse_utm_labels = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.pulse_utm_labels");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pulse_utm_labels(), target);
  }

  // optional int64 id_ac = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->id_ac(), target);
  }

  // optional string rub_price = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rub_price().data(), static_cast<int>(this->rub_price().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.rub_price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rub_price(), target);
  }

  // optional string user_geo = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_geo().data(), static_cast<int>(this->user_geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PromoInfo.user_geo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->user_geo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.PromoInfo)
  return target;
}

size_t PromoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.PromoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string hit_pixels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hit_pixels_size());
  for (int i = 0, n = this->hit_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hit_pixels(i));
  }

  // repeated string click_pixels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->click_pixels_size());
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_pixels(i));
  }

  // repeated string readup_pixels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->readup_pixels_size());
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->readup_pixels(i));
  }

  // repeated string show_pixels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->show_pixels_size());
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show_pixels(i));
  }

  // repeated string redirect_pixels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirect_pixels_size());
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirect_pixels(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string pulse_utm_labels = 10;
    if (has_pulse_utm_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pulse_utm_labels());
    }

    // optional string rub_price = 12;
    if (has_rub_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rub_price());
    }

    // optional string user_geo = 13;
    if (has_user_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_geo());
    }

    // optional int64 id_ac = 11;
    if (has_id_ac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id_ac());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.PromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PromoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PromoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.PromoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.PromoInfo)
    MergeFrom(*source);
  }
}

void PromoInfo::MergeFrom(const PromoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.PromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_pixels_.MergeFrom(from.hit_pixels_);
  click_pixels_.MergeFrom(from.click_pixels_);
  readup_pixels_.MergeFrom(from.readup_pixels_);
  show_pixels_.MergeFrom(from.show_pixels_);
  redirect_pixels_.MergeFrom(from.redirect_pixels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pulse_utm_labels();
      pulse_utm_labels_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pulse_utm_labels_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rub_price();
      rub_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rub_price_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_geo();
      user_geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_geo_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ac_ = from.id_ac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PromoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.PromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromoInfo::CopyFrom(const PromoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.PromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromoInfo::IsInitialized() const {
  return true;
}

void PromoInfo::Swap(PromoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PromoInfo::InternalSwap(PromoInfo* other) {
  using std::swap;
  hit_pixels_.InternalSwap(&other->hit_pixels_);
  click_pixels_.InternalSwap(&other->click_pixels_);
  readup_pixels_.InternalSwap(&other->readup_pixels_);
  show_pixels_.InternalSwap(&other->show_pixels_);
  redirect_pixels_.InternalSwap(&other->redirect_pixels_);
  pulse_utm_labels_.Swap(&other->pulse_utm_labels_);
  rub_price_.Swap(&other->rub_price_);
  user_geo_.Swap(&other->user_geo_);
  swap(id_ac_, other->id_ac_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PromoInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PromoInfo

// repeated string hit_pixels = 1;
int PromoInfo::hit_pixels_size() const {
  return hit_pixels_.size();
}
void PromoInfo::clear_hit_pixels() {
  hit_pixels_.Clear();
}
const ::std::string& PromoInfo::hit_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Get(index);
}
::std::string* PromoInfo::mutable_hit_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Mutable(index);
}
void PromoInfo::set_hit_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.hit_pixels)
  hit_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PromoInfo::set_hit_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.hit_pixels)
  hit_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void PromoInfo::set_hit_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hit_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.hit_pixels)
}
void PromoInfo::set_hit_pixels(int index, const char* value, size_t size) {
  hit_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.hit_pixels)
}
::std::string* PromoInfo::add_hit_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Add();
}
void PromoInfo::add_hit_pixels(const ::std::string& value) {
  hit_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.hit_pixels)
}
#if LANG_CXX11
void PromoInfo::add_hit_pixels(::std::string&& value) {
  hit_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.hit_pixels)
}
#endif
void PromoInfo::add_hit_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hit_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.hit_pixels)
}
void PromoInfo::add_hit_pixels(const char* value, size_t size) {
  hit_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.hit_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::hit_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_hit_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.hit_pixels)
  return &hit_pixels_;
}

// repeated string click_pixels = 2;
int PromoInfo::click_pixels_size() const {
  return click_pixels_.size();
}
void PromoInfo::clear_click_pixels() {
  click_pixels_.Clear();
}
const ::std::string& PromoInfo::click_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Get(index);
}
::std::string* PromoInfo::mutable_click_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Mutable(index);
}
void PromoInfo::set_click_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.click_pixels)
  click_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PromoInfo::set_click_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.click_pixels)
  click_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void PromoInfo::set_click_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.click_pixels)
}
void PromoInfo::set_click_pixels(int index, const char* value, size_t size) {
  click_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.click_pixels)
}
::std::string* PromoInfo::add_click_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Add();
}
void PromoInfo::add_click_pixels(const ::std::string& value) {
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.click_pixels)
}
#if LANG_CXX11
void PromoInfo::add_click_pixels(::std::string&& value) {
  click_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.click_pixels)
}
#endif
void PromoInfo::add_click_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.click_pixels)
}
void PromoInfo::add_click_pixels(const char* value, size_t size) {
  click_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.click_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::click_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_click_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.click_pixels)
  return &click_pixels_;
}

// repeated string readup_pixels = 3;
int PromoInfo::readup_pixels_size() const {
  return readup_pixels_.size();
}
void PromoInfo::clear_readup_pixels() {
  readup_pixels_.Clear();
}
const ::std::string& PromoInfo::readup_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Get(index);
}
::std::string* PromoInfo::mutable_readup_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Mutable(index);
}
void PromoInfo::set_readup_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PromoInfo::set_readup_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void PromoInfo::set_readup_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.readup_pixels)
}
void PromoInfo::set_readup_pixels(int index, const char* value, size_t size) {
  readup_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.readup_pixels)
}
::std::string* PromoInfo::add_readup_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Add();
}
void PromoInfo::add_readup_pixels(const ::std::string& value) {
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.readup_pixels)
}
#if LANG_CXX11
void PromoInfo::add_readup_pixels(::std::string&& value) {
  readup_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.readup_pixels)
}
#endif
void PromoInfo::add_readup_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.readup_pixels)
}
void PromoInfo::add_readup_pixels(const char* value, size_t size) {
  readup_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.readup_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::readup_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_readup_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.readup_pixels)
  return &readup_pixels_;
}

// repeated string show_pixels = 4;
int PromoInfo::show_pixels_size() const {
  return show_pixels_.size();
}
void PromoInfo::clear_show_pixels() {
  show_pixels_.Clear();
}
const ::std::string& PromoInfo::show_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Get(index);
}
::std::string* PromoInfo::mutable_show_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Mutable(index);
}
void PromoInfo::set_show_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.show_pixels)
  show_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PromoInfo::set_show_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.show_pixels)
  show_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void PromoInfo::set_show_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.show_pixels)
}
void PromoInfo::set_show_pixels(int index, const char* value, size_t size) {
  show_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.show_pixels)
}
::std::string* PromoInfo::add_show_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Add();
}
void PromoInfo::add_show_pixels(const ::std::string& value) {
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.show_pixels)
}
#if LANG_CXX11
void PromoInfo::add_show_pixels(::std::string&& value) {
  show_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.show_pixels)
}
#endif
void PromoInfo::add_show_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.show_pixels)
}
void PromoInfo::add_show_pixels(const char* value, size_t size) {
  show_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.show_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::show_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_show_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.show_pixels)
  return &show_pixels_;
}

// repeated string redirect_pixels = 5;
int PromoInfo::redirect_pixels_size() const {
  return redirect_pixels_.size();
}
void PromoInfo::clear_redirect_pixels() {
  redirect_pixels_.Clear();
}
const ::std::string& PromoInfo::redirect_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Get(index);
}
::std::string* PromoInfo::mutable_redirect_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Mutable(index);
}
void PromoInfo::set_redirect_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PromoInfo::set_redirect_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void PromoInfo::set_redirect_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.redirect_pixels)
}
void PromoInfo::set_redirect_pixels(int index, const char* value, size_t size) {
  redirect_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.redirect_pixels)
}
::std::string* PromoInfo::add_redirect_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Add();
}
void PromoInfo::add_redirect_pixels(const ::std::string& value) {
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.redirect_pixels)
}
#if LANG_CXX11
void PromoInfo::add_redirect_pixels(::std::string&& value) {
  redirect_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.redirect_pixels)
}
#endif
void PromoInfo::add_redirect_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.redirect_pixels)
}
void PromoInfo::add_redirect_pixels(const char* value, size_t size) {
  redirect_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.redirect_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::redirect_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_redirect_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.redirect_pixels)
  return &redirect_pixels_;
}

// optional string pulse_utm_labels = 10;
bool PromoInfo::has_pulse_utm_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PromoInfo::set_has_pulse_utm_labels() {
  _has_bits_[0] |= 0x00000001u;
}
void PromoInfo::clear_has_pulse_utm_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
void PromoInfo::clear_pulse_utm_labels() {
  pulse_utm_labels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pulse_utm_labels();
}
const ::std::string& PromoInfo::pulse_utm_labels() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.GetNoArena();
}
void PromoInfo::set_pulse_utm_labels(const ::std::string& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.pulse_utm_labels)
}
#if LANG_CXX11
void PromoInfo::set_pulse_utm_labels(::std::string&& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.pulse_utm_labels)
}
#endif
void PromoInfo::set_pulse_utm_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.pulse_utm_labels)
}
void PromoInfo::set_pulse_utm_labels(const char* value, size_t size) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.pulse_utm_labels)
}
::std::string* PromoInfo::mutable_pulse_utm_labels() {
  set_has_pulse_utm_labels();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PromoInfo::release_pulse_utm_labels() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.pulse_utm_labels)
  clear_has_pulse_utm_labels();
  return pulse_utm_labels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PromoInfo::set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels) {
  if (pulse_utm_labels != NULL) {
    set_has_pulse_utm_labels();
  } else {
    clear_has_pulse_utm_labels();
  }
  pulse_utm_labels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pulse_utm_labels);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.pulse_utm_labels)
}

// optional int64 id_ac = 11;
bool PromoInfo::has_id_ac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PromoInfo::set_has_id_ac() {
  _has_bits_[0] |= 0x00000008u;
}
void PromoInfo::clear_has_id_ac() {
  _has_bits_[0] &= ~0x00000008u;
}
void PromoInfo::clear_id_ac() {
  id_ac_ = GOOGLE_LONGLONG(0);
  clear_has_id_ac();
}
::google::protobuf::int64 PromoInfo::id_ac() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.id_ac)
  return id_ac_;
}
void PromoInfo::set_id_ac(::google::protobuf::int64 value) {
  set_has_id_ac();
  id_ac_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.id_ac)
}

// optional string rub_price = 12;
bool PromoInfo::has_rub_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PromoInfo::set_has_rub_price() {
  _has_bits_[0] |= 0x00000002u;
}
void PromoInfo::clear_has_rub_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void PromoInfo::clear_rub_price() {
  rub_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rub_price();
}
const ::std::string& PromoInfo::rub_price() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.rub_price)
  return rub_price_.GetNoArena();
}
void PromoInfo::set_rub_price(const ::std::string& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.rub_price)
}
#if LANG_CXX11
void PromoInfo::set_rub_price(::std::string&& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.rub_price)
}
#endif
void PromoInfo::set_rub_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.rub_price)
}
void PromoInfo::set_rub_price(const char* value, size_t size) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.rub_price)
}
::std::string* PromoInfo::mutable_rub_price() {
  set_has_rub_price();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.rub_price)
  return rub_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PromoInfo::release_rub_price() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.rub_price)
  clear_has_rub_price();
  return rub_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PromoInfo::set_allocated_rub_price(::std::string* rub_price) {
  if (rub_price != NULL) {
    set_has_rub_price();
  } else {
    clear_has_rub_price();
  }
  rub_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rub_price);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.rub_price)
}

// optional string user_geo = 13;
bool PromoInfo::has_user_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PromoInfo::set_has_user_geo() {
  _has_bits_[0] |= 0x00000004u;
}
void PromoInfo::clear_has_user_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
void PromoInfo::clear_user_geo() {
  user_geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_geo();
}
const ::std::string& PromoInfo::user_geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.user_geo)
  return user_geo_.GetNoArena();
}
void PromoInfo::set_user_geo(const ::std::string& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.user_geo)
}
#if LANG_CXX11
void PromoInfo::set_user_geo(::std::string&& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.user_geo)
}
#endif
void PromoInfo::set_user_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.user_geo)
}
void PromoInfo::set_user_geo(const char* value, size_t size) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.user_geo)
}
::std::string* PromoInfo::mutable_user_geo() {
  set_has_user_geo();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.user_geo)
  return user_geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PromoInfo::release_user_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.user_geo)
  clear_has_user_geo();
  return user_geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PromoInfo::set_allocated_user_geo(::std::string* user_geo) {
  if (user_geo != NULL) {
    set_has_user_geo();
  } else {
    clear_has_user_geo();
  }
  user_geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_geo);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.user_geo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentInfo::kIsFromSocdemSourceFieldNumber;
const int DocumentInfo::kIsFromSimilarSourceFieldNumber;
const int DocumentInfo::kIsFromVisitedSourceFieldNumber;
const int DocumentInfo::kIsFromClickedSourceFieldNumber;
const int DocumentInfo::kPornWeightFieldNumber;
const int DocumentInfo::kThemeHashFieldNumber;
const int DocumentInfo::kClicksCountFieldNumber;
const int DocumentInfo::kShowsCountFieldNumber;
const int DocumentInfo::kIsFulltextFieldNumber;
const int DocumentInfo::kPubdateFieldNumber;
const int DocumentInfo::kIsFirstDocFieldNumber;
const int DocumentInfo::kIsCommercialFulltextFieldNumber;
const int DocumentInfo::kIsVkFieldNumber;
const int DocumentInfo::kI2IDocIdFieldNumber;
const int DocumentInfo::kIsRelapDocFieldNumber;
const int DocumentInfo::kPromoInfoFieldNumber;
const int DocumentInfo::kLikesFieldNumber;
const int DocumentInfo::kCommentsFieldNumber;
const int DocumentInfo::kIsUserFulltextFieldNumber;
const int DocumentInfo::kIsVideoFieldNumber;
const int DocumentInfo::kIsExplorationFieldNumber;
const int DocumentInfo::kSourcePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentInfo::DocumentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentInfo)
}
DocumentInfo::DocumentInfo(const DocumentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_promo_info()) {
    promo_info_ = new ::cosmo::pb::PromoInfo(*from.promo_info_);
  } else {
    promo_info_ = NULL;
  }
  ::memcpy(&is_from_socdem_source_, &from.is_from_socdem_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_price_) -
    reinterpret_cast<char*>(&is_from_socdem_source_)) + sizeof(source_price_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentInfo)
}

void DocumentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&promo_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_price_) -
      reinterpret_cast<char*>(&promo_info_)) + sizeof(source_price_));
}

DocumentInfo::~DocumentInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentInfo)
  SharedDtor();
}

void DocumentInfo::SharedDtor() {
  if (this != internal_default_instance()) delete promo_info_;
}

void DocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentInfo& DocumentInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentInfo* DocumentInfo::New(::google::protobuf::Arena* arena) const {
  DocumentInfo* n = new DocumentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_promo_info()) {
    GOOGLE_DCHECK(promo_info_ != NULL);
    promo_info_->::cosmo::pb::PromoInfo::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&is_from_socdem_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicks_count_) -
        reinterpret_cast<char*>(&is_from_socdem_source_)) + sizeof(clicks_count_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&shows_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&i2i_doc_id_) -
        reinterpret_cast<char*>(&shows_count_)) + sizeof(i2i_doc_id_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&comments_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_price_) -
        reinterpret_cast<char*>(&comments_)) + sizeof(source_price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_from_socdem_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_from_socdem_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_socdem_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_from_similar_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_from_similar_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_similar_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_from_visited_source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_from_visited_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_visited_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_from_clicked_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_from_clicked_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_clicked_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_porn_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 theme_hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_theme_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &theme_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 clicks_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_clicks_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clicks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 shows_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shows_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shows_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fulltext = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pubdate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pubdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pubdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_first_doc = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_first_doc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_doc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_commercial_fulltext = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_commercial_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_commercial_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vk = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_vk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 i2i_doc_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_i2i_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i2i_doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_relap_doc = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_is_relap_doc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_relap_doc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.PromoInfo promo_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_promo_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comments = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_comments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_user_fulltext = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_user_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_user_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_video = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_exploration = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_exploration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exploration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float source_price = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_source_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentInfo)
  return false;
#undef DO_
}

void DocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_from_socdem_source = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_from_socdem_source(), output);
  }

  // optional bool is_from_similar_source = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_from_similar_source(), output);
  }

  // optional bool is_from_visited_source = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_from_visited_source(), output);
  }

  // optional bool is_from_clicked_source = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_from_clicked_source(), output);
  }

  // optional float porn_weight = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->porn_weight(), output);
  }

  // optional int64 theme_hash = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->theme_hash(), output);
  }

  // optional int64 clicks_count = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->clicks_count(), output);
  }

  // optional int64 shows_count = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->shows_count(), output);
  }

  // optional bool is_fulltext = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_fulltext(), output);
  }

  // optional int64 pubdate = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pubdate(), output);
  }

  // optional bool is_first_doc = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_first_doc(), output);
  }

  // optional bool is_commercial_fulltext = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_commercial_fulltext(), output);
  }

  // optional bool is_vk = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_vk(), output);
  }

  // optional int64 i2i_doc_id = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->i2i_doc_id(), output);
  }

  // optional bool is_relap_doc = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_relap_doc(), output);
  }

  // optional .cosmo.pb.PromoInfo promo_info = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->promo_info_, output);
  }

  // optional int32 likes = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->likes(), output);
  }

  // optional int32 comments = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->comments(), output);
  }

  // optional bool is_user_fulltext = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_user_fulltext(), output);
  }

  // optional bool is_video = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_video(), output);
  }

  // optional bool is_exploration = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_exploration(), output);
  }

  // optional float source_price = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->source_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentInfo)
}

::google::protobuf::uint8* DocumentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_from_socdem_source = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_from_socdem_source(), target);
  }

  // optional bool is_from_similar_source = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_from_similar_source(), target);
  }

  // optional bool is_from_visited_source = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_from_visited_source(), target);
  }

  // optional bool is_from_clicked_source = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_from_clicked_source(), target);
  }

  // optional float porn_weight = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->porn_weight(), target);
  }

  // optional int64 theme_hash = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->theme_hash(), target);
  }

  // optional int64 clicks_count = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->clicks_count(), target);
  }

  // optional int64 shows_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->shows_count(), target);
  }

  // optional bool is_fulltext = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_fulltext(), target);
  }

  // optional int64 pubdate = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pubdate(), target);
  }

  // optional bool is_first_doc = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_first_doc(), target);
  }

  // optional bool is_commercial_fulltext = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_commercial_fulltext(), target);
  }

  // optional bool is_vk = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_vk(), target);
  }

  // optional int64 i2i_doc_id = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->i2i_doc_id(), target);
  }

  // optional bool is_relap_doc = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_relap_doc(), target);
  }

  // optional .cosmo.pb.PromoInfo promo_info = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->promo_info_, deterministic, target);
  }

  // optional int32 likes = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->likes(), target);
  }

  // optional int32 comments = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->comments(), target);
  }

  // optional bool is_user_fulltext = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_user_fulltext(), target);
  }

  // optional bool is_video = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_video(), target);
  }

  // optional bool is_exploration = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_exploration(), target);
  }

  // optional float source_price = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->source_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentInfo)
  return target;
}

size_t DocumentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.PromoInfo promo_info = 16;
    if (has_promo_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->promo_info_);
    }

    // optional bool is_from_socdem_source = 1;
    if (has_is_from_socdem_source()) {
      total_size += 1 + 1;
    }

    // optional bool is_from_similar_source = 2;
    if (has_is_from_similar_source()) {
      total_size += 1 + 1;
    }

    // optional bool is_from_visited_source = 3;
    if (has_is_from_visited_source()) {
      total_size += 1 + 1;
    }

    // optional bool is_from_clicked_source = 4;
    if (has_is_from_clicked_source()) {
      total_size += 1 + 1;
    }

    // optional float porn_weight = 5;
    if (has_porn_weight()) {
      total_size += 1 + 4;
    }

    // optional int64 theme_hash = 6;
    if (has_theme_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->theme_hash());
    }

    // optional int64 clicks_count = 7;
    if (has_clicks_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clicks_count());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 shows_count = 8;
    if (has_shows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shows_count());
    }

    // optional int64 pubdate = 10;
    if (has_pubdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pubdate());
    }

    // optional bool is_fulltext = 9;
    if (has_is_fulltext()) {
      total_size += 1 + 1;
    }

    // optional bool is_first_doc = 11;
    if (has_is_first_doc()) {
      total_size += 1 + 1;
    }

    // optional bool is_commercial_fulltext = 12;
    if (has_is_commercial_fulltext()) {
      total_size += 1 + 1;
    }

    // optional bool is_vk = 13;
    if (has_is_vk()) {
      total_size += 1 + 1;
    }

    // optional int32 likes = 17;
    if (has_likes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

    // optional int64 i2i_doc_id = 14;
    if (has_i2i_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i2i_doc_id());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 comments = 18;
    if (has_comments()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comments());
    }

    // optional bool is_relap_doc = 15;
    if (has_is_relap_doc()) {
      total_size += 1 + 1;
    }

    // optional bool is_user_fulltext = 19;
    if (has_is_user_fulltext()) {
      total_size += 2 + 1;
    }

    // optional bool is_video = 20;
    if (has_is_video()) {
      total_size += 2 + 1;
    }

    // optional bool is_exploration = 21;
    if (has_is_exploration()) {
      total_size += 2 + 1;
    }

    // optional float source_price = 22;
    if (has_source_price()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentInfo)
    MergeFrom(*source);
  }
}

void DocumentInfo::MergeFrom(const DocumentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_promo_info()->::cosmo::pb::PromoInfo::MergeFrom(from.promo_info());
    }
    if (cached_has_bits & 0x00000002u) {
      is_from_socdem_source_ = from.is_from_socdem_source_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_from_similar_source_ = from.is_from_similar_source_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_from_visited_source_ = from.is_from_visited_source_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_from_clicked_source_ = from.is_from_clicked_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      porn_weight_ = from.porn_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      theme_hash_ = from.theme_hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      clicks_count_ = from.clicks_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      shows_count_ = from.shows_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      pubdate_ = from.pubdate_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_fulltext_ = from.is_fulltext_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_first_doc_ = from.is_first_doc_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_commercial_fulltext_ = from.is_commercial_fulltext_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_vk_ = from.is_vk_;
    }
    if (cached_has_bits & 0x00004000u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00008000u) {
      i2i_doc_id_ = from.i2i_doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      comments_ = from.comments_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_relap_doc_ = from.is_relap_doc_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_user_fulltext_ = from.is_user_fulltext_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_video_ = from.is_video_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_exploration_ = from.is_exploration_;
    }
    if (cached_has_bits & 0x00200000u) {
      source_price_ = from.source_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentInfo::CopyFrom(const DocumentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentInfo::IsInitialized() const {
  return true;
}

void DocumentInfo::Swap(DocumentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentInfo::InternalSwap(DocumentInfo* other) {
  using std::swap;
  swap(promo_info_, other->promo_info_);
  swap(is_from_socdem_source_, other->is_from_socdem_source_);
  swap(is_from_similar_source_, other->is_from_similar_source_);
  swap(is_from_visited_source_, other->is_from_visited_source_);
  swap(is_from_clicked_source_, other->is_from_clicked_source_);
  swap(porn_weight_, other->porn_weight_);
  swap(theme_hash_, other->theme_hash_);
  swap(clicks_count_, other->clicks_count_);
  swap(shows_count_, other->shows_count_);
  swap(pubdate_, other->pubdate_);
  swap(is_fulltext_, other->is_fulltext_);
  swap(is_first_doc_, other->is_first_doc_);
  swap(is_commercial_fulltext_, other->is_commercial_fulltext_);
  swap(is_vk_, other->is_vk_);
  swap(likes_, other->likes_);
  swap(i2i_doc_id_, other->i2i_doc_id_);
  swap(comments_, other->comments_);
  swap(is_relap_doc_, other->is_relap_doc_);
  swap(is_user_fulltext_, other->is_user_fulltext_);
  swap(is_video_, other->is_video_);
  swap(is_exploration_, other->is_exploration_);
  swap(source_price_, other->source_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentInfo

// optional bool is_from_socdem_source = 1;
bool DocumentInfo::has_is_from_socdem_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentInfo::set_has_is_from_socdem_source() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentInfo::clear_has_is_from_socdem_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentInfo::clear_is_from_socdem_source() {
  is_from_socdem_source_ = false;
  clear_has_is_from_socdem_source();
}
bool DocumentInfo::is_from_socdem_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_socdem_source)
  return is_from_socdem_source_;
}
void DocumentInfo::set_is_from_socdem_source(bool value) {
  set_has_is_from_socdem_source();
  is_from_socdem_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_socdem_source)
}

// optional bool is_from_similar_source = 2;
bool DocumentInfo::has_is_from_similar_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentInfo::set_has_is_from_similar_source() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentInfo::clear_has_is_from_similar_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentInfo::clear_is_from_similar_source() {
  is_from_similar_source_ = false;
  clear_has_is_from_similar_source();
}
bool DocumentInfo::is_from_similar_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_similar_source)
  return is_from_similar_source_;
}
void DocumentInfo::set_is_from_similar_source(bool value) {
  set_has_is_from_similar_source();
  is_from_similar_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_similar_source)
}

// optional bool is_from_visited_source = 3;
bool DocumentInfo::has_is_from_visited_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentInfo::set_has_is_from_visited_source() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentInfo::clear_has_is_from_visited_source() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentInfo::clear_is_from_visited_source() {
  is_from_visited_source_ = false;
  clear_has_is_from_visited_source();
}
bool DocumentInfo::is_from_visited_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_visited_source)
  return is_from_visited_source_;
}
void DocumentInfo::set_is_from_visited_source(bool value) {
  set_has_is_from_visited_source();
  is_from_visited_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_visited_source)
}

// optional bool is_from_clicked_source = 4;
bool DocumentInfo::has_is_from_clicked_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentInfo::set_has_is_from_clicked_source() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentInfo::clear_has_is_from_clicked_source() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentInfo::clear_is_from_clicked_source() {
  is_from_clicked_source_ = false;
  clear_has_is_from_clicked_source();
}
bool DocumentInfo::is_from_clicked_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_clicked_source)
  return is_from_clicked_source_;
}
void DocumentInfo::set_is_from_clicked_source(bool value) {
  set_has_is_from_clicked_source();
  is_from_clicked_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_clicked_source)
}

// optional float porn_weight = 5;
bool DocumentInfo::has_porn_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentInfo::set_has_porn_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentInfo::clear_has_porn_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentInfo::clear_porn_weight() {
  porn_weight_ = 0;
  clear_has_porn_weight();
}
float DocumentInfo::porn_weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.porn_weight)
  return porn_weight_;
}
void DocumentInfo::set_porn_weight(float value) {
  set_has_porn_weight();
  porn_weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.porn_weight)
}

// optional int64 theme_hash = 6;
bool DocumentInfo::has_theme_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocumentInfo::set_has_theme_hash() {
  _has_bits_[0] |= 0x00000040u;
}
void DocumentInfo::clear_has_theme_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentInfo::clear_theme_hash() {
  theme_hash_ = GOOGLE_LONGLONG(0);
  clear_has_theme_hash();
}
::google::protobuf::int64 DocumentInfo::theme_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.theme_hash)
  return theme_hash_;
}
void DocumentInfo::set_theme_hash(::google::protobuf::int64 value) {
  set_has_theme_hash();
  theme_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.theme_hash)
}

// optional int64 clicks_count = 7;
bool DocumentInfo::has_clicks_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DocumentInfo::set_has_clicks_count() {
  _has_bits_[0] |= 0x00000080u;
}
void DocumentInfo::clear_has_clicks_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentInfo::clear_clicks_count() {
  clicks_count_ = GOOGLE_LONGLONG(0);
  clear_has_clicks_count();
}
::google::protobuf::int64 DocumentInfo::clicks_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.clicks_count)
  return clicks_count_;
}
void DocumentInfo::set_clicks_count(::google::protobuf::int64 value) {
  set_has_clicks_count();
  clicks_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.clicks_count)
}

// optional int64 shows_count = 8;
bool DocumentInfo::has_shows_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DocumentInfo::set_has_shows_count() {
  _has_bits_[0] |= 0x00000100u;
}
void DocumentInfo::clear_has_shows_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentInfo::clear_shows_count() {
  shows_count_ = GOOGLE_LONGLONG(0);
  clear_has_shows_count();
}
::google::protobuf::int64 DocumentInfo::shows_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.shows_count)
  return shows_count_;
}
void DocumentInfo::set_shows_count(::google::protobuf::int64 value) {
  set_has_shows_count();
  shows_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.shows_count)
}

// optional bool is_fulltext = 9;
bool DocumentInfo::has_is_fulltext() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DocumentInfo::set_has_is_fulltext() {
  _has_bits_[0] |= 0x00000400u;
}
void DocumentInfo::clear_has_is_fulltext() {
  _has_bits_[0] &= ~0x00000400u;
}
void DocumentInfo::clear_is_fulltext() {
  is_fulltext_ = false;
  clear_has_is_fulltext();
}
bool DocumentInfo::is_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_fulltext)
  return is_fulltext_;
}
void DocumentInfo::set_is_fulltext(bool value) {
  set_has_is_fulltext();
  is_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_fulltext)
}

// optional int64 pubdate = 10;
bool DocumentInfo::has_pubdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DocumentInfo::set_has_pubdate() {
  _has_bits_[0] |= 0x00000200u;
}
void DocumentInfo::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000200u;
}
void DocumentInfo::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
::google::protobuf::int64 DocumentInfo::pubdate() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.pubdate)
  return pubdate_;
}
void DocumentInfo::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.pubdate)
}

// optional bool is_first_doc = 11;
bool DocumentInfo::has_is_first_doc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DocumentInfo::set_has_is_first_doc() {
  _has_bits_[0] |= 0x00000800u;
}
void DocumentInfo::clear_has_is_first_doc() {
  _has_bits_[0] &= ~0x00000800u;
}
void DocumentInfo::clear_is_first_doc() {
  is_first_doc_ = false;
  clear_has_is_first_doc();
}
bool DocumentInfo::is_first_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_first_doc)
  return is_first_doc_;
}
void DocumentInfo::set_is_first_doc(bool value) {
  set_has_is_first_doc();
  is_first_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_first_doc)
}

// optional bool is_commercial_fulltext = 12;
bool DocumentInfo::has_is_commercial_fulltext() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DocumentInfo::set_has_is_commercial_fulltext() {
  _has_bits_[0] |= 0x00001000u;
}
void DocumentInfo::clear_has_is_commercial_fulltext() {
  _has_bits_[0] &= ~0x00001000u;
}
void DocumentInfo::clear_is_commercial_fulltext() {
  is_commercial_fulltext_ = false;
  clear_has_is_commercial_fulltext();
}
bool DocumentInfo::is_commercial_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_commercial_fulltext)
  return is_commercial_fulltext_;
}
void DocumentInfo::set_is_commercial_fulltext(bool value) {
  set_has_is_commercial_fulltext();
  is_commercial_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_commercial_fulltext)
}

// optional bool is_vk = 13;
bool DocumentInfo::has_is_vk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DocumentInfo::set_has_is_vk() {
  _has_bits_[0] |= 0x00002000u;
}
void DocumentInfo::clear_has_is_vk() {
  _has_bits_[0] &= ~0x00002000u;
}
void DocumentInfo::clear_is_vk() {
  is_vk_ = false;
  clear_has_is_vk();
}
bool DocumentInfo::is_vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_vk)
  return is_vk_;
}
void DocumentInfo::set_is_vk(bool value) {
  set_has_is_vk();
  is_vk_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_vk)
}

// optional int64 i2i_doc_id = 14;
bool DocumentInfo::has_i2i_doc_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DocumentInfo::set_has_i2i_doc_id() {
  _has_bits_[0] |= 0x00008000u;
}
void DocumentInfo::clear_has_i2i_doc_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void DocumentInfo::clear_i2i_doc_id() {
  i2i_doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_i2i_doc_id();
}
::google::protobuf::int64 DocumentInfo::i2i_doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.i2i_doc_id)
  return i2i_doc_id_;
}
void DocumentInfo::set_i2i_doc_id(::google::protobuf::int64 value) {
  set_has_i2i_doc_id();
  i2i_doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.i2i_doc_id)
}

// optional bool is_relap_doc = 15;
bool DocumentInfo::has_is_relap_doc() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DocumentInfo::set_has_is_relap_doc() {
  _has_bits_[0] |= 0x00020000u;
}
void DocumentInfo::clear_has_is_relap_doc() {
  _has_bits_[0] &= ~0x00020000u;
}
void DocumentInfo::clear_is_relap_doc() {
  is_relap_doc_ = false;
  clear_has_is_relap_doc();
}
bool DocumentInfo::is_relap_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_relap_doc)
  return is_relap_doc_;
}
void DocumentInfo::set_is_relap_doc(bool value) {
  set_has_is_relap_doc();
  is_relap_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_relap_doc)
}

// optional .cosmo.pb.PromoInfo promo_info = 16;
bool DocumentInfo::has_promo_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentInfo::set_has_promo_info() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentInfo::clear_has_promo_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentInfo::clear_promo_info() {
  if (promo_info_ != NULL) promo_info_->::cosmo::pb::PromoInfo::Clear();
  clear_has_promo_info();
}
const ::cosmo::pb::PromoInfo& DocumentInfo::promo_info() const {
  const ::cosmo::pb::PromoInfo* p = promo_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.promo_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PromoInfo*>(
      &::cosmo::pb::_PromoInfo_default_instance_);
}
::cosmo::pb::PromoInfo* DocumentInfo::mutable_promo_info() {
  set_has_promo_info();
  if (promo_info_ == NULL) {
    promo_info_ = new ::cosmo::pb::PromoInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentInfo.promo_info)
  return promo_info_;
}
::cosmo::pb::PromoInfo* DocumentInfo::release_promo_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentInfo.promo_info)
  clear_has_promo_info();
  ::cosmo::pb::PromoInfo* temp = promo_info_;
  promo_info_ = NULL;
  return temp;
}
void DocumentInfo::set_allocated_promo_info(::cosmo::pb::PromoInfo* promo_info) {
  delete promo_info_;
  promo_info_ = promo_info;
  if (promo_info) {
    set_has_promo_info();
  } else {
    clear_has_promo_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentInfo.promo_info)
}

// optional int32 likes = 17;
bool DocumentInfo::has_likes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DocumentInfo::set_has_likes() {
  _has_bits_[0] |= 0x00004000u;
}
void DocumentInfo::clear_has_likes() {
  _has_bits_[0] &= ~0x00004000u;
}
void DocumentInfo::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
::google::protobuf::int32 DocumentInfo::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.likes)
  return likes_;
}
void DocumentInfo::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.likes)
}

// optional int32 comments = 18;
bool DocumentInfo::has_comments() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DocumentInfo::set_has_comments() {
  _has_bits_[0] |= 0x00010000u;
}
void DocumentInfo::clear_has_comments() {
  _has_bits_[0] &= ~0x00010000u;
}
void DocumentInfo::clear_comments() {
  comments_ = 0;
  clear_has_comments();
}
::google::protobuf::int32 DocumentInfo::comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.comments)
  return comments_;
}
void DocumentInfo::set_comments(::google::protobuf::int32 value) {
  set_has_comments();
  comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.comments)
}

// optional bool is_user_fulltext = 19;
bool DocumentInfo::has_is_user_fulltext() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DocumentInfo::set_has_is_user_fulltext() {
  _has_bits_[0] |= 0x00040000u;
}
void DocumentInfo::clear_has_is_user_fulltext() {
  _has_bits_[0] &= ~0x00040000u;
}
void DocumentInfo::clear_is_user_fulltext() {
  is_user_fulltext_ = false;
  clear_has_is_user_fulltext();
}
bool DocumentInfo::is_user_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_user_fulltext)
  return is_user_fulltext_;
}
void DocumentInfo::set_is_user_fulltext(bool value) {
  set_has_is_user_fulltext();
  is_user_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_user_fulltext)
}

// optional bool is_video = 20;
bool DocumentInfo::has_is_video() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DocumentInfo::set_has_is_video() {
  _has_bits_[0] |= 0x00080000u;
}
void DocumentInfo::clear_has_is_video() {
  _has_bits_[0] &= ~0x00080000u;
}
void DocumentInfo::clear_is_video() {
  is_video_ = false;
  clear_has_is_video();
}
bool DocumentInfo::is_video() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_video)
  return is_video_;
}
void DocumentInfo::set_is_video(bool value) {
  set_has_is_video();
  is_video_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_video)
}

// optional bool is_exploration = 21;
bool DocumentInfo::has_is_exploration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DocumentInfo::set_has_is_exploration() {
  _has_bits_[0] |= 0x00100000u;
}
void DocumentInfo::clear_has_is_exploration() {
  _has_bits_[0] &= ~0x00100000u;
}
void DocumentInfo::clear_is_exploration() {
  is_exploration_ = false;
  clear_has_is_exploration();
}
bool DocumentInfo::is_exploration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_exploration)
  return is_exploration_;
}
void DocumentInfo::set_is_exploration(bool value) {
  set_has_is_exploration();
  is_exploration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_exploration)
}

// optional float source_price = 22;
bool DocumentInfo::has_source_price() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DocumentInfo::set_has_source_price() {
  _has_bits_[0] |= 0x00200000u;
}
void DocumentInfo::clear_has_source_price() {
  _has_bits_[0] &= ~0x00200000u;
}
void DocumentInfo::clear_source_price() {
  source_price_ = 0;
  clear_has_source_price();
}
float DocumentInfo::source_price() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.source_price)
  return source_price_;
}
void DocumentInfo::set_source_price(float value) {
  set_has_source_price();
  source_price_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.source_price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kCategoryIdFieldNumber;
const int Document::kDocIdFieldNumber;
const int Document::kSourceIdFieldNumber;
const int Document::kTypeFieldNumber;
const int Document::kInterleavingInfoFieldNumber;
const int Document::kRankFieldNumber;
const int Document::kSourceRankFieldNumber;
const int Document::kSiteHashFieldNumber;
const int Document::kFlagsFieldNumber;
const int Document::kDocumentInfoFieldNumber;
const int Document::kEridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  erid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_erid()) {
    erid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.erid_);
  }
  if (from.has_interleaving_info()) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo(*from.interleaving_info_);
  } else {
    interleaving_info_ = NULL;
  }
  if (from.has_flags()) {
    flags_ = new ::cosmo::pb::DocumentFlags(*from.flags_);
  } else {
    flags_ = NULL;
  }
  if (from.has_document_info()) {
    document_info_ = new ::cosmo::pb::DocumentInfo(*from.document_info_);
  } else {
    document_info_ = NULL;
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&site_hash_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(site_hash_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  erid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&interleaving_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&site_hash_) -
      reinterpret_cast<char*>(&interleaving_info_)) + sizeof(site_hash_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  erid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interleaving_info_;
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete document_info_;
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!erid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*erid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(interleaving_info_ != NULL);
      interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flags_ != NULL);
      flags_->::cosmo::pb::DocumentFlags::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(document_info_ != NULL);
      document_info_->::cosmo::pb::DocumentInfo::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_id_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(source_id_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&site_hash_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(site_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Document.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::Document_Type_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::Document_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleaving_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float source_rank = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_source_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 site_hash = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentFlags flags = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentInfo document_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string erid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_erid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->erid().data(), static_cast<int>(this->erid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.Document.erid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // required int64 doc_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->doc_id(), output);
  }

  // optional int64 source_id = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->source_id(), output);
  }

  // optional .cosmo.pb.Document.Type type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->interleaving_info_, output);
  }

  // optional float rank = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->rank(), output);
  }

  // optional float source_rank = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->source_rank(), output);
  }

  // optional int64 site_hash = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->site_hash(), output);
  }

  // optional .cosmo.pb.DocumentFlags flags = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->flags_, output);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->document_info_, output);
  }

  // optional string erid = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->erid().data(), static_cast<int>(this->erid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.Document.erid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->erid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // required int64 doc_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->doc_id(), target);
  }

  // optional int64 source_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->source_id(), target);
  }

  // optional .cosmo.pb.Document.Type type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->interleaving_info_, deterministic, target);
  }

  // optional float rank = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->rank(), target);
  }

  // optional float source_rank = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->source_rank(), target);
  }

  // optional int64 site_hash = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->site_hash(), target);
  }

  // optional .cosmo.pb.DocumentFlags flags = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->flags_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->document_info_, deterministic, target);
  }

  // optional string erid = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->erid().data(), static_cast<int>(this->erid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.Document.erid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->erid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 3;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string erid = 15;
    if (has_erid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->erid());
    }

    // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
    if (has_interleaving_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interleaving_info_);
    }

    // optional .cosmo.pb.DocumentFlags flags = 13;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flags_);
    }

    // optional .cosmo.pb.DocumentInfo document_info = 14;
    if (has_document_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_info_);
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional .cosmo.pb.Document.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 source_id = 4;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float rank = 9;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional float source_rank = 10;
    if (has_source_rank()) {
      total_size += 1 + 4;
    }

    // optional int64 site_hash = 11;
    if (has_site_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->site_hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_erid();
      erid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.erid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_interleaving_info()->::cosmo::pb::InterleavingInfo::MergeFrom(from.interleaving_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_flags()->::cosmo::pb::DocumentFlags::MergeFrom(from.flags());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_document_info()->::cosmo::pb::DocumentInfo::MergeFrom(from.document_info());
    }
    if (cached_has_bits & 0x00000010u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000200u) {
      source_rank_ = from.source_rank_;
    }
    if (cached_has_bits & 0x00000400u) {
      site_hash_ = from.site_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_interleaving_info()) {
    if (!this->interleaving_info_->IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  erid_.Swap(&other->erid_);
  swap(interleaving_info_, other->interleaving_info_);
  swap(flags_, other->flags_);
  swap(document_info_, other->document_info_);
  swap(doc_id_, other->doc_id_);
  swap(category_id_, other->category_id_);
  swap(type_, other->type_);
  swap(source_id_, other->source_id_);
  swap(rank_, other->rank_);
  swap(source_rank_, other->source_rank_);
  swap(site_hash_, other->site_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// optional int32 category_id = 2;
bool Document::has_category_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Document::set_has_category_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Document::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Document::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 Document::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.category_id)
  return category_id_;
}
void Document::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.category_id)
}

// required int64 doc_id = 3;
bool Document::has_doc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Document::set_has_doc_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Document::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.doc_id)
  return doc_id_;
}
void Document::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.doc_id)
}

// optional int64 source_id = 4;
bool Document::has_source_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Document::set_has_source_id() {
  _has_bits_[0] |= 0x00000080u;
}
void Document::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void Document::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 Document::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.source_id)
  return source_id_;
}
void Document::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.source_id)
}

// optional .cosmo.pb.Document.Type type = 5;
bool Document::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Document::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void Document::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void Document::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
void Document::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.type)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
bool Document::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
const ::cosmo::pb::InterleavingInfo& Document::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
::cosmo::pb::InterleavingInfo* Document::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.interleaving_info)
  return interleaving_info_;
}
::cosmo::pb::InterleavingInfo* Document::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
void Document::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.interleaving_info)
}

// optional float rank = 9;
bool Document::has_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Document::set_has_rank() {
  _has_bits_[0] |= 0x00000100u;
}
void Document::clear_has_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
void Document::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float Document::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.rank)
  return rank_;
}
void Document::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.rank)
}

// optional float source_rank = 10;
bool Document::has_source_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Document::set_has_source_rank() {
  _has_bits_[0] |= 0x00000200u;
}
void Document::clear_has_source_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
void Document::clear_source_rank() {
  source_rank_ = 0;
  clear_has_source_rank();
}
float Document::source_rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.source_rank)
  return source_rank_;
}
void Document::set_source_rank(float value) {
  set_has_source_rank();
  source_rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.source_rank)
}

// optional int64 site_hash = 11;
bool Document::has_site_hash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Document::set_has_site_hash() {
  _has_bits_[0] |= 0x00000400u;
}
void Document::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000400u;
}
void Document::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 Document::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.site_hash)
  return site_hash_;
}
void Document::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.site_hash)
}

// optional .cosmo.pb.DocumentFlags flags = 13;
bool Document::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Document::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void Document::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void Document::clear_flags() {
  if (flags_ != NULL) flags_->::cosmo::pb::DocumentFlags::Clear();
  clear_has_flags();
}
const ::cosmo::pb::DocumentFlags& Document::flags() const {
  const ::cosmo::pb::DocumentFlags* p = flags_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.flags)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentFlags*>(
      &::cosmo::pb::_DocumentFlags_default_instance_);
}
::cosmo::pb::DocumentFlags* Document::mutable_flags() {
  set_has_flags();
  if (flags_ == NULL) {
    flags_ = new ::cosmo::pb::DocumentFlags;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.flags)
  return flags_;
}
::cosmo::pb::DocumentFlags* Document::release_flags() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.flags)
  clear_has_flags();
  ::cosmo::pb::DocumentFlags* temp = flags_;
  flags_ = NULL;
  return temp;
}
void Document::set_allocated_flags(::cosmo::pb::DocumentFlags* flags) {
  delete flags_;
  flags_ = flags;
  if (flags) {
    set_has_flags();
  } else {
    clear_has_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.flags)
}

// optional .cosmo.pb.DocumentInfo document_info = 14;
bool Document::has_document_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Document::set_has_document_info() {
  _has_bits_[0] |= 0x00000008u;
}
void Document::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void Document::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
const ::cosmo::pb::DocumentInfo& Document::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
::cosmo::pb::DocumentInfo* Document::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.document_info)
  return document_info_;
}
::cosmo::pb::DocumentInfo* Document::release_document_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
void Document::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.document_info)
}

// optional string erid = 15;
bool Document::has_erid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_erid() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_erid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_erid() {
  erid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_erid();
}
const ::std::string& Document::erid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.erid)
  return erid_.GetNoArena();
}
void Document::set_erid(const ::std::string& value) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.erid)
}
#if LANG_CXX11
void Document::set_erid(::std::string&& value) {
  set_has_erid();
  erid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.Document.erid)
}
#endif
void Document::set_erid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.Document.erid)
}
void Document::set_erid(const char* value, size_t size) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.Document.erid)
}
::std::string* Document::mutable_erid() {
  set_has_erid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.erid)
  return erid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_erid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.erid)
  clear_has_erid();
  return erid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_erid(::std::string* erid) {
  if (erid != NULL) {
    set_has_erid();
  } else {
    clear_has_erid();
  }
  erid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), erid);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.erid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankerInfo_Item::kNameFieldNumber;
const int RankerInfo_Item::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankerInfo_Item::RankerInfo_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.RankerInfo.Item)
}
RankerInfo_Item::RankerInfo_Item(const RankerInfo_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.RankerInfo.Item)
}

void RankerInfo_Item::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RankerInfo_Item::~RankerInfo_Item() {
  // @@protoc_insertion_point(destructor:cosmo.pb.RankerInfo.Item)
  SharedDtor();
}

void RankerInfo_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RankerInfo_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankerInfo_Item::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankerInfo_Item& RankerInfo_Item::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankerInfo_Item* RankerInfo_Item::New(::google::protobuf::Arena* arena) const {
  RankerInfo_Item* n = new RankerInfo_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankerInfo_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.RankerInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankerInfo_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.RankerInfo.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.RankerInfo.Item.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.RankerInfo.Item.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.RankerInfo.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.RankerInfo.Item)
  return false;
#undef DO_
}

void RankerInfo_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.RankerInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.RankerInfo.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.RankerInfo.Item.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.RankerInfo.Item)
}

::google::protobuf::uint8* RankerInfo_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.RankerInfo.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.RankerInfo.Item.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.RankerInfo.Item.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.RankerInfo.Item)
  return target;
}

size_t RankerInfo_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.RankerInfo.Item)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t RankerInfo_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.RankerInfo.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankerInfo_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.RankerInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const RankerInfo_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankerInfo_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.RankerInfo.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.RankerInfo.Item)
    MergeFrom(*source);
  }
}

void RankerInfo_Item::MergeFrom(const RankerInfo_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.RankerInfo.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void RankerInfo_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.RankerInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankerInfo_Item::CopyFrom(const RankerInfo_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.RankerInfo.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerInfo_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RankerInfo_Item::Swap(RankerInfo_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankerInfo_Item::InternalSwap(RankerInfo_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankerInfo_Item::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankerInfo_Item

// required string name = 1;
bool RankerInfo_Item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankerInfo_Item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RankerInfo_Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankerInfo_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& RankerInfo_Item::name() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.Item.name)
  return name_.GetNoArena();
}
void RankerInfo_Item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.RankerInfo.Item.name)
}
#if LANG_CXX11
void RankerInfo_Item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.RankerInfo.Item.name)
}
#endif
void RankerInfo_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.RankerInfo.Item.name)
}
void RankerInfo_Item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.RankerInfo.Item.name)
}
::std::string* RankerInfo_Item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RankerInfo_Item::release_name() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankerInfo.Item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RankerInfo_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankerInfo.Item.name)
}

// required string value = 2;
bool RankerInfo_Item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankerInfo_Item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void RankerInfo_Item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankerInfo_Item::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& RankerInfo_Item::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.Item.value)
  return value_.GetNoArena();
}
void RankerInfo_Item::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.RankerInfo.Item.value)
}
#if LANG_CXX11
void RankerInfo_Item::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.RankerInfo.Item.value)
}
#endif
void RankerInfo_Item::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.RankerInfo.Item.value)
}
void RankerInfo_Item::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.RankerInfo.Item.value)
}
::std::string* RankerInfo_Item::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.Item.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RankerInfo_Item::release_value() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankerInfo.Item.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RankerInfo_Item::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankerInfo.Item.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankerInfo::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankerInfo::RankerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.RankerInfo)
}
RankerInfo::RankerInfo(const RankerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.RankerInfo)
}

void RankerInfo::SharedCtor() {
  _cached_size_ = 0;
}

RankerInfo::~RankerInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.RankerInfo)
  SharedDtor();
}

void RankerInfo::SharedDtor() {
}

void RankerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankerInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankerInfo& RankerInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankerInfo* RankerInfo::New(::google::protobuf::Arena* arena) const {
  RankerInfo* n = new RankerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.RankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.RankerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.RankerInfo.Item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.RankerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.RankerInfo)
  return false;
#undef DO_
}

void RankerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.RankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.RankerInfo.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.RankerInfo)
}

::google::protobuf::uint8* RankerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.RankerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.RankerInfo.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.RankerInfo)
  return target;
}

size_t RankerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.RankerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.RankerInfo.Item items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.RankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.RankerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.RankerInfo)
    MergeFrom(*source);
  }
}

void RankerInfo::MergeFrom(const RankerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.RankerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void RankerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.RankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankerInfo::CopyFrom(const RankerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.RankerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void RankerInfo::Swap(RankerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankerInfo::InternalSwap(RankerInfo* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankerInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankerInfo

// repeated .cosmo.pb.RankerInfo.Item items = 1;
int RankerInfo::items_size() const {
  return items_.size();
}
void RankerInfo::clear_items() {
  items_.Clear();
}
const ::cosmo::pb::RankerInfo_Item& RankerInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.items)
  return items_.Get(index);
}
::cosmo::pb::RankerInfo_Item* RankerInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.items)
  return items_.Mutable(index);
}
::cosmo::pb::RankerInfo_Item* RankerInfo::add_items() {
  // @@protoc_insertion_point(field_add:cosmo.pb.RankerInfo.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >*
RankerInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.RankerInfo.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >&
RankerInfo::items() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.RankerInfo.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMsgFieldNumber;
const int Error::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.Error.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Error.Code code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::Error_Code_IsValid(value)) {
            set_code(static_cast< ::cosmo::pb::Error_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.Error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional .cosmo.pb.Error.Code code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.Error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional .cosmo.pb.Error.Code code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .cosmo.pb.Error.Code code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional string msg = 1;
bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Error.msg)
  return msg_.GetNoArena();
}
void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.Error.msg)
}
#if LANG_CXX11
void Error::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.Error.msg)
}
#endif
void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.Error.msg)
}
void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.Error.msg)
}
::std::string* Error::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Error.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Error.msg)
}

// optional .cosmo.pb.Error.Code code = 2;
bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
::cosmo::pb::Error_Code Error::code() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Error.code)
  return static_cast< ::cosmo::pb::Error_Code >(code_);
}
void Error::set_code(::cosmo::pb::Error_Code value) {
  assert(::cosmo::pb::Error_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Error.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RetrieverStats::kDocumentsTotalFieldNumber;
const int RetrieverStats::kDocumentsProcessedFieldNumber;
const int RetrieverStats::kDocumentsSkippedFieldNumber;
const int RetrieverStats::kSourcesSelectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RetrieverStats::RetrieverStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.RetrieverStats)
}
RetrieverStats::RetrieverStats(const RetrieverStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&documents_total_, &from.documents_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&sources_selected_) -
    reinterpret_cast<char*>(&documents_total_)) + sizeof(sources_selected_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.RetrieverStats)
}

void RetrieverStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&documents_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sources_selected_) -
      reinterpret_cast<char*>(&documents_total_)) + sizeof(sources_selected_));
}

RetrieverStats::~RetrieverStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.RetrieverStats)
  SharedDtor();
}

void RetrieverStats::SharedDtor() {
}

void RetrieverStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetrieverStats::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RetrieverStats& RetrieverStats::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RetrieverStats* RetrieverStats::New(::google::protobuf::Arena* arena) const {
  RetrieverStats* n = new RetrieverStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RetrieverStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.RetrieverStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&documents_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sources_selected_) -
        reinterpret_cast<char*>(&documents_total_)) + sizeof(sources_selected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RetrieverStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.RetrieverStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 documents_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_documents_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &documents_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 documents_processed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_documents_processed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &documents_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 documents_skipped = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_documents_skipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &documents_skipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sources_selected = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sources_selected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sources_selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.RetrieverStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.RetrieverStats)
  return false;
#undef DO_
}

void RetrieverStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.RetrieverStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 documents_total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->documents_total(), output);
  }

  // optional int32 documents_processed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->documents_processed(), output);
  }

  // optional int32 documents_skipped = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->documents_skipped(), output);
  }

  // optional int32 sources_selected = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sources_selected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.RetrieverStats)
}

::google::protobuf::uint8* RetrieverStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.RetrieverStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 documents_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->documents_total(), target);
  }

  // optional int32 documents_processed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->documents_processed(), target);
  }

  // optional int32 documents_skipped = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->documents_skipped(), target);
  }

  // optional int32 sources_selected = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sources_selected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.RetrieverStats)
  return target;
}

size_t RetrieverStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.RetrieverStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 documents_total = 1;
    if (has_documents_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->documents_total());
    }

    // optional int32 documents_processed = 2;
    if (has_documents_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->documents_processed());
    }

    // optional int32 documents_skipped = 3;
    if (has_documents_skipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->documents_skipped());
    }

    // optional int32 sources_selected = 4;
    if (has_sources_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sources_selected());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetrieverStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.RetrieverStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieverStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RetrieverStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.RetrieverStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.RetrieverStats)
    MergeFrom(*source);
  }
}

void RetrieverStats::MergeFrom(const RetrieverStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.RetrieverStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      documents_total_ = from.documents_total_;
    }
    if (cached_has_bits & 0x00000002u) {
      documents_processed_ = from.documents_processed_;
    }
    if (cached_has_bits & 0x00000004u) {
      documents_skipped_ = from.documents_skipped_;
    }
    if (cached_has_bits & 0x00000008u) {
      sources_selected_ = from.sources_selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetrieverStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.RetrieverStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieverStats::CopyFrom(const RetrieverStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.RetrieverStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieverStats::IsInitialized() const {
  return true;
}

void RetrieverStats::Swap(RetrieverStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RetrieverStats::InternalSwap(RetrieverStats* other) {
  using std::swap;
  swap(documents_total_, other->documents_total_);
  swap(documents_processed_, other->documents_processed_);
  swap(documents_skipped_, other->documents_skipped_);
  swap(sources_selected_, other->sources_selected_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RetrieverStats::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RetrieverStats

// optional int32 documents_total = 1;
bool RetrieverStats::has_documents_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RetrieverStats::set_has_documents_total() {
  _has_bits_[0] |= 0x00000001u;
}
void RetrieverStats::clear_has_documents_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void RetrieverStats::clear_documents_total() {
  documents_total_ = 0;
  clear_has_documents_total();
}
::google::protobuf::int32 RetrieverStats::documents_total() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_total)
  return documents_total_;
}
void RetrieverStats::set_documents_total(::google::protobuf::int32 value) {
  set_has_documents_total();
  documents_total_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_total)
}

// optional int32 documents_processed = 2;
bool RetrieverStats::has_documents_processed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RetrieverStats::set_has_documents_processed() {
  _has_bits_[0] |= 0x00000002u;
}
void RetrieverStats::clear_has_documents_processed() {
  _has_bits_[0] &= ~0x00000002u;
}
void RetrieverStats::clear_documents_processed() {
  documents_processed_ = 0;
  clear_has_documents_processed();
}
::google::protobuf::int32 RetrieverStats::documents_processed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_processed)
  return documents_processed_;
}
void RetrieverStats::set_documents_processed(::google::protobuf::int32 value) {
  set_has_documents_processed();
  documents_processed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_processed)
}

// optional int32 documents_skipped = 3;
bool RetrieverStats::has_documents_skipped() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RetrieverStats::set_has_documents_skipped() {
  _has_bits_[0] |= 0x00000004u;
}
void RetrieverStats::clear_has_documents_skipped() {
  _has_bits_[0] &= ~0x00000004u;
}
void RetrieverStats::clear_documents_skipped() {
  documents_skipped_ = 0;
  clear_has_documents_skipped();
}
::google::protobuf::int32 RetrieverStats::documents_skipped() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_skipped)
  return documents_skipped_;
}
void RetrieverStats::set_documents_skipped(::google::protobuf::int32 value) {
  set_has_documents_skipped();
  documents_skipped_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_skipped)
}

// optional int32 sources_selected = 4;
bool RetrieverStats::has_sources_selected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RetrieverStats::set_has_sources_selected() {
  _has_bits_[0] |= 0x00000008u;
}
void RetrieverStats::clear_has_sources_selected() {
  _has_bits_[0] &= ~0x00000008u;
}
void RetrieverStats::clear_sources_selected() {
  sources_selected_ = 0;
  clear_has_sources_selected();
}
::google::protobuf::int32 RetrieverStats::sources_selected() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.sources_selected)
  return sources_selected_;
}
void RetrieverStats::set_sources_selected(::google::protobuf::int32 value) {
  set_has_sources_selected();
  sources_selected_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.sources_selected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MixerInfo::kExperimentIdFieldNumber;
const int MixerInfo::kShowedFromAFieldNumber;
const int MixerInfo::kNotAffectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MixerInfo::MixerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.MixerInfo)
}
MixerInfo::MixerInfo(const MixerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&experiment_id_, &from.experiment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_affected_) -
    reinterpret_cast<char*>(&experiment_id_)) + sizeof(not_affected_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.MixerInfo)
}

void MixerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&experiment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_affected_) -
      reinterpret_cast<char*>(&experiment_id_)) + sizeof(not_affected_));
}

MixerInfo::~MixerInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.MixerInfo)
  SharedDtor();
}

void MixerInfo::SharedDtor() {
}

void MixerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixerInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MixerInfo& MixerInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

MixerInfo* MixerInfo::New(::google::protobuf::Arena* arena) const {
  MixerInfo* n = new MixerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MixerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.MixerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&experiment_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_affected_) -
        reinterpret_cast<char*>(&experiment_id_)) + sizeof(not_affected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MixerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.MixerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 experiment_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool showed_from_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_showed_from_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showed_from_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool not_affected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_not_affected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_affected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.MixerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.MixerInfo)
  return false;
#undef DO_
}

void MixerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.MixerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->experiment_id(), output);
  }

  // optional bool showed_from_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->showed_from_a(), output);
  }

  // optional bool not_affected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->not_affected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.MixerInfo)
}

::google::protobuf::uint8* MixerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.MixerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->experiment_id(), target);
  }

  // optional bool showed_from_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->showed_from_a(), target);
  }

  // optional bool not_affected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->not_affected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.MixerInfo)
  return target;
}

size_t MixerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.MixerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 experiment_id = 1;
  if (has_experiment_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bool showed_from_a = 2;
    if (has_showed_from_a()) {
      total_size += 1 + 1;
    }

    // optional bool not_affected = 3;
    if (has_not_affected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.MixerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MixerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MixerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.MixerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.MixerInfo)
    MergeFrom(*source);
  }
}

void MixerInfo::MergeFrom(const MixerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.MixerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      experiment_id_ = from.experiment_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      showed_from_a_ = from.showed_from_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      not_affected_ = from.not_affected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MixerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.MixerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixerInfo::CopyFrom(const MixerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.MixerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MixerInfo::Swap(MixerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MixerInfo::InternalSwap(MixerInfo* other) {
  using std::swap;
  swap(experiment_id_, other->experiment_id_);
  swap(showed_from_a_, other->showed_from_a_);
  swap(not_affected_, other->not_affected_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MixerInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MixerInfo

// required uint32 experiment_id = 1;
bool MixerInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MixerInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MixerInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MixerInfo::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 MixerInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.experiment_id)
  return experiment_id_;
}
void MixerInfo::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.experiment_id)
}

// optional bool showed_from_a = 2;
bool MixerInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MixerInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000002u;
}
void MixerInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void MixerInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
bool MixerInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.showed_from_a)
  return showed_from_a_;
}
void MixerInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.showed_from_a)
}

// optional bool not_affected = 3;
bool MixerInfo::has_not_affected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MixerInfo::set_has_not_affected() {
  _has_bits_[0] |= 0x00000004u;
}
void MixerInfo::clear_has_not_affected() {
  _has_bits_[0] &= ~0x00000004u;
}
void MixerInfo::clear_not_affected() {
  not_affected_ = false;
  clear_has_not_affected();
}
bool MixerInfo::not_affected() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.not_affected)
  return not_affected_;
}
void MixerInfo::set_not_affected(bool value) {
  set_has_not_affected();
  not_affected_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.not_affected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geo::kCountryIdFieldNumber;
const int Geo::kRegionIdFieldNumber;
const int Geo::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geo::Geo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Geo)
}
Geo::Geo(const Geo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&country_id_, &from.country_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_id_) -
    reinterpret_cast<char*>(&country_id_)) + sizeof(city_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Geo)
}

void Geo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&country_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&country_id_)) + sizeof(city_id_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Geo)
  SharedDtor();
}

void Geo::SharedDtor() {
}

void Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geo& Geo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Geo* Geo::New(::google::protobuf::Arena* arena) const {
  Geo* n = new Geo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&country_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&city_id_) -
        reinterpret_cast<char*>(&country_id_)) + sizeof(city_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 country_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_country_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 city_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_city_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Geo)
  return false;
#undef DO_
}

void Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 country_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country_id(), output);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->region_id(), output);
  }

  // optional int32 city_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->city_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Geo)
}

::google::protobuf::uint8* Geo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 country_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country_id(), target);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->region_id(), target);
  }

  // optional int32 city_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->city_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Geo)
  return target;
}

size_t Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Geo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country_id());
    }

    // optional int32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional int32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  const Geo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Geo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Geo)
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      country_id_ = from.country_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      city_id_ = from.city_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Geo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  return true;
}

void Geo::Swap(Geo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geo::InternalSwap(Geo* other) {
  using std::swap;
  swap(country_id_, other->country_id_);
  swap(region_id_, other->region_id_);
  swap(city_id_, other->city_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Geo

// optional int32 country_id = 1;
bool Geo::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Geo::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Geo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Geo::clear_country_id() {
  country_id_ = 0;
  clear_has_country_id();
}
::google::protobuf::int32 Geo::country_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.country_id)
  return country_id_;
}
void Geo::set_country_id(::google::protobuf::int32 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.country_id)
}

// optional int32 region_id = 2;
bool Geo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Geo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Geo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Geo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
::google::protobuf::int32 Geo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.region_id)
  return region_id_;
}
void Geo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.region_id)
}

// optional int32 city_id = 3;
bool Geo::has_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Geo::set_has_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Geo::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Geo::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
::google::protobuf::int32 Geo::city_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.city_id)
  return city_id_;
}
void Geo::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.city_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metrics_SubscriptionMetrics::kCntFieldNumber;
const int Metrics_SubscriptionMetrics::kLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metrics_SubscriptionMetrics::Metrics_SubscriptionMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Metrics.SubscriptionMetrics)
}
Metrics_SubscriptionMetrics::Metrics_SubscriptionMetrics(const Metrics_SubscriptionMetrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_ts_, &from.last_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&cnt_) -
    reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Metrics.SubscriptionMetrics)
}

void Metrics_SubscriptionMetrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cnt_) -
      reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
}

Metrics_SubscriptionMetrics::~Metrics_SubscriptionMetrics() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Metrics.SubscriptionMetrics)
  SharedDtor();
}

void Metrics_SubscriptionMetrics::SharedDtor() {
}

void Metrics_SubscriptionMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metrics_SubscriptionMetrics::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metrics_SubscriptionMetrics& Metrics_SubscriptionMetrics::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metrics_SubscriptionMetrics* Metrics_SubscriptionMetrics::New(::google::protobuf::Arena* arena) const {
  Metrics_SubscriptionMetrics* n = new Metrics_SubscriptionMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metrics_SubscriptionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Metrics.SubscriptionMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnt_) -
        reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Metrics_SubscriptionMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Metrics.SubscriptionMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Metrics.SubscriptionMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Metrics.SubscriptionMetrics)
  return false;
#undef DO_
}

void Metrics_SubscriptionMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Metrics.SubscriptionMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cnt(), output);
  }

  // required int64 last_ts = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Metrics.SubscriptionMetrics)
}

::google::protobuf::uint8* Metrics_SubscriptionMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Metrics.SubscriptionMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cnt(), target);
  }

  // required int64 last_ts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Metrics.SubscriptionMetrics)
  return target;
}

size_t Metrics_SubscriptionMetrics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.Metrics.SubscriptionMetrics)
  size_t total_size = 0;

  if (has_last_ts()) {
    // required int64 last_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  if (has_cnt()) {
    // required uint32 cnt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cnt());
  }

  return total_size;
}
size_t Metrics_SubscriptionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Metrics.SubscriptionMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());

    // required uint32 cnt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metrics_SubscriptionMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Metrics.SubscriptionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics_SubscriptionMetrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metrics_SubscriptionMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Metrics.SubscriptionMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Metrics.SubscriptionMetrics)
    MergeFrom(*source);
  }
}

void Metrics_SubscriptionMetrics::MergeFrom(const Metrics_SubscriptionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Metrics.SubscriptionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_ts_ = from.last_ts_;
    }
    if (cached_has_bits & 0x00000002u) {
      cnt_ = from.cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Metrics_SubscriptionMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Metrics.SubscriptionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics_SubscriptionMetrics::CopyFrom(const Metrics_SubscriptionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Metrics.SubscriptionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics_SubscriptionMetrics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Metrics_SubscriptionMetrics::Swap(Metrics_SubscriptionMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metrics_SubscriptionMetrics::InternalSwap(Metrics_SubscriptionMetrics* other) {
  using std::swap;
  swap(last_ts_, other->last_ts_);
  swap(cnt_, other->cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metrics_SubscriptionMetrics::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metrics_SubscriptionMetrics

// required uint32 cnt = 1;
bool Metrics_SubscriptionMetrics::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metrics_SubscriptionMetrics::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void Metrics_SubscriptionMetrics::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metrics_SubscriptionMetrics::clear_cnt() {
  cnt_ = 0u;
  clear_has_cnt();
}
::google::protobuf::uint32 Metrics_SubscriptionMetrics::cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.SubscriptionMetrics.cnt)
  return cnt_;
}
void Metrics_SubscriptionMetrics::set_cnt(::google::protobuf::uint32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.SubscriptionMetrics.cnt)
}

// required int64 last_ts = 2;
bool Metrics_SubscriptionMetrics::has_last_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metrics_SubscriptionMetrics::set_has_last_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void Metrics_SubscriptionMetrics::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metrics_SubscriptionMetrics::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 Metrics_SubscriptionMetrics::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.SubscriptionMetrics.last_ts)
  return last_ts_;
}
void Metrics_SubscriptionMetrics::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.SubscriptionMetrics.last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metrics::kAgeFieldNumber;
const int Metrics::kGenderFieldNumber;
const int Metrics::kHasEmailFieldNumber;
const int Metrics::kHasOkFieldNumber;
const int Metrics::kHasVkFieldNumber;
const int Metrics::kSimilarSourcesCntFieldNumber;
const int Metrics::kVisitedSourcesCntFieldNumber;
const int Metrics::kClickedSourcesCntFieldNumber;
const int Metrics::kSimilarSitesCntFieldNumber;
const int Metrics::kVisitedSitesCntFieldNumber;
const int Metrics::kClickedSitesCntFieldNumber;
const int Metrics::kVisitedSourcesVisitsFieldNumber;
const int Metrics::kClickedSourcesVisitsFieldNumber;
const int Metrics::kSitesForUserCntFieldNumber;
const int Metrics::kShowCategorySubscriptionFieldNumber;
const int Metrics::kGeoFieldNumber;
const int Metrics::kShowColdSourcesSubscriptionFieldNumber;
const int Metrics::kShowHotSourcesSubscriptionFieldNumber;
const int Metrics::kCategorySubscriptionMetricsFieldNumber;
const int Metrics::kColdSourcesSubscriptionMetricsFieldNumber;
const int Metrics::kHotSourcesSubscriptionMetricsFieldNumber;
const int Metrics::kColdLentaFieldNumber;
const int Metrics::kEmptyLentaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metrics::Metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geo()) {
    geo_ = new ::cosmo::pb::Geo(*from.geo_);
  } else {
    geo_ = NULL;
  }
  if (from.has_category_subscription_metrics()) {
    category_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics(*from.category_subscription_metrics_);
  } else {
    category_subscription_metrics_ = NULL;
  }
  if (from.has_cold_sources_subscription_metrics()) {
    cold_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics(*from.cold_sources_subscription_metrics_);
  } else {
    cold_sources_subscription_metrics_ = NULL;
  }
  if (from.has_hot_sources_subscription_metrics()) {
    hot_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics(*from.hot_sources_subscription_metrics_);
  } else {
    hot_sources_subscription_metrics_ = NULL;
  }
  ::memcpy(&age_, &from.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&empty_lenta_) -
    reinterpret_cast<char*>(&age_)) + sizeof(empty_lenta_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Metrics)
}

void Metrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&geo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&empty_lenta_) -
      reinterpret_cast<char*>(&geo_)) + sizeof(empty_lenta_));
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete category_subscription_metrics_;
  if (this != internal_default_instance()) delete cold_sources_subscription_metrics_;
  if (this != internal_default_instance()) delete hot_sources_subscription_metrics_;
}

void Metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metrics& Metrics::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metrics* Metrics::New(::google::protobuf::Arena* arena) const {
  Metrics* n = new Metrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geo_ != NULL);
      geo_->::cosmo::pb::Geo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(category_subscription_metrics_ != NULL);
      category_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cold_sources_subscription_metrics_ != NULL);
      cold_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hot_sources_subscription_metrics_ != NULL);
      hot_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&age_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visited_sources_cnt_) -
        reinterpret_cast<char*>(&age_)) + sizeof(visited_sources_cnt_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&has_email_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clicked_sites_cnt_) -
        reinterpret_cast<char*>(&has_email_)) + sizeof(clicked_sites_cnt_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&visited_sources_visits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&empty_lenta_) -
        reinterpret_cast<char*>(&visited_sources_visits_)) + sizeof(empty_lenta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Metrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 age = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_has_email();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_email_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ok = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_ok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_vk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_has_vk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_vk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 similar_sources_cnt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_similar_sources_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &similar_sources_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visited_sources_cnt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_visited_sources_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visited_sources_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicked_sources_cnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clicked_sources_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicked_sources_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 similar_sites_cnt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_similar_sites_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &similar_sites_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visited_sites_cnt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_visited_sites_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visited_sites_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicked_sites_cnt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_clicked_sites_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicked_sites_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visited_sources_visits = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_visited_sources_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visited_sources_visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicked_sources_visits = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_clicked_sources_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicked_sources_visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sites_for_user_cnt = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_sites_for_user_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sites_for_user_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_category_subscription = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_show_category_subscription();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_category_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Geo geo = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_cold_sources_subscription = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_show_cold_sources_subscription();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_cold_sources_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_hot_sources_subscription = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_show_hot_sources_subscription();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_hot_sources_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_subscription_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cold_sources_subscription_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hot_sources_subscription_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cold_lenta = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_cold_lenta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cold_lenta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool empty_lenta = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_empty_lenta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_lenta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Metrics)
  return false;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 age = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->age(), output);
  }

  // optional int32 gender = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gender(), output);
  }

  // optional bool has_email = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_email(), output);
  }

  // optional bool has_ok = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_ok(), output);
  }

  // optional bool has_vk = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_vk(), output);
  }

  // optional uint32 similar_sources_cnt = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->similar_sources_cnt(), output);
  }

  // optional uint32 visited_sources_cnt = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->visited_sources_cnt(), output);
  }

  // optional uint32 clicked_sources_cnt = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->clicked_sources_cnt(), output);
  }

  // optional uint32 similar_sites_cnt = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->similar_sites_cnt(), output);
  }

  // optional uint32 visited_sites_cnt = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->visited_sites_cnt(), output);
  }

  // optional uint32 clicked_sites_cnt = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->clicked_sites_cnt(), output);
  }

  // optional uint32 visited_sources_visits = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->visited_sources_visits(), output);
  }

  // optional uint32 clicked_sources_visits = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->clicked_sources_visits(), output);
  }

  // optional int64 sites_for_user_cnt = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->sites_for_user_cnt(), output);
  }

  // optional bool show_category_subscription = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->show_category_subscription(), output);
  }

  // optional .cosmo.pb.Geo geo = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->geo_, output);
  }

  // optional bool show_cold_sources_subscription = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->show_cold_sources_subscription(), output);
  }

  // optional bool show_hot_sources_subscription = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->show_hot_sources_subscription(), output);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->category_subscription_metrics_, output);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->cold_sources_subscription_metrics_, output);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->hot_sources_subscription_metrics_, output);
  }

  // optional bool cold_lenta = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->cold_lenta(), output);
  }

  // optional bool empty_lenta = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->empty_lenta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Metrics)
}

::google::protobuf::uint8* Metrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Metrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 age = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->age(), target);
  }

  // optional int32 gender = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gender(), target);
  }

  // optional bool has_email = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_email(), target);
  }

  // optional bool has_ok = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_ok(), target);
  }

  // optional bool has_vk = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_vk(), target);
  }

  // optional uint32 similar_sources_cnt = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->similar_sources_cnt(), target);
  }

  // optional uint32 visited_sources_cnt = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->visited_sources_cnt(), target);
  }

  // optional uint32 clicked_sources_cnt = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->clicked_sources_cnt(), target);
  }

  // optional uint32 similar_sites_cnt = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->similar_sites_cnt(), target);
  }

  // optional uint32 visited_sites_cnt = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->visited_sites_cnt(), target);
  }

  // optional uint32 clicked_sites_cnt = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->clicked_sites_cnt(), target);
  }

  // optional uint32 visited_sources_visits = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->visited_sources_visits(), target);
  }

  // optional uint32 clicked_sources_visits = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->clicked_sources_visits(), target);
  }

  // optional int64 sites_for_user_cnt = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->sites_for_user_cnt(), target);
  }

  // optional bool show_category_subscription = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->show_category_subscription(), target);
  }

  // optional .cosmo.pb.Geo geo = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->geo_, deterministic, target);
  }

  // optional bool show_cold_sources_subscription = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->show_cold_sources_subscription(), target);
  }

  // optional bool show_hot_sources_subscription = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->show_hot_sources_subscription(), target);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->category_subscription_metrics_, deterministic, target);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->cold_sources_subscription_metrics_, deterministic, target);
  }

  // optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->hot_sources_subscription_metrics_, deterministic, target);
  }

  // optional bool cold_lenta = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->cold_lenta(), target);
  }

  // optional bool empty_lenta = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->empty_lenta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Metrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.Geo geo = 17;
    if (has_geo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_);
    }

    // optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
    if (has_category_subscription_metrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->category_subscription_metrics_);
    }

    // optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
    if (has_cold_sources_subscription_metrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cold_sources_subscription_metrics_);
    }

    // optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
    if (has_hot_sources_subscription_metrics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hot_sources_subscription_metrics_);
    }

    // optional int32 age = 1;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional uint32 similar_sources_cnt = 6;
    if (has_similar_sources_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->similar_sources_cnt());
    }

    // optional uint32 visited_sources_cnt = 7;
    if (has_visited_sources_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visited_sources_cnt());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool has_email = 3;
    if (has_has_email()) {
      total_size += 1 + 1;
    }

    // optional bool has_ok = 4;
    if (has_has_ok()) {
      total_size += 1 + 1;
    }

    // optional bool has_vk = 5;
    if (has_has_vk()) {
      total_size += 1 + 1;
    }

    // optional bool show_category_subscription = 16;
    if (has_show_category_subscription()) {
      total_size += 2 + 1;
    }

    // optional uint32 clicked_sources_cnt = 8;
    if (has_clicked_sources_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicked_sources_cnt());
    }

    // optional uint32 similar_sites_cnt = 9;
    if (has_similar_sites_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->similar_sites_cnt());
    }

    // optional uint32 visited_sites_cnt = 10;
    if (has_visited_sites_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visited_sites_cnt());
    }

    // optional uint32 clicked_sites_cnt = 11;
    if (has_clicked_sites_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicked_sites_cnt());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 visited_sources_visits = 12;
    if (has_visited_sources_visits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visited_sources_visits());
    }

    // optional int64 sites_for_user_cnt = 14;
    if (has_sites_for_user_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sites_for_user_cnt());
    }

    // optional uint32 clicked_sources_visits = 13;
    if (has_clicked_sources_visits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicked_sources_visits());
    }

    // optional bool show_cold_sources_subscription = 18;
    if (has_show_cold_sources_subscription()) {
      total_size += 2 + 1;
    }

    // optional bool show_hot_sources_subscription = 19;
    if (has_show_hot_sources_subscription()) {
      total_size += 2 + 1;
    }

    // optional bool cold_lenta = 23;
    if (has_cold_lenta()) {
      total_size += 2 + 1;
    }

    // optional bool empty_lenta = 24;
    if (has_empty_lenta()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Metrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Metrics)
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_geo()->::cosmo::pb::Geo::MergeFrom(from.geo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_category_subscription_metrics()->::cosmo::pb::Metrics_SubscriptionMetrics::MergeFrom(from.category_subscription_metrics());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cold_sources_subscription_metrics()->::cosmo::pb::Metrics_SubscriptionMetrics::MergeFrom(from.cold_sources_subscription_metrics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hot_sources_subscription_metrics()->::cosmo::pb::Metrics_SubscriptionMetrics::MergeFrom(from.hot_sources_subscription_metrics());
    }
    if (cached_has_bits & 0x00000010u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000020u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000040u) {
      similar_sources_cnt_ = from.similar_sources_cnt_;
    }
    if (cached_has_bits & 0x00000080u) {
      visited_sources_cnt_ = from.visited_sources_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      has_email_ = from.has_email_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_ok_ = from.has_ok_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_vk_ = from.has_vk_;
    }
    if (cached_has_bits & 0x00000800u) {
      show_category_subscription_ = from.show_category_subscription_;
    }
    if (cached_has_bits & 0x00001000u) {
      clicked_sources_cnt_ = from.clicked_sources_cnt_;
    }
    if (cached_has_bits & 0x00002000u) {
      similar_sites_cnt_ = from.similar_sites_cnt_;
    }
    if (cached_has_bits & 0x00004000u) {
      visited_sites_cnt_ = from.visited_sites_cnt_;
    }
    if (cached_has_bits & 0x00008000u) {
      clicked_sites_cnt_ = from.clicked_sites_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      visited_sources_visits_ = from.visited_sources_visits_;
    }
    if (cached_has_bits & 0x00020000u) {
      sites_for_user_cnt_ = from.sites_for_user_cnt_;
    }
    if (cached_has_bits & 0x00040000u) {
      clicked_sources_visits_ = from.clicked_sources_visits_;
    }
    if (cached_has_bits & 0x00080000u) {
      show_cold_sources_subscription_ = from.show_cold_sources_subscription_;
    }
    if (cached_has_bits & 0x00100000u) {
      show_hot_sources_subscription_ = from.show_hot_sources_subscription_;
    }
    if (cached_has_bits & 0x00200000u) {
      cold_lenta_ = from.cold_lenta_;
    }
    if (cached_has_bits & 0x00400000u) {
      empty_lenta_ = from.empty_lenta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  if (has_category_subscription_metrics()) {
    if (!this->category_subscription_metrics_->IsInitialized()) return false;
  }
  if (has_cold_sources_subscription_metrics()) {
    if (!this->cold_sources_subscription_metrics_->IsInitialized()) return false;
  }
  if (has_hot_sources_subscription_metrics()) {
    if (!this->hot_sources_subscription_metrics_->IsInitialized()) return false;
  }
  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  swap(geo_, other->geo_);
  swap(category_subscription_metrics_, other->category_subscription_metrics_);
  swap(cold_sources_subscription_metrics_, other->cold_sources_subscription_metrics_);
  swap(hot_sources_subscription_metrics_, other->hot_sources_subscription_metrics_);
  swap(age_, other->age_);
  swap(gender_, other->gender_);
  swap(similar_sources_cnt_, other->similar_sources_cnt_);
  swap(visited_sources_cnt_, other->visited_sources_cnt_);
  swap(has_email_, other->has_email_);
  swap(has_ok_, other->has_ok_);
  swap(has_vk_, other->has_vk_);
  swap(show_category_subscription_, other->show_category_subscription_);
  swap(clicked_sources_cnt_, other->clicked_sources_cnt_);
  swap(similar_sites_cnt_, other->similar_sites_cnt_);
  swap(visited_sites_cnt_, other->visited_sites_cnt_);
  swap(clicked_sites_cnt_, other->clicked_sites_cnt_);
  swap(visited_sources_visits_, other->visited_sources_visits_);
  swap(sites_for_user_cnt_, other->sites_for_user_cnt_);
  swap(clicked_sources_visits_, other->clicked_sources_visits_);
  swap(show_cold_sources_subscription_, other->show_cold_sources_subscription_);
  swap(show_hot_sources_subscription_, other->show_hot_sources_subscription_);
  swap(cold_lenta_, other->cold_lenta_);
  swap(empty_lenta_, other->empty_lenta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metrics

// optional int32 age = 1;
bool Metrics::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Metrics::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
void Metrics::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
void Metrics::clear_age() {
  age_ = 0;
  clear_has_age();
}
::google::protobuf::int32 Metrics::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.age)
  return age_;
}
void Metrics::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.age)
}

// optional int32 gender = 2;
bool Metrics::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Metrics::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
void Metrics::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
void Metrics::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
::google::protobuf::int32 Metrics::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.gender)
  return gender_;
}
void Metrics::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.gender)
}

// optional bool has_email = 3;
bool Metrics::has_has_email() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Metrics::set_has_has_email() {
  _has_bits_[0] |= 0x00000100u;
}
void Metrics::clear_has_has_email() {
  _has_bits_[0] &= ~0x00000100u;
}
void Metrics::clear_has_email() {
  has_email_ = false;
  clear_has_has_email();
}
bool Metrics::has_email() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_email)
  return has_email_;
}
void Metrics::set_has_email(bool value) {
  set_has_has_email();
  has_email_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_email)
}

// optional bool has_ok = 4;
bool Metrics::has_has_ok() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Metrics::set_has_has_ok() {
  _has_bits_[0] |= 0x00000200u;
}
void Metrics::clear_has_has_ok() {
  _has_bits_[0] &= ~0x00000200u;
}
void Metrics::clear_has_ok() {
  has_ok_ = false;
  clear_has_has_ok();
}
bool Metrics::has_ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_ok)
  return has_ok_;
}
void Metrics::set_has_ok(bool value) {
  set_has_has_ok();
  has_ok_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_ok)
}

// optional bool has_vk = 5;
bool Metrics::has_has_vk() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Metrics::set_has_has_vk() {
  _has_bits_[0] |= 0x00000400u;
}
void Metrics::clear_has_has_vk() {
  _has_bits_[0] &= ~0x00000400u;
}
void Metrics::clear_has_vk() {
  has_vk_ = false;
  clear_has_has_vk();
}
bool Metrics::has_vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_vk)
  return has_vk_;
}
void Metrics::set_has_vk(bool value) {
  set_has_has_vk();
  has_vk_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_vk)
}

// optional uint32 similar_sources_cnt = 6;
bool Metrics::has_similar_sources_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Metrics::set_has_similar_sources_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
void Metrics::clear_has_similar_sources_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
void Metrics::clear_similar_sources_cnt() {
  similar_sources_cnt_ = 0u;
  clear_has_similar_sources_cnt();
}
::google::protobuf::uint32 Metrics::similar_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.similar_sources_cnt)
  return similar_sources_cnt_;
}
void Metrics::set_similar_sources_cnt(::google::protobuf::uint32 value) {
  set_has_similar_sources_cnt();
  similar_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.similar_sources_cnt)
}

// optional uint32 visited_sources_cnt = 7;
bool Metrics::has_visited_sources_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Metrics::set_has_visited_sources_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
void Metrics::clear_has_visited_sources_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
void Metrics::clear_visited_sources_cnt() {
  visited_sources_cnt_ = 0u;
  clear_has_visited_sources_cnt();
}
::google::protobuf::uint32 Metrics::visited_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sources_cnt)
  return visited_sources_cnt_;
}
void Metrics::set_visited_sources_cnt(::google::protobuf::uint32 value) {
  set_has_visited_sources_cnt();
  visited_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sources_cnt)
}

// optional uint32 clicked_sources_cnt = 8;
bool Metrics::has_clicked_sources_cnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Metrics::set_has_clicked_sources_cnt() {
  _has_bits_[0] |= 0x00001000u;
}
void Metrics::clear_has_clicked_sources_cnt() {
  _has_bits_[0] &= ~0x00001000u;
}
void Metrics::clear_clicked_sources_cnt() {
  clicked_sources_cnt_ = 0u;
  clear_has_clicked_sources_cnt();
}
::google::protobuf::uint32 Metrics::clicked_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sources_cnt)
  return clicked_sources_cnt_;
}
void Metrics::set_clicked_sources_cnt(::google::protobuf::uint32 value) {
  set_has_clicked_sources_cnt();
  clicked_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sources_cnt)
}

// optional uint32 similar_sites_cnt = 9;
bool Metrics::has_similar_sites_cnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Metrics::set_has_similar_sites_cnt() {
  _has_bits_[0] |= 0x00002000u;
}
void Metrics::clear_has_similar_sites_cnt() {
  _has_bits_[0] &= ~0x00002000u;
}
void Metrics::clear_similar_sites_cnt() {
  similar_sites_cnt_ = 0u;
  clear_has_similar_sites_cnt();
}
::google::protobuf::uint32 Metrics::similar_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.similar_sites_cnt)
  return similar_sites_cnt_;
}
void Metrics::set_similar_sites_cnt(::google::protobuf::uint32 value) {
  set_has_similar_sites_cnt();
  similar_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.similar_sites_cnt)
}

// optional uint32 visited_sites_cnt = 10;
bool Metrics::has_visited_sites_cnt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Metrics::set_has_visited_sites_cnt() {
  _has_bits_[0] |= 0x00004000u;
}
void Metrics::clear_has_visited_sites_cnt() {
  _has_bits_[0] &= ~0x00004000u;
}
void Metrics::clear_visited_sites_cnt() {
  visited_sites_cnt_ = 0u;
  clear_has_visited_sites_cnt();
}
::google::protobuf::uint32 Metrics::visited_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sites_cnt)
  return visited_sites_cnt_;
}
void Metrics::set_visited_sites_cnt(::google::protobuf::uint32 value) {
  set_has_visited_sites_cnt();
  visited_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sites_cnt)
}

// optional uint32 clicked_sites_cnt = 11;
bool Metrics::has_clicked_sites_cnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Metrics::set_has_clicked_sites_cnt() {
  _has_bits_[0] |= 0x00008000u;
}
void Metrics::clear_has_clicked_sites_cnt() {
  _has_bits_[0] &= ~0x00008000u;
}
void Metrics::clear_clicked_sites_cnt() {
  clicked_sites_cnt_ = 0u;
  clear_has_clicked_sites_cnt();
}
::google::protobuf::uint32 Metrics::clicked_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sites_cnt)
  return clicked_sites_cnt_;
}
void Metrics::set_clicked_sites_cnt(::google::protobuf::uint32 value) {
  set_has_clicked_sites_cnt();
  clicked_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sites_cnt)
}

// optional uint32 visited_sources_visits = 12;
bool Metrics::has_visited_sources_visits() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Metrics::set_has_visited_sources_visits() {
  _has_bits_[0] |= 0x00010000u;
}
void Metrics::clear_has_visited_sources_visits() {
  _has_bits_[0] &= ~0x00010000u;
}
void Metrics::clear_visited_sources_visits() {
  visited_sources_visits_ = 0u;
  clear_has_visited_sources_visits();
}
::google::protobuf::uint32 Metrics::visited_sources_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sources_visits)
  return visited_sources_visits_;
}
void Metrics::set_visited_sources_visits(::google::protobuf::uint32 value) {
  set_has_visited_sources_visits();
  visited_sources_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sources_visits)
}

// optional uint32 clicked_sources_visits = 13;
bool Metrics::has_clicked_sources_visits() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Metrics::set_has_clicked_sources_visits() {
  _has_bits_[0] |= 0x00040000u;
}
void Metrics::clear_has_clicked_sources_visits() {
  _has_bits_[0] &= ~0x00040000u;
}
void Metrics::clear_clicked_sources_visits() {
  clicked_sources_visits_ = 0u;
  clear_has_clicked_sources_visits();
}
::google::protobuf::uint32 Metrics::clicked_sources_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sources_visits)
  return clicked_sources_visits_;
}
void Metrics::set_clicked_sources_visits(::google::protobuf::uint32 value) {
  set_has_clicked_sources_visits();
  clicked_sources_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sources_visits)
}

// optional int64 sites_for_user_cnt = 14;
bool Metrics::has_sites_for_user_cnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Metrics::set_has_sites_for_user_cnt() {
  _has_bits_[0] |= 0x00020000u;
}
void Metrics::clear_has_sites_for_user_cnt() {
  _has_bits_[0] &= ~0x00020000u;
}
void Metrics::clear_sites_for_user_cnt() {
  sites_for_user_cnt_ = GOOGLE_LONGLONG(0);
  clear_has_sites_for_user_cnt();
}
::google::protobuf::int64 Metrics::sites_for_user_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.sites_for_user_cnt)
  return sites_for_user_cnt_;
}
void Metrics::set_sites_for_user_cnt(::google::protobuf::int64 value) {
  set_has_sites_for_user_cnt();
  sites_for_user_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.sites_for_user_cnt)
}

// optional bool show_category_subscription = 16;
bool Metrics::has_show_category_subscription() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Metrics::set_has_show_category_subscription() {
  _has_bits_[0] |= 0x00000800u;
}
void Metrics::clear_has_show_category_subscription() {
  _has_bits_[0] &= ~0x00000800u;
}
void Metrics::clear_show_category_subscription() {
  show_category_subscription_ = false;
  clear_has_show_category_subscription();
}
bool Metrics::show_category_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_category_subscription)
  return show_category_subscription_;
}
void Metrics::set_show_category_subscription(bool value) {
  set_has_show_category_subscription();
  show_category_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_category_subscription)
}

// optional .cosmo.pb.Geo geo = 17;
bool Metrics::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metrics::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void Metrics::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metrics::clear_geo() {
  if (geo_ != NULL) geo_->::cosmo::pb::Geo::Clear();
  clear_has_geo();
}
const ::cosmo::pb::Geo& Metrics::geo() const {
  const ::cosmo::pb::Geo* p = geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Geo*>(
      &::cosmo::pb::_Geo_default_instance_);
}
::cosmo::pb::Geo* Metrics::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::cosmo::pb::Geo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.geo)
  return geo_;
}
::cosmo::pb::Geo* Metrics::release_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.geo)
  clear_has_geo();
  ::cosmo::pb::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
void Metrics::set_allocated_geo(::cosmo::pb::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.geo)
}

// optional bool show_cold_sources_subscription = 18;
bool Metrics::has_show_cold_sources_subscription() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Metrics::set_has_show_cold_sources_subscription() {
  _has_bits_[0] |= 0x00080000u;
}
void Metrics::clear_has_show_cold_sources_subscription() {
  _has_bits_[0] &= ~0x00080000u;
}
void Metrics::clear_show_cold_sources_subscription() {
  show_cold_sources_subscription_ = false;
  clear_has_show_cold_sources_subscription();
}
bool Metrics::show_cold_sources_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_cold_sources_subscription)
  return show_cold_sources_subscription_;
}
void Metrics::set_show_cold_sources_subscription(bool value) {
  set_has_show_cold_sources_subscription();
  show_cold_sources_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_cold_sources_subscription)
}

// optional bool show_hot_sources_subscription = 19;
bool Metrics::has_show_hot_sources_subscription() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Metrics::set_has_show_hot_sources_subscription() {
  _has_bits_[0] |= 0x00100000u;
}
void Metrics::clear_has_show_hot_sources_subscription() {
  _has_bits_[0] &= ~0x00100000u;
}
void Metrics::clear_show_hot_sources_subscription() {
  show_hot_sources_subscription_ = false;
  clear_has_show_hot_sources_subscription();
}
bool Metrics::show_hot_sources_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_hot_sources_subscription)
  return show_hot_sources_subscription_;
}
void Metrics::set_show_hot_sources_subscription(bool value) {
  set_has_show_hot_sources_subscription();
  show_hot_sources_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_hot_sources_subscription)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
bool Metrics::has_category_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metrics::set_has_category_subscription_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
void Metrics::clear_has_category_subscription_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metrics::clear_category_subscription_metrics() {
  if (category_subscription_metrics_ != NULL) category_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_category_subscription_metrics();
}
const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::category_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = category_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.category_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_category_subscription_metrics() {
  set_has_category_subscription_metrics();
  if (category_subscription_metrics_ == NULL) {
    category_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.category_subscription_metrics)
  return category_subscription_metrics_;
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_category_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.category_subscription_metrics)
  clear_has_category_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = category_subscription_metrics_;
  category_subscription_metrics_ = NULL;
  return temp;
}
void Metrics::set_allocated_category_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* category_subscription_metrics) {
  delete category_subscription_metrics_;
  category_subscription_metrics_ = category_subscription_metrics;
  if (category_subscription_metrics) {
    set_has_category_subscription_metrics();
  } else {
    clear_has_category_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.category_subscription_metrics)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
bool Metrics::has_cold_sources_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Metrics::set_has_cold_sources_subscription_metrics() {
  _has_bits_[0] |= 0x00000004u;
}
void Metrics::clear_has_cold_sources_subscription_metrics() {
  _has_bits_[0] &= ~0x00000004u;
}
void Metrics::clear_cold_sources_subscription_metrics() {
  if (cold_sources_subscription_metrics_ != NULL) cold_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_cold_sources_subscription_metrics();
}
const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::cold_sources_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = cold_sources_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_cold_sources_subscription_metrics() {
  set_has_cold_sources_subscription_metrics();
  if (cold_sources_subscription_metrics_ == NULL) {
    cold_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  return cold_sources_subscription_metrics_;
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_cold_sources_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  clear_has_cold_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = cold_sources_subscription_metrics_;
  cold_sources_subscription_metrics_ = NULL;
  return temp;
}
void Metrics::set_allocated_cold_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* cold_sources_subscription_metrics) {
  delete cold_sources_subscription_metrics_;
  cold_sources_subscription_metrics_ = cold_sources_subscription_metrics;
  if (cold_sources_subscription_metrics) {
    set_has_cold_sources_subscription_metrics();
  } else {
    clear_has_cold_sources_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.cold_sources_subscription_metrics)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
bool Metrics::has_hot_sources_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Metrics::set_has_hot_sources_subscription_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
void Metrics::clear_has_hot_sources_subscription_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
void Metrics::clear_hot_sources_subscription_metrics() {
  if (hot_sources_subscription_metrics_ != NULL) hot_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_hot_sources_subscription_metrics();
}
const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::hot_sources_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = hot_sources_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_hot_sources_subscription_metrics() {
  set_has_hot_sources_subscription_metrics();
  if (hot_sources_subscription_metrics_ == NULL) {
    hot_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  return hot_sources_subscription_metrics_;
}
::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_hot_sources_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  clear_has_hot_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = hot_sources_subscription_metrics_;
  hot_sources_subscription_metrics_ = NULL;
  return temp;
}
void Metrics::set_allocated_hot_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* hot_sources_subscription_metrics) {
  delete hot_sources_subscription_metrics_;
  hot_sources_subscription_metrics_ = hot_sources_subscription_metrics;
  if (hot_sources_subscription_metrics) {
    set_has_hot_sources_subscription_metrics();
  } else {
    clear_has_hot_sources_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.hot_sources_subscription_metrics)
}

// optional bool cold_lenta = 23;
bool Metrics::has_cold_lenta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Metrics::set_has_cold_lenta() {
  _has_bits_[0] |= 0x00200000u;
}
void Metrics::clear_has_cold_lenta() {
  _has_bits_[0] &= ~0x00200000u;
}
void Metrics::clear_cold_lenta() {
  cold_lenta_ = false;
  clear_has_cold_lenta();
}
bool Metrics::cold_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.cold_lenta)
  return cold_lenta_;
}
void Metrics::set_cold_lenta(bool value) {
  set_has_cold_lenta();
  cold_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.cold_lenta)
}

// optional bool empty_lenta = 24;
bool Metrics::has_empty_lenta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Metrics::set_has_empty_lenta() {
  _has_bits_[0] |= 0x00400000u;
}
void Metrics::clear_has_empty_lenta() {
  _has_bits_[0] &= ~0x00400000u;
}
void Metrics::clear_empty_lenta() {
  empty_lenta_ = false;
  clear_has_empty_lenta();
}
bool Metrics::empty_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.empty_lenta)
  return empty_lenta_;
}
void Metrics::set_empty_lenta(bool value) {
  set_has_empty_lenta();
  empty_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.empty_lenta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugInfo_UserDataEntry::kSourceFieldNumber;
const int DebugInfo_UserDataEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugInfo_UserDataEntry::DebugInfo_UserDataEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DebugInfo.UserDataEntry)
}
DebugInfo_UserDataEntry::DebugInfo_UserDataEntry(const DebugInfo_UserDataEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.has_data()) {
    data_ = new ::cosmo::pb::UserData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DebugInfo.UserDataEntry)
}

void DebugInfo_UserDataEntry::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
}

DebugInfo_UserDataEntry::~DebugInfo_UserDataEntry() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DebugInfo.UserDataEntry)
  SharedDtor();
}

void DebugInfo_UserDataEntry::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DebugInfo_UserDataEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfo_UserDataEntry::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugInfo_UserDataEntry& DebugInfo_UserDataEntry::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugInfo_UserDataEntry* DebugInfo_UserDataEntry::New(::google::protobuf::Arena* arena) const {
  DebugInfo_UserDataEntry* n = new DebugInfo_UserDataEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugInfo_UserDataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DebugInfo.UserDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::cosmo::pb::UserData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugInfo_UserDataEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DebugInfo.UserDataEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.DebugInfo.UserDataEntry.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DebugInfo.UserDataEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DebugInfo.UserDataEntry)
  return false;
#undef DO_
}

void DebugInfo_UserDataEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DebugInfo.UserDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DebugInfo.UserDataEntry.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional .cosmo.pb.UserData data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DebugInfo.UserDataEntry)
}

::google::protobuf::uint8* DebugInfo_UserDataEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DebugInfo.UserDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DebugInfo.UserDataEntry.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional .cosmo.pb.UserData data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DebugInfo.UserDataEntry)
  return target;
}

size_t DebugInfo_UserDataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DebugInfo.UserDataEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional .cosmo.pb.UserData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo_UserDataEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DebugInfo.UserDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugInfo_UserDataEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugInfo_UserDataEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DebugInfo.UserDataEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DebugInfo.UserDataEntry)
    MergeFrom(*source);
  }
}

void DebugInfo_UserDataEntry::MergeFrom(const DebugInfo_UserDataEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DebugInfo.UserDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::cosmo::pb::UserData::MergeFrom(from.data());
    }
  }
}

void DebugInfo_UserDataEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DebugInfo.UserDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfo_UserDataEntry::CopyFrom(const DebugInfo_UserDataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DebugInfo.UserDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo_UserDataEntry::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void DebugInfo_UserDataEntry::Swap(DebugInfo_UserDataEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugInfo_UserDataEntry::InternalSwap(DebugInfo_UserDataEntry* other) {
  using std::swap;
  source_.Swap(&other->source_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugInfo_UserDataEntry::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugInfo_UserDataEntry

// optional string source = 1;
bool DebugInfo_UserDataEntry::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugInfo_UserDataEntry::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugInfo_UserDataEntry::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugInfo_UserDataEntry::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& DebugInfo_UserDataEntry::source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.UserDataEntry.source)
  return source_.GetNoArena();
}
void DebugInfo_UserDataEntry::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DebugInfo.UserDataEntry.source)
}
#if LANG_CXX11
void DebugInfo_UserDataEntry::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DebugInfo.UserDataEntry.source)
}
#endif
void DebugInfo_UserDataEntry::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DebugInfo.UserDataEntry.source)
}
void DebugInfo_UserDataEntry::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DebugInfo.UserDataEntry.source)
}
::std::string* DebugInfo_UserDataEntry::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.UserDataEntry.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DebugInfo_UserDataEntry::release_source() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DebugInfo.UserDataEntry.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugInfo_UserDataEntry::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DebugInfo.UserDataEntry.source)
}

// optional .cosmo.pb.UserData data = 2;
bool DebugInfo_UserDataEntry::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugInfo_UserDataEntry::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugInfo_UserDataEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugInfo_UserDataEntry::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
const ::cosmo::pb::UserData& DebugInfo_UserDataEntry::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.UserDataEntry.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
::cosmo::pb::UserData* DebugInfo_UserDataEntry::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::cosmo::pb::UserData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.UserDataEntry.data)
  return data_;
}
::cosmo::pb::UserData* DebugInfo_UserDataEntry::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DebugInfo.UserDataEntry.data)
  clear_has_data();
  ::cosmo::pb::UserData* temp = data_;
  data_ = NULL;
  return temp;
}
void DebugInfo_UserDataEntry::set_allocated_data(::cosmo::pb::UserData* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::cosmo::pb::UserData* new_data = new ::cosmo::pb::UserData;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DebugInfo.UserDataEntry.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugInfo::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugInfo::DebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DebugInfo)
}
DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_data_(from.user_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DebugInfo)
}

void DebugInfo::SharedCtor() {
  _cached_size_ = 0;
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DebugInfo)
  SharedDtor();
}

void DebugInfo::SharedDtor() {
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfo::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugInfo& DebugInfo::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugInfo* DebugInfo::New(::google::protobuf::Arena* arena) const {
  DebugInfo* n = new DebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DebugInfo)
  return false;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DebugInfo)
}

::google::protobuf::uint8* DebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DebugInfo)
  return target;
}

size_t DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DebugInfo)
    MergeFrom(*source);
  }
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_data_.MergeFrom(from.user_data_);
}

void DebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->user_data())) return false;
  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugInfo::InternalSwap(DebugInfo* other) {
  using std::swap;
  user_data_.InternalSwap(&other->user_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugInfo::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugInfo

// repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
int DebugInfo::user_data_size() const {
  return user_data_.size();
}
void DebugInfo::clear_user_data() {
  user_data_.Clear();
}
const ::cosmo::pb::DebugInfo_UserDataEntry& DebugInfo::user_data(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.user_data)
  return user_data_.Get(index);
}
::cosmo::pb::DebugInfo_UserDataEntry* DebugInfo::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.user_data)
  return user_data_.Mutable(index);
}
::cosmo::pb::DebugInfo_UserDataEntry* DebugInfo::add_user_data() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DebugInfo.user_data)
  return user_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >*
DebugInfo::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DebugInfo.user_data)
  return &user_data_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >&
DebugInfo::user_data() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DebugInfo.user_data)
  return user_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source::kSourceIdFieldNumber;
const int Source::kCategoryIdFieldNumber;
const int Source::kSiteHashFieldNumber;
const int Source::kDocumentsCountFieldNumber;
const int Source::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source::Source()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Source)
}
Source::Source(const Source& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Source)
}

void Source::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(rank_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Source)
  SharedDtor();
}

void Source::SharedDtor() {
}

void Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Source& Source::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Source* Source::New(::google::protobuf::Arena* arena) const {
  Source* n = new Source;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 site_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 documents_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_documents_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &documents_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // optional int64 site_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->site_hash(), output);
  }

  // optional uint32 documents_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->documents_count(), output);
  }

  // optional float rank = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Source)
}

::google::protobuf::uint8* Source::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int32 category_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // optional int64 site_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->site_hash(), target);
  }

  // optional uint32 documents_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->documents_count(), target);
  }

  // optional float rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Source)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional int64 site_hash = 3;
    if (has_site_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->site_hash());
    }

    // optional int32 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional uint32 documents_count = 4;
    if (has_documents_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->documents_count());
    }

    // optional float rank = 5;
    if (has_rank()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Source)
  GOOGLE_DCHECK_NE(&from, this);
  const Source* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Source>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Source)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Source)
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      site_hash_ = from.site_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      documents_count_ = from.documents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Source::Swap(Source* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Source::InternalSwap(Source* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(site_hash_, other->site_hash_);
  swap(category_id_, other->category_id_);
  swap(documents_count_, other->documents_count_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Source

// required int64 source_id = 1;
bool Source::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Source::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Source::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Source::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 Source::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.source_id)
  return source_id_;
}
void Source::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.source_id)
}

// optional int32 category_id = 2;
bool Source::has_category_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Source::set_has_category_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Source::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Source::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 Source::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.category_id)
  return category_id_;
}
void Source::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.category_id)
}

// optional int64 site_hash = 3;
bool Source::has_site_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Source::set_has_site_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Source::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Source::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 Source::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.site_hash)
  return site_hash_;
}
void Source::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.site_hash)
}

// optional uint32 documents_count = 4;
bool Source::has_documents_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Source::set_has_documents_count() {
  _has_bits_[0] |= 0x00000008u;
}
void Source::clear_has_documents_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void Source::clear_documents_count() {
  documents_count_ = 0u;
  clear_has_documents_count();
}
::google::protobuf::uint32 Source::documents_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.documents_count)
  return documents_count_;
}
void Source::set_documents_count(::google::protobuf::uint32 value) {
  set_has_documents_count();
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.documents_count)
}

// optional float rank = 5;
bool Source::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Source::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
void Source::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
void Source::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float Source::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.rank)
  return rank_;
}
void Source::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Category::kCategoryIdFieldNumber;
const int Category::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Category::Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Category)
}
Category::Category(const Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_id_, &from.category_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&category_id_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Category)
}

void Category::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&category_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&category_id_)) + sizeof(rank_));
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Category)
  SharedDtor();
}

void Category::SharedDtor() {
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Category& Category::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Category* Category::New(::google::protobuf::Arena* arena) const {
  Category* n = new Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&category_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&category_id_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 category_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->category_id(), output);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Category)
}

::google::protobuf::uint8* Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 category_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->category_id(), target);
  }

  // optional float rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Category)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 category_id = 1;
  if (has_category_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->category_id());
  }
  // optional float rank = 2;
  if (has_rank()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  using std::swap;
  swap(category_id_, other->category_id_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Category

// required int64 category_id = 1;
bool Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Category::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
::google::protobuf::int64 Category::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Category.category_id)
  return category_id_;
}
void Category::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Category.category_id)
}

// optional float rank = 2;
bool Category::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Category::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void Category::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void Category::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float Category::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Category.rank)
  return rank_;
}
void Category::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Category.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoOutput::kDocumentsFieldNumber;
const int CosmoOutput::kRankerInfoFieldNumber;
const int CosmoOutput::kErrorsFieldNumber;
const int CosmoOutput::kRetrieverStatsFieldNumber;
const int CosmoOutput::kMixerInfoFieldNumber;
const int CosmoOutput::kMetricsFieldNumber;
const int CosmoOutput::kDebugInfoFieldNumber;
const int CosmoOutput::kSourcesFieldNumber;
const int CosmoOutput::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoOutput::CosmoOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.CosmoOutput)
}
CosmoOutput::CosmoOutput(const CosmoOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_),
      errors_(from.errors_),
      sources_(from.sources_),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ranker_info()) {
    ranker_info_ = new ::cosmo::pb::RankerInfo(*from.ranker_info_);
  } else {
    ranker_info_ = NULL;
  }
  if (from.has_retriever_stats()) {
    retriever_stats_ = new ::cosmo::pb::RetrieverStats(*from.retriever_stats_);
  } else {
    retriever_stats_ = NULL;
  }
  if (from.has_mixer_info()) {
    mixer_info_ = new ::cosmo::pb::MixerInfo(*from.mixer_info_);
  } else {
    mixer_info_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::cosmo::pb::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::cosmo::pb::DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.CosmoOutput)
}

void CosmoOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ranker_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&ranker_info_)) + sizeof(debug_info_));
}

CosmoOutput::~CosmoOutput() {
  // @@protoc_insertion_point(destructor:cosmo.pb.CosmoOutput)
  SharedDtor();
}

void CosmoOutput::SharedDtor() {
  if (this != internal_default_instance()) delete ranker_info_;
  if (this != internal_default_instance()) delete retriever_stats_;
  if (this != internal_default_instance()) delete mixer_info_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete debug_info_;
}

void CosmoOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoOutput::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoOutput& CosmoOutput::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoOutput* CosmoOutput::New(::google::protobuf::Arena* arena) const {
  CosmoOutput* n = new CosmoOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.CosmoOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  errors_.Clear();
  sources_.Clear();
  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ranker_info_ != NULL);
      ranker_info_->::cosmo::pb::RankerInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(retriever_stats_ != NULL);
      retriever_stats_->::cosmo::pb::RetrieverStats::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mixer_info_ != NULL);
      mixer_info_->::cosmo::pb::MixerInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->::cosmo::pb::Metrics::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(debug_info_ != NULL);
      debug_info_->::cosmo::pb::DebugInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.CosmoOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.Document documents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.RankerInfo ranker_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranker_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.Error errors = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.RetrieverStats retriever_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retriever_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.MixerInfo mixer_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics metrics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DebugInfo debug_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.Source sources = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.Category categories = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.CosmoOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.CosmoOutput)
  return false;
#undef DO_
}

void CosmoOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.CosmoOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Document documents = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->documents(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.RankerInfo ranker_info = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ranker_info_, output);
  }

  // repeated .cosmo.pb.Error errors = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->errors(static_cast<int>(i)), output);
  }

  // optional .cosmo.pb.RetrieverStats retriever_stats = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->retriever_stats_, output);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->mixer_info_, output);
  }

  // optional .cosmo.pb.Metrics metrics = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->metrics_, output);
  }

  // optional .cosmo.pb.DebugInfo debug_info = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->debug_info_, output);
  }

  // repeated .cosmo.pb.Source sources = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sources(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.Category categories = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->categories(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.CosmoOutput)
}

::google::protobuf::uint8* CosmoOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.CosmoOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Document documents = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->documents(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.RankerInfo ranker_info = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ranker_info_, deterministic, target);
  }

  // repeated .cosmo.pb.Error errors = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // optional .cosmo.pb.RetrieverStats retriever_stats = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->retriever_stats_, deterministic, target);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->mixer_info_, deterministic, target);
  }

  // optional .cosmo.pb.Metrics metrics = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->metrics_, deterministic, target);
  }

  // optional .cosmo.pb.DebugInfo debug_info = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->debug_info_, deterministic, target);
  }

  // repeated .cosmo.pb.Source sources = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->sources(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.Category categories = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.CosmoOutput)
  return target;
}

size_t CosmoOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.CosmoOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.Document documents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.Error errors = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.Source sources = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.Category categories = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .cosmo.pb.RankerInfo ranker_info = 9;
    if (has_ranker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ranker_info_);
    }

    // optional .cosmo.pb.RetrieverStats retriever_stats = 11;
    if (has_retriever_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->retriever_stats_);
    }

    // optional .cosmo.pb.MixerInfo mixer_info = 12;
    if (has_mixer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mixer_info_);
    }

    // optional .cosmo.pb.Metrics metrics = 13;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .cosmo.pb.DebugInfo debug_info = 14;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.CosmoOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.CosmoOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.CosmoOutput)
    MergeFrom(*source);
  }
}

void CosmoOutput::MergeFrom(const CosmoOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.CosmoOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  errors_.MergeFrom(from.errors_);
  sources_.MergeFrom(from.sources_);
  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ranker_info()->::cosmo::pb::RankerInfo::MergeFrom(from.ranker_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_retriever_stats()->::cosmo::pb::RetrieverStats::MergeFrom(from.retriever_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mixer_info()->::cosmo::pb::MixerInfo::MergeFrom(from.mixer_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_metrics()->::cosmo::pb::Metrics::MergeFrom(from.metrics());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_debug_info()->::cosmo::pb::DebugInfo::MergeFrom(from.debug_info());
    }
  }
}

void CosmoOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.CosmoOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoOutput::CopyFrom(const CosmoOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.CosmoOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoOutput::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->categories())) return false;
  if (has_ranker_info()) {
    if (!this->ranker_info_->IsInitialized()) return false;
  }
  if (has_mixer_info()) {
    if (!this->mixer_info_->IsInitialized()) return false;
  }
  if (has_metrics()) {
    if (!this->metrics_->IsInitialized()) return false;
  }
  if (has_debug_info()) {
    if (!this->debug_info_->IsInitialized()) return false;
  }
  return true;
}

void CosmoOutput::Swap(CosmoOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoOutput::InternalSwap(CosmoOutput* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  errors_.InternalSwap(&other->errors_);
  sources_.InternalSwap(&other->sources_);
  categories_.InternalSwap(&other->categories_);
  swap(ranker_info_, other->ranker_info_);
  swap(retriever_stats_, other->retriever_stats_);
  swap(mixer_info_, other->mixer_info_);
  swap(metrics_, other->metrics_);
  swap(debug_info_, other->debug_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoOutput::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoOutput

// repeated .cosmo.pb.Document documents = 4;
int CosmoOutput::documents_size() const {
  return documents_.size();
}
void CosmoOutput::clear_documents() {
  documents_.Clear();
}
const ::cosmo::pb::Document& CosmoOutput::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.documents)
  return documents_.Get(index);
}
::cosmo::pb::Document* CosmoOutput::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.documents)
  return documents_.Mutable(index);
}
::cosmo::pb::Document* CosmoOutput::add_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
CosmoOutput::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
CosmoOutput::documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.documents)
  return documents_;
}

// optional .cosmo.pb.RankerInfo ranker_info = 9;
bool CosmoOutput::has_ranker_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoOutput::set_has_ranker_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoOutput::clear_has_ranker_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoOutput::clear_ranker_info() {
  if (ranker_info_ != NULL) ranker_info_->::cosmo::pb::RankerInfo::Clear();
  clear_has_ranker_info();
}
const ::cosmo::pb::RankerInfo& CosmoOutput::ranker_info() const {
  const ::cosmo::pb::RankerInfo* p = ranker_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.ranker_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::RankerInfo*>(
      &::cosmo::pb::_RankerInfo_default_instance_);
}
::cosmo::pb::RankerInfo* CosmoOutput::mutable_ranker_info() {
  set_has_ranker_info();
  if (ranker_info_ == NULL) {
    ranker_info_ = new ::cosmo::pb::RankerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.ranker_info)
  return ranker_info_;
}
::cosmo::pb::RankerInfo* CosmoOutput::release_ranker_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.ranker_info)
  clear_has_ranker_info();
  ::cosmo::pb::RankerInfo* temp = ranker_info_;
  ranker_info_ = NULL;
  return temp;
}
void CosmoOutput::set_allocated_ranker_info(::cosmo::pb::RankerInfo* ranker_info) {
  delete ranker_info_;
  ranker_info_ = ranker_info;
  if (ranker_info) {
    set_has_ranker_info();
  } else {
    clear_has_ranker_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.ranker_info)
}

// repeated .cosmo.pb.Error errors = 10;
int CosmoOutput::errors_size() const {
  return errors_.size();
}
void CosmoOutput::clear_errors() {
  errors_.Clear();
}
const ::cosmo::pb::Error& CosmoOutput::errors(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.errors)
  return errors_.Get(index);
}
::cosmo::pb::Error* CosmoOutput::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.errors)
  return errors_.Mutable(index);
}
::cosmo::pb::Error* CosmoOutput::add_errors() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
CosmoOutput::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
CosmoOutput::errors() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.errors)
  return errors_;
}

// optional .cosmo.pb.RetrieverStats retriever_stats = 11;
bool CosmoOutput::has_retriever_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoOutput::set_has_retriever_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoOutput::clear_has_retriever_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoOutput::clear_retriever_stats() {
  if (retriever_stats_ != NULL) retriever_stats_->::cosmo::pb::RetrieverStats::Clear();
  clear_has_retriever_stats();
}
const ::cosmo::pb::RetrieverStats& CosmoOutput::retriever_stats() const {
  const ::cosmo::pb::RetrieverStats* p = retriever_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.retriever_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::RetrieverStats*>(
      &::cosmo::pb::_RetrieverStats_default_instance_);
}
::cosmo::pb::RetrieverStats* CosmoOutput::mutable_retriever_stats() {
  set_has_retriever_stats();
  if (retriever_stats_ == NULL) {
    retriever_stats_ = new ::cosmo::pb::RetrieverStats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.retriever_stats)
  return retriever_stats_;
}
::cosmo::pb::RetrieverStats* CosmoOutput::release_retriever_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.retriever_stats)
  clear_has_retriever_stats();
  ::cosmo::pb::RetrieverStats* temp = retriever_stats_;
  retriever_stats_ = NULL;
  return temp;
}
void CosmoOutput::set_allocated_retriever_stats(::cosmo::pb::RetrieverStats* retriever_stats) {
  delete retriever_stats_;
  retriever_stats_ = retriever_stats;
  if (retriever_stats) {
    set_has_retriever_stats();
  } else {
    clear_has_retriever_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.retriever_stats)
}

// optional .cosmo.pb.MixerInfo mixer_info = 12;
bool CosmoOutput::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CosmoOutput::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CosmoOutput::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CosmoOutput::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
const ::cosmo::pb::MixerInfo& CosmoOutput::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
::cosmo::pb::MixerInfo* CosmoOutput::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.mixer_info)
  return mixer_info_;
}
::cosmo::pb::MixerInfo* CosmoOutput::release_mixer_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
void CosmoOutput::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.mixer_info)
}

// optional .cosmo.pb.Metrics metrics = 13;
bool CosmoOutput::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CosmoOutput::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
void CosmoOutput::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
void CosmoOutput::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
const ::cosmo::pb::Metrics& CosmoOutput::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
::cosmo::pb::Metrics* CosmoOutput::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.metrics)
  return metrics_;
}
::cosmo::pb::Metrics* CosmoOutput::release_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void CosmoOutput::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.metrics)
}

// optional .cosmo.pb.DebugInfo debug_info = 14;
bool CosmoOutput::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CosmoOutput::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
void CosmoOutput::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void CosmoOutput::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::cosmo::pb::DebugInfo::Clear();
  clear_has_debug_info();
}
const ::cosmo::pb::DebugInfo& CosmoOutput::debug_info() const {
  const ::cosmo::pb::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DebugInfo*>(
      &::cosmo::pb::_DebugInfo_default_instance_);
}
::cosmo::pb::DebugInfo* CosmoOutput::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::cosmo::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.debug_info)
  return debug_info_;
}
::cosmo::pb::DebugInfo* CosmoOutput::release_debug_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.debug_info)
  clear_has_debug_info();
  ::cosmo::pb::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void CosmoOutput::set_allocated_debug_info(::cosmo::pb::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.debug_info)
}

// repeated .cosmo.pb.Source sources = 15;
int CosmoOutput::sources_size() const {
  return sources_.size();
}
void CosmoOutput::clear_sources() {
  sources_.Clear();
}
const ::cosmo::pb::Source& CosmoOutput::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.sources)
  return sources_.Get(index);
}
::cosmo::pb::Source* CosmoOutput::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.sources)
  return sources_.Mutable(index);
}
::cosmo::pb::Source* CosmoOutput::add_sources() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
CosmoOutput::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
CosmoOutput::sources() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.sources)
  return sources_;
}

// repeated .cosmo.pb.Category categories = 16;
int CosmoOutput::categories_size() const {
  return categories_.size();
}
void CosmoOutput::clear_categories() {
  categories_.Clear();
}
const ::cosmo::pb::Category& CosmoOutput::categories(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.categories)
  return categories_.Get(index);
}
::cosmo::pb::Category* CosmoOutput::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.categories)
  return categories_.Mutable(index);
}
::cosmo::pb::Category* CosmoOutput::add_categories() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
CosmoOutput::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
CosmoOutput::categories() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeaturesDump::kFeaturesFieldNumber;
const int FeaturesDump::kFeaturesNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeaturesDump::FeaturesDump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.FeaturesDump)
}
FeaturesDump::FeaturesDump(const FeaturesDump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_),
      features_names_(from.features_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.FeaturesDump)
}

void FeaturesDump::SharedCtor() {
  _cached_size_ = 0;
}

FeaturesDump::~FeaturesDump() {
  // @@protoc_insertion_point(destructor:cosmo.pb.FeaturesDump)
  SharedDtor();
}

void FeaturesDump::SharedDtor() {
}

void FeaturesDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturesDump::descriptor() {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeaturesDump& FeaturesDump::default_instance() {
  protobuf_cosmo_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeaturesDump* FeaturesDump::New(::google::protobuf::Arena* arena) const {
  FeaturesDump* n = new FeaturesDump;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeaturesDump::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.FeaturesDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  features_names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeaturesDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.FeaturesDump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string features_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_features_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->features_names(this->features_names_size() - 1).data(),
            static_cast<int>(this->features_names(this->features_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.FeaturesDump.features_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.FeaturesDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.FeaturesDump)
  return false;
#undef DO_
}

void FeaturesDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.FeaturesDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1;
  for (int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->features(i), output);
  }

  // repeated string features_names = 2;
  for (int i = 0, n = this->features_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->features_names(i).data(), static_cast<int>(this->features_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.FeaturesDump.features_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->features_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.FeaturesDump)
}

::google::protobuf::uint8* FeaturesDump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.FeaturesDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->features_, target);

  // repeated string features_names = 2;
  for (int i = 0, n = this->features_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->features_names(i).data(), static_cast<int>(this->features_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.FeaturesDump.features_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->features_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.FeaturesDump)
  return target;
}

size_t FeaturesDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.FeaturesDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->features_size());
    total_size += data_size;
  }

  // repeated string features_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->features_names_size());
  for (int i = 0, n = this->features_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->features_names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturesDump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.FeaturesDump)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturesDump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeaturesDump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.FeaturesDump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.FeaturesDump)
    MergeFrom(*source);
  }
}

void FeaturesDump::MergeFrom(const FeaturesDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.FeaturesDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  features_names_.MergeFrom(from.features_names_);
}

void FeaturesDump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.FeaturesDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturesDump::CopyFrom(const FeaturesDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.FeaturesDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesDump::IsInitialized() const {
  return true;
}

void FeaturesDump::Swap(FeaturesDump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeaturesDump::InternalSwap(FeaturesDump* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  features_names_.InternalSwap(&other->features_names_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeaturesDump::GetMetadata() const {
  protobuf_cosmo_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeaturesDump

// repeated float features = 1;
int FeaturesDump::features_size() const {
  return features_.size();
}
void FeaturesDump::clear_features() {
  features_.Clear();
}
float FeaturesDump::features(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.FeaturesDump.features)
  return features_.Get(index);
}
void FeaturesDump::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features)
}
void FeaturesDump::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features)
}
const ::google::protobuf::RepeatedField< float >&
FeaturesDump::features() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.FeaturesDump.features)
  return features_;
}
::google::protobuf::RepeatedField< float >*
FeaturesDump::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.FeaturesDump.features)
  return &features_;
}

// repeated string features_names = 2;
int FeaturesDump::features_names_size() const {
  return features_names_.size();
}
void FeaturesDump::clear_features_names() {
  features_names_.Clear();
}
const ::std::string& FeaturesDump::features_names(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Get(index);
}
::std::string* FeaturesDump::mutable_features_names(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Mutable(index);
}
void FeaturesDump::set_features_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features_names)
  features_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FeaturesDump::set_features_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features_names)
  features_names_.Mutable(index)->assign(std::move(value));
}
#endif
void FeaturesDump::set_features_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.FeaturesDump.features_names)
}
void FeaturesDump::set_features_names(int index, const char* value, size_t size) {
  features_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.FeaturesDump.features_names)
}
::std::string* FeaturesDump::add_features_names() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Add();
}
void FeaturesDump::add_features_names(const ::std::string& value) {
  features_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features_names)
}
#if LANG_CXX11
void FeaturesDump::add_features_names(::std::string&& value) {
  features_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features_names)
}
#endif
void FeaturesDump::add_features_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.FeaturesDump.features_names)
}
void FeaturesDump::add_features_names(const char* value, size_t size) {
  features_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.FeaturesDump.features_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeaturesDump::features_names() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.FeaturesDump.features_names)
  return features_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FeaturesDump::mutable_features_names() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.FeaturesDump.features_names)
  return &features_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
