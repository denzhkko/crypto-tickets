// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_result.proto

#ifndef PROTOBUF_cosmo_5fresult_2eproto__INCLUDED
#define PROTOBUF_cosmo_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cosmo.pb.h"
// @@protoc_insertion_point(includes)
namespace cosmo {
namespace pb {
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class CosmoOutput;
class CosmoOutputDefaultTypeInternal;
extern CosmoOutputDefaultTypeInternal _CosmoOutput_default_instance_;
class DebugInfo;
class DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class DebugInfo_UserDataEntry;
class DebugInfo_UserDataEntryDefaultTypeInternal;
extern DebugInfo_UserDataEntryDefaultTypeInternal _DebugInfo_UserDataEntry_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class DocumentFlags;
class DocumentFlagsDefaultTypeInternal;
extern DocumentFlagsDefaultTypeInternal _DocumentFlags_default_instance_;
class DocumentInfo;
class DocumentInfoDefaultTypeInternal;
extern DocumentInfoDefaultTypeInternal _DocumentInfo_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class FeaturesDump;
class FeaturesDumpDefaultTypeInternal;
extern FeaturesDumpDefaultTypeInternal _FeaturesDump_default_instance_;
class Geo;
class GeoDefaultTypeInternal;
extern GeoDefaultTypeInternal _Geo_default_instance_;
class InterleavingInfo;
class InterleavingInfoDefaultTypeInternal;
extern InterleavingInfoDefaultTypeInternal _InterleavingInfo_default_instance_;
class Metrics;
class MetricsDefaultTypeInternal;
extern MetricsDefaultTypeInternal _Metrics_default_instance_;
class Metrics_SubscriptionMetrics;
class Metrics_SubscriptionMetricsDefaultTypeInternal;
extern Metrics_SubscriptionMetricsDefaultTypeInternal _Metrics_SubscriptionMetrics_default_instance_;
class MixerInfo;
class MixerInfoDefaultTypeInternal;
extern MixerInfoDefaultTypeInternal _MixerInfo_default_instance_;
class PromoInfo;
class PromoInfoDefaultTypeInternal;
extern PromoInfoDefaultTypeInternal _PromoInfo_default_instance_;
class RankerInfo;
class RankerInfoDefaultTypeInternal;
extern RankerInfoDefaultTypeInternal _RankerInfo_default_instance_;
class RankerInfo_Item;
class RankerInfo_ItemDefaultTypeInternal;
extern RankerInfo_ItemDefaultTypeInternal _RankerInfo_Item_default_instance_;
class RetrieverStats;
class RetrieverStatsDefaultTypeInternal;
extern RetrieverStatsDefaultTypeInternal _RetrieverStats_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
}  // namespace pb
}  // namespace cosmo

namespace cosmo {
namespace pb {

namespace protobuf_cosmo_5fresult_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_5fresult_2eproto

enum Document_Type {
  Document_Type_BASE = 0,
  Document_Type_TEXT = 1
};
bool Document_Type_IsValid(int value);
const Document_Type Document_Type_Type_MIN = Document_Type_BASE;
const Document_Type Document_Type_Type_MAX = Document_Type_TEXT;
const int Document_Type_Type_ARRAYSIZE = Document_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Document_Type_descriptor();
inline const ::std::string& Document_Type_Name(Document_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Document_Type_descriptor(), value);
}
inline bool Document_Type_Parse(
    const ::std::string& name, Document_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Document_Type>(
    Document_Type_descriptor(), name, value);
}
enum Error_Code {
  Error_Code_DEFAULT = 0,
  Error_Code_INCOMPLETE_DATASET = 1
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_Code_MIN = Error_Code_DEFAULT;
const Error_Code Error_Code_Code_MAX = Error_Code_INCOMPLETE_DATASET;
const int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
// ===================================================================

class InterleavingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.InterleavingInfo) */ {
 public:
  InterleavingInfo();
  virtual ~InterleavingInfo();

  InterleavingInfo(const InterleavingInfo& from);

  inline InterleavingInfo& operator=(const InterleavingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterleavingInfo(InterleavingInfo&& from) noexcept
    : InterleavingInfo() {
    *this = ::std::move(from);
  }

  inline InterleavingInfo& operator=(InterleavingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterleavingInfo& default_instance();

  static inline const InterleavingInfo* internal_default_instance() {
    return reinterpret_cast<const InterleavingInfo*>(
               &_InterleavingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InterleavingInfo* other);
  friend void swap(InterleavingInfo& a, InterleavingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterleavingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InterleavingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterleavingInfo& from);
  void MergeFrom(const InterleavingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterleavingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ranker_name = 4;
  bool has_ranker_name() const;
  void clear_ranker_name();
  static const int kRankerNameFieldNumber = 4;
  const ::std::string& ranker_name() const;
  void set_ranker_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ranker_name(::std::string&& value);
  #endif
  void set_ranker_name(const char* value);
  void set_ranker_name(const char* value, size_t size);
  ::std::string* mutable_ranker_name();
  ::std::string* release_ranker_name();
  void set_allocated_ranker_name(::std::string* ranker_name);

  // optional int32 position_a = 2;
  bool has_position_a() const;
  void clear_position_a();
  static const int kPositionAFieldNumber = 2;
  ::google::protobuf::int32 position_a() const;
  void set_position_a(::google::protobuf::int32 value);

  // optional int32 position_b = 3;
  bool has_position_b() const;
  void clear_position_b();
  static const int kPositionBFieldNumber = 3;
  ::google::protobuf::int32 position_b() const;
  void set_position_b(::google::protobuf::int32 value);

  // required bool showed_from_a = 1;
  bool has_showed_from_a() const;
  void clear_showed_from_a();
  static const int kShowedFromAFieldNumber = 1;
  bool showed_from_a() const;
  void set_showed_from_a(bool value);

  // optional bool is_interleaving_experiment_ruined = 5;
  bool has_is_interleaving_experiment_ruined() const;
  void clear_is_interleaving_experiment_ruined();
  static const int kIsInterleavingExperimentRuinedFieldNumber = 5;
  bool is_interleaving_experiment_ruined() const;
  void set_is_interleaving_experiment_ruined(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.InterleavingInfo)
 private:
  void set_has_showed_from_a();
  void clear_has_showed_from_a();
  void set_has_position_a();
  void clear_has_position_a();
  void set_has_position_b();
  void clear_has_position_b();
  void set_has_ranker_name();
  void clear_has_ranker_name();
  void set_has_is_interleaving_experiment_ruined();
  void clear_has_is_interleaving_experiment_ruined();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ranker_name_;
  ::google::protobuf::int32 position_a_;
  ::google::protobuf::int32 position_b_;
  bool showed_from_a_;
  bool is_interleaving_experiment_ruined_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentFlags : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentFlags) */ {
 public:
  DocumentFlags();
  virtual ~DocumentFlags();

  DocumentFlags(const DocumentFlags& from);

  inline DocumentFlags& operator=(const DocumentFlags& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentFlags(DocumentFlags&& from) noexcept
    : DocumentFlags() {
    *this = ::std::move(from);
  }

  inline DocumentFlags& operator=(DocumentFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentFlags& default_instance();

  static inline const DocumentFlags* internal_default_instance() {
    return reinterpret_cast<const DocumentFlags*>(
               &_DocumentFlags_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DocumentFlags* other);
  friend void swap(DocumentFlags& a, DocumentFlags& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentFlags* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentFlags* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentFlags& from);
  void MergeFrom(const DocumentFlags& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentFlags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool may_be_skipped = 1;
  bool has_may_be_skipped() const;
  void clear_may_be_skipped();
  static const int kMayBeSkippedFieldNumber = 1;
  bool may_be_skipped() const;
  void set_may_be_skipped(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentFlags)
 private:
  void set_has_may_be_skipped();
  void clear_has_may_be_skipped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool may_be_skipped_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PromoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.PromoInfo) */ {
 public:
  PromoInfo();
  virtual ~PromoInfo();

  PromoInfo(const PromoInfo& from);

  inline PromoInfo& operator=(const PromoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PromoInfo(PromoInfo&& from) noexcept
    : PromoInfo() {
    *this = ::std::move(from);
  }

  inline PromoInfo& operator=(PromoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PromoInfo& default_instance();

  static inline const PromoInfo* internal_default_instance() {
    return reinterpret_cast<const PromoInfo*>(
               &_PromoInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PromoInfo* other);
  friend void swap(PromoInfo& a, PromoInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PromoInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PromoInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PromoInfo& from);
  void MergeFrom(const PromoInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PromoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string hit_pixels = 1;
  int hit_pixels_size() const;
  void clear_hit_pixels();
  static const int kHitPixelsFieldNumber = 1;
  const ::std::string& hit_pixels(int index) const;
  ::std::string* mutable_hit_pixels(int index);
  void set_hit_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hit_pixels(int index, ::std::string&& value);
  #endif
  void set_hit_pixels(int index, const char* value);
  void set_hit_pixels(int index, const char* value, size_t size);
  ::std::string* add_hit_pixels();
  void add_hit_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_hit_pixels(::std::string&& value);
  #endif
  void add_hit_pixels(const char* value);
  void add_hit_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hit_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hit_pixels();

  // repeated string click_pixels = 2;
  int click_pixels_size() const;
  void clear_click_pixels();
  static const int kClickPixelsFieldNumber = 2;
  const ::std::string& click_pixels(int index) const;
  ::std::string* mutable_click_pixels(int index);
  void set_click_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_click_pixels(int index, ::std::string&& value);
  #endif
  void set_click_pixels(int index, const char* value);
  void set_click_pixels(int index, const char* value, size_t size);
  ::std::string* add_click_pixels();
  void add_click_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_click_pixels(::std::string&& value);
  #endif
  void add_click_pixels(const char* value);
  void add_click_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& click_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_pixels();

  // repeated string readup_pixels = 3;
  int readup_pixels_size() const;
  void clear_readup_pixels();
  static const int kReadupPixelsFieldNumber = 3;
  const ::std::string& readup_pixels(int index) const;
  ::std::string* mutable_readup_pixels(int index);
  void set_readup_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_readup_pixels(int index, ::std::string&& value);
  #endif
  void set_readup_pixels(int index, const char* value);
  void set_readup_pixels(int index, const char* value, size_t size);
  ::std::string* add_readup_pixels();
  void add_readup_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_readup_pixels(::std::string&& value);
  #endif
  void add_readup_pixels(const char* value);
  void add_readup_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& readup_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_readup_pixels();

  // repeated string show_pixels = 4;
  int show_pixels_size() const;
  void clear_show_pixels();
  static const int kShowPixelsFieldNumber = 4;
  const ::std::string& show_pixels(int index) const;
  ::std::string* mutable_show_pixels(int index);
  void set_show_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_show_pixels(int index, ::std::string&& value);
  #endif
  void set_show_pixels(int index, const char* value);
  void set_show_pixels(int index, const char* value, size_t size);
  ::std::string* add_show_pixels();
  void add_show_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_show_pixels(::std::string&& value);
  #endif
  void add_show_pixels(const char* value);
  void add_show_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& show_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_show_pixels();

  // repeated string redirect_pixels = 5;
  int redirect_pixels_size() const;
  void clear_redirect_pixels();
  static const int kRedirectPixelsFieldNumber = 5;
  const ::std::string& redirect_pixels(int index) const;
  ::std::string* mutable_redirect_pixels(int index);
  void set_redirect_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_redirect_pixels(int index, ::std::string&& value);
  #endif
  void set_redirect_pixels(int index, const char* value);
  void set_redirect_pixels(int index, const char* value, size_t size);
  ::std::string* add_redirect_pixels();
  void add_redirect_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_redirect_pixels(::std::string&& value);
  #endif
  void add_redirect_pixels(const char* value);
  void add_redirect_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& redirect_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_redirect_pixels();

  // optional string pulse_utm_labels = 10;
  bool has_pulse_utm_labels() const;
  void clear_pulse_utm_labels();
  static const int kPulseUtmLabelsFieldNumber = 10;
  const ::std::string& pulse_utm_labels() const;
  void set_pulse_utm_labels(const ::std::string& value);
  #if LANG_CXX11
  void set_pulse_utm_labels(::std::string&& value);
  #endif
  void set_pulse_utm_labels(const char* value);
  void set_pulse_utm_labels(const char* value, size_t size);
  ::std::string* mutable_pulse_utm_labels();
  ::std::string* release_pulse_utm_labels();
  void set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels);

  // optional string rub_price = 12;
  bool has_rub_price() const;
  void clear_rub_price();
  static const int kRubPriceFieldNumber = 12;
  const ::std::string& rub_price() const;
  void set_rub_price(const ::std::string& value);
  #if LANG_CXX11
  void set_rub_price(::std::string&& value);
  #endif
  void set_rub_price(const char* value);
  void set_rub_price(const char* value, size_t size);
  ::std::string* mutable_rub_price();
  ::std::string* release_rub_price();
  void set_allocated_rub_price(::std::string* rub_price);

  // optional string user_geo = 13;
  bool has_user_geo() const;
  void clear_user_geo();
  static const int kUserGeoFieldNumber = 13;
  const ::std::string& user_geo() const;
  void set_user_geo(const ::std::string& value);
  #if LANG_CXX11
  void set_user_geo(::std::string&& value);
  #endif
  void set_user_geo(const char* value);
  void set_user_geo(const char* value, size_t size);
  ::std::string* mutable_user_geo();
  ::std::string* release_user_geo();
  void set_allocated_user_geo(::std::string* user_geo);

  // optional int64 id_ac = 11;
  bool has_id_ac() const;
  void clear_id_ac();
  static const int kIdAcFieldNumber = 11;
  ::google::protobuf::int64 id_ac() const;
  void set_id_ac(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.PromoInfo)
 private:
  void set_has_pulse_utm_labels();
  void clear_has_pulse_utm_labels();
  void set_has_id_ac();
  void clear_has_id_ac();
  void set_has_rub_price();
  void clear_has_rub_price();
  void set_has_user_geo();
  void clear_has_user_geo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hit_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> readup_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> show_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> redirect_pixels_;
  ::google::protobuf::internal::ArenaStringPtr pulse_utm_labels_;
  ::google::protobuf::internal::ArenaStringPtr rub_price_;
  ::google::protobuf::internal::ArenaStringPtr user_geo_;
  ::google::protobuf::int64 id_ac_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentInfo) */ {
 public:
  DocumentInfo();
  virtual ~DocumentInfo();

  DocumentInfo(const DocumentInfo& from);

  inline DocumentInfo& operator=(const DocumentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentInfo(DocumentInfo&& from) noexcept
    : DocumentInfo() {
    *this = ::std::move(from);
  }

  inline DocumentInfo& operator=(DocumentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentInfo& default_instance();

  static inline const DocumentInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentInfo*>(
               &_DocumentInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DocumentInfo* other);
  friend void swap(DocumentInfo& a, DocumentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentInfo& from);
  void MergeFrom(const DocumentInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.PromoInfo promo_info = 16;
  bool has_promo_info() const;
  void clear_promo_info();
  static const int kPromoInfoFieldNumber = 16;
  const ::cosmo::pb::PromoInfo& promo_info() const;
  ::cosmo::pb::PromoInfo* mutable_promo_info();
  ::cosmo::pb::PromoInfo* release_promo_info();
  void set_allocated_promo_info(::cosmo::pb::PromoInfo* promo_info);

  // optional bool is_from_socdem_source = 1;
  bool has_is_from_socdem_source() const;
  void clear_is_from_socdem_source();
  static const int kIsFromSocdemSourceFieldNumber = 1;
  bool is_from_socdem_source() const;
  void set_is_from_socdem_source(bool value);

  // optional bool is_from_similar_source = 2;
  bool has_is_from_similar_source() const;
  void clear_is_from_similar_source();
  static const int kIsFromSimilarSourceFieldNumber = 2;
  bool is_from_similar_source() const;
  void set_is_from_similar_source(bool value);

  // optional bool is_from_visited_source = 3;
  bool has_is_from_visited_source() const;
  void clear_is_from_visited_source();
  static const int kIsFromVisitedSourceFieldNumber = 3;
  bool is_from_visited_source() const;
  void set_is_from_visited_source(bool value);

  // optional bool is_from_clicked_source = 4;
  bool has_is_from_clicked_source() const;
  void clear_is_from_clicked_source();
  static const int kIsFromClickedSourceFieldNumber = 4;
  bool is_from_clicked_source() const;
  void set_is_from_clicked_source(bool value);

  // optional float porn_weight = 5;
  bool has_porn_weight() const;
  void clear_porn_weight();
  static const int kPornWeightFieldNumber = 5;
  float porn_weight() const;
  void set_porn_weight(float value);

  // optional int64 theme_hash = 6;
  bool has_theme_hash() const;
  void clear_theme_hash();
  static const int kThemeHashFieldNumber = 6;
  ::google::protobuf::int64 theme_hash() const;
  void set_theme_hash(::google::protobuf::int64 value);

  // optional int64 clicks_count = 7;
  bool has_clicks_count() const;
  void clear_clicks_count();
  static const int kClicksCountFieldNumber = 7;
  ::google::protobuf::int64 clicks_count() const;
  void set_clicks_count(::google::protobuf::int64 value);

  // optional int64 shows_count = 8;
  bool has_shows_count() const;
  void clear_shows_count();
  static const int kShowsCountFieldNumber = 8;
  ::google::protobuf::int64 shows_count() const;
  void set_shows_count(::google::protobuf::int64 value);

  // optional int64 pubdate = 10;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubdateFieldNumber = 10;
  ::google::protobuf::int64 pubdate() const;
  void set_pubdate(::google::protobuf::int64 value);

  // optional bool is_fulltext = 9;
  bool has_is_fulltext() const;
  void clear_is_fulltext();
  static const int kIsFulltextFieldNumber = 9;
  bool is_fulltext() const;
  void set_is_fulltext(bool value);

  // optional bool is_first_doc = 11;
  bool has_is_first_doc() const;
  void clear_is_first_doc();
  static const int kIsFirstDocFieldNumber = 11;
  bool is_first_doc() const;
  void set_is_first_doc(bool value);

  // optional bool is_commercial_fulltext = 12;
  bool has_is_commercial_fulltext() const;
  void clear_is_commercial_fulltext();
  static const int kIsCommercialFulltextFieldNumber = 12;
  bool is_commercial_fulltext() const;
  void set_is_commercial_fulltext(bool value);

  // optional bool is_vk = 13;
  bool has_is_vk() const;
  void clear_is_vk();
  static const int kIsVkFieldNumber = 13;
  bool is_vk() const;
  void set_is_vk(bool value);

  // optional int32 likes = 17;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 17;
  ::google::protobuf::int32 likes() const;
  void set_likes(::google::protobuf::int32 value);

  // optional int64 i2i_doc_id = 14;
  bool has_i2i_doc_id() const;
  void clear_i2i_doc_id();
  static const int kI2IDocIdFieldNumber = 14;
  ::google::protobuf::int64 i2i_doc_id() const;
  void set_i2i_doc_id(::google::protobuf::int64 value);

  // optional int32 comments = 18;
  bool has_comments() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 18;
  ::google::protobuf::int32 comments() const;
  void set_comments(::google::protobuf::int32 value);

  // optional bool is_relap_doc = 15;
  bool has_is_relap_doc() const;
  void clear_is_relap_doc();
  static const int kIsRelapDocFieldNumber = 15;
  bool is_relap_doc() const;
  void set_is_relap_doc(bool value);

  // optional bool is_user_fulltext = 19;
  bool has_is_user_fulltext() const;
  void clear_is_user_fulltext();
  static const int kIsUserFulltextFieldNumber = 19;
  bool is_user_fulltext() const;
  void set_is_user_fulltext(bool value);

  // optional bool is_video = 20;
  bool has_is_video() const;
  void clear_is_video();
  static const int kIsVideoFieldNumber = 20;
  bool is_video() const;
  void set_is_video(bool value);

  // optional bool is_exploration = 21;
  bool has_is_exploration() const;
  void clear_is_exploration();
  static const int kIsExplorationFieldNumber = 21;
  bool is_exploration() const;
  void set_is_exploration(bool value);

  // optional float source_price = 22;
  bool has_source_price() const;
  void clear_source_price();
  static const int kSourcePriceFieldNumber = 22;
  float source_price() const;
  void set_source_price(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentInfo)
 private:
  void set_has_is_from_socdem_source();
  void clear_has_is_from_socdem_source();
  void set_has_is_from_similar_source();
  void clear_has_is_from_similar_source();
  void set_has_is_from_visited_source();
  void clear_has_is_from_visited_source();
  void set_has_is_from_clicked_source();
  void clear_has_is_from_clicked_source();
  void set_has_porn_weight();
  void clear_has_porn_weight();
  void set_has_theme_hash();
  void clear_has_theme_hash();
  void set_has_clicks_count();
  void clear_has_clicks_count();
  void set_has_shows_count();
  void clear_has_shows_count();
  void set_has_is_fulltext();
  void clear_has_is_fulltext();
  void set_has_pubdate();
  void clear_has_pubdate();
  void set_has_is_first_doc();
  void clear_has_is_first_doc();
  void set_has_is_commercial_fulltext();
  void clear_has_is_commercial_fulltext();
  void set_has_is_vk();
  void clear_has_is_vk();
  void set_has_i2i_doc_id();
  void clear_has_i2i_doc_id();
  void set_has_is_relap_doc();
  void clear_has_is_relap_doc();
  void set_has_promo_info();
  void clear_has_promo_info();
  void set_has_likes();
  void clear_has_likes();
  void set_has_comments();
  void clear_has_comments();
  void set_has_is_user_fulltext();
  void clear_has_is_user_fulltext();
  void set_has_is_video();
  void clear_has_is_video();
  void set_has_is_exploration();
  void clear_has_is_exploration();
  void set_has_source_price();
  void clear_has_source_price();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::PromoInfo* promo_info_;
  bool is_from_socdem_source_;
  bool is_from_similar_source_;
  bool is_from_visited_source_;
  bool is_from_clicked_source_;
  float porn_weight_;
  ::google::protobuf::int64 theme_hash_;
  ::google::protobuf::int64 clicks_count_;
  ::google::protobuf::int64 shows_count_;
  ::google::protobuf::int64 pubdate_;
  bool is_fulltext_;
  bool is_first_doc_;
  bool is_commercial_fulltext_;
  bool is_vk_;
  ::google::protobuf::int32 likes_;
  ::google::protobuf::int64 i2i_doc_id_;
  ::google::protobuf::int32 comments_;
  bool is_relap_doc_;
  bool is_user_fulltext_;
  bool is_video_;
  bool is_exploration_;
  float source_price_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Document_Type Type;
  static const Type BASE =
    Document_Type_BASE;
  static const Type TEXT =
    Document_Type_TEXT;
  static inline bool Type_IsValid(int value) {
    return Document_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Document_Type_Type_MIN;
  static const Type Type_MAX =
    Document_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Document_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Document_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Document_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Document_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string erid = 15;
  bool has_erid() const;
  void clear_erid();
  static const int kEridFieldNumber = 15;
  const ::std::string& erid() const;
  void set_erid(const ::std::string& value);
  #if LANG_CXX11
  void set_erid(::std::string&& value);
  #endif
  void set_erid(const char* value);
  void set_erid(const char* value, size_t size);
  ::std::string* mutable_erid();
  ::std::string* release_erid();
  void set_allocated_erid(::std::string* erid);

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  bool has_interleaving_info() const;
  void clear_interleaving_info();
  static const int kInterleavingInfoFieldNumber = 7;
  const ::cosmo::pb::InterleavingInfo& interleaving_info() const;
  ::cosmo::pb::InterleavingInfo* mutable_interleaving_info();
  ::cosmo::pb::InterleavingInfo* release_interleaving_info();
  void set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info);

  // optional .cosmo.pb.DocumentFlags flags = 13;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 13;
  const ::cosmo::pb::DocumentFlags& flags() const;
  ::cosmo::pb::DocumentFlags* mutable_flags();
  ::cosmo::pb::DocumentFlags* release_flags();
  void set_allocated_flags(::cosmo::pb::DocumentFlags* flags);

  // optional .cosmo.pb.DocumentInfo document_info = 14;
  bool has_document_info() const;
  void clear_document_info();
  static const int kDocumentInfoFieldNumber = 14;
  const ::cosmo::pb::DocumentInfo& document_info() const;
  ::cosmo::pb::DocumentInfo* mutable_document_info();
  ::cosmo::pb::DocumentInfo* release_document_info();
  void set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info);

  // required int64 doc_id = 3;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 3;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional int32 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional .cosmo.pb.Document.Type type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::cosmo::pb::Document_Type type() const;
  void set_type(::cosmo::pb::Document_Type value);

  // optional int64 source_id = 4;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 4;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional float rank = 9;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 9;
  float rank() const;
  void set_rank(float value);

  // optional float source_rank = 10;
  bool has_source_rank() const;
  void clear_source_rank();
  static const int kSourceRankFieldNumber = 10;
  float source_rank() const;
  void set_source_rank(float value);

  // optional int64 site_hash = 11;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 11;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Document)
 private:
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_type();
  void clear_has_type();
  void set_has_interleaving_info();
  void clear_has_interleaving_info();
  void set_has_rank();
  void clear_has_rank();
  void set_has_source_rank();
  void clear_has_source_rank();
  void set_has_site_hash();
  void clear_has_site_hash();
  void set_has_flags();
  void clear_has_flags();
  void set_has_document_info();
  void clear_has_document_info();
  void set_has_erid();
  void clear_has_erid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr erid_;
  ::cosmo::pb::InterleavingInfo* interleaving_info_;
  ::cosmo::pb::DocumentFlags* flags_;
  ::cosmo::pb::DocumentInfo* document_info_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::int32 category_id_;
  int type_;
  ::google::protobuf::int64 source_id_;
  float rank_;
  float source_rank_;
  ::google::protobuf::int64 site_hash_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankerInfo_Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.RankerInfo.Item) */ {
 public:
  RankerInfo_Item();
  virtual ~RankerInfo_Item();

  RankerInfo_Item(const RankerInfo_Item& from);

  inline RankerInfo_Item& operator=(const RankerInfo_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankerInfo_Item(RankerInfo_Item&& from) noexcept
    : RankerInfo_Item() {
    *this = ::std::move(from);
  }

  inline RankerInfo_Item& operator=(RankerInfo_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankerInfo_Item& default_instance();

  static inline const RankerInfo_Item* internal_default_instance() {
    return reinterpret_cast<const RankerInfo_Item*>(
               &_RankerInfo_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RankerInfo_Item* other);
  friend void swap(RankerInfo_Item& a, RankerInfo_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankerInfo_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  RankerInfo_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankerInfo_Item& from);
  void MergeFrom(const RankerInfo_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankerInfo_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.RankerInfo.Item)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.RankerInfo) */ {
 public:
  RankerInfo();
  virtual ~RankerInfo();

  RankerInfo(const RankerInfo& from);

  inline RankerInfo& operator=(const RankerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankerInfo(RankerInfo&& from) noexcept
    : RankerInfo() {
    *this = ::std::move(from);
  }

  inline RankerInfo& operator=(RankerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankerInfo& default_instance();

  static inline const RankerInfo* internal_default_instance() {
    return reinterpret_cast<const RankerInfo*>(
               &_RankerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RankerInfo* other);
  friend void swap(RankerInfo& a, RankerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RankerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankerInfo& from);
  void MergeFrom(const RankerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RankerInfo_Item Item;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.RankerInfo.Item items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::cosmo::pb::RankerInfo_Item& items(int index) const;
  ::cosmo::pb::RankerInfo_Item* mutable_items(int index);
  ::cosmo::pb::RankerInfo_Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.RankerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item > items_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static const Code DEFAULT =
    Error_Code_DEFAULT;
  static const Code INCOMPLETE_DATASET =
    Error_Code_INCOMPLETE_DATASET;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Error_Code_Code_MIN;
  static const Code Code_MAX =
    Error_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Error_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .cosmo.pb.Error.Code code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::cosmo::pb::Error_Code code() const;
  void set_code(::cosmo::pb::Error_Code value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Error)
 private:
  void set_has_msg();
  void clear_has_msg();
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int code_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RetrieverStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.RetrieverStats) */ {
 public:
  RetrieverStats();
  virtual ~RetrieverStats();

  RetrieverStats(const RetrieverStats& from);

  inline RetrieverStats& operator=(const RetrieverStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetrieverStats(RetrieverStats&& from) noexcept
    : RetrieverStats() {
    *this = ::std::move(from);
  }

  inline RetrieverStats& operator=(RetrieverStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrieverStats& default_instance();

  static inline const RetrieverStats* internal_default_instance() {
    return reinterpret_cast<const RetrieverStats*>(
               &_RetrieverStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RetrieverStats* other);
  friend void swap(RetrieverStats& a, RetrieverStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetrieverStats* New() const PROTOBUF_FINAL { return New(NULL); }

  RetrieverStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RetrieverStats& from);
  void MergeFrom(const RetrieverStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RetrieverStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 documents_total = 1;
  bool has_documents_total() const;
  void clear_documents_total();
  static const int kDocumentsTotalFieldNumber = 1;
  ::google::protobuf::int32 documents_total() const;
  void set_documents_total(::google::protobuf::int32 value);

  // optional int32 documents_processed = 2;
  bool has_documents_processed() const;
  void clear_documents_processed();
  static const int kDocumentsProcessedFieldNumber = 2;
  ::google::protobuf::int32 documents_processed() const;
  void set_documents_processed(::google::protobuf::int32 value);

  // optional int32 documents_skipped = 3;
  bool has_documents_skipped() const;
  void clear_documents_skipped();
  static const int kDocumentsSkippedFieldNumber = 3;
  ::google::protobuf::int32 documents_skipped() const;
  void set_documents_skipped(::google::protobuf::int32 value);

  // optional int32 sources_selected = 4;
  bool has_sources_selected() const;
  void clear_sources_selected();
  static const int kSourcesSelectedFieldNumber = 4;
  ::google::protobuf::int32 sources_selected() const;
  void set_sources_selected(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.RetrieverStats)
 private:
  void set_has_documents_total();
  void clear_has_documents_total();
  void set_has_documents_processed();
  void clear_has_documents_processed();
  void set_has_documents_skipped();
  void clear_has_documents_skipped();
  void set_has_sources_selected();
  void clear_has_sources_selected();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 documents_total_;
  ::google::protobuf::int32 documents_processed_;
  ::google::protobuf::int32 documents_skipped_;
  ::google::protobuf::int32 sources_selected_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MixerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.MixerInfo) */ {
 public:
  MixerInfo();
  virtual ~MixerInfo();

  MixerInfo(const MixerInfo& from);

  inline MixerInfo& operator=(const MixerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MixerInfo(MixerInfo&& from) noexcept
    : MixerInfo() {
    *this = ::std::move(from);
  }

  inline MixerInfo& operator=(MixerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MixerInfo& default_instance();

  static inline const MixerInfo* internal_default_instance() {
    return reinterpret_cast<const MixerInfo*>(
               &_MixerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MixerInfo* other);
  friend void swap(MixerInfo& a, MixerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MixerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MixerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MixerInfo& from);
  void MergeFrom(const MixerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MixerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 experiment_id = 1;
  bool has_experiment_id() const;
  void clear_experiment_id();
  static const int kExperimentIdFieldNumber = 1;
  ::google::protobuf::uint32 experiment_id() const;
  void set_experiment_id(::google::protobuf::uint32 value);

  // optional bool showed_from_a = 2;
  bool has_showed_from_a() const;
  void clear_showed_from_a();
  static const int kShowedFromAFieldNumber = 2;
  bool showed_from_a() const;
  void set_showed_from_a(bool value);

  // optional bool not_affected = 3;
  bool has_not_affected() const;
  void clear_not_affected();
  static const int kNotAffectedFieldNumber = 3;
  bool not_affected() const;
  void set_not_affected(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.MixerInfo)
 private:
  void set_has_experiment_id();
  void clear_has_experiment_id();
  void set_has_showed_from_a();
  void clear_has_showed_from_a();
  void set_has_not_affected();
  void clear_has_not_affected();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 experiment_id_;
  bool showed_from_a_;
  bool not_affected_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Geo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Geo) */ {
 public:
  Geo();
  virtual ~Geo();

  Geo(const Geo& from);

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geo(Geo&& from) noexcept
    : Geo() {
    *this = ::std::move(from);
  }

  inline Geo& operator=(Geo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geo& default_instance();

  static inline const Geo* internal_default_instance() {
    return reinterpret_cast<const Geo*>(
               &_Geo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Geo* other);
  friend void swap(Geo& a, Geo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geo* New() const PROTOBUF_FINAL { return New(NULL); }

  Geo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Geo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 country_id = 1;
  bool has_country_id() const;
  void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  ::google::protobuf::int32 country_id() const;
  void set_country_id(::google::protobuf::int32 value);

  // optional int32 region_id = 2;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // optional int32 city_id = 3;
  bool has_city_id() const;
  void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  ::google::protobuf::int32 city_id() const;
  void set_city_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Geo)
 private:
  void set_has_country_id();
  void clear_has_country_id();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_city_id();
  void clear_has_city_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 country_id_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 city_id_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metrics_SubscriptionMetrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Metrics.SubscriptionMetrics) */ {
 public:
  Metrics_SubscriptionMetrics();
  virtual ~Metrics_SubscriptionMetrics();

  Metrics_SubscriptionMetrics(const Metrics_SubscriptionMetrics& from);

  inline Metrics_SubscriptionMetrics& operator=(const Metrics_SubscriptionMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metrics_SubscriptionMetrics(Metrics_SubscriptionMetrics&& from) noexcept
    : Metrics_SubscriptionMetrics() {
    *this = ::std::move(from);
  }

  inline Metrics_SubscriptionMetrics& operator=(Metrics_SubscriptionMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics_SubscriptionMetrics& default_instance();

  static inline const Metrics_SubscriptionMetrics* internal_default_instance() {
    return reinterpret_cast<const Metrics_SubscriptionMetrics*>(
               &_Metrics_SubscriptionMetrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Metrics_SubscriptionMetrics* other);
  friend void swap(Metrics_SubscriptionMetrics& a, Metrics_SubscriptionMetrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metrics_SubscriptionMetrics* New() const PROTOBUF_FINAL { return New(NULL); }

  Metrics_SubscriptionMetrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metrics_SubscriptionMetrics& from);
  void MergeFrom(const Metrics_SubscriptionMetrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metrics_SubscriptionMetrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 last_ts = 2;
  bool has_last_ts() const;
  void clear_last_ts();
  static const int kLastTsFieldNumber = 2;
  ::google::protobuf::int64 last_ts() const;
  void set_last_ts(::google::protobuf::int64 value);

  // required uint32 cnt = 1;
  bool has_cnt() const;
  void clear_cnt();
  static const int kCntFieldNumber = 1;
  ::google::protobuf::uint32 cnt() const;
  void set_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Metrics.SubscriptionMetrics)
 private:
  void set_has_cnt();
  void clear_has_cnt();
  void set_has_last_ts();
  void clear_has_last_ts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 last_ts_;
  ::google::protobuf::uint32 cnt_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Metrics) */ {
 public:
  Metrics();
  virtual ~Metrics();

  Metrics(const Metrics& from);

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metrics(Metrics&& from) noexcept
    : Metrics() {
    *this = ::std::move(from);
  }

  inline Metrics& operator=(Metrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics& default_instance();

  static inline const Metrics* internal_default_instance() {
    return reinterpret_cast<const Metrics*>(
               &_Metrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Metrics* other);
  friend void swap(Metrics& a, Metrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metrics* New() const PROTOBUF_FINAL { return New(NULL); }

  Metrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metrics& from);
  void MergeFrom(const Metrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Metrics_SubscriptionMetrics SubscriptionMetrics;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.Geo geo = 17;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 17;
  const ::cosmo::pb::Geo& geo() const;
  ::cosmo::pb::Geo* mutable_geo();
  ::cosmo::pb::Geo* release_geo();
  void set_allocated_geo(::cosmo::pb::Geo* geo);

  // optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
  bool has_category_subscription_metrics() const;
  void clear_category_subscription_metrics();
  static const int kCategorySubscriptionMetricsFieldNumber = 20;
  const ::cosmo::pb::Metrics_SubscriptionMetrics& category_subscription_metrics() const;
  ::cosmo::pb::Metrics_SubscriptionMetrics* mutable_category_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* release_category_subscription_metrics();
  void set_allocated_category_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* category_subscription_metrics);

  // optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
  bool has_cold_sources_subscription_metrics() const;
  void clear_cold_sources_subscription_metrics();
  static const int kColdSourcesSubscriptionMetricsFieldNumber = 21;
  const ::cosmo::pb::Metrics_SubscriptionMetrics& cold_sources_subscription_metrics() const;
  ::cosmo::pb::Metrics_SubscriptionMetrics* mutable_cold_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* release_cold_sources_subscription_metrics();
  void set_allocated_cold_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* cold_sources_subscription_metrics);

  // optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
  bool has_hot_sources_subscription_metrics() const;
  void clear_hot_sources_subscription_metrics();
  static const int kHotSourcesSubscriptionMetricsFieldNumber = 22;
  const ::cosmo::pb::Metrics_SubscriptionMetrics& hot_sources_subscription_metrics() const;
  ::cosmo::pb::Metrics_SubscriptionMetrics* mutable_hot_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* release_hot_sources_subscription_metrics();
  void set_allocated_hot_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* hot_sources_subscription_metrics);

  // optional int32 age = 1;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 1;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional int32 gender = 2;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 2;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // optional uint32 similar_sources_cnt = 6;
  bool has_similar_sources_cnt() const;
  void clear_similar_sources_cnt();
  static const int kSimilarSourcesCntFieldNumber = 6;
  ::google::protobuf::uint32 similar_sources_cnt() const;
  void set_similar_sources_cnt(::google::protobuf::uint32 value);

  // optional uint32 visited_sources_cnt = 7;
  bool has_visited_sources_cnt() const;
  void clear_visited_sources_cnt();
  static const int kVisitedSourcesCntFieldNumber = 7;
  ::google::protobuf::uint32 visited_sources_cnt() const;
  void set_visited_sources_cnt(::google::protobuf::uint32 value);

  // optional bool has_email = 3;
  bool has_has_email() const;
  void clear_has_email();
  static const int kHasEmailFieldNumber = 3;
  bool has_email() const;
  void set_has_email(bool value);

  // optional bool has_ok = 4;
  bool has_has_ok() const;
  void clear_has_ok();
  static const int kHasOkFieldNumber = 4;
  bool has_ok() const;
  void set_has_ok(bool value);

  // optional bool has_vk = 5;
  bool has_has_vk() const;
  void clear_has_vk();
  static const int kHasVkFieldNumber = 5;
  bool has_vk() const;
  void set_has_vk(bool value);

  // optional bool show_category_subscription = 16;
  bool has_show_category_subscription() const;
  void clear_show_category_subscription();
  static const int kShowCategorySubscriptionFieldNumber = 16;
  bool show_category_subscription() const;
  void set_show_category_subscription(bool value);

  // optional uint32 clicked_sources_cnt = 8;
  bool has_clicked_sources_cnt() const;
  void clear_clicked_sources_cnt();
  static const int kClickedSourcesCntFieldNumber = 8;
  ::google::protobuf::uint32 clicked_sources_cnt() const;
  void set_clicked_sources_cnt(::google::protobuf::uint32 value);

  // optional uint32 similar_sites_cnt = 9;
  bool has_similar_sites_cnt() const;
  void clear_similar_sites_cnt();
  static const int kSimilarSitesCntFieldNumber = 9;
  ::google::protobuf::uint32 similar_sites_cnt() const;
  void set_similar_sites_cnt(::google::protobuf::uint32 value);

  // optional uint32 visited_sites_cnt = 10;
  bool has_visited_sites_cnt() const;
  void clear_visited_sites_cnt();
  static const int kVisitedSitesCntFieldNumber = 10;
  ::google::protobuf::uint32 visited_sites_cnt() const;
  void set_visited_sites_cnt(::google::protobuf::uint32 value);

  // optional uint32 clicked_sites_cnt = 11;
  bool has_clicked_sites_cnt() const;
  void clear_clicked_sites_cnt();
  static const int kClickedSitesCntFieldNumber = 11;
  ::google::protobuf::uint32 clicked_sites_cnt() const;
  void set_clicked_sites_cnt(::google::protobuf::uint32 value);

  // optional uint32 visited_sources_visits = 12;
  bool has_visited_sources_visits() const;
  void clear_visited_sources_visits();
  static const int kVisitedSourcesVisitsFieldNumber = 12;
  ::google::protobuf::uint32 visited_sources_visits() const;
  void set_visited_sources_visits(::google::protobuf::uint32 value);

  // optional int64 sites_for_user_cnt = 14;
  bool has_sites_for_user_cnt() const;
  void clear_sites_for_user_cnt();
  static const int kSitesForUserCntFieldNumber = 14;
  ::google::protobuf::int64 sites_for_user_cnt() const;
  void set_sites_for_user_cnt(::google::protobuf::int64 value);

  // optional uint32 clicked_sources_visits = 13;
  bool has_clicked_sources_visits() const;
  void clear_clicked_sources_visits();
  static const int kClickedSourcesVisitsFieldNumber = 13;
  ::google::protobuf::uint32 clicked_sources_visits() const;
  void set_clicked_sources_visits(::google::protobuf::uint32 value);

  // optional bool show_cold_sources_subscription = 18;
  bool has_show_cold_sources_subscription() const;
  void clear_show_cold_sources_subscription();
  static const int kShowColdSourcesSubscriptionFieldNumber = 18;
  bool show_cold_sources_subscription() const;
  void set_show_cold_sources_subscription(bool value);

  // optional bool show_hot_sources_subscription = 19;
  bool has_show_hot_sources_subscription() const;
  void clear_show_hot_sources_subscription();
  static const int kShowHotSourcesSubscriptionFieldNumber = 19;
  bool show_hot_sources_subscription() const;
  void set_show_hot_sources_subscription(bool value);

  // optional bool cold_lenta = 23;
  bool has_cold_lenta() const;
  void clear_cold_lenta();
  static const int kColdLentaFieldNumber = 23;
  bool cold_lenta() const;
  void set_cold_lenta(bool value);

  // optional bool empty_lenta = 24;
  bool has_empty_lenta() const;
  void clear_empty_lenta();
  static const int kEmptyLentaFieldNumber = 24;
  bool empty_lenta() const;
  void set_empty_lenta(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Metrics)
 private:
  void set_has_age();
  void clear_has_age();
  void set_has_gender();
  void clear_has_gender();
  void set_has_has_email();
  void clear_has_has_email();
  void set_has_has_ok();
  void clear_has_has_ok();
  void set_has_has_vk();
  void clear_has_has_vk();
  void set_has_similar_sources_cnt();
  void clear_has_similar_sources_cnt();
  void set_has_visited_sources_cnt();
  void clear_has_visited_sources_cnt();
  void set_has_clicked_sources_cnt();
  void clear_has_clicked_sources_cnt();
  void set_has_similar_sites_cnt();
  void clear_has_similar_sites_cnt();
  void set_has_visited_sites_cnt();
  void clear_has_visited_sites_cnt();
  void set_has_clicked_sites_cnt();
  void clear_has_clicked_sites_cnt();
  void set_has_visited_sources_visits();
  void clear_has_visited_sources_visits();
  void set_has_clicked_sources_visits();
  void clear_has_clicked_sources_visits();
  void set_has_sites_for_user_cnt();
  void clear_has_sites_for_user_cnt();
  void set_has_show_category_subscription();
  void clear_has_show_category_subscription();
  void set_has_geo();
  void clear_has_geo();
  void set_has_show_cold_sources_subscription();
  void clear_has_show_cold_sources_subscription();
  void set_has_show_hot_sources_subscription();
  void clear_has_show_hot_sources_subscription();
  void set_has_category_subscription_metrics();
  void clear_has_category_subscription_metrics();
  void set_has_cold_sources_subscription_metrics();
  void clear_has_cold_sources_subscription_metrics();
  void set_has_hot_sources_subscription_metrics();
  void clear_has_hot_sources_subscription_metrics();
  void set_has_cold_lenta();
  void clear_has_cold_lenta();
  void set_has_empty_lenta();
  void clear_has_empty_lenta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::Geo* geo_;
  ::cosmo::pb::Metrics_SubscriptionMetrics* category_subscription_metrics_;
  ::cosmo::pb::Metrics_SubscriptionMetrics* cold_sources_subscription_metrics_;
  ::cosmo::pb::Metrics_SubscriptionMetrics* hot_sources_subscription_metrics_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::uint32 similar_sources_cnt_;
  ::google::protobuf::uint32 visited_sources_cnt_;
  bool has_email_;
  bool has_ok_;
  bool has_vk_;
  bool show_category_subscription_;
  ::google::protobuf::uint32 clicked_sources_cnt_;
  ::google::protobuf::uint32 similar_sites_cnt_;
  ::google::protobuf::uint32 visited_sites_cnt_;
  ::google::protobuf::uint32 clicked_sites_cnt_;
  ::google::protobuf::uint32 visited_sources_visits_;
  ::google::protobuf::int64 sites_for_user_cnt_;
  ::google::protobuf::uint32 clicked_sources_visits_;
  bool show_cold_sources_subscription_;
  bool show_hot_sources_subscription_;
  bool cold_lenta_;
  bool empty_lenta_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo_UserDataEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DebugInfo.UserDataEntry) */ {
 public:
  DebugInfo_UserDataEntry();
  virtual ~DebugInfo_UserDataEntry();

  DebugInfo_UserDataEntry(const DebugInfo_UserDataEntry& from);

  inline DebugInfo_UserDataEntry& operator=(const DebugInfo_UserDataEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugInfo_UserDataEntry(DebugInfo_UserDataEntry&& from) noexcept
    : DebugInfo_UserDataEntry() {
    *this = ::std::move(from);
  }

  inline DebugInfo_UserDataEntry& operator=(DebugInfo_UserDataEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo_UserDataEntry& default_instance();

  static inline const DebugInfo_UserDataEntry* internal_default_instance() {
    return reinterpret_cast<const DebugInfo_UserDataEntry*>(
               &_DebugInfo_UserDataEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DebugInfo_UserDataEntry* other);
  friend void swap(DebugInfo_UserDataEntry& a, DebugInfo_UserDataEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo_UserDataEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugInfo_UserDataEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugInfo_UserDataEntry& from);
  void MergeFrom(const DebugInfo_UserDataEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugInfo_UserDataEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional .cosmo.pb.UserData data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::cosmo::pb::UserData& data() const;
  ::cosmo::pb::UserData* mutable_data();
  ::cosmo::pb::UserData* release_data();
  void set_allocated_data(::cosmo::pb::UserData* data);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DebugInfo.UserDataEntry)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::cosmo::pb::UserData* data_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DebugInfo) */ {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DebugInfo* other);
  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DebugInfo_UserDataEntry UserDataEntry;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
  int user_data_size() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 1;
  const ::cosmo::pb::DebugInfo_UserDataEntry& user_data(int index) const;
  ::cosmo::pb::DebugInfo_UserDataEntry* mutable_user_data(int index);
  ::cosmo::pb::DebugInfo_UserDataEntry* add_user_data();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >*
      mutable_user_data();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >&
      user_data() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.DebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry > user_data_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const PROTOBUF_FINAL { return New(NULL); }

  Source* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 site_hash = 3;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 3;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // optional int32 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional uint32 documents_count = 4;
  bool has_documents_count() const;
  void clear_documents_count();
  static const int kDocumentsCountFieldNumber = 4;
  ::google::protobuf::uint32 documents_count() const;
  void set_documents_count(::google::protobuf::uint32 value);

  // optional float rank = 5;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 5;
  float rank() const;
  void set_rank(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Source)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_site_hash();
  void clear_has_site_hash();
  void set_has_documents_count();
  void clear_has_documents_count();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 site_hash_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::uint32 documents_count_;
  float rank_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Category& default_instance();

  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Category* other);
  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const PROTOBUF_FINAL { return New(NULL); }

  Category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 category_id = 1;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  ::google::protobuf::int64 category_id() const;
  void set_category_id(::google::protobuf::int64 value);

  // optional float rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Category)
 private:
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 category_id_;
  float rank_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosmoOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.CosmoOutput) */ {
 public:
  CosmoOutput();
  virtual ~CosmoOutput();

  CosmoOutput(const CosmoOutput& from);

  inline CosmoOutput& operator=(const CosmoOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosmoOutput(CosmoOutput&& from) noexcept
    : CosmoOutput() {
    *this = ::std::move(from);
  }

  inline CosmoOutput& operator=(CosmoOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmoOutput& default_instance();

  static inline const CosmoOutput* internal_default_instance() {
    return reinterpret_cast<const CosmoOutput*>(
               &_CosmoOutput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CosmoOutput* other);
  friend void swap(CosmoOutput& a, CosmoOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosmoOutput* New() const PROTOBUF_FINAL { return New(NULL); }

  CosmoOutput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CosmoOutput& from);
  void MergeFrom(const CosmoOutput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CosmoOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.Document documents = 4;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 4;
  const ::cosmo::pb::Document& documents(int index) const;
  ::cosmo::pb::Document* mutable_documents(int index);
  ::cosmo::pb::Document* add_documents();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
      documents() const;

  // repeated .cosmo.pb.Error errors = 10;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 10;
  const ::cosmo::pb::Error& errors(int index) const;
  ::cosmo::pb::Error* mutable_errors(int index);
  ::cosmo::pb::Error* add_errors();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
      mutable_errors();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
      errors() const;

  // repeated .cosmo.pb.Source sources = 15;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 15;
  const ::cosmo::pb::Source& sources(int index) const;
  ::cosmo::pb::Source* mutable_sources(int index);
  ::cosmo::pb::Source* add_sources();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
      sources() const;

  // repeated .cosmo.pb.Category categories = 16;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 16;
  const ::cosmo::pb::Category& categories(int index) const;
  ::cosmo::pb::Category* mutable_categories(int index);
  ::cosmo::pb::Category* add_categories();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
      categories() const;

  // optional .cosmo.pb.RankerInfo ranker_info = 9;
  bool has_ranker_info() const;
  void clear_ranker_info();
  static const int kRankerInfoFieldNumber = 9;
  const ::cosmo::pb::RankerInfo& ranker_info() const;
  ::cosmo::pb::RankerInfo* mutable_ranker_info();
  ::cosmo::pb::RankerInfo* release_ranker_info();
  void set_allocated_ranker_info(::cosmo::pb::RankerInfo* ranker_info);

  // optional .cosmo.pb.RetrieverStats retriever_stats = 11;
  bool has_retriever_stats() const;
  void clear_retriever_stats();
  static const int kRetrieverStatsFieldNumber = 11;
  const ::cosmo::pb::RetrieverStats& retriever_stats() const;
  ::cosmo::pb::RetrieverStats* mutable_retriever_stats();
  ::cosmo::pb::RetrieverStats* release_retriever_stats();
  void set_allocated_retriever_stats(::cosmo::pb::RetrieverStats* retriever_stats);

  // optional .cosmo.pb.MixerInfo mixer_info = 12;
  bool has_mixer_info() const;
  void clear_mixer_info();
  static const int kMixerInfoFieldNumber = 12;
  const ::cosmo::pb::MixerInfo& mixer_info() const;
  ::cosmo::pb::MixerInfo* mutable_mixer_info();
  ::cosmo::pb::MixerInfo* release_mixer_info();
  void set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info);

  // optional .cosmo.pb.Metrics metrics = 13;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 13;
  const ::cosmo::pb::Metrics& metrics() const;
  ::cosmo::pb::Metrics* mutable_metrics();
  ::cosmo::pb::Metrics* release_metrics();
  void set_allocated_metrics(::cosmo::pb::Metrics* metrics);

  // optional .cosmo.pb.DebugInfo debug_info = 14;
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 14;
  const ::cosmo::pb::DebugInfo& debug_info() const;
  ::cosmo::pb::DebugInfo* mutable_debug_info();
  ::cosmo::pb::DebugInfo* release_debug_info();
  void set_allocated_debug_info(::cosmo::pb::DebugInfo* debug_info);

  // @@protoc_insertion_point(class_scope:cosmo.pb.CosmoOutput)
 private:
  void set_has_ranker_info();
  void clear_has_ranker_info();
  void set_has_retriever_stats();
  void clear_has_retriever_stats();
  void set_has_mixer_info();
  void clear_has_mixer_info();
  void set_has_metrics();
  void clear_has_metrics();
  void set_has_debug_info();
  void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document > documents_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error > errors_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source > sources_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category > categories_;
  ::cosmo::pb::RankerInfo* ranker_info_;
  ::cosmo::pb::RetrieverStats* retriever_stats_;
  ::cosmo::pb::MixerInfo* mixer_info_;
  ::cosmo::pb::Metrics* metrics_;
  ::cosmo::pb::DebugInfo* debug_info_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeaturesDump : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.FeaturesDump) */ {
 public:
  FeaturesDump();
  virtual ~FeaturesDump();

  FeaturesDump(const FeaturesDump& from);

  inline FeaturesDump& operator=(const FeaturesDump& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeaturesDump(FeaturesDump&& from) noexcept
    : FeaturesDump() {
    *this = ::std::move(from);
  }

  inline FeaturesDump& operator=(FeaturesDump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeaturesDump& default_instance();

  static inline const FeaturesDump* internal_default_instance() {
    return reinterpret_cast<const FeaturesDump*>(
               &_FeaturesDump_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(FeaturesDump* other);
  friend void swap(FeaturesDump& a, FeaturesDump& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeaturesDump* New() const PROTOBUF_FINAL { return New(NULL); }

  FeaturesDump* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeaturesDump& from);
  void MergeFrom(const FeaturesDump& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeaturesDump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::google::protobuf::RepeatedField< float >&
      features() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_features();

  // repeated string features_names = 2;
  int features_names_size() const;
  void clear_features_names();
  static const int kFeaturesNamesFieldNumber = 2;
  const ::std::string& features_names(int index) const;
  ::std::string* mutable_features_names(int index);
  void set_features_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_features_names(int index, ::std::string&& value);
  #endif
  void set_features_names(int index, const char* value);
  void set_features_names(int index, const char* value, size_t size);
  ::std::string* add_features_names();
  void add_features_names(const ::std::string& value);
  #if LANG_CXX11
  void add_features_names(::std::string&& value);
  #endif
  void add_features_names(const char* value);
  void add_features_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& features_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_features_names();

  // @@protoc_insertion_point(class_scope:cosmo.pb.FeaturesDump)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > features_;
  ::google::protobuf::RepeatedPtrField< ::std::string> features_names_;
  friend struct protobuf_cosmo_5fresult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterleavingInfo

// required bool showed_from_a = 1;
inline bool InterleavingInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InterleavingInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InterleavingInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InterleavingInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
inline bool InterleavingInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.showed_from_a)
  return showed_from_a_;
}
inline void InterleavingInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.showed_from_a)
}

// optional int32 position_a = 2;
inline bool InterleavingInfo::has_position_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterleavingInfo::set_has_position_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InterleavingInfo::clear_has_position_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InterleavingInfo::clear_position_a() {
  position_a_ = 0;
  clear_has_position_a();
}
inline ::google::protobuf::int32 InterleavingInfo::position_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.position_a)
  return position_a_;
}
inline void InterleavingInfo::set_position_a(::google::protobuf::int32 value) {
  set_has_position_a();
  position_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.position_a)
}

// optional int32 position_b = 3;
inline bool InterleavingInfo::has_position_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InterleavingInfo::set_has_position_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InterleavingInfo::clear_has_position_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InterleavingInfo::clear_position_b() {
  position_b_ = 0;
  clear_has_position_b();
}
inline ::google::protobuf::int32 InterleavingInfo::position_b() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.position_b)
  return position_b_;
}
inline void InterleavingInfo::set_position_b(::google::protobuf::int32 value) {
  set_has_position_b();
  position_b_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.position_b)
}

// optional string ranker_name = 4;
inline bool InterleavingInfo::has_ranker_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterleavingInfo::set_has_ranker_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterleavingInfo::clear_has_ranker_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterleavingInfo::clear_ranker_name() {
  ranker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ranker_name();
}
inline const ::std::string& InterleavingInfo::ranker_name() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.ranker_name)
  return ranker_name_.GetNoArena();
}
inline void InterleavingInfo::set_ranker_name(const ::std::string& value) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.ranker_name)
}
#if LANG_CXX11
inline void InterleavingInfo::set_ranker_name(::std::string&& value) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.InterleavingInfo.ranker_name)
}
#endif
inline void InterleavingInfo::set_ranker_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.InterleavingInfo.ranker_name)
}
inline void InterleavingInfo::set_ranker_name(const char* value, size_t size) {
  set_has_ranker_name();
  ranker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.InterleavingInfo.ranker_name)
}
inline ::std::string* InterleavingInfo::mutable_ranker_name() {
  set_has_ranker_name();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.InterleavingInfo.ranker_name)
  return ranker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterleavingInfo::release_ranker_name() {
  // @@protoc_insertion_point(field_release:cosmo.pb.InterleavingInfo.ranker_name)
  clear_has_ranker_name();
  return ranker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterleavingInfo::set_allocated_ranker_name(::std::string* ranker_name) {
  if (ranker_name != NULL) {
    set_has_ranker_name();
  } else {
    clear_has_ranker_name();
  }
  ranker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ranker_name);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.InterleavingInfo.ranker_name)
}

// optional bool is_interleaving_experiment_ruined = 5;
inline bool InterleavingInfo::has_is_interleaving_experiment_ruined() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InterleavingInfo::set_has_is_interleaving_experiment_ruined() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InterleavingInfo::clear_has_is_interleaving_experiment_ruined() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InterleavingInfo::clear_is_interleaving_experiment_ruined() {
  is_interleaving_experiment_ruined_ = false;
  clear_has_is_interleaving_experiment_ruined();
}
inline bool InterleavingInfo::is_interleaving_experiment_ruined() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.InterleavingInfo.is_interleaving_experiment_ruined)
  return is_interleaving_experiment_ruined_;
}
inline void InterleavingInfo::set_is_interleaving_experiment_ruined(bool value) {
  set_has_is_interleaving_experiment_ruined();
  is_interleaving_experiment_ruined_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.InterleavingInfo.is_interleaving_experiment_ruined)
}

// -------------------------------------------------------------------

// DocumentFlags

// optional bool may_be_skipped = 1;
inline bool DocumentFlags::has_may_be_skipped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentFlags::set_has_may_be_skipped() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentFlags::clear_has_may_be_skipped() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentFlags::clear_may_be_skipped() {
  may_be_skipped_ = false;
  clear_has_may_be_skipped();
}
inline bool DocumentFlags::may_be_skipped() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentFlags.may_be_skipped)
  return may_be_skipped_;
}
inline void DocumentFlags::set_may_be_skipped(bool value) {
  set_has_may_be_skipped();
  may_be_skipped_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentFlags.may_be_skipped)
}

// -------------------------------------------------------------------

// PromoInfo

// repeated string hit_pixels = 1;
inline int PromoInfo::hit_pixels_size() const {
  return hit_pixels_.size();
}
inline void PromoInfo::clear_hit_pixels() {
  hit_pixels_.Clear();
}
inline const ::std::string& PromoInfo::hit_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Get(index);
}
inline ::std::string* PromoInfo::mutable_hit_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Mutable(index);
}
inline void PromoInfo::set_hit_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.hit_pixels)
  hit_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PromoInfo::set_hit_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.hit_pixels)
  hit_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PromoInfo::set_hit_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hit_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.hit_pixels)
}
inline void PromoInfo::set_hit_pixels(int index, const char* value, size_t size) {
  hit_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.hit_pixels)
}
inline ::std::string* PromoInfo::add_hit_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_.Add();
}
inline void PromoInfo::add_hit_pixels(const ::std::string& value) {
  hit_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.hit_pixels)
}
#if LANG_CXX11
inline void PromoInfo::add_hit_pixels(::std::string&& value) {
  hit_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.hit_pixels)
}
#endif
inline void PromoInfo::add_hit_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hit_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.hit_pixels)
}
inline void PromoInfo::add_hit_pixels(const char* value, size_t size) {
  hit_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.hit_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::hit_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.hit_pixels)
  return hit_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_hit_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.hit_pixels)
  return &hit_pixels_;
}

// repeated string click_pixels = 2;
inline int PromoInfo::click_pixels_size() const {
  return click_pixels_.size();
}
inline void PromoInfo::clear_click_pixels() {
  click_pixels_.Clear();
}
inline const ::std::string& PromoInfo::click_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Get(index);
}
inline ::std::string* PromoInfo::mutable_click_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Mutable(index);
}
inline void PromoInfo::set_click_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.click_pixels)
  click_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PromoInfo::set_click_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.click_pixels)
  click_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PromoInfo::set_click_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.click_pixels)
}
inline void PromoInfo::set_click_pixels(int index, const char* value, size_t size) {
  click_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.click_pixels)
}
inline ::std::string* PromoInfo::add_click_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_.Add();
}
inline void PromoInfo::add_click_pixels(const ::std::string& value) {
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.click_pixels)
}
#if LANG_CXX11
inline void PromoInfo::add_click_pixels(::std::string&& value) {
  click_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.click_pixels)
}
#endif
inline void PromoInfo::add_click_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.click_pixels)
}
inline void PromoInfo::add_click_pixels(const char* value, size_t size) {
  click_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.click_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::click_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.click_pixels)
  return click_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_click_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.click_pixels)
  return &click_pixels_;
}

// repeated string readup_pixels = 3;
inline int PromoInfo::readup_pixels_size() const {
  return readup_pixels_.size();
}
inline void PromoInfo::clear_readup_pixels() {
  readup_pixels_.Clear();
}
inline const ::std::string& PromoInfo::readup_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Get(index);
}
inline ::std::string* PromoInfo::mutable_readup_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Mutable(index);
}
inline void PromoInfo::set_readup_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PromoInfo::set_readup_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PromoInfo::set_readup_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.readup_pixels)
}
inline void PromoInfo::set_readup_pixels(int index, const char* value, size_t size) {
  readup_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.readup_pixels)
}
inline ::std::string* PromoInfo::add_readup_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_.Add();
}
inline void PromoInfo::add_readup_pixels(const ::std::string& value) {
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.readup_pixels)
}
#if LANG_CXX11
inline void PromoInfo::add_readup_pixels(::std::string&& value) {
  readup_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.readup_pixels)
}
#endif
inline void PromoInfo::add_readup_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.readup_pixels)
}
inline void PromoInfo::add_readup_pixels(const char* value, size_t size) {
  readup_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.readup_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::readup_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.readup_pixels)
  return readup_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_readup_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.readup_pixels)
  return &readup_pixels_;
}

// repeated string show_pixels = 4;
inline int PromoInfo::show_pixels_size() const {
  return show_pixels_.size();
}
inline void PromoInfo::clear_show_pixels() {
  show_pixels_.Clear();
}
inline const ::std::string& PromoInfo::show_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Get(index);
}
inline ::std::string* PromoInfo::mutable_show_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Mutable(index);
}
inline void PromoInfo::set_show_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.show_pixels)
  show_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PromoInfo::set_show_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.show_pixels)
  show_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PromoInfo::set_show_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.show_pixels)
}
inline void PromoInfo::set_show_pixels(int index, const char* value, size_t size) {
  show_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.show_pixels)
}
inline ::std::string* PromoInfo::add_show_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_.Add();
}
inline void PromoInfo::add_show_pixels(const ::std::string& value) {
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.show_pixels)
}
#if LANG_CXX11
inline void PromoInfo::add_show_pixels(::std::string&& value) {
  show_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.show_pixels)
}
#endif
inline void PromoInfo::add_show_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.show_pixels)
}
inline void PromoInfo::add_show_pixels(const char* value, size_t size) {
  show_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.show_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::show_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.show_pixels)
  return show_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_show_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.show_pixels)
  return &show_pixels_;
}

// repeated string redirect_pixels = 5;
inline int PromoInfo::redirect_pixels_size() const {
  return redirect_pixels_.size();
}
inline void PromoInfo::clear_redirect_pixels() {
  redirect_pixels_.Clear();
}
inline const ::std::string& PromoInfo::redirect_pixels(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Get(index);
}
inline ::std::string* PromoInfo::mutable_redirect_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Mutable(index);
}
inline void PromoInfo::set_redirect_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PromoInfo::set_redirect_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PromoInfo::set_redirect_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.redirect_pixels)
}
inline void PromoInfo::set_redirect_pixels(int index, const char* value, size_t size) {
  redirect_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.redirect_pixels)
}
inline ::std::string* PromoInfo::add_redirect_pixels() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_.Add();
}
inline void PromoInfo::add_redirect_pixels(const ::std::string& value) {
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.redirect_pixels)
}
#if LANG_CXX11
inline void PromoInfo::add_redirect_pixels(::std::string&& value) {
  redirect_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.PromoInfo.redirect_pixels)
}
#endif
inline void PromoInfo::add_redirect_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.PromoInfo.redirect_pixels)
}
inline void PromoInfo::add_redirect_pixels(const char* value, size_t size) {
  redirect_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.PromoInfo.redirect_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PromoInfo::redirect_pixels() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PromoInfo.redirect_pixels)
  return redirect_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PromoInfo::mutable_redirect_pixels() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PromoInfo.redirect_pixels)
  return &redirect_pixels_;
}

// optional string pulse_utm_labels = 10;
inline bool PromoInfo::has_pulse_utm_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PromoInfo::set_has_pulse_utm_labels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PromoInfo::clear_has_pulse_utm_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PromoInfo::clear_pulse_utm_labels() {
  pulse_utm_labels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pulse_utm_labels();
}
inline const ::std::string& PromoInfo::pulse_utm_labels() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.GetNoArena();
}
inline void PromoInfo::set_pulse_utm_labels(const ::std::string& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.pulse_utm_labels)
}
#if LANG_CXX11
inline void PromoInfo::set_pulse_utm_labels(::std::string&& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.pulse_utm_labels)
}
#endif
inline void PromoInfo::set_pulse_utm_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.pulse_utm_labels)
}
inline void PromoInfo::set_pulse_utm_labels(const char* value, size_t size) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.pulse_utm_labels)
}
inline ::std::string* PromoInfo::mutable_pulse_utm_labels() {
  set_has_pulse_utm_labels();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PromoInfo::release_pulse_utm_labels() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.pulse_utm_labels)
  clear_has_pulse_utm_labels();
  return pulse_utm_labels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PromoInfo::set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels) {
  if (pulse_utm_labels != NULL) {
    set_has_pulse_utm_labels();
  } else {
    clear_has_pulse_utm_labels();
  }
  pulse_utm_labels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pulse_utm_labels);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.pulse_utm_labels)
}

// optional int64 id_ac = 11;
inline bool PromoInfo::has_id_ac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PromoInfo::set_has_id_ac() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PromoInfo::clear_has_id_ac() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PromoInfo::clear_id_ac() {
  id_ac_ = GOOGLE_LONGLONG(0);
  clear_has_id_ac();
}
inline ::google::protobuf::int64 PromoInfo::id_ac() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.id_ac)
  return id_ac_;
}
inline void PromoInfo::set_id_ac(::google::protobuf::int64 value) {
  set_has_id_ac();
  id_ac_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.id_ac)
}

// optional string rub_price = 12;
inline bool PromoInfo::has_rub_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PromoInfo::set_has_rub_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PromoInfo::clear_has_rub_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PromoInfo::clear_rub_price() {
  rub_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rub_price();
}
inline const ::std::string& PromoInfo::rub_price() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.rub_price)
  return rub_price_.GetNoArena();
}
inline void PromoInfo::set_rub_price(const ::std::string& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.rub_price)
}
#if LANG_CXX11
inline void PromoInfo::set_rub_price(::std::string&& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.rub_price)
}
#endif
inline void PromoInfo::set_rub_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.rub_price)
}
inline void PromoInfo::set_rub_price(const char* value, size_t size) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.rub_price)
}
inline ::std::string* PromoInfo::mutable_rub_price() {
  set_has_rub_price();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.rub_price)
  return rub_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PromoInfo::release_rub_price() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.rub_price)
  clear_has_rub_price();
  return rub_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PromoInfo::set_allocated_rub_price(::std::string* rub_price) {
  if (rub_price != NULL) {
    set_has_rub_price();
  } else {
    clear_has_rub_price();
  }
  rub_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rub_price);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.rub_price)
}

// optional string user_geo = 13;
inline bool PromoInfo::has_user_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PromoInfo::set_has_user_geo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PromoInfo::clear_has_user_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PromoInfo::clear_user_geo() {
  user_geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_geo();
}
inline const ::std::string& PromoInfo::user_geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PromoInfo.user_geo)
  return user_geo_.GetNoArena();
}
inline void PromoInfo::set_user_geo(const ::std::string& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PromoInfo.user_geo)
}
#if LANG_CXX11
inline void PromoInfo::set_user_geo(::std::string&& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PromoInfo.user_geo)
}
#endif
inline void PromoInfo::set_user_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PromoInfo.user_geo)
}
inline void PromoInfo::set_user_geo(const char* value, size_t size) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PromoInfo.user_geo)
}
inline ::std::string* PromoInfo::mutable_user_geo() {
  set_has_user_geo();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PromoInfo.user_geo)
  return user_geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PromoInfo::release_user_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PromoInfo.user_geo)
  clear_has_user_geo();
  return user_geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PromoInfo::set_allocated_user_geo(::std::string* user_geo) {
  if (user_geo != NULL) {
    set_has_user_geo();
  } else {
    clear_has_user_geo();
  }
  user_geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_geo);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PromoInfo.user_geo)
}

// -------------------------------------------------------------------

// DocumentInfo

// optional bool is_from_socdem_source = 1;
inline bool DocumentInfo::has_is_from_socdem_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentInfo::set_has_is_from_socdem_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentInfo::clear_has_is_from_socdem_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentInfo::clear_is_from_socdem_source() {
  is_from_socdem_source_ = false;
  clear_has_is_from_socdem_source();
}
inline bool DocumentInfo::is_from_socdem_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_socdem_source)
  return is_from_socdem_source_;
}
inline void DocumentInfo::set_is_from_socdem_source(bool value) {
  set_has_is_from_socdem_source();
  is_from_socdem_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_socdem_source)
}

// optional bool is_from_similar_source = 2;
inline bool DocumentInfo::has_is_from_similar_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentInfo::set_has_is_from_similar_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentInfo::clear_has_is_from_similar_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentInfo::clear_is_from_similar_source() {
  is_from_similar_source_ = false;
  clear_has_is_from_similar_source();
}
inline bool DocumentInfo::is_from_similar_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_similar_source)
  return is_from_similar_source_;
}
inline void DocumentInfo::set_is_from_similar_source(bool value) {
  set_has_is_from_similar_source();
  is_from_similar_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_similar_source)
}

// optional bool is_from_visited_source = 3;
inline bool DocumentInfo::has_is_from_visited_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentInfo::set_has_is_from_visited_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentInfo::clear_has_is_from_visited_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentInfo::clear_is_from_visited_source() {
  is_from_visited_source_ = false;
  clear_has_is_from_visited_source();
}
inline bool DocumentInfo::is_from_visited_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_visited_source)
  return is_from_visited_source_;
}
inline void DocumentInfo::set_is_from_visited_source(bool value) {
  set_has_is_from_visited_source();
  is_from_visited_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_visited_source)
}

// optional bool is_from_clicked_source = 4;
inline bool DocumentInfo::has_is_from_clicked_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentInfo::set_has_is_from_clicked_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentInfo::clear_has_is_from_clicked_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentInfo::clear_is_from_clicked_source() {
  is_from_clicked_source_ = false;
  clear_has_is_from_clicked_source();
}
inline bool DocumentInfo::is_from_clicked_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_from_clicked_source)
  return is_from_clicked_source_;
}
inline void DocumentInfo::set_is_from_clicked_source(bool value) {
  set_has_is_from_clicked_source();
  is_from_clicked_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_from_clicked_source)
}

// optional float porn_weight = 5;
inline bool DocumentInfo::has_porn_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentInfo::set_has_porn_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentInfo::clear_has_porn_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentInfo::clear_porn_weight() {
  porn_weight_ = 0;
  clear_has_porn_weight();
}
inline float DocumentInfo::porn_weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.porn_weight)
  return porn_weight_;
}
inline void DocumentInfo::set_porn_weight(float value) {
  set_has_porn_weight();
  porn_weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.porn_weight)
}

// optional int64 theme_hash = 6;
inline bool DocumentInfo::has_theme_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentInfo::set_has_theme_hash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentInfo::clear_has_theme_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentInfo::clear_theme_hash() {
  theme_hash_ = GOOGLE_LONGLONG(0);
  clear_has_theme_hash();
}
inline ::google::protobuf::int64 DocumentInfo::theme_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.theme_hash)
  return theme_hash_;
}
inline void DocumentInfo::set_theme_hash(::google::protobuf::int64 value) {
  set_has_theme_hash();
  theme_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.theme_hash)
}

// optional int64 clicks_count = 7;
inline bool DocumentInfo::has_clicks_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentInfo::set_has_clicks_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentInfo::clear_has_clicks_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentInfo::clear_clicks_count() {
  clicks_count_ = GOOGLE_LONGLONG(0);
  clear_has_clicks_count();
}
inline ::google::protobuf::int64 DocumentInfo::clicks_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.clicks_count)
  return clicks_count_;
}
inline void DocumentInfo::set_clicks_count(::google::protobuf::int64 value) {
  set_has_clicks_count();
  clicks_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.clicks_count)
}

// optional int64 shows_count = 8;
inline bool DocumentInfo::has_shows_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentInfo::set_has_shows_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentInfo::clear_has_shows_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentInfo::clear_shows_count() {
  shows_count_ = GOOGLE_LONGLONG(0);
  clear_has_shows_count();
}
inline ::google::protobuf::int64 DocumentInfo::shows_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.shows_count)
  return shows_count_;
}
inline void DocumentInfo::set_shows_count(::google::protobuf::int64 value) {
  set_has_shows_count();
  shows_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.shows_count)
}

// optional bool is_fulltext = 9;
inline bool DocumentInfo::has_is_fulltext() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DocumentInfo::set_has_is_fulltext() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DocumentInfo::clear_has_is_fulltext() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DocumentInfo::clear_is_fulltext() {
  is_fulltext_ = false;
  clear_has_is_fulltext();
}
inline bool DocumentInfo::is_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_fulltext)
  return is_fulltext_;
}
inline void DocumentInfo::set_is_fulltext(bool value) {
  set_has_is_fulltext();
  is_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_fulltext)
}

// optional int64 pubdate = 10;
inline bool DocumentInfo::has_pubdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentInfo::set_has_pubdate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentInfo::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentInfo::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
inline ::google::protobuf::int64 DocumentInfo::pubdate() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.pubdate)
  return pubdate_;
}
inline void DocumentInfo::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.pubdate)
}

// optional bool is_first_doc = 11;
inline bool DocumentInfo::has_is_first_doc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DocumentInfo::set_has_is_first_doc() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DocumentInfo::clear_has_is_first_doc() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DocumentInfo::clear_is_first_doc() {
  is_first_doc_ = false;
  clear_has_is_first_doc();
}
inline bool DocumentInfo::is_first_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_first_doc)
  return is_first_doc_;
}
inline void DocumentInfo::set_is_first_doc(bool value) {
  set_has_is_first_doc();
  is_first_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_first_doc)
}

// optional bool is_commercial_fulltext = 12;
inline bool DocumentInfo::has_is_commercial_fulltext() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocumentInfo::set_has_is_commercial_fulltext() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocumentInfo::clear_has_is_commercial_fulltext() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocumentInfo::clear_is_commercial_fulltext() {
  is_commercial_fulltext_ = false;
  clear_has_is_commercial_fulltext();
}
inline bool DocumentInfo::is_commercial_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_commercial_fulltext)
  return is_commercial_fulltext_;
}
inline void DocumentInfo::set_is_commercial_fulltext(bool value) {
  set_has_is_commercial_fulltext();
  is_commercial_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_commercial_fulltext)
}

// optional bool is_vk = 13;
inline bool DocumentInfo::has_is_vk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DocumentInfo::set_has_is_vk() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DocumentInfo::clear_has_is_vk() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DocumentInfo::clear_is_vk() {
  is_vk_ = false;
  clear_has_is_vk();
}
inline bool DocumentInfo::is_vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_vk)
  return is_vk_;
}
inline void DocumentInfo::set_is_vk(bool value) {
  set_has_is_vk();
  is_vk_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_vk)
}

// optional int64 i2i_doc_id = 14;
inline bool DocumentInfo::has_i2i_doc_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DocumentInfo::set_has_i2i_doc_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DocumentInfo::clear_has_i2i_doc_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DocumentInfo::clear_i2i_doc_id() {
  i2i_doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_i2i_doc_id();
}
inline ::google::protobuf::int64 DocumentInfo::i2i_doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.i2i_doc_id)
  return i2i_doc_id_;
}
inline void DocumentInfo::set_i2i_doc_id(::google::protobuf::int64 value) {
  set_has_i2i_doc_id();
  i2i_doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.i2i_doc_id)
}

// optional bool is_relap_doc = 15;
inline bool DocumentInfo::has_is_relap_doc() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DocumentInfo::set_has_is_relap_doc() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DocumentInfo::clear_has_is_relap_doc() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DocumentInfo::clear_is_relap_doc() {
  is_relap_doc_ = false;
  clear_has_is_relap_doc();
}
inline bool DocumentInfo::is_relap_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_relap_doc)
  return is_relap_doc_;
}
inline void DocumentInfo::set_is_relap_doc(bool value) {
  set_has_is_relap_doc();
  is_relap_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_relap_doc)
}

// optional .cosmo.pb.PromoInfo promo_info = 16;
inline bool DocumentInfo::has_promo_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentInfo::set_has_promo_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentInfo::clear_has_promo_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentInfo::clear_promo_info() {
  if (promo_info_ != NULL) promo_info_->::cosmo::pb::PromoInfo::Clear();
  clear_has_promo_info();
}
inline const ::cosmo::pb::PromoInfo& DocumentInfo::promo_info() const {
  const ::cosmo::pb::PromoInfo* p = promo_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.promo_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PromoInfo*>(
      &::cosmo::pb::_PromoInfo_default_instance_);
}
inline ::cosmo::pb::PromoInfo* DocumentInfo::mutable_promo_info() {
  set_has_promo_info();
  if (promo_info_ == NULL) {
    promo_info_ = new ::cosmo::pb::PromoInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentInfo.promo_info)
  return promo_info_;
}
inline ::cosmo::pb::PromoInfo* DocumentInfo::release_promo_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentInfo.promo_info)
  clear_has_promo_info();
  ::cosmo::pb::PromoInfo* temp = promo_info_;
  promo_info_ = NULL;
  return temp;
}
inline void DocumentInfo::set_allocated_promo_info(::cosmo::pb::PromoInfo* promo_info) {
  delete promo_info_;
  promo_info_ = promo_info;
  if (promo_info) {
    set_has_promo_info();
  } else {
    clear_has_promo_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentInfo.promo_info)
}

// optional int32 likes = 17;
inline bool DocumentInfo::has_likes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DocumentInfo::set_has_likes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DocumentInfo::clear_has_likes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DocumentInfo::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 DocumentInfo::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.likes)
  return likes_;
}
inline void DocumentInfo::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.likes)
}

// optional int32 comments = 18;
inline bool DocumentInfo::has_comments() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DocumentInfo::set_has_comments() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DocumentInfo::clear_has_comments() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DocumentInfo::clear_comments() {
  comments_ = 0;
  clear_has_comments();
}
inline ::google::protobuf::int32 DocumentInfo::comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.comments)
  return comments_;
}
inline void DocumentInfo::set_comments(::google::protobuf::int32 value) {
  set_has_comments();
  comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.comments)
}

// optional bool is_user_fulltext = 19;
inline bool DocumentInfo::has_is_user_fulltext() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DocumentInfo::set_has_is_user_fulltext() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DocumentInfo::clear_has_is_user_fulltext() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DocumentInfo::clear_is_user_fulltext() {
  is_user_fulltext_ = false;
  clear_has_is_user_fulltext();
}
inline bool DocumentInfo::is_user_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_user_fulltext)
  return is_user_fulltext_;
}
inline void DocumentInfo::set_is_user_fulltext(bool value) {
  set_has_is_user_fulltext();
  is_user_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_user_fulltext)
}

// optional bool is_video = 20;
inline bool DocumentInfo::has_is_video() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DocumentInfo::set_has_is_video() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DocumentInfo::clear_has_is_video() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DocumentInfo::clear_is_video() {
  is_video_ = false;
  clear_has_is_video();
}
inline bool DocumentInfo::is_video() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_video)
  return is_video_;
}
inline void DocumentInfo::set_is_video(bool value) {
  set_has_is_video();
  is_video_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_video)
}

// optional bool is_exploration = 21;
inline bool DocumentInfo::has_is_exploration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DocumentInfo::set_has_is_exploration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DocumentInfo::clear_has_is_exploration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DocumentInfo::clear_is_exploration() {
  is_exploration_ = false;
  clear_has_is_exploration();
}
inline bool DocumentInfo::is_exploration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.is_exploration)
  return is_exploration_;
}
inline void DocumentInfo::set_is_exploration(bool value) {
  set_has_is_exploration();
  is_exploration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.is_exploration)
}

// optional float source_price = 22;
inline bool DocumentInfo::has_source_price() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DocumentInfo::set_has_source_price() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DocumentInfo::clear_has_source_price() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DocumentInfo::clear_source_price() {
  source_price_ = 0;
  clear_has_source_price();
}
inline float DocumentInfo::source_price() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentInfo.source_price)
  return source_price_;
}
inline void DocumentInfo::set_source_price(float value) {
  set_has_source_price();
  source_price_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentInfo.source_price)
}

// -------------------------------------------------------------------

// Document

// optional int32 category_id = 2;
inline bool Document::has_category_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_category_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 Document::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.category_id)
  return category_id_;
}
inline void Document::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.category_id)
}

// required int64 doc_id = 3;
inline bool Document::has_doc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_doc_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.doc_id)
  return doc_id_;
}
inline void Document::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.doc_id)
}

// optional int64 source_id = 4;
inline bool Document::has_source_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Document::set_has_source_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Document::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Document::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 Document::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.source_id)
  return source_id_;
}
inline void Document::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.source_id)
}

// optional .cosmo.pb.Document.Type type = 5;
inline bool Document::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Document::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Document::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Document::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cosmo::pb::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
inline void Document::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.type)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
inline bool Document::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
inline const ::cosmo::pb::InterleavingInfo& Document::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
inline ::cosmo::pb::InterleavingInfo* Document::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.interleaving_info)
  return interleaving_info_;
}
inline ::cosmo::pb::InterleavingInfo* Document::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
inline void Document::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.interleaving_info)
}

// optional float rank = 9;
inline bool Document::has_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float Document::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.rank)
  return rank_;
}
inline void Document::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.rank)
}

// optional float source_rank = 10;
inline bool Document::has_source_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_source_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_source_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_source_rank() {
  source_rank_ = 0;
  clear_has_source_rank();
}
inline float Document::source_rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.source_rank)
  return source_rank_;
}
inline void Document::set_source_rank(float value) {
  set_has_source_rank();
  source_rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.source_rank)
}

// optional int64 site_hash = 11;
inline bool Document::has_site_hash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Document::set_has_site_hash() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Document::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Document::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 Document::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.site_hash)
  return site_hash_;
}
inline void Document::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.site_hash)
}

// optional .cosmo.pb.DocumentFlags flags = 13;
inline bool Document::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_flags() {
  if (flags_ != NULL) flags_->::cosmo::pb::DocumentFlags::Clear();
  clear_has_flags();
}
inline const ::cosmo::pb::DocumentFlags& Document::flags() const {
  const ::cosmo::pb::DocumentFlags* p = flags_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.flags)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentFlags*>(
      &::cosmo::pb::_DocumentFlags_default_instance_);
}
inline ::cosmo::pb::DocumentFlags* Document::mutable_flags() {
  set_has_flags();
  if (flags_ == NULL) {
    flags_ = new ::cosmo::pb::DocumentFlags;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.flags)
  return flags_;
}
inline ::cosmo::pb::DocumentFlags* Document::release_flags() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.flags)
  clear_has_flags();
  ::cosmo::pb::DocumentFlags* temp = flags_;
  flags_ = NULL;
  return temp;
}
inline void Document::set_allocated_flags(::cosmo::pb::DocumentFlags* flags) {
  delete flags_;
  flags_ = flags;
  if (flags) {
    set_has_flags();
  } else {
    clear_has_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.flags)
}

// optional .cosmo.pb.DocumentInfo document_info = 14;
inline bool Document::has_document_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_document_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
inline const ::cosmo::pb::DocumentInfo& Document::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
inline ::cosmo::pb::DocumentInfo* Document::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.document_info)
  return document_info_;
}
inline ::cosmo::pb::DocumentInfo* Document::release_document_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
inline void Document::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.document_info)
}

// optional string erid = 15;
inline bool Document::has_erid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_erid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_erid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_erid() {
  erid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_erid();
}
inline const ::std::string& Document::erid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Document.erid)
  return erid_.GetNoArena();
}
inline void Document::set_erid(const ::std::string& value) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.Document.erid)
}
#if LANG_CXX11
inline void Document::set_erid(::std::string&& value) {
  set_has_erid();
  erid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.Document.erid)
}
#endif
inline void Document::set_erid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.Document.erid)
}
inline void Document::set_erid(const char* value, size_t size) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.Document.erid)
}
inline ::std::string* Document::mutable_erid() {
  set_has_erid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Document.erid)
  return erid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_erid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Document.erid)
  clear_has_erid();
  return erid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_erid(::std::string* erid) {
  if (erid != NULL) {
    set_has_erid();
  } else {
    clear_has_erid();
  }
  erid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), erid);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Document.erid)
}

// -------------------------------------------------------------------

// RankerInfo_Item

// required string name = 1;
inline bool RankerInfo_Item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankerInfo_Item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankerInfo_Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankerInfo_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RankerInfo_Item::name() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.Item.name)
  return name_.GetNoArena();
}
inline void RankerInfo_Item::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.RankerInfo.Item.name)
}
#if LANG_CXX11
inline void RankerInfo_Item::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.RankerInfo.Item.name)
}
#endif
inline void RankerInfo_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.RankerInfo.Item.name)
}
inline void RankerInfo_Item::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.RankerInfo.Item.name)
}
inline ::std::string* RankerInfo_Item::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankerInfo_Item::release_name() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankerInfo.Item.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankerInfo_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankerInfo.Item.name)
}

// required string value = 2;
inline bool RankerInfo_Item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankerInfo_Item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankerInfo_Item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankerInfo_Item::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& RankerInfo_Item::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.Item.value)
  return value_.GetNoArena();
}
inline void RankerInfo_Item::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.RankerInfo.Item.value)
}
#if LANG_CXX11
inline void RankerInfo_Item::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.RankerInfo.Item.value)
}
#endif
inline void RankerInfo_Item::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.RankerInfo.Item.value)
}
inline void RankerInfo_Item::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.RankerInfo.Item.value)
}
inline ::std::string* RankerInfo_Item::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.Item.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankerInfo_Item::release_value() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankerInfo.Item.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankerInfo_Item::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankerInfo.Item.value)
}

// -------------------------------------------------------------------

// RankerInfo

// repeated .cosmo.pb.RankerInfo.Item items = 1;
inline int RankerInfo::items_size() const {
  return items_.size();
}
inline void RankerInfo::clear_items() {
  items_.Clear();
}
inline const ::cosmo::pb::RankerInfo_Item& RankerInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankerInfo.items)
  return items_.Get(index);
}
inline ::cosmo::pb::RankerInfo_Item* RankerInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankerInfo.items)
  return items_.Mutable(index);
}
inline ::cosmo::pb::RankerInfo_Item* RankerInfo::add_items() {
  // @@protoc_insertion_point(field_add:cosmo.pb.RankerInfo.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >*
RankerInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.RankerInfo.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankerInfo_Item >&
RankerInfo::items() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.RankerInfo.items)
  return items_;
}

// -------------------------------------------------------------------

// Error

// optional string msg = 1;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Error.msg)
  return msg_.GetNoArena();
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.Error.msg)
}
#if LANG_CXX11
inline void Error::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.Error.msg)
}
#endif
inline void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Error.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Error.msg)
}

// optional .cosmo.pb.Error.Code code = 2;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::cosmo::pb::Error_Code Error::code() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Error.code)
  return static_cast< ::cosmo::pb::Error_Code >(code_);
}
inline void Error::set_code(::cosmo::pb::Error_Code value) {
  assert(::cosmo::pb::Error_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Error.code)
}

// -------------------------------------------------------------------

// RetrieverStats

// optional int32 documents_total = 1;
inline bool RetrieverStats::has_documents_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrieverStats::set_has_documents_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrieverStats::clear_has_documents_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrieverStats::clear_documents_total() {
  documents_total_ = 0;
  clear_has_documents_total();
}
inline ::google::protobuf::int32 RetrieverStats::documents_total() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_total)
  return documents_total_;
}
inline void RetrieverStats::set_documents_total(::google::protobuf::int32 value) {
  set_has_documents_total();
  documents_total_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_total)
}

// optional int32 documents_processed = 2;
inline bool RetrieverStats::has_documents_processed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetrieverStats::set_has_documents_processed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetrieverStats::clear_has_documents_processed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetrieverStats::clear_documents_processed() {
  documents_processed_ = 0;
  clear_has_documents_processed();
}
inline ::google::protobuf::int32 RetrieverStats::documents_processed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_processed)
  return documents_processed_;
}
inline void RetrieverStats::set_documents_processed(::google::protobuf::int32 value) {
  set_has_documents_processed();
  documents_processed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_processed)
}

// optional int32 documents_skipped = 3;
inline bool RetrieverStats::has_documents_skipped() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetrieverStats::set_has_documents_skipped() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetrieverStats::clear_has_documents_skipped() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetrieverStats::clear_documents_skipped() {
  documents_skipped_ = 0;
  clear_has_documents_skipped();
}
inline ::google::protobuf::int32 RetrieverStats::documents_skipped() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.documents_skipped)
  return documents_skipped_;
}
inline void RetrieverStats::set_documents_skipped(::google::protobuf::int32 value) {
  set_has_documents_skipped();
  documents_skipped_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.documents_skipped)
}

// optional int32 sources_selected = 4;
inline bool RetrieverStats::has_sources_selected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RetrieverStats::set_has_sources_selected() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RetrieverStats::clear_has_sources_selected() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RetrieverStats::clear_sources_selected() {
  sources_selected_ = 0;
  clear_has_sources_selected();
}
inline ::google::protobuf::int32 RetrieverStats::sources_selected() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RetrieverStats.sources_selected)
  return sources_selected_;
}
inline void RetrieverStats::set_sources_selected(::google::protobuf::int32 value) {
  set_has_sources_selected();
  sources_selected_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RetrieverStats.sources_selected)
}

// -------------------------------------------------------------------

// MixerInfo

// required uint32 experiment_id = 1;
inline bool MixerInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MixerInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MixerInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MixerInfo::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
inline ::google::protobuf::uint32 MixerInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.experiment_id)
  return experiment_id_;
}
inline void MixerInfo::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.experiment_id)
}

// optional bool showed_from_a = 2;
inline bool MixerInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MixerInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MixerInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MixerInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
inline bool MixerInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.showed_from_a)
  return showed_from_a_;
}
inline void MixerInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.showed_from_a)
}

// optional bool not_affected = 3;
inline bool MixerInfo::has_not_affected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MixerInfo::set_has_not_affected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MixerInfo::clear_has_not_affected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MixerInfo::clear_not_affected() {
  not_affected_ = false;
  clear_has_not_affected();
}
inline bool MixerInfo::not_affected() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.MixerInfo.not_affected)
  return not_affected_;
}
inline void MixerInfo::set_not_affected(bool value) {
  set_has_not_affected();
  not_affected_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.MixerInfo.not_affected)
}

// -------------------------------------------------------------------

// Geo

// optional int32 country_id = 1;
inline bool Geo::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geo::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geo::clear_country_id() {
  country_id_ = 0;
  clear_has_country_id();
}
inline ::google::protobuf::int32 Geo::country_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.country_id)
  return country_id_;
}
inline void Geo::set_country_id(::google::protobuf::int32 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.country_id)
}

// optional int32 region_id = 2;
inline bool Geo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 Geo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.region_id)
  return region_id_;
}
inline void Geo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.region_id)
}

// optional int32 city_id = 3;
inline bool Geo::has_city_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geo::set_has_city_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geo::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geo::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 Geo::city_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Geo.city_id)
  return city_id_;
}
inline void Geo::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Geo.city_id)
}

// -------------------------------------------------------------------

// Metrics_SubscriptionMetrics

// required uint32 cnt = 1;
inline bool Metrics_SubscriptionMetrics::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metrics_SubscriptionMetrics::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metrics_SubscriptionMetrics::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metrics_SubscriptionMetrics::clear_cnt() {
  cnt_ = 0u;
  clear_has_cnt();
}
inline ::google::protobuf::uint32 Metrics_SubscriptionMetrics::cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.SubscriptionMetrics.cnt)
  return cnt_;
}
inline void Metrics_SubscriptionMetrics::set_cnt(::google::protobuf::uint32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.SubscriptionMetrics.cnt)
}

// required int64 last_ts = 2;
inline bool Metrics_SubscriptionMetrics::has_last_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metrics_SubscriptionMetrics::set_has_last_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metrics_SubscriptionMetrics::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metrics_SubscriptionMetrics::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
inline ::google::protobuf::int64 Metrics_SubscriptionMetrics::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.SubscriptionMetrics.last_ts)
  return last_ts_;
}
inline void Metrics_SubscriptionMetrics::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.SubscriptionMetrics.last_ts)
}

// -------------------------------------------------------------------

// Metrics

// optional int32 age = 1;
inline bool Metrics::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Metrics::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Metrics::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Metrics::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Metrics::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.age)
  return age_;
}
inline void Metrics::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.age)
}

// optional int32 gender = 2;
inline bool Metrics::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Metrics::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Metrics::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Metrics::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 Metrics::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.gender)
  return gender_;
}
inline void Metrics::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.gender)
}

// optional bool has_email = 3;
inline bool Metrics::has_has_email() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Metrics::set_has_has_email() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Metrics::clear_has_has_email() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Metrics::clear_has_email() {
  has_email_ = false;
  clear_has_has_email();
}
inline bool Metrics::has_email() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_email)
  return has_email_;
}
inline void Metrics::set_has_email(bool value) {
  set_has_has_email();
  has_email_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_email)
}

// optional bool has_ok = 4;
inline bool Metrics::has_has_ok() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Metrics::set_has_has_ok() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Metrics::clear_has_has_ok() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Metrics::clear_has_ok() {
  has_ok_ = false;
  clear_has_has_ok();
}
inline bool Metrics::has_ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_ok)
  return has_ok_;
}
inline void Metrics::set_has_ok(bool value) {
  set_has_has_ok();
  has_ok_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_ok)
}

// optional bool has_vk = 5;
inline bool Metrics::has_has_vk() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Metrics::set_has_has_vk() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Metrics::clear_has_has_vk() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Metrics::clear_has_vk() {
  has_vk_ = false;
  clear_has_has_vk();
}
inline bool Metrics::has_vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.has_vk)
  return has_vk_;
}
inline void Metrics::set_has_vk(bool value) {
  set_has_has_vk();
  has_vk_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.has_vk)
}

// optional uint32 similar_sources_cnt = 6;
inline bool Metrics::has_similar_sources_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Metrics::set_has_similar_sources_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Metrics::clear_has_similar_sources_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Metrics::clear_similar_sources_cnt() {
  similar_sources_cnt_ = 0u;
  clear_has_similar_sources_cnt();
}
inline ::google::protobuf::uint32 Metrics::similar_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.similar_sources_cnt)
  return similar_sources_cnt_;
}
inline void Metrics::set_similar_sources_cnt(::google::protobuf::uint32 value) {
  set_has_similar_sources_cnt();
  similar_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.similar_sources_cnt)
}

// optional uint32 visited_sources_cnt = 7;
inline bool Metrics::has_visited_sources_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Metrics::set_has_visited_sources_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Metrics::clear_has_visited_sources_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Metrics::clear_visited_sources_cnt() {
  visited_sources_cnt_ = 0u;
  clear_has_visited_sources_cnt();
}
inline ::google::protobuf::uint32 Metrics::visited_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sources_cnt)
  return visited_sources_cnt_;
}
inline void Metrics::set_visited_sources_cnt(::google::protobuf::uint32 value) {
  set_has_visited_sources_cnt();
  visited_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sources_cnt)
}

// optional uint32 clicked_sources_cnt = 8;
inline bool Metrics::has_clicked_sources_cnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Metrics::set_has_clicked_sources_cnt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Metrics::clear_has_clicked_sources_cnt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Metrics::clear_clicked_sources_cnt() {
  clicked_sources_cnt_ = 0u;
  clear_has_clicked_sources_cnt();
}
inline ::google::protobuf::uint32 Metrics::clicked_sources_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sources_cnt)
  return clicked_sources_cnt_;
}
inline void Metrics::set_clicked_sources_cnt(::google::protobuf::uint32 value) {
  set_has_clicked_sources_cnt();
  clicked_sources_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sources_cnt)
}

// optional uint32 similar_sites_cnt = 9;
inline bool Metrics::has_similar_sites_cnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Metrics::set_has_similar_sites_cnt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Metrics::clear_has_similar_sites_cnt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Metrics::clear_similar_sites_cnt() {
  similar_sites_cnt_ = 0u;
  clear_has_similar_sites_cnt();
}
inline ::google::protobuf::uint32 Metrics::similar_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.similar_sites_cnt)
  return similar_sites_cnt_;
}
inline void Metrics::set_similar_sites_cnt(::google::protobuf::uint32 value) {
  set_has_similar_sites_cnt();
  similar_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.similar_sites_cnt)
}

// optional uint32 visited_sites_cnt = 10;
inline bool Metrics::has_visited_sites_cnt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Metrics::set_has_visited_sites_cnt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Metrics::clear_has_visited_sites_cnt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Metrics::clear_visited_sites_cnt() {
  visited_sites_cnt_ = 0u;
  clear_has_visited_sites_cnt();
}
inline ::google::protobuf::uint32 Metrics::visited_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sites_cnt)
  return visited_sites_cnt_;
}
inline void Metrics::set_visited_sites_cnt(::google::protobuf::uint32 value) {
  set_has_visited_sites_cnt();
  visited_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sites_cnt)
}

// optional uint32 clicked_sites_cnt = 11;
inline bool Metrics::has_clicked_sites_cnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Metrics::set_has_clicked_sites_cnt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Metrics::clear_has_clicked_sites_cnt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Metrics::clear_clicked_sites_cnt() {
  clicked_sites_cnt_ = 0u;
  clear_has_clicked_sites_cnt();
}
inline ::google::protobuf::uint32 Metrics::clicked_sites_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sites_cnt)
  return clicked_sites_cnt_;
}
inline void Metrics::set_clicked_sites_cnt(::google::protobuf::uint32 value) {
  set_has_clicked_sites_cnt();
  clicked_sites_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sites_cnt)
}

// optional uint32 visited_sources_visits = 12;
inline bool Metrics::has_visited_sources_visits() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Metrics::set_has_visited_sources_visits() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Metrics::clear_has_visited_sources_visits() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Metrics::clear_visited_sources_visits() {
  visited_sources_visits_ = 0u;
  clear_has_visited_sources_visits();
}
inline ::google::protobuf::uint32 Metrics::visited_sources_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.visited_sources_visits)
  return visited_sources_visits_;
}
inline void Metrics::set_visited_sources_visits(::google::protobuf::uint32 value) {
  set_has_visited_sources_visits();
  visited_sources_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.visited_sources_visits)
}

// optional uint32 clicked_sources_visits = 13;
inline bool Metrics::has_clicked_sources_visits() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Metrics::set_has_clicked_sources_visits() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Metrics::clear_has_clicked_sources_visits() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Metrics::clear_clicked_sources_visits() {
  clicked_sources_visits_ = 0u;
  clear_has_clicked_sources_visits();
}
inline ::google::protobuf::uint32 Metrics::clicked_sources_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.clicked_sources_visits)
  return clicked_sources_visits_;
}
inline void Metrics::set_clicked_sources_visits(::google::protobuf::uint32 value) {
  set_has_clicked_sources_visits();
  clicked_sources_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.clicked_sources_visits)
}

// optional int64 sites_for_user_cnt = 14;
inline bool Metrics::has_sites_for_user_cnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Metrics::set_has_sites_for_user_cnt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Metrics::clear_has_sites_for_user_cnt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Metrics::clear_sites_for_user_cnt() {
  sites_for_user_cnt_ = GOOGLE_LONGLONG(0);
  clear_has_sites_for_user_cnt();
}
inline ::google::protobuf::int64 Metrics::sites_for_user_cnt() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.sites_for_user_cnt)
  return sites_for_user_cnt_;
}
inline void Metrics::set_sites_for_user_cnt(::google::protobuf::int64 value) {
  set_has_sites_for_user_cnt();
  sites_for_user_cnt_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.sites_for_user_cnt)
}

// optional bool show_category_subscription = 16;
inline bool Metrics::has_show_category_subscription() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Metrics::set_has_show_category_subscription() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Metrics::clear_has_show_category_subscription() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Metrics::clear_show_category_subscription() {
  show_category_subscription_ = false;
  clear_has_show_category_subscription();
}
inline bool Metrics::show_category_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_category_subscription)
  return show_category_subscription_;
}
inline void Metrics::set_show_category_subscription(bool value) {
  set_has_show_category_subscription();
  show_category_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_category_subscription)
}

// optional .cosmo.pb.Geo geo = 17;
inline bool Metrics::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metrics::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metrics::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metrics::clear_geo() {
  if (geo_ != NULL) geo_->::cosmo::pb::Geo::Clear();
  clear_has_geo();
}
inline const ::cosmo::pb::Geo& Metrics::geo() const {
  const ::cosmo::pb::Geo* p = geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Geo*>(
      &::cosmo::pb::_Geo_default_instance_);
}
inline ::cosmo::pb::Geo* Metrics::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::cosmo::pb::Geo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.geo)
  return geo_;
}
inline ::cosmo::pb::Geo* Metrics::release_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.geo)
  clear_has_geo();
  ::cosmo::pb::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void Metrics::set_allocated_geo(::cosmo::pb::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.geo)
}

// optional bool show_cold_sources_subscription = 18;
inline bool Metrics::has_show_cold_sources_subscription() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Metrics::set_has_show_cold_sources_subscription() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Metrics::clear_has_show_cold_sources_subscription() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Metrics::clear_show_cold_sources_subscription() {
  show_cold_sources_subscription_ = false;
  clear_has_show_cold_sources_subscription();
}
inline bool Metrics::show_cold_sources_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_cold_sources_subscription)
  return show_cold_sources_subscription_;
}
inline void Metrics::set_show_cold_sources_subscription(bool value) {
  set_has_show_cold_sources_subscription();
  show_cold_sources_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_cold_sources_subscription)
}

// optional bool show_hot_sources_subscription = 19;
inline bool Metrics::has_show_hot_sources_subscription() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Metrics::set_has_show_hot_sources_subscription() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Metrics::clear_has_show_hot_sources_subscription() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Metrics::clear_show_hot_sources_subscription() {
  show_hot_sources_subscription_ = false;
  clear_has_show_hot_sources_subscription();
}
inline bool Metrics::show_hot_sources_subscription() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.show_hot_sources_subscription)
  return show_hot_sources_subscription_;
}
inline void Metrics::set_show_hot_sources_subscription(bool value) {
  set_has_show_hot_sources_subscription();
  show_hot_sources_subscription_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.show_hot_sources_subscription)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics category_subscription_metrics = 20;
inline bool Metrics::has_category_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metrics::set_has_category_subscription_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metrics::clear_has_category_subscription_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metrics::clear_category_subscription_metrics() {
  if (category_subscription_metrics_ != NULL) category_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_category_subscription_metrics();
}
inline const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::category_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = category_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.category_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_category_subscription_metrics() {
  set_has_category_subscription_metrics();
  if (category_subscription_metrics_ == NULL) {
    category_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.category_subscription_metrics)
  return category_subscription_metrics_;
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_category_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.category_subscription_metrics)
  clear_has_category_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = category_subscription_metrics_;
  category_subscription_metrics_ = NULL;
  return temp;
}
inline void Metrics::set_allocated_category_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* category_subscription_metrics) {
  delete category_subscription_metrics_;
  category_subscription_metrics_ = category_subscription_metrics;
  if (category_subscription_metrics) {
    set_has_category_subscription_metrics();
  } else {
    clear_has_category_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.category_subscription_metrics)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics cold_sources_subscription_metrics = 21;
inline bool Metrics::has_cold_sources_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metrics::set_has_cold_sources_subscription_metrics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metrics::clear_has_cold_sources_subscription_metrics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metrics::clear_cold_sources_subscription_metrics() {
  if (cold_sources_subscription_metrics_ != NULL) cold_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_cold_sources_subscription_metrics();
}
inline const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::cold_sources_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = cold_sources_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_cold_sources_subscription_metrics() {
  set_has_cold_sources_subscription_metrics();
  if (cold_sources_subscription_metrics_ == NULL) {
    cold_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  return cold_sources_subscription_metrics_;
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_cold_sources_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.cold_sources_subscription_metrics)
  clear_has_cold_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = cold_sources_subscription_metrics_;
  cold_sources_subscription_metrics_ = NULL;
  return temp;
}
inline void Metrics::set_allocated_cold_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* cold_sources_subscription_metrics) {
  delete cold_sources_subscription_metrics_;
  cold_sources_subscription_metrics_ = cold_sources_subscription_metrics;
  if (cold_sources_subscription_metrics) {
    set_has_cold_sources_subscription_metrics();
  } else {
    clear_has_cold_sources_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.cold_sources_subscription_metrics)
}

// optional .cosmo.pb.Metrics.SubscriptionMetrics hot_sources_subscription_metrics = 22;
inline bool Metrics::has_hot_sources_subscription_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metrics::set_has_hot_sources_subscription_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metrics::clear_has_hot_sources_subscription_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metrics::clear_hot_sources_subscription_metrics() {
  if (hot_sources_subscription_metrics_ != NULL) hot_sources_subscription_metrics_->::cosmo::pb::Metrics_SubscriptionMetrics::Clear();
  clear_has_hot_sources_subscription_metrics();
}
inline const ::cosmo::pb::Metrics_SubscriptionMetrics& Metrics::hot_sources_subscription_metrics() const {
  const ::cosmo::pb::Metrics_SubscriptionMetrics* p = hot_sources_subscription_metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics_SubscriptionMetrics*>(
      &::cosmo::pb::_Metrics_SubscriptionMetrics_default_instance_);
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::mutable_hot_sources_subscription_metrics() {
  set_has_hot_sources_subscription_metrics();
  if (hot_sources_subscription_metrics_ == NULL) {
    hot_sources_subscription_metrics_ = new ::cosmo::pb::Metrics_SubscriptionMetrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  return hot_sources_subscription_metrics_;
}
inline ::cosmo::pb::Metrics_SubscriptionMetrics* Metrics::release_hot_sources_subscription_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.Metrics.hot_sources_subscription_metrics)
  clear_has_hot_sources_subscription_metrics();
  ::cosmo::pb::Metrics_SubscriptionMetrics* temp = hot_sources_subscription_metrics_;
  hot_sources_subscription_metrics_ = NULL;
  return temp;
}
inline void Metrics::set_allocated_hot_sources_subscription_metrics(::cosmo::pb::Metrics_SubscriptionMetrics* hot_sources_subscription_metrics) {
  delete hot_sources_subscription_metrics_;
  hot_sources_subscription_metrics_ = hot_sources_subscription_metrics;
  if (hot_sources_subscription_metrics) {
    set_has_hot_sources_subscription_metrics();
  } else {
    clear_has_hot_sources_subscription_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.Metrics.hot_sources_subscription_metrics)
}

// optional bool cold_lenta = 23;
inline bool Metrics::has_cold_lenta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Metrics::set_has_cold_lenta() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Metrics::clear_has_cold_lenta() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Metrics::clear_cold_lenta() {
  cold_lenta_ = false;
  clear_has_cold_lenta();
}
inline bool Metrics::cold_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.cold_lenta)
  return cold_lenta_;
}
inline void Metrics::set_cold_lenta(bool value) {
  set_has_cold_lenta();
  cold_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.cold_lenta)
}

// optional bool empty_lenta = 24;
inline bool Metrics::has_empty_lenta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Metrics::set_has_empty_lenta() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Metrics::clear_has_empty_lenta() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Metrics::clear_empty_lenta() {
  empty_lenta_ = false;
  clear_has_empty_lenta();
}
inline bool Metrics::empty_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Metrics.empty_lenta)
  return empty_lenta_;
}
inline void Metrics::set_empty_lenta(bool value) {
  set_has_empty_lenta();
  empty_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Metrics.empty_lenta)
}

// -------------------------------------------------------------------

// DebugInfo_UserDataEntry

// optional string source = 1;
inline bool DebugInfo_UserDataEntry::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugInfo_UserDataEntry::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugInfo_UserDataEntry::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugInfo_UserDataEntry::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DebugInfo_UserDataEntry::source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.UserDataEntry.source)
  return source_.GetNoArena();
}
inline void DebugInfo_UserDataEntry::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DebugInfo.UserDataEntry.source)
}
#if LANG_CXX11
inline void DebugInfo_UserDataEntry::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DebugInfo.UserDataEntry.source)
}
#endif
inline void DebugInfo_UserDataEntry::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DebugInfo.UserDataEntry.source)
}
inline void DebugInfo_UserDataEntry::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DebugInfo.UserDataEntry.source)
}
inline ::std::string* DebugInfo_UserDataEntry::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.UserDataEntry.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugInfo_UserDataEntry::release_source() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DebugInfo.UserDataEntry.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugInfo_UserDataEntry::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DebugInfo.UserDataEntry.source)
}

// optional .cosmo.pb.UserData data = 2;
inline bool DebugInfo_UserDataEntry::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugInfo_UserDataEntry::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugInfo_UserDataEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugInfo_UserDataEntry::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
inline const ::cosmo::pb::UserData& DebugInfo_UserDataEntry::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.UserDataEntry.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
inline ::cosmo::pb::UserData* DebugInfo_UserDataEntry::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::cosmo::pb::UserData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.UserDataEntry.data)
  return data_;
}
inline ::cosmo::pb::UserData* DebugInfo_UserDataEntry::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DebugInfo.UserDataEntry.data)
  clear_has_data();
  ::cosmo::pb::UserData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DebugInfo_UserDataEntry::set_allocated_data(::cosmo::pb::UserData* data) {
  delete data_;
  if (data != NULL && data->GetArena() != NULL) {
    ::cosmo::pb::UserData* new_data = new ::cosmo::pb::UserData;
    new_data->CopyFrom(*data);
    data = new_data;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DebugInfo.UserDataEntry.data)
}

// -------------------------------------------------------------------

// DebugInfo

// repeated .cosmo.pb.DebugInfo.UserDataEntry user_data = 1;
inline int DebugInfo::user_data_size() const {
  return user_data_.size();
}
inline void DebugInfo::clear_user_data() {
  user_data_.Clear();
}
inline const ::cosmo::pb::DebugInfo_UserDataEntry& DebugInfo::user_data(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DebugInfo.user_data)
  return user_data_.Get(index);
}
inline ::cosmo::pb::DebugInfo_UserDataEntry* DebugInfo::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DebugInfo.user_data)
  return user_data_.Mutable(index);
}
inline ::cosmo::pb::DebugInfo_UserDataEntry* DebugInfo::add_user_data() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DebugInfo.user_data)
  return user_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >*
DebugInfo::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DebugInfo.user_data)
  return &user_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DebugInfo_UserDataEntry >&
DebugInfo::user_data() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DebugInfo.user_data)
  return user_data_;
}

// -------------------------------------------------------------------

// Source

// required int64 source_id = 1;
inline bool Source::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Source::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Source::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Source::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 Source::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.source_id)
  return source_id_;
}
inline void Source::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.source_id)
}

// optional int32 category_id = 2;
inline bool Source::has_category_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Source::set_has_category_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Source::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Source::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 Source::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.category_id)
  return category_id_;
}
inline void Source::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.category_id)
}

// optional int64 site_hash = 3;
inline bool Source::has_site_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Source::set_has_site_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Source::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Source::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 Source::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.site_hash)
  return site_hash_;
}
inline void Source::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.site_hash)
}

// optional uint32 documents_count = 4;
inline bool Source::has_documents_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Source::set_has_documents_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Source::clear_has_documents_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Source::clear_documents_count() {
  documents_count_ = 0u;
  clear_has_documents_count();
}
inline ::google::protobuf::uint32 Source::documents_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.documents_count)
  return documents_count_;
}
inline void Source::set_documents_count(::google::protobuf::uint32 value) {
  set_has_documents_count();
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.documents_count)
}

// optional float rank = 5;
inline bool Source::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Source::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Source::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Source::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float Source::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Source.rank)
  return rank_;
}
inline void Source::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Source.rank)
}

// -------------------------------------------------------------------

// Category

// required int64 category_id = 1;
inline bool Category::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Category::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Category::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Category::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
inline ::google::protobuf::int64 Category::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Category.category_id)
  return category_id_;
}
inline void Category::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Category.category_id)
}

// optional float rank = 2;
inline bool Category::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Category::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Category::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Category::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float Category::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Category.rank)
  return rank_;
}
inline void Category::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Category.rank)
}

// -------------------------------------------------------------------

// CosmoOutput

// repeated .cosmo.pb.Document documents = 4;
inline int CosmoOutput::documents_size() const {
  return documents_.size();
}
inline void CosmoOutput::clear_documents() {
  documents_.Clear();
}
inline const ::cosmo::pb::Document& CosmoOutput::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.documents)
  return documents_.Get(index);
}
inline ::cosmo::pb::Document* CosmoOutput::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.documents)
  return documents_.Mutable(index);
}
inline ::cosmo::pb::Document* CosmoOutput::add_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
CosmoOutput::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
CosmoOutput::documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.documents)
  return documents_;
}

// optional .cosmo.pb.RankerInfo ranker_info = 9;
inline bool CosmoOutput::has_ranker_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosmoOutput::set_has_ranker_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CosmoOutput::clear_has_ranker_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CosmoOutput::clear_ranker_info() {
  if (ranker_info_ != NULL) ranker_info_->::cosmo::pb::RankerInfo::Clear();
  clear_has_ranker_info();
}
inline const ::cosmo::pb::RankerInfo& CosmoOutput::ranker_info() const {
  const ::cosmo::pb::RankerInfo* p = ranker_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.ranker_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::RankerInfo*>(
      &::cosmo::pb::_RankerInfo_default_instance_);
}
inline ::cosmo::pb::RankerInfo* CosmoOutput::mutable_ranker_info() {
  set_has_ranker_info();
  if (ranker_info_ == NULL) {
    ranker_info_ = new ::cosmo::pb::RankerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.ranker_info)
  return ranker_info_;
}
inline ::cosmo::pb::RankerInfo* CosmoOutput::release_ranker_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.ranker_info)
  clear_has_ranker_info();
  ::cosmo::pb::RankerInfo* temp = ranker_info_;
  ranker_info_ = NULL;
  return temp;
}
inline void CosmoOutput::set_allocated_ranker_info(::cosmo::pb::RankerInfo* ranker_info) {
  delete ranker_info_;
  ranker_info_ = ranker_info;
  if (ranker_info) {
    set_has_ranker_info();
  } else {
    clear_has_ranker_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.ranker_info)
}

// repeated .cosmo.pb.Error errors = 10;
inline int CosmoOutput::errors_size() const {
  return errors_.size();
}
inline void CosmoOutput::clear_errors() {
  errors_.Clear();
}
inline const ::cosmo::pb::Error& CosmoOutput::errors(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.errors)
  return errors_.Get(index);
}
inline ::cosmo::pb::Error* CosmoOutput::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.errors)
  return errors_.Mutable(index);
}
inline ::cosmo::pb::Error* CosmoOutput::add_errors() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.errors)
  return errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
CosmoOutput::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.errors)
  return &errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
CosmoOutput::errors() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.errors)
  return errors_;
}

// optional .cosmo.pb.RetrieverStats retriever_stats = 11;
inline bool CosmoOutput::has_retriever_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosmoOutput::set_has_retriever_stats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CosmoOutput::clear_has_retriever_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CosmoOutput::clear_retriever_stats() {
  if (retriever_stats_ != NULL) retriever_stats_->::cosmo::pb::RetrieverStats::Clear();
  clear_has_retriever_stats();
}
inline const ::cosmo::pb::RetrieverStats& CosmoOutput::retriever_stats() const {
  const ::cosmo::pb::RetrieverStats* p = retriever_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.retriever_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::RetrieverStats*>(
      &::cosmo::pb::_RetrieverStats_default_instance_);
}
inline ::cosmo::pb::RetrieverStats* CosmoOutput::mutable_retriever_stats() {
  set_has_retriever_stats();
  if (retriever_stats_ == NULL) {
    retriever_stats_ = new ::cosmo::pb::RetrieverStats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.retriever_stats)
  return retriever_stats_;
}
inline ::cosmo::pb::RetrieverStats* CosmoOutput::release_retriever_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.retriever_stats)
  clear_has_retriever_stats();
  ::cosmo::pb::RetrieverStats* temp = retriever_stats_;
  retriever_stats_ = NULL;
  return temp;
}
inline void CosmoOutput::set_allocated_retriever_stats(::cosmo::pb::RetrieverStats* retriever_stats) {
  delete retriever_stats_;
  retriever_stats_ = retriever_stats;
  if (retriever_stats) {
    set_has_retriever_stats();
  } else {
    clear_has_retriever_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.retriever_stats)
}

// optional .cosmo.pb.MixerInfo mixer_info = 12;
inline bool CosmoOutput::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CosmoOutput::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CosmoOutput::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CosmoOutput::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
inline const ::cosmo::pb::MixerInfo& CosmoOutput::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
inline ::cosmo::pb::MixerInfo* CosmoOutput::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.mixer_info)
  return mixer_info_;
}
inline ::cosmo::pb::MixerInfo* CosmoOutput::release_mixer_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
inline void CosmoOutput::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.mixer_info)
}

// optional .cosmo.pb.Metrics metrics = 13;
inline bool CosmoOutput::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CosmoOutput::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CosmoOutput::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CosmoOutput::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
inline const ::cosmo::pb::Metrics& CosmoOutput::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
inline ::cosmo::pb::Metrics* CosmoOutput::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.metrics)
  return metrics_;
}
inline ::cosmo::pb::Metrics* CosmoOutput::release_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline void CosmoOutput::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.metrics)
}

// optional .cosmo.pb.DebugInfo debug_info = 14;
inline bool CosmoOutput::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CosmoOutput::set_has_debug_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CosmoOutput::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CosmoOutput::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::cosmo::pb::DebugInfo::Clear();
  clear_has_debug_info();
}
inline const ::cosmo::pb::DebugInfo& CosmoOutput::debug_info() const {
  const ::cosmo::pb::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DebugInfo*>(
      &::cosmo::pb::_DebugInfo_default_instance_);
}
inline ::cosmo::pb::DebugInfo* CosmoOutput::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::cosmo::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.debug_info)
  return debug_info_;
}
inline ::cosmo::pb::DebugInfo* CosmoOutput::release_debug_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoOutput.debug_info)
  clear_has_debug_info();
  ::cosmo::pb::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline void CosmoOutput::set_allocated_debug_info(::cosmo::pb::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoOutput.debug_info)
}

// repeated .cosmo.pb.Source sources = 15;
inline int CosmoOutput::sources_size() const {
  return sources_.size();
}
inline void CosmoOutput::clear_sources() {
  sources_.Clear();
}
inline const ::cosmo::pb::Source& CosmoOutput::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.sources)
  return sources_.Get(index);
}
inline ::cosmo::pb::Source* CosmoOutput::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.sources)
  return sources_.Mutable(index);
}
inline ::cosmo::pb::Source* CosmoOutput::add_sources() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
CosmoOutput::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
CosmoOutput::sources() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.sources)
  return sources_;
}

// repeated .cosmo.pb.Category categories = 16;
inline int CosmoOutput::categories_size() const {
  return categories_.size();
}
inline void CosmoOutput::clear_categories() {
  categories_.Clear();
}
inline const ::cosmo::pb::Category& CosmoOutput::categories(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoOutput.categories)
  return categories_.Get(index);
}
inline ::cosmo::pb::Category* CosmoOutput::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoOutput.categories)
  return categories_.Mutable(index);
}
inline ::cosmo::pb::Category* CosmoOutput::add_categories() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoOutput.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
CosmoOutput::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoOutput.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
CosmoOutput::categories() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoOutput.categories)
  return categories_;
}

// -------------------------------------------------------------------

// FeaturesDump

// repeated float features = 1;
inline int FeaturesDump::features_size() const {
  return features_.size();
}
inline void FeaturesDump::clear_features() {
  features_.Clear();
}
inline float FeaturesDump::features(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.FeaturesDump.features)
  return features_.Get(index);
}
inline void FeaturesDump::set_features(int index, float value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features)
}
inline void FeaturesDump::add_features(float value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features)
}
inline const ::google::protobuf::RepeatedField< float >&
FeaturesDump::features() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.FeaturesDump.features)
  return features_;
}
inline ::google::protobuf::RepeatedField< float >*
FeaturesDump::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.FeaturesDump.features)
  return &features_;
}

// repeated string features_names = 2;
inline int FeaturesDump::features_names_size() const {
  return features_names_.size();
}
inline void FeaturesDump::clear_features_names() {
  features_names_.Clear();
}
inline const ::std::string& FeaturesDump::features_names(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Get(index);
}
inline ::std::string* FeaturesDump::mutable_features_names(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Mutable(index);
}
inline void FeaturesDump::set_features_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features_names)
  features_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FeaturesDump::set_features_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cosmo.pb.FeaturesDump.features_names)
  features_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FeaturesDump::set_features_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmo.pb.FeaturesDump.features_names)
}
inline void FeaturesDump::set_features_names(int index, const char* value, size_t size) {
  features_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.FeaturesDump.features_names)
}
inline ::std::string* FeaturesDump::add_features_names() {
  // @@protoc_insertion_point(field_add_mutable:cosmo.pb.FeaturesDump.features_names)
  return features_names_.Add();
}
inline void FeaturesDump::add_features_names(const ::std::string& value) {
  features_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features_names)
}
#if LANG_CXX11
inline void FeaturesDump::add_features_names(::std::string&& value) {
  features_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmo.pb.FeaturesDump.features_names)
}
#endif
inline void FeaturesDump::add_features_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmo.pb.FeaturesDump.features_names)
}
inline void FeaturesDump::add_features_names(const char* value, size_t size) {
  features_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmo.pb.FeaturesDump.features_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeaturesDump::features_names() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.FeaturesDump.features_names)
  return features_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FeaturesDump::mutable_features_names() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.FeaturesDump.features_names)
  return &features_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cosmo::pb::Document_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::Document_Type>() {
  return ::cosmo::pb::Document_Type_descriptor();
}
template <> struct is_proto_enum< ::cosmo::pb::Error_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::Error_Code>() {
  return ::cosmo::pb::Error_Code_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_5fresult_2eproto__INCLUDED
