// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_user_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_user_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class UserData_OriginalInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_OriginalInfo>
     _instance;
} _UserData_OriginalInfo_default_instance_;
class UserData_OkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_OkInfo>
     _instance;
} _UserData_OkInfo_default_instance_;
class UserData_SocDemFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SocDemFea>
     _instance;
} _UserData_SocDemFea_default_instance_;
class UserData_DetiRecosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_DetiRecos>
     _instance;
} _UserData_DetiRecos_default_instance_;
class UserData_AlsFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_AlsFea>
     _instance;
} _UserData_AlsFea_default_instance_;
class UserData_AlsItemsBiasesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_AlsItemsBiases>
     _instance;
} _UserData_AlsItemsBiases_default_instance_;
class UserData_NewsSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_NewsSources>
     _instance;
} _UserData_NewsSources_default_instance_;
class UserData_Stats_SourceStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_Stats_SourceStats>
     _instance;
} _UserData_Stats_SourceStats_default_instance_;
class UserData_StatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_Stats>
     _instance;
} _UserData_Stats_default_instance_;
class UserData_SourcesWebStats_SourceVisitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SourcesWebStats_SourceVisit>
     _instance;
} _UserData_SourcesWebStats_SourceVisit_default_instance_;
class UserData_SourcesWebStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SourcesWebStats>
     _instance;
} _UserData_SourcesWebStats_default_instance_;
class UserData_UserLinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserLinks>
     _instance;
} _UserData_UserLinks_default_instance_;
class UserDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData>
     _instance;
} _UserData_default_instance_;
class GroupedUserDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GroupedUserData>
     _instance;
} _GroupedUserData_default_instance_;

namespace protobuf_cosmo_5fuser_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, user_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, age_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, slim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, wrmf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_tuned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_large_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, svd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, svd_stupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_by_liker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_by_homer_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, als_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, fea_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, id_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, opens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, shares_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, sources_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, visits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, sourcevisits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, mail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, vk_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, socdem_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, ok_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, deti_reco_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_items_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, news_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, original_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_fea_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sources_web_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sources_reco_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_links_),
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, data_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(UserData_OriginalInfo)},
  { 7, 13, sizeof(UserData_OkInfo)},
  { 14, 21, sizeof(UserData_SocDemFea)},
  { 23, 36, sizeof(UserData_DetiRecos)},
  { 44, 50, sizeof(UserData_AlsFea)},
  { 51, 57, sizeof(UserData_AlsItemsBiases)},
  { 58, 65, sizeof(UserData_NewsSources)},
  { 67, 79, sizeof(UserData_Stats_SourceStats)},
  { 86, 93, sizeof(UserData_Stats)},
  { 95, 102, sizeof(UserData_SourcesWebStats_SourceVisit)},
  { 104, 111, sizeof(UserData_SourcesWebStats)},
  { 113, 122, sizeof(UserData_UserLinks)},
  { 126, 144, sizeof(UserData)},
  { 157, 163, sizeof(GroupedUserData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_OriginalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_OkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SocDemFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_DetiRecos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_AlsFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_AlsItemsBiases_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_NewsSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_Stats_SourceStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SourcesWebStats_SourceVisit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SourcesWebStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserLinks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupedUserData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_user_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserData_OriginalInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_OriginalInfo_default_instance_);_UserData_OkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_OkInfo_default_instance_);_UserData_SocDemFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SocDemFea_default_instance_);_UserData_DetiRecos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_DetiRecos_default_instance_);_UserData_AlsFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_AlsFea_default_instance_);_UserData_AlsItemsBiases_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_AlsItemsBiases_default_instance_);_UserData_NewsSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_NewsSources_default_instance_);_UserData_Stats_SourceStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_Stats_SourceStats_default_instance_);_UserData_Stats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_Stats_default_instance_);_UserData_SourcesWebStats_SourceVisit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SourcesWebStats_SourceVisit_default_instance_);_UserData_SourcesWebStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SourcesWebStats_default_instance_);_UserData_UserLinks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserLinks_default_instance_);_UserData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_default_instance_);_GroupedUserData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GroupedUserData_default_instance_);_UserData_default_instance_._instance.get_mutable()->socdem_fea_ = const_cast< ::cosmo::pb::UserData_SocDemFea*>(
      ::cosmo::pb::UserData_SocDemFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_fea_ = const_cast< ::cosmo::pb::UserData_AlsFea*>(
      ::cosmo::pb::UserData_AlsFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->ok_info_ = const_cast< ::cosmo::pb::UserData_OkInfo*>(
      ::cosmo::pb::UserData_OkInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->deti_reco_ = const_cast< ::cosmo::pb::UserData_DetiRecos*>(
      ::cosmo::pb::UserData_DetiRecos::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_items_fea_ = const_cast< ::cosmo::pb::UserData_AlsItemsBiases*>(
      ::cosmo::pb::UserData_AlsItemsBiases::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->news_sources_ = const_cast< ::cosmo::pb::UserData_NewsSources*>(
      ::cosmo::pb::UserData_NewsSources::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->stats_ = const_cast< ::cosmo::pb::UserData_Stats*>(
      ::cosmo::pb::UserData_Stats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->original_info_ = const_cast< ::cosmo::pb::UserData_OriginalInfo*>(
      ::cosmo::pb::UserData_OriginalInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_fea_2_ = const_cast< ::cosmo::pb::UserData_AlsFea*>(
      ::cosmo::pb::UserData_AlsFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sources_web_stats_ = const_cast< ::cosmo::pb::UserData_SourcesWebStats*>(
      ::cosmo::pb::UserData_SourcesWebStats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sources_reco_stats_ = const_cast< ::cosmo::pb::UserData_Stats*>(
      ::cosmo::pb::UserData_Stats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_links_ = const_cast< ::cosmo::pb::UserData_UserLinks*>(
      ::cosmo::pb::UserData_UserLinks::internal_default_instance());
  _GroupedUserData_default_instance_._instance.get_mutable()->data_ = const_cast< ::cosmo::pb::UserData*>(
      ::cosmo::pb::UserData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cosmo_user_data.proto\022\010cosmo.pb\"\232\013\n\010Us"
      "erData\022\017\n\007user_id\030\001 \001(\003\0220\n\nsocdem_fea\030\002 "
      "\001(\0132\034.cosmo.pb.UserData.SocDemFea\022*\n\007als"
      "_fea\030\003 \001(\0132\031.cosmo.pb.UserData.AlsFea\022*\n"
      "\007ok_info\030\004 \001(\0132\031.cosmo.pb.UserData.OkInf"
      "o\022/\n\tdeti_reco\030\005 \001(\0132\034.cosmo.pb.UserData"
      ".DetiRecos\0228\n\rals_items_fea\030\006 \001(\0132!.cosm"
      "o.pb.UserData.AlsItemsBiases\0224\n\014news_sou"
      "rces\030\007 \001(\0132\036.cosmo.pb.UserData.NewsSourc"
      "es\022\'\n\005stats\030\010 \001(\0132\030.cosmo.pb.UserData.St"
      "ats\0226\n\roriginal_info\030\t \001(\0132\037.cosmo.pb.Us"
      "erData.OriginalInfo\022,\n\tals_fea_2\030\n \001(\0132\031"
      ".cosmo.pb.UserData.AlsFea\022=\n\021sources_web"
      "_stats\030\013 \001(\0132\".cosmo.pb.UserData.Sources"
      "WebStats\0224\n\022sources_reco_stats\030\014 \001(\0132\030.c"
      "osmo.pb.UserData.Stats\0220\n\nuser_links\030\r \001"
      "(\0132\034.cosmo.pb.UserData.UserLinks\032\032\n\014Orig"
      "inalInfo\022\n\n\002id\030\001 \001(\t\032\031\n\006OkInfo\022\017\n\007user_i"
      "d\030\001 \002(\003\032+\n\tSocDemFea\022\021\n\006gender\030\001 \001(\005:\0010\022"
      "\013\n\003age\030\002 \001(\005\032\232\001\n\tDetiRecos\022\014\n\004slim\030\001 \003(\003"
      "\022\014\n\004wrmf\030\002 \003(\003\022\021\n\tals_tuned\030\003 \003(\003\022\021\n\tals"
      "_large\030\004 \003(\003\022\013\n\003svd\030\005 \003(\003\022\022\n\nsvd_stupid\030"
      "\006 \003(\003\022\024\n\014als_by_liker\030\007 \003(\003\022\024\n\014als_by_ho"
      "mer\030\010 \003(\003\032\025\n\006AlsFea\022\013\n\003als\030\001 \003(\002\032\035\n\016AlsI"
      "temsBiases\022\013\n\003fea\030\001 \003(\002\032)\n\013NewsSources\022\016"
      "\n\006weight\030\001 \003(\002\022\n\n\002id\030\002 \003(\003\032\334\001\n\005Stats\022;\n\r"
      "sources_stats\030\001 \003(\0132$.cosmo.pb.UserData."
      "Stats.SourceStats\022\017\n\007version\030\002 \001(\r\032\204\001\n\013S"
      "ourceStats\022\021\n\tsource_id\030\001 \002(\003\022\023\n\013categor"
      "y_id\030\002 \001(\003\022\r\n\005views\030\003 \001(\005\022\r\n\005opens\030\004 \001(\005"
      "\022\r\n\005likes\030\005 \001(\005\022\020\n\010dislikes\030\006 \001(\005\022\016\n\006sha"
      "res\030\007 \001(\005\032\232\001\n\017SourcesWebStats\022D\n\014SourceV"
      "isits\030\001 \003(\0132..cosmo.pb.UserData.SourcesW"
      "ebStats.SourceVisit\022\017\n\007version\030\002 \001(\r\0320\n\013"
      "SourceVisit\022\021\n\tsource_id\030\001 \002(\003\022\016\n\006visits"
      "\030\002 \002(\005\032>\n\tUserLinks\022\013\n\003vid\030\001 \001(\t\022\014\n\004mail"
      "\030\002 \001(\t\022\n\n\002ok\030\003 \001(\t\022\n\n\002vk\030\004 \001(\t\"3\n\017Groupe"
      "dUserData\022 \n\004data\030\001 \001(\0132\022.cosmo.pb.UserD"
      "ata"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_user_data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fuser_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_OriginalInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_OriginalInfo::UserData_OriginalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.OriginalInfo)
}
UserData_OriginalInfo::UserData_OriginalInfo(const UserData_OriginalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.OriginalInfo)
}

void UserData_OriginalInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserData_OriginalInfo::~UserData_OriginalInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.OriginalInfo)
  SharedDtor();
}

void UserData_OriginalInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserData_OriginalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_OriginalInfo::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_OriginalInfo& UserData_OriginalInfo::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_OriginalInfo* UserData_OriginalInfo::New(::google::protobuf::Arena* arena) const {
  UserData_OriginalInfo* n = new UserData_OriginalInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_OriginalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_OriginalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.OriginalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.OriginalInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.OriginalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.OriginalInfo)
  return false;
#undef DO_
}

void UserData_OriginalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.OriginalInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.OriginalInfo)
}

::google::protobuf::uint8* UserData_OriginalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.OriginalInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.OriginalInfo)
  return target;
}

size_t UserData_OriginalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.OriginalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_OriginalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_OriginalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_OriginalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.OriginalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.OriginalInfo)
    MergeFrom(*source);
  }
}

void UserData_OriginalInfo::MergeFrom(const UserData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void UserData_OriginalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_OriginalInfo::CopyFrom(const UserData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_OriginalInfo::IsInitialized() const {
  return true;
}

void UserData_OriginalInfo::Swap(UserData_OriginalInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_OriginalInfo::InternalSwap(UserData_OriginalInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_OriginalInfo::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_OriginalInfo

// optional string id = 1;
bool UserData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_OriginalInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& UserData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OriginalInfo.id)
  return id_.GetNoArena();
}
void UserData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OriginalInfo.id)
}
#if LANG_CXX11
void UserData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.OriginalInfo.id)
}
#endif
void UserData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.OriginalInfo.id)
}
void UserData_OriginalInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.OriginalInfo.id)
}
::std::string* UserData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.OriginalInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.OriginalInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_OkInfo::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_OkInfo::UserData_OkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.OkInfo)
}
UserData_OkInfo::UserData_OkInfo(const UserData_OkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.OkInfo)
}

void UserData_OkInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
}

UserData_OkInfo::~UserData_OkInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.OkInfo)
  SharedDtor();
}

void UserData_OkInfo::SharedDtor() {
}

void UserData_OkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_OkInfo::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_OkInfo& UserData_OkInfo::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_OkInfo* UserData_OkInfo::New(::google::protobuf::Arena* arena) const {
  UserData_OkInfo* n = new UserData_OkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_OkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_OkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.OkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.OkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.OkInfo)
  return false;
#undef DO_
}

void UserData_OkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.OkInfo)
}

::google::protobuf::uint8* UserData_OkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.OkInfo)
  return target;
}

size_t UserData_OkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.OkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_OkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_OkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_OkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.OkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.OkInfo)
    MergeFrom(*source);
  }
}

void UserData_OkInfo::MergeFrom(const UserData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void UserData_OkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_OkInfo::CopyFrom(const UserData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_OkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_OkInfo::Swap(UserData_OkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_OkInfo::InternalSwap(UserData_OkInfo* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_OkInfo::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_OkInfo

// required int64 user_id = 1;
bool UserData_OkInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_OkInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_OkInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_OkInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserData_OkInfo::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OkInfo.user_id)
  return user_id_;
}
void UserData_OkInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OkInfo.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SocDemFea::kGenderFieldNumber;
const int UserData_SocDemFea::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SocDemFea::UserData_SocDemFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SocDemFea)
}
UserData_SocDemFea::UserData_SocDemFea(const UserData_SocDemFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SocDemFea)
}

void UserData_SocDemFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
}

UserData_SocDemFea::~UserData_SocDemFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SocDemFea)
  SharedDtor();
}

void UserData_SocDemFea::SharedDtor() {
}

void UserData_SocDemFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SocDemFea::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SocDemFea& UserData_SocDemFea::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SocDemFea* UserData_SocDemFea::New(::google::protobuf::Arena* arena) const {
  UserData_SocDemFea* n = new UserData_SocDemFea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_SocDemFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&gender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_) -
        reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SocDemFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SocDemFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gender = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SocDemFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SocDemFea)
  return false;
#undef DO_
}

void UserData_SocDemFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 gender = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  // optional int32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SocDemFea)
}

::google::protobuf::uint8* UserData_SocDemFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 gender = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  // optional int32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SocDemFea)
  return target;
}

size_t UserData_SocDemFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SocDemFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 gender = 1 [default = 0];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SocDemFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SocDemFea)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SocDemFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SocDemFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SocDemFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SocDemFea)
    MergeFrom(*source);
  }
}

void UserData_SocDemFea::MergeFrom(const UserData_SocDemFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SocDemFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000002u) {
      age_ = from.age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SocDemFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SocDemFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SocDemFea::CopyFrom(const UserData_SocDemFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SocDemFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SocDemFea::IsInitialized() const {
  return true;
}

void UserData_SocDemFea::Swap(UserData_SocDemFea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_SocDemFea::InternalSwap(UserData_SocDemFea* other) {
  using std::swap;
  swap(gender_, other->gender_);
  swap(age_, other->age_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SocDemFea::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SocDemFea

// optional int32 gender = 1 [default = 0];
bool UserData_SocDemFea::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SocDemFea::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SocDemFea::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SocDemFea::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
::google::protobuf::int32 UserData_SocDemFea::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.gender)
  return gender_;
}
void UserData_SocDemFea::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.gender)
}

// optional int32 age = 2;
bool UserData_SocDemFea::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SocDemFea::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SocDemFea::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SocDemFea::clear_age() {
  age_ = 0;
  clear_has_age();
}
::google::protobuf::int32 UserData_SocDemFea::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.age)
  return age_;
}
void UserData_SocDemFea::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_DetiRecos::kSlimFieldNumber;
const int UserData_DetiRecos::kWrmfFieldNumber;
const int UserData_DetiRecos::kAlsTunedFieldNumber;
const int UserData_DetiRecos::kAlsLargeFieldNumber;
const int UserData_DetiRecos::kSvdFieldNumber;
const int UserData_DetiRecos::kSvdStupidFieldNumber;
const int UserData_DetiRecos::kAlsByLikerFieldNumber;
const int UserData_DetiRecos::kAlsByHomerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_DetiRecos::UserData_DetiRecos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.DetiRecos)
}
UserData_DetiRecos::UserData_DetiRecos(const UserData_DetiRecos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slim_(from.slim_),
      wrmf_(from.wrmf_),
      als_tuned_(from.als_tuned_),
      als_large_(from.als_large_),
      svd_(from.svd_),
      svd_stupid_(from.svd_stupid_),
      als_by_liker_(from.als_by_liker_),
      als_by_homer_(from.als_by_homer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.DetiRecos)
}

void UserData_DetiRecos::SharedCtor() {
  _cached_size_ = 0;
}

UserData_DetiRecos::~UserData_DetiRecos() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.DetiRecos)
  SharedDtor();
}

void UserData_DetiRecos::SharedDtor() {
}

void UserData_DetiRecos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_DetiRecos::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_DetiRecos& UserData_DetiRecos::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_DetiRecos* UserData_DetiRecos::New(::google::protobuf::Arena* arena) const {
  UserData_DetiRecos* n = new UserData_DetiRecos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_DetiRecos::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slim_.Clear();
  wrmf_.Clear();
  als_tuned_.Clear();
  als_large_.Clear();
  svd_.Clear();
  svd_stupid_.Clear();
  als_by_liker_.Clear();
  als_by_homer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_DetiRecos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.DetiRecos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 slim = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_slim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 wrmf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_wrmf())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_wrmf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_tuned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_als_tuned())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_tuned())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_large = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32u, input, this->mutable_als_large())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_large())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 svd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_svd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_svd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 svd_stupid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_svd_stupid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_svd_stupid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_by_liker = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_als_by_liker())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_by_liker())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_by_homer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64u, input, this->mutable_als_by_homer())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_by_homer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.DetiRecos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.DetiRecos)
  return false;
#undef DO_
}

void UserData_DetiRecos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 slim = 1;
  for (int i = 0, n = this->slim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->slim(i), output);
  }

  // repeated int64 wrmf = 2;
  for (int i = 0, n = this->wrmf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->wrmf(i), output);
  }

  // repeated int64 als_tuned = 3;
  for (int i = 0, n = this->als_tuned_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->als_tuned(i), output);
  }

  // repeated int64 als_large = 4;
  for (int i = 0, n = this->als_large_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->als_large(i), output);
  }

  // repeated int64 svd = 5;
  for (int i = 0, n = this->svd_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->svd(i), output);
  }

  // repeated int64 svd_stupid = 6;
  for (int i = 0, n = this->svd_stupid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->svd_stupid(i), output);
  }

  // repeated int64 als_by_liker = 7;
  for (int i = 0, n = this->als_by_liker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->als_by_liker(i), output);
  }

  // repeated int64 als_by_homer = 8;
  for (int i = 0, n = this->als_by_homer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->als_by_homer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.DetiRecos)
}

::google::protobuf::uint8* UserData_DetiRecos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 slim = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->slim_, target);

  // repeated int64 wrmf = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->wrmf_, target);

  // repeated int64 als_tuned = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->als_tuned_, target);

  // repeated int64 als_large = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(4, this->als_large_, target);

  // repeated int64 svd = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->svd_, target);

  // repeated int64 svd_stupid = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->svd_stupid_, target);

  // repeated int64 als_by_liker = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->als_by_liker_, target);

  // repeated int64 als_by_homer = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(8, this->als_by_homer_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.DetiRecos)
  return target;
}

size_t UserData_DetiRecos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.DetiRecos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 slim = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->slim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slim_size());
    total_size += data_size;
  }

  // repeated int64 wrmf = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->wrmf_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wrmf_size());
    total_size += data_size;
  }

  // repeated int64 als_tuned = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_tuned_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_tuned_size());
    total_size += data_size;
  }

  // repeated int64 als_large = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_large_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_large_size());
    total_size += data_size;
  }

  // repeated int64 svd = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->svd_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svd_size());
    total_size += data_size;
  }

  // repeated int64 svd_stupid = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->svd_stupid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svd_stupid_size());
    total_size += data_size;
  }

  // repeated int64 als_by_liker = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_by_liker_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_by_liker_size());
    total_size += data_size;
  }

  // repeated int64 als_by_homer = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_by_homer_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_by_homer_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_DetiRecos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.DetiRecos)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_DetiRecos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_DetiRecos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.DetiRecos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.DetiRecos)
    MergeFrom(*source);
  }
}

void UserData_DetiRecos::MergeFrom(const UserData_DetiRecos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.DetiRecos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slim_.MergeFrom(from.slim_);
  wrmf_.MergeFrom(from.wrmf_);
  als_tuned_.MergeFrom(from.als_tuned_);
  als_large_.MergeFrom(from.als_large_);
  svd_.MergeFrom(from.svd_);
  svd_stupid_.MergeFrom(from.svd_stupid_);
  als_by_liker_.MergeFrom(from.als_by_liker_);
  als_by_homer_.MergeFrom(from.als_by_homer_);
}

void UserData_DetiRecos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.DetiRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_DetiRecos::CopyFrom(const UserData_DetiRecos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.DetiRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_DetiRecos::IsInitialized() const {
  return true;
}

void UserData_DetiRecos::Swap(UserData_DetiRecos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_DetiRecos::InternalSwap(UserData_DetiRecos* other) {
  using std::swap;
  slim_.InternalSwap(&other->slim_);
  wrmf_.InternalSwap(&other->wrmf_);
  als_tuned_.InternalSwap(&other->als_tuned_);
  als_large_.InternalSwap(&other->als_large_);
  svd_.InternalSwap(&other->svd_);
  svd_stupid_.InternalSwap(&other->svd_stupid_);
  als_by_liker_.InternalSwap(&other->als_by_liker_);
  als_by_homer_.InternalSwap(&other->als_by_homer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_DetiRecos::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_DetiRecos

// repeated int64 slim = 1;
int UserData_DetiRecos::slim_size() const {
  return slim_.size();
}
void UserData_DetiRecos::clear_slim() {
  slim_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::slim(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.slim)
  return slim_.Get(index);
}
void UserData_DetiRecos::set_slim(int index, ::google::protobuf::int64 value) {
  slim_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.slim)
}
void UserData_DetiRecos::add_slim(::google::protobuf::int64 value) {
  slim_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.slim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::slim() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.slim)
  return slim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_slim() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.slim)
  return &slim_;
}

// repeated int64 wrmf = 2;
int UserData_DetiRecos::wrmf_size() const {
  return wrmf_.size();
}
void UserData_DetiRecos::clear_wrmf() {
  wrmf_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::wrmf(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_.Get(index);
}
void UserData_DetiRecos::set_wrmf(int index, ::google::protobuf::int64 value) {
  wrmf_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.wrmf)
}
void UserData_DetiRecos::add_wrmf(::google::protobuf::int64 value) {
  wrmf_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.wrmf)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::wrmf() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_wrmf() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return &wrmf_;
}

// repeated int64 als_tuned = 3;
int UserData_DetiRecos::als_tuned_size() const {
  return als_tuned_.size();
}
void UserData_DetiRecos::clear_als_tuned() {
  als_tuned_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_tuned(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_.Get(index);
}
void UserData_DetiRecos::set_als_tuned(int index, ::google::protobuf::int64 value) {
  als_tuned_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_tuned)
}
void UserData_DetiRecos::add_als_tuned(::google::protobuf::int64 value) {
  als_tuned_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_tuned)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_tuned() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_tuned() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return &als_tuned_;
}

// repeated int64 als_large = 4;
int UserData_DetiRecos::als_large_size() const {
  return als_large_.size();
}
void UserData_DetiRecos::clear_als_large() {
  als_large_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_large(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_.Get(index);
}
void UserData_DetiRecos::set_als_large(int index, ::google::protobuf::int64 value) {
  als_large_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_large)
}
void UserData_DetiRecos::add_als_large(::google::protobuf::int64 value) {
  als_large_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_large)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_large() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_large() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_large)
  return &als_large_;
}

// repeated int64 svd = 5;
int UserData_DetiRecos::svd_size() const {
  return svd_.size();
}
void UserData_DetiRecos::clear_svd() {
  svd_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::svd(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd)
  return svd_.Get(index);
}
void UserData_DetiRecos::set_svd(int index, ::google::protobuf::int64 value) {
  svd_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd)
}
void UserData_DetiRecos::add_svd(::google::protobuf::int64 value) {
  svd_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd)
  return svd_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd)
  return &svd_;
}

// repeated int64 svd_stupid = 6;
int UserData_DetiRecos::svd_stupid_size() const {
  return svd_stupid_.size();
}
void UserData_DetiRecos::clear_svd_stupid() {
  svd_stupid_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::svd_stupid(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_.Get(index);
}
void UserData_DetiRecos::set_svd_stupid(int index, ::google::protobuf::int64 value) {
  svd_stupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
void UserData_DetiRecos::add_svd_stupid(::google::protobuf::int64 value) {
  svd_stupid_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd_stupid() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd_stupid() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return &svd_stupid_;
}

// repeated int64 als_by_liker = 7;
int UserData_DetiRecos::als_by_liker_size() const {
  return als_by_liker_.size();
}
void UserData_DetiRecos::clear_als_by_liker() {
  als_by_liker_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_by_liker(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_.Get(index);
}
void UserData_DetiRecos::set_als_by_liker(int index, ::google::protobuf::int64 value) {
  als_by_liker_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
void UserData_DetiRecos::add_als_by_liker(::google::protobuf::int64 value) {
  als_by_liker_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_liker() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_liker() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return &als_by_liker_;
}

// repeated int64 als_by_homer = 8;
int UserData_DetiRecos::als_by_homer_size() const {
  return als_by_homer_.size();
}
void UserData_DetiRecos::clear_als_by_homer() {
  als_by_homer_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_by_homer(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_.Get(index);
}
void UserData_DetiRecos::set_als_by_homer(int index, ::google::protobuf::int64 value) {
  als_by_homer_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
void UserData_DetiRecos::add_als_by_homer(::google::protobuf::int64 value) {
  als_by_homer_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_homer() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_homer() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return &als_by_homer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_AlsFea::kAlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_AlsFea::UserData_AlsFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.AlsFea)
}
UserData_AlsFea::UserData_AlsFea(const UserData_AlsFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      als_(from.als_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.AlsFea)
}

void UserData_AlsFea::SharedCtor() {
  _cached_size_ = 0;
}

UserData_AlsFea::~UserData_AlsFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.AlsFea)
  SharedDtor();
}

void UserData_AlsFea::SharedDtor() {
}

void UserData_AlsFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_AlsFea::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_AlsFea& UserData_AlsFea::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_AlsFea* UserData_AlsFea::New(::google::protobuf::Arena* arena) const {
  UserData_AlsFea* n = new UserData_AlsFea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_AlsFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  als_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_AlsFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.AlsFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float als = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_als())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_als())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.AlsFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.AlsFea)
  return false;
#undef DO_
}

void UserData_AlsFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  for (int i = 0, n = this->als_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->als(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.AlsFea)
}

::google::protobuf::uint8* UserData_AlsFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->als_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.AlsFea)
  return target;
}

size_t UserData_AlsFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.AlsFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float als = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->als_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_AlsFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_AlsFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_AlsFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.AlsFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.AlsFea)
    MergeFrom(*source);
  }
}

void UserData_AlsFea::MergeFrom(const UserData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  als_.MergeFrom(from.als_);
}

void UserData_AlsFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_AlsFea::CopyFrom(const UserData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_AlsFea::IsInitialized() const {
  return true;
}

void UserData_AlsFea::Swap(UserData_AlsFea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_AlsFea::InternalSwap(UserData_AlsFea* other) {
  using std::swap;
  als_.InternalSwap(&other->als_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_AlsFea::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_AlsFea

// repeated float als = 1;
int UserData_AlsFea::als_size() const {
  return als_.size();
}
void UserData_AlsFea::clear_als() {
  als_.Clear();
}
float UserData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsFea.als)
  return als_.Get(index);
}
void UserData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsFea.als)
}
void UserData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsFea.als)
}
const ::google::protobuf::RepeatedField< float >&
UserData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsFea.als)
  return als_;
}
::google::protobuf::RepeatedField< float >*
UserData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsFea.als)
  return &als_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_AlsItemsBiases::kFeaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_AlsItemsBiases::UserData_AlsItemsBiases()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.AlsItemsBiases)
}
UserData_AlsItemsBiases::UserData_AlsItemsBiases(const UserData_AlsItemsBiases& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fea_(from.fea_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.AlsItemsBiases)
}

void UserData_AlsItemsBiases::SharedCtor() {
  _cached_size_ = 0;
}

UserData_AlsItemsBiases::~UserData_AlsItemsBiases() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.AlsItemsBiases)
  SharedDtor();
}

void UserData_AlsItemsBiases::SharedDtor() {
}

void UserData_AlsItemsBiases::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_AlsItemsBiases::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_AlsItemsBiases& UserData_AlsItemsBiases::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_AlsItemsBiases* UserData_AlsItemsBiases::New(::google::protobuf::Arena* arena) const {
  UserData_AlsItemsBiases* n = new UserData_AlsItemsBiases;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_AlsItemsBiases::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fea_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_AlsItemsBiases::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.AlsItemsBiases)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float fea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_fea())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fea())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.AlsItemsBiases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.AlsItemsBiases)
  return false;
#undef DO_
}

void UserData_AlsItemsBiases::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fea = 1;
  for (int i = 0, n = this->fea_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->fea(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.AlsItemsBiases)
}

::google::protobuf::uint8* UserData_AlsItemsBiases::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fea = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->fea_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.AlsItemsBiases)
  return target;
}

size_t UserData_AlsItemsBiases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.AlsItemsBiases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float fea = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fea_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fea_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_AlsItemsBiases::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.AlsItemsBiases)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_AlsItemsBiases* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_AlsItemsBiases>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.AlsItemsBiases)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.AlsItemsBiases)
    MergeFrom(*source);
  }
}

void UserData_AlsItemsBiases::MergeFrom(const UserData_AlsItemsBiases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.AlsItemsBiases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fea_.MergeFrom(from.fea_);
}

void UserData_AlsItemsBiases::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.AlsItemsBiases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_AlsItemsBiases::CopyFrom(const UserData_AlsItemsBiases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.AlsItemsBiases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_AlsItemsBiases::IsInitialized() const {
  return true;
}

void UserData_AlsItemsBiases::Swap(UserData_AlsItemsBiases* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_AlsItemsBiases::InternalSwap(UserData_AlsItemsBiases* other) {
  using std::swap;
  fea_.InternalSwap(&other->fea_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_AlsItemsBiases::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_AlsItemsBiases

// repeated float fea = 1;
int UserData_AlsItemsBiases::fea_size() const {
  return fea_.size();
}
void UserData_AlsItemsBiases::clear_fea() {
  fea_.Clear();
}
float UserData_AlsItemsBiases::fea(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_.Get(index);
}
void UserData_AlsItemsBiases::set_fea(int index, float value) {
  fea_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsItemsBiases.fea)
}
void UserData_AlsItemsBiases::add_fea(float value) {
  fea_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsItemsBiases.fea)
}
const ::google::protobuf::RepeatedField< float >&
UserData_AlsItemsBiases::fea() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_;
}
::google::protobuf::RepeatedField< float >*
UserData_AlsItemsBiases::mutable_fea() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return &fea_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_NewsSources::kWeightFieldNumber;
const int UserData_NewsSources::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_NewsSources::UserData_NewsSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.NewsSources)
}
UserData_NewsSources::UserData_NewsSources(const UserData_NewsSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      weight_(from.weight_),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.NewsSources)
}

void UserData_NewsSources::SharedCtor() {
  _cached_size_ = 0;
}

UserData_NewsSources::~UserData_NewsSources() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.NewsSources)
  SharedDtor();
}

void UserData_NewsSources::SharedDtor() {
}

void UserData_NewsSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_NewsSources::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_NewsSources& UserData_NewsSources::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_NewsSources* UserData_NewsSources::New(::google::protobuf::Arena* arena) const {
  UserData_NewsSources* n = new UserData_NewsSources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_NewsSources::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_NewsSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.NewsSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.NewsSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.NewsSources)
  return false;
#undef DO_
}

void UserData_NewsSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float weight = 1;
  for (int i = 0, n = this->weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->weight(i), output);
  }

  // repeated int64 id = 2;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.NewsSources)
}

::google::protobuf::uint8* UserData_NewsSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float weight = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->weight_, target);

  // repeated int64 id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.NewsSources)
  return target;
}

size_t UserData_NewsSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.NewsSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float weight = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weight_size());
    total_size += data_size;
  }

  // repeated int64 id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_NewsSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.NewsSources)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_NewsSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_NewsSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.NewsSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.NewsSources)
    MergeFrom(*source);
  }
}

void UserData_NewsSources::MergeFrom(const UserData_NewsSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.NewsSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  id_.MergeFrom(from.id_);
}

void UserData_NewsSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.NewsSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_NewsSources::CopyFrom(const UserData_NewsSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.NewsSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_NewsSources::IsInitialized() const {
  return true;
}

void UserData_NewsSources::Swap(UserData_NewsSources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_NewsSources::InternalSwap(UserData_NewsSources* other) {
  using std::swap;
  weight_.InternalSwap(&other->weight_);
  id_.InternalSwap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_NewsSources::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_NewsSources

// repeated float weight = 1;
int UserData_NewsSources::weight_size() const {
  return weight_.size();
}
void UserData_NewsSources::clear_weight() {
  weight_.Clear();
}
float UserData_NewsSources::weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.weight)
  return weight_.Get(index);
}
void UserData_NewsSources::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.weight)
}
void UserData_NewsSources::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.weight)
}
const ::google::protobuf::RepeatedField< float >&
UserData_NewsSources::weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.weight)
  return weight_;
}
::google::protobuf::RepeatedField< float >*
UserData_NewsSources::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.weight)
  return &weight_;
}

// repeated int64 id = 2;
int UserData_NewsSources::id_size() const {
  return id_.size();
}
void UserData_NewsSources::clear_id() {
  id_.Clear();
}
::google::protobuf::int64 UserData_NewsSources::id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.id)
  return id_.Get(index);
}
void UserData_NewsSources::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.id)
}
void UserData_NewsSources::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_NewsSources::id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.id)
  return id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_NewsSources::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.id)
  return &id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_Stats_SourceStats::kSourceIdFieldNumber;
const int UserData_Stats_SourceStats::kCategoryIdFieldNumber;
const int UserData_Stats_SourceStats::kViewsFieldNumber;
const int UserData_Stats_SourceStats::kOpensFieldNumber;
const int UserData_Stats_SourceStats::kLikesFieldNumber;
const int UserData_Stats_SourceStats::kDislikesFieldNumber;
const int UserData_Stats_SourceStats::kSharesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_Stats_SourceStats::UserData_Stats_SourceStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.Stats.SourceStats)
}
UserData_Stats_SourceStats::UserData_Stats_SourceStats(const UserData_Stats_SourceStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shares_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.Stats.SourceStats)
}

void UserData_Stats_SourceStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shares_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
}

UserData_Stats_SourceStats::~UserData_Stats_SourceStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.Stats.SourceStats)
  SharedDtor();
}

void UserData_Stats_SourceStats::SharedDtor() {
}

void UserData_Stats_SourceStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_Stats_SourceStats::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_Stats_SourceStats& UserData_Stats_SourceStats::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_Stats_SourceStats* UserData_Stats_SourceStats::New(::google::protobuf::Arena* arena) const {
  UserData_Stats_SourceStats* n = new UserData_Stats_SourceStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_Stats_SourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shares_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_Stats_SourceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.Stats.SourceStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 opens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_opens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dislikes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shares = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.Stats.SourceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.Stats.SourceStats)
  return false;
#undef DO_
}

void UserData_Stats_SourceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int64 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->category_id(), output);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->views(), output);
  }

  // optional int32 opens = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opens(), output);
  }

  // optional int32 likes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->likes(), output);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dislikes(), output);
  }

  // optional int32 shares = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->shares(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.Stats.SourceStats)
}

::google::protobuf::uint8* UserData_Stats_SourceStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int64 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->category_id(), target);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->views(), target);
  }

  // optional int32 opens = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opens(), target);
  }

  // optional int32 likes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->likes(), target);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dislikes(), target);
  }

  // optional int32 shares = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->shares(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.Stats.SourceStats)
  return target;
}

size_t UserData_Stats_SourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.Stats.SourceStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional int64 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->category_id());
    }

    // optional int32 views = 3;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->views());
    }

    // optional int32 opens = 4;
    if (has_opens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opens());
    }

    // optional int32 likes = 5;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

    // optional int32 dislikes = 6;
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dislikes());
    }

    // optional int32 shares = 7;
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shares());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_Stats_SourceStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.Stats.SourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_Stats_SourceStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_Stats_SourceStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.Stats.SourceStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.Stats.SourceStats)
    MergeFrom(*source);
  }
}

void UserData_Stats_SourceStats::MergeFrom(const UserData_Stats_SourceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.Stats.SourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000008u) {
      opens_ = from.opens_;
    }
    if (cached_has_bits & 0x00000010u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000020u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00000040u) {
      shares_ = from.shares_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_Stats_SourceStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.Stats.SourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_Stats_SourceStats::CopyFrom(const UserData_Stats_SourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.Stats.SourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_Stats_SourceStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_Stats_SourceStats::Swap(UserData_Stats_SourceStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_Stats_SourceStats::InternalSwap(UserData_Stats_SourceStats* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(category_id_, other->category_id_);
  swap(views_, other->views_);
  swap(opens_, other->opens_);
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(shares_, other->shares_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_Stats_SourceStats::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_Stats_SourceStats

// required int64 source_id = 1;
bool UserData_Stats_SourceStats::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_Stats_SourceStats::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_Stats_SourceStats::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_Stats_SourceStats::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_Stats_SourceStats::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.source_id)
  return source_id_;
}
void UserData_Stats_SourceStats::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.source_id)
}

// optional int64 category_id = 2;
bool UserData_Stats_SourceStats::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_Stats_SourceStats::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_Stats_SourceStats::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_Stats_SourceStats::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
::google::protobuf::int64 UserData_Stats_SourceStats::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.category_id)
  return category_id_;
}
void UserData_Stats_SourceStats::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.category_id)
}

// optional int32 views = 3;
bool UserData_Stats_SourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_Stats_SourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_Stats_SourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_Stats_SourceStats::clear_views() {
  views_ = 0;
  clear_has_views();
}
::google::protobuf::int32 UserData_Stats_SourceStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.views)
  return views_;
}
void UserData_Stats_SourceStats::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.views)
}

// optional int32 opens = 4;
bool UserData_Stats_SourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_Stats_SourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_Stats_SourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_Stats_SourceStats::clear_opens() {
  opens_ = 0;
  clear_has_opens();
}
::google::protobuf::int32 UserData_Stats_SourceStats::opens() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.opens)
  return opens_;
}
void UserData_Stats_SourceStats::set_opens(::google::protobuf::int32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.opens)
}

// optional int32 likes = 5;
bool UserData_Stats_SourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_Stats_SourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_Stats_SourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_Stats_SourceStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
::google::protobuf::int32 UserData_Stats_SourceStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.likes)
  return likes_;
}
void UserData_Stats_SourceStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.likes)
}

// optional int32 dislikes = 6;
bool UserData_Stats_SourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_Stats_SourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_Stats_SourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_Stats_SourceStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
::google::protobuf::int32 UserData_Stats_SourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.dislikes)
  return dislikes_;
}
void UserData_Stats_SourceStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.dislikes)
}

// optional int32 shares = 7;
bool UserData_Stats_SourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData_Stats_SourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData_Stats_SourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData_Stats_SourceStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
::google::protobuf::int32 UserData_Stats_SourceStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.shares)
  return shares_;
}
void UserData_Stats_SourceStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.shares)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_Stats::kSourcesStatsFieldNumber;
const int UserData_Stats::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_Stats::UserData_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.Stats)
}
UserData_Stats::UserData_Stats(const UserData_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_stats_(from.sources_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.Stats)
}

void UserData_Stats::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_Stats::~UserData_Stats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.Stats)
  SharedDtor();
}

void UserData_Stats::SharedDtor() {
}

void UserData_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_Stats::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_Stats& UserData_Stats::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_Stats* UserData_Stats::New(::google::protobuf::Arena* arena) const {
  UserData_Stats* n = new UserData_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_stats_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.Stats)
  return false;
#undef DO_
}

void UserData_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources_stats(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.Stats)
}

::google::protobuf::uint8* UserData_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sources_stats(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.Stats)
  return target;
}

size_t UserData_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources_stats(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.Stats)
    MergeFrom(*source);
  }
}

void UserData_Stats::MergeFrom(const UserData_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_stats_.MergeFrom(from.sources_stats_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_Stats::CopyFrom(const UserData_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_Stats::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sources_stats())) return false;
  return true;
}

void UserData_Stats::Swap(UserData_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_Stats::InternalSwap(UserData_Stats* other) {
  using std::swap;
  sources_stats_.InternalSwap(&other->sources_stats_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_Stats::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_Stats

// repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
int UserData_Stats::sources_stats_size() const {
  return sources_stats_.size();
}
void UserData_Stats::clear_sources_stats() {
  sources_stats_.Clear();
}
const ::cosmo::pb::UserData_Stats_SourceStats& UserData_Stats::sources_stats(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Get(index);
}
::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::mutable_sources_stats(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Mutable(index);
}
::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::add_sources_stats() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
UserData_Stats::mutable_sources_stats() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.Stats.sources_stats)
  return &sources_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
UserData_Stats::sources_stats() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_;
}

// optional uint32 version = 2;
bool UserData_Stats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_Stats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_Stats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_Stats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_Stats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.version)
  return version_;
}
void UserData_Stats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SourcesWebStats_SourceVisit::kSourceIdFieldNumber;
const int UserData_SourcesWebStats_SourceVisit::kVisitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SourcesWebStats_SourceVisit::UserData_SourcesWebStats_SourceVisit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}
UserData_SourcesWebStats_SourceVisit::UserData_SourcesWebStats_SourceVisit(const UserData_SourcesWebStats_SourceVisit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visits_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}

void UserData_SourcesWebStats_SourceVisit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visits_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
}

UserData_SourcesWebStats_SourceVisit::~UserData_SourcesWebStats_SourceVisit() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  SharedDtor();
}

void UserData_SourcesWebStats_SourceVisit::SharedDtor() {
}

void UserData_SourcesWebStats_SourceVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SourcesWebStats_SourceVisit::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats_SourceVisit::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats_SourceVisit::New(::google::protobuf::Arena* arena) const {
  UserData_SourcesWebStats_SourceVisit* n = new UserData_SourcesWebStats_SourceVisit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_SourcesWebStats_SourceVisit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visits_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SourcesWebStats_SourceVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 visits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return false;
#undef DO_
}

void UserData_SourcesWebStats_SourceVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int32 visits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}

::google::protobuf::uint8* UserData_SourcesWebStats_SourceVisit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int32 visits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->visits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return target;
}

size_t UserData_SourcesWebStats_SourceVisit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  size_t total_size = 0;

  if (has_source_id()) {
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_visits()) {
    // required int32 visits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visits());
  }

  return total_size;
}
size_t UserData_SourcesWebStats_SourceVisit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int32 visits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SourcesWebStats_SourceVisit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SourcesWebStats_SourceVisit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SourcesWebStats_SourceVisit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
    MergeFrom(*source);
  }
}

void UserData_SourcesWebStats_SourceVisit::MergeFrom(const UserData_SourcesWebStats_SourceVisit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      visits_ = from.visits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SourcesWebStats_SourceVisit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SourcesWebStats_SourceVisit::CopyFrom(const UserData_SourcesWebStats_SourceVisit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SourcesWebStats_SourceVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_SourcesWebStats_SourceVisit::Swap(UserData_SourcesWebStats_SourceVisit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_SourcesWebStats_SourceVisit::InternalSwap(UserData_SourcesWebStats_SourceVisit* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(visits_, other->visits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SourcesWebStats_SourceVisit::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SourcesWebStats_SourceVisit

// required int64 source_id = 1;
bool UserData_SourcesWebStats_SourceVisit::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SourcesWebStats_SourceVisit::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SourcesWebStats_SourceVisit::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SourcesWebStats_SourceVisit::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_SourcesWebStats_SourceVisit::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
  return source_id_;
}
void UserData_SourcesWebStats_SourceVisit::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
}

// required int32 visits = 2;
bool UserData_SourcesWebStats_SourceVisit::has_visits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SourcesWebStats_SourceVisit::set_has_visits() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SourcesWebStats_SourceVisit::clear_has_visits() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SourcesWebStats_SourceVisit::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
::google::protobuf::int32 UserData_SourcesWebStats_SourceVisit::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
  return visits_;
}
void UserData_SourcesWebStats_SourceVisit::set_visits(::google::protobuf::int32 value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SourcesWebStats::kSourceVisitsFieldNumber;
const int UserData_SourcesWebStats::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SourcesWebStats::UserData_SourcesWebStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SourcesWebStats)
}
UserData_SourcesWebStats::UserData_SourcesWebStats(const UserData_SourcesWebStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourcevisits_(from.sourcevisits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SourcesWebStats)
}

void UserData_SourcesWebStats::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_SourcesWebStats::~UserData_SourcesWebStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SourcesWebStats)
  SharedDtor();
}

void UserData_SourcesWebStats::SharedDtor() {
}

void UserData_SourcesWebStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SourcesWebStats::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SourcesWebStats& UserData_SourcesWebStats::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SourcesWebStats* UserData_SourcesWebStats::New(::google::protobuf::Arena* arena) const {
  UserData_SourcesWebStats* n = new UserData_SourcesWebStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_SourcesWebStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcevisits_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SourcesWebStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SourcesWebStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sourcevisits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SourcesWebStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SourcesWebStats)
  return false;
#undef DO_
}

void UserData_SourcesWebStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourcevisits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcevisits(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SourcesWebStats)
}

::google::protobuf::uint8* UserData_SourcesWebStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourcevisits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sourcevisits(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SourcesWebStats)
  return target;
}

size_t UserData_SourcesWebStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SourcesWebStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sourcevisits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcevisits(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SourcesWebStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SourcesWebStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SourcesWebStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SourcesWebStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SourcesWebStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SourcesWebStats)
    MergeFrom(*source);
  }
}

void UserData_SourcesWebStats::MergeFrom(const UserData_SourcesWebStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SourcesWebStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourcevisits_.MergeFrom(from.sourcevisits_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_SourcesWebStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SourcesWebStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SourcesWebStats::CopyFrom(const UserData_SourcesWebStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SourcesWebStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SourcesWebStats::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sourcevisits())) return false;
  return true;
}

void UserData_SourcesWebStats::Swap(UserData_SourcesWebStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_SourcesWebStats::InternalSwap(UserData_SourcesWebStats* other) {
  using std::swap;
  sourcevisits_.InternalSwap(&other->sourcevisits_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SourcesWebStats::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SourcesWebStats

// repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
int UserData_SourcesWebStats::sourcevisits_size() const {
  return sourcevisits_.size();
}
void UserData_SourcesWebStats::clear_sourcevisits() {
  sourcevisits_.Clear();
}
const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats::sourcevisits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Get(index);
}
::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::mutable_sourcevisits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Mutable(index);
}
::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::add_sourcevisits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
UserData_SourcesWebStats::mutable_sourcevisits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return &sourcevisits_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
UserData_SourcesWebStats::sourcevisits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_;
}

// optional uint32 version = 2;
bool UserData_SourcesWebStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SourcesWebStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SourcesWebStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SourcesWebStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_SourcesWebStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.version)
  return version_;
}
void UserData_SourcesWebStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserLinks::kVidFieldNumber;
const int UserData_UserLinks::kMailFieldNumber;
const int UserData_UserLinks::kOkFieldNumber;
const int UserData_UserLinks::kVkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserLinks::UserData_UserLinks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserLinks)
}
UserData_UserLinks::UserData_UserLinks(const UserData_UserLinks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mail()) {
    mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_);
  }
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ok()) {
    ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
  }
  vk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vk()) {
    vk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserLinks)
}

void UserData_UserLinks::SharedCtor() {
  _cached_size_ = 0;
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserData_UserLinks::~UserData_UserLinks() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserLinks)
  SharedDtor();
}

void UserData_UserLinks::SharedDtor() {
  vid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserData_UserLinks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserLinks::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserLinks& UserData_UserLinks::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserLinks* UserData_UserLinks::New(::google::protobuf::Arena* arena) const {
  UserData_UserLinks* n = new UserData_UserLinks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData_UserLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ok_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ok_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!vk_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vk_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserLinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserLinks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail().data(), static_cast<int>(this->mail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.mail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ok()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ok().data(), static_cast<int>(this->ok().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.ok");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vk().data(), static_cast<int>(this->vk().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.vk");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserLinks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserLinks)
  return false;
#undef DO_
}

void UserData_UserLinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vid(), output);
  }

  // optional string mail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), static_cast<int>(this->mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mail(), output);
  }

  // optional string ok = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), static_cast<int>(this->ok().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.ok");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ok(), output);
  }

  // optional string vk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk().data(), static_cast<int>(this->vk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserLinks)
}

::google::protobuf::uint8* UserData_UserLinks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }

  // optional string mail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), static_cast<int>(this->mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mail(), target);
  }

  // optional string ok = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), static_cast<int>(this->ok().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.ok");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ok(), target);
  }

  // optional string vk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk().data(), static_cast<int>(this->vk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserLinks)
  return target;
}

size_t UserData_UserLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserLinks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }

    // optional string mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail());
    }

    // optional string ok = 3;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ok());
    }

    // optional string vk = 4;
    if (has_vk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vk());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserLinks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserLinks)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserLinks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserLinks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserLinks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserLinks)
    MergeFrom(*source);
  }
}

void UserData_UserLinks::MergeFrom(const UserData_UserLinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserLinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vid();
      vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mail();
      mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ok();
      ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vk();
      vk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_);
    }
  }
}

void UserData_UserLinks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserLinks::CopyFrom(const UserData_UserLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserLinks::IsInitialized() const {
  return true;
}

void UserData_UserLinks::Swap(UserData_UserLinks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData_UserLinks::InternalSwap(UserData_UserLinks* other) {
  using std::swap;
  vid_.Swap(&other->vid_);
  mail_.Swap(&other->mail_);
  ok_.Swap(&other->ok_);
  vk_.Swap(&other->vk_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserLinks::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserLinks

// optional string vid = 1;
bool UserData_UserLinks::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserLinks::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserLinks::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserLinks::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
const ::std::string& UserData_UserLinks::vid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vid)
  return vid_.GetNoArena();
}
void UserData_UserLinks::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vid)
}
#if LANG_CXX11
void UserData_UserLinks::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vid)
}
#endif
void UserData_UserLinks::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vid)
}
void UserData_UserLinks::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vid)
}
::std::string* UserData_UserLinks::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData_UserLinks::release_vid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData_UserLinks::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}

// optional string mail = 2;
bool UserData_UserLinks::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserLinks::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserLinks::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserLinks::clear_mail() {
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mail();
}
const ::std::string& UserData_UserLinks::mail() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.mail)
  return mail_.GetNoArena();
}
void UserData_UserLinks::set_mail(const ::std::string& value) {
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.mail)
}
#if LANG_CXX11
void UserData_UserLinks::set_mail(::std::string&& value) {
  set_has_mail();
  mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.mail)
}
#endif
void UserData_UserLinks::set_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.mail)
}
void UserData_UserLinks::set_mail(const char* value, size_t size) {
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.mail)
}
::std::string* UserData_UserLinks::mutable_mail() {
  set_has_mail();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.mail)
  return mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData_UserLinks::release_mail() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.mail)
  clear_has_mail();
  return mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData_UserLinks::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}

// optional string ok = 3;
bool UserData_UserLinks::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserLinks::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserLinks::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserLinks::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
const ::std::string& UserData_UserLinks::ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.ok)
  return ok_.GetNoArena();
}
void UserData_UserLinks::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.ok)
}
#if LANG_CXX11
void UserData_UserLinks::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.ok)
}
#endif
void UserData_UserLinks::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.ok)
}
void UserData_UserLinks::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.ok)
}
::std::string* UserData_UserLinks::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.ok)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData_UserLinks::release_ok() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.ok)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData_UserLinks::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}

// optional string vk = 4;
bool UserData_UserLinks::has_vk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserLinks::set_has_vk() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserLinks::clear_has_vk() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserLinks::clear_vk() {
  vk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vk();
}
const ::std::string& UserData_UserLinks::vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vk)
  return vk_.GetNoArena();
}
void UserData_UserLinks::set_vk(const ::std::string& value) {
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vk)
}
#if LANG_CXX11
void UserData_UserLinks::set_vk(::std::string&& value) {
  set_has_vk();
  vk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vk)
}
#endif
void UserData_UserLinks::set_vk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vk)
}
void UserData_UserLinks::set_vk(const char* value, size_t size) {
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vk)
}
::std::string* UserData_UserLinks::mutable_vk() {
  set_has_vk();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vk)
  return vk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserData_UserLinks::release_vk() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vk)
  clear_has_vk();
  return vk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserData_UserLinks::set_allocated_vk(::std::string* vk) {
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData::kUserIdFieldNumber;
const int UserData::kSocdemFeaFieldNumber;
const int UserData::kAlsFeaFieldNumber;
const int UserData::kOkInfoFieldNumber;
const int UserData::kDetiRecoFieldNumber;
const int UserData::kAlsItemsFeaFieldNumber;
const int UserData::kNewsSourcesFieldNumber;
const int UserData::kStatsFieldNumber;
const int UserData::kOriginalInfoFieldNumber;
const int UserData::kAlsFea2FieldNumber;
const int UserData::kSourcesWebStatsFieldNumber;
const int UserData::kSourcesRecoStatsFieldNumber;
const int UserData::kUserLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData::UserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData)
}
UserData::UserData(const UserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_socdem_fea()) {
    socdem_fea_ = new ::cosmo::pb::UserData_SocDemFea(*from.socdem_fea_);
  } else {
    socdem_fea_ = NULL;
  }
  if (from.has_als_fea()) {
    als_fea_ = new ::cosmo::pb::UserData_AlsFea(*from.als_fea_);
  } else {
    als_fea_ = NULL;
  }
  if (from.has_ok_info()) {
    ok_info_ = new ::cosmo::pb::UserData_OkInfo(*from.ok_info_);
  } else {
    ok_info_ = NULL;
  }
  if (from.has_deti_reco()) {
    deti_reco_ = new ::cosmo::pb::UserData_DetiRecos(*from.deti_reco_);
  } else {
    deti_reco_ = NULL;
  }
  if (from.has_als_items_fea()) {
    als_items_fea_ = new ::cosmo::pb::UserData_AlsItemsBiases(*from.als_items_fea_);
  } else {
    als_items_fea_ = NULL;
  }
  if (from.has_news_sources()) {
    news_sources_ = new ::cosmo::pb::UserData_NewsSources(*from.news_sources_);
  } else {
    news_sources_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::cosmo::pb::UserData_Stats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_original_info()) {
    original_info_ = new ::cosmo::pb::UserData_OriginalInfo(*from.original_info_);
  } else {
    original_info_ = NULL;
  }
  if (from.has_als_fea_2()) {
    als_fea_2_ = new ::cosmo::pb::UserData_AlsFea(*from.als_fea_2_);
  } else {
    als_fea_2_ = NULL;
  }
  if (from.has_sources_web_stats()) {
    sources_web_stats_ = new ::cosmo::pb::UserData_SourcesWebStats(*from.sources_web_stats_);
  } else {
    sources_web_stats_ = NULL;
  }
  if (from.has_sources_reco_stats()) {
    sources_reco_stats_ = new ::cosmo::pb::UserData_Stats(*from.sources_reco_stats_);
  } else {
    sources_reco_stats_ = NULL;
  }
  if (from.has_user_links()) {
    user_links_ = new ::cosmo::pb::UserData_UserLinks(*from.user_links_);
  } else {
    user_links_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData)
}

void UserData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&socdem_fea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&socdem_fea_)) + sizeof(user_id_));
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  if (this != internal_default_instance()) delete socdem_fea_;
  if (this != internal_default_instance()) delete als_fea_;
  if (this != internal_default_instance()) delete ok_info_;
  if (this != internal_default_instance()) delete deti_reco_;
  if (this != internal_default_instance()) delete als_items_fea_;
  if (this != internal_default_instance()) delete news_sources_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete original_info_;
  if (this != internal_default_instance()) delete als_fea_2_;
  if (this != internal_default_instance()) delete sources_web_stats_;
  if (this != internal_default_instance()) delete sources_reco_stats_;
  if (this != internal_default_instance()) delete user_links_;
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData& UserData::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData* UserData::New(::google::protobuf::Arena* arena) const {
  UserData* n = new UserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(socdem_fea_ != NULL);
      socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(als_fea_ != NULL);
      als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ok_info_ != NULL);
      ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deti_reco_ != NULL);
      deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(als_items_fea_ != NULL);
      als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(news_sources_ != NULL);
      news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->::cosmo::pb::UserData_Stats::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(original_info_ != NULL);
      original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(als_fea_2_ != NULL);
      als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sources_web_stats_ != NULL);
      sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sources_reco_stats_ != NULL);
      sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(user_links_ != NULL);
      user_links_->::cosmo::pb::UserData_UserLinks::Clear();
    }
  }
  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socdem_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deti_reco()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_items_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.Stats stats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sources_web_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sources_reco_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserLinks user_links = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData)
  return false;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->socdem_fea_, output);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->als_fea_, output);
  }

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ok_info_, output);
  }

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deti_reco_, output);
  }

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->als_items_fea_, output);
  }

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->news_sources_, output);
  }

  // optional .cosmo.pb.UserData.Stats stats = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stats_, output);
  }

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->original_info_, output);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->als_fea_2_, output);
  }

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->sources_web_stats_, output);
  }

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sources_reco_stats_, output);
  }

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->user_links_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData)
}

::google::protobuf::uint8* UserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->socdem_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->als_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ok_info_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->deti_reco_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->als_items_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->news_sources_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.Stats stats = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->original_info_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->als_fea_2_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->sources_web_stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->sources_reco_stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->user_links_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
    if (has_socdem_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socdem_fea_);
    }

    // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
    if (has_als_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_);
    }

    // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
    if (has_ok_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_info_);
    }

    // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
    if (has_deti_reco()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deti_reco_);
    }

    // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
    if (has_als_items_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_items_fea_);
    }

    // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
    if (has_news_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_sources_);
    }

    // optional .cosmo.pb.UserData.Stats stats = 8;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

    // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
    if (has_original_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->original_info_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
    if (has_als_fea_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_2_);
    }

    // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
    if (has_sources_web_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sources_web_stats_);
    }

    // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
    if (has_sources_reco_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sources_reco_stats_);
    }

    // optional .cosmo.pb.UserData.UserLinks user_links = 13;
    if (has_user_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_links_);
    }

    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData)
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_socdem_fea()->::cosmo::pb::UserData_SocDemFea::MergeFrom(from.socdem_fea());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_als_fea()->::cosmo::pb::UserData_AlsFea::MergeFrom(from.als_fea());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ok_info()->::cosmo::pb::UserData_OkInfo::MergeFrom(from.ok_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_deti_reco()->::cosmo::pb::UserData_DetiRecos::MergeFrom(from.deti_reco());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_als_items_fea()->::cosmo::pb::UserData_AlsItemsBiases::MergeFrom(from.als_items_fea());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_news_sources()->::cosmo::pb::UserData_NewsSources::MergeFrom(from.news_sources());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_stats()->::cosmo::pb::UserData_Stats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_original_info()->::cosmo::pb::UserData_OriginalInfo::MergeFrom(from.original_info());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_als_fea_2()->::cosmo::pb::UserData_AlsFea::MergeFrom(from.als_fea_2());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sources_web_stats()->::cosmo::pb::UserData_SourcesWebStats::MergeFrom(from.sources_web_stats());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_sources_reco_stats()->::cosmo::pb::UserData_Stats::MergeFrom(from.sources_reco_stats());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_user_links()->::cosmo::pb::UserData_UserLinks::MergeFrom(from.user_links());
    }
    if (cached_has_bits & 0x00001000u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if (has_ok_info()) {
    if (!this->ok_info_->IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats_->IsInitialized()) return false;
  }
  if (has_sources_web_stats()) {
    if (!this->sources_web_stats_->IsInitialized()) return false;
  }
  if (has_sources_reco_stats()) {
    if (!this->sources_reco_stats_->IsInitialized()) return false;
  }
  return true;
}

void UserData::Swap(UserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData::InternalSwap(UserData* other) {
  using std::swap;
  swap(socdem_fea_, other->socdem_fea_);
  swap(als_fea_, other->als_fea_);
  swap(ok_info_, other->ok_info_);
  swap(deti_reco_, other->deti_reco_);
  swap(als_items_fea_, other->als_items_fea_);
  swap(news_sources_, other->news_sources_);
  swap(stats_, other->stats_);
  swap(original_info_, other->original_info_);
  swap(als_fea_2_, other->als_fea_2_);
  swap(sources_web_stats_, other->sources_web_stats_);
  swap(sources_reco_stats_, other->sources_reco_stats_);
  swap(user_links_, other->user_links_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData

// optional int64 user_id = 1;
bool UserData::has_user_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserData::set_has_user_id() {
  _has_bits_[0] |= 0x00001000u;
}
void UserData::clear_has_user_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserData::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserData::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_id)
  return user_id_;
}
void UserData::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.user_id)
}

// optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
bool UserData::has_socdem_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData::set_has_socdem_fea() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData::clear_has_socdem_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData::clear_socdem_fea() {
  if (socdem_fea_ != NULL) socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
  clear_has_socdem_fea();
}
const ::cosmo::pb::UserData_SocDemFea& UserData::socdem_fea() const {
  const ::cosmo::pb::UserData_SocDemFea* p = socdem_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.socdem_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SocDemFea*>(
      &::cosmo::pb::_UserData_SocDemFea_default_instance_);
}
::cosmo::pb::UserData_SocDemFea* UserData::mutable_socdem_fea() {
  set_has_socdem_fea();
  if (socdem_fea_ == NULL) {
    socdem_fea_ = new ::cosmo::pb::UserData_SocDemFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.socdem_fea)
  return socdem_fea_;
}
::cosmo::pb::UserData_SocDemFea* UserData::release_socdem_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.socdem_fea)
  clear_has_socdem_fea();
  ::cosmo::pb::UserData_SocDemFea* temp = socdem_fea_;
  socdem_fea_ = NULL;
  return temp;
}
void UserData::set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea) {
  delete socdem_fea_;
  socdem_fea_ = socdem_fea;
  if (socdem_fea) {
    set_has_socdem_fea();
  } else {
    clear_has_socdem_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.socdem_fea)
}

// optional .cosmo.pb.UserData.AlsFea als_fea = 3;
bool UserData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea();
}
const ::cosmo::pb::UserData_AlsFea& UserData::als_fea() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    als_fea_ = new ::cosmo::pb::UserData_AlsFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea)
  return als_fea_;
}
::cosmo::pb::UserData_AlsFea* UserData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea)
  clear_has_als_fea();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_;
  als_fea_ = NULL;
  return temp;
}
void UserData::set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea) {
  delete als_fea_;
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea)
}

// optional .cosmo.pb.UserData.OkInfo ok_info = 4;
bool UserData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
  clear_has_ok_info();
}
const ::cosmo::pb::UserData_OkInfo& UserData::ok_info() const {
  const ::cosmo::pb::UserData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OkInfo*>(
      &::cosmo::pb::_UserData_OkInfo_default_instance_);
}
::cosmo::pb::UserData_OkInfo* UserData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    ok_info_ = new ::cosmo::pb::UserData_OkInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.ok_info)
  return ok_info_;
}
::cosmo::pb::UserData_OkInfo* UserData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.ok_info)
  clear_has_ok_info();
  ::cosmo::pb::UserData_OkInfo* temp = ok_info_;
  ok_info_ = NULL;
  return temp;
}
void UserData::set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info) {
  delete ok_info_;
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.ok_info)
}

// optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
bool UserData::has_deti_reco() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData::set_has_deti_reco() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData::clear_has_deti_reco() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData::clear_deti_reco() {
  if (deti_reco_ != NULL) deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
  clear_has_deti_reco();
}
const ::cosmo::pb::UserData_DetiRecos& UserData::deti_reco() const {
  const ::cosmo::pb::UserData_DetiRecos* p = deti_reco_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.deti_reco)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_DetiRecos*>(
      &::cosmo::pb::_UserData_DetiRecos_default_instance_);
}
::cosmo::pb::UserData_DetiRecos* UserData::mutable_deti_reco() {
  set_has_deti_reco();
  if (deti_reco_ == NULL) {
    deti_reco_ = new ::cosmo::pb::UserData_DetiRecos;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.deti_reco)
  return deti_reco_;
}
::cosmo::pb::UserData_DetiRecos* UserData::release_deti_reco() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.deti_reco)
  clear_has_deti_reco();
  ::cosmo::pb::UserData_DetiRecos* temp = deti_reco_;
  deti_reco_ = NULL;
  return temp;
}
void UserData::set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco) {
  delete deti_reco_;
  deti_reco_ = deti_reco;
  if (deti_reco) {
    set_has_deti_reco();
  } else {
    clear_has_deti_reco();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.deti_reco)
}

// optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
bool UserData::has_als_items_fea() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData::set_has_als_items_fea() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData::clear_has_als_items_fea() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData::clear_als_items_fea() {
  if (als_items_fea_ != NULL) als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
  clear_has_als_items_fea();
}
const ::cosmo::pb::UserData_AlsItemsBiases& UserData::als_items_fea() const {
  const ::cosmo::pb::UserData_AlsItemsBiases* p = als_items_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_items_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsItemsBiases*>(
      &::cosmo::pb::_UserData_AlsItemsBiases_default_instance_);
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::mutable_als_items_fea() {
  set_has_als_items_fea();
  if (als_items_fea_ == NULL) {
    als_items_fea_ = new ::cosmo::pb::UserData_AlsItemsBiases;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_items_fea)
  return als_items_fea_;
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::release_als_items_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_items_fea)
  clear_has_als_items_fea();
  ::cosmo::pb::UserData_AlsItemsBiases* temp = als_items_fea_;
  als_items_fea_ = NULL;
  return temp;
}
void UserData::set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea) {
  delete als_items_fea_;
  als_items_fea_ = als_items_fea;
  if (als_items_fea) {
    set_has_als_items_fea();
  } else {
    clear_has_als_items_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_items_fea)
}

// optional .cosmo.pb.UserData.NewsSources news_sources = 7;
bool UserData::has_news_sources() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData::set_has_news_sources() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData::clear_has_news_sources() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData::clear_news_sources() {
  if (news_sources_ != NULL) news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
  clear_has_news_sources();
}
const ::cosmo::pb::UserData_NewsSources& UserData::news_sources() const {
  const ::cosmo::pb::UserData_NewsSources* p = news_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.news_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_NewsSources*>(
      &::cosmo::pb::_UserData_NewsSources_default_instance_);
}
::cosmo::pb::UserData_NewsSources* UserData::mutable_news_sources() {
  set_has_news_sources();
  if (news_sources_ == NULL) {
    news_sources_ = new ::cosmo::pb::UserData_NewsSources;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.news_sources)
  return news_sources_;
}
::cosmo::pb::UserData_NewsSources* UserData::release_news_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.news_sources)
  clear_has_news_sources();
  ::cosmo::pb::UserData_NewsSources* temp = news_sources_;
  news_sources_ = NULL;
  return temp;
}
void UserData::set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources) {
  delete news_sources_;
  news_sources_ = news_sources;
  if (news_sources) {
    set_has_news_sources();
  } else {
    clear_has_news_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.news_sources)
}

// optional .cosmo.pb.UserData.Stats stats = 8;
bool UserData::has_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData::set_has_stats() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData::clear_stats() {
  if (stats_ != NULL) stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_stats();
}
const ::cosmo::pb::UserData_Stats& UserData::stats() const {
  const ::cosmo::pb::UserData_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
::cosmo::pb::UserData_Stats* UserData::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::cosmo::pb::UserData_Stats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.stats)
  return stats_;
}
::cosmo::pb::UserData_Stats* UserData::release_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.stats)
  clear_has_stats();
  ::cosmo::pb::UserData_Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void UserData::set_allocated_stats(::cosmo::pb::UserData_Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.stats)
}

// optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
bool UserData::has_original_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserData::set_has_original_info() {
  _has_bits_[0] |= 0x00000080u;
}
void UserData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
  clear_has_original_info();
}
const ::cosmo::pb::UserData_OriginalInfo& UserData::original_info() const {
  const ::cosmo::pb::UserData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OriginalInfo*>(
      &::cosmo::pb::_UserData_OriginalInfo_default_instance_);
}
::cosmo::pb::UserData_OriginalInfo* UserData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    original_info_ = new ::cosmo::pb::UserData_OriginalInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.original_info)
  return original_info_;
}
::cosmo::pb::UserData_OriginalInfo* UserData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.original_info)
  clear_has_original_info();
  ::cosmo::pb::UserData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
void UserData::set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info) {
  delete original_info_;
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.original_info)
}

// optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
bool UserData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
void UserData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea_2();
}
const ::cosmo::pb::UserData_AlsFea& UserData::als_fea_2() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    als_fea_2_ = new ::cosmo::pb::UserData_AlsFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea_2)
  return als_fea_2_;
}
::cosmo::pb::UserData_AlsFea* UserData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea_2)
  clear_has_als_fea_2();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_2_;
  als_fea_2_ = NULL;
  return temp;
}
void UserData::set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2) {
  delete als_fea_2_;
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea_2)
}

// optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
bool UserData::has_sources_web_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserData::set_has_sources_web_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void UserData::clear_has_sources_web_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserData::clear_sources_web_stats() {
  if (sources_web_stats_ != NULL) sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
  clear_has_sources_web_stats();
}
const ::cosmo::pb::UserData_SourcesWebStats& UserData::sources_web_stats() const {
  const ::cosmo::pb::UserData_SourcesWebStats* p = sources_web_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_web_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SourcesWebStats*>(
      &::cosmo::pb::_UserData_SourcesWebStats_default_instance_);
}
::cosmo::pb::UserData_SourcesWebStats* UserData::mutable_sources_web_stats() {
  set_has_sources_web_stats();
  if (sources_web_stats_ == NULL) {
    sources_web_stats_ = new ::cosmo::pb::UserData_SourcesWebStats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_web_stats)
  return sources_web_stats_;
}
::cosmo::pb::UserData_SourcesWebStats* UserData::release_sources_web_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_web_stats)
  clear_has_sources_web_stats();
  ::cosmo::pb::UserData_SourcesWebStats* temp = sources_web_stats_;
  sources_web_stats_ = NULL;
  return temp;
}
void UserData::set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats) {
  delete sources_web_stats_;
  sources_web_stats_ = sources_web_stats;
  if (sources_web_stats) {
    set_has_sources_web_stats();
  } else {
    clear_has_sources_web_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_web_stats)
}

// optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
bool UserData::has_sources_reco_stats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserData::set_has_sources_reco_stats() {
  _has_bits_[0] |= 0x00000400u;
}
void UserData::clear_has_sources_reco_stats() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserData::clear_sources_reco_stats() {
  if (sources_reco_stats_ != NULL) sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_sources_reco_stats();
}
const ::cosmo::pb::UserData_Stats& UserData::sources_reco_stats() const {
  const ::cosmo::pb::UserData_Stats* p = sources_reco_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_reco_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
::cosmo::pb::UserData_Stats* UserData::mutable_sources_reco_stats() {
  set_has_sources_reco_stats();
  if (sources_reco_stats_ == NULL) {
    sources_reco_stats_ = new ::cosmo::pb::UserData_Stats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_reco_stats)
  return sources_reco_stats_;
}
::cosmo::pb::UserData_Stats* UserData::release_sources_reco_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_reco_stats)
  clear_has_sources_reco_stats();
  ::cosmo::pb::UserData_Stats* temp = sources_reco_stats_;
  sources_reco_stats_ = NULL;
  return temp;
}
void UserData::set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats) {
  delete sources_reco_stats_;
  sources_reco_stats_ = sources_reco_stats;
  if (sources_reco_stats) {
    set_has_sources_reco_stats();
  } else {
    clear_has_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_reco_stats)
}

// optional .cosmo.pb.UserData.UserLinks user_links = 13;
bool UserData::has_user_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserData::set_has_user_links() {
  _has_bits_[0] |= 0x00000800u;
}
void UserData::clear_has_user_links() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserData::clear_user_links() {
  if (user_links_ != NULL) user_links_->::cosmo::pb::UserData_UserLinks::Clear();
  clear_has_user_links();
}
const ::cosmo::pb::UserData_UserLinks& UserData::user_links() const {
  const ::cosmo::pb::UserData_UserLinks* p = user_links_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_links)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserLinks*>(
      &::cosmo::pb::_UserData_UserLinks_default_instance_);
}
::cosmo::pb::UserData_UserLinks* UserData::mutable_user_links() {
  set_has_user_links();
  if (user_links_ == NULL) {
    user_links_ = new ::cosmo::pb::UserData_UserLinks;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_links)
  return user_links_;
}
::cosmo::pb::UserData_UserLinks* UserData::release_user_links() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_links)
  clear_has_user_links();
  ::cosmo::pb::UserData_UserLinks* temp = user_links_;
  user_links_ = NULL;
  return temp;
}
void UserData::set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links) {
  delete user_links_;
  user_links_ = user_links;
  if (user_links) {
    set_has_user_links();
  } else {
    clear_has_user_links();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_links)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupedUserData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupedUserData::GroupedUserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.GroupedUserData)
}
GroupedUserData::GroupedUserData(const GroupedUserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::cosmo::pb::UserData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.GroupedUserData)
}

void GroupedUserData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
}

GroupedUserData::~GroupedUserData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.GroupedUserData)
  SharedDtor();
}

void GroupedUserData::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void GroupedUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupedUserData::descriptor() {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupedUserData& GroupedUserData::default_instance() {
  protobuf_cosmo_5fuser_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupedUserData* GroupedUserData::New(::google::protobuf::Arena* arena) const {
  GroupedUserData* n = new GroupedUserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupedUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::cosmo::pb::UserData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupedUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.GroupedUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.UserData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.GroupedUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.GroupedUserData)
  return false;
#undef DO_
}

void GroupedUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.GroupedUserData)
}

::google::protobuf::uint8* GroupedUserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.GroupedUserData)
  return target;
}

size_t GroupedUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.GroupedUserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .cosmo.pb.UserData data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupedUserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.GroupedUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupedUserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupedUserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.GroupedUserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.GroupedUserData)
    MergeFrom(*source);
  }
}

void GroupedUserData::MergeFrom(const GroupedUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.GroupedUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::cosmo::pb::UserData::MergeFrom(from.data());
  }
}

void GroupedUserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.GroupedUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupedUserData::CopyFrom(const GroupedUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.GroupedUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupedUserData::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void GroupedUserData::Swap(GroupedUserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupedUserData::InternalSwap(GroupedUserData* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupedUserData::GetMetadata() const {
  protobuf_cosmo_5fuser_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupedUserData

// optional .cosmo.pb.UserData data = 1;
bool GroupedUserData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupedUserData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupedUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupedUserData::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
const ::cosmo::pb::UserData& GroupedUserData::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.GroupedUserData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
::cosmo::pb::UserData* GroupedUserData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::cosmo::pb::UserData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.GroupedUserData.data)
  return data_;
}
::cosmo::pb::UserData* GroupedUserData::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.GroupedUserData.data)
  clear_has_data();
  ::cosmo::pb::UserData* temp = data_;
  data_ = NULL;
  return temp;
}
void GroupedUserData::set_allocated_data(::cosmo::pb::UserData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.GroupedUserData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
