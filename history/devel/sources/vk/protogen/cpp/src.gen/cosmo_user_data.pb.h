// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_user_data.proto

#ifndef PROTOBUF_cosmo_5fuser_5fdata_2eproto__INCLUDED
#define PROTOBUF_cosmo_5fuser_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cosmo {
namespace pb {
class GroupedUserData;
class GroupedUserDataDefaultTypeInternal;
extern GroupedUserDataDefaultTypeInternal _GroupedUserData_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserData_AlsFea;
class UserData_AlsFeaDefaultTypeInternal;
extern UserData_AlsFeaDefaultTypeInternal _UserData_AlsFea_default_instance_;
class UserData_AlsItemsBiases;
class UserData_AlsItemsBiasesDefaultTypeInternal;
extern UserData_AlsItemsBiasesDefaultTypeInternal _UserData_AlsItemsBiases_default_instance_;
class UserData_DetiRecos;
class UserData_DetiRecosDefaultTypeInternal;
extern UserData_DetiRecosDefaultTypeInternal _UserData_DetiRecos_default_instance_;
class UserData_NewsSources;
class UserData_NewsSourcesDefaultTypeInternal;
extern UserData_NewsSourcesDefaultTypeInternal _UserData_NewsSources_default_instance_;
class UserData_OkInfo;
class UserData_OkInfoDefaultTypeInternal;
extern UserData_OkInfoDefaultTypeInternal _UserData_OkInfo_default_instance_;
class UserData_OriginalInfo;
class UserData_OriginalInfoDefaultTypeInternal;
extern UserData_OriginalInfoDefaultTypeInternal _UserData_OriginalInfo_default_instance_;
class UserData_SocDemFea;
class UserData_SocDemFeaDefaultTypeInternal;
extern UserData_SocDemFeaDefaultTypeInternal _UserData_SocDemFea_default_instance_;
class UserData_SourcesWebStats;
class UserData_SourcesWebStatsDefaultTypeInternal;
extern UserData_SourcesWebStatsDefaultTypeInternal _UserData_SourcesWebStats_default_instance_;
class UserData_SourcesWebStats_SourceVisit;
class UserData_SourcesWebStats_SourceVisitDefaultTypeInternal;
extern UserData_SourcesWebStats_SourceVisitDefaultTypeInternal _UserData_SourcesWebStats_SourceVisit_default_instance_;
class UserData_Stats;
class UserData_StatsDefaultTypeInternal;
extern UserData_StatsDefaultTypeInternal _UserData_Stats_default_instance_;
class UserData_Stats_SourceStats;
class UserData_Stats_SourceStatsDefaultTypeInternal;
extern UserData_Stats_SourceStatsDefaultTypeInternal _UserData_Stats_SourceStats_default_instance_;
class UserData_UserLinks;
class UserData_UserLinksDefaultTypeInternal;
extern UserData_UserLinksDefaultTypeInternal _UserData_UserLinks_default_instance_;
}  // namespace pb
}  // namespace cosmo

namespace cosmo {
namespace pb {

namespace protobuf_cosmo_5fuser_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_5fuser_5fdata_2eproto

// ===================================================================

class UserData_OriginalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.OriginalInfo) */ {
 public:
  UserData_OriginalInfo();
  virtual ~UserData_OriginalInfo();

  UserData_OriginalInfo(const UserData_OriginalInfo& from);

  inline UserData_OriginalInfo& operator=(const UserData_OriginalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_OriginalInfo(UserData_OriginalInfo&& from) noexcept
    : UserData_OriginalInfo() {
    *this = ::std::move(from);
  }

  inline UserData_OriginalInfo& operator=(UserData_OriginalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_OriginalInfo& default_instance();

  static inline const UserData_OriginalInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_OriginalInfo*>(
               &_UserData_OriginalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserData_OriginalInfo* other);
  friend void swap(UserData_OriginalInfo& a, UserData_OriginalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_OriginalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_OriginalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_OriginalInfo& from);
  void MergeFrom(const UserData_OriginalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_OriginalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.OriginalInfo)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_OkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.OkInfo) */ {
 public:
  UserData_OkInfo();
  virtual ~UserData_OkInfo();

  UserData_OkInfo(const UserData_OkInfo& from);

  inline UserData_OkInfo& operator=(const UserData_OkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_OkInfo(UserData_OkInfo&& from) noexcept
    : UserData_OkInfo() {
    *this = ::std::move(from);
  }

  inline UserData_OkInfo& operator=(UserData_OkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_OkInfo& default_instance();

  static inline const UserData_OkInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_OkInfo*>(
               &_UserData_OkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserData_OkInfo* other);
  friend void swap(UserData_OkInfo& a, UserData_OkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_OkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_OkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_OkInfo& from);
  void MergeFrom(const UserData_OkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_OkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.OkInfo)
 private:
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 user_id_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SocDemFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SocDemFea) */ {
 public:
  UserData_SocDemFea();
  virtual ~UserData_SocDemFea();

  UserData_SocDemFea(const UserData_SocDemFea& from);

  inline UserData_SocDemFea& operator=(const UserData_SocDemFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SocDemFea(UserData_SocDemFea&& from) noexcept
    : UserData_SocDemFea() {
    *this = ::std::move(from);
  }

  inline UserData_SocDemFea& operator=(UserData_SocDemFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SocDemFea& default_instance();

  static inline const UserData_SocDemFea* internal_default_instance() {
    return reinterpret_cast<const UserData_SocDemFea*>(
               &_UserData_SocDemFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserData_SocDemFea* other);
  friend void swap(UserData_SocDemFea& a, UserData_SocDemFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SocDemFea* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SocDemFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SocDemFea& from);
  void MergeFrom(const UserData_SocDemFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SocDemFea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gender = 1 [default = 0];
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 1;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // optional int32 age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SocDemFea)
 private:
  void set_has_gender();
  void clear_has_gender();
  void set_has_age();
  void clear_has_age();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 age_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_DetiRecos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.DetiRecos) */ {
 public:
  UserData_DetiRecos();
  virtual ~UserData_DetiRecos();

  UserData_DetiRecos(const UserData_DetiRecos& from);

  inline UserData_DetiRecos& operator=(const UserData_DetiRecos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_DetiRecos(UserData_DetiRecos&& from) noexcept
    : UserData_DetiRecos() {
    *this = ::std::move(from);
  }

  inline UserData_DetiRecos& operator=(UserData_DetiRecos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_DetiRecos& default_instance();

  static inline const UserData_DetiRecos* internal_default_instance() {
    return reinterpret_cast<const UserData_DetiRecos*>(
               &_UserData_DetiRecos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserData_DetiRecos* other);
  friend void swap(UserData_DetiRecos& a, UserData_DetiRecos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_DetiRecos* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_DetiRecos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_DetiRecos& from);
  void MergeFrom(const UserData_DetiRecos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_DetiRecos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 slim = 1;
  int slim_size() const;
  void clear_slim();
  static const int kSlimFieldNumber = 1;
  ::google::protobuf::int64 slim(int index) const;
  void set_slim(int index, ::google::protobuf::int64 value);
  void add_slim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      slim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_slim();

  // repeated int64 wrmf = 2;
  int wrmf_size() const;
  void clear_wrmf();
  static const int kWrmfFieldNumber = 2;
  ::google::protobuf::int64 wrmf(int index) const;
  void set_wrmf(int index, ::google::protobuf::int64 value);
  void add_wrmf(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      wrmf() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_wrmf();

  // repeated int64 als_tuned = 3;
  int als_tuned_size() const;
  void clear_als_tuned();
  static const int kAlsTunedFieldNumber = 3;
  ::google::protobuf::int64 als_tuned(int index) const;
  void set_als_tuned(int index, ::google::protobuf::int64 value);
  void add_als_tuned(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_tuned() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_tuned();

  // repeated int64 als_large = 4;
  int als_large_size() const;
  void clear_als_large();
  static const int kAlsLargeFieldNumber = 4;
  ::google::protobuf::int64 als_large(int index) const;
  void set_als_large(int index, ::google::protobuf::int64 value);
  void add_als_large(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_large() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_large();

  // repeated int64 svd = 5;
  int svd_size() const;
  void clear_svd();
  static const int kSvdFieldNumber = 5;
  ::google::protobuf::int64 svd(int index) const;
  void set_svd(int index, ::google::protobuf::int64 value);
  void add_svd(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      svd() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_svd();

  // repeated int64 svd_stupid = 6;
  int svd_stupid_size() const;
  void clear_svd_stupid();
  static const int kSvdStupidFieldNumber = 6;
  ::google::protobuf::int64 svd_stupid(int index) const;
  void set_svd_stupid(int index, ::google::protobuf::int64 value);
  void add_svd_stupid(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      svd_stupid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_svd_stupid();

  // repeated int64 als_by_liker = 7;
  int als_by_liker_size() const;
  void clear_als_by_liker();
  static const int kAlsByLikerFieldNumber = 7;
  ::google::protobuf::int64 als_by_liker(int index) const;
  void set_als_by_liker(int index, ::google::protobuf::int64 value);
  void add_als_by_liker(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_by_liker() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_by_liker();

  // repeated int64 als_by_homer = 8;
  int als_by_homer_size() const;
  void clear_als_by_homer();
  static const int kAlsByHomerFieldNumber = 8;
  ::google::protobuf::int64 als_by_homer(int index) const;
  void set_als_by_homer(int index, ::google::protobuf::int64 value);
  void add_als_by_homer(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_by_homer() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_by_homer();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.DetiRecos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > slim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > wrmf_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_tuned_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_large_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > svd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > svd_stupid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_by_liker_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_by_homer_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_AlsFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.AlsFea) */ {
 public:
  UserData_AlsFea();
  virtual ~UserData_AlsFea();

  UserData_AlsFea(const UserData_AlsFea& from);

  inline UserData_AlsFea& operator=(const UserData_AlsFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_AlsFea(UserData_AlsFea&& from) noexcept
    : UserData_AlsFea() {
    *this = ::std::move(from);
  }

  inline UserData_AlsFea& operator=(UserData_AlsFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_AlsFea& default_instance();

  static inline const UserData_AlsFea* internal_default_instance() {
    return reinterpret_cast<const UserData_AlsFea*>(
               &_UserData_AlsFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UserData_AlsFea* other);
  friend void swap(UserData_AlsFea& a, UserData_AlsFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_AlsFea* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_AlsFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_AlsFea& from);
  void MergeFrom(const UserData_AlsFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_AlsFea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float als = 1;
  int als_size() const;
  void clear_als();
  static const int kAlsFieldNumber = 1;
  float als(int index) const;
  void set_als(int index, float value);
  void add_als(float value);
  const ::google::protobuf::RepeatedField< float >&
      als() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_als();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.AlsFea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > als_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_AlsItemsBiases : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.AlsItemsBiases) */ {
 public:
  UserData_AlsItemsBiases();
  virtual ~UserData_AlsItemsBiases();

  UserData_AlsItemsBiases(const UserData_AlsItemsBiases& from);

  inline UserData_AlsItemsBiases& operator=(const UserData_AlsItemsBiases& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_AlsItemsBiases(UserData_AlsItemsBiases&& from) noexcept
    : UserData_AlsItemsBiases() {
    *this = ::std::move(from);
  }

  inline UserData_AlsItemsBiases& operator=(UserData_AlsItemsBiases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_AlsItemsBiases& default_instance();

  static inline const UserData_AlsItemsBiases* internal_default_instance() {
    return reinterpret_cast<const UserData_AlsItemsBiases*>(
               &_UserData_AlsItemsBiases_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UserData_AlsItemsBiases* other);
  friend void swap(UserData_AlsItemsBiases& a, UserData_AlsItemsBiases& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_AlsItemsBiases* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_AlsItemsBiases* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_AlsItemsBiases& from);
  void MergeFrom(const UserData_AlsItemsBiases& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_AlsItemsBiases* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float fea = 1;
  int fea_size() const;
  void clear_fea();
  static const int kFeaFieldNumber = 1;
  float fea(int index) const;
  void set_fea(int index, float value);
  void add_fea(float value);
  const ::google::protobuf::RepeatedField< float >&
      fea() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fea();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.AlsItemsBiases)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > fea_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_NewsSources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.NewsSources) */ {
 public:
  UserData_NewsSources();
  virtual ~UserData_NewsSources();

  UserData_NewsSources(const UserData_NewsSources& from);

  inline UserData_NewsSources& operator=(const UserData_NewsSources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_NewsSources(UserData_NewsSources&& from) noexcept
    : UserData_NewsSources() {
    *this = ::std::move(from);
  }

  inline UserData_NewsSources& operator=(UserData_NewsSources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_NewsSources& default_instance();

  static inline const UserData_NewsSources* internal_default_instance() {
    return reinterpret_cast<const UserData_NewsSources*>(
               &_UserData_NewsSources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UserData_NewsSources* other);
  friend void swap(UserData_NewsSources& a, UserData_NewsSources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_NewsSources* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_NewsSources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_NewsSources& from);
  void MergeFrom(const UserData_NewsSources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_NewsSources* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float weight = 1;
  int weight_size() const;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // repeated int64 id = 2;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id(int index) const;
  void set_id(int index, ::google::protobuf::int64 value);
  void add_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.NewsSources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_Stats_SourceStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.Stats.SourceStats) */ {
 public:
  UserData_Stats_SourceStats();
  virtual ~UserData_Stats_SourceStats();

  UserData_Stats_SourceStats(const UserData_Stats_SourceStats& from);

  inline UserData_Stats_SourceStats& operator=(const UserData_Stats_SourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_Stats_SourceStats(UserData_Stats_SourceStats&& from) noexcept
    : UserData_Stats_SourceStats() {
    *this = ::std::move(from);
  }

  inline UserData_Stats_SourceStats& operator=(UserData_Stats_SourceStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_Stats_SourceStats& default_instance();

  static inline const UserData_Stats_SourceStats* internal_default_instance() {
    return reinterpret_cast<const UserData_Stats_SourceStats*>(
               &_UserData_Stats_SourceStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UserData_Stats_SourceStats* other);
  friend void swap(UserData_Stats_SourceStats& a, UserData_Stats_SourceStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_Stats_SourceStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_Stats_SourceStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_Stats_SourceStats& from);
  void MergeFrom(const UserData_Stats_SourceStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_Stats_SourceStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int64 category_id() const;
  void set_category_id(::google::protobuf::int64 value);

  // optional int32 views = 3;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  ::google::protobuf::int32 views() const;
  void set_views(::google::protobuf::int32 value);

  // optional int32 opens = 4;
  bool has_opens() const;
  void clear_opens();
  static const int kOpensFieldNumber = 4;
  ::google::protobuf::int32 opens() const;
  void set_opens(::google::protobuf::int32 value);

  // optional int32 likes = 5;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 5;
  ::google::protobuf::int32 likes() const;
  void set_likes(::google::protobuf::int32 value);

  // optional int32 dislikes = 6;
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 6;
  ::google::protobuf::int32 dislikes() const;
  void set_dislikes(::google::protobuf::int32 value);

  // optional int32 shares = 7;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 7;
  ::google::protobuf::int32 shares() const;
  void set_shares(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.Stats.SourceStats)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_views();
  void clear_has_views();
  void set_has_opens();
  void clear_has_opens();
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();
  void set_has_shares();
  void clear_has_shares();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 category_id_;
  ::google::protobuf::int32 views_;
  ::google::protobuf::int32 opens_;
  ::google::protobuf::int32 likes_;
  ::google::protobuf::int32 dislikes_;
  ::google::protobuf::int32 shares_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_Stats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.Stats) */ {
 public:
  UserData_Stats();
  virtual ~UserData_Stats();

  UserData_Stats(const UserData_Stats& from);

  inline UserData_Stats& operator=(const UserData_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_Stats(UserData_Stats&& from) noexcept
    : UserData_Stats() {
    *this = ::std::move(from);
  }

  inline UserData_Stats& operator=(UserData_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_Stats& default_instance();

  static inline const UserData_Stats* internal_default_instance() {
    return reinterpret_cast<const UserData_Stats*>(
               &_UserData_Stats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(UserData_Stats* other);
  friend void swap(UserData_Stats& a, UserData_Stats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_Stats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_Stats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_Stats& from);
  void MergeFrom(const UserData_Stats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_Stats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_Stats_SourceStats SourceStats;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  int sources_stats_size() const;
  void clear_sources_stats();
  static const int kSourcesStatsFieldNumber = 1;
  const ::cosmo::pb::UserData_Stats_SourceStats& sources_stats(int index) const;
  ::cosmo::pb::UserData_Stats_SourceStats* mutable_sources_stats(int index);
  ::cosmo::pb::UserData_Stats_SourceStats* add_sources_stats();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
      mutable_sources_stats();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
      sources_stats() const;

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.Stats)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats > sources_stats_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SourcesWebStats_SourceVisit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SourcesWebStats.SourceVisit) */ {
 public:
  UserData_SourcesWebStats_SourceVisit();
  virtual ~UserData_SourcesWebStats_SourceVisit();

  UserData_SourcesWebStats_SourceVisit(const UserData_SourcesWebStats_SourceVisit& from);

  inline UserData_SourcesWebStats_SourceVisit& operator=(const UserData_SourcesWebStats_SourceVisit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SourcesWebStats_SourceVisit(UserData_SourcesWebStats_SourceVisit&& from) noexcept
    : UserData_SourcesWebStats_SourceVisit() {
    *this = ::std::move(from);
  }

  inline UserData_SourcesWebStats_SourceVisit& operator=(UserData_SourcesWebStats_SourceVisit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SourcesWebStats_SourceVisit& default_instance();

  static inline const UserData_SourcesWebStats_SourceVisit* internal_default_instance() {
    return reinterpret_cast<const UserData_SourcesWebStats_SourceVisit*>(
               &_UserData_SourcesWebStats_SourceVisit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(UserData_SourcesWebStats_SourceVisit* other);
  friend void swap(UserData_SourcesWebStats_SourceVisit& a, UserData_SourcesWebStats_SourceVisit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SourcesWebStats_SourceVisit* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SourcesWebStats_SourceVisit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SourcesWebStats_SourceVisit& from);
  void MergeFrom(const UserData_SourcesWebStats_SourceVisit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SourcesWebStats_SourceVisit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int32 visits = 2;
  bool has_visits() const;
  void clear_visits();
  static const int kVisitsFieldNumber = 2;
  ::google::protobuf::int32 visits() const;
  void set_visits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_visits();
  void clear_has_visits();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int32 visits_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SourcesWebStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SourcesWebStats) */ {
 public:
  UserData_SourcesWebStats();
  virtual ~UserData_SourcesWebStats();

  UserData_SourcesWebStats(const UserData_SourcesWebStats& from);

  inline UserData_SourcesWebStats& operator=(const UserData_SourcesWebStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SourcesWebStats(UserData_SourcesWebStats&& from) noexcept
    : UserData_SourcesWebStats() {
    *this = ::std::move(from);
  }

  inline UserData_SourcesWebStats& operator=(UserData_SourcesWebStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SourcesWebStats& default_instance();

  static inline const UserData_SourcesWebStats* internal_default_instance() {
    return reinterpret_cast<const UserData_SourcesWebStats*>(
               &_UserData_SourcesWebStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(UserData_SourcesWebStats* other);
  friend void swap(UserData_SourcesWebStats& a, UserData_SourcesWebStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SourcesWebStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SourcesWebStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SourcesWebStats& from);
  void MergeFrom(const UserData_SourcesWebStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SourcesWebStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_SourcesWebStats_SourceVisit SourceVisit;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  int sourcevisits_size() const;
  void clear_sourcevisits();
  static const int kSourceVisitsFieldNumber = 1;
  const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& sourcevisits(int index) const;
  ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* mutable_sourcevisits(int index);
  ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* add_sourcevisits();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
      mutable_sourcevisits();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
      sourcevisits() const;

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SourcesWebStats)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit > sourcevisits_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserLinks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserLinks) */ {
 public:
  UserData_UserLinks();
  virtual ~UserData_UserLinks();

  UserData_UserLinks(const UserData_UserLinks& from);

  inline UserData_UserLinks& operator=(const UserData_UserLinks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserLinks(UserData_UserLinks&& from) noexcept
    : UserData_UserLinks() {
    *this = ::std::move(from);
  }

  inline UserData_UserLinks& operator=(UserData_UserLinks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserLinks& default_instance();

  static inline const UserData_UserLinks* internal_default_instance() {
    return reinterpret_cast<const UserData_UserLinks*>(
               &_UserData_UserLinks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(UserData_UserLinks* other);
  friend void swap(UserData_UserLinks& a, UserData_UserLinks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserLinks* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserLinks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserLinks& from);
  void MergeFrom(const UserData_UserLinks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserLinks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vid = 1;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 1;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // optional string mail = 2;
  bool has_mail() const;
  void clear_mail();
  static const int kMailFieldNumber = 2;
  const ::std::string& mail() const;
  void set_mail(const ::std::string& value);
  #if LANG_CXX11
  void set_mail(::std::string&& value);
  #endif
  void set_mail(const char* value);
  void set_mail(const char* value, size_t size);
  ::std::string* mutable_mail();
  ::std::string* release_mail();
  void set_allocated_mail(::std::string* mail);

  // optional string ok = 3;
  bool has_ok() const;
  void clear_ok();
  static const int kOkFieldNumber = 3;
  const ::std::string& ok() const;
  void set_ok(const ::std::string& value);
  #if LANG_CXX11
  void set_ok(::std::string&& value);
  #endif
  void set_ok(const char* value);
  void set_ok(const char* value, size_t size);
  ::std::string* mutable_ok();
  ::std::string* release_ok();
  void set_allocated_ok(::std::string* ok);

  // optional string vk = 4;
  bool has_vk() const;
  void clear_vk();
  static const int kVkFieldNumber = 4;
  const ::std::string& vk() const;
  void set_vk(const ::std::string& value);
  #if LANG_CXX11
  void set_vk(::std::string&& value);
  #endif
  void set_vk(const char* value);
  void set_vk(const char* value, size_t size);
  ::std::string* mutable_vk();
  ::std::string* release_vk();
  void set_allocated_vk(::std::string* vk);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserLinks)
 private:
  void set_has_vid();
  void clear_has_vid();
  void set_has_mail();
  void clear_has_mail();
  void set_has_ok();
  void clear_has_ok();
  void set_has_vk();
  void clear_has_vk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr mail_;
  ::google::protobuf::internal::ArenaStringPtr ok_;
  ::google::protobuf::internal::ArenaStringPtr vk_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData) */ {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UserData* other);
  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_OriginalInfo OriginalInfo;
  typedef UserData_OkInfo OkInfo;
  typedef UserData_SocDemFea SocDemFea;
  typedef UserData_DetiRecos DetiRecos;
  typedef UserData_AlsFea AlsFea;
  typedef UserData_AlsItemsBiases AlsItemsBiases;
  typedef UserData_NewsSources NewsSources;
  typedef UserData_Stats Stats;
  typedef UserData_SourcesWebStats SourcesWebStats;
  typedef UserData_UserLinks UserLinks;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  bool has_socdem_fea() const;
  void clear_socdem_fea();
  static const int kSocdemFeaFieldNumber = 2;
  const ::cosmo::pb::UserData_SocDemFea& socdem_fea() const;
  ::cosmo::pb::UserData_SocDemFea* mutable_socdem_fea();
  ::cosmo::pb::UserData_SocDemFea* release_socdem_fea();
  void set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea);

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  bool has_als_fea() const;
  void clear_als_fea();
  static const int kAlsFeaFieldNumber = 3;
  const ::cosmo::pb::UserData_AlsFea& als_fea() const;
  ::cosmo::pb::UserData_AlsFea* mutable_als_fea();
  ::cosmo::pb::UserData_AlsFea* release_als_fea();
  void set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea);

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  bool has_ok_info() const;
  void clear_ok_info();
  static const int kOkInfoFieldNumber = 4;
  const ::cosmo::pb::UserData_OkInfo& ok_info() const;
  ::cosmo::pb::UserData_OkInfo* mutable_ok_info();
  ::cosmo::pb::UserData_OkInfo* release_ok_info();
  void set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info);

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  bool has_deti_reco() const;
  void clear_deti_reco();
  static const int kDetiRecoFieldNumber = 5;
  const ::cosmo::pb::UserData_DetiRecos& deti_reco() const;
  ::cosmo::pb::UserData_DetiRecos* mutable_deti_reco();
  ::cosmo::pb::UserData_DetiRecos* release_deti_reco();
  void set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco);

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  bool has_als_items_fea() const;
  void clear_als_items_fea();
  static const int kAlsItemsFeaFieldNumber = 6;
  const ::cosmo::pb::UserData_AlsItemsBiases& als_items_fea() const;
  ::cosmo::pb::UserData_AlsItemsBiases* mutable_als_items_fea();
  ::cosmo::pb::UserData_AlsItemsBiases* release_als_items_fea();
  void set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea);

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  bool has_news_sources() const;
  void clear_news_sources();
  static const int kNewsSourcesFieldNumber = 7;
  const ::cosmo::pb::UserData_NewsSources& news_sources() const;
  ::cosmo::pb::UserData_NewsSources* mutable_news_sources();
  ::cosmo::pb::UserData_NewsSources* release_news_sources();
  void set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources);

  // optional .cosmo.pb.UserData.Stats stats = 8;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 8;
  const ::cosmo::pb::UserData_Stats& stats() const;
  ::cosmo::pb::UserData_Stats* mutable_stats();
  ::cosmo::pb::UserData_Stats* release_stats();
  void set_allocated_stats(::cosmo::pb::UserData_Stats* stats);

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  bool has_original_info() const;
  void clear_original_info();
  static const int kOriginalInfoFieldNumber = 9;
  const ::cosmo::pb::UserData_OriginalInfo& original_info() const;
  ::cosmo::pb::UserData_OriginalInfo* mutable_original_info();
  ::cosmo::pb::UserData_OriginalInfo* release_original_info();
  void set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info);

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  bool has_als_fea_2() const;
  void clear_als_fea_2();
  static const int kAlsFea2FieldNumber = 10;
  const ::cosmo::pb::UserData_AlsFea& als_fea_2() const;
  ::cosmo::pb::UserData_AlsFea* mutable_als_fea_2();
  ::cosmo::pb::UserData_AlsFea* release_als_fea_2();
  void set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2);

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  bool has_sources_web_stats() const;
  void clear_sources_web_stats();
  static const int kSourcesWebStatsFieldNumber = 11;
  const ::cosmo::pb::UserData_SourcesWebStats& sources_web_stats() const;
  ::cosmo::pb::UserData_SourcesWebStats* mutable_sources_web_stats();
  ::cosmo::pb::UserData_SourcesWebStats* release_sources_web_stats();
  void set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats);

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  bool has_sources_reco_stats() const;
  void clear_sources_reco_stats();
  static const int kSourcesRecoStatsFieldNumber = 12;
  const ::cosmo::pb::UserData_Stats& sources_reco_stats() const;
  ::cosmo::pb::UserData_Stats* mutable_sources_reco_stats();
  ::cosmo::pb::UserData_Stats* release_sources_reco_stats();
  void set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats);

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  bool has_user_links() const;
  void clear_user_links();
  static const int kUserLinksFieldNumber = 13;
  const ::cosmo::pb::UserData_UserLinks& user_links() const;
  ::cosmo::pb::UserData_UserLinks* mutable_user_links();
  ::cosmo::pb::UserData_UserLinks* release_user_links();
  void set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links);

  // optional int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_socdem_fea();
  void clear_has_socdem_fea();
  void set_has_als_fea();
  void clear_has_als_fea();
  void set_has_ok_info();
  void clear_has_ok_info();
  void set_has_deti_reco();
  void clear_has_deti_reco();
  void set_has_als_items_fea();
  void clear_has_als_items_fea();
  void set_has_news_sources();
  void clear_has_news_sources();
  void set_has_stats();
  void clear_has_stats();
  void set_has_original_info();
  void clear_has_original_info();
  void set_has_als_fea_2();
  void clear_has_als_fea_2();
  void set_has_sources_web_stats();
  void clear_has_sources_web_stats();
  void set_has_sources_reco_stats();
  void clear_has_sources_reco_stats();
  void set_has_user_links();
  void clear_has_user_links();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_SocDemFea* socdem_fea_;
  ::cosmo::pb::UserData_AlsFea* als_fea_;
  ::cosmo::pb::UserData_OkInfo* ok_info_;
  ::cosmo::pb::UserData_DetiRecos* deti_reco_;
  ::cosmo::pb::UserData_AlsItemsBiases* als_items_fea_;
  ::cosmo::pb::UserData_NewsSources* news_sources_;
  ::cosmo::pb::UserData_Stats* stats_;
  ::cosmo::pb::UserData_OriginalInfo* original_info_;
  ::cosmo::pb::UserData_AlsFea* als_fea_2_;
  ::cosmo::pb::UserData_SourcesWebStats* sources_web_stats_;
  ::cosmo::pb::UserData_Stats* sources_reco_stats_;
  ::cosmo::pb::UserData_UserLinks* user_links_;
  ::google::protobuf::int64 user_id_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupedUserData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.GroupedUserData) */ {
 public:
  GroupedUserData();
  virtual ~GroupedUserData();

  GroupedUserData(const GroupedUserData& from);

  inline GroupedUserData& operator=(const GroupedUserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupedUserData(GroupedUserData&& from) noexcept
    : GroupedUserData() {
    *this = ::std::move(from);
  }

  inline GroupedUserData& operator=(GroupedUserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupedUserData& default_instance();

  static inline const GroupedUserData* internal_default_instance() {
    return reinterpret_cast<const GroupedUserData*>(
               &_GroupedUserData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GroupedUserData* other);
  friend void swap(GroupedUserData& a, GroupedUserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupedUserData* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupedUserData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupedUserData& from);
  void MergeFrom(const GroupedUserData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupedUserData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::cosmo::pb::UserData& data() const;
  ::cosmo::pb::UserData* mutable_data();
  ::cosmo::pb::UserData* release_data();
  void set_allocated_data(::cosmo::pb::UserData* data);

  // @@protoc_insertion_point(class_scope:cosmo.pb.GroupedUserData)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData* data_;
  friend struct protobuf_cosmo_5fuser_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData_OriginalInfo

// optional string id = 1;
inline bool UserData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_OriginalInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& UserData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OriginalInfo.id)
  return id_.GetNoArena();
}
inline void UserData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OriginalInfo.id)
}
#if LANG_CXX11
inline void UserData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.OriginalInfo.id)
}
#endif
inline void UserData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.OriginalInfo.id)
}
inline void UserData_OriginalInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.OriginalInfo.id)
}
inline ::std::string* UserData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.OriginalInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.OriginalInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}

// -------------------------------------------------------------------

// UserData_OkInfo

// required int64 user_id = 1;
inline bool UserData_OkInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_OkInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_OkInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_OkInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 UserData_OkInfo::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OkInfo.user_id)
  return user_id_;
}
inline void UserData_OkInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OkInfo.user_id)
}

// -------------------------------------------------------------------

// UserData_SocDemFea

// optional int32 gender = 1 [default = 0];
inline bool UserData_SocDemFea::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SocDemFea::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SocDemFea::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SocDemFea::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 UserData_SocDemFea::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.gender)
  return gender_;
}
inline void UserData_SocDemFea::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.gender)
}

// optional int32 age = 2;
inline bool UserData_SocDemFea::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SocDemFea::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SocDemFea::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SocDemFea::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 UserData_SocDemFea::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.age)
  return age_;
}
inline void UserData_SocDemFea::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.age)
}

// -------------------------------------------------------------------

// UserData_DetiRecos

// repeated int64 slim = 1;
inline int UserData_DetiRecos::slim_size() const {
  return slim_.size();
}
inline void UserData_DetiRecos::clear_slim() {
  slim_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::slim(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.slim)
  return slim_.Get(index);
}
inline void UserData_DetiRecos::set_slim(int index, ::google::protobuf::int64 value) {
  slim_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.slim)
}
inline void UserData_DetiRecos::add_slim(::google::protobuf::int64 value) {
  slim_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.slim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::slim() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.slim)
  return slim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_slim() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.slim)
  return &slim_;
}

// repeated int64 wrmf = 2;
inline int UserData_DetiRecos::wrmf_size() const {
  return wrmf_.size();
}
inline void UserData_DetiRecos::clear_wrmf() {
  wrmf_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::wrmf(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_.Get(index);
}
inline void UserData_DetiRecos::set_wrmf(int index, ::google::protobuf::int64 value) {
  wrmf_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.wrmf)
}
inline void UserData_DetiRecos::add_wrmf(::google::protobuf::int64 value) {
  wrmf_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.wrmf)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::wrmf() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_wrmf() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return &wrmf_;
}

// repeated int64 als_tuned = 3;
inline int UserData_DetiRecos::als_tuned_size() const {
  return als_tuned_.size();
}
inline void UserData_DetiRecos::clear_als_tuned() {
  als_tuned_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_tuned(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_.Get(index);
}
inline void UserData_DetiRecos::set_als_tuned(int index, ::google::protobuf::int64 value) {
  als_tuned_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_tuned)
}
inline void UserData_DetiRecos::add_als_tuned(::google::protobuf::int64 value) {
  als_tuned_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_tuned)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_tuned() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_tuned() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return &als_tuned_;
}

// repeated int64 als_large = 4;
inline int UserData_DetiRecos::als_large_size() const {
  return als_large_.size();
}
inline void UserData_DetiRecos::clear_als_large() {
  als_large_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_large(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_.Get(index);
}
inline void UserData_DetiRecos::set_als_large(int index, ::google::protobuf::int64 value) {
  als_large_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_large)
}
inline void UserData_DetiRecos::add_als_large(::google::protobuf::int64 value) {
  als_large_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_large)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_large() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_large() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_large)
  return &als_large_;
}

// repeated int64 svd = 5;
inline int UserData_DetiRecos::svd_size() const {
  return svd_.size();
}
inline void UserData_DetiRecos::clear_svd() {
  svd_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::svd(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd)
  return svd_.Get(index);
}
inline void UserData_DetiRecos::set_svd(int index, ::google::protobuf::int64 value) {
  svd_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd)
}
inline void UserData_DetiRecos::add_svd(::google::protobuf::int64 value) {
  svd_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd)
  return svd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd)
  return &svd_;
}

// repeated int64 svd_stupid = 6;
inline int UserData_DetiRecos::svd_stupid_size() const {
  return svd_stupid_.size();
}
inline void UserData_DetiRecos::clear_svd_stupid() {
  svd_stupid_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::svd_stupid(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_.Get(index);
}
inline void UserData_DetiRecos::set_svd_stupid(int index, ::google::protobuf::int64 value) {
  svd_stupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
inline void UserData_DetiRecos::add_svd_stupid(::google::protobuf::int64 value) {
  svd_stupid_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd_stupid() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd_stupid() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return &svd_stupid_;
}

// repeated int64 als_by_liker = 7;
inline int UserData_DetiRecos::als_by_liker_size() const {
  return als_by_liker_.size();
}
inline void UserData_DetiRecos::clear_als_by_liker() {
  als_by_liker_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_by_liker(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_.Get(index);
}
inline void UserData_DetiRecos::set_als_by_liker(int index, ::google::protobuf::int64 value) {
  als_by_liker_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
inline void UserData_DetiRecos::add_als_by_liker(::google::protobuf::int64 value) {
  als_by_liker_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_liker() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_liker() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return &als_by_liker_;
}

// repeated int64 als_by_homer = 8;
inline int UserData_DetiRecos::als_by_homer_size() const {
  return als_by_homer_.size();
}
inline void UserData_DetiRecos::clear_als_by_homer() {
  als_by_homer_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_by_homer(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_.Get(index);
}
inline void UserData_DetiRecos::set_als_by_homer(int index, ::google::protobuf::int64 value) {
  als_by_homer_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
inline void UserData_DetiRecos::add_als_by_homer(::google::protobuf::int64 value) {
  als_by_homer_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_homer() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_homer() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return &als_by_homer_;
}

// -------------------------------------------------------------------

// UserData_AlsFea

// repeated float als = 1;
inline int UserData_AlsFea::als_size() const {
  return als_.size();
}
inline void UserData_AlsFea::clear_als() {
  als_.Clear();
}
inline float UserData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsFea.als)
  return als_.Get(index);
}
inline void UserData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsFea.als)
}
inline void UserData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsFea.als)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsFea.als)
  return als_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsFea.als)
  return &als_;
}

// -------------------------------------------------------------------

// UserData_AlsItemsBiases

// repeated float fea = 1;
inline int UserData_AlsItemsBiases::fea_size() const {
  return fea_.size();
}
inline void UserData_AlsItemsBiases::clear_fea() {
  fea_.Clear();
}
inline float UserData_AlsItemsBiases::fea(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_.Get(index);
}
inline void UserData_AlsItemsBiases::set_fea(int index, float value) {
  fea_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsItemsBiases.fea)
}
inline void UserData_AlsItemsBiases::add_fea(float value) {
  fea_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsItemsBiases.fea)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_AlsItemsBiases::fea() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_AlsItemsBiases::mutable_fea() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return &fea_;
}

// -------------------------------------------------------------------

// UserData_NewsSources

// repeated float weight = 1;
inline int UserData_NewsSources::weight_size() const {
  return weight_.size();
}
inline void UserData_NewsSources::clear_weight() {
  weight_.Clear();
}
inline float UserData_NewsSources::weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.weight)
  return weight_.Get(index);
}
inline void UserData_NewsSources::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.weight)
}
inline void UserData_NewsSources::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.weight)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_NewsSources::weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.weight)
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_NewsSources::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.weight)
  return &weight_;
}

// repeated int64 id = 2;
inline int UserData_NewsSources::id_size() const {
  return id_.size();
}
inline void UserData_NewsSources::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 UserData_NewsSources::id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.id)
  return id_.Get(index);
}
inline void UserData_NewsSources::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.id)
}
inline void UserData_NewsSources::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_NewsSources::id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_NewsSources::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.id)
  return &id_;
}

// -------------------------------------------------------------------

// UserData_Stats_SourceStats

// required int64 source_id = 1;
inline bool UserData_Stats_SourceStats::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_Stats_SourceStats::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_Stats_SourceStats::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_Stats_SourceStats::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.source_id)
  return source_id_;
}
inline void UserData_Stats_SourceStats::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.source_id)
}

// optional int64 category_id = 2;
inline bool UserData_Stats_SourceStats::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_Stats_SourceStats::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_Stats_SourceStats::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
inline ::google::protobuf::int64 UserData_Stats_SourceStats::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.category_id)
  return category_id_;
}
inline void UserData_Stats_SourceStats::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.category_id)
}

// optional int32 views = 3;
inline bool UserData_Stats_SourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_Stats_SourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_Stats_SourceStats::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.views)
  return views_;
}
inline void UserData_Stats_SourceStats::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.views)
}

// optional int32 opens = 4;
inline bool UserData_Stats_SourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_Stats_SourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_Stats_SourceStats::clear_opens() {
  opens_ = 0;
  clear_has_opens();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::opens() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.opens)
  return opens_;
}
inline void UserData_Stats_SourceStats::set_opens(::google::protobuf::int32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.opens)
}

// optional int32 likes = 5;
inline bool UserData_Stats_SourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_Stats_SourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_Stats_SourceStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.likes)
  return likes_;
}
inline void UserData_Stats_SourceStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.likes)
}

// optional int32 dislikes = 6;
inline bool UserData_Stats_SourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_Stats_SourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_Stats_SourceStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.dislikes)
  return dislikes_;
}
inline void UserData_Stats_SourceStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.dislikes)
}

// optional int32 shares = 7;
inline bool UserData_Stats_SourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData_Stats_SourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData_Stats_SourceStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.shares)
  return shares_;
}
inline void UserData_Stats_SourceStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.shares)
}

// -------------------------------------------------------------------

// UserData_Stats

// repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
inline int UserData_Stats::sources_stats_size() const {
  return sources_stats_.size();
}
inline void UserData_Stats::clear_sources_stats() {
  sources_stats_.Clear();
}
inline const ::cosmo::pb::UserData_Stats_SourceStats& UserData_Stats::sources_stats(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Get(index);
}
inline ::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::mutable_sources_stats(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Mutable(index);
}
inline ::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::add_sources_stats() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
UserData_Stats::mutable_sources_stats() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.Stats.sources_stats)
  return &sources_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
UserData_Stats::sources_stats() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_;
}

// optional uint32 version = 2;
inline bool UserData_Stats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_Stats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_Stats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_Stats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_Stats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.version)
  return version_;
}
inline void UserData_Stats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.version)
}

// -------------------------------------------------------------------

// UserData_SourcesWebStats_SourceVisit

// required int64 source_id = 1;
inline bool UserData_SourcesWebStats_SourceVisit::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SourcesWebStats_SourceVisit::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_SourcesWebStats_SourceVisit::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
  return source_id_;
}
inline void UserData_SourcesWebStats_SourceVisit::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
}

// required int32 visits = 2;
inline bool UserData_SourcesWebStats_SourceVisit::has_visits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SourcesWebStats_SourceVisit::set_has_visits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_has_visits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
inline ::google::protobuf::int32 UserData_SourcesWebStats_SourceVisit::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
  return visits_;
}
inline void UserData_SourcesWebStats_SourceVisit::set_visits(::google::protobuf::int32 value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
}

// -------------------------------------------------------------------

// UserData_SourcesWebStats

// repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
inline int UserData_SourcesWebStats::sourcevisits_size() const {
  return sourcevisits_.size();
}
inline void UserData_SourcesWebStats::clear_sourcevisits() {
  sourcevisits_.Clear();
}
inline const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats::sourcevisits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Get(index);
}
inline ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::mutable_sourcevisits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Mutable(index);
}
inline ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::add_sourcevisits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
UserData_SourcesWebStats::mutable_sourcevisits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return &sourcevisits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
UserData_SourcesWebStats::sourcevisits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_;
}

// optional uint32 version = 2;
inline bool UserData_SourcesWebStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SourcesWebStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SourcesWebStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SourcesWebStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_SourcesWebStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.version)
  return version_;
}
inline void UserData_SourcesWebStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.version)
}

// -------------------------------------------------------------------

// UserData_UserLinks

// optional string vid = 1;
inline bool UserData_UserLinks::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserLinks::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserLinks::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserLinks::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& UserData_UserLinks::vid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vid)
  return vid_.GetNoArena();
}
inline void UserData_UserLinks::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vid)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vid)
}
#endif
inline void UserData_UserLinks::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vid)
}
inline void UserData_UserLinks::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vid)
}
inline ::std::string* UserData_UserLinks::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData_UserLinks::release_vid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData_UserLinks::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}

// optional string mail = 2;
inline bool UserData_UserLinks::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserLinks::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserLinks::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserLinks::clear_mail() {
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mail();
}
inline const ::std::string& UserData_UserLinks::mail() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.mail)
  return mail_.GetNoArena();
}
inline void UserData_UserLinks::set_mail(const ::std::string& value) {
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.mail)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_mail(::std::string&& value) {
  set_has_mail();
  mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.mail)
}
#endif
inline void UserData_UserLinks::set_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.mail)
}
inline void UserData_UserLinks::set_mail(const char* value, size_t size) {
  set_has_mail();
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.mail)
}
inline ::std::string* UserData_UserLinks::mutable_mail() {
  set_has_mail();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.mail)
  return mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData_UserLinks::release_mail() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.mail)
  clear_has_mail();
  return mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData_UserLinks::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}

// optional string ok = 3;
inline bool UserData_UserLinks::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserLinks::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserLinks::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserLinks::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
inline const ::std::string& UserData_UserLinks::ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.ok)
  return ok_.GetNoArena();
}
inline void UserData_UserLinks::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.ok)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.ok)
}
#endif
inline void UserData_UserLinks::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.ok)
}
inline void UserData_UserLinks::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.ok)
}
inline ::std::string* UserData_UserLinks::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.ok)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData_UserLinks::release_ok() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.ok)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData_UserLinks::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}

// optional string vk = 4;
inline bool UserData_UserLinks::has_vk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserLinks::set_has_vk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserLinks::clear_has_vk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserLinks::clear_vk() {
  vk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vk();
}
inline const ::std::string& UserData_UserLinks::vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vk)
  return vk_.GetNoArena();
}
inline void UserData_UserLinks::set_vk(const ::std::string& value) {
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vk)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_vk(::std::string&& value) {
  set_has_vk();
  vk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vk)
}
#endif
inline void UserData_UserLinks::set_vk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vk)
}
inline void UserData_UserLinks::set_vk(const char* value, size_t size) {
  set_has_vk();
  vk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vk)
}
inline ::std::string* UserData_UserLinks::mutable_vk() {
  set_has_vk();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vk)
  return vk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData_UserLinks::release_vk() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vk)
  clear_has_vk();
  return vk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData_UserLinks::set_allocated_vk(::std::string* vk) {
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}

// -------------------------------------------------------------------

// UserData

// optional int64 user_id = 1;
inline bool UserData::has_user_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserData::set_has_user_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserData::clear_has_user_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserData::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 UserData::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_id)
  return user_id_;
}
inline void UserData::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.user_id)
}

// optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
inline bool UserData::has_socdem_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_socdem_fea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_socdem_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_socdem_fea() {
  if (socdem_fea_ != NULL) socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
  clear_has_socdem_fea();
}
inline const ::cosmo::pb::UserData_SocDemFea& UserData::socdem_fea() const {
  const ::cosmo::pb::UserData_SocDemFea* p = socdem_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.socdem_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SocDemFea*>(
      &::cosmo::pb::_UserData_SocDemFea_default_instance_);
}
inline ::cosmo::pb::UserData_SocDemFea* UserData::mutable_socdem_fea() {
  set_has_socdem_fea();
  if (socdem_fea_ == NULL) {
    socdem_fea_ = new ::cosmo::pb::UserData_SocDemFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.socdem_fea)
  return socdem_fea_;
}
inline ::cosmo::pb::UserData_SocDemFea* UserData::release_socdem_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.socdem_fea)
  clear_has_socdem_fea();
  ::cosmo::pb::UserData_SocDemFea* temp = socdem_fea_;
  socdem_fea_ = NULL;
  return temp;
}
inline void UserData::set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea) {
  delete socdem_fea_;
  socdem_fea_ = socdem_fea;
  if (socdem_fea) {
    set_has_socdem_fea();
  } else {
    clear_has_socdem_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.socdem_fea)
}

// optional .cosmo.pb.UserData.AlsFea als_fea = 3;
inline bool UserData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea();
}
inline const ::cosmo::pb::UserData_AlsFea& UserData::als_fea() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
inline ::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    als_fea_ = new ::cosmo::pb::UserData_AlsFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea)
  return als_fea_;
}
inline ::cosmo::pb::UserData_AlsFea* UserData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea)
  clear_has_als_fea();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_;
  als_fea_ = NULL;
  return temp;
}
inline void UserData::set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea) {
  delete als_fea_;
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea)
}

// optional .cosmo.pb.UserData.OkInfo ok_info = 4;
inline bool UserData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
  clear_has_ok_info();
}
inline const ::cosmo::pb::UserData_OkInfo& UserData::ok_info() const {
  const ::cosmo::pb::UserData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OkInfo*>(
      &::cosmo::pb::_UserData_OkInfo_default_instance_);
}
inline ::cosmo::pb::UserData_OkInfo* UserData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    ok_info_ = new ::cosmo::pb::UserData_OkInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.ok_info)
  return ok_info_;
}
inline ::cosmo::pb::UserData_OkInfo* UserData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.ok_info)
  clear_has_ok_info();
  ::cosmo::pb::UserData_OkInfo* temp = ok_info_;
  ok_info_ = NULL;
  return temp;
}
inline void UserData::set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info) {
  delete ok_info_;
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.ok_info)
}

// optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
inline bool UserData::has_deti_reco() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData::set_has_deti_reco() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData::clear_has_deti_reco() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData::clear_deti_reco() {
  if (deti_reco_ != NULL) deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
  clear_has_deti_reco();
}
inline const ::cosmo::pb::UserData_DetiRecos& UserData::deti_reco() const {
  const ::cosmo::pb::UserData_DetiRecos* p = deti_reco_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.deti_reco)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_DetiRecos*>(
      &::cosmo::pb::_UserData_DetiRecos_default_instance_);
}
inline ::cosmo::pb::UserData_DetiRecos* UserData::mutable_deti_reco() {
  set_has_deti_reco();
  if (deti_reco_ == NULL) {
    deti_reco_ = new ::cosmo::pb::UserData_DetiRecos;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.deti_reco)
  return deti_reco_;
}
inline ::cosmo::pb::UserData_DetiRecos* UserData::release_deti_reco() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.deti_reco)
  clear_has_deti_reco();
  ::cosmo::pb::UserData_DetiRecos* temp = deti_reco_;
  deti_reco_ = NULL;
  return temp;
}
inline void UserData::set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco) {
  delete deti_reco_;
  deti_reco_ = deti_reco;
  if (deti_reco) {
    set_has_deti_reco();
  } else {
    clear_has_deti_reco();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.deti_reco)
}

// optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
inline bool UserData::has_als_items_fea() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData::set_has_als_items_fea() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData::clear_has_als_items_fea() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData::clear_als_items_fea() {
  if (als_items_fea_ != NULL) als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
  clear_has_als_items_fea();
}
inline const ::cosmo::pb::UserData_AlsItemsBiases& UserData::als_items_fea() const {
  const ::cosmo::pb::UserData_AlsItemsBiases* p = als_items_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_items_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsItemsBiases*>(
      &::cosmo::pb::_UserData_AlsItemsBiases_default_instance_);
}
inline ::cosmo::pb::UserData_AlsItemsBiases* UserData::mutable_als_items_fea() {
  set_has_als_items_fea();
  if (als_items_fea_ == NULL) {
    als_items_fea_ = new ::cosmo::pb::UserData_AlsItemsBiases;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_items_fea)
  return als_items_fea_;
}
inline ::cosmo::pb::UserData_AlsItemsBiases* UserData::release_als_items_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_items_fea)
  clear_has_als_items_fea();
  ::cosmo::pb::UserData_AlsItemsBiases* temp = als_items_fea_;
  als_items_fea_ = NULL;
  return temp;
}
inline void UserData::set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea) {
  delete als_items_fea_;
  als_items_fea_ = als_items_fea;
  if (als_items_fea) {
    set_has_als_items_fea();
  } else {
    clear_has_als_items_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_items_fea)
}

// optional .cosmo.pb.UserData.NewsSources news_sources = 7;
inline bool UserData::has_news_sources() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData::set_has_news_sources() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData::clear_has_news_sources() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData::clear_news_sources() {
  if (news_sources_ != NULL) news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
  clear_has_news_sources();
}
inline const ::cosmo::pb::UserData_NewsSources& UserData::news_sources() const {
  const ::cosmo::pb::UserData_NewsSources* p = news_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.news_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_NewsSources*>(
      &::cosmo::pb::_UserData_NewsSources_default_instance_);
}
inline ::cosmo::pb::UserData_NewsSources* UserData::mutable_news_sources() {
  set_has_news_sources();
  if (news_sources_ == NULL) {
    news_sources_ = new ::cosmo::pb::UserData_NewsSources;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.news_sources)
  return news_sources_;
}
inline ::cosmo::pb::UserData_NewsSources* UserData::release_news_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.news_sources)
  clear_has_news_sources();
  ::cosmo::pb::UserData_NewsSources* temp = news_sources_;
  news_sources_ = NULL;
  return temp;
}
inline void UserData::set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources) {
  delete news_sources_;
  news_sources_ = news_sources;
  if (news_sources) {
    set_has_news_sources();
  } else {
    clear_has_news_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.news_sources)
}

// optional .cosmo.pb.UserData.Stats stats = 8;
inline bool UserData::has_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData::set_has_stats() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData::clear_stats() {
  if (stats_ != NULL) stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_stats();
}
inline const ::cosmo::pb::UserData_Stats& UserData::stats() const {
  const ::cosmo::pb::UserData_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
inline ::cosmo::pb::UserData_Stats* UserData::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::cosmo::pb::UserData_Stats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.stats)
  return stats_;
}
inline ::cosmo::pb::UserData_Stats* UserData::release_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.stats)
  clear_has_stats();
  ::cosmo::pb::UserData_Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void UserData::set_allocated_stats(::cosmo::pb::UserData_Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.stats)
}

// optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
inline bool UserData::has_original_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserData::set_has_original_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
  clear_has_original_info();
}
inline const ::cosmo::pb::UserData_OriginalInfo& UserData::original_info() const {
  const ::cosmo::pb::UserData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OriginalInfo*>(
      &::cosmo::pb::_UserData_OriginalInfo_default_instance_);
}
inline ::cosmo::pb::UserData_OriginalInfo* UserData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    original_info_ = new ::cosmo::pb::UserData_OriginalInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.original_info)
  return original_info_;
}
inline ::cosmo::pb::UserData_OriginalInfo* UserData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.original_info)
  clear_has_original_info();
  ::cosmo::pb::UserData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
inline void UserData::set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info) {
  delete original_info_;
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.original_info)
}

// optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
inline bool UserData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea_2();
}
inline const ::cosmo::pb::UserData_AlsFea& UserData::als_fea_2() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
inline ::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    als_fea_2_ = new ::cosmo::pb::UserData_AlsFea;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea_2)
  return als_fea_2_;
}
inline ::cosmo::pb::UserData_AlsFea* UserData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea_2)
  clear_has_als_fea_2();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_2_;
  als_fea_2_ = NULL;
  return temp;
}
inline void UserData::set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2) {
  delete als_fea_2_;
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea_2)
}

// optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
inline bool UserData::has_sources_web_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserData::set_has_sources_web_stats() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserData::clear_has_sources_web_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserData::clear_sources_web_stats() {
  if (sources_web_stats_ != NULL) sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
  clear_has_sources_web_stats();
}
inline const ::cosmo::pb::UserData_SourcesWebStats& UserData::sources_web_stats() const {
  const ::cosmo::pb::UserData_SourcesWebStats* p = sources_web_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_web_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SourcesWebStats*>(
      &::cosmo::pb::_UserData_SourcesWebStats_default_instance_);
}
inline ::cosmo::pb::UserData_SourcesWebStats* UserData::mutable_sources_web_stats() {
  set_has_sources_web_stats();
  if (sources_web_stats_ == NULL) {
    sources_web_stats_ = new ::cosmo::pb::UserData_SourcesWebStats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_web_stats)
  return sources_web_stats_;
}
inline ::cosmo::pb::UserData_SourcesWebStats* UserData::release_sources_web_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_web_stats)
  clear_has_sources_web_stats();
  ::cosmo::pb::UserData_SourcesWebStats* temp = sources_web_stats_;
  sources_web_stats_ = NULL;
  return temp;
}
inline void UserData::set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats) {
  delete sources_web_stats_;
  sources_web_stats_ = sources_web_stats;
  if (sources_web_stats) {
    set_has_sources_web_stats();
  } else {
    clear_has_sources_web_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_web_stats)
}

// optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
inline bool UserData::has_sources_reco_stats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserData::set_has_sources_reco_stats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserData::clear_has_sources_reco_stats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserData::clear_sources_reco_stats() {
  if (sources_reco_stats_ != NULL) sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_sources_reco_stats();
}
inline const ::cosmo::pb::UserData_Stats& UserData::sources_reco_stats() const {
  const ::cosmo::pb::UserData_Stats* p = sources_reco_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_reco_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
inline ::cosmo::pb::UserData_Stats* UserData::mutable_sources_reco_stats() {
  set_has_sources_reco_stats();
  if (sources_reco_stats_ == NULL) {
    sources_reco_stats_ = new ::cosmo::pb::UserData_Stats;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_reco_stats)
  return sources_reco_stats_;
}
inline ::cosmo::pb::UserData_Stats* UserData::release_sources_reco_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_reco_stats)
  clear_has_sources_reco_stats();
  ::cosmo::pb::UserData_Stats* temp = sources_reco_stats_;
  sources_reco_stats_ = NULL;
  return temp;
}
inline void UserData::set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats) {
  delete sources_reco_stats_;
  sources_reco_stats_ = sources_reco_stats;
  if (sources_reco_stats) {
    set_has_sources_reco_stats();
  } else {
    clear_has_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_reco_stats)
}

// optional .cosmo.pb.UserData.UserLinks user_links = 13;
inline bool UserData::has_user_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserData::set_has_user_links() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserData::clear_has_user_links() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserData::clear_user_links() {
  if (user_links_ != NULL) user_links_->::cosmo::pb::UserData_UserLinks::Clear();
  clear_has_user_links();
}
inline const ::cosmo::pb::UserData_UserLinks& UserData::user_links() const {
  const ::cosmo::pb::UserData_UserLinks* p = user_links_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_links)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserLinks*>(
      &::cosmo::pb::_UserData_UserLinks_default_instance_);
}
inline ::cosmo::pb::UserData_UserLinks* UserData::mutable_user_links() {
  set_has_user_links();
  if (user_links_ == NULL) {
    user_links_ = new ::cosmo::pb::UserData_UserLinks;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_links)
  return user_links_;
}
inline ::cosmo::pb::UserData_UserLinks* UserData::release_user_links() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_links)
  clear_has_user_links();
  ::cosmo::pb::UserData_UserLinks* temp = user_links_;
  user_links_ = NULL;
  return temp;
}
inline void UserData::set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links) {
  delete user_links_;
  user_links_ = user_links;
  if (user_links) {
    set_has_user_links();
  } else {
    clear_has_user_links();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_links)
}

// -------------------------------------------------------------------

// GroupedUserData

// optional .cosmo.pb.UserData data = 1;
inline bool GroupedUserData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupedUserData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupedUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupedUserData::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
inline const ::cosmo::pb::UserData& GroupedUserData::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.GroupedUserData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
inline ::cosmo::pb::UserData* GroupedUserData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::cosmo::pb::UserData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.GroupedUserData.data)
  return data_;
}
inline ::cosmo::pb::UserData* GroupedUserData::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.GroupedUserData.data)
  clear_has_data();
  ::cosmo::pb::UserData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GroupedUserData::set_allocated_data(::cosmo::pb::UserData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.GroupedUserData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_5fuser_5fdata_2eproto__INCLUDED
