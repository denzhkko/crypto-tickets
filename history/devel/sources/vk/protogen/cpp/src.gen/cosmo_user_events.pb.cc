// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_user_events.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_user_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class UserEvents_SiteDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserEvents_SiteDislike>
     _instance;
} _UserEvents_SiteDislike_default_instance_;
class UserEvents_SourceDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserEvents_SourceDislike>
     _instance;
} _UserEvents_SourceDislike_default_instance_;
class UserEvents_DocumentDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserEvents_DocumentDislike>
     _instance;
} _UserEvents_DocumentDislike_default_instance_;
class UserEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserEvents>
     _instance;
} _UserEvents_default_instance_;
class PackedReactions_ReactionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackedReactions_Reactions>
     _instance;
} _PackedReactions_Reactions_default_instance_;
class PackedReactionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackedReactions>
     _instance;
} _PackedReactions_default_instance_;
class PackedReactionsArrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackedReactionsArr>
     _instance;
} _PackedReactionsArr_default_instance_;
class ShowsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Shows>
     _instance;
} _Shows_default_instance_;
class ShowsArrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShowsArr>
     _instance;
} _ShowsArr_default_instance_;
class TrafloClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrafloClick>
     _instance;
} _TrafloClick_default_instance_;
class TrafloClickArrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrafloClickArr>
     _instance;
} _TrafloClickArr_default_instance_;

namespace protobuf_cosmo_5fuser_5fevents_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SiteDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SiteDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SiteDislike, site_hash_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SourceDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SourceDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_SourceDislike, source_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_DocumentDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_DocumentDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents_DocumentDislike, doc_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents, site_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents, source_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEvents, document_dislikes_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, dislike_doc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, dislike_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions_Reactions, hit_fulltext_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactions, reactions_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactionsArr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactionsArr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactionsArr, reactions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedReactionsArr, last_reaction_time_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shows, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shows, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shows, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shows, shows_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowsArr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowsArr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowsArr, shows_arr_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClick, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClick, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClickArr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClickArr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafloClickArr, clicks_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(UserEvents_SiteDislike)},
  { 7, 13, sizeof(UserEvents_SourceDislike)},
  { 14, 20, sizeof(UserEvents_DocumentDislike)},
  { 21, 29, sizeof(UserEvents)},
  { 32, 42, sizeof(PackedReactions_Reactions)},
  { 47, 54, sizeof(PackedReactions)},
  { 56, 63, sizeof(PackedReactionsArr)},
  { 65, 72, sizeof(Shows)},
  { 74, 80, sizeof(ShowsArr)},
  { 81, 88, sizeof(TrafloClick)},
  { 90, 96, sizeof(TrafloClickArr)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserEvents_SiteDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserEvents_SourceDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserEvents_DocumentDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackedReactions_Reactions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackedReactions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackedReactionsArr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Shows_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowsArr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafloClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafloClickArr_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_user_events.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserEvents_SiteDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserEvents_SiteDislike_default_instance_);_UserEvents_SourceDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserEvents_SourceDislike_default_instance_);_UserEvents_DocumentDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserEvents_DocumentDislike_default_instance_);_UserEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserEvents_default_instance_);_PackedReactions_Reactions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackedReactions_Reactions_default_instance_);_PackedReactions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackedReactions_default_instance_);_PackedReactionsArr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackedReactionsArr_default_instance_);_Shows_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Shows_default_instance_);_ShowsArr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShowsArr_default_instance_);_TrafloClick_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrafloClick_default_instance_);_TrafloClickArr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrafloClickArr_default_instance_);_PackedReactions_default_instance_._instance.get_mutable()->reactions_ = const_cast< ::cosmo::pb::PackedReactions_Reactions*>(
      ::cosmo::pb::PackedReactions_Reactions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027cosmo_user_events.proto\022\010cosmo.pb\"\254\002\n\n"
      "UserEvents\0227\n\rsite_dislikes\030\001 \003(\0132 .cosm"
      "o.pb.UserEvents.SiteDislike\022;\n\017source_di"
      "slikes\030\002 \003(\0132\".cosmo.pb.UserEvents.Sourc"
      "eDislike\022\?\n\021document_dislikes\030\003 \003(\0132$.co"
      "smo.pb.UserEvents.DocumentDislike\032 \n\013Sit"
      "eDislike\022\021\n\tsite_hash\030\001 \002(\003\032\"\n\rSourceDis"
      "like\022\021\n\tsource_id\030\001 \002(\003\032!\n\017DocumentDisli"
      "ke\022\016\n\006doc_id\030\001 \002(\003\"\310\001\n\017PackedReactions\022\016"
      "\n\006doc_id\030\001 \002(\003\0226\n\treactions\030\002 \001(\0132#.cosm"
      "o.pb.PackedReactions.Reactions\032m\n\tReacti"
      "ons\022\016\n\006clicks\030\001 \001(\r\022\r\n\005likes\030\002 \001(\r\022\023\n\013di"
      "slike_doc\030\003 \001(\r\022\026\n\016dislike_source\030\004 \001(\r\022"
      "\024\n\014hit_fulltext\030\005 \001(\r\"^\n\022PackedReactions"
      "Arr\022,\n\treactions\030\001 \003(\0132\031.cosmo.pb.Packed"
      "Reactions\022\032\n\022last_reaction_time\030\002 \001(\003\"&\n"
      "\005Shows\022\016\n\006doc_id\030\001 \002(\003\022\r\n\005shows\030\002 \002(\r\".\n"
      "\010ShowsArr\022\"\n\tshows_arr\030\001 \003(\0132\017.cosmo.pb."
      "Shows\"3\n\013TrafloClick\022\021\n\tsource_id\030\001 \002(\003\022"
      "\021\n\ttimestamp\030\002 \002(\003\"7\n\016TrafloClickArr\022%\n\006"
      "clicks\030\001 \003(\0132\025.cosmo.pb.TrafloClickB\021B\017C"
      "osmoUserEvents"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_user_events.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fuser_5fevents_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEvents_SiteDislike::kSiteHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEvents_SiteDislike::UserEvents_SiteDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserEvents.SiteDislike)
}
UserEvents_SiteDislike::UserEvents_SiteDislike(const UserEvents_SiteDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_hash_ = from.site_hash_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserEvents.SiteDislike)
}

void UserEvents_SiteDislike::SharedCtor() {
  _cached_size_ = 0;
  site_hash_ = GOOGLE_LONGLONG(0);
}

UserEvents_SiteDislike::~UserEvents_SiteDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserEvents.SiteDislike)
  SharedDtor();
}

void UserEvents_SiteDislike::SharedDtor() {
}

void UserEvents_SiteDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEvents_SiteDislike::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserEvents_SiteDislike& UserEvents_SiteDislike::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEvents_SiteDislike* UserEvents_SiteDislike::New(::google::protobuf::Arena* arena) const {
  UserEvents_SiteDislike* n = new UserEvents_SiteDislike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEvents_SiteDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_hash_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEvents_SiteDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserEvents.SiteDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 site_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserEvents.SiteDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserEvents.SiteDislike)
  return false;
#undef DO_
}

void UserEvents_SiteDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 site_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->site_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserEvents.SiteDislike)
}

::google::protobuf::uint8* UserEvents_SiteDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 site_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->site_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserEvents.SiteDislike)
  return target;
}

size_t UserEvents_SiteDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserEvents.SiteDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 site_hash = 1;
  if (has_site_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->site_hash());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEvents_SiteDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserEvents.SiteDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEvents_SiteDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserEvents_SiteDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserEvents.SiteDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserEvents.SiteDislike)
    MergeFrom(*source);
  }
}

void UserEvents_SiteDislike::MergeFrom(const UserEvents_SiteDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserEvents.SiteDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_site_hash()) {
    set_site_hash(from.site_hash());
  }
}

void UserEvents_SiteDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserEvents.SiteDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEvents_SiteDislike::CopyFrom(const UserEvents_SiteDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserEvents.SiteDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvents_SiteDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserEvents_SiteDislike::Swap(UserEvents_SiteDislike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEvents_SiteDislike::InternalSwap(UserEvents_SiteDislike* other) {
  using std::swap;
  swap(site_hash_, other->site_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserEvents_SiteDislike::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEvents_SiteDislike

// required int64 site_hash = 1;
bool UserEvents_SiteDislike::has_site_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEvents_SiteDislike::set_has_site_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEvents_SiteDislike::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEvents_SiteDislike::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 UserEvents_SiteDislike::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.SiteDislike.site_hash)
  return site_hash_;
}
void UserEvents_SiteDislike::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.SiteDislike.site_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEvents_SourceDislike::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEvents_SourceDislike::UserEvents_SourceDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserEvents.SourceDislike)
}
UserEvents_SourceDislike::UserEvents_SourceDislike(const UserEvents_SourceDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserEvents.SourceDislike)
}

void UserEvents_SourceDislike::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = GOOGLE_LONGLONG(0);
}

UserEvents_SourceDislike::~UserEvents_SourceDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserEvents.SourceDislike)
  SharedDtor();
}

void UserEvents_SourceDislike::SharedDtor() {
}

void UserEvents_SourceDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEvents_SourceDislike::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserEvents_SourceDislike& UserEvents_SourceDislike::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEvents_SourceDislike* UserEvents_SourceDislike::New(::google::protobuf::Arena* arena) const {
  UserEvents_SourceDislike* n = new UserEvents_SourceDislike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEvents_SourceDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEvents_SourceDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserEvents.SourceDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserEvents.SourceDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserEvents.SourceDislike)
  return false;
#undef DO_
}

void UserEvents_SourceDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserEvents.SourceDislike)
}

::google::protobuf::uint8* UserEvents_SourceDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserEvents.SourceDislike)
  return target;
}

size_t UserEvents_SourceDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserEvents.SourceDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEvents_SourceDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserEvents.SourceDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEvents_SourceDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserEvents_SourceDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserEvents.SourceDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserEvents.SourceDislike)
    MergeFrom(*source);
  }
}

void UserEvents_SourceDislike::MergeFrom(const UserEvents_SourceDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserEvents.SourceDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    set_source_id(from.source_id());
  }
}

void UserEvents_SourceDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserEvents.SourceDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEvents_SourceDislike::CopyFrom(const UserEvents_SourceDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserEvents.SourceDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvents_SourceDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserEvents_SourceDislike::Swap(UserEvents_SourceDislike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEvents_SourceDislike::InternalSwap(UserEvents_SourceDislike* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserEvents_SourceDislike::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEvents_SourceDislike

// required int64 source_id = 1;
bool UserEvents_SourceDislike::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEvents_SourceDislike::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEvents_SourceDislike::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEvents_SourceDislike::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserEvents_SourceDislike::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.SourceDislike.source_id)
  return source_id_;
}
void UserEvents_SourceDislike::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.SourceDislike.source_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEvents_DocumentDislike::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEvents_DocumentDislike::UserEvents_DocumentDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserEvents.DocumentDislike)
}
UserEvents_DocumentDislike::UserEvents_DocumentDislike(const UserEvents_DocumentDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserEvents.DocumentDislike)
}

void UserEvents_DocumentDislike::SharedCtor() {
  _cached_size_ = 0;
  doc_id_ = GOOGLE_LONGLONG(0);
}

UserEvents_DocumentDislike::~UserEvents_DocumentDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserEvents.DocumentDislike)
  SharedDtor();
}

void UserEvents_DocumentDislike::SharedDtor() {
}

void UserEvents_DocumentDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEvents_DocumentDislike::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserEvents_DocumentDislike& UserEvents_DocumentDislike::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEvents_DocumentDislike* UserEvents_DocumentDislike::New(::google::protobuf::Arena* arena) const {
  UserEvents_DocumentDislike* n = new UserEvents_DocumentDislike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEvents_DocumentDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEvents_DocumentDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserEvents.DocumentDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserEvents.DocumentDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserEvents.DocumentDislike)
  return false;
#undef DO_
}

void UserEvents_DocumentDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserEvents.DocumentDislike)
}

::google::protobuf::uint8* UserEvents_DocumentDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserEvents.DocumentDislike)
  return target;
}

size_t UserEvents_DocumentDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserEvents.DocumentDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEvents_DocumentDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserEvents.DocumentDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEvents_DocumentDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserEvents_DocumentDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserEvents.DocumentDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserEvents.DocumentDislike)
    MergeFrom(*source);
  }
}

void UserEvents_DocumentDislike::MergeFrom(const UserEvents_DocumentDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserEvents.DocumentDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_doc_id()) {
    set_doc_id(from.doc_id());
  }
}

void UserEvents_DocumentDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserEvents.DocumentDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEvents_DocumentDislike::CopyFrom(const UserEvents_DocumentDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserEvents.DocumentDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvents_DocumentDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserEvents_DocumentDislike::Swap(UserEvents_DocumentDislike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEvents_DocumentDislike::InternalSwap(UserEvents_DocumentDislike* other) {
  using std::swap;
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserEvents_DocumentDislike::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEvents_DocumentDislike

// required int64 doc_id = 1;
bool UserEvents_DocumentDislike::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEvents_DocumentDislike::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEvents_DocumentDislike::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEvents_DocumentDislike::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 UserEvents_DocumentDislike::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.DocumentDislike.doc_id)
  return doc_id_;
}
void UserEvents_DocumentDislike::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.DocumentDislike.doc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEvents::kSiteDislikesFieldNumber;
const int UserEvents::kSourceDislikesFieldNumber;
const int UserEvents::kDocumentDislikesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEvents::UserEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserEvents)
}
UserEvents::UserEvents(const UserEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      site_dislikes_(from.site_dislikes_),
      source_dislikes_(from.source_dislikes_),
      document_dislikes_(from.document_dislikes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserEvents)
}

void UserEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserEvents::~UserEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserEvents)
  SharedDtor();
}

void UserEvents::SharedDtor() {
}

void UserEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEvents::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserEvents& UserEvents::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEvents* UserEvents::New(::google::protobuf::Arena* arena) const {
  UserEvents* n = new UserEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_dislikes_.Clear();
  source_dislikes_.Clear();
  document_dislikes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_document_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserEvents)
  return false;
#undef DO_
}

void UserEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->site_dislikes(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->source_dislikes(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->document_dislikes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserEvents)
}

::google::protobuf::uint8* UserEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->site_dislikes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->source_dislikes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->document_dislikes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserEvents)
  return target;
}

size_t UserEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->site_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site_dislikes(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->source_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_dislikes(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->document_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document_dislikes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserEvents)
    MergeFrom(*source);
  }
}

void UserEvents::MergeFrom(const UserEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_dislikes_.MergeFrom(from.site_dislikes_);
  source_dislikes_.MergeFrom(from.source_dislikes_);
  document_dislikes_.MergeFrom(from.document_dislikes_);
}

void UserEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEvents::CopyFrom(const UserEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->site_dislikes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->source_dislikes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->document_dislikes())) return false;
  return true;
}

void UserEvents::Swap(UserEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEvents::InternalSwap(UserEvents* other) {
  using std::swap;
  site_dislikes_.InternalSwap(&other->site_dislikes_);
  source_dislikes_.InternalSwap(&other->source_dislikes_);
  document_dislikes_.InternalSwap(&other->document_dislikes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserEvents::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEvents

// repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
int UserEvents::site_dislikes_size() const {
  return site_dislikes_.size();
}
void UserEvents::clear_site_dislikes() {
  site_dislikes_.Clear();
}
const ::cosmo::pb::UserEvents_SiteDislike& UserEvents::site_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Get(index);
}
::cosmo::pb::UserEvents_SiteDislike* UserEvents::mutable_site_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Mutable(index);
}
::cosmo::pb::UserEvents_SiteDislike* UserEvents::add_site_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >*
UserEvents::mutable_site_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.site_dislikes)
  return &site_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >&
UserEvents::site_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_;
}

// repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
int UserEvents::source_dislikes_size() const {
  return source_dislikes_.size();
}
void UserEvents::clear_source_dislikes() {
  source_dislikes_.Clear();
}
const ::cosmo::pb::UserEvents_SourceDislike& UserEvents::source_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Get(index);
}
::cosmo::pb::UserEvents_SourceDislike* UserEvents::mutable_source_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Mutable(index);
}
::cosmo::pb::UserEvents_SourceDislike* UserEvents::add_source_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >*
UserEvents::mutable_source_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.source_dislikes)
  return &source_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >&
UserEvents::source_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_;
}

// repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
int UserEvents::document_dislikes_size() const {
  return document_dislikes_.size();
}
void UserEvents::clear_document_dislikes() {
  document_dislikes_.Clear();
}
const ::cosmo::pb::UserEvents_DocumentDislike& UserEvents::document_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Get(index);
}
::cosmo::pb::UserEvents_DocumentDislike* UserEvents::mutable_document_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Mutable(index);
}
::cosmo::pb::UserEvents_DocumentDislike* UserEvents::add_document_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >*
UserEvents::mutable_document_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.document_dislikes)
  return &document_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >&
UserEvents::document_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackedReactions_Reactions::kClicksFieldNumber;
const int PackedReactions_Reactions::kLikesFieldNumber;
const int PackedReactions_Reactions::kDislikeDocFieldNumber;
const int PackedReactions_Reactions::kDislikeSourceFieldNumber;
const int PackedReactions_Reactions::kHitFulltextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackedReactions_Reactions::PackedReactions_Reactions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.PackedReactions.Reactions)
}
PackedReactions_Reactions::PackedReactions_Reactions(const PackedReactions_Reactions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clicks_, &from.clicks_,
    static_cast<size_t>(reinterpret_cast<char*>(&hit_fulltext_) -
    reinterpret_cast<char*>(&clicks_)) + sizeof(hit_fulltext_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.PackedReactions.Reactions)
}

void PackedReactions_Reactions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clicks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_fulltext_) -
      reinterpret_cast<char*>(&clicks_)) + sizeof(hit_fulltext_));
}

PackedReactions_Reactions::~PackedReactions_Reactions() {
  // @@protoc_insertion_point(destructor:cosmo.pb.PackedReactions.Reactions)
  SharedDtor();
}

void PackedReactions_Reactions::SharedDtor() {
}

void PackedReactions_Reactions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackedReactions_Reactions::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackedReactions_Reactions& PackedReactions_Reactions::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackedReactions_Reactions* PackedReactions_Reactions::New(::google::protobuf::Arena* arena) const {
  PackedReactions_Reactions* n = new PackedReactions_Reactions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackedReactions_Reactions::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.PackedReactions.Reactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&clicks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hit_fulltext_) -
        reinterpret_cast<char*>(&clicks_)) + sizeof(hit_fulltext_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackedReactions_Reactions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.PackedReactions.Reactions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clicks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 likes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislike_doc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dislike_doc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislike_doc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislike_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dislike_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislike_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hit_fulltext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hit_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.PackedReactions.Reactions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.PackedReactions.Reactions)
  return false;
#undef DO_
}

void PackedReactions_Reactions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.PackedReactions.Reactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clicks = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clicks(), output);
  }

  // optional uint32 likes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->likes(), output);
  }

  // optional uint32 dislike_doc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dislike_doc(), output);
  }

  // optional uint32 dislike_source = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dislike_source(), output);
  }

  // optional uint32 hit_fulltext = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hit_fulltext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.PackedReactions.Reactions)
}

::google::protobuf::uint8* PackedReactions_Reactions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.PackedReactions.Reactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clicks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clicks(), target);
  }

  // optional uint32 likes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->likes(), target);
  }

  // optional uint32 dislike_doc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dislike_doc(), target);
  }

  // optional uint32 dislike_source = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dislike_source(), target);
  }

  // optional uint32 hit_fulltext = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hit_fulltext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.PackedReactions.Reactions)
  return target;
}

size_t PackedReactions_Reactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.PackedReactions.Reactions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 clicks = 1;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

    // optional uint32 likes = 2;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likes());
    }

    // optional uint32 dislike_doc = 3;
    if (has_dislike_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislike_doc());
    }

    // optional uint32 dislike_source = 4;
    if (has_dislike_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislike_source());
    }

    // optional uint32 hit_fulltext = 5;
    if (has_hit_fulltext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_fulltext());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackedReactions_Reactions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.PackedReactions.Reactions)
  GOOGLE_DCHECK_NE(&from, this);
  const PackedReactions_Reactions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackedReactions_Reactions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.PackedReactions.Reactions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.PackedReactions.Reactions)
    MergeFrom(*source);
  }
}

void PackedReactions_Reactions::MergeFrom(const PackedReactions_Reactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.PackedReactions.Reactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000002u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000004u) {
      dislike_doc_ = from.dislike_doc_;
    }
    if (cached_has_bits & 0x00000008u) {
      dislike_source_ = from.dislike_source_;
    }
    if (cached_has_bits & 0x00000010u) {
      hit_fulltext_ = from.hit_fulltext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackedReactions_Reactions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.PackedReactions.Reactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackedReactions_Reactions::CopyFrom(const PackedReactions_Reactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.PackedReactions.Reactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedReactions_Reactions::IsInitialized() const {
  return true;
}

void PackedReactions_Reactions::Swap(PackedReactions_Reactions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackedReactions_Reactions::InternalSwap(PackedReactions_Reactions* other) {
  using std::swap;
  swap(clicks_, other->clicks_);
  swap(likes_, other->likes_);
  swap(dislike_doc_, other->dislike_doc_);
  swap(dislike_source_, other->dislike_source_);
  swap(hit_fulltext_, other->hit_fulltext_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackedReactions_Reactions::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackedReactions_Reactions

// optional uint32 clicks = 1;
bool PackedReactions_Reactions::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackedReactions_Reactions::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
void PackedReactions_Reactions::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackedReactions_Reactions::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 PackedReactions_Reactions::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.clicks)
  return clicks_;
}
void PackedReactions_Reactions::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.clicks)
}

// optional uint32 likes = 2;
bool PackedReactions_Reactions::has_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackedReactions_Reactions::set_has_likes() {
  _has_bits_[0] |= 0x00000002u;
}
void PackedReactions_Reactions::clear_has_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackedReactions_Reactions::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
::google::protobuf::uint32 PackedReactions_Reactions::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.likes)
  return likes_;
}
void PackedReactions_Reactions::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.likes)
}

// optional uint32 dislike_doc = 3;
bool PackedReactions_Reactions::has_dislike_doc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PackedReactions_Reactions::set_has_dislike_doc() {
  _has_bits_[0] |= 0x00000004u;
}
void PackedReactions_Reactions::clear_has_dislike_doc() {
  _has_bits_[0] &= ~0x00000004u;
}
void PackedReactions_Reactions::clear_dislike_doc() {
  dislike_doc_ = 0u;
  clear_has_dislike_doc();
}
::google::protobuf::uint32 PackedReactions_Reactions::dislike_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.dislike_doc)
  return dislike_doc_;
}
void PackedReactions_Reactions::set_dislike_doc(::google::protobuf::uint32 value) {
  set_has_dislike_doc();
  dislike_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.dislike_doc)
}

// optional uint32 dislike_source = 4;
bool PackedReactions_Reactions::has_dislike_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PackedReactions_Reactions::set_has_dislike_source() {
  _has_bits_[0] |= 0x00000008u;
}
void PackedReactions_Reactions::clear_has_dislike_source() {
  _has_bits_[0] &= ~0x00000008u;
}
void PackedReactions_Reactions::clear_dislike_source() {
  dislike_source_ = 0u;
  clear_has_dislike_source();
}
::google::protobuf::uint32 PackedReactions_Reactions::dislike_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.dislike_source)
  return dislike_source_;
}
void PackedReactions_Reactions::set_dislike_source(::google::protobuf::uint32 value) {
  set_has_dislike_source();
  dislike_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.dislike_source)
}

// optional uint32 hit_fulltext = 5;
bool PackedReactions_Reactions::has_hit_fulltext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PackedReactions_Reactions::set_has_hit_fulltext() {
  _has_bits_[0] |= 0x00000010u;
}
void PackedReactions_Reactions::clear_has_hit_fulltext() {
  _has_bits_[0] &= ~0x00000010u;
}
void PackedReactions_Reactions::clear_hit_fulltext() {
  hit_fulltext_ = 0u;
  clear_has_hit_fulltext();
}
::google::protobuf::uint32 PackedReactions_Reactions::hit_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.hit_fulltext)
  return hit_fulltext_;
}
void PackedReactions_Reactions::set_hit_fulltext(::google::protobuf::uint32 value) {
  set_has_hit_fulltext();
  hit_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.hit_fulltext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackedReactions::kDocIdFieldNumber;
const int PackedReactions::kReactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackedReactions::PackedReactions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.PackedReactions)
}
PackedReactions::PackedReactions(const PackedReactions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reactions()) {
    reactions_ = new ::cosmo::pb::PackedReactions_Reactions(*from.reactions_);
  } else {
    reactions_ = NULL;
  }
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.PackedReactions)
}

void PackedReactions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reactions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&reactions_)) + sizeof(doc_id_));
}

PackedReactions::~PackedReactions() {
  // @@protoc_insertion_point(destructor:cosmo.pb.PackedReactions)
  SharedDtor();
}

void PackedReactions::SharedDtor() {
  if (this != internal_default_instance()) delete reactions_;
}

void PackedReactions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackedReactions::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackedReactions& PackedReactions::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackedReactions* PackedReactions::New(::google::protobuf::Arena* arena) const {
  PackedReactions* n = new PackedReactions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackedReactions::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.PackedReactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_reactions()) {
    GOOGLE_DCHECK(reactions_ != NULL);
    reactions_->::cosmo::pb::PackedReactions_Reactions::Clear();
  }
  doc_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackedReactions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.PackedReactions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.PackedReactions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.PackedReactions)
  return false;
#undef DO_
}

void PackedReactions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.PackedReactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reactions_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.PackedReactions)
}

::google::protobuf::uint8* PackedReactions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.PackedReactions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reactions_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.PackedReactions)
  return target;
}

size_t PackedReactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.PackedReactions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  // optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
  if (has_reactions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reactions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackedReactions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.PackedReactions)
  GOOGLE_DCHECK_NE(&from, this);
  const PackedReactions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackedReactions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.PackedReactions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.PackedReactions)
    MergeFrom(*source);
  }
}

void PackedReactions::MergeFrom(const PackedReactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.PackedReactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reactions()->::cosmo::pb::PackedReactions_Reactions::MergeFrom(from.reactions());
    }
    if (cached_has_bits & 0x00000002u) {
      doc_id_ = from.doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackedReactions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.PackedReactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackedReactions::CopyFrom(const PackedReactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.PackedReactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedReactions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PackedReactions::Swap(PackedReactions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackedReactions::InternalSwap(PackedReactions* other) {
  using std::swap;
  swap(reactions_, other->reactions_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackedReactions::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackedReactions

// required int64 doc_id = 1;
bool PackedReactions::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackedReactions::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PackedReactions::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackedReactions::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 PackedReactions::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.doc_id)
  return doc_id_;
}
void PackedReactions::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.doc_id)
}

// optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
bool PackedReactions::has_reactions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackedReactions::set_has_reactions() {
  _has_bits_[0] |= 0x00000001u;
}
void PackedReactions::clear_has_reactions() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackedReactions::clear_reactions() {
  if (reactions_ != NULL) reactions_->::cosmo::pb::PackedReactions_Reactions::Clear();
  clear_has_reactions();
}
const ::cosmo::pb::PackedReactions_Reactions& PackedReactions::reactions() const {
  const ::cosmo::pb::PackedReactions_Reactions* p = reactions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.reactions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PackedReactions_Reactions*>(
      &::cosmo::pb::_PackedReactions_Reactions_default_instance_);
}
::cosmo::pb::PackedReactions_Reactions* PackedReactions::mutable_reactions() {
  set_has_reactions();
  if (reactions_ == NULL) {
    reactions_ = new ::cosmo::pb::PackedReactions_Reactions;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PackedReactions.reactions)
  return reactions_;
}
::cosmo::pb::PackedReactions_Reactions* PackedReactions::release_reactions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PackedReactions.reactions)
  clear_has_reactions();
  ::cosmo::pb::PackedReactions_Reactions* temp = reactions_;
  reactions_ = NULL;
  return temp;
}
void PackedReactions::set_allocated_reactions(::cosmo::pb::PackedReactions_Reactions* reactions) {
  delete reactions_;
  reactions_ = reactions;
  if (reactions) {
    set_has_reactions();
  } else {
    clear_has_reactions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PackedReactions.reactions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackedReactionsArr::kReactionsFieldNumber;
const int PackedReactionsArr::kLastReactionTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackedReactionsArr::PackedReactionsArr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.PackedReactionsArr)
}
PackedReactionsArr::PackedReactionsArr(const PackedReactionsArr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reactions_(from.reactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_reaction_time_ = from.last_reaction_time_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.PackedReactionsArr)
}

void PackedReactionsArr::SharedCtor() {
  _cached_size_ = 0;
  last_reaction_time_ = GOOGLE_LONGLONG(0);
}

PackedReactionsArr::~PackedReactionsArr() {
  // @@protoc_insertion_point(destructor:cosmo.pb.PackedReactionsArr)
  SharedDtor();
}

void PackedReactionsArr::SharedDtor() {
}

void PackedReactionsArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackedReactionsArr::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackedReactionsArr& PackedReactionsArr::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackedReactionsArr* PackedReactionsArr::New(::google::protobuf::Arena* arena) const {
  PackedReactionsArr* n = new PackedReactionsArr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackedReactionsArr::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.PackedReactionsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactions_.Clear();
  last_reaction_time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackedReactionsArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.PackedReactionsArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.PackedReactions reactions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_reaction_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_reaction_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reaction_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.PackedReactionsArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.PackedReactionsArr)
  return false;
#undef DO_
}

void PackedReactionsArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.PackedReactionsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.PackedReactions reactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reactions(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 last_reaction_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_reaction_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.PackedReactionsArr)
}

::google::protobuf::uint8* PackedReactionsArr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.PackedReactionsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.PackedReactions reactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reactions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->reactions(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 last_reaction_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_reaction_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.PackedReactionsArr)
  return target;
}

size_t PackedReactionsArr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.PackedReactionsArr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.PackedReactions reactions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->reactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reactions(static_cast<int>(i)));
    }
  }

  // optional int64 last_reaction_time = 2;
  if (has_last_reaction_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_reaction_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackedReactionsArr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.PackedReactionsArr)
  GOOGLE_DCHECK_NE(&from, this);
  const PackedReactionsArr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackedReactionsArr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.PackedReactionsArr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.PackedReactionsArr)
    MergeFrom(*source);
  }
}

void PackedReactionsArr::MergeFrom(const PackedReactionsArr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.PackedReactionsArr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reactions_.MergeFrom(from.reactions_);
  if (from.has_last_reaction_time()) {
    set_last_reaction_time(from.last_reaction_time());
  }
}

void PackedReactionsArr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.PackedReactionsArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackedReactionsArr::CopyFrom(const PackedReactionsArr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.PackedReactionsArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedReactionsArr::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->reactions())) return false;
  return true;
}

void PackedReactionsArr::Swap(PackedReactionsArr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackedReactionsArr::InternalSwap(PackedReactionsArr* other) {
  using std::swap;
  reactions_.InternalSwap(&other->reactions_);
  swap(last_reaction_time_, other->last_reaction_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackedReactionsArr::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackedReactionsArr

// repeated .cosmo.pb.PackedReactions reactions = 1;
int PackedReactionsArr::reactions_size() const {
  return reactions_.size();
}
void PackedReactionsArr::clear_reactions() {
  reactions_.Clear();
}
const ::cosmo::pb::PackedReactions& PackedReactionsArr::reactions(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Get(index);
}
::cosmo::pb::PackedReactions* PackedReactionsArr::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Mutable(index);
}
::cosmo::pb::PackedReactions* PackedReactionsArr::add_reactions() {
  // @@protoc_insertion_point(field_add:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >*
PackedReactionsArr::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PackedReactionsArr.reactions)
  return &reactions_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >&
PackedReactionsArr::reactions() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_;
}

// optional int64 last_reaction_time = 2;
bool PackedReactionsArr::has_last_reaction_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackedReactionsArr::set_has_last_reaction_time() {
  _has_bits_[0] |= 0x00000001u;
}
void PackedReactionsArr::clear_has_last_reaction_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackedReactionsArr::clear_last_reaction_time() {
  last_reaction_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_reaction_time();
}
::google::protobuf::int64 PackedReactionsArr::last_reaction_time() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactionsArr.last_reaction_time)
  return last_reaction_time_;
}
void PackedReactionsArr::set_last_reaction_time(::google::protobuf::int64 value) {
  set_has_last_reaction_time();
  last_reaction_time_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactionsArr.last_reaction_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shows::kDocIdFieldNumber;
const int Shows::kShowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shows::Shows()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.Shows)
}
Shows::Shows(const Shows& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shows_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(shows_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.Shows)
}

void Shows::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shows_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(shows_));
}

Shows::~Shows() {
  // @@protoc_insertion_point(destructor:cosmo.pb.Shows)
  SharedDtor();
}

void Shows::SharedDtor() {
}

void Shows::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shows::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shows& Shows::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

Shows* Shows::New(::google::protobuf::Arena* arena) const {
  Shows* n = new Shows;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shows::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.Shows)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shows_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(shows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shows::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.Shows)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 shows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.Shows)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.Shows)
  return false;
#undef DO_
}

void Shows::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.Shows)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // required uint32 shows = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shows(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.Shows)
}

::google::protobuf::uint8* Shows::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.Shows)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // required uint32 shows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shows(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.Shows)
  return target;
}

size_t Shows::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.Shows)
  size_t total_size = 0;

  if (has_doc_id()) {
    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  if (has_shows()) {
    // required uint32 shows = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shows());
  }

  return total_size;
}
size_t Shows::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.Shows)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());

    // required uint32 shows = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shows::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.Shows)
  GOOGLE_DCHECK_NE(&from, this);
  const Shows* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shows>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.Shows)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.Shows)
    MergeFrom(*source);
  }
}

void Shows::MergeFrom(const Shows& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.Shows)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      shows_ = from.shows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shows::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.Shows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shows::CopyFrom(const Shows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.Shows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shows::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Shows::Swap(Shows* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shows::InternalSwap(Shows* other) {
  using std::swap;
  swap(doc_id_, other->doc_id_);
  swap(shows_, other->shows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shows::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shows

// required int64 doc_id = 1;
bool Shows::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Shows::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Shows::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Shows::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 Shows::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Shows.doc_id)
  return doc_id_;
}
void Shows::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Shows.doc_id)
}

// required uint32 shows = 2;
bool Shows::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Shows::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
void Shows::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
void Shows::clear_shows() {
  shows_ = 0u;
  clear_has_shows();
}
::google::protobuf::uint32 Shows::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Shows.shows)
  return shows_;
}
void Shows::set_shows(::google::protobuf::uint32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Shows.shows)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowsArr::kShowsArrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowsArr::ShowsArr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.ShowsArr)
}
ShowsArr::ShowsArr(const ShowsArr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shows_arr_(from.shows_arr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.ShowsArr)
}

void ShowsArr::SharedCtor() {
  _cached_size_ = 0;
}

ShowsArr::~ShowsArr() {
  // @@protoc_insertion_point(destructor:cosmo.pb.ShowsArr)
  SharedDtor();
}

void ShowsArr::SharedDtor() {
}

void ShowsArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowsArr::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowsArr& ShowsArr::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowsArr* ShowsArr::New(::google::protobuf::Arena* arena) const {
  ShowsArr* n = new ShowsArr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowsArr::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.ShowsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shows_arr_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowsArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.ShowsArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.Shows shows_arr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shows_arr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.ShowsArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.ShowsArr)
  return false;
#undef DO_
}

void ShowsArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.ShowsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Shows shows_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shows_arr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shows_arr(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.ShowsArr)
}

::google::protobuf::uint8* ShowsArr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.ShowsArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Shows shows_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shows_arr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shows_arr(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.ShowsArr)
  return target;
}

size_t ShowsArr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.ShowsArr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.Shows shows_arr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shows_arr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shows_arr(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowsArr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.ShowsArr)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowsArr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowsArr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.ShowsArr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.ShowsArr)
    MergeFrom(*source);
  }
}

void ShowsArr::MergeFrom(const ShowsArr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.ShowsArr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shows_arr_.MergeFrom(from.shows_arr_);
}

void ShowsArr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.ShowsArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowsArr::CopyFrom(const ShowsArr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.ShowsArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowsArr::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->shows_arr())) return false;
  return true;
}

void ShowsArr::Swap(ShowsArr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowsArr::InternalSwap(ShowsArr* other) {
  using std::swap;
  shows_arr_.InternalSwap(&other->shows_arr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowsArr::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowsArr

// repeated .cosmo.pb.Shows shows_arr = 1;
int ShowsArr::shows_arr_size() const {
  return shows_arr_.size();
}
void ShowsArr::clear_shows_arr() {
  shows_arr_.Clear();
}
const ::cosmo::pb::Shows& ShowsArr::shows_arr(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Get(index);
}
::cosmo::pb::Shows* ShowsArr::mutable_shows_arr(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Mutable(index);
}
::cosmo::pb::Shows* ShowsArr::add_shows_arr() {
  // @@protoc_insertion_point(field_add:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >*
ShowsArr::mutable_shows_arr() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.ShowsArr.shows_arr)
  return &shows_arr_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >&
ShowsArr::shows_arr() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafloClick::kSourceIdFieldNumber;
const int TrafloClick::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafloClick::TrafloClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.TrafloClick)
}
TrafloClick::TrafloClick(const TrafloClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.TrafloClick)
}

void TrafloClick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(timestamp_));
}

TrafloClick::~TrafloClick() {
  // @@protoc_insertion_point(destructor:cosmo.pb.TrafloClick)
  SharedDtor();
}

void TrafloClick::SharedDtor() {
}

void TrafloClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafloClick::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafloClick& TrafloClick::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafloClick* TrafloClick::New(::google::protobuf::Arena* arena) const {
  TrafloClick* n = new TrafloClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafloClick::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.TrafloClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafloClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.TrafloClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.TrafloClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.TrafloClick)
  return false;
#undef DO_
}

void TrafloClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.TrafloClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.TrafloClick)
}

::google::protobuf::uint8* TrafloClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.TrafloClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.TrafloClick)
  return target;
}

size_t TrafloClick::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.TrafloClick)
  size_t total_size = 0;

  if (has_source_id()) {
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t TrafloClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.TrafloClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafloClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.TrafloClick)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafloClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafloClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.TrafloClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.TrafloClick)
    MergeFrom(*source);
  }
}

void TrafloClick::MergeFrom(const TrafloClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.TrafloClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafloClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.TrafloClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafloClick::CopyFrom(const TrafloClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.TrafloClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafloClick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TrafloClick::Swap(TrafloClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafloClick::InternalSwap(TrafloClick* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafloClick::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafloClick

// required int64 source_id = 1;
bool TrafloClick::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafloClick::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafloClick::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafloClick::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 TrafloClick::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClick.source_id)
  return source_id_;
}
void TrafloClick::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.TrafloClick.source_id)
}

// required int64 timestamp = 2;
bool TrafloClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafloClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafloClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafloClick::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 TrafloClick::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClick.timestamp)
  return timestamp_;
}
void TrafloClick::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.TrafloClick.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafloClickArr::kClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafloClickArr::TrafloClickArr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.TrafloClickArr)
}
TrafloClickArr::TrafloClickArr(const TrafloClickArr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      clicks_(from.clicks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.TrafloClickArr)
}

void TrafloClickArr::SharedCtor() {
  _cached_size_ = 0;
}

TrafloClickArr::~TrafloClickArr() {
  // @@protoc_insertion_point(destructor:cosmo.pb.TrafloClickArr)
  SharedDtor();
}

void TrafloClickArr::SharedDtor() {
}

void TrafloClickArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafloClickArr::descriptor() {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafloClickArr& TrafloClickArr::default_instance() {
  protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafloClickArr* TrafloClickArr::New(::google::protobuf::Arena* arena) const {
  TrafloClickArr* n = new TrafloClickArr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafloClickArr::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.TrafloClickArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clicks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafloClickArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.TrafloClickArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.TrafloClick clicks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.TrafloClickArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.TrafloClickArr)
  return false;
#undef DO_
}

void TrafloClickArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.TrafloClickArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.TrafloClick clicks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clicks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.TrafloClickArr)
}

::google::protobuf::uint8* TrafloClickArr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.TrafloClickArr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.TrafloClick clicks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clicks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.TrafloClickArr)
  return target;
}

size_t TrafloClickArr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.TrafloClickArr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.TrafloClick clicks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->clicks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clicks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafloClickArr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.TrafloClickArr)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafloClickArr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafloClickArr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.TrafloClickArr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.TrafloClickArr)
    MergeFrom(*source);
  }
}

void TrafloClickArr::MergeFrom(const TrafloClickArr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.TrafloClickArr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clicks_.MergeFrom(from.clicks_);
}

void TrafloClickArr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.TrafloClickArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafloClickArr::CopyFrom(const TrafloClickArr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.TrafloClickArr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafloClickArr::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->clicks())) return false;
  return true;
}

void TrafloClickArr::Swap(TrafloClickArr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafloClickArr::InternalSwap(TrafloClickArr* other) {
  using std::swap;
  clicks_.InternalSwap(&other->clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafloClickArr::GetMetadata() const {
  protobuf_cosmo_5fuser_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fuser_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafloClickArr

// repeated .cosmo.pb.TrafloClick clicks = 1;
int TrafloClickArr::clicks_size() const {
  return clicks_.size();
}
void TrafloClickArr::clear_clicks() {
  clicks_.Clear();
}
const ::cosmo::pb::TrafloClick& TrafloClickArr::clicks(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Get(index);
}
::cosmo::pb::TrafloClick* TrafloClickArr::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Mutable(index);
}
::cosmo::pb::TrafloClick* TrafloClickArr::add_clicks() {
  // @@protoc_insertion_point(field_add:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >*
TrafloClickArr::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.TrafloClickArr.clicks)
  return &clicks_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >&
TrafloClickArr::clicks() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.TrafloClickArr.clicks)
  return clicks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
