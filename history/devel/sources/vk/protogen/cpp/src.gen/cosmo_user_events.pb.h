// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_user_events.proto

#ifndef PROTOBUF_cosmo_5fuser_5fevents_2eproto__INCLUDED
#define PROTOBUF_cosmo_5fuser_5fevents_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cosmo {
namespace pb {
class PackedReactions;
class PackedReactionsDefaultTypeInternal;
extern PackedReactionsDefaultTypeInternal _PackedReactions_default_instance_;
class PackedReactionsArr;
class PackedReactionsArrDefaultTypeInternal;
extern PackedReactionsArrDefaultTypeInternal _PackedReactionsArr_default_instance_;
class PackedReactions_Reactions;
class PackedReactions_ReactionsDefaultTypeInternal;
extern PackedReactions_ReactionsDefaultTypeInternal _PackedReactions_Reactions_default_instance_;
class Shows;
class ShowsDefaultTypeInternal;
extern ShowsDefaultTypeInternal _Shows_default_instance_;
class ShowsArr;
class ShowsArrDefaultTypeInternal;
extern ShowsArrDefaultTypeInternal _ShowsArr_default_instance_;
class TrafloClick;
class TrafloClickDefaultTypeInternal;
extern TrafloClickDefaultTypeInternal _TrafloClick_default_instance_;
class TrafloClickArr;
class TrafloClickArrDefaultTypeInternal;
extern TrafloClickArrDefaultTypeInternal _TrafloClickArr_default_instance_;
class UserEvents;
class UserEventsDefaultTypeInternal;
extern UserEventsDefaultTypeInternal _UserEvents_default_instance_;
class UserEvents_DocumentDislike;
class UserEvents_DocumentDislikeDefaultTypeInternal;
extern UserEvents_DocumentDislikeDefaultTypeInternal _UserEvents_DocumentDislike_default_instance_;
class UserEvents_SiteDislike;
class UserEvents_SiteDislikeDefaultTypeInternal;
extern UserEvents_SiteDislikeDefaultTypeInternal _UserEvents_SiteDislike_default_instance_;
class UserEvents_SourceDislike;
class UserEvents_SourceDislikeDefaultTypeInternal;
extern UserEvents_SourceDislikeDefaultTypeInternal _UserEvents_SourceDislike_default_instance_;
}  // namespace pb
}  // namespace cosmo

namespace cosmo {
namespace pb {

namespace protobuf_cosmo_5fuser_5fevents_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_5fuser_5fevents_2eproto

// ===================================================================

class UserEvents_SiteDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserEvents.SiteDislike) */ {
 public:
  UserEvents_SiteDislike();
  virtual ~UserEvents_SiteDislike();

  UserEvents_SiteDislike(const UserEvents_SiteDislike& from);

  inline UserEvents_SiteDislike& operator=(const UserEvents_SiteDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEvents_SiteDislike(UserEvents_SiteDislike&& from) noexcept
    : UserEvents_SiteDislike() {
    *this = ::std::move(from);
  }

  inline UserEvents_SiteDislike& operator=(UserEvents_SiteDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEvents_SiteDislike& default_instance();

  static inline const UserEvents_SiteDislike* internal_default_instance() {
    return reinterpret_cast<const UserEvents_SiteDislike*>(
               &_UserEvents_SiteDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserEvents_SiteDislike* other);
  friend void swap(UserEvents_SiteDislike& a, UserEvents_SiteDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEvents_SiteDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEvents_SiteDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserEvents_SiteDislike& from);
  void MergeFrom(const UserEvents_SiteDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserEvents_SiteDislike* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 site_hash = 1;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 1;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserEvents.SiteDislike)
 private:
  void set_has_site_hash();
  void clear_has_site_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 site_hash_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEvents_SourceDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserEvents.SourceDislike) */ {
 public:
  UserEvents_SourceDislike();
  virtual ~UserEvents_SourceDislike();

  UserEvents_SourceDislike(const UserEvents_SourceDislike& from);

  inline UserEvents_SourceDislike& operator=(const UserEvents_SourceDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEvents_SourceDislike(UserEvents_SourceDislike&& from) noexcept
    : UserEvents_SourceDislike() {
    *this = ::std::move(from);
  }

  inline UserEvents_SourceDislike& operator=(UserEvents_SourceDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEvents_SourceDislike& default_instance();

  static inline const UserEvents_SourceDislike* internal_default_instance() {
    return reinterpret_cast<const UserEvents_SourceDislike*>(
               &_UserEvents_SourceDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserEvents_SourceDislike* other);
  friend void swap(UserEvents_SourceDislike& a, UserEvents_SourceDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEvents_SourceDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEvents_SourceDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserEvents_SourceDislike& from);
  void MergeFrom(const UserEvents_SourceDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserEvents_SourceDislike* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserEvents.SourceDislike)
 private:
  void set_has_source_id();
  void clear_has_source_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEvents_DocumentDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserEvents.DocumentDislike) */ {
 public:
  UserEvents_DocumentDislike();
  virtual ~UserEvents_DocumentDislike();

  UserEvents_DocumentDislike(const UserEvents_DocumentDislike& from);

  inline UserEvents_DocumentDislike& operator=(const UserEvents_DocumentDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEvents_DocumentDislike(UserEvents_DocumentDislike&& from) noexcept
    : UserEvents_DocumentDislike() {
    *this = ::std::move(from);
  }

  inline UserEvents_DocumentDislike& operator=(UserEvents_DocumentDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEvents_DocumentDislike& default_instance();

  static inline const UserEvents_DocumentDislike* internal_default_instance() {
    return reinterpret_cast<const UserEvents_DocumentDislike*>(
               &_UserEvents_DocumentDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserEvents_DocumentDislike* other);
  friend void swap(UserEvents_DocumentDislike& a, UserEvents_DocumentDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEvents_DocumentDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEvents_DocumentDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserEvents_DocumentDislike& from);
  void MergeFrom(const UserEvents_DocumentDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserEvents_DocumentDislike* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserEvents.DocumentDislike)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 doc_id_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserEvents) */ {
 public:
  UserEvents();
  virtual ~UserEvents();

  UserEvents(const UserEvents& from);

  inline UserEvents& operator=(const UserEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserEvents(UserEvents&& from) noexcept
    : UserEvents() {
    *this = ::std::move(from);
  }

  inline UserEvents& operator=(UserEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserEvents& default_instance();

  static inline const UserEvents* internal_default_instance() {
    return reinterpret_cast<const UserEvents*>(
               &_UserEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserEvents* other);
  friend void swap(UserEvents& a, UserEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserEvents& from);
  void MergeFrom(const UserEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserEvents_SiteDislike SiteDislike;
  typedef UserEvents_SourceDislike SourceDislike;
  typedef UserEvents_DocumentDislike DocumentDislike;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
  int site_dislikes_size() const;
  void clear_site_dislikes();
  static const int kSiteDislikesFieldNumber = 1;
  const ::cosmo::pb::UserEvents_SiteDislike& site_dislikes(int index) const;
  ::cosmo::pb::UserEvents_SiteDislike* mutable_site_dislikes(int index);
  ::cosmo::pb::UserEvents_SiteDislike* add_site_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >*
      mutable_site_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >&
      site_dislikes() const;

  // repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
  int source_dislikes_size() const;
  void clear_source_dislikes();
  static const int kSourceDislikesFieldNumber = 2;
  const ::cosmo::pb::UserEvents_SourceDislike& source_dislikes(int index) const;
  ::cosmo::pb::UserEvents_SourceDislike* mutable_source_dislikes(int index);
  ::cosmo::pb::UserEvents_SourceDislike* add_source_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >*
      mutable_source_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >&
      source_dislikes() const;

  // repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
  int document_dislikes_size() const;
  void clear_document_dislikes();
  static const int kDocumentDislikesFieldNumber = 3;
  const ::cosmo::pb::UserEvents_DocumentDislike& document_dislikes(int index) const;
  ::cosmo::pb::UserEvents_DocumentDislike* mutable_document_dislikes(int index);
  ::cosmo::pb::UserEvents_DocumentDislike* add_document_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >*
      mutable_document_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >&
      document_dislikes() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike > site_dislikes_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike > source_dislikes_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike > document_dislikes_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackedReactions_Reactions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.PackedReactions.Reactions) */ {
 public:
  PackedReactions_Reactions();
  virtual ~PackedReactions_Reactions();

  PackedReactions_Reactions(const PackedReactions_Reactions& from);

  inline PackedReactions_Reactions& operator=(const PackedReactions_Reactions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedReactions_Reactions(PackedReactions_Reactions&& from) noexcept
    : PackedReactions_Reactions() {
    *this = ::std::move(from);
  }

  inline PackedReactions_Reactions& operator=(PackedReactions_Reactions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedReactions_Reactions& default_instance();

  static inline const PackedReactions_Reactions* internal_default_instance() {
    return reinterpret_cast<const PackedReactions_Reactions*>(
               &_PackedReactions_Reactions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PackedReactions_Reactions* other);
  friend void swap(PackedReactions_Reactions& a, PackedReactions_Reactions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedReactions_Reactions* New() const PROTOBUF_FINAL { return New(NULL); }

  PackedReactions_Reactions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackedReactions_Reactions& from);
  void MergeFrom(const PackedReactions_Reactions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackedReactions_Reactions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 clicks = 1;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 1;
  ::google::protobuf::uint32 clicks() const;
  void set_clicks(::google::protobuf::uint32 value);

  // optional uint32 likes = 2;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 2;
  ::google::protobuf::uint32 likes() const;
  void set_likes(::google::protobuf::uint32 value);

  // optional uint32 dislike_doc = 3;
  bool has_dislike_doc() const;
  void clear_dislike_doc();
  static const int kDislikeDocFieldNumber = 3;
  ::google::protobuf::uint32 dislike_doc() const;
  void set_dislike_doc(::google::protobuf::uint32 value);

  // optional uint32 dislike_source = 4;
  bool has_dislike_source() const;
  void clear_dislike_source();
  static const int kDislikeSourceFieldNumber = 4;
  ::google::protobuf::uint32 dislike_source() const;
  void set_dislike_source(::google::protobuf::uint32 value);

  // optional uint32 hit_fulltext = 5;
  bool has_hit_fulltext() const;
  void clear_hit_fulltext();
  static const int kHitFulltextFieldNumber = 5;
  ::google::protobuf::uint32 hit_fulltext() const;
  void set_hit_fulltext(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.PackedReactions.Reactions)
 private:
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislike_doc();
  void clear_has_dislike_doc();
  void set_has_dislike_source();
  void clear_has_dislike_source();
  void set_has_hit_fulltext();
  void clear_has_hit_fulltext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 clicks_;
  ::google::protobuf::uint32 likes_;
  ::google::protobuf::uint32 dislike_doc_;
  ::google::protobuf::uint32 dislike_source_;
  ::google::protobuf::uint32 hit_fulltext_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackedReactions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.PackedReactions) */ {
 public:
  PackedReactions();
  virtual ~PackedReactions();

  PackedReactions(const PackedReactions& from);

  inline PackedReactions& operator=(const PackedReactions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedReactions(PackedReactions&& from) noexcept
    : PackedReactions() {
    *this = ::std::move(from);
  }

  inline PackedReactions& operator=(PackedReactions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedReactions& default_instance();

  static inline const PackedReactions* internal_default_instance() {
    return reinterpret_cast<const PackedReactions*>(
               &_PackedReactions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PackedReactions* other);
  friend void swap(PackedReactions& a, PackedReactions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedReactions* New() const PROTOBUF_FINAL { return New(NULL); }

  PackedReactions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackedReactions& from);
  void MergeFrom(const PackedReactions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackedReactions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PackedReactions_Reactions Reactions;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
  bool has_reactions() const;
  void clear_reactions();
  static const int kReactionsFieldNumber = 2;
  const ::cosmo::pb::PackedReactions_Reactions& reactions() const;
  ::cosmo::pb::PackedReactions_Reactions* mutable_reactions();
  ::cosmo::pb::PackedReactions_Reactions* release_reactions();
  void set_allocated_reactions(::cosmo::pb::PackedReactions_Reactions* reactions);

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.PackedReactions)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_reactions();
  void clear_has_reactions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::PackedReactions_Reactions* reactions_;
  ::google::protobuf::int64 doc_id_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackedReactionsArr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.PackedReactionsArr) */ {
 public:
  PackedReactionsArr();
  virtual ~PackedReactionsArr();

  PackedReactionsArr(const PackedReactionsArr& from);

  inline PackedReactionsArr& operator=(const PackedReactionsArr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedReactionsArr(PackedReactionsArr&& from) noexcept
    : PackedReactionsArr() {
    *this = ::std::move(from);
  }

  inline PackedReactionsArr& operator=(PackedReactionsArr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedReactionsArr& default_instance();

  static inline const PackedReactionsArr* internal_default_instance() {
    return reinterpret_cast<const PackedReactionsArr*>(
               &_PackedReactionsArr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PackedReactionsArr* other);
  friend void swap(PackedReactionsArr& a, PackedReactionsArr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedReactionsArr* New() const PROTOBUF_FINAL { return New(NULL); }

  PackedReactionsArr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackedReactionsArr& from);
  void MergeFrom(const PackedReactionsArr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackedReactionsArr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.PackedReactions reactions = 1;
  int reactions_size() const;
  void clear_reactions();
  static const int kReactionsFieldNumber = 1;
  const ::cosmo::pb::PackedReactions& reactions(int index) const;
  ::cosmo::pb::PackedReactions* mutable_reactions(int index);
  ::cosmo::pb::PackedReactions* add_reactions();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >*
      mutable_reactions();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >&
      reactions() const;

  // optional int64 last_reaction_time = 2;
  bool has_last_reaction_time() const;
  void clear_last_reaction_time();
  static const int kLastReactionTimeFieldNumber = 2;
  ::google::protobuf::int64 last_reaction_time() const;
  void set_last_reaction_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.PackedReactionsArr)
 private:
  void set_has_last_reaction_time();
  void clear_has_last_reaction_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions > reactions_;
  ::google::protobuf::int64 last_reaction_time_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Shows : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.Shows) */ {
 public:
  Shows();
  virtual ~Shows();

  Shows(const Shows& from);

  inline Shows& operator=(const Shows& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shows(Shows&& from) noexcept
    : Shows() {
    *this = ::std::move(from);
  }

  inline Shows& operator=(Shows&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shows& default_instance();

  static inline const Shows* internal_default_instance() {
    return reinterpret_cast<const Shows*>(
               &_Shows_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Shows* other);
  friend void swap(Shows& a, Shows& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shows* New() const PROTOBUF_FINAL { return New(NULL); }

  Shows* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shows& from);
  void MergeFrom(const Shows& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shows* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // required uint32 shows = 2;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 2;
  ::google::protobuf::uint32 shows() const;
  void set_shows(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.Shows)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_shows();
  void clear_has_shows();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::uint32 shows_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowsArr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.ShowsArr) */ {
 public:
  ShowsArr();
  virtual ~ShowsArr();

  ShowsArr(const ShowsArr& from);

  inline ShowsArr& operator=(const ShowsArr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowsArr(ShowsArr&& from) noexcept
    : ShowsArr() {
    *this = ::std::move(from);
  }

  inline ShowsArr& operator=(ShowsArr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowsArr& default_instance();

  static inline const ShowsArr* internal_default_instance() {
    return reinterpret_cast<const ShowsArr*>(
               &_ShowsArr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ShowsArr* other);
  friend void swap(ShowsArr& a, ShowsArr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowsArr* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowsArr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowsArr& from);
  void MergeFrom(const ShowsArr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowsArr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.Shows shows_arr = 1;
  int shows_arr_size() const;
  void clear_shows_arr();
  static const int kShowsArrFieldNumber = 1;
  const ::cosmo::pb::Shows& shows_arr(int index) const;
  ::cosmo::pb::Shows* mutable_shows_arr(int index);
  ::cosmo::pb::Shows* add_shows_arr();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >*
      mutable_shows_arr();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >&
      shows_arr() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.ShowsArr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows > shows_arr_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafloClick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.TrafloClick) */ {
 public:
  TrafloClick();
  virtual ~TrafloClick();

  TrafloClick(const TrafloClick& from);

  inline TrafloClick& operator=(const TrafloClick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafloClick(TrafloClick&& from) noexcept
    : TrafloClick() {
    *this = ::std::move(from);
  }

  inline TrafloClick& operator=(TrafloClick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafloClick& default_instance();

  static inline const TrafloClick* internal_default_instance() {
    return reinterpret_cast<const TrafloClick*>(
               &_TrafloClick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TrafloClick* other);
  friend void swap(TrafloClick& a, TrafloClick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafloClick* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafloClick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafloClick& from);
  void MergeFrom(const TrafloClick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafloClick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.TrafloClick)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafloClickArr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.TrafloClickArr) */ {
 public:
  TrafloClickArr();
  virtual ~TrafloClickArr();

  TrafloClickArr(const TrafloClickArr& from);

  inline TrafloClickArr& operator=(const TrafloClickArr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafloClickArr(TrafloClickArr&& from) noexcept
    : TrafloClickArr() {
    *this = ::std::move(from);
  }

  inline TrafloClickArr& operator=(TrafloClickArr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafloClickArr& default_instance();

  static inline const TrafloClickArr* internal_default_instance() {
    return reinterpret_cast<const TrafloClickArr*>(
               &_TrafloClickArr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TrafloClickArr* other);
  friend void swap(TrafloClickArr& a, TrafloClickArr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafloClickArr* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafloClickArr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafloClickArr& from);
  void MergeFrom(const TrafloClickArr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafloClickArr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.TrafloClick clicks = 1;
  int clicks_size() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 1;
  const ::cosmo::pb::TrafloClick& clicks(int index) const;
  ::cosmo::pb::TrafloClick* mutable_clicks(int index);
  ::cosmo::pb::TrafloClick* add_clicks();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >*
      mutable_clicks();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >&
      clicks() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.TrafloClickArr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick > clicks_;
  friend struct protobuf_cosmo_5fuser_5fevents_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserEvents_SiteDislike

// required int64 site_hash = 1;
inline bool UserEvents_SiteDislike::has_site_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEvents_SiteDislike::set_has_site_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEvents_SiteDislike::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEvents_SiteDislike::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 UserEvents_SiteDislike::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.SiteDislike.site_hash)
  return site_hash_;
}
inline void UserEvents_SiteDislike::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.SiteDislike.site_hash)
}

// -------------------------------------------------------------------

// UserEvents_SourceDislike

// required int64 source_id = 1;
inline bool UserEvents_SourceDislike::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEvents_SourceDislike::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEvents_SourceDislike::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEvents_SourceDislike::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserEvents_SourceDislike::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.SourceDislike.source_id)
  return source_id_;
}
inline void UserEvents_SourceDislike::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.SourceDislike.source_id)
}

// -------------------------------------------------------------------

// UserEvents_DocumentDislike

// required int64 doc_id = 1;
inline bool UserEvents_DocumentDislike::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserEvents_DocumentDislike::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserEvents_DocumentDislike::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserEvents_DocumentDislike::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 UserEvents_DocumentDislike::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.DocumentDislike.doc_id)
  return doc_id_;
}
inline void UserEvents_DocumentDislike::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserEvents.DocumentDislike.doc_id)
}

// -------------------------------------------------------------------

// UserEvents

// repeated .cosmo.pb.UserEvents.SiteDislike site_dislikes = 1;
inline int UserEvents::site_dislikes_size() const {
  return site_dislikes_.size();
}
inline void UserEvents::clear_site_dislikes() {
  site_dislikes_.Clear();
}
inline const ::cosmo::pb::UserEvents_SiteDislike& UserEvents::site_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Get(index);
}
inline ::cosmo::pb::UserEvents_SiteDislike* UserEvents::mutable_site_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserEvents_SiteDislike* UserEvents::add_site_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >*
UserEvents::mutable_site_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.site_dislikes)
  return &site_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SiteDislike >&
UserEvents::site_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.site_dislikes)
  return site_dislikes_;
}

// repeated .cosmo.pb.UserEvents.SourceDislike source_dislikes = 2;
inline int UserEvents::source_dislikes_size() const {
  return source_dislikes_.size();
}
inline void UserEvents::clear_source_dislikes() {
  source_dislikes_.Clear();
}
inline const ::cosmo::pb::UserEvents_SourceDislike& UserEvents::source_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Get(index);
}
inline ::cosmo::pb::UserEvents_SourceDislike* UserEvents::mutable_source_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserEvents_SourceDislike* UserEvents::add_source_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >*
UserEvents::mutable_source_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.source_dislikes)
  return &source_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_SourceDislike >&
UserEvents::source_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.source_dislikes)
  return source_dislikes_;
}

// repeated .cosmo.pb.UserEvents.DocumentDislike document_dislikes = 3;
inline int UserEvents::document_dislikes_size() const {
  return document_dislikes_.size();
}
inline void UserEvents::clear_document_dislikes() {
  document_dislikes_.Clear();
}
inline const ::cosmo::pb::UserEvents_DocumentDislike& UserEvents::document_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Get(index);
}
inline ::cosmo::pb::UserEvents_DocumentDislike* UserEvents::mutable_document_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserEvents_DocumentDislike* UserEvents::add_document_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >*
UserEvents::mutable_document_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserEvents.document_dislikes)
  return &document_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserEvents_DocumentDislike >&
UserEvents::document_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserEvents.document_dislikes)
  return document_dislikes_;
}

// -------------------------------------------------------------------

// PackedReactions_Reactions

// optional uint32 clicks = 1;
inline bool PackedReactions_Reactions::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackedReactions_Reactions::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackedReactions_Reactions::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackedReactions_Reactions::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
inline ::google::protobuf::uint32 PackedReactions_Reactions::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.clicks)
  return clicks_;
}
inline void PackedReactions_Reactions::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.clicks)
}

// optional uint32 likes = 2;
inline bool PackedReactions_Reactions::has_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackedReactions_Reactions::set_has_likes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackedReactions_Reactions::clear_has_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackedReactions_Reactions::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
inline ::google::protobuf::uint32 PackedReactions_Reactions::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.likes)
  return likes_;
}
inline void PackedReactions_Reactions::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.likes)
}

// optional uint32 dislike_doc = 3;
inline bool PackedReactions_Reactions::has_dislike_doc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackedReactions_Reactions::set_has_dislike_doc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackedReactions_Reactions::clear_has_dislike_doc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackedReactions_Reactions::clear_dislike_doc() {
  dislike_doc_ = 0u;
  clear_has_dislike_doc();
}
inline ::google::protobuf::uint32 PackedReactions_Reactions::dislike_doc() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.dislike_doc)
  return dislike_doc_;
}
inline void PackedReactions_Reactions::set_dislike_doc(::google::protobuf::uint32 value) {
  set_has_dislike_doc();
  dislike_doc_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.dislike_doc)
}

// optional uint32 dislike_source = 4;
inline bool PackedReactions_Reactions::has_dislike_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackedReactions_Reactions::set_has_dislike_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackedReactions_Reactions::clear_has_dislike_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackedReactions_Reactions::clear_dislike_source() {
  dislike_source_ = 0u;
  clear_has_dislike_source();
}
inline ::google::protobuf::uint32 PackedReactions_Reactions::dislike_source() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.dislike_source)
  return dislike_source_;
}
inline void PackedReactions_Reactions::set_dislike_source(::google::protobuf::uint32 value) {
  set_has_dislike_source();
  dislike_source_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.dislike_source)
}

// optional uint32 hit_fulltext = 5;
inline bool PackedReactions_Reactions::has_hit_fulltext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackedReactions_Reactions::set_has_hit_fulltext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackedReactions_Reactions::clear_has_hit_fulltext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackedReactions_Reactions::clear_hit_fulltext() {
  hit_fulltext_ = 0u;
  clear_has_hit_fulltext();
}
inline ::google::protobuf::uint32 PackedReactions_Reactions::hit_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.Reactions.hit_fulltext)
  return hit_fulltext_;
}
inline void PackedReactions_Reactions::set_hit_fulltext(::google::protobuf::uint32 value) {
  set_has_hit_fulltext();
  hit_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.Reactions.hit_fulltext)
}

// -------------------------------------------------------------------

// PackedReactions

// required int64 doc_id = 1;
inline bool PackedReactions::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackedReactions::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackedReactions::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackedReactions::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 PackedReactions::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.doc_id)
  return doc_id_;
}
inline void PackedReactions::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactions.doc_id)
}

// optional .cosmo.pb.PackedReactions.Reactions reactions = 2;
inline bool PackedReactions::has_reactions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackedReactions::set_has_reactions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackedReactions::clear_has_reactions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackedReactions::clear_reactions() {
  if (reactions_ != NULL) reactions_->::cosmo::pb::PackedReactions_Reactions::Clear();
  clear_has_reactions();
}
inline const ::cosmo::pb::PackedReactions_Reactions& PackedReactions::reactions() const {
  const ::cosmo::pb::PackedReactions_Reactions* p = reactions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactions.reactions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PackedReactions_Reactions*>(
      &::cosmo::pb::_PackedReactions_Reactions_default_instance_);
}
inline ::cosmo::pb::PackedReactions_Reactions* PackedReactions::mutable_reactions() {
  set_has_reactions();
  if (reactions_ == NULL) {
    reactions_ = new ::cosmo::pb::PackedReactions_Reactions;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PackedReactions.reactions)
  return reactions_;
}
inline ::cosmo::pb::PackedReactions_Reactions* PackedReactions::release_reactions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PackedReactions.reactions)
  clear_has_reactions();
  ::cosmo::pb::PackedReactions_Reactions* temp = reactions_;
  reactions_ = NULL;
  return temp;
}
inline void PackedReactions::set_allocated_reactions(::cosmo::pb::PackedReactions_Reactions* reactions) {
  delete reactions_;
  reactions_ = reactions;
  if (reactions) {
    set_has_reactions();
  } else {
    clear_has_reactions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PackedReactions.reactions)
}

// -------------------------------------------------------------------

// PackedReactionsArr

// repeated .cosmo.pb.PackedReactions reactions = 1;
inline int PackedReactionsArr::reactions_size() const {
  return reactions_.size();
}
inline void PackedReactionsArr::clear_reactions() {
  reactions_.Clear();
}
inline const ::cosmo::pb::PackedReactions& PackedReactionsArr::reactions(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Get(index);
}
inline ::cosmo::pb::PackedReactions* PackedReactionsArr::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Mutable(index);
}
inline ::cosmo::pb::PackedReactions* PackedReactionsArr::add_reactions() {
  // @@protoc_insertion_point(field_add:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >*
PackedReactionsArr::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.PackedReactionsArr.reactions)
  return &reactions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::PackedReactions >&
PackedReactionsArr::reactions() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.PackedReactionsArr.reactions)
  return reactions_;
}

// optional int64 last_reaction_time = 2;
inline bool PackedReactionsArr::has_last_reaction_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackedReactionsArr::set_has_last_reaction_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackedReactionsArr::clear_has_last_reaction_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackedReactionsArr::clear_last_reaction_time() {
  last_reaction_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_reaction_time();
}
inline ::google::protobuf::int64 PackedReactionsArr::last_reaction_time() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PackedReactionsArr.last_reaction_time)
  return last_reaction_time_;
}
inline void PackedReactionsArr::set_last_reaction_time(::google::protobuf::int64 value) {
  set_has_last_reaction_time();
  last_reaction_time_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PackedReactionsArr.last_reaction_time)
}

// -------------------------------------------------------------------

// Shows

// required int64 doc_id = 1;
inline bool Shows::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shows::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shows::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shows::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 Shows::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Shows.doc_id)
  return doc_id_;
}
inline void Shows::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Shows.doc_id)
}

// required uint32 shows = 2;
inline bool Shows::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Shows::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Shows::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Shows::clear_shows() {
  shows_ = 0u;
  clear_has_shows();
}
inline ::google::protobuf::uint32 Shows::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.Shows.shows)
  return shows_;
}
inline void Shows::set_shows(::google::protobuf::uint32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.Shows.shows)
}

// -------------------------------------------------------------------

// ShowsArr

// repeated .cosmo.pb.Shows shows_arr = 1;
inline int ShowsArr::shows_arr_size() const {
  return shows_arr_.size();
}
inline void ShowsArr::clear_shows_arr() {
  shows_arr_.Clear();
}
inline const ::cosmo::pb::Shows& ShowsArr::shows_arr(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Get(index);
}
inline ::cosmo::pb::Shows* ShowsArr::mutable_shows_arr(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Mutable(index);
}
inline ::cosmo::pb::Shows* ShowsArr::add_shows_arr() {
  // @@protoc_insertion_point(field_add:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >*
ShowsArr::mutable_shows_arr() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.ShowsArr.shows_arr)
  return &shows_arr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Shows >&
ShowsArr::shows_arr() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.ShowsArr.shows_arr)
  return shows_arr_;
}

// -------------------------------------------------------------------

// TrafloClick

// required int64 source_id = 1;
inline bool TrafloClick::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafloClick::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafloClick::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafloClick::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 TrafloClick::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClick.source_id)
  return source_id_;
}
inline void TrafloClick::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.TrafloClick.source_id)
}

// required int64 timestamp = 2;
inline bool TrafloClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafloClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafloClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafloClick::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 TrafloClick::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClick.timestamp)
  return timestamp_;
}
inline void TrafloClick::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.TrafloClick.timestamp)
}

// -------------------------------------------------------------------

// TrafloClickArr

// repeated .cosmo.pb.TrafloClick clicks = 1;
inline int TrafloClickArr::clicks_size() const {
  return clicks_.size();
}
inline void TrafloClickArr::clear_clicks() {
  clicks_.Clear();
}
inline const ::cosmo::pb::TrafloClick& TrafloClickArr::clicks(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Get(index);
}
inline ::cosmo::pb::TrafloClick* TrafloClickArr::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Mutable(index);
}
inline ::cosmo::pb::TrafloClick* TrafloClickArr::add_clicks() {
  // @@protoc_insertion_point(field_add:cosmo.pb.TrafloClickArr.clicks)
  return clicks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >*
TrafloClickArr::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.TrafloClickArr.clicks)
  return &clicks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::TrafloClick >&
TrafloClickArr::clicks() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.TrafloClickArr.clicks)
  return clicks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_5fuser_5fevents_2eproto__INCLUDED
