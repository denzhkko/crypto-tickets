// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crawl_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crawl_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class CrawlDetailsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrawlDetails>
     _instance;
} _CrawlDetails_default_instance_;

namespace protobuf_crawl_5fstate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, lastcrawldate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, stateduration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, isindexed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, idxcommand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, checkstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, disablereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, removereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, urldata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, robotsstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, contenttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, httphead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, firstinstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, sourcemark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, contentsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, cleancontentsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, rendertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlDetails, scriptremoved_),
  3,
  4,
  24,
  13,
  5,
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  11,
  12,
  15,
  16,
  17,
  18,
  2,
  19,
  20,
  21,
  22,
  23,
  14,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(CrawlDetails)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrawlDetails_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "crawl_state.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _CrawlDetails_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrawlDetails_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021crawl_state.proto\022\030ru.mail.go.webbase."
      "blobs\032\024document_enums.proto\"\342\020\n\014CrawlDet"
      "ails\022\025\n\rlastCrawlDate\030\001 \002(\003\022H\n\005state\030\002 \002"
      "(\01621.ru.mail.go.webbase.blobs.CrawlDetai"
      "ls.stateTypes:\006ST_NEW\022\030\n\rstateDuration\030\003"
      " \002(\r:\0011\022\030\n\tisIndexed\030\004 \001(\010:\005false\022M\n\nidx"
      "Command\030\005 \001(\01625.ru.mail.go.webbase.blobs"
      ".CrawlDetails.indexerCommandB\002\030\001\022J\n\005erro"
      "r\030\006 \001(\01621.ru.mail.go.webbase.blobs.Crawl"
      "Details.errorTypes:\010ERR_NONE\022Q\n\ncheckSta"
      "te\030\007 \001(\01621.ru.mail.go.webbase.blobs.Craw"
      "lDetails.checkTypes:\nCH_UNKNOWN\022\023\n\010durat"
      "ion\030\010 \001(\r:\0010\022U\n\rdisableReason\030\t \001(\01623.ru"
      ".mail.go.webbase.blobs.CrawlDetails.disa"
      "bleTypes:\tD_UNKNOWN\022\014\n\004hash\030\n \001(\014\022T\n\014rem"
      "oveReason\030\013 \001(\01622.ru.mail.go.webbase.blo"
      "bs.CrawlDetails.removeTypes:\nRM_UNKNOWN\022"
      "\013\n\003url\030\014 \001(\t\022\017\n\007urlData\030\r \001(\005\022:\n\013robotsS"
      "tate\030\016 \001(\0162%.ru.mail.go.webbase.blobs.Ro"
      "botsState\022:\n\013contentType\030\017 \001(\0162%.ru.mail"
      ".go.webbase.blobs.ContentType\0224\n\010encodin"
      "g\030\020 \001(\0162\".ru.mail.go.webbase.blobs.Encod"
      "ing\0224\n\010language\030\021 \001(\0162\".ru.mail.go.webba"
      "se.blobs.Language\022\022\n\nstatusCode\030\022 \001(\005\022\020\n"
      "\010httpHead\030\023 \001(\t\022\025\n\rfirstInStatus\030\024 \001(\004\0228"
      "\n\nsourceMark\030\025 \001(\0162$.ru.mail.go.webbase."
      "blobs.SourceMark\022\023\n\013contentSize\030\026 \001(\r\022\030\n"
      "\020cleanContentSize\030\027 \001(\r\0228\n\nrenderType\030\030 "
      "\001(\0162$.ru.mail.go.webbase.blobs.RenderTyp"
      "e\022\025\n\rscriptRemoved\030\031 \001(\010\"j\n\nstateTypes\022\n"
      "\n\006ST_NEW\020\000\022\016\n\nST_FETCHED\020\001\022\016\n\nST_FAILURE"
      "\020\002\022\016\n\nST_REMOVED\020\003\022\017\n\013ST_REDIRECT\020\004\022\017\n\013S"
      "T_DISABLED\020\005\"P\n\016indexerCommand\022\017\n\013IDX_NO"
      "THING\020\000\022\013\n\007IDX_ADD\020\001\022\016\n\nIDX_REMOVE\020\002\022\020\n\014"
      "IDX_REDIRECT\020\003\"\342\001\n\nerrorTypes\022\014\n\010ERR_NON"
      "E\020\000\022\017\n\013ERR_RESOLVE\020\001\022\022\n\016ERR_CONNECTION\020\002"
      "\022\022\n\016ERR_EMPTY_HEAD\020\003\022\030\n\024ERR_INVALID_PROT"
      "OCOL\020\004\022\027\n\023ERR_SOCKET_BUF_SIZE\020\005\022\021\n\rERR_H"
      "EAD_SIZE\020\006\022\021\n\rERR_BODY_SIZE\020\007\022\017\n\013ERR_PAR"
      "SING\020\010\022\022\n\016ERR_DECOMPRESS\020\t\022\017\n\013ERR_UNCHUN"
      "K\020\n\"O\n\ncheckTypes\022\016\n\nCH_UNKNOWN\020\000\022\016\n\nCH_"
      "CHANGED\020\001\022\014\n\010CH_EQUAL\020\002\022\023\n\017CH_NOT_MODIFI"
      "ED\020\003\"\313\001\n\014disableTypes\022\r\n\tD_UNKNOWN\020\000\022\r\n\t"
      "D_NOINDEX\020\001\022\017\n\013D_CANONICAL\020\002\022\022\n\016D_BAD_LA"
      "NGUAGE\020\003\022\027\n\023D_UNKNOWN_LANG_TYPE\020\004\022\021\n\rD_N"
      "_HTML_INFO\020\005\022\021\n\rD_NOT_SITEMAP\020\006\022\023\n\017D_BAD"
      "_MIME_TYPE\020\007\022\020\n\014D_IS_GARBAGE\020\010\022\022\n\016D_INF_"
      "REDIRECT\020\t\"\303\002\n\013removeTypes\022\016\n\nRM_UNKNOWN"
      "\020\000\022\020\n\014RM_NOT_EXIST\020\001\022\r\n\tRM_ROBOTS\020\002\022\020\n\014R"
      "M_DUPLICATE\020\003\022\020\n\014RM_BLACKLIST\020\004\022\014\n\010RM_QU"
      "OTA\020\005\022\033\n\027RM_POSSIBLE_CUSTOM_PAGE\020\006\022\025\n\021RM"
      "_MERGE_DISABLED\020\007\022\023\n\017RM_MERGE_BANNED\020\010\022\026"
      "\n\022RM_MERGE_DUPLICATE\020\t\022\022\n\016RM_MERGE_MULTI"
      "\020\n\022\031\n\025RM_ROBOTS_CLEAN_PARAM\020\013\022\025\n\021RM_BY_S"
      "ERVICE_API\020\014\022\020\n\014RM_DEAD_HOST\020\r\022\030\n\024RM_DEA"
      "D_HOST_RESTORE\020\016B\016B\014CrawlerBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crawl_state.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_crawl_5fstate_2eproto

const ::google::protobuf::EnumDescriptor* CrawlDetails_stateTypes_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[0];
}
bool CrawlDetails_stateTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_stateTypes CrawlDetails::ST_NEW;
const CrawlDetails_stateTypes CrawlDetails::ST_FETCHED;
const CrawlDetails_stateTypes CrawlDetails::ST_FAILURE;
const CrawlDetails_stateTypes CrawlDetails::ST_REMOVED;
const CrawlDetails_stateTypes CrawlDetails::ST_REDIRECT;
const CrawlDetails_stateTypes CrawlDetails::ST_DISABLED;
const CrawlDetails_stateTypes CrawlDetails::stateTypes_MIN;
const CrawlDetails_stateTypes CrawlDetails::stateTypes_MAX;
const int CrawlDetails::stateTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CrawlDetails_indexerCommand_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[1];
}
bool CrawlDetails_indexerCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_indexerCommand CrawlDetails::IDX_NOTHING;
const CrawlDetails_indexerCommand CrawlDetails::IDX_ADD;
const CrawlDetails_indexerCommand CrawlDetails::IDX_REMOVE;
const CrawlDetails_indexerCommand CrawlDetails::IDX_REDIRECT;
const CrawlDetails_indexerCommand CrawlDetails::indexerCommand_MIN;
const CrawlDetails_indexerCommand CrawlDetails::indexerCommand_MAX;
const int CrawlDetails::indexerCommand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CrawlDetails_errorTypes_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[2];
}
bool CrawlDetails_errorTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_errorTypes CrawlDetails::ERR_NONE;
const CrawlDetails_errorTypes CrawlDetails::ERR_RESOLVE;
const CrawlDetails_errorTypes CrawlDetails::ERR_CONNECTION;
const CrawlDetails_errorTypes CrawlDetails::ERR_EMPTY_HEAD;
const CrawlDetails_errorTypes CrawlDetails::ERR_INVALID_PROTOCOL;
const CrawlDetails_errorTypes CrawlDetails::ERR_SOCKET_BUF_SIZE;
const CrawlDetails_errorTypes CrawlDetails::ERR_HEAD_SIZE;
const CrawlDetails_errorTypes CrawlDetails::ERR_BODY_SIZE;
const CrawlDetails_errorTypes CrawlDetails::ERR_PARSING;
const CrawlDetails_errorTypes CrawlDetails::ERR_DECOMPRESS;
const CrawlDetails_errorTypes CrawlDetails::ERR_UNCHUNK;
const CrawlDetails_errorTypes CrawlDetails::errorTypes_MIN;
const CrawlDetails_errorTypes CrawlDetails::errorTypes_MAX;
const int CrawlDetails::errorTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CrawlDetails_checkTypes_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[3];
}
bool CrawlDetails_checkTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_checkTypes CrawlDetails::CH_UNKNOWN;
const CrawlDetails_checkTypes CrawlDetails::CH_CHANGED;
const CrawlDetails_checkTypes CrawlDetails::CH_EQUAL;
const CrawlDetails_checkTypes CrawlDetails::CH_NOT_MODIFIED;
const CrawlDetails_checkTypes CrawlDetails::checkTypes_MIN;
const CrawlDetails_checkTypes CrawlDetails::checkTypes_MAX;
const int CrawlDetails::checkTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CrawlDetails_disableTypes_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[4];
}
bool CrawlDetails_disableTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_disableTypes CrawlDetails::D_UNKNOWN;
const CrawlDetails_disableTypes CrawlDetails::D_NOINDEX;
const CrawlDetails_disableTypes CrawlDetails::D_CANONICAL;
const CrawlDetails_disableTypes CrawlDetails::D_BAD_LANGUAGE;
const CrawlDetails_disableTypes CrawlDetails::D_UNKNOWN_LANG_TYPE;
const CrawlDetails_disableTypes CrawlDetails::D_N_HTML_INFO;
const CrawlDetails_disableTypes CrawlDetails::D_NOT_SITEMAP;
const CrawlDetails_disableTypes CrawlDetails::D_BAD_MIME_TYPE;
const CrawlDetails_disableTypes CrawlDetails::D_IS_GARBAGE;
const CrawlDetails_disableTypes CrawlDetails::D_INF_REDIRECT;
const CrawlDetails_disableTypes CrawlDetails::disableTypes_MIN;
const CrawlDetails_disableTypes CrawlDetails::disableTypes_MAX;
const int CrawlDetails::disableTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CrawlDetails_removeTypes_descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_enum_descriptors[5];
}
bool CrawlDetails_removeTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CrawlDetails_removeTypes CrawlDetails::RM_UNKNOWN;
const CrawlDetails_removeTypes CrawlDetails::RM_NOT_EXIST;
const CrawlDetails_removeTypes CrawlDetails::RM_ROBOTS;
const CrawlDetails_removeTypes CrawlDetails::RM_DUPLICATE;
const CrawlDetails_removeTypes CrawlDetails::RM_BLACKLIST;
const CrawlDetails_removeTypes CrawlDetails::RM_QUOTA;
const CrawlDetails_removeTypes CrawlDetails::RM_POSSIBLE_CUSTOM_PAGE;
const CrawlDetails_removeTypes CrawlDetails::RM_MERGE_DISABLED;
const CrawlDetails_removeTypes CrawlDetails::RM_MERGE_BANNED;
const CrawlDetails_removeTypes CrawlDetails::RM_MERGE_DUPLICATE;
const CrawlDetails_removeTypes CrawlDetails::RM_MERGE_MULTI;
const CrawlDetails_removeTypes CrawlDetails::RM_ROBOTS_CLEAN_PARAM;
const CrawlDetails_removeTypes CrawlDetails::RM_BY_SERVICE_API;
const CrawlDetails_removeTypes CrawlDetails::RM_DEAD_HOST;
const CrawlDetails_removeTypes CrawlDetails::RM_DEAD_HOST_RESTORE;
const CrawlDetails_removeTypes CrawlDetails::removeTypes_MIN;
const CrawlDetails_removeTypes CrawlDetails::removeTypes_MAX;
const int CrawlDetails::removeTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlDetails::kLastCrawlDateFieldNumber;
const int CrawlDetails::kStateFieldNumber;
const int CrawlDetails::kStateDurationFieldNumber;
const int CrawlDetails::kIsIndexedFieldNumber;
const int CrawlDetails::kIdxCommandFieldNumber;
const int CrawlDetails::kErrorFieldNumber;
const int CrawlDetails::kCheckStateFieldNumber;
const int CrawlDetails::kDurationFieldNumber;
const int CrawlDetails::kDisableReasonFieldNumber;
const int CrawlDetails::kHashFieldNumber;
const int CrawlDetails::kRemoveReasonFieldNumber;
const int CrawlDetails::kUrlFieldNumber;
const int CrawlDetails::kUrlDataFieldNumber;
const int CrawlDetails::kRobotsStateFieldNumber;
const int CrawlDetails::kContentTypeFieldNumber;
const int CrawlDetails::kEncodingFieldNumber;
const int CrawlDetails::kLanguageFieldNumber;
const int CrawlDetails::kStatusCodeFieldNumber;
const int CrawlDetails::kHttpHeadFieldNumber;
const int CrawlDetails::kFirstInStatusFieldNumber;
const int CrawlDetails::kSourceMarkFieldNumber;
const int CrawlDetails::kContentSizeFieldNumber;
const int CrawlDetails::kCleanContentSizeFieldNumber;
const int CrawlDetails::kRenderTypeFieldNumber;
const int CrawlDetails::kScriptRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlDetails::CrawlDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_crawl_5fstate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CrawlDetails)
}
CrawlDetails::CrawlDetails(const CrawlDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  httphead_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_httphead()) {
    httphead_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.httphead_);
  }
  ::memcpy(&lastcrawldate_, &from.lastcrawldate_,
    static_cast<size_t>(reinterpret_cast<char*>(&stateduration_) -
    reinterpret_cast<char*>(&lastcrawldate_)) + sizeof(stateduration_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CrawlDetails)
}

void CrawlDetails::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httphead_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lastcrawldate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rendertype_) -
      reinterpret_cast<char*>(&lastcrawldate_)) + sizeof(rendertype_));
  stateduration_ = 1u;
}

CrawlDetails::~CrawlDetails() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CrawlDetails)
  SharedDtor();
}

void CrawlDetails::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httphead_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrawlDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrawlDetails::descriptor() {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrawlDetails& CrawlDetails::default_instance() {
  protobuf_crawl_5fstate_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrawlDetails* CrawlDetails::New(::google::protobuf::Arena* arena) const {
  CrawlDetails* n = new CrawlDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrawlDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CrawlDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!httphead_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*httphead_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&lastcrawldate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checkstate_) -
        reinterpret_cast<char*>(&lastcrawldate_)) + sizeof(checkstate_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contenttype_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(contenttype_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&encoding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rendertype_) -
        reinterpret_cast<char*>(&encoding_)) + sizeof(rendertype_));
  }
  stateduration_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrawlDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CrawlDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lastCrawlDate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lastcrawldate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastcrawldate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid(value)) {
            set_state(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 stateDuration = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stateduration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isIndexed = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isindexed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isindexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand_IsValid(value)) {
            set_idxcommand(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes_IsValid(value)) {
            set_error(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes_IsValid(value)) {
            set_checkstate(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes_IsValid(value)) {
            set_disablereason(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes_IsValid(value)) {
            set_removereason(static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CrawlDetails.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 urlData = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_urldata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urldata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::RobotsState_IsValid(value)) {
            set_robotsstate(static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_contenttype(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Language language = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 statusCode = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_statuscode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string httpHead = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httphead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->httphead().data(), static_cast<int>(this->httphead().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CrawlDetails.httpHead");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 firstInStatus = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_firstinstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstinstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::SourceMark_IsValid(value)) {
            set_sourcemark(static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contentSize = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_contentsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contentsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cleanContentSize = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_cleancontentsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleancontentsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::RenderType_IsValid(value)) {
            set_rendertype(static_cast< ::ru::mail::go::webbase::blobs::RenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scriptRemoved = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_scriptremoved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scriptremoved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CrawlDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CrawlDetails)
  return false;
#undef DO_
}

void CrawlDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CrawlDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lastCrawlDate = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lastcrawldate(), output);
  }

  // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required uint32 stateDuration = 3 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stateduration(), output);
  }

  // optional bool isIndexed = 4 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isindexed(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->idxcommand(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->checkstate(), output);
  }

  // optional uint32 duration = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->disablereason(), output);
  }

  // optional bytes hash = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->hash(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->removereason(), output);
  }

  // optional string url = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CrawlDetails.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->url(), output);
  }

  // optional int32 urlData = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->urldata(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->robotsstate(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->contenttype(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->encoding(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->language(), output);
  }

  // optional int32 statusCode = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->statuscode(), output);
  }

  // optional string httpHead = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httphead().data(), static_cast<int>(this->httphead().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CrawlDetails.httpHead");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->httphead(), output);
  }

  // optional uint64 firstInStatus = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->firstinstatus(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->sourcemark(), output);
  }

  // optional uint32 contentSize = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->contentsize(), output);
  }

  // optional uint32 cleanContentSize = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->cleancontentsize(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->rendertype(), output);
  }

  // optional bool scriptRemoved = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->scriptremoved(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CrawlDetails)
}

::google::protobuf::uint8* CrawlDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CrawlDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lastCrawlDate = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lastcrawldate(), target);
  }

  // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required uint32 stateDuration = 3 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stateduration(), target);
  }

  // optional bool isIndexed = 4 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isindexed(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->idxcommand(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->checkstate(), target);
  }

  // optional uint32 duration = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->disablereason(), target);
  }

  // optional bytes hash = 10;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hash(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->removereason(), target);
  }

  // optional string url = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CrawlDetails.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->url(), target);
  }

  // optional int32 urlData = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->urldata(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->robotsstate(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->contenttype(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->encoding(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->language(), target);
  }

  // optional int32 statusCode = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->statuscode(), target);
  }

  // optional string httpHead = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httphead().data(), static_cast<int>(this->httphead().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CrawlDetails.httpHead");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->httphead(), target);
  }

  // optional uint64 firstInStatus = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->firstinstatus(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->sourcemark(), target);
  }

  // optional uint32 contentSize = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->contentsize(), target);
  }

  // optional uint32 cleanContentSize = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->cleancontentsize(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->rendertype(), target);
  }

  // optional bool scriptRemoved = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->scriptremoved(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CrawlDetails)
  return target;
}

size_t CrawlDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.CrawlDetails)
  size_t total_size = 0;

  if (has_lastcrawldate()) {
    // required int64 lastCrawlDate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastcrawldate());
  }

  if (has_state()) {
    // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_stateduration()) {
    // required uint32 stateDuration = 3 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stateduration());
  }

  return total_size;
}
size_t CrawlDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CrawlDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x01000018) ^ 0x01000018) == 0) {  // All required fields are present.
    // required int64 lastCrawlDate = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastcrawldate());

    // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required uint32 stateDuration = 3 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stateduration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes hash = 10;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional string url = 12;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string httpHead = 19;
    if (has_httphead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httphead());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
    if (has_idxcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->idxcommand());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
    if (has_checkstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->checkstate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 duration = 8 [default = 0];
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
    if (has_disablereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disablereason());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
    if (has_removereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->removereason());
    }

    // optional int32 urlData = 13;
    if (has_urldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urldata());
    }

    // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
    if (has_robotsstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robotsstate());
    }

    // optional bool isIndexed = 4 [default = false];
    if (has_isindexed()) {
      total_size += 1 + 1;
    }

    // optional bool scriptRemoved = 25;
    if (has_scriptremoved()) {
      total_size += 2 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contenttype());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
    if (has_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional .ru.mail.go.webbase.blobs.Language language = 17;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional int32 statusCode = 18;
    if (has_statuscode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional uint64 firstInStatus = 20;
    if (has_firstinstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->firstinstatus());
    }

    // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
    if (has_sourcemark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcemark());
    }

    // optional uint32 contentSize = 22;
    if (has_contentsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contentsize());
    }

    // optional uint32 cleanContentSize = 23;
    if (has_cleancontentsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleancontentsize());
    }

    // optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
    if (has_rendertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rendertype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrawlDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CrawlDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrawlDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CrawlDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CrawlDetails)
    MergeFrom(*source);
  }
}

void CrawlDetails::MergeFrom(const CrawlDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CrawlDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_httphead();
      httphead_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.httphead_);
    }
    if (cached_has_bits & 0x00000008u) {
      lastcrawldate_ = from.lastcrawldate_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      idxcommand_ = from.idxcommand_;
    }
    if (cached_has_bits & 0x00000040u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000080u) {
      checkstate_ = from.checkstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000200u) {
      disablereason_ = from.disablereason_;
    }
    if (cached_has_bits & 0x00000400u) {
      removereason_ = from.removereason_;
    }
    if (cached_has_bits & 0x00000800u) {
      urldata_ = from.urldata_;
    }
    if (cached_has_bits & 0x00001000u) {
      robotsstate_ = from.robotsstate_;
    }
    if (cached_has_bits & 0x00002000u) {
      isindexed_ = from.isindexed_;
    }
    if (cached_has_bits & 0x00004000u) {
      scriptremoved_ = from.scriptremoved_;
    }
    if (cached_has_bits & 0x00008000u) {
      contenttype_ = from.contenttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00020000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00040000u) {
      statuscode_ = from.statuscode_;
    }
    if (cached_has_bits & 0x00080000u) {
      firstinstatus_ = from.firstinstatus_;
    }
    if (cached_has_bits & 0x00100000u) {
      sourcemark_ = from.sourcemark_;
    }
    if (cached_has_bits & 0x00200000u) {
      contentsize_ = from.contentsize_;
    }
    if (cached_has_bits & 0x00400000u) {
      cleancontentsize_ = from.cleancontentsize_;
    }
    if (cached_has_bits & 0x00800000u) {
      rendertype_ = from.rendertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_stateduration(from.stateduration());
  }
}

void CrawlDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CrawlDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlDetails::CopyFrom(const CrawlDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CrawlDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x01000018) != 0x01000018) return false;
  return true;
}

void CrawlDetails::Swap(CrawlDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlDetails::InternalSwap(CrawlDetails* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  url_.Swap(&other->url_);
  httphead_.Swap(&other->httphead_);
  swap(lastcrawldate_, other->lastcrawldate_);
  swap(state_, other->state_);
  swap(idxcommand_, other->idxcommand_);
  swap(error_, other->error_);
  swap(checkstate_, other->checkstate_);
  swap(duration_, other->duration_);
  swap(disablereason_, other->disablereason_);
  swap(removereason_, other->removereason_);
  swap(urldata_, other->urldata_);
  swap(robotsstate_, other->robotsstate_);
  swap(isindexed_, other->isindexed_);
  swap(scriptremoved_, other->scriptremoved_);
  swap(contenttype_, other->contenttype_);
  swap(encoding_, other->encoding_);
  swap(language_, other->language_);
  swap(statuscode_, other->statuscode_);
  swap(firstinstatus_, other->firstinstatus_);
  swap(sourcemark_, other->sourcemark_);
  swap(contentsize_, other->contentsize_);
  swap(cleancontentsize_, other->cleancontentsize_);
  swap(rendertype_, other->rendertype_);
  swap(stateduration_, other->stateduration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrawlDetails::GetMetadata() const {
  protobuf_crawl_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_crawl_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrawlDetails

// required int64 lastCrawlDate = 1;
bool CrawlDetails::has_lastcrawldate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CrawlDetails::set_has_lastcrawldate() {
  _has_bits_[0] |= 0x00000008u;
}
void CrawlDetails::clear_has_lastcrawldate() {
  _has_bits_[0] &= ~0x00000008u;
}
void CrawlDetails::clear_lastcrawldate() {
  lastcrawldate_ = GOOGLE_LONGLONG(0);
  clear_has_lastcrawldate();
}
::google::protobuf::int64 CrawlDetails::lastcrawldate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.lastCrawlDate)
  return lastcrawldate_;
}
void CrawlDetails::set_lastcrawldate(::google::protobuf::int64 value) {
  set_has_lastcrawldate();
  lastcrawldate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.lastCrawlDate)
}

// required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
bool CrawlDetails::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CrawlDetails::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void CrawlDetails::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void CrawlDetails::clear_state() {
  state_ = 0;
  clear_has_state();
}
::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes CrawlDetails::state() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.state)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes >(state_);
}
void CrawlDetails::set_state(::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.state)
}

// required uint32 stateDuration = 3 [default = 1];
bool CrawlDetails::has_stateduration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CrawlDetails::set_has_stateduration() {
  _has_bits_[0] |= 0x01000000u;
}
void CrawlDetails::clear_has_stateduration() {
  _has_bits_[0] &= ~0x01000000u;
}
void CrawlDetails::clear_stateduration() {
  stateduration_ = 1u;
  clear_has_stateduration();
}
::google::protobuf::uint32 CrawlDetails::stateduration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.stateDuration)
  return stateduration_;
}
void CrawlDetails::set_stateduration(::google::protobuf::uint32 value) {
  set_has_stateduration();
  stateduration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.stateDuration)
}

// optional bool isIndexed = 4 [default = false];
bool CrawlDetails::has_isindexed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CrawlDetails::set_has_isindexed() {
  _has_bits_[0] |= 0x00002000u;
}
void CrawlDetails::clear_has_isindexed() {
  _has_bits_[0] &= ~0x00002000u;
}
void CrawlDetails::clear_isindexed() {
  isindexed_ = false;
  clear_has_isindexed();
}
bool CrawlDetails::isindexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.isIndexed)
  return isindexed_;
}
void CrawlDetails::set_isindexed(bool value) {
  set_has_isindexed();
  isindexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.isIndexed)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
bool CrawlDetails::has_idxcommand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CrawlDetails::set_has_idxcommand() {
  _has_bits_[0] |= 0x00000020u;
}
void CrawlDetails::clear_has_idxcommand() {
  _has_bits_[0] &= ~0x00000020u;
}
void CrawlDetails::clear_idxcommand() {
  idxcommand_ = 0;
  clear_has_idxcommand();
}
::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand CrawlDetails::idxcommand() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.idxCommand)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand >(idxcommand_);
}
void CrawlDetails::set_idxcommand(::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand_IsValid(value));
  set_has_idxcommand();
  idxcommand_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.idxCommand)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
bool CrawlDetails::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CrawlDetails::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
void CrawlDetails::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
void CrawlDetails::clear_error() {
  error_ = 0;
  clear_has_error();
}
::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes CrawlDetails::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.error)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes >(error_);
}
void CrawlDetails::set_error(::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.error)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
bool CrawlDetails::has_checkstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CrawlDetails::set_has_checkstate() {
  _has_bits_[0] |= 0x00000080u;
}
void CrawlDetails::clear_has_checkstate() {
  _has_bits_[0] &= ~0x00000080u;
}
void CrawlDetails::clear_checkstate() {
  checkstate_ = 0;
  clear_has_checkstate();
}
::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes CrawlDetails::checkstate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.checkState)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes >(checkstate_);
}
void CrawlDetails::set_checkstate(::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes_IsValid(value));
  set_has_checkstate();
  checkstate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.checkState)
}

// optional uint32 duration = 8 [default = 0];
bool CrawlDetails::has_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CrawlDetails::set_has_duration() {
  _has_bits_[0] |= 0x00000100u;
}
void CrawlDetails::clear_has_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
void CrawlDetails::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CrawlDetails::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.duration)
  return duration_;
}
void CrawlDetails::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.duration)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
bool CrawlDetails::has_disablereason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CrawlDetails::set_has_disablereason() {
  _has_bits_[0] |= 0x00000200u;
}
void CrawlDetails::clear_has_disablereason() {
  _has_bits_[0] &= ~0x00000200u;
}
void CrawlDetails::clear_disablereason() {
  disablereason_ = 0;
  clear_has_disablereason();
}
::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes CrawlDetails::disablereason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.disableReason)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes >(disablereason_);
}
void CrawlDetails::set_disablereason(::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes_IsValid(value));
  set_has_disablereason();
  disablereason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.disableReason)
}

// optional bytes hash = 10;
bool CrawlDetails::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrawlDetails::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CrawlDetails::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrawlDetails::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& CrawlDetails::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  return hash_.GetNoArena();
}
void CrawlDetails::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
#if LANG_CXX11
void CrawlDetails::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
#endif
void CrawlDetails::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
void CrawlDetails::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
::std::string* CrawlDetails::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrawlDetails::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrawlDetails::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
bool CrawlDetails::has_removereason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CrawlDetails::set_has_removereason() {
  _has_bits_[0] |= 0x00000400u;
}
void CrawlDetails::clear_has_removereason() {
  _has_bits_[0] &= ~0x00000400u;
}
void CrawlDetails::clear_removereason() {
  removereason_ = 0;
  clear_has_removereason();
}
::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes CrawlDetails::removereason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.removeReason)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes >(removereason_);
}
void CrawlDetails::set_removereason(::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes_IsValid(value));
  set_has_removereason();
  removereason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.removeReason)
}

// optional string url = 12;
bool CrawlDetails::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrawlDetails::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CrawlDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrawlDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CrawlDetails::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.url)
  return url_.GetNoArena();
}
void CrawlDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
#if LANG_CXX11
void CrawlDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
#endif
void CrawlDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
void CrawlDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
::std::string* CrawlDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrawlDetails::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrawlDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.url)
}

// optional int32 urlData = 13;
bool CrawlDetails::has_urldata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CrawlDetails::set_has_urldata() {
  _has_bits_[0] |= 0x00000800u;
}
void CrawlDetails::clear_has_urldata() {
  _has_bits_[0] &= ~0x00000800u;
}
void CrawlDetails::clear_urldata() {
  urldata_ = 0;
  clear_has_urldata();
}
::google::protobuf::int32 CrawlDetails::urldata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.urlData)
  return urldata_;
}
void CrawlDetails::set_urldata(::google::protobuf::int32 value) {
  set_has_urldata();
  urldata_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.urlData)
}

// optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
bool CrawlDetails::has_robotsstate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CrawlDetails::set_has_robotsstate() {
  _has_bits_[0] |= 0x00001000u;
}
void CrawlDetails::clear_has_robotsstate() {
  _has_bits_[0] &= ~0x00001000u;
}
void CrawlDetails::clear_robotsstate() {
  robotsstate_ = 0;
  clear_has_robotsstate();
}
::ru::mail::go::webbase::blobs::RobotsState CrawlDetails::robotsstate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.robotsState)
  return static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(robotsstate_);
}
void CrawlDetails::set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value) {
  assert(::ru::mail::go::webbase::blobs::RobotsState_IsValid(value));
  set_has_robotsstate();
  robotsstate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.robotsState)
}

// optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
bool CrawlDetails::has_contenttype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CrawlDetails::set_has_contenttype() {
  _has_bits_[0] |= 0x00008000u;
}
void CrawlDetails::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00008000u;
}
void CrawlDetails::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
::ru::mail::go::webbase::blobs::ContentType CrawlDetails::contenttype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.contentType)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(contenttype_);
}
void CrawlDetails::set_contenttype(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_contenttype();
  contenttype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.contentType)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
bool CrawlDetails::has_encoding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CrawlDetails::set_has_encoding() {
  _has_bits_[0] |= 0x00010000u;
}
void CrawlDetails::clear_has_encoding() {
  _has_bits_[0] &= ~0x00010000u;
}
void CrawlDetails::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding CrawlDetails::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void CrawlDetails::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.encoding)
}

// optional .ru.mail.go.webbase.blobs.Language language = 17;
bool CrawlDetails::has_language() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CrawlDetails::set_has_language() {
  _has_bits_[0] |= 0x00020000u;
}
void CrawlDetails::clear_has_language() {
  _has_bits_[0] &= ~0x00020000u;
}
void CrawlDetails::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language CrawlDetails::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void CrawlDetails::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.language)
}

// optional int32 statusCode = 18;
bool CrawlDetails::has_statuscode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CrawlDetails::set_has_statuscode() {
  _has_bits_[0] |= 0x00040000u;
}
void CrawlDetails::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00040000u;
}
void CrawlDetails::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
::google::protobuf::int32 CrawlDetails::statuscode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.statusCode)
  return statuscode_;
}
void CrawlDetails::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.statusCode)
}

// optional string httpHead = 19;
bool CrawlDetails::has_httphead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrawlDetails::set_has_httphead() {
  _has_bits_[0] |= 0x00000004u;
}
void CrawlDetails::clear_has_httphead() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrawlDetails::clear_httphead() {
  httphead_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_httphead();
}
const ::std::string& CrawlDetails::httphead() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  return httphead_.GetNoArena();
}
void CrawlDetails::set_httphead(const ::std::string& value) {
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
#if LANG_CXX11
void CrawlDetails::set_httphead(::std::string&& value) {
  set_has_httphead();
  httphead_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
#endif
void CrawlDetails::set_httphead(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
void CrawlDetails::set_httphead(const char* value, size_t size) {
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
::std::string* CrawlDetails::mutable_httphead() {
  set_has_httphead();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  return httphead_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrawlDetails::release_httphead() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  clear_has_httphead();
  return httphead_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrawlDetails::set_allocated_httphead(::std::string* httphead) {
  if (httphead != NULL) {
    set_has_httphead();
  } else {
    clear_has_httphead();
  }
  httphead_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), httphead);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}

// optional uint64 firstInStatus = 20;
bool CrawlDetails::has_firstinstatus() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CrawlDetails::set_has_firstinstatus() {
  _has_bits_[0] |= 0x00080000u;
}
void CrawlDetails::clear_has_firstinstatus() {
  _has_bits_[0] &= ~0x00080000u;
}
void CrawlDetails::clear_firstinstatus() {
  firstinstatus_ = GOOGLE_ULONGLONG(0);
  clear_has_firstinstatus();
}
::google::protobuf::uint64 CrawlDetails::firstinstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.firstInStatus)
  return firstinstatus_;
}
void CrawlDetails::set_firstinstatus(::google::protobuf::uint64 value) {
  set_has_firstinstatus();
  firstinstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.firstInStatus)
}

// optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
bool CrawlDetails::has_sourcemark() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CrawlDetails::set_has_sourcemark() {
  _has_bits_[0] |= 0x00100000u;
}
void CrawlDetails::clear_has_sourcemark() {
  _has_bits_[0] &= ~0x00100000u;
}
void CrawlDetails::clear_sourcemark() {
  sourcemark_ = 0;
  clear_has_sourcemark();
}
::ru::mail::go::webbase::blobs::SourceMark CrawlDetails::sourcemark() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.sourceMark)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(sourcemark_);
}
void CrawlDetails::set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value) {
  assert(::ru::mail::go::webbase::blobs::SourceMark_IsValid(value));
  set_has_sourcemark();
  sourcemark_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.sourceMark)
}

// optional uint32 contentSize = 22;
bool CrawlDetails::has_contentsize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CrawlDetails::set_has_contentsize() {
  _has_bits_[0] |= 0x00200000u;
}
void CrawlDetails::clear_has_contentsize() {
  _has_bits_[0] &= ~0x00200000u;
}
void CrawlDetails::clear_contentsize() {
  contentsize_ = 0u;
  clear_has_contentsize();
}
::google::protobuf::uint32 CrawlDetails::contentsize() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.contentSize)
  return contentsize_;
}
void CrawlDetails::set_contentsize(::google::protobuf::uint32 value) {
  set_has_contentsize();
  contentsize_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.contentSize)
}

// optional uint32 cleanContentSize = 23;
bool CrawlDetails::has_cleancontentsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CrawlDetails::set_has_cleancontentsize() {
  _has_bits_[0] |= 0x00400000u;
}
void CrawlDetails::clear_has_cleancontentsize() {
  _has_bits_[0] &= ~0x00400000u;
}
void CrawlDetails::clear_cleancontentsize() {
  cleancontentsize_ = 0u;
  clear_has_cleancontentsize();
}
::google::protobuf::uint32 CrawlDetails::cleancontentsize() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.cleanContentSize)
  return cleancontentsize_;
}
void CrawlDetails::set_cleancontentsize(::google::protobuf::uint32 value) {
  set_has_cleancontentsize();
  cleancontentsize_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.cleanContentSize)
}

// optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
bool CrawlDetails::has_rendertype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CrawlDetails::set_has_rendertype() {
  _has_bits_[0] |= 0x00800000u;
}
void CrawlDetails::clear_has_rendertype() {
  _has_bits_[0] &= ~0x00800000u;
}
void CrawlDetails::clear_rendertype() {
  rendertype_ = 0;
  clear_has_rendertype();
}
::ru::mail::go::webbase::blobs::RenderType CrawlDetails::rendertype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.renderType)
  return static_cast< ::ru::mail::go::webbase::blobs::RenderType >(rendertype_);
}
void CrawlDetails::set_rendertype(::ru::mail::go::webbase::blobs::RenderType value) {
  assert(::ru::mail::go::webbase::blobs::RenderType_IsValid(value));
  set_has_rendertype();
  rendertype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.renderType)
}

// optional bool scriptRemoved = 25;
bool CrawlDetails::has_scriptremoved() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CrawlDetails::set_has_scriptremoved() {
  _has_bits_[0] |= 0x00004000u;
}
void CrawlDetails::clear_has_scriptremoved() {
  _has_bits_[0] &= ~0x00004000u;
}
void CrawlDetails::clear_scriptremoved() {
  scriptremoved_ = false;
  clear_has_scriptremoved();
}
bool CrawlDetails::scriptremoved() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.scriptRemoved)
  return scriptremoved_;
}
void CrawlDetails::set_scriptremoved(bool value) {
  set_has_scriptremoved();
  scriptremoved_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.scriptRemoved)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
