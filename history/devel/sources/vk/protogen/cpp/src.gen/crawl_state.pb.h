// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crawl_state.proto

#ifndef PROTOBUF_crawl_5fstate_2eproto__INCLUDED
#define PROTOBUF_crawl_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "document_enums.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class CrawlDetails;
class CrawlDetailsDefaultTypeInternal;
extern CrawlDetailsDefaultTypeInternal _CrawlDetails_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_crawl_5fstate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_crawl_5fstate_2eproto

enum CrawlDetails_stateTypes {
  CrawlDetails_stateTypes_ST_NEW = 0,
  CrawlDetails_stateTypes_ST_FETCHED = 1,
  CrawlDetails_stateTypes_ST_FAILURE = 2,
  CrawlDetails_stateTypes_ST_REMOVED = 3,
  CrawlDetails_stateTypes_ST_REDIRECT = 4,
  CrawlDetails_stateTypes_ST_DISABLED = 5
};
bool CrawlDetails_stateTypes_IsValid(int value);
const CrawlDetails_stateTypes CrawlDetails_stateTypes_stateTypes_MIN = CrawlDetails_stateTypes_ST_NEW;
const CrawlDetails_stateTypes CrawlDetails_stateTypes_stateTypes_MAX = CrawlDetails_stateTypes_ST_DISABLED;
const int CrawlDetails_stateTypes_stateTypes_ARRAYSIZE = CrawlDetails_stateTypes_stateTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_stateTypes_descriptor();
inline const ::std::string& CrawlDetails_stateTypes_Name(CrawlDetails_stateTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_stateTypes_descriptor(), value);
}
inline bool CrawlDetails_stateTypes_Parse(
    const ::std::string& name, CrawlDetails_stateTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_stateTypes>(
    CrawlDetails_stateTypes_descriptor(), name, value);
}
enum CrawlDetails_indexerCommand {
  CrawlDetails_indexerCommand_IDX_NOTHING = 0,
  CrawlDetails_indexerCommand_IDX_ADD = 1,
  CrawlDetails_indexerCommand_IDX_REMOVE = 2,
  CrawlDetails_indexerCommand_IDX_REDIRECT = 3
};
bool CrawlDetails_indexerCommand_IsValid(int value);
const CrawlDetails_indexerCommand CrawlDetails_indexerCommand_indexerCommand_MIN = CrawlDetails_indexerCommand_IDX_NOTHING;
const CrawlDetails_indexerCommand CrawlDetails_indexerCommand_indexerCommand_MAX = CrawlDetails_indexerCommand_IDX_REDIRECT;
const int CrawlDetails_indexerCommand_indexerCommand_ARRAYSIZE = CrawlDetails_indexerCommand_indexerCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_indexerCommand_descriptor();
inline const ::std::string& CrawlDetails_indexerCommand_Name(CrawlDetails_indexerCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_indexerCommand_descriptor(), value);
}
inline bool CrawlDetails_indexerCommand_Parse(
    const ::std::string& name, CrawlDetails_indexerCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_indexerCommand>(
    CrawlDetails_indexerCommand_descriptor(), name, value);
}
enum CrawlDetails_errorTypes {
  CrawlDetails_errorTypes_ERR_NONE = 0,
  CrawlDetails_errorTypes_ERR_RESOLVE = 1,
  CrawlDetails_errorTypes_ERR_CONNECTION = 2,
  CrawlDetails_errorTypes_ERR_EMPTY_HEAD = 3,
  CrawlDetails_errorTypes_ERR_INVALID_PROTOCOL = 4,
  CrawlDetails_errorTypes_ERR_SOCKET_BUF_SIZE = 5,
  CrawlDetails_errorTypes_ERR_HEAD_SIZE = 6,
  CrawlDetails_errorTypes_ERR_BODY_SIZE = 7,
  CrawlDetails_errorTypes_ERR_PARSING = 8,
  CrawlDetails_errorTypes_ERR_DECOMPRESS = 9,
  CrawlDetails_errorTypes_ERR_UNCHUNK = 10
};
bool CrawlDetails_errorTypes_IsValid(int value);
const CrawlDetails_errorTypes CrawlDetails_errorTypes_errorTypes_MIN = CrawlDetails_errorTypes_ERR_NONE;
const CrawlDetails_errorTypes CrawlDetails_errorTypes_errorTypes_MAX = CrawlDetails_errorTypes_ERR_UNCHUNK;
const int CrawlDetails_errorTypes_errorTypes_ARRAYSIZE = CrawlDetails_errorTypes_errorTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_errorTypes_descriptor();
inline const ::std::string& CrawlDetails_errorTypes_Name(CrawlDetails_errorTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_errorTypes_descriptor(), value);
}
inline bool CrawlDetails_errorTypes_Parse(
    const ::std::string& name, CrawlDetails_errorTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_errorTypes>(
    CrawlDetails_errorTypes_descriptor(), name, value);
}
enum CrawlDetails_checkTypes {
  CrawlDetails_checkTypes_CH_UNKNOWN = 0,
  CrawlDetails_checkTypes_CH_CHANGED = 1,
  CrawlDetails_checkTypes_CH_EQUAL = 2,
  CrawlDetails_checkTypes_CH_NOT_MODIFIED = 3
};
bool CrawlDetails_checkTypes_IsValid(int value);
const CrawlDetails_checkTypes CrawlDetails_checkTypes_checkTypes_MIN = CrawlDetails_checkTypes_CH_UNKNOWN;
const CrawlDetails_checkTypes CrawlDetails_checkTypes_checkTypes_MAX = CrawlDetails_checkTypes_CH_NOT_MODIFIED;
const int CrawlDetails_checkTypes_checkTypes_ARRAYSIZE = CrawlDetails_checkTypes_checkTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_checkTypes_descriptor();
inline const ::std::string& CrawlDetails_checkTypes_Name(CrawlDetails_checkTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_checkTypes_descriptor(), value);
}
inline bool CrawlDetails_checkTypes_Parse(
    const ::std::string& name, CrawlDetails_checkTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_checkTypes>(
    CrawlDetails_checkTypes_descriptor(), name, value);
}
enum CrawlDetails_disableTypes {
  CrawlDetails_disableTypes_D_UNKNOWN = 0,
  CrawlDetails_disableTypes_D_NOINDEX = 1,
  CrawlDetails_disableTypes_D_CANONICAL = 2,
  CrawlDetails_disableTypes_D_BAD_LANGUAGE = 3,
  CrawlDetails_disableTypes_D_UNKNOWN_LANG_TYPE = 4,
  CrawlDetails_disableTypes_D_N_HTML_INFO = 5,
  CrawlDetails_disableTypes_D_NOT_SITEMAP = 6,
  CrawlDetails_disableTypes_D_BAD_MIME_TYPE = 7,
  CrawlDetails_disableTypes_D_IS_GARBAGE = 8,
  CrawlDetails_disableTypes_D_INF_REDIRECT = 9
};
bool CrawlDetails_disableTypes_IsValid(int value);
const CrawlDetails_disableTypes CrawlDetails_disableTypes_disableTypes_MIN = CrawlDetails_disableTypes_D_UNKNOWN;
const CrawlDetails_disableTypes CrawlDetails_disableTypes_disableTypes_MAX = CrawlDetails_disableTypes_D_INF_REDIRECT;
const int CrawlDetails_disableTypes_disableTypes_ARRAYSIZE = CrawlDetails_disableTypes_disableTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_disableTypes_descriptor();
inline const ::std::string& CrawlDetails_disableTypes_Name(CrawlDetails_disableTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_disableTypes_descriptor(), value);
}
inline bool CrawlDetails_disableTypes_Parse(
    const ::std::string& name, CrawlDetails_disableTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_disableTypes>(
    CrawlDetails_disableTypes_descriptor(), name, value);
}
enum CrawlDetails_removeTypes {
  CrawlDetails_removeTypes_RM_UNKNOWN = 0,
  CrawlDetails_removeTypes_RM_NOT_EXIST = 1,
  CrawlDetails_removeTypes_RM_ROBOTS = 2,
  CrawlDetails_removeTypes_RM_DUPLICATE = 3,
  CrawlDetails_removeTypes_RM_BLACKLIST = 4,
  CrawlDetails_removeTypes_RM_QUOTA = 5,
  CrawlDetails_removeTypes_RM_POSSIBLE_CUSTOM_PAGE = 6,
  CrawlDetails_removeTypes_RM_MERGE_DISABLED = 7,
  CrawlDetails_removeTypes_RM_MERGE_BANNED = 8,
  CrawlDetails_removeTypes_RM_MERGE_DUPLICATE = 9,
  CrawlDetails_removeTypes_RM_MERGE_MULTI = 10,
  CrawlDetails_removeTypes_RM_ROBOTS_CLEAN_PARAM = 11,
  CrawlDetails_removeTypes_RM_BY_SERVICE_API = 12,
  CrawlDetails_removeTypes_RM_DEAD_HOST = 13,
  CrawlDetails_removeTypes_RM_DEAD_HOST_RESTORE = 14
};
bool CrawlDetails_removeTypes_IsValid(int value);
const CrawlDetails_removeTypes CrawlDetails_removeTypes_removeTypes_MIN = CrawlDetails_removeTypes_RM_UNKNOWN;
const CrawlDetails_removeTypes CrawlDetails_removeTypes_removeTypes_MAX = CrawlDetails_removeTypes_RM_DEAD_HOST_RESTORE;
const int CrawlDetails_removeTypes_removeTypes_ARRAYSIZE = CrawlDetails_removeTypes_removeTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrawlDetails_removeTypes_descriptor();
inline const ::std::string& CrawlDetails_removeTypes_Name(CrawlDetails_removeTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrawlDetails_removeTypes_descriptor(), value);
}
inline bool CrawlDetails_removeTypes_Parse(
    const ::std::string& name, CrawlDetails_removeTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrawlDetails_removeTypes>(
    CrawlDetails_removeTypes_descriptor(), name, value);
}
// ===================================================================

class CrawlDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CrawlDetails) */ {
 public:
  CrawlDetails();
  virtual ~CrawlDetails();

  CrawlDetails(const CrawlDetails& from);

  inline CrawlDetails& operator=(const CrawlDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrawlDetails(CrawlDetails&& from) noexcept
    : CrawlDetails() {
    *this = ::std::move(from);
  }

  inline CrawlDetails& operator=(CrawlDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrawlDetails& default_instance();

  static inline const CrawlDetails* internal_default_instance() {
    return reinterpret_cast<const CrawlDetails*>(
               &_CrawlDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CrawlDetails* other);
  friend void swap(CrawlDetails& a, CrawlDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrawlDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  CrawlDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrawlDetails& from);
  void MergeFrom(const CrawlDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrawlDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CrawlDetails_stateTypes stateTypes;
  static const stateTypes ST_NEW =
    CrawlDetails_stateTypes_ST_NEW;
  static const stateTypes ST_FETCHED =
    CrawlDetails_stateTypes_ST_FETCHED;
  static const stateTypes ST_FAILURE =
    CrawlDetails_stateTypes_ST_FAILURE;
  static const stateTypes ST_REMOVED =
    CrawlDetails_stateTypes_ST_REMOVED;
  static const stateTypes ST_REDIRECT =
    CrawlDetails_stateTypes_ST_REDIRECT;
  static const stateTypes ST_DISABLED =
    CrawlDetails_stateTypes_ST_DISABLED;
  static inline bool stateTypes_IsValid(int value) {
    return CrawlDetails_stateTypes_IsValid(value);
  }
  static const stateTypes stateTypes_MIN =
    CrawlDetails_stateTypes_stateTypes_MIN;
  static const stateTypes stateTypes_MAX =
    CrawlDetails_stateTypes_stateTypes_MAX;
  static const int stateTypes_ARRAYSIZE =
    CrawlDetails_stateTypes_stateTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  stateTypes_descriptor() {
    return CrawlDetails_stateTypes_descriptor();
  }
  static inline const ::std::string& stateTypes_Name(stateTypes value) {
    return CrawlDetails_stateTypes_Name(value);
  }
  static inline bool stateTypes_Parse(const ::std::string& name,
      stateTypes* value) {
    return CrawlDetails_stateTypes_Parse(name, value);
  }

  typedef CrawlDetails_indexerCommand indexerCommand;
  static const indexerCommand IDX_NOTHING =
    CrawlDetails_indexerCommand_IDX_NOTHING;
  static const indexerCommand IDX_ADD =
    CrawlDetails_indexerCommand_IDX_ADD;
  static const indexerCommand IDX_REMOVE =
    CrawlDetails_indexerCommand_IDX_REMOVE;
  static const indexerCommand IDX_REDIRECT =
    CrawlDetails_indexerCommand_IDX_REDIRECT;
  static inline bool indexerCommand_IsValid(int value) {
    return CrawlDetails_indexerCommand_IsValid(value);
  }
  static const indexerCommand indexerCommand_MIN =
    CrawlDetails_indexerCommand_indexerCommand_MIN;
  static const indexerCommand indexerCommand_MAX =
    CrawlDetails_indexerCommand_indexerCommand_MAX;
  static const int indexerCommand_ARRAYSIZE =
    CrawlDetails_indexerCommand_indexerCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  indexerCommand_descriptor() {
    return CrawlDetails_indexerCommand_descriptor();
  }
  static inline const ::std::string& indexerCommand_Name(indexerCommand value) {
    return CrawlDetails_indexerCommand_Name(value);
  }
  static inline bool indexerCommand_Parse(const ::std::string& name,
      indexerCommand* value) {
    return CrawlDetails_indexerCommand_Parse(name, value);
  }

  typedef CrawlDetails_errorTypes errorTypes;
  static const errorTypes ERR_NONE =
    CrawlDetails_errorTypes_ERR_NONE;
  static const errorTypes ERR_RESOLVE =
    CrawlDetails_errorTypes_ERR_RESOLVE;
  static const errorTypes ERR_CONNECTION =
    CrawlDetails_errorTypes_ERR_CONNECTION;
  static const errorTypes ERR_EMPTY_HEAD =
    CrawlDetails_errorTypes_ERR_EMPTY_HEAD;
  static const errorTypes ERR_INVALID_PROTOCOL =
    CrawlDetails_errorTypes_ERR_INVALID_PROTOCOL;
  static const errorTypes ERR_SOCKET_BUF_SIZE =
    CrawlDetails_errorTypes_ERR_SOCKET_BUF_SIZE;
  static const errorTypes ERR_HEAD_SIZE =
    CrawlDetails_errorTypes_ERR_HEAD_SIZE;
  static const errorTypes ERR_BODY_SIZE =
    CrawlDetails_errorTypes_ERR_BODY_SIZE;
  static const errorTypes ERR_PARSING =
    CrawlDetails_errorTypes_ERR_PARSING;
  static const errorTypes ERR_DECOMPRESS =
    CrawlDetails_errorTypes_ERR_DECOMPRESS;
  static const errorTypes ERR_UNCHUNK =
    CrawlDetails_errorTypes_ERR_UNCHUNK;
  static inline bool errorTypes_IsValid(int value) {
    return CrawlDetails_errorTypes_IsValid(value);
  }
  static const errorTypes errorTypes_MIN =
    CrawlDetails_errorTypes_errorTypes_MIN;
  static const errorTypes errorTypes_MAX =
    CrawlDetails_errorTypes_errorTypes_MAX;
  static const int errorTypes_ARRAYSIZE =
    CrawlDetails_errorTypes_errorTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  errorTypes_descriptor() {
    return CrawlDetails_errorTypes_descriptor();
  }
  static inline const ::std::string& errorTypes_Name(errorTypes value) {
    return CrawlDetails_errorTypes_Name(value);
  }
  static inline bool errorTypes_Parse(const ::std::string& name,
      errorTypes* value) {
    return CrawlDetails_errorTypes_Parse(name, value);
  }

  typedef CrawlDetails_checkTypes checkTypes;
  static const checkTypes CH_UNKNOWN =
    CrawlDetails_checkTypes_CH_UNKNOWN;
  static const checkTypes CH_CHANGED =
    CrawlDetails_checkTypes_CH_CHANGED;
  static const checkTypes CH_EQUAL =
    CrawlDetails_checkTypes_CH_EQUAL;
  static const checkTypes CH_NOT_MODIFIED =
    CrawlDetails_checkTypes_CH_NOT_MODIFIED;
  static inline bool checkTypes_IsValid(int value) {
    return CrawlDetails_checkTypes_IsValid(value);
  }
  static const checkTypes checkTypes_MIN =
    CrawlDetails_checkTypes_checkTypes_MIN;
  static const checkTypes checkTypes_MAX =
    CrawlDetails_checkTypes_checkTypes_MAX;
  static const int checkTypes_ARRAYSIZE =
    CrawlDetails_checkTypes_checkTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  checkTypes_descriptor() {
    return CrawlDetails_checkTypes_descriptor();
  }
  static inline const ::std::string& checkTypes_Name(checkTypes value) {
    return CrawlDetails_checkTypes_Name(value);
  }
  static inline bool checkTypes_Parse(const ::std::string& name,
      checkTypes* value) {
    return CrawlDetails_checkTypes_Parse(name, value);
  }

  typedef CrawlDetails_disableTypes disableTypes;
  static const disableTypes D_UNKNOWN =
    CrawlDetails_disableTypes_D_UNKNOWN;
  static const disableTypes D_NOINDEX =
    CrawlDetails_disableTypes_D_NOINDEX;
  static const disableTypes D_CANONICAL =
    CrawlDetails_disableTypes_D_CANONICAL;
  static const disableTypes D_BAD_LANGUAGE =
    CrawlDetails_disableTypes_D_BAD_LANGUAGE;
  static const disableTypes D_UNKNOWN_LANG_TYPE =
    CrawlDetails_disableTypes_D_UNKNOWN_LANG_TYPE;
  static const disableTypes D_N_HTML_INFO =
    CrawlDetails_disableTypes_D_N_HTML_INFO;
  static const disableTypes D_NOT_SITEMAP =
    CrawlDetails_disableTypes_D_NOT_SITEMAP;
  static const disableTypes D_BAD_MIME_TYPE =
    CrawlDetails_disableTypes_D_BAD_MIME_TYPE;
  static const disableTypes D_IS_GARBAGE =
    CrawlDetails_disableTypes_D_IS_GARBAGE;
  static const disableTypes D_INF_REDIRECT =
    CrawlDetails_disableTypes_D_INF_REDIRECT;
  static inline bool disableTypes_IsValid(int value) {
    return CrawlDetails_disableTypes_IsValid(value);
  }
  static const disableTypes disableTypes_MIN =
    CrawlDetails_disableTypes_disableTypes_MIN;
  static const disableTypes disableTypes_MAX =
    CrawlDetails_disableTypes_disableTypes_MAX;
  static const int disableTypes_ARRAYSIZE =
    CrawlDetails_disableTypes_disableTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  disableTypes_descriptor() {
    return CrawlDetails_disableTypes_descriptor();
  }
  static inline const ::std::string& disableTypes_Name(disableTypes value) {
    return CrawlDetails_disableTypes_Name(value);
  }
  static inline bool disableTypes_Parse(const ::std::string& name,
      disableTypes* value) {
    return CrawlDetails_disableTypes_Parse(name, value);
  }

  typedef CrawlDetails_removeTypes removeTypes;
  static const removeTypes RM_UNKNOWN =
    CrawlDetails_removeTypes_RM_UNKNOWN;
  static const removeTypes RM_NOT_EXIST =
    CrawlDetails_removeTypes_RM_NOT_EXIST;
  static const removeTypes RM_ROBOTS =
    CrawlDetails_removeTypes_RM_ROBOTS;
  static const removeTypes RM_DUPLICATE =
    CrawlDetails_removeTypes_RM_DUPLICATE;
  static const removeTypes RM_BLACKLIST =
    CrawlDetails_removeTypes_RM_BLACKLIST;
  static const removeTypes RM_QUOTA =
    CrawlDetails_removeTypes_RM_QUOTA;
  static const removeTypes RM_POSSIBLE_CUSTOM_PAGE =
    CrawlDetails_removeTypes_RM_POSSIBLE_CUSTOM_PAGE;
  static const removeTypes RM_MERGE_DISABLED =
    CrawlDetails_removeTypes_RM_MERGE_DISABLED;
  static const removeTypes RM_MERGE_BANNED =
    CrawlDetails_removeTypes_RM_MERGE_BANNED;
  static const removeTypes RM_MERGE_DUPLICATE =
    CrawlDetails_removeTypes_RM_MERGE_DUPLICATE;
  static const removeTypes RM_MERGE_MULTI =
    CrawlDetails_removeTypes_RM_MERGE_MULTI;
  static const removeTypes RM_ROBOTS_CLEAN_PARAM =
    CrawlDetails_removeTypes_RM_ROBOTS_CLEAN_PARAM;
  static const removeTypes RM_BY_SERVICE_API =
    CrawlDetails_removeTypes_RM_BY_SERVICE_API;
  static const removeTypes RM_DEAD_HOST =
    CrawlDetails_removeTypes_RM_DEAD_HOST;
  static const removeTypes RM_DEAD_HOST_RESTORE =
    CrawlDetails_removeTypes_RM_DEAD_HOST_RESTORE;
  static inline bool removeTypes_IsValid(int value) {
    return CrawlDetails_removeTypes_IsValid(value);
  }
  static const removeTypes removeTypes_MIN =
    CrawlDetails_removeTypes_removeTypes_MIN;
  static const removeTypes removeTypes_MAX =
    CrawlDetails_removeTypes_removeTypes_MAX;
  static const int removeTypes_ARRAYSIZE =
    CrawlDetails_removeTypes_removeTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  removeTypes_descriptor() {
    return CrawlDetails_removeTypes_descriptor();
  }
  static inline const ::std::string& removeTypes_Name(removeTypes value) {
    return CrawlDetails_removeTypes_Name(value);
  }
  static inline bool removeTypes_Parse(const ::std::string& name,
      removeTypes* value) {
    return CrawlDetails_removeTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes hash = 10;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 10;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string url = 12;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 12;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string httpHead = 19;
  bool has_httphead() const;
  void clear_httphead();
  static const int kHttpHeadFieldNumber = 19;
  const ::std::string& httphead() const;
  void set_httphead(const ::std::string& value);
  #if LANG_CXX11
  void set_httphead(::std::string&& value);
  #endif
  void set_httphead(const char* value);
  void set_httphead(const char* value, size_t size);
  ::std::string* mutable_httphead();
  ::std::string* release_httphead();
  void set_allocated_httphead(::std::string* httphead);

  // required int64 lastCrawlDate = 1;
  bool has_lastcrawldate() const;
  void clear_lastcrawldate();
  static const int kLastCrawlDateFieldNumber = 1;
  ::google::protobuf::int64 lastcrawldate() const;
  void set_lastcrawldate(::google::protobuf::int64 value);

  // required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes state() const;
  void set_state(::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes value);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_idxcommand() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_idxcommand();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kIdxCommandFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand idxcommand() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_idxcommand(::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand value);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes error() const;
  void set_error(::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes value);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
  bool has_checkstate() const;
  void clear_checkstate();
  static const int kCheckStateFieldNumber = 7;
  ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes checkstate() const;
  void set_checkstate(::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes value);

  // optional uint32 duration = 8 [default = 0];
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
  bool has_disablereason() const;
  void clear_disablereason();
  static const int kDisableReasonFieldNumber = 9;
  ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes disablereason() const;
  void set_disablereason(::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes value);

  // optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
  bool has_removereason() const;
  void clear_removereason();
  static const int kRemoveReasonFieldNumber = 11;
  ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes removereason() const;
  void set_removereason(::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes value);

  // optional int32 urlData = 13;
  bool has_urldata() const;
  void clear_urldata();
  static const int kUrlDataFieldNumber = 13;
  ::google::protobuf::int32 urldata() const;
  void set_urldata(::google::protobuf::int32 value);

  // optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
  bool has_robotsstate() const;
  void clear_robotsstate();
  static const int kRobotsStateFieldNumber = 14;
  ::ru::mail::go::webbase::blobs::RobotsState robotsstate() const;
  void set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value);

  // optional bool isIndexed = 4 [default = false];
  bool has_isindexed() const;
  void clear_isindexed();
  static const int kIsIndexedFieldNumber = 4;
  bool isindexed() const;
  void set_isindexed(bool value);

  // optional bool scriptRemoved = 25;
  bool has_scriptremoved() const;
  void clear_scriptremoved();
  static const int kScriptRemovedFieldNumber = 25;
  bool scriptremoved() const;
  void set_scriptremoved(bool value);

  // optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
  bool has_contenttype() const;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 15;
  ::ru::mail::go::webbase::blobs::ContentType contenttype() const;
  void set_contenttype(::ru::mail::go::webbase::blobs::ContentType value);

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 16;
  ::ru::mail::go::webbase::blobs::Encoding encoding() const;
  void set_encoding(::ru::mail::go::webbase::blobs::Encoding value);

  // optional .ru.mail.go.webbase.blobs.Language language = 17;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 17;
  ::ru::mail::go::webbase::blobs::Language language() const;
  void set_language(::ru::mail::go::webbase::blobs::Language value);

  // optional int32 statusCode = 18;
  bool has_statuscode() const;
  void clear_statuscode();
  static const int kStatusCodeFieldNumber = 18;
  ::google::protobuf::int32 statuscode() const;
  void set_statuscode(::google::protobuf::int32 value);

  // optional uint64 firstInStatus = 20;
  bool has_firstinstatus() const;
  void clear_firstinstatus();
  static const int kFirstInStatusFieldNumber = 20;
  ::google::protobuf::uint64 firstinstatus() const;
  void set_firstinstatus(::google::protobuf::uint64 value);

  // optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
  bool has_sourcemark() const;
  void clear_sourcemark();
  static const int kSourceMarkFieldNumber = 21;
  ::ru::mail::go::webbase::blobs::SourceMark sourcemark() const;
  void set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value);

  // optional uint32 contentSize = 22;
  bool has_contentsize() const;
  void clear_contentsize();
  static const int kContentSizeFieldNumber = 22;
  ::google::protobuf::uint32 contentsize() const;
  void set_contentsize(::google::protobuf::uint32 value);

  // optional uint32 cleanContentSize = 23;
  bool has_cleancontentsize() const;
  void clear_cleancontentsize();
  static const int kCleanContentSizeFieldNumber = 23;
  ::google::protobuf::uint32 cleancontentsize() const;
  void set_cleancontentsize(::google::protobuf::uint32 value);

  // optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
  bool has_rendertype() const;
  void clear_rendertype();
  static const int kRenderTypeFieldNumber = 24;
  ::ru::mail::go::webbase::blobs::RenderType rendertype() const;
  void set_rendertype(::ru::mail::go::webbase::blobs::RenderType value);

  // required uint32 stateDuration = 3 [default = 1];
  bool has_stateduration() const;
  void clear_stateduration();
  static const int kStateDurationFieldNumber = 3;
  ::google::protobuf::uint32 stateduration() const;
  void set_stateduration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CrawlDetails)
 private:
  void set_has_lastcrawldate();
  void clear_has_lastcrawldate();
  void set_has_state();
  void clear_has_state();
  void set_has_stateduration();
  void clear_has_stateduration();
  void set_has_isindexed();
  void clear_has_isindexed();
  void set_has_idxcommand();
  void clear_has_idxcommand();
  void set_has_error();
  void clear_has_error();
  void set_has_checkstate();
  void clear_has_checkstate();
  void set_has_duration();
  void clear_has_duration();
  void set_has_disablereason();
  void clear_has_disablereason();
  void set_has_hash();
  void clear_has_hash();
  void set_has_removereason();
  void clear_has_removereason();
  void set_has_url();
  void clear_has_url();
  void set_has_urldata();
  void clear_has_urldata();
  void set_has_robotsstate();
  void clear_has_robotsstate();
  void set_has_contenttype();
  void clear_has_contenttype();
  void set_has_encoding();
  void clear_has_encoding();
  void set_has_language();
  void clear_has_language();
  void set_has_statuscode();
  void clear_has_statuscode();
  void set_has_httphead();
  void clear_has_httphead();
  void set_has_firstinstatus();
  void clear_has_firstinstatus();
  void set_has_sourcemark();
  void clear_has_sourcemark();
  void set_has_contentsize();
  void clear_has_contentsize();
  void set_has_cleancontentsize();
  void clear_has_cleancontentsize();
  void set_has_rendertype();
  void clear_has_rendertype();
  void set_has_scriptremoved();
  void clear_has_scriptremoved();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr httphead_;
  ::google::protobuf::int64 lastcrawldate_;
  int state_;
  int idxcommand_;
  int error_;
  int checkstate_;
  ::google::protobuf::uint32 duration_;
  int disablereason_;
  int removereason_;
  ::google::protobuf::int32 urldata_;
  int robotsstate_;
  bool isindexed_;
  bool scriptremoved_;
  int contenttype_;
  int encoding_;
  int language_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::uint64 firstinstatus_;
  int sourcemark_;
  ::google::protobuf::uint32 contentsize_;
  ::google::protobuf::uint32 cleancontentsize_;
  int rendertype_;
  ::google::protobuf::uint32 stateduration_;
  friend struct protobuf_crawl_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CrawlDetails

// required int64 lastCrawlDate = 1;
inline bool CrawlDetails::has_lastcrawldate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrawlDetails::set_has_lastcrawldate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrawlDetails::clear_has_lastcrawldate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrawlDetails::clear_lastcrawldate() {
  lastcrawldate_ = GOOGLE_LONGLONG(0);
  clear_has_lastcrawldate();
}
inline ::google::protobuf::int64 CrawlDetails::lastcrawldate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.lastCrawlDate)
  return lastcrawldate_;
}
inline void CrawlDetails::set_lastcrawldate(::google::protobuf::int64 value) {
  set_has_lastcrawldate();
  lastcrawldate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.lastCrawlDate)
}

// required .ru.mail.go.webbase.blobs.CrawlDetails.stateTypes state = 2 [default = ST_NEW];
inline bool CrawlDetails::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrawlDetails::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrawlDetails::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrawlDetails::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes CrawlDetails::state() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.state)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes >(state_);
}
inline void CrawlDetails::set_state(::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.state)
}

// required uint32 stateDuration = 3 [default = 1];
inline bool CrawlDetails::has_stateduration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CrawlDetails::set_has_stateduration() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CrawlDetails::clear_has_stateduration() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CrawlDetails::clear_stateduration() {
  stateduration_ = 1u;
  clear_has_stateduration();
}
inline ::google::protobuf::uint32 CrawlDetails::stateduration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.stateDuration)
  return stateduration_;
}
inline void CrawlDetails::set_stateduration(::google::protobuf::uint32 value) {
  set_has_stateduration();
  stateduration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.stateDuration)
}

// optional bool isIndexed = 4 [default = false];
inline bool CrawlDetails::has_isindexed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CrawlDetails::set_has_isindexed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CrawlDetails::clear_has_isindexed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CrawlDetails::clear_isindexed() {
  isindexed_ = false;
  clear_has_isindexed();
}
inline bool CrawlDetails::isindexed() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.isIndexed)
  return isindexed_;
}
inline void CrawlDetails::set_isindexed(bool value) {
  set_has_isindexed();
  isindexed_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.isIndexed)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.indexerCommand idxCommand = 5 [deprecated = true];
inline bool CrawlDetails::has_idxcommand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CrawlDetails::set_has_idxcommand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CrawlDetails::clear_has_idxcommand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CrawlDetails::clear_idxcommand() {
  idxcommand_ = 0;
  clear_has_idxcommand();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand CrawlDetails::idxcommand() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.idxCommand)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand >(idxcommand_);
}
inline void CrawlDetails::set_idxcommand(::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand_IsValid(value));
  set_has_idxcommand();
  idxcommand_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.idxCommand)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.errorTypes error = 6 [default = ERR_NONE];
inline bool CrawlDetails::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CrawlDetails::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CrawlDetails::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CrawlDetails::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes CrawlDetails::error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.error)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes >(error_);
}
inline void CrawlDetails::set_error(::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.error)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.checkTypes checkState = 7 [default = CH_UNKNOWN];
inline bool CrawlDetails::has_checkstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CrawlDetails::set_has_checkstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CrawlDetails::clear_has_checkstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CrawlDetails::clear_checkstate() {
  checkstate_ = 0;
  clear_has_checkstate();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes CrawlDetails::checkstate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.checkState)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes >(checkstate_);
}
inline void CrawlDetails::set_checkstate(::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes_IsValid(value));
  set_has_checkstate();
  checkstate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.checkState)
}

// optional uint32 duration = 8 [default = 0];
inline bool CrawlDetails::has_duration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CrawlDetails::set_has_duration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CrawlDetails::clear_has_duration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CrawlDetails::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CrawlDetails::duration() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.duration)
  return duration_;
}
inline void CrawlDetails::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.duration)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.disableTypes disableReason = 9 [default = D_UNKNOWN];
inline bool CrawlDetails::has_disablereason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CrawlDetails::set_has_disablereason() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CrawlDetails::clear_has_disablereason() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CrawlDetails::clear_disablereason() {
  disablereason_ = 0;
  clear_has_disablereason();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes CrawlDetails::disablereason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.disableReason)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes >(disablereason_);
}
inline void CrawlDetails::set_disablereason(::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes_IsValid(value));
  set_has_disablereason();
  disablereason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.disableReason)
}

// optional bytes hash = 10;
inline bool CrawlDetails::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrawlDetails::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrawlDetails::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrawlDetails::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& CrawlDetails::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  return hash_.GetNoArena();
}
inline void CrawlDetails::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
#if LANG_CXX11
inline void CrawlDetails::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
#endif
inline void CrawlDetails::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
inline void CrawlDetails::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}
inline ::std::string* CrawlDetails::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrawlDetails::release_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrawlDetails::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.hash)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails.removeTypes removeReason = 11 [default = RM_UNKNOWN];
inline bool CrawlDetails::has_removereason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CrawlDetails::set_has_removereason() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CrawlDetails::clear_has_removereason() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CrawlDetails::clear_removereason() {
  removereason_ = 0;
  clear_has_removereason();
}
inline ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes CrawlDetails::removereason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.removeReason)
  return static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes >(removereason_);
}
inline void CrawlDetails::set_removereason(::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes value) {
  assert(::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes_IsValid(value));
  set_has_removereason();
  removereason_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.removeReason)
}

// optional string url = 12;
inline bool CrawlDetails::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrawlDetails::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrawlDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrawlDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CrawlDetails::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.url)
  return url_.GetNoArena();
}
inline void CrawlDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
#if LANG_CXX11
inline void CrawlDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
#endif
inline void CrawlDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
inline void CrawlDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.url)
}
inline ::std::string* CrawlDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrawlDetails::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrawlDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.url)
}

// optional int32 urlData = 13;
inline bool CrawlDetails::has_urldata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CrawlDetails::set_has_urldata() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CrawlDetails::clear_has_urldata() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CrawlDetails::clear_urldata() {
  urldata_ = 0;
  clear_has_urldata();
}
inline ::google::protobuf::int32 CrawlDetails::urldata() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.urlData)
  return urldata_;
}
inline void CrawlDetails::set_urldata(::google::protobuf::int32 value) {
  set_has_urldata();
  urldata_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.urlData)
}

// optional .ru.mail.go.webbase.blobs.RobotsState robotsState = 14;
inline bool CrawlDetails::has_robotsstate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CrawlDetails::set_has_robotsstate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CrawlDetails::clear_has_robotsstate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CrawlDetails::clear_robotsstate() {
  robotsstate_ = 0;
  clear_has_robotsstate();
}
inline ::ru::mail::go::webbase::blobs::RobotsState CrawlDetails::robotsstate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.robotsState)
  return static_cast< ::ru::mail::go::webbase::blobs::RobotsState >(robotsstate_);
}
inline void CrawlDetails::set_robotsstate(::ru::mail::go::webbase::blobs::RobotsState value) {
  assert(::ru::mail::go::webbase::blobs::RobotsState_IsValid(value));
  set_has_robotsstate();
  robotsstate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.robotsState)
}

// optional .ru.mail.go.webbase.blobs.ContentType contentType = 15;
inline bool CrawlDetails::has_contenttype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CrawlDetails::set_has_contenttype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CrawlDetails::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CrawlDetails::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::ru::mail::go::webbase::blobs::ContentType CrawlDetails::contenttype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.contentType)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(contenttype_);
}
inline void CrawlDetails::set_contenttype(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_contenttype();
  contenttype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.contentType)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 16;
inline bool CrawlDetails::has_encoding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CrawlDetails::set_has_encoding() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CrawlDetails::clear_has_encoding() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CrawlDetails::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::ru::mail::go::webbase::blobs::Encoding CrawlDetails::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
inline void CrawlDetails::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.encoding)
}

// optional .ru.mail.go.webbase.blobs.Language language = 17;
inline bool CrawlDetails::has_language() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CrawlDetails::set_has_language() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CrawlDetails::clear_has_language() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CrawlDetails::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::ru::mail::go::webbase::blobs::Language CrawlDetails::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
inline void CrawlDetails::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.language)
}

// optional int32 statusCode = 18;
inline bool CrawlDetails::has_statuscode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CrawlDetails::set_has_statuscode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CrawlDetails::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CrawlDetails::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 CrawlDetails::statuscode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.statusCode)
  return statuscode_;
}
inline void CrawlDetails::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.statusCode)
}

// optional string httpHead = 19;
inline bool CrawlDetails::has_httphead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrawlDetails::set_has_httphead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrawlDetails::clear_has_httphead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrawlDetails::clear_httphead() {
  httphead_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_httphead();
}
inline const ::std::string& CrawlDetails::httphead() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  return httphead_.GetNoArena();
}
inline void CrawlDetails::set_httphead(const ::std::string& value) {
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
#if LANG_CXX11
inline void CrawlDetails::set_httphead(::std::string&& value) {
  set_has_httphead();
  httphead_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
#endif
inline void CrawlDetails::set_httphead(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
inline void CrawlDetails::set_httphead(const char* value, size_t size) {
  set_has_httphead();
  httphead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}
inline ::std::string* CrawlDetails::mutable_httphead() {
  set_has_httphead();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  return httphead_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrawlDetails::release_httphead() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
  clear_has_httphead();
  return httphead_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrawlDetails::set_allocated_httphead(::std::string* httphead) {
  if (httphead != NULL) {
    set_has_httphead();
  } else {
    clear_has_httphead();
  }
  httphead_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), httphead);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CrawlDetails.httpHead)
}

// optional uint64 firstInStatus = 20;
inline bool CrawlDetails::has_firstinstatus() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CrawlDetails::set_has_firstinstatus() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CrawlDetails::clear_has_firstinstatus() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CrawlDetails::clear_firstinstatus() {
  firstinstatus_ = GOOGLE_ULONGLONG(0);
  clear_has_firstinstatus();
}
inline ::google::protobuf::uint64 CrawlDetails::firstinstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.firstInStatus)
  return firstinstatus_;
}
inline void CrawlDetails::set_firstinstatus(::google::protobuf::uint64 value) {
  set_has_firstinstatus();
  firstinstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.firstInStatus)
}

// optional .ru.mail.go.webbase.blobs.SourceMark sourceMark = 21;
inline bool CrawlDetails::has_sourcemark() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CrawlDetails::set_has_sourcemark() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CrawlDetails::clear_has_sourcemark() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CrawlDetails::clear_sourcemark() {
  sourcemark_ = 0;
  clear_has_sourcemark();
}
inline ::ru::mail::go::webbase::blobs::SourceMark CrawlDetails::sourcemark() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.sourceMark)
  return static_cast< ::ru::mail::go::webbase::blobs::SourceMark >(sourcemark_);
}
inline void CrawlDetails::set_sourcemark(::ru::mail::go::webbase::blobs::SourceMark value) {
  assert(::ru::mail::go::webbase::blobs::SourceMark_IsValid(value));
  set_has_sourcemark();
  sourcemark_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.sourceMark)
}

// optional uint32 contentSize = 22;
inline bool CrawlDetails::has_contentsize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CrawlDetails::set_has_contentsize() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CrawlDetails::clear_has_contentsize() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CrawlDetails::clear_contentsize() {
  contentsize_ = 0u;
  clear_has_contentsize();
}
inline ::google::protobuf::uint32 CrawlDetails::contentsize() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.contentSize)
  return contentsize_;
}
inline void CrawlDetails::set_contentsize(::google::protobuf::uint32 value) {
  set_has_contentsize();
  contentsize_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.contentSize)
}

// optional uint32 cleanContentSize = 23;
inline bool CrawlDetails::has_cleancontentsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CrawlDetails::set_has_cleancontentsize() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CrawlDetails::clear_has_cleancontentsize() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CrawlDetails::clear_cleancontentsize() {
  cleancontentsize_ = 0u;
  clear_has_cleancontentsize();
}
inline ::google::protobuf::uint32 CrawlDetails::cleancontentsize() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.cleanContentSize)
  return cleancontentsize_;
}
inline void CrawlDetails::set_cleancontentsize(::google::protobuf::uint32 value) {
  set_has_cleancontentsize();
  cleancontentsize_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.cleanContentSize)
}

// optional .ru.mail.go.webbase.blobs.RenderType renderType = 24;
inline bool CrawlDetails::has_rendertype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CrawlDetails::set_has_rendertype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CrawlDetails::clear_has_rendertype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CrawlDetails::clear_rendertype() {
  rendertype_ = 0;
  clear_has_rendertype();
}
inline ::ru::mail::go::webbase::blobs::RenderType CrawlDetails::rendertype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.renderType)
  return static_cast< ::ru::mail::go::webbase::blobs::RenderType >(rendertype_);
}
inline void CrawlDetails::set_rendertype(::ru::mail::go::webbase::blobs::RenderType value) {
  assert(::ru::mail::go::webbase::blobs::RenderType_IsValid(value));
  set_has_rendertype();
  rendertype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.renderType)
}

// optional bool scriptRemoved = 25;
inline bool CrawlDetails::has_scriptremoved() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CrawlDetails::set_has_scriptremoved() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CrawlDetails::clear_has_scriptremoved() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CrawlDetails::clear_scriptremoved() {
  scriptremoved_ = false;
  clear_has_scriptremoved();
}
inline bool CrawlDetails::scriptremoved() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlDetails.scriptRemoved)
  return scriptremoved_;
}
inline void CrawlDetails::set_scriptremoved(bool value) {
  set_has_scriptremoved();
  scriptremoved_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlDetails.scriptRemoved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_indexerCommand_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_errorTypes_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_checkTypes_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_disableTypes_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes>() {
  return ::ru::mail::go::webbase::blobs::CrawlDetails_removeTypes_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crawl_5fstate_2eproto__INCLUDED
