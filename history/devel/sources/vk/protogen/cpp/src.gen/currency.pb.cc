// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: currency.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "currency.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_currency_2eproto {


namespace {

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "currency.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016currency.proto\022\030ru.mail.go.webbase.blo"
      "bs*\342\027\n\010Currency\022\013\n\007cur_RUB\020\000\022\013\n\007cur_KZT\020"
      "\001\022\013\n\007cur_BYN\020\002\022\013\n\007cur_UAH\020\003\022\013\n\007cur_GEL\020\004"
      "\022\013\n\007cur_UZS\020\005\022\013\n\007cur_KGS\020\006\022\013\n\007cur_AZN\020\007\022"
      "\013\n\007cur_USD\020\010\022\013\n\007cur_EUR\020\t\022\013\n\007cur_BWP\020\024\022\013"
      "\n\007cur_MYR\020\025\022\013\n\007cur_ALL\020\026\022\013\n\007cur_PTE\020\027\022\013\n"
      "\007cur_DZD\020\030\022\013\n\007cur_RWF\020\031\022\013\n\007cur_LKR\020\032\022\013\n\007"
      "cur_MAD\020\033\022\013\n\007cur_GWP\020\034\022\013\n\007cur_AFN\020\035\022\013\n\007c"
      "ur_SOS\020\036\022\013\n\007cur_BDT\020\037\022\013\n\007cur_BMD\020 \022\013\n\007cu"
      "r_RUR\020!\022\013\n\007cur_XPD\020\"\022\013\n\007cur_CNY\020#\022\013\n\007cur"
      "_MXN\020$\022\013\n\007cur_SVC\020%\022\013\n\007cur_TOP\020&\022\013\n\007cur_"
      "SSP\020\'\022\013\n\007cur_FRF\020(\022\013\n\007cur_FKP\020)\022\013\n\007cur_N"
      "IO\020*\022\013\n\007cur_VUV\020+\022\013\n\007cur_SKK\020,\022\013\n\007cur_CU"
      "P\020-\022\013\n\007cur_INR\020.\022\013\n\007cur_ADP\020/\022\013\n\007cur_ISK"
      "\0200\022\013\n\007cur_CRC\0201\022\013\n\007cur_USN\0202\022\013\n\007cur_BND\020"
      "3\022\013\n\007cur_ROL\0204\022\013\n\007cur_IDR\0205\022\013\n\007cur_NAD\0206"
      "\022\013\n\007cur_BOV\0207\022\013\n\007cur_KRW\0208\022\013\n\007cur_PEN\0209\022"
      "\013\n\007cur_NPR\020:\022\013\n\007cur_TRL\020;\022\013\n\007cur_XAU\020<\022\013"
      "\n\007cur_KES\020=\022\013\n\007cur_PLN\020>\022\013\n\007cur_NOK\020\?\022\013\n"
      "\007cur_XDR\020@\022\013\n\007cur_GBP\020A\022\013\n\007cur_YUM\020B\022\013\n\007"
      "cur_HNL\020C\022\013\n\007cur_GNF\020D\022\013\n\007cur_DEM\020E\022\013\n\007c"
      "ur_CVE\020F\022\013\n\007cur_THB\020G\022\013\n\007cur_SYP\020H\022\013\n\007cu"
      "r_SZL\020I\022\013\n\007cur_JOD\020J\022\013\n\007cur_AYM\020K\022\013\n\007cur"
      "_BGL\020L\022\013\n\007cur_MMK\020M\022\013\n\007cur_XFO\020N\022\013\n\007cur_"
      "XPF\020O\022\013\n\007cur_MZN\020P\022\013\n\007cur_GHS\020Q\022\013\n\007cur_B"
      "ZD\020R\022\013\n\007cur_JPY\020S\022\013\n\007cur_LAK\020T\022\013\n\007cur_TJ"
      "S\020U\022\013\n\007cur_NZD\020V\022\013\n\007cur_HRK\020W\022\013\n\007cur_XOF"
      "\020X\022\013\n\007cur_XCD\020Y\022\013\n\007cur_IQD\020Z\022\013\n\007cur_XBD\020"
      "[\022\013\n\007cur_BAM\020\\\022\013\n\007cur_ZWR\020]\022\013\n\007cur_CHF\020^"
      "\022\013\n\007cur_ANG\020_\022\013\n\007cur_MGA\020`\022\013\n\007cur_SDG\020a\022"
      "\013\n\007cur_TND\020b\022\013\n\007cur_KYD\020c\022\013\n\007cur_PGK\020d\022\013"
      "\n\007cur_GMD\020e\022\013\n\007cur_BBD\020f\022\013\n\007cur_BRL\020g\022\013\n"
      "\007cur_PAB\020h\022\013\n\007cur_PHP\020i\022\013\n\007cur_GIP\020j\022\013\n\007"
      "cur_MGF\020k\022\013\n\007cur_UYU\020l\022\013\n\007cur_GHC\020m\022\013\n\007c"
      "ur_AMD\020n\022\013\n\007cur_CHE\020o\022\013\n\007cur_MDL\020p\022\013\n\007cu"
      "r_CLF\020q\022\013\n\007cur_XXX\020r\022\013\n\007cur_AED\020s\022\013\n\007cur"
      "_AOA\020t\022\013\n\007cur_TMT\020u\022\013\n\007cur_JMD\020v\022\013\n\007cur_"
      "XBB\020w\022\013\n\007cur_CUC\020x\022\013\n\007cur_EEK\020y\022\013\n\007cur_M"
      "OP\020z\022\013\n\007cur_BGN\020{\022\013\n\007cur_DOP\020|\022\013\n\007cur_EG"
      "P\020}\022\013\n\007cur_USS\020~\022\013\n\007cur_TPE\020\177\022\014\n\007cur_MTL"
      "\020\200\001\022\014\n\007cur_COP\020\201\001\022\014\n\007cur_ZMW\020\202\001\022\014\n\007cur_S"
      "CR\020\203\001\022\014\n\007cur_TZS\020\204\001\022\014\n\007cur_BEF\020\205\001\022\014\n\007cur"
      "_ATS\020\206\001\022\014\n\007cur_MRO\020\207\001\022\014\n\007cur_SRD\020\210\001\022\014\n\007c"
      "ur_SEK\020\211\001\022\014\n\007cur_IEP\020\212\001\022\014\n\007cur_OMR\020\213\001\022\014\n"
      "\007cur_SIT\020\214\001\022\014\n\007cur_CHW\020\215\001\022\014\n\007cur_XSU\020\216\001\022"
      "\014\n\007cur_HKD\020\217\001\022\014\n\007cur_STD\020\220\001\022\014\n\007cur_ZAR\020\221"
      "\001\022\014\n\007cur_CYP\020\222\001\022\014\n\007cur_BHD\020\223\001\022\014\n\007cur_IRR"
      "\020\224\001\022\014\n\007cur_VND\020\225\001\022\014\n\007cur_MZM\020\226\001\022\014\n\007cur_E"
      "TB\020\227\001\022\014\n\007cur_MKD\020\230\001\022\014\n\007cur_SDD\020\231\001\022\014\n\007cur"
      "_LRD\020\232\001\022\014\n\007cur_XPT\020\233\001\022\014\n\007cur_AUD\020\234\001\022\014\n\007c"
      "ur_XTS\020\235\001\022\014\n\007cur_ESP\020\236\001\022\014\n\007cur_TMM\020\237\001\022\014\n"
      "\007cur_KHR\020\240\001\022\014\n\007cur_ZMK\020\241\001\022\014\n\007cur_LTL\020\242\001\022"
      "\014\n\007cur_HUF\020\243\001\022\014\n\007cur_GRD\020\244\001\022\014\n\007cur_KMF\020\245"
      "\001\022\014\n\007cur_ARS\020\246\001\022\014\n\007cur_XFU\020\247\001\022\014\n\007cur_SGD"
      "\020\250\001\022\014\n\007cur_BTN\020\251\001\022\014\n\007cur_MWK\020\252\001\022\014\n\007cur_Z"
      "WL\020\253\001\022\014\n\007cur_AZM\020\254\001\022\014\n\007cur_WST\020\255\001\022\014\n\007cur"
      "_XBA\020\256\001\022\014\n\007cur_LBP\020\257\001\022\014\n\007cur_XAG\020\260\001\022\014\n\007c"
      "ur_ERN\020\261\001\022\014\n\007cur_SHP\020\262\001\022\014\n\007cur_SRG\020\263\001\022\014\n"
      "\007cur_UGX\020\264\001\022\014\n\007cur_ITL\020\265\001\022\014\n\007cur_ILS\020\266\001\022"
      "\014\n\007cur_RSD\020\267\001\022\014\n\007cur_MNT\020\270\001\022\014\n\007cur_MXV\020\271"
      "\001\022\014\n\007cur_HTG\020\272\001\022\014\n\007cur_KWD\020\273\001\022\014\n\007cur_TWD"
      "\020\274\001\022\014\n\007cur_CAD\020\275\001\022\014\n\007cur_BYB\020\276\001\022\014\n\007cur_V"
      "EF\020\277\001\022\014\n\007cur_RON\020\300\001\022\014\n\007cur_GTQ\020\301\001\022\014\n\007cur"
      "_PYG\020\302\001\022\014\n\007cur_UYI\020\303\001\022\014\n\007cur_LUF\020\304\001\022\014\n\007c"
      "ur_XAF\020\305\001\022\014\n\007cur_XBC\020\306\001\022\014\n\007cur_NLG\020\307\001\022\014\n"
      "\007cur_LYD\020\310\001\022\014\n\007cur_BYR\020\311\001\022\014\n\007cur_KPW\020\312\001\022"
      "\014\n\007cur_ZWD\020\313\001\022\014\n\007cur_AFA\020\314\001\022\014\n\007cur_SAR\020\315"
      "\001\022\014\n\007cur_LSL\020\316\001\022\014\n\007cur_COU\020\317\001\022\014\n\007cur_VEB"
      "\020\320\001\022\014\n\007cur_QAR\020\321\001\022\014\n\007cur_NGN\020\322\001\022\014\n\007cur_X"
      "UA\020\323\001\022\014\n\007cur_BSD\020\324\001\022\014\n\007cur_MVR\020\325\001\022\014\n\007cur"
      "_MUR\020\326\001\022\014\n\007cur_SLL\020\327\001\022\014\n\007cur_FIM\020\330\001\022\014\n\007c"
      "ur_DJF\020\331\001\022\014\n\007cur_FJD\020\332\001\022\014\n\007cur_PKR\020\333\001\022\014\n"
      "\007cur_AWG\020\334\001\022\014\n\007cur_CZK\020\335\001\022\014\n\007cur_GYD\020\336\001\022"
      "\014\n\007cur_LVL\020\337\001\022\014\n\007cur_CLP\020\340\001\022\014\n\007cur_CDF\020\341"
      "\001\022\014\n\007cur_BIF\020\342\001\022\014\n\007cur_BOB\020\343\001\022\014\n\007cur_SBD"
      "\020\344\001\022\014\n\007cur_TTD\020\345\001\022\014\n\007cur_ZWN\020\346\001\022\014\n\007cur_C"
      "SD\020\347\001\022\014\n\007cur_YER\020\350\001\022\014\n\007cur_TRY\020\351\001\022\014\n\007cur"
      "_DKK\020\352\001B\016B\014CurrencyEnum"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "currency.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_currency_2eproto

const ::google::protobuf::EnumDescriptor* Currency_descriptor() {
  protobuf_currency_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_currency_2eproto::file_level_enum_descriptors[0];
}
bool Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
