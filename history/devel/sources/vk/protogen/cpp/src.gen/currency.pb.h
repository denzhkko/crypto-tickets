// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: currency.proto

#ifndef PROTOBUF_currency_2eproto__INCLUDED
#define PROTOBUF_currency_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_currency_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_currency_2eproto

enum Currency {
  cur_RUB = 0,
  cur_KZT = 1,
  cur_BYN = 2,
  cur_UAH = 3,
  cur_GEL = 4,
  cur_UZS = 5,
  cur_KGS = 6,
  cur_AZN = 7,
  cur_USD = 8,
  cur_EUR = 9,
  cur_BWP = 20,
  cur_MYR = 21,
  cur_ALL = 22,
  cur_PTE = 23,
  cur_DZD = 24,
  cur_RWF = 25,
  cur_LKR = 26,
  cur_MAD = 27,
  cur_GWP = 28,
  cur_AFN = 29,
  cur_SOS = 30,
  cur_BDT = 31,
  cur_BMD = 32,
  cur_RUR = 33,
  cur_XPD = 34,
  cur_CNY = 35,
  cur_MXN = 36,
  cur_SVC = 37,
  cur_TOP = 38,
  cur_SSP = 39,
  cur_FRF = 40,
  cur_FKP = 41,
  cur_NIO = 42,
  cur_VUV = 43,
  cur_SKK = 44,
  cur_CUP = 45,
  cur_INR = 46,
  cur_ADP = 47,
  cur_ISK = 48,
  cur_CRC = 49,
  cur_USN = 50,
  cur_BND = 51,
  cur_ROL = 52,
  cur_IDR = 53,
  cur_NAD = 54,
  cur_BOV = 55,
  cur_KRW = 56,
  cur_PEN = 57,
  cur_NPR = 58,
  cur_TRL = 59,
  cur_XAU = 60,
  cur_KES = 61,
  cur_PLN = 62,
  cur_NOK = 63,
  cur_XDR = 64,
  cur_GBP = 65,
  cur_YUM = 66,
  cur_HNL = 67,
  cur_GNF = 68,
  cur_DEM = 69,
  cur_CVE = 70,
  cur_THB = 71,
  cur_SYP = 72,
  cur_SZL = 73,
  cur_JOD = 74,
  cur_AYM = 75,
  cur_BGL = 76,
  cur_MMK = 77,
  cur_XFO = 78,
  cur_XPF = 79,
  cur_MZN = 80,
  cur_GHS = 81,
  cur_BZD = 82,
  cur_JPY = 83,
  cur_LAK = 84,
  cur_TJS = 85,
  cur_NZD = 86,
  cur_HRK = 87,
  cur_XOF = 88,
  cur_XCD = 89,
  cur_IQD = 90,
  cur_XBD = 91,
  cur_BAM = 92,
  cur_ZWR = 93,
  cur_CHF = 94,
  cur_ANG = 95,
  cur_MGA = 96,
  cur_SDG = 97,
  cur_TND = 98,
  cur_KYD = 99,
  cur_PGK = 100,
  cur_GMD = 101,
  cur_BBD = 102,
  cur_BRL = 103,
  cur_PAB = 104,
  cur_PHP = 105,
  cur_GIP = 106,
  cur_MGF = 107,
  cur_UYU = 108,
  cur_GHC = 109,
  cur_AMD = 110,
  cur_CHE = 111,
  cur_MDL = 112,
  cur_CLF = 113,
  cur_XXX = 114,
  cur_AED = 115,
  cur_AOA = 116,
  cur_TMT = 117,
  cur_JMD = 118,
  cur_XBB = 119,
  cur_CUC = 120,
  cur_EEK = 121,
  cur_MOP = 122,
  cur_BGN = 123,
  cur_DOP = 124,
  cur_EGP = 125,
  cur_USS = 126,
  cur_TPE = 127,
  cur_MTL = 128,
  cur_COP = 129,
  cur_ZMW = 130,
  cur_SCR = 131,
  cur_TZS = 132,
  cur_BEF = 133,
  cur_ATS = 134,
  cur_MRO = 135,
  cur_SRD = 136,
  cur_SEK = 137,
  cur_IEP = 138,
  cur_OMR = 139,
  cur_SIT = 140,
  cur_CHW = 141,
  cur_XSU = 142,
  cur_HKD = 143,
  cur_STD = 144,
  cur_ZAR = 145,
  cur_CYP = 146,
  cur_BHD = 147,
  cur_IRR = 148,
  cur_VND = 149,
  cur_MZM = 150,
  cur_ETB = 151,
  cur_MKD = 152,
  cur_SDD = 153,
  cur_LRD = 154,
  cur_XPT = 155,
  cur_AUD = 156,
  cur_XTS = 157,
  cur_ESP = 158,
  cur_TMM = 159,
  cur_KHR = 160,
  cur_ZMK = 161,
  cur_LTL = 162,
  cur_HUF = 163,
  cur_GRD = 164,
  cur_KMF = 165,
  cur_ARS = 166,
  cur_XFU = 167,
  cur_SGD = 168,
  cur_BTN = 169,
  cur_MWK = 170,
  cur_ZWL = 171,
  cur_AZM = 172,
  cur_WST = 173,
  cur_XBA = 174,
  cur_LBP = 175,
  cur_XAG = 176,
  cur_ERN = 177,
  cur_SHP = 178,
  cur_SRG = 179,
  cur_UGX = 180,
  cur_ITL = 181,
  cur_ILS = 182,
  cur_RSD = 183,
  cur_MNT = 184,
  cur_MXV = 185,
  cur_HTG = 186,
  cur_KWD = 187,
  cur_TWD = 188,
  cur_CAD = 189,
  cur_BYB = 190,
  cur_VEF = 191,
  cur_RON = 192,
  cur_GTQ = 193,
  cur_PYG = 194,
  cur_UYI = 195,
  cur_LUF = 196,
  cur_XAF = 197,
  cur_XBC = 198,
  cur_NLG = 199,
  cur_LYD = 200,
  cur_BYR = 201,
  cur_KPW = 202,
  cur_ZWD = 203,
  cur_AFA = 204,
  cur_SAR = 205,
  cur_LSL = 206,
  cur_COU = 207,
  cur_VEB = 208,
  cur_QAR = 209,
  cur_NGN = 210,
  cur_XUA = 211,
  cur_BSD = 212,
  cur_MVR = 213,
  cur_MUR = 214,
  cur_SLL = 215,
  cur_FIM = 216,
  cur_DJF = 217,
  cur_FJD = 218,
  cur_PKR = 219,
  cur_AWG = 220,
  cur_CZK = 221,
  cur_GYD = 222,
  cur_LVL = 223,
  cur_CLP = 224,
  cur_CDF = 225,
  cur_BIF = 226,
  cur_BOB = 227,
  cur_SBD = 228,
  cur_TTD = 229,
  cur_ZWN = 230,
  cur_CSD = 231,
  cur_YER = 232,
  cur_TRY = 233,
  cur_DKK = 234
};
bool Currency_IsValid(int value);
const Currency Currency_MIN = cur_RUB;
const Currency Currency_MAX = cur_DKK;
const int Currency_ARRAYSIZE = Currency_MAX + 1;

const ::google::protobuf::EnumDescriptor* Currency_descriptor();
inline const ::std::string& Currency_Name(Currency value) {
  return ::google::protobuf::internal::NameOfEnum(
    Currency_descriptor(), value);
}
inline bool Currency_Parse(
    const ::std::string& name, Currency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Currency>(
    Currency_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::Currency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::Currency>() {
  return ::ru::mail::go::webbase::blobs::Currency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_currency_2eproto__INCLUDED
