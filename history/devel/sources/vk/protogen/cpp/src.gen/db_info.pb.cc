// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {
namespace pb {
class ZoneRemappingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ZoneRemapping>
     _instance;
} _ZoneRemapping_default_instance_;
class CommonStorageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CommonStorage>
     _instance;
} _CommonStorage_default_instance_;
class IndexStorageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IndexStorage>
     _instance;
} _IndexStorage_default_instance_;
class AnnStorageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnnStorage>
     _instance;
} _AnnStorage_default_instance_;
class DBInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DBInfo>
     _instance;
} _DBInfo_default_instance_;

namespace protobuf_db_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneRemapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneRemapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneRemapping, zid_pack_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneRemapping, zid_unpack_array_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, catalog_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, version_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, pt_model_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, neuro_model_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonStorage, pq_vector_enabled_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexStorage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexStorage, catalog_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexStorage, version_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexStorage, rare_split_bound_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnStorage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnStorage, fname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnStorage, dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnStorage, depth_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, num_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, storage_cat_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, data_cat_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_ext_link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_opt_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_opt_storage_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_opt_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, last_opt_last_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, indexing_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, index_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, fetch_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, zone_remapping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, entries_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, document_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, document_extra_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, index_storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBInfo, ann_storage_),
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(ZoneRemapping)},
  { 9, 20, sizeof(CommonStorage)},
  { 26, 34, sizeof(IndexStorage)},
  { 37, 45, sizeof(AnnStorage)},
  { 48, 72, sizeof(DBInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ZoneRemapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IndexStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnStorage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "db_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ZoneRemapping_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ZoneRemapping_default_instance_);_CommonStorage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CommonStorage_default_instance_);_IndexStorage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IndexStorage_default_instance_);_AnnStorage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnnStorage_default_instance_);_DBInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DBInfo_default_instance_);_DBInfo_default_instance_._instance.get_mutable()->zone_remapping_ = const_cast< ::common::pb::ZoneRemapping*>(
      ::common::pb::ZoneRemapping::internal_default_instance());
  _DBInfo_default_instance_._instance.get_mutable()->entries_storage_ = const_cast< ::common::pb::CommonStorage*>(
      ::common::pb::CommonStorage::internal_default_instance());
  _DBInfo_default_instance_._instance.get_mutable()->document_storage_ = const_cast< ::common::pb::CommonStorage*>(
      ::common::pb::CommonStorage::internal_default_instance());
  _DBInfo_default_instance_._instance.get_mutable()->document_extra_storage_ = const_cast< ::common::pb::CommonStorage*>(
      ::common::pb::CommonStorage::internal_default_instance());
  _DBInfo_default_instance_._instance.get_mutable()->index_storage_ = const_cast< ::common::pb::IndexStorage*>(
      ::common::pb::IndexStorage::internal_default_instance());
  _DBInfo_default_instance_._instance.get_mutable()->ann_storage_ = const_cast< ::common::pb::AnnStorage*>(
      ::common::pb::AnnStorage::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rdb_info.proto\022\tcommon.pb\"A\n\rZoneRemapp"
      "ing\022\026\n\016zid_pack_array\030\001 \003(\r\022\030\n\020zid_unpac"
      "k_array\030\002 \003(\r\"\234\001\n\rCommonStorage\022\024\n\014catal"
      "og_bits\030\001 \002(\r\022\016\n\006prefix\030\002 \002(\t\022\022\n\nversion"
      "_id\030\003 \001(\r\022\025\n\rpt_model_hash\030\004 \001(\007\022\030\n\020neur"
      "o_model_hash\030\005 \001(\007\022 \n\021pq_vector_enabled\030"
      "\006 \001(\010:\005false\"R\n\014IndexStorage\022\024\n\014catalog_"
      "bits\030\001 \002(\r\022\022\n\nversion_id\030\002 \002(\r\022\030\n\020rare_s"
      "plit_bound\030\003 \001(\004\"7\n\nAnnStorage\022\r\n\005fname\030"
      "\001 \002(\t\022\013\n\003dim\030\002 \002(\r\022\r\n\005depth\030\003 \002(\r\"\352\004\n\006DB"
      "Info\022\016\n\006header\030\001 \002(\007\022\020\n\010num_docs\030\002 \001(\007\022\023"
      "\n\013last_doc_id\030\003 \001(\007\022\030\n\020storage_cat_bits\030"
      "\004 \001(\r\022\025\n\rdata_cat_bits\030\005 \001(\r\022\030\n\020last_ext"
      "_link_id\030\006 \001(\r\022\032\n\022last_opt_data_size\030\007 \001"
      "(\004\022\035\n\025last_opt_storage_size\030\010 \001(\004\022\025\n\rlas"
      "t_opt_docs\030\t \001(\r\022\034\n\024last_opt_last_doc_id"
      "\030\n \001(\r\022\025\n\rindexing_time\030\013 \001(\007\022\023\n\013index_s"
      "tamp\030\020 \001(\007\022\023\n\013fetch_stamp\030\021 \001(\007\0220\n\016zone_"
      "remapping\030\014 \001(\0132\030.common.pb.ZoneRemappin"
      "g\0221\n\017entries_storage\030\r \001(\0132\030.common.pb.C"
      "ommonStorage\0222\n\020document_storage\030\016 \001(\0132\030"
      ".common.pb.CommonStorage\0228\n\026document_ext"
      "ra_storage\030\017 \001(\0132\030.common.pb.CommonStora"
      "ge\022.\n\rindex_storage\030\022 \001(\0132\027.common.pb.In"
      "dexStorage\022*\n\013ann_storage\030\023 \001(\0132\025.common"
      ".pb.AnnStorage"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1014);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_info.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_db_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZoneRemapping::kZidPackArrayFieldNumber;
const int ZoneRemapping::kZidUnpackArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZoneRemapping::ZoneRemapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_db_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.ZoneRemapping)
}
ZoneRemapping::ZoneRemapping(const ZoneRemapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      zid_pack_array_(from.zid_pack_array_),
      zid_unpack_array_(from.zid_unpack_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:common.pb.ZoneRemapping)
}

void ZoneRemapping::SharedCtor() {
  _cached_size_ = 0;
}

ZoneRemapping::~ZoneRemapping() {
  // @@protoc_insertion_point(destructor:common.pb.ZoneRemapping)
  SharedDtor();
}

void ZoneRemapping::SharedDtor() {
}

void ZoneRemapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneRemapping::descriptor() {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZoneRemapping& ZoneRemapping::default_instance() {
  protobuf_db_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ZoneRemapping* ZoneRemapping::New(::google::protobuf::Arena* arena) const {
  ZoneRemapping* n = new ZoneRemapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZoneRemapping::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.ZoneRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zid_pack_array_.Clear();
  zid_unpack_array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ZoneRemapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.ZoneRemapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 zid_pack_array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_zid_pack_array())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zid_pack_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 zid_unpack_array = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_zid_unpack_array())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zid_unpack_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.ZoneRemapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.ZoneRemapping)
  return false;
#undef DO_
}

void ZoneRemapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.ZoneRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 zid_pack_array = 1;
  for (int i = 0, n = this->zid_pack_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->zid_pack_array(i), output);
  }

  // repeated uint32 zid_unpack_array = 2;
  for (int i = 0, n = this->zid_unpack_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->zid_unpack_array(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.ZoneRemapping)
}

::google::protobuf::uint8* ZoneRemapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.ZoneRemapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 zid_pack_array = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->zid_pack_array_, target);

  // repeated uint32 zid_unpack_array = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->zid_unpack_array_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.ZoneRemapping)
  return target;
}

size_t ZoneRemapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.ZoneRemapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 zid_pack_array = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->zid_pack_array_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->zid_pack_array_size());
    total_size += data_size;
  }

  // repeated uint32 zid_unpack_array = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->zid_unpack_array_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->zid_unpack_array_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneRemapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.ZoneRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoneRemapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZoneRemapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.ZoneRemapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.ZoneRemapping)
    MergeFrom(*source);
  }
}

void ZoneRemapping::MergeFrom(const ZoneRemapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.ZoneRemapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zid_pack_array_.MergeFrom(from.zid_pack_array_);
  zid_unpack_array_.MergeFrom(from.zid_unpack_array_);
}

void ZoneRemapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.ZoneRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneRemapping::CopyFrom(const ZoneRemapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.ZoneRemapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneRemapping::IsInitialized() const {
  return true;
}

void ZoneRemapping::Swap(ZoneRemapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneRemapping::InternalSwap(ZoneRemapping* other) {
  using std::swap;
  zid_pack_array_.InternalSwap(&other->zid_pack_array_);
  zid_unpack_array_.InternalSwap(&other->zid_unpack_array_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZoneRemapping::GetMetadata() const {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ZoneRemapping

// repeated uint32 zid_pack_array = 1;
int ZoneRemapping::zid_pack_array_size() const {
  return zid_pack_array_.size();
}
void ZoneRemapping::clear_zid_pack_array() {
  zid_pack_array_.Clear();
}
::google::protobuf::uint32 ZoneRemapping::zid_pack_array(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.ZoneRemapping.zid_pack_array)
  return zid_pack_array_.Get(index);
}
void ZoneRemapping::set_zid_pack_array(int index, ::google::protobuf::uint32 value) {
  zid_pack_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.pb.ZoneRemapping.zid_pack_array)
}
void ZoneRemapping::add_zid_pack_array(::google::protobuf::uint32 value) {
  zid_pack_array_.Add(value);
  // @@protoc_insertion_point(field_add:common.pb.ZoneRemapping.zid_pack_array)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZoneRemapping::zid_pack_array() const {
  // @@protoc_insertion_point(field_list:common.pb.ZoneRemapping.zid_pack_array)
  return zid_pack_array_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZoneRemapping::mutable_zid_pack_array() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.ZoneRemapping.zid_pack_array)
  return &zid_pack_array_;
}

// repeated uint32 zid_unpack_array = 2;
int ZoneRemapping::zid_unpack_array_size() const {
  return zid_unpack_array_.size();
}
void ZoneRemapping::clear_zid_unpack_array() {
  zid_unpack_array_.Clear();
}
::google::protobuf::uint32 ZoneRemapping::zid_unpack_array(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.ZoneRemapping.zid_unpack_array)
  return zid_unpack_array_.Get(index);
}
void ZoneRemapping::set_zid_unpack_array(int index, ::google::protobuf::uint32 value) {
  zid_unpack_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.pb.ZoneRemapping.zid_unpack_array)
}
void ZoneRemapping::add_zid_unpack_array(::google::protobuf::uint32 value) {
  zid_unpack_array_.Add(value);
  // @@protoc_insertion_point(field_add:common.pb.ZoneRemapping.zid_unpack_array)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZoneRemapping::zid_unpack_array() const {
  // @@protoc_insertion_point(field_list:common.pb.ZoneRemapping.zid_unpack_array)
  return zid_unpack_array_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZoneRemapping::mutable_zid_unpack_array() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.ZoneRemapping.zid_unpack_array)
  return &zid_unpack_array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonStorage::kCatalogBitsFieldNumber;
const int CommonStorage::kPrefixFieldNumber;
const int CommonStorage::kVersionIdFieldNumber;
const int CommonStorage::kPtModelHashFieldNumber;
const int CommonStorage::kNeuroModelHashFieldNumber;
const int CommonStorage::kPqVectorEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonStorage::CommonStorage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_db_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.CommonStorage)
}
CommonStorage::CommonStorage(const CommonStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  ::memcpy(&catalog_bits_, &from.catalog_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&pq_vector_enabled_) -
    reinterpret_cast<char*>(&catalog_bits_)) + sizeof(pq_vector_enabled_));
  // @@protoc_insertion_point(copy_constructor:common.pb.CommonStorage)
}

void CommonStorage::SharedCtor() {
  _cached_size_ = 0;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&catalog_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pq_vector_enabled_) -
      reinterpret_cast<char*>(&catalog_bits_)) + sizeof(pq_vector_enabled_));
}

CommonStorage::~CommonStorage() {
  // @@protoc_insertion_point(destructor:common.pb.CommonStorage)
  SharedDtor();
}

void CommonStorage::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonStorage::descriptor() {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonStorage& CommonStorage::default_instance() {
  protobuf_db_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonStorage* CommonStorage::New(::google::protobuf::Arena* arena) const {
  CommonStorage* n = new CommonStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.CommonStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_prefix()) {
    GOOGLE_DCHECK(!prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*prefix_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&catalog_bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pq_vector_enabled_) -
        reinterpret_cast<char*>(&catalog_bits_)) + sizeof(pq_vector_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.CommonStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 catalog_bits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_catalog_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catalog_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common.pb.CommonStorage.prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 pt_model_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pt_model_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pt_model_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 neuro_model_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_neuro_model_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &neuro_model_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pq_vector_enabled = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_pq_vector_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pq_vector_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.CommonStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.CommonStorage)
  return false;
#undef DO_
}

void CommonStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.CommonStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 catalog_bits = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->catalog_bits(), output);
  }

  // required string prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.CommonStorage.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // optional uint32 version_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_id(), output);
  }

  // optional fixed32 pt_model_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->pt_model_hash(), output);
  }

  // optional fixed32 neuro_model_hash = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->neuro_model_hash(), output);
  }

  // optional bool pq_vector_enabled = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pq_vector_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.CommonStorage)
}

::google::protobuf::uint8* CommonStorage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.CommonStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 catalog_bits = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->catalog_bits(), target);
  }

  // required string prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.CommonStorage.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefix(), target);
  }

  // optional uint32 version_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_id(), target);
  }

  // optional fixed32 pt_model_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->pt_model_hash(), target);
  }

  // optional fixed32 neuro_model_hash = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->neuro_model_hash(), target);
  }

  // optional bool pq_vector_enabled = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pq_vector_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.CommonStorage)
  return target;
}

size_t CommonStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:common.pb.CommonStorage)
  size_t total_size = 0;

  if (has_prefix()) {
    // required string prefix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  if (has_catalog_bits()) {
    // required uint32 catalog_bits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog_bits());
  }

  return total_size;
}
size_t CommonStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.CommonStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string prefix = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());

    // required uint32 catalog_bits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog_bits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 version_id = 3;
    if (has_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

    // optional fixed32 pt_model_hash = 4;
    if (has_pt_model_hash()) {
      total_size += 1 + 4;
    }

    // optional fixed32 neuro_model_hash = 5;
    if (has_neuro_model_hash()) {
      total_size += 1 + 4;
    }

    // optional bool pq_vector_enabled = 6 [default = false];
    if (has_pq_vector_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.CommonStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonStorage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonStorage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.CommonStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.CommonStorage)
    MergeFrom(*source);
  }
}

void CommonStorage::MergeFrom(const CommonStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.CommonStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      catalog_bits_ = from.catalog_bits_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      pt_model_hash_ = from.pt_model_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      neuro_model_hash_ = from.neuro_model_hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      pq_vector_enabled_ = from.pq_vector_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommonStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.CommonStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonStorage::CopyFrom(const CommonStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.CommonStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CommonStorage::Swap(CommonStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonStorage::InternalSwap(CommonStorage* other) {
  using std::swap;
  prefix_.Swap(&other->prefix_);
  swap(catalog_bits_, other->catalog_bits_);
  swap(version_id_, other->version_id_);
  swap(pt_model_hash_, other->pt_model_hash_);
  swap(neuro_model_hash_, other->neuro_model_hash_);
  swap(pq_vector_enabled_, other->pq_vector_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonStorage::GetMetadata() const {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonStorage

// required uint32 catalog_bits = 1;
bool CommonStorage::has_catalog_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommonStorage::set_has_catalog_bits() {
  _has_bits_[0] |= 0x00000002u;
}
void CommonStorage::clear_has_catalog_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommonStorage::clear_catalog_bits() {
  catalog_bits_ = 0u;
  clear_has_catalog_bits();
}
::google::protobuf::uint32 CommonStorage::catalog_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.catalog_bits)
  return catalog_bits_;
}
void CommonStorage::set_catalog_bits(::google::protobuf::uint32 value) {
  set_has_catalog_bits();
  catalog_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.catalog_bits)
}

// required string prefix = 2;
bool CommonStorage::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommonStorage::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void CommonStorage::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommonStorage::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string& CommonStorage::prefix() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.prefix)
  return prefix_.GetNoArena();
}
void CommonStorage::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.prefix)
}
#if LANG_CXX11
void CommonStorage::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.CommonStorage.prefix)
}
#endif
void CommonStorage::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.CommonStorage.prefix)
}
void CommonStorage::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.CommonStorage.prefix)
}
::std::string* CommonStorage::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:common.pb.CommonStorage.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonStorage::release_prefix() {
  // @@protoc_insertion_point(field_release:common.pb.CommonStorage.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonStorage::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:common.pb.CommonStorage.prefix)
}

// optional uint32 version_id = 3;
bool CommonStorage::has_version_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommonStorage::set_has_version_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CommonStorage::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommonStorage::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
::google::protobuf::uint32 CommonStorage::version_id() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.version_id)
  return version_id_;
}
void CommonStorage::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.version_id)
}

// optional fixed32 pt_model_hash = 4;
bool CommonStorage::has_pt_model_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommonStorage::set_has_pt_model_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void CommonStorage::clear_has_pt_model_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommonStorage::clear_pt_model_hash() {
  pt_model_hash_ = 0u;
  clear_has_pt_model_hash();
}
::google::protobuf::uint32 CommonStorage::pt_model_hash() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.pt_model_hash)
  return pt_model_hash_;
}
void CommonStorage::set_pt_model_hash(::google::protobuf::uint32 value) {
  set_has_pt_model_hash();
  pt_model_hash_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.pt_model_hash)
}

// optional fixed32 neuro_model_hash = 5;
bool CommonStorage::has_neuro_model_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommonStorage::set_has_neuro_model_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void CommonStorage::clear_has_neuro_model_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommonStorage::clear_neuro_model_hash() {
  neuro_model_hash_ = 0u;
  clear_has_neuro_model_hash();
}
::google::protobuf::uint32 CommonStorage::neuro_model_hash() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.neuro_model_hash)
  return neuro_model_hash_;
}
void CommonStorage::set_neuro_model_hash(::google::protobuf::uint32 value) {
  set_has_neuro_model_hash();
  neuro_model_hash_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.neuro_model_hash)
}

// optional bool pq_vector_enabled = 6 [default = false];
bool CommonStorage::has_pq_vector_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CommonStorage::set_has_pq_vector_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
void CommonStorage::clear_has_pq_vector_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void CommonStorage::clear_pq_vector_enabled() {
  pq_vector_enabled_ = false;
  clear_has_pq_vector_enabled();
}
bool CommonStorage::pq_vector_enabled() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.pq_vector_enabled)
  return pq_vector_enabled_;
}
void CommonStorage::set_pq_vector_enabled(bool value) {
  set_has_pq_vector_enabled();
  pq_vector_enabled_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.pq_vector_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexStorage::kCatalogBitsFieldNumber;
const int IndexStorage::kVersionIdFieldNumber;
const int IndexStorage::kRareSplitBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexStorage::IndexStorage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_db_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.IndexStorage)
}
IndexStorage::IndexStorage(const IndexStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&catalog_bits_, &from.catalog_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&rare_split_bound_) -
    reinterpret_cast<char*>(&catalog_bits_)) + sizeof(rare_split_bound_));
  // @@protoc_insertion_point(copy_constructor:common.pb.IndexStorage)
}

void IndexStorage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&catalog_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rare_split_bound_) -
      reinterpret_cast<char*>(&catalog_bits_)) + sizeof(rare_split_bound_));
}

IndexStorage::~IndexStorage() {
  // @@protoc_insertion_point(destructor:common.pb.IndexStorage)
  SharedDtor();
}

void IndexStorage::SharedDtor() {
}

void IndexStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexStorage::descriptor() {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexStorage& IndexStorage::default_instance() {
  protobuf_db_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

IndexStorage* IndexStorage::New(::google::protobuf::Arena* arena) const {
  IndexStorage* n = new IndexStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.IndexStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&catalog_bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rare_split_bound_) -
        reinterpret_cast<char*>(&catalog_bits_)) + sizeof(rare_split_bound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.IndexStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 catalog_bits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_catalog_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catalog_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rare_split_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rare_split_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rare_split_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.IndexStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.IndexStorage)
  return false;
#undef DO_
}

void IndexStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.IndexStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 catalog_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->catalog_bits(), output);
  }

  // required uint32 version_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_id(), output);
  }

  // optional uint64 rare_split_bound = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rare_split_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.IndexStorage)
}

::google::protobuf::uint8* IndexStorage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.IndexStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 catalog_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->catalog_bits(), target);
  }

  // required uint32 version_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_id(), target);
  }

  // optional uint64 rare_split_bound = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rare_split_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.IndexStorage)
  return target;
}

size_t IndexStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:common.pb.IndexStorage)
  size_t total_size = 0;

  if (has_catalog_bits()) {
    // required uint32 catalog_bits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog_bits());
  }

  if (has_version_id()) {
    // required uint32 version_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version_id());
  }

  return total_size;
}
size_t IndexStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.IndexStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 catalog_bits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog_bits());

    // required uint32 version_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 rare_split_bound = 3;
  if (has_rare_split_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rare_split_bound());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.IndexStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexStorage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexStorage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.IndexStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.IndexStorage)
    MergeFrom(*source);
  }
}

void IndexStorage::MergeFrom(const IndexStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.IndexStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_bits_ = from.catalog_bits_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rare_split_bound_ = from.rare_split_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.IndexStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexStorage::CopyFrom(const IndexStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.IndexStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IndexStorage::Swap(IndexStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexStorage::InternalSwap(IndexStorage* other) {
  using std::swap;
  swap(catalog_bits_, other->catalog_bits_);
  swap(version_id_, other->version_id_);
  swap(rare_split_bound_, other->rare_split_bound_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexStorage::GetMetadata() const {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndexStorage

// required uint32 catalog_bits = 1;
bool IndexStorage::has_catalog_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IndexStorage::set_has_catalog_bits() {
  _has_bits_[0] |= 0x00000001u;
}
void IndexStorage::clear_has_catalog_bits() {
  _has_bits_[0] &= ~0x00000001u;
}
void IndexStorage::clear_catalog_bits() {
  catalog_bits_ = 0u;
  clear_has_catalog_bits();
}
::google::protobuf::uint32 IndexStorage::catalog_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.catalog_bits)
  return catalog_bits_;
}
void IndexStorage::set_catalog_bits(::google::protobuf::uint32 value) {
  set_has_catalog_bits();
  catalog_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.catalog_bits)
}

// required uint32 version_id = 2;
bool IndexStorage::has_version_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IndexStorage::set_has_version_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IndexStorage::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IndexStorage::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
::google::protobuf::uint32 IndexStorage::version_id() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.version_id)
  return version_id_;
}
void IndexStorage::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.version_id)
}

// optional uint64 rare_split_bound = 3;
bool IndexStorage::has_rare_split_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IndexStorage::set_has_rare_split_bound() {
  _has_bits_[0] |= 0x00000004u;
}
void IndexStorage::clear_has_rare_split_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
void IndexStorage::clear_rare_split_bound() {
  rare_split_bound_ = GOOGLE_ULONGLONG(0);
  clear_has_rare_split_bound();
}
::google::protobuf::uint64 IndexStorage::rare_split_bound() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.rare_split_bound)
  return rare_split_bound_;
}
void IndexStorage::set_rare_split_bound(::google::protobuf::uint64 value) {
  set_has_rare_split_bound();
  rare_split_bound_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.rare_split_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnStorage::kFnameFieldNumber;
const int AnnStorage::kDimFieldNumber;
const int AnnStorage::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnStorage::AnnStorage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_db_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.AnnStorage)
}
AnnStorage::AnnStorage(const AnnStorage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fname()) {
    fname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fname_);
  }
  ::memcpy(&dim_, &from.dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&dim_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:common.pb.AnnStorage)
}

void AnnStorage::SharedCtor() {
  _cached_size_ = 0;
  fname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&dim_)) + sizeof(depth_));
}

AnnStorage::~AnnStorage() {
  // @@protoc_insertion_point(destructor:common.pb.AnnStorage)
  SharedDtor();
}

void AnnStorage::SharedDtor() {
  fname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnnStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnStorage::descriptor() {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnStorage& AnnStorage::default_instance() {
  protobuf_db_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnStorage* AnnStorage::New(::google::protobuf::Arena* arena) const {
  AnnStorage* n = new AnnStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.AnnStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_fname()) {
    GOOGLE_DCHECK(!fname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*fname_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&dim_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_) -
        reinterpret_cast<char*>(&dim_)) + sizeof(depth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnnStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.AnnStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fname().data(), static_cast<int>(this->fname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common.pb.AnnStorage.fname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 depth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.AnnStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.AnnStorage)
  return false;
#undef DO_
}

void AnnStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.AnnStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), static_cast<int>(this->fname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.AnnStorage.fname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fname(), output);
  }

  // required uint32 dim = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dim(), output);
  }

  // required uint32 depth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.AnnStorage)
}

::google::protobuf::uint8* AnnStorage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.AnnStorage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), static_cast<int>(this->fname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.AnnStorage.fname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fname(), target);
  }

  // required uint32 dim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dim(), target);
  }

  // required uint32 depth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.AnnStorage)
  return target;
}

size_t AnnStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:common.pb.AnnStorage)
  size_t total_size = 0;

  if (has_fname()) {
    // required string fname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());
  }

  if (has_dim()) {
    // required uint32 dim = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dim());
  }

  if (has_depth()) {
    // required uint32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth());
  }

  return total_size;
}
size_t AnnStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.AnnStorage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string fname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());

    // required uint32 dim = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dim());

    // required uint32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.AnnStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnStorage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnStorage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.AnnStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.AnnStorage)
    MergeFrom(*source);
  }
}

void AnnStorage::MergeFrom(const AnnStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.AnnStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fname();
      fname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fname_);
    }
    if (cached_has_bits & 0x00000002u) {
      dim_ = from.dim_;
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.AnnStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnStorage::CopyFrom(const AnnStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.AnnStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AnnStorage::Swap(AnnStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnStorage::InternalSwap(AnnStorage* other) {
  using std::swap;
  fname_.Swap(&other->fname_);
  swap(dim_, other->dim_);
  swap(depth_, other->depth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnStorage::GetMetadata() const {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnStorage

// required string fname = 1;
bool AnnStorage::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnStorage::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnStorage::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnStorage::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
const ::std::string& AnnStorage::fname() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.fname)
  return fname_.GetNoArena();
}
void AnnStorage::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.fname)
}
#if LANG_CXX11
void AnnStorage::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.AnnStorage.fname)
}
#endif
void AnnStorage::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.AnnStorage.fname)
}
void AnnStorage::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.AnnStorage.fname)
}
::std::string* AnnStorage::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:common.pb.AnnStorage.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnStorage::release_fname() {
  // @@protoc_insertion_point(field_release:common.pb.AnnStorage.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnStorage::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:common.pb.AnnStorage.fname)
}

// required uint32 dim = 2;
bool AnnStorage::has_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AnnStorage::set_has_dim() {
  _has_bits_[0] |= 0x00000002u;
}
void AnnStorage::clear_has_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
void AnnStorage::clear_dim() {
  dim_ = 0u;
  clear_has_dim();
}
::google::protobuf::uint32 AnnStorage::dim() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.dim)
  return dim_;
}
void AnnStorage::set_dim(::google::protobuf::uint32 value) {
  set_has_dim();
  dim_ = value;
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.dim)
}

// required uint32 depth = 3;
bool AnnStorage::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AnnStorage::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void AnnStorage::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void AnnStorage::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
::google::protobuf::uint32 AnnStorage::depth() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.depth)
  return depth_;
}
void AnnStorage::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.depth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBInfo::kHeaderFieldNumber;
const int DBInfo::kNumDocsFieldNumber;
const int DBInfo::kLastDocIdFieldNumber;
const int DBInfo::kStorageCatBitsFieldNumber;
const int DBInfo::kDataCatBitsFieldNumber;
const int DBInfo::kLastExtLinkIdFieldNumber;
const int DBInfo::kLastOptDataSizeFieldNumber;
const int DBInfo::kLastOptStorageSizeFieldNumber;
const int DBInfo::kLastOptDocsFieldNumber;
const int DBInfo::kLastOptLastDocIdFieldNumber;
const int DBInfo::kIndexingTimeFieldNumber;
const int DBInfo::kIndexStampFieldNumber;
const int DBInfo::kFetchStampFieldNumber;
const int DBInfo::kZoneRemappingFieldNumber;
const int DBInfo::kEntriesStorageFieldNumber;
const int DBInfo::kDocumentStorageFieldNumber;
const int DBInfo::kDocumentExtraStorageFieldNumber;
const int DBInfo::kIndexStorageFieldNumber;
const int DBInfo::kAnnStorageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBInfo::DBInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_db_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.DBInfo)
}
DBInfo::DBInfo(const DBInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_zone_remapping()) {
    zone_remapping_ = new ::common::pb::ZoneRemapping(*from.zone_remapping_);
  } else {
    zone_remapping_ = NULL;
  }
  if (from.has_entries_storage()) {
    entries_storage_ = new ::common::pb::CommonStorage(*from.entries_storage_);
  } else {
    entries_storage_ = NULL;
  }
  if (from.has_document_storage()) {
    document_storage_ = new ::common::pb::CommonStorage(*from.document_storage_);
  } else {
    document_storage_ = NULL;
  }
  if (from.has_document_extra_storage()) {
    document_extra_storage_ = new ::common::pb::CommonStorage(*from.document_extra_storage_);
  } else {
    document_extra_storage_ = NULL;
  }
  if (from.has_index_storage()) {
    index_storage_ = new ::common::pb::IndexStorage(*from.index_storage_);
  } else {
    index_storage_ = NULL;
  }
  if (from.has_ann_storage()) {
    ann_storage_ = new ::common::pb::AnnStorage(*from.ann_storage_);
  } else {
    ann_storage_ = NULL;
  }
  ::memcpy(&header_, &from.header_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_stamp_) -
    reinterpret_cast<char*>(&header_)) + sizeof(fetch_stamp_));
  // @@protoc_insertion_point(copy_constructor:common.pb.DBInfo)
}

void DBInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&zone_remapping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_stamp_) -
      reinterpret_cast<char*>(&zone_remapping_)) + sizeof(fetch_stamp_));
}

DBInfo::~DBInfo() {
  // @@protoc_insertion_point(destructor:common.pb.DBInfo)
  SharedDtor();
}

void DBInfo::SharedDtor() {
  if (this != internal_default_instance()) delete zone_remapping_;
  if (this != internal_default_instance()) delete entries_storage_;
  if (this != internal_default_instance()) delete document_storage_;
  if (this != internal_default_instance()) delete document_extra_storage_;
  if (this != internal_default_instance()) delete index_storage_;
  if (this != internal_default_instance()) delete ann_storage_;
}

void DBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBInfo::descriptor() {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBInfo& DBInfo::default_instance() {
  protobuf_db_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBInfo* DBInfo::New(::google::protobuf::Arena* arena) const {
  DBInfo* n = new DBInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.DBInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(zone_remapping_ != NULL);
      zone_remapping_->::common::pb::ZoneRemapping::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(entries_storage_ != NULL);
      entries_storage_->::common::pb::CommonStorage::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(document_storage_ != NULL);
      document_storage_->::common::pb::CommonStorage::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(document_extra_storage_ != NULL);
      document_extra_storage_->::common::pb::CommonStorage::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(index_storage_ != NULL);
      index_storage_->::common::pb::IndexStorage::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ann_storage_ != NULL);
      ann_storage_->::common::pb::AnnStorage::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&header_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_docs_) -
        reinterpret_cast<char*>(&header_)) + sizeof(num_docs_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&last_doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_opt_last_doc_id_) -
        reinterpret_cast<char*>(&last_doc_id_)) + sizeof(last_opt_last_doc_id_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&indexing_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fetch_stamp_) -
        reinterpret_cast<char*>(&indexing_time_)) + sizeof(fetch_stamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.DBInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_header();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &header_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 num_docs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_num_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &num_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 last_doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_last_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &last_doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 storage_cat_bits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_storage_cat_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_cat_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_cat_bits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_data_cat_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_cat_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ext_link_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_ext_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ext_link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_opt_data_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_last_opt_data_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_opt_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_opt_storage_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_last_opt_storage_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_opt_storage_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_opt_docs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_last_opt_docs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_opt_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_opt_last_doc_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_last_opt_last_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_opt_last_doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 indexing_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_indexing_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &indexing_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.ZoneRemapping zone_remapping = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zone_remapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.CommonStorage entries_storage = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entries_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.CommonStorage document_storage = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.CommonStorage document_extra_storage = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_extra_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 index_stamp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_index_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &index_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 fetch_stamp = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_fetch_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fetch_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.IndexStorage index_storage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.AnnStorage ann_storage = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ann_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.DBInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.DBInfo)
  return false;
#undef DO_
}

void DBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.DBInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 header = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->header(), output);
  }

  // optional fixed32 num_docs = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->num_docs(), output);
  }

  // optional fixed32 last_doc_id = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->last_doc_id(), output);
  }

  // optional uint32 storage_cat_bits = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->storage_cat_bits(), output);
  }

  // optional uint32 data_cat_bits = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_cat_bits(), output);
  }

  // optional uint32 last_ext_link_id = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_ext_link_id(), output);
  }

  // optional uint64 last_opt_data_size = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->last_opt_data_size(), output);
  }

  // optional uint64 last_opt_storage_size = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_opt_storage_size(), output);
  }

  // optional uint32 last_opt_docs = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_opt_docs(), output);
  }

  // optional uint32 last_opt_last_doc_id = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_opt_last_doc_id(), output);
  }

  // optional fixed32 indexing_time = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->indexing_time(), output);
  }

  // optional .common.pb.ZoneRemapping zone_remapping = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->zone_remapping_, output);
  }

  // optional .common.pb.CommonStorage entries_storage = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->entries_storage_, output);
  }

  // optional .common.pb.CommonStorage document_storage = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->document_storage_, output);
  }

  // optional .common.pb.CommonStorage document_extra_storage = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->document_extra_storage_, output);
  }

  // optional fixed32 index_stamp = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(16, this->index_stamp(), output);
  }

  // optional fixed32 fetch_stamp = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->fetch_stamp(), output);
  }

  // optional .common.pb.IndexStorage index_storage = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->index_storage_, output);
  }

  // optional .common.pb.AnnStorage ann_storage = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->ann_storage_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.DBInfo)
}

::google::protobuf::uint8* DBInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.DBInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 header = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->header(), target);
  }

  // optional fixed32 num_docs = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->num_docs(), target);
  }

  // optional fixed32 last_doc_id = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->last_doc_id(), target);
  }

  // optional uint32 storage_cat_bits = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->storage_cat_bits(), target);
  }

  // optional uint32 data_cat_bits = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_cat_bits(), target);
  }

  // optional uint32 last_ext_link_id = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_ext_link_id(), target);
  }

  // optional uint64 last_opt_data_size = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->last_opt_data_size(), target);
  }

  // optional uint64 last_opt_storage_size = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_opt_storage_size(), target);
  }

  // optional uint32 last_opt_docs = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_opt_docs(), target);
  }

  // optional uint32 last_opt_last_doc_id = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_opt_last_doc_id(), target);
  }

  // optional fixed32 indexing_time = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->indexing_time(), target);
  }

  // optional .common.pb.ZoneRemapping zone_remapping = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->zone_remapping_, deterministic, target);
  }

  // optional .common.pb.CommonStorage entries_storage = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->entries_storage_, deterministic, target);
  }

  // optional .common.pb.CommonStorage document_storage = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->document_storage_, deterministic, target);
  }

  // optional .common.pb.CommonStorage document_extra_storage = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->document_extra_storage_, deterministic, target);
  }

  // optional fixed32 index_stamp = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(16, this->index_stamp(), target);
  }

  // optional fixed32 fetch_stamp = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->fetch_stamp(), target);
  }

  // optional .common.pb.IndexStorage index_storage = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->index_storage_, deterministic, target);
  }

  // optional .common.pb.AnnStorage ann_storage = 19;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->ann_storage_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.DBInfo)
  return target;
}

size_t DBInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.DBInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required fixed32 header = 1;
  if (has_header()) {
    total_size += 1 + 4;
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .common.pb.ZoneRemapping zone_remapping = 12;
    if (has_zone_remapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->zone_remapping_);
    }

    // optional .common.pb.CommonStorage entries_storage = 13;
    if (has_entries_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->entries_storage_);
    }

    // optional .common.pb.CommonStorage document_storage = 14;
    if (has_document_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_storage_);
    }

    // optional .common.pb.CommonStorage document_extra_storage = 15;
    if (has_document_extra_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_extra_storage_);
    }

    // optional .common.pb.IndexStorage index_storage = 18;
    if (has_index_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->index_storage_);
    }

    // optional .common.pb.AnnStorage ann_storage = 19;
    if (has_ann_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ann_storage_);
    }

  }
  // optional fixed32 num_docs = 2;
  if (has_num_docs()) {
    total_size += 1 + 4;
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional fixed32 last_doc_id = 3;
    if (has_last_doc_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 storage_cat_bits = 4;
    if (has_storage_cat_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_cat_bits());
    }

    // optional uint32 data_cat_bits = 5;
    if (has_data_cat_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_cat_bits());
    }

    // optional uint32 last_ext_link_id = 6;
    if (has_last_ext_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ext_link_id());
    }

    // optional uint64 last_opt_data_size = 7;
    if (has_last_opt_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_opt_data_size());
    }

    // optional uint64 last_opt_storage_size = 8;
    if (has_last_opt_storage_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_opt_storage_size());
    }

    // optional uint32 last_opt_docs = 9;
    if (has_last_opt_docs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_opt_docs());
    }

    // optional uint32 last_opt_last_doc_id = 10;
    if (has_last_opt_last_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_opt_last_doc_id());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional fixed32 indexing_time = 11;
    if (has_indexing_time()) {
      total_size += 1 + 4;
    }

    // optional fixed32 index_stamp = 16;
    if (has_index_stamp()) {
      total_size += 2 + 4;
    }

    // optional fixed32 fetch_stamp = 17;
    if (has_fetch_stamp()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.DBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DBInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.DBInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.DBInfo)
    MergeFrom(*source);
  }
}

void DBInfo::MergeFrom(const DBInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.DBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_zone_remapping()->::common::pb::ZoneRemapping::MergeFrom(from.zone_remapping());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_entries_storage()->::common::pb::CommonStorage::MergeFrom(from.entries_storage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_document_storage()->::common::pb::CommonStorage::MergeFrom(from.document_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_document_extra_storage()->::common::pb::CommonStorage::MergeFrom(from.document_extra_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_index_storage()->::common::pb::IndexStorage::MergeFrom(from.index_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ann_storage()->::common::pb::AnnStorage::MergeFrom(from.ann_storage());
    }
    if (cached_has_bits & 0x00000040u) {
      header_ = from.header_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_docs_ = from.num_docs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      last_doc_id_ = from.last_doc_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      storage_cat_bits_ = from.storage_cat_bits_;
    }
    if (cached_has_bits & 0x00000400u) {
      data_cat_bits_ = from.data_cat_bits_;
    }
    if (cached_has_bits & 0x00000800u) {
      last_ext_link_id_ = from.last_ext_link_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_opt_data_size_ = from.last_opt_data_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_opt_storage_size_ = from.last_opt_storage_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      last_opt_docs_ = from.last_opt_docs_;
    }
    if (cached_has_bits & 0x00008000u) {
      last_opt_last_doc_id_ = from.last_opt_last_doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      indexing_time_ = from.indexing_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      index_stamp_ = from.index_stamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      fetch_stamp_ = from.fetch_stamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DBInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.DBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBInfo::CopyFrom(const DBInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.DBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_entries_storage()) {
    if (!this->entries_storage_->IsInitialized()) return false;
  }
  if (has_document_storage()) {
    if (!this->document_storage_->IsInitialized()) return false;
  }
  if (has_document_extra_storage()) {
    if (!this->document_extra_storage_->IsInitialized()) return false;
  }
  if (has_index_storage()) {
    if (!this->index_storage_->IsInitialized()) return false;
  }
  if (has_ann_storage()) {
    if (!this->ann_storage_->IsInitialized()) return false;
  }
  return true;
}

void DBInfo::Swap(DBInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBInfo::InternalSwap(DBInfo* other) {
  using std::swap;
  swap(zone_remapping_, other->zone_remapping_);
  swap(entries_storage_, other->entries_storage_);
  swap(document_storage_, other->document_storage_);
  swap(document_extra_storage_, other->document_extra_storage_);
  swap(index_storage_, other->index_storage_);
  swap(ann_storage_, other->ann_storage_);
  swap(header_, other->header_);
  swap(num_docs_, other->num_docs_);
  swap(last_doc_id_, other->last_doc_id_);
  swap(storage_cat_bits_, other->storage_cat_bits_);
  swap(data_cat_bits_, other->data_cat_bits_);
  swap(last_ext_link_id_, other->last_ext_link_id_);
  swap(last_opt_data_size_, other->last_opt_data_size_);
  swap(last_opt_storage_size_, other->last_opt_storage_size_);
  swap(last_opt_docs_, other->last_opt_docs_);
  swap(last_opt_last_doc_id_, other->last_opt_last_doc_id_);
  swap(indexing_time_, other->indexing_time_);
  swap(index_stamp_, other->index_stamp_);
  swap(fetch_stamp_, other->fetch_stamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBInfo::GetMetadata() const {
  protobuf_db_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_db_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBInfo

// required fixed32 header = 1;
bool DBInfo::has_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DBInfo::set_has_header() {
  _has_bits_[0] |= 0x00000040u;
}
void DBInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000040u;
}
void DBInfo::clear_header() {
  header_ = 0u;
  clear_has_header();
}
::google::protobuf::uint32 DBInfo::header() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.header)
  return header_;
}
void DBInfo::set_header(::google::protobuf::uint32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.header)
}

// optional fixed32 num_docs = 2;
bool DBInfo::has_num_docs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DBInfo::set_has_num_docs() {
  _has_bits_[0] |= 0x00000080u;
}
void DBInfo::clear_has_num_docs() {
  _has_bits_[0] &= ~0x00000080u;
}
void DBInfo::clear_num_docs() {
  num_docs_ = 0u;
  clear_has_num_docs();
}
::google::protobuf::uint32 DBInfo::num_docs() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.num_docs)
  return num_docs_;
}
void DBInfo::set_num_docs(::google::protobuf::uint32 value) {
  set_has_num_docs();
  num_docs_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.num_docs)
}

// optional fixed32 last_doc_id = 3;
bool DBInfo::has_last_doc_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DBInfo::set_has_last_doc_id() {
  _has_bits_[0] |= 0x00000100u;
}
void DBInfo::clear_has_last_doc_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void DBInfo::clear_last_doc_id() {
  last_doc_id_ = 0u;
  clear_has_last_doc_id();
}
::google::protobuf::uint32 DBInfo::last_doc_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_doc_id)
  return last_doc_id_;
}
void DBInfo::set_last_doc_id(::google::protobuf::uint32 value) {
  set_has_last_doc_id();
  last_doc_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_doc_id)
}

// optional uint32 storage_cat_bits = 4;
bool DBInfo::has_storage_cat_bits() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DBInfo::set_has_storage_cat_bits() {
  _has_bits_[0] |= 0x00000200u;
}
void DBInfo::clear_has_storage_cat_bits() {
  _has_bits_[0] &= ~0x00000200u;
}
void DBInfo::clear_storage_cat_bits() {
  storage_cat_bits_ = 0u;
  clear_has_storage_cat_bits();
}
::google::protobuf::uint32 DBInfo::storage_cat_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.storage_cat_bits)
  return storage_cat_bits_;
}
void DBInfo::set_storage_cat_bits(::google::protobuf::uint32 value) {
  set_has_storage_cat_bits();
  storage_cat_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.storage_cat_bits)
}

// optional uint32 data_cat_bits = 5;
bool DBInfo::has_data_cat_bits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DBInfo::set_has_data_cat_bits() {
  _has_bits_[0] |= 0x00000400u;
}
void DBInfo::clear_has_data_cat_bits() {
  _has_bits_[0] &= ~0x00000400u;
}
void DBInfo::clear_data_cat_bits() {
  data_cat_bits_ = 0u;
  clear_has_data_cat_bits();
}
::google::protobuf::uint32 DBInfo::data_cat_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.data_cat_bits)
  return data_cat_bits_;
}
void DBInfo::set_data_cat_bits(::google::protobuf::uint32 value) {
  set_has_data_cat_bits();
  data_cat_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.data_cat_bits)
}

// optional uint32 last_ext_link_id = 6;
bool DBInfo::has_last_ext_link_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DBInfo::set_has_last_ext_link_id() {
  _has_bits_[0] |= 0x00000800u;
}
void DBInfo::clear_has_last_ext_link_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void DBInfo::clear_last_ext_link_id() {
  last_ext_link_id_ = 0u;
  clear_has_last_ext_link_id();
}
::google::protobuf::uint32 DBInfo::last_ext_link_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_ext_link_id)
  return last_ext_link_id_;
}
void DBInfo::set_last_ext_link_id(::google::protobuf::uint32 value) {
  set_has_last_ext_link_id();
  last_ext_link_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_ext_link_id)
}

// optional uint64 last_opt_data_size = 7;
bool DBInfo::has_last_opt_data_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DBInfo::set_has_last_opt_data_size() {
  _has_bits_[0] |= 0x00001000u;
}
void DBInfo::clear_has_last_opt_data_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void DBInfo::clear_last_opt_data_size() {
  last_opt_data_size_ = GOOGLE_ULONGLONG(0);
  clear_has_last_opt_data_size();
}
::google::protobuf::uint64 DBInfo::last_opt_data_size() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_data_size)
  return last_opt_data_size_;
}
void DBInfo::set_last_opt_data_size(::google::protobuf::uint64 value) {
  set_has_last_opt_data_size();
  last_opt_data_size_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_data_size)
}

// optional uint64 last_opt_storage_size = 8;
bool DBInfo::has_last_opt_storage_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DBInfo::set_has_last_opt_storage_size() {
  _has_bits_[0] |= 0x00002000u;
}
void DBInfo::clear_has_last_opt_storage_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void DBInfo::clear_last_opt_storage_size() {
  last_opt_storage_size_ = GOOGLE_ULONGLONG(0);
  clear_has_last_opt_storage_size();
}
::google::protobuf::uint64 DBInfo::last_opt_storage_size() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_storage_size)
  return last_opt_storage_size_;
}
void DBInfo::set_last_opt_storage_size(::google::protobuf::uint64 value) {
  set_has_last_opt_storage_size();
  last_opt_storage_size_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_storage_size)
}

// optional uint32 last_opt_docs = 9;
bool DBInfo::has_last_opt_docs() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DBInfo::set_has_last_opt_docs() {
  _has_bits_[0] |= 0x00004000u;
}
void DBInfo::clear_has_last_opt_docs() {
  _has_bits_[0] &= ~0x00004000u;
}
void DBInfo::clear_last_opt_docs() {
  last_opt_docs_ = 0u;
  clear_has_last_opt_docs();
}
::google::protobuf::uint32 DBInfo::last_opt_docs() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_docs)
  return last_opt_docs_;
}
void DBInfo::set_last_opt_docs(::google::protobuf::uint32 value) {
  set_has_last_opt_docs();
  last_opt_docs_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_docs)
}

// optional uint32 last_opt_last_doc_id = 10;
bool DBInfo::has_last_opt_last_doc_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DBInfo::set_has_last_opt_last_doc_id() {
  _has_bits_[0] |= 0x00008000u;
}
void DBInfo::clear_has_last_opt_last_doc_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void DBInfo::clear_last_opt_last_doc_id() {
  last_opt_last_doc_id_ = 0u;
  clear_has_last_opt_last_doc_id();
}
::google::protobuf::uint32 DBInfo::last_opt_last_doc_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_last_doc_id)
  return last_opt_last_doc_id_;
}
void DBInfo::set_last_opt_last_doc_id(::google::protobuf::uint32 value) {
  set_has_last_opt_last_doc_id();
  last_opt_last_doc_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_last_doc_id)
}

// optional fixed32 indexing_time = 11;
bool DBInfo::has_indexing_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DBInfo::set_has_indexing_time() {
  _has_bits_[0] |= 0x00010000u;
}
void DBInfo::clear_has_indexing_time() {
  _has_bits_[0] &= ~0x00010000u;
}
void DBInfo::clear_indexing_time() {
  indexing_time_ = 0u;
  clear_has_indexing_time();
}
::google::protobuf::uint32 DBInfo::indexing_time() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.indexing_time)
  return indexing_time_;
}
void DBInfo::set_indexing_time(::google::protobuf::uint32 value) {
  set_has_indexing_time();
  indexing_time_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.indexing_time)
}

// optional fixed32 index_stamp = 16;
bool DBInfo::has_index_stamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DBInfo::set_has_index_stamp() {
  _has_bits_[0] |= 0x00020000u;
}
void DBInfo::clear_has_index_stamp() {
  _has_bits_[0] &= ~0x00020000u;
}
void DBInfo::clear_index_stamp() {
  index_stamp_ = 0u;
  clear_has_index_stamp();
}
::google::protobuf::uint32 DBInfo::index_stamp() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.index_stamp)
  return index_stamp_;
}
void DBInfo::set_index_stamp(::google::protobuf::uint32 value) {
  set_has_index_stamp();
  index_stamp_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.index_stamp)
}

// optional fixed32 fetch_stamp = 17;
bool DBInfo::has_fetch_stamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DBInfo::set_has_fetch_stamp() {
  _has_bits_[0] |= 0x00040000u;
}
void DBInfo::clear_has_fetch_stamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void DBInfo::clear_fetch_stamp() {
  fetch_stamp_ = 0u;
  clear_has_fetch_stamp();
}
::google::protobuf::uint32 DBInfo::fetch_stamp() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.fetch_stamp)
  return fetch_stamp_;
}
void DBInfo::set_fetch_stamp(::google::protobuf::uint32 value) {
  set_has_fetch_stamp();
  fetch_stamp_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.fetch_stamp)
}

// optional .common.pb.ZoneRemapping zone_remapping = 12;
bool DBInfo::has_zone_remapping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DBInfo::set_has_zone_remapping() {
  _has_bits_[0] |= 0x00000001u;
}
void DBInfo::clear_has_zone_remapping() {
  _has_bits_[0] &= ~0x00000001u;
}
void DBInfo::clear_zone_remapping() {
  if (zone_remapping_ != NULL) zone_remapping_->::common::pb::ZoneRemapping::Clear();
  clear_has_zone_remapping();
}
const ::common::pb::ZoneRemapping& DBInfo::zone_remapping() const {
  const ::common::pb::ZoneRemapping* p = zone_remapping_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.zone_remapping)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::ZoneRemapping*>(
      &::common::pb::_ZoneRemapping_default_instance_);
}
::common::pb::ZoneRemapping* DBInfo::mutable_zone_remapping() {
  set_has_zone_remapping();
  if (zone_remapping_ == NULL) {
    zone_remapping_ = new ::common::pb::ZoneRemapping;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.zone_remapping)
  return zone_remapping_;
}
::common::pb::ZoneRemapping* DBInfo::release_zone_remapping() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.zone_remapping)
  clear_has_zone_remapping();
  ::common::pb::ZoneRemapping* temp = zone_remapping_;
  zone_remapping_ = NULL;
  return temp;
}
void DBInfo::set_allocated_zone_remapping(::common::pb::ZoneRemapping* zone_remapping) {
  delete zone_remapping_;
  zone_remapping_ = zone_remapping;
  if (zone_remapping) {
    set_has_zone_remapping();
  } else {
    clear_has_zone_remapping();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.zone_remapping)
}

// optional .common.pb.CommonStorage entries_storage = 13;
bool DBInfo::has_entries_storage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DBInfo::set_has_entries_storage() {
  _has_bits_[0] |= 0x00000002u;
}
void DBInfo::clear_has_entries_storage() {
  _has_bits_[0] &= ~0x00000002u;
}
void DBInfo::clear_entries_storage() {
  if (entries_storage_ != NULL) entries_storage_->::common::pb::CommonStorage::Clear();
  clear_has_entries_storage();
}
const ::common::pb::CommonStorage& DBInfo::entries_storage() const {
  const ::common::pb::CommonStorage* p = entries_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.entries_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
::common::pb::CommonStorage* DBInfo::mutable_entries_storage() {
  set_has_entries_storage();
  if (entries_storage_ == NULL) {
    entries_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.entries_storage)
  return entries_storage_;
}
::common::pb::CommonStorage* DBInfo::release_entries_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.entries_storage)
  clear_has_entries_storage();
  ::common::pb::CommonStorage* temp = entries_storage_;
  entries_storage_ = NULL;
  return temp;
}
void DBInfo::set_allocated_entries_storage(::common::pb::CommonStorage* entries_storage) {
  delete entries_storage_;
  entries_storage_ = entries_storage;
  if (entries_storage) {
    set_has_entries_storage();
  } else {
    clear_has_entries_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.entries_storage)
}

// optional .common.pb.CommonStorage document_storage = 14;
bool DBInfo::has_document_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DBInfo::set_has_document_storage() {
  _has_bits_[0] |= 0x00000004u;
}
void DBInfo::clear_has_document_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
void DBInfo::clear_document_storage() {
  if (document_storage_ != NULL) document_storage_->::common::pb::CommonStorage::Clear();
  clear_has_document_storage();
}
const ::common::pb::CommonStorage& DBInfo::document_storage() const {
  const ::common::pb::CommonStorage* p = document_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.document_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
::common::pb::CommonStorage* DBInfo::mutable_document_storage() {
  set_has_document_storage();
  if (document_storage_ == NULL) {
    document_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.document_storage)
  return document_storage_;
}
::common::pb::CommonStorage* DBInfo::release_document_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.document_storage)
  clear_has_document_storage();
  ::common::pb::CommonStorage* temp = document_storage_;
  document_storage_ = NULL;
  return temp;
}
void DBInfo::set_allocated_document_storage(::common::pb::CommonStorage* document_storage) {
  delete document_storage_;
  document_storage_ = document_storage;
  if (document_storage) {
    set_has_document_storage();
  } else {
    clear_has_document_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.document_storage)
}

// optional .common.pb.CommonStorage document_extra_storage = 15;
bool DBInfo::has_document_extra_storage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DBInfo::set_has_document_extra_storage() {
  _has_bits_[0] |= 0x00000008u;
}
void DBInfo::clear_has_document_extra_storage() {
  _has_bits_[0] &= ~0x00000008u;
}
void DBInfo::clear_document_extra_storage() {
  if (document_extra_storage_ != NULL) document_extra_storage_->::common::pb::CommonStorage::Clear();
  clear_has_document_extra_storage();
}
const ::common::pb::CommonStorage& DBInfo::document_extra_storage() const {
  const ::common::pb::CommonStorage* p = document_extra_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.document_extra_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
::common::pb::CommonStorage* DBInfo::mutable_document_extra_storage() {
  set_has_document_extra_storage();
  if (document_extra_storage_ == NULL) {
    document_extra_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.document_extra_storage)
  return document_extra_storage_;
}
::common::pb::CommonStorage* DBInfo::release_document_extra_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.document_extra_storage)
  clear_has_document_extra_storage();
  ::common::pb::CommonStorage* temp = document_extra_storage_;
  document_extra_storage_ = NULL;
  return temp;
}
void DBInfo::set_allocated_document_extra_storage(::common::pb::CommonStorage* document_extra_storage) {
  delete document_extra_storage_;
  document_extra_storage_ = document_extra_storage;
  if (document_extra_storage) {
    set_has_document_extra_storage();
  } else {
    clear_has_document_extra_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.document_extra_storage)
}

// optional .common.pb.IndexStorage index_storage = 18;
bool DBInfo::has_index_storage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DBInfo::set_has_index_storage() {
  _has_bits_[0] |= 0x00000010u;
}
void DBInfo::clear_has_index_storage() {
  _has_bits_[0] &= ~0x00000010u;
}
void DBInfo::clear_index_storage() {
  if (index_storage_ != NULL) index_storage_->::common::pb::IndexStorage::Clear();
  clear_has_index_storage();
}
const ::common::pb::IndexStorage& DBInfo::index_storage() const {
  const ::common::pb::IndexStorage* p = index_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.index_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::IndexStorage*>(
      &::common::pb::_IndexStorage_default_instance_);
}
::common::pb::IndexStorage* DBInfo::mutable_index_storage() {
  set_has_index_storage();
  if (index_storage_ == NULL) {
    index_storage_ = new ::common::pb::IndexStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.index_storage)
  return index_storage_;
}
::common::pb::IndexStorage* DBInfo::release_index_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.index_storage)
  clear_has_index_storage();
  ::common::pb::IndexStorage* temp = index_storage_;
  index_storage_ = NULL;
  return temp;
}
void DBInfo::set_allocated_index_storage(::common::pb::IndexStorage* index_storage) {
  delete index_storage_;
  index_storage_ = index_storage;
  if (index_storage) {
    set_has_index_storage();
  } else {
    clear_has_index_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.index_storage)
}

// optional .common.pb.AnnStorage ann_storage = 19;
bool DBInfo::has_ann_storage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DBInfo::set_has_ann_storage() {
  _has_bits_[0] |= 0x00000020u;
}
void DBInfo::clear_has_ann_storage() {
  _has_bits_[0] &= ~0x00000020u;
}
void DBInfo::clear_ann_storage() {
  if (ann_storage_ != NULL) ann_storage_->::common::pb::AnnStorage::Clear();
  clear_has_ann_storage();
}
const ::common::pb::AnnStorage& DBInfo::ann_storage() const {
  const ::common::pb::AnnStorage* p = ann_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.ann_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::AnnStorage*>(
      &::common::pb::_AnnStorage_default_instance_);
}
::common::pb::AnnStorage* DBInfo::mutable_ann_storage() {
  set_has_ann_storage();
  if (ann_storage_ == NULL) {
    ann_storage_ = new ::common::pb::AnnStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.ann_storage)
  return ann_storage_;
}
::common::pb::AnnStorage* DBInfo::release_ann_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.ann_storage)
  clear_has_ann_storage();
  ::common::pb::AnnStorage* temp = ann_storage_;
  ann_storage_ = NULL;
  return temp;
}
void DBInfo::set_allocated_ann_storage(::common::pb::AnnStorage* ann_storage) {
  delete ann_storage_;
  ann_storage_ = ann_storage;
  if (ann_storage) {
    set_has_ann_storage();
  } else {
    clear_has_ann_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.ann_storage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace common

// @@protoc_insertion_point(global_scope)
