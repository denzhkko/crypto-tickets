// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_info.proto

#ifndef PROTOBUF_db_5finfo_2eproto__INCLUDED
#define PROTOBUF_db_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace common {
namespace pb {
class AnnStorage;
class AnnStorageDefaultTypeInternal;
extern AnnStorageDefaultTypeInternal _AnnStorage_default_instance_;
class CommonStorage;
class CommonStorageDefaultTypeInternal;
extern CommonStorageDefaultTypeInternal _CommonStorage_default_instance_;
class DBInfo;
class DBInfoDefaultTypeInternal;
extern DBInfoDefaultTypeInternal _DBInfo_default_instance_;
class IndexStorage;
class IndexStorageDefaultTypeInternal;
extern IndexStorageDefaultTypeInternal _IndexStorage_default_instance_;
class ZoneRemapping;
class ZoneRemappingDefaultTypeInternal;
extern ZoneRemappingDefaultTypeInternal _ZoneRemapping_default_instance_;
}  // namespace pb
}  // namespace common

namespace common {
namespace pb {

namespace protobuf_db_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_db_5finfo_2eproto

// ===================================================================

class ZoneRemapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.ZoneRemapping) */ {
 public:
  ZoneRemapping();
  virtual ~ZoneRemapping();

  ZoneRemapping(const ZoneRemapping& from);

  inline ZoneRemapping& operator=(const ZoneRemapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZoneRemapping(ZoneRemapping&& from) noexcept
    : ZoneRemapping() {
    *this = ::std::move(from);
  }

  inline ZoneRemapping& operator=(ZoneRemapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneRemapping& default_instance();

  static inline const ZoneRemapping* internal_default_instance() {
    return reinterpret_cast<const ZoneRemapping*>(
               &_ZoneRemapping_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ZoneRemapping* other);
  friend void swap(ZoneRemapping& a, ZoneRemapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZoneRemapping* New() const PROTOBUF_FINAL { return New(NULL); }

  ZoneRemapping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ZoneRemapping& from);
  void MergeFrom(const ZoneRemapping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ZoneRemapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 zid_pack_array = 1;
  int zid_pack_array_size() const;
  void clear_zid_pack_array();
  static const int kZidPackArrayFieldNumber = 1;
  ::google::protobuf::uint32 zid_pack_array(int index) const;
  void set_zid_pack_array(int index, ::google::protobuf::uint32 value);
  void add_zid_pack_array(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zid_pack_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zid_pack_array();

  // repeated uint32 zid_unpack_array = 2;
  int zid_unpack_array_size() const;
  void clear_zid_unpack_array();
  static const int kZidUnpackArrayFieldNumber = 2;
  ::google::protobuf::uint32 zid_unpack_array(int index) const;
  void set_zid_unpack_array(int index, ::google::protobuf::uint32 value);
  void add_zid_unpack_array(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zid_unpack_array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zid_unpack_array();

  // @@protoc_insertion_point(class_scope:common.pb.ZoneRemapping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zid_pack_array_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zid_unpack_array_;
  friend struct protobuf_db_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonStorage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.CommonStorage) */ {
 public:
  CommonStorage();
  virtual ~CommonStorage();

  CommonStorage(const CommonStorage& from);

  inline CommonStorage& operator=(const CommonStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonStorage(CommonStorage&& from) noexcept
    : CommonStorage() {
    *this = ::std::move(from);
  }

  inline CommonStorage& operator=(CommonStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonStorage& default_instance();

  static inline const CommonStorage* internal_default_instance() {
    return reinterpret_cast<const CommonStorage*>(
               &_CommonStorage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CommonStorage* other);
  friend void swap(CommonStorage& a, CommonStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonStorage* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonStorage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonStorage& from);
  void MergeFrom(const CommonStorage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string prefix = 2;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // required uint32 catalog_bits = 1;
  bool has_catalog_bits() const;
  void clear_catalog_bits();
  static const int kCatalogBitsFieldNumber = 1;
  ::google::protobuf::uint32 catalog_bits() const;
  void set_catalog_bits(::google::protobuf::uint32 value);

  // optional uint32 version_id = 3;
  bool has_version_id() const;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 3;
  ::google::protobuf::uint32 version_id() const;
  void set_version_id(::google::protobuf::uint32 value);

  // optional fixed32 pt_model_hash = 4;
  bool has_pt_model_hash() const;
  void clear_pt_model_hash();
  static const int kPtModelHashFieldNumber = 4;
  ::google::protobuf::uint32 pt_model_hash() const;
  void set_pt_model_hash(::google::protobuf::uint32 value);

  // optional fixed32 neuro_model_hash = 5;
  bool has_neuro_model_hash() const;
  void clear_neuro_model_hash();
  static const int kNeuroModelHashFieldNumber = 5;
  ::google::protobuf::uint32 neuro_model_hash() const;
  void set_neuro_model_hash(::google::protobuf::uint32 value);

  // optional bool pq_vector_enabled = 6 [default = false];
  bool has_pq_vector_enabled() const;
  void clear_pq_vector_enabled();
  static const int kPqVectorEnabledFieldNumber = 6;
  bool pq_vector_enabled() const;
  void set_pq_vector_enabled(bool value);

  // @@protoc_insertion_point(class_scope:common.pb.CommonStorage)
 private:
  void set_has_catalog_bits();
  void clear_has_catalog_bits();
  void set_has_prefix();
  void clear_has_prefix();
  void set_has_version_id();
  void clear_has_version_id();
  void set_has_pt_model_hash();
  void clear_has_pt_model_hash();
  void set_has_neuro_model_hash();
  void clear_has_neuro_model_hash();
  void set_has_pq_vector_enabled();
  void clear_has_pq_vector_enabled();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::uint32 catalog_bits_;
  ::google::protobuf::uint32 version_id_;
  ::google::protobuf::uint32 pt_model_hash_;
  ::google::protobuf::uint32 neuro_model_hash_;
  bool pq_vector_enabled_;
  friend struct protobuf_db_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexStorage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.IndexStorage) */ {
 public:
  IndexStorage();
  virtual ~IndexStorage();

  IndexStorage(const IndexStorage& from);

  inline IndexStorage& operator=(const IndexStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexStorage(IndexStorage&& from) noexcept
    : IndexStorage() {
    *this = ::std::move(from);
  }

  inline IndexStorage& operator=(IndexStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexStorage& default_instance();

  static inline const IndexStorage* internal_default_instance() {
    return reinterpret_cast<const IndexStorage*>(
               &_IndexStorage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IndexStorage* other);
  friend void swap(IndexStorage& a, IndexStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexStorage* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexStorage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexStorage& from);
  void MergeFrom(const IndexStorage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 catalog_bits = 1;
  bool has_catalog_bits() const;
  void clear_catalog_bits();
  static const int kCatalogBitsFieldNumber = 1;
  ::google::protobuf::uint32 catalog_bits() const;
  void set_catalog_bits(::google::protobuf::uint32 value);

  // required uint32 version_id = 2;
  bool has_version_id() const;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 2;
  ::google::protobuf::uint32 version_id() const;
  void set_version_id(::google::protobuf::uint32 value);

  // optional uint64 rare_split_bound = 3;
  bool has_rare_split_bound() const;
  void clear_rare_split_bound();
  static const int kRareSplitBoundFieldNumber = 3;
  ::google::protobuf::uint64 rare_split_bound() const;
  void set_rare_split_bound(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.pb.IndexStorage)
 private:
  void set_has_catalog_bits();
  void clear_has_catalog_bits();
  void set_has_version_id();
  void clear_has_version_id();
  void set_has_rare_split_bound();
  void clear_has_rare_split_bound();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 catalog_bits_;
  ::google::protobuf::uint32 version_id_;
  ::google::protobuf::uint64 rare_split_bound_;
  friend struct protobuf_db_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnnStorage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.AnnStorage) */ {
 public:
  AnnStorage();
  virtual ~AnnStorage();

  AnnStorage(const AnnStorage& from);

  inline AnnStorage& operator=(const AnnStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnStorage(AnnStorage&& from) noexcept
    : AnnStorage() {
    *this = ::std::move(from);
  }

  inline AnnStorage& operator=(AnnStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnStorage& default_instance();

  static inline const AnnStorage* internal_default_instance() {
    return reinterpret_cast<const AnnStorage*>(
               &_AnnStorage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AnnStorage* other);
  friend void swap(AnnStorage& a, AnnStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnStorage* New() const PROTOBUF_FINAL { return New(NULL); }

  AnnStorage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnnStorage& from);
  void MergeFrom(const AnnStorage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnnStorage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fname = 1;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 1;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // required uint32 dim = 2;
  bool has_dim() const;
  void clear_dim();
  static const int kDimFieldNumber = 2;
  ::google::protobuf::uint32 dim() const;
  void set_dim(::google::protobuf::uint32 value);

  // required uint32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.pb.AnnStorage)
 private:
  void set_has_fname();
  void clear_has_fname();
  void set_has_dim();
  void clear_has_dim();
  void set_has_depth();
  void clear_has_depth();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::google::protobuf::uint32 dim_;
  ::google::protobuf::uint32 depth_;
  friend struct protobuf_db_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DBInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.DBInfo) */ {
 public:
  DBInfo();
  virtual ~DBInfo();

  DBInfo(const DBInfo& from);

  inline DBInfo& operator=(const DBInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DBInfo(DBInfo&& from) noexcept
    : DBInfo() {
    *this = ::std::move(from);
  }

  inline DBInfo& operator=(DBInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBInfo& default_instance();

  static inline const DBInfo* internal_default_instance() {
    return reinterpret_cast<const DBInfo*>(
               &_DBInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DBInfo* other);
  friend void swap(DBInfo& a, DBInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DBInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DBInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DBInfo& from);
  void MergeFrom(const DBInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DBInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.pb.ZoneRemapping zone_remapping = 12;
  bool has_zone_remapping() const;
  void clear_zone_remapping();
  static const int kZoneRemappingFieldNumber = 12;
  const ::common::pb::ZoneRemapping& zone_remapping() const;
  ::common::pb::ZoneRemapping* mutable_zone_remapping();
  ::common::pb::ZoneRemapping* release_zone_remapping();
  void set_allocated_zone_remapping(::common::pb::ZoneRemapping* zone_remapping);

  // optional .common.pb.CommonStorage entries_storage = 13;
  bool has_entries_storage() const;
  void clear_entries_storage();
  static const int kEntriesStorageFieldNumber = 13;
  const ::common::pb::CommonStorage& entries_storage() const;
  ::common::pb::CommonStorage* mutable_entries_storage();
  ::common::pb::CommonStorage* release_entries_storage();
  void set_allocated_entries_storage(::common::pb::CommonStorage* entries_storage);

  // optional .common.pb.CommonStorage document_storage = 14;
  bool has_document_storage() const;
  void clear_document_storage();
  static const int kDocumentStorageFieldNumber = 14;
  const ::common::pb::CommonStorage& document_storage() const;
  ::common::pb::CommonStorage* mutable_document_storage();
  ::common::pb::CommonStorage* release_document_storage();
  void set_allocated_document_storage(::common::pb::CommonStorage* document_storage);

  // optional .common.pb.CommonStorage document_extra_storage = 15;
  bool has_document_extra_storage() const;
  void clear_document_extra_storage();
  static const int kDocumentExtraStorageFieldNumber = 15;
  const ::common::pb::CommonStorage& document_extra_storage() const;
  ::common::pb::CommonStorage* mutable_document_extra_storage();
  ::common::pb::CommonStorage* release_document_extra_storage();
  void set_allocated_document_extra_storage(::common::pb::CommonStorage* document_extra_storage);

  // optional .common.pb.IndexStorage index_storage = 18;
  bool has_index_storage() const;
  void clear_index_storage();
  static const int kIndexStorageFieldNumber = 18;
  const ::common::pb::IndexStorage& index_storage() const;
  ::common::pb::IndexStorage* mutable_index_storage();
  ::common::pb::IndexStorage* release_index_storage();
  void set_allocated_index_storage(::common::pb::IndexStorage* index_storage);

  // optional .common.pb.AnnStorage ann_storage = 19;
  bool has_ann_storage() const;
  void clear_ann_storage();
  static const int kAnnStorageFieldNumber = 19;
  const ::common::pb::AnnStorage& ann_storage() const;
  ::common::pb::AnnStorage* mutable_ann_storage();
  ::common::pb::AnnStorage* release_ann_storage();
  void set_allocated_ann_storage(::common::pb::AnnStorage* ann_storage);

  // required fixed32 header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  ::google::protobuf::uint32 header() const;
  void set_header(::google::protobuf::uint32 value);

  // optional fixed32 num_docs = 2;
  bool has_num_docs() const;
  void clear_num_docs();
  static const int kNumDocsFieldNumber = 2;
  ::google::protobuf::uint32 num_docs() const;
  void set_num_docs(::google::protobuf::uint32 value);

  // optional fixed32 last_doc_id = 3;
  bool has_last_doc_id() const;
  void clear_last_doc_id();
  static const int kLastDocIdFieldNumber = 3;
  ::google::protobuf::uint32 last_doc_id() const;
  void set_last_doc_id(::google::protobuf::uint32 value);

  // optional uint32 storage_cat_bits = 4;
  bool has_storage_cat_bits() const;
  void clear_storage_cat_bits();
  static const int kStorageCatBitsFieldNumber = 4;
  ::google::protobuf::uint32 storage_cat_bits() const;
  void set_storage_cat_bits(::google::protobuf::uint32 value);

  // optional uint32 data_cat_bits = 5;
  bool has_data_cat_bits() const;
  void clear_data_cat_bits();
  static const int kDataCatBitsFieldNumber = 5;
  ::google::protobuf::uint32 data_cat_bits() const;
  void set_data_cat_bits(::google::protobuf::uint32 value);

  // optional uint32 last_ext_link_id = 6;
  bool has_last_ext_link_id() const;
  void clear_last_ext_link_id();
  static const int kLastExtLinkIdFieldNumber = 6;
  ::google::protobuf::uint32 last_ext_link_id() const;
  void set_last_ext_link_id(::google::protobuf::uint32 value);

  // optional uint64 last_opt_data_size = 7;
  bool has_last_opt_data_size() const;
  void clear_last_opt_data_size();
  static const int kLastOptDataSizeFieldNumber = 7;
  ::google::protobuf::uint64 last_opt_data_size() const;
  void set_last_opt_data_size(::google::protobuf::uint64 value);

  // optional uint64 last_opt_storage_size = 8;
  bool has_last_opt_storage_size() const;
  void clear_last_opt_storage_size();
  static const int kLastOptStorageSizeFieldNumber = 8;
  ::google::protobuf::uint64 last_opt_storage_size() const;
  void set_last_opt_storage_size(::google::protobuf::uint64 value);

  // optional uint32 last_opt_docs = 9;
  bool has_last_opt_docs() const;
  void clear_last_opt_docs();
  static const int kLastOptDocsFieldNumber = 9;
  ::google::protobuf::uint32 last_opt_docs() const;
  void set_last_opt_docs(::google::protobuf::uint32 value);

  // optional uint32 last_opt_last_doc_id = 10;
  bool has_last_opt_last_doc_id() const;
  void clear_last_opt_last_doc_id();
  static const int kLastOptLastDocIdFieldNumber = 10;
  ::google::protobuf::uint32 last_opt_last_doc_id() const;
  void set_last_opt_last_doc_id(::google::protobuf::uint32 value);

  // optional fixed32 indexing_time = 11;
  bool has_indexing_time() const;
  void clear_indexing_time();
  static const int kIndexingTimeFieldNumber = 11;
  ::google::protobuf::uint32 indexing_time() const;
  void set_indexing_time(::google::protobuf::uint32 value);

  // optional fixed32 index_stamp = 16;
  bool has_index_stamp() const;
  void clear_index_stamp();
  static const int kIndexStampFieldNumber = 16;
  ::google::protobuf::uint32 index_stamp() const;
  void set_index_stamp(::google::protobuf::uint32 value);

  // optional fixed32 fetch_stamp = 17;
  bool has_fetch_stamp() const;
  void clear_fetch_stamp();
  static const int kFetchStampFieldNumber = 17;
  ::google::protobuf::uint32 fetch_stamp() const;
  void set_fetch_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.pb.DBInfo)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_num_docs();
  void clear_has_num_docs();
  void set_has_last_doc_id();
  void clear_has_last_doc_id();
  void set_has_storage_cat_bits();
  void clear_has_storage_cat_bits();
  void set_has_data_cat_bits();
  void clear_has_data_cat_bits();
  void set_has_last_ext_link_id();
  void clear_has_last_ext_link_id();
  void set_has_last_opt_data_size();
  void clear_has_last_opt_data_size();
  void set_has_last_opt_storage_size();
  void clear_has_last_opt_storage_size();
  void set_has_last_opt_docs();
  void clear_has_last_opt_docs();
  void set_has_last_opt_last_doc_id();
  void clear_has_last_opt_last_doc_id();
  void set_has_indexing_time();
  void clear_has_indexing_time();
  void set_has_index_stamp();
  void clear_has_index_stamp();
  void set_has_fetch_stamp();
  void clear_has_fetch_stamp();
  void set_has_zone_remapping();
  void clear_has_zone_remapping();
  void set_has_entries_storage();
  void clear_has_entries_storage();
  void set_has_document_storage();
  void clear_has_document_storage();
  void set_has_document_extra_storage();
  void clear_has_document_extra_storage();
  void set_has_index_storage();
  void clear_has_index_storage();
  void set_has_ann_storage();
  void clear_has_ann_storage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::common::pb::ZoneRemapping* zone_remapping_;
  ::common::pb::CommonStorage* entries_storage_;
  ::common::pb::CommonStorage* document_storage_;
  ::common::pb::CommonStorage* document_extra_storage_;
  ::common::pb::IndexStorage* index_storage_;
  ::common::pb::AnnStorage* ann_storage_;
  ::google::protobuf::uint32 header_;
  ::google::protobuf::uint32 num_docs_;
  ::google::protobuf::uint32 last_doc_id_;
  ::google::protobuf::uint32 storage_cat_bits_;
  ::google::protobuf::uint32 data_cat_bits_;
  ::google::protobuf::uint32 last_ext_link_id_;
  ::google::protobuf::uint64 last_opt_data_size_;
  ::google::protobuf::uint64 last_opt_storage_size_;
  ::google::protobuf::uint32 last_opt_docs_;
  ::google::protobuf::uint32 last_opt_last_doc_id_;
  ::google::protobuf::uint32 indexing_time_;
  ::google::protobuf::uint32 index_stamp_;
  ::google::protobuf::uint32 fetch_stamp_;
  friend struct protobuf_db_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZoneRemapping

// repeated uint32 zid_pack_array = 1;
inline int ZoneRemapping::zid_pack_array_size() const {
  return zid_pack_array_.size();
}
inline void ZoneRemapping::clear_zid_pack_array() {
  zid_pack_array_.Clear();
}
inline ::google::protobuf::uint32 ZoneRemapping::zid_pack_array(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.ZoneRemapping.zid_pack_array)
  return zid_pack_array_.Get(index);
}
inline void ZoneRemapping::set_zid_pack_array(int index, ::google::protobuf::uint32 value) {
  zid_pack_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.pb.ZoneRemapping.zid_pack_array)
}
inline void ZoneRemapping::add_zid_pack_array(::google::protobuf::uint32 value) {
  zid_pack_array_.Add(value);
  // @@protoc_insertion_point(field_add:common.pb.ZoneRemapping.zid_pack_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZoneRemapping::zid_pack_array() const {
  // @@protoc_insertion_point(field_list:common.pb.ZoneRemapping.zid_pack_array)
  return zid_pack_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZoneRemapping::mutable_zid_pack_array() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.ZoneRemapping.zid_pack_array)
  return &zid_pack_array_;
}

// repeated uint32 zid_unpack_array = 2;
inline int ZoneRemapping::zid_unpack_array_size() const {
  return zid_unpack_array_.size();
}
inline void ZoneRemapping::clear_zid_unpack_array() {
  zid_unpack_array_.Clear();
}
inline ::google::protobuf::uint32 ZoneRemapping::zid_unpack_array(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.ZoneRemapping.zid_unpack_array)
  return zid_unpack_array_.Get(index);
}
inline void ZoneRemapping::set_zid_unpack_array(int index, ::google::protobuf::uint32 value) {
  zid_unpack_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.pb.ZoneRemapping.zid_unpack_array)
}
inline void ZoneRemapping::add_zid_unpack_array(::google::protobuf::uint32 value) {
  zid_unpack_array_.Add(value);
  // @@protoc_insertion_point(field_add:common.pb.ZoneRemapping.zid_unpack_array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ZoneRemapping::zid_unpack_array() const {
  // @@protoc_insertion_point(field_list:common.pb.ZoneRemapping.zid_unpack_array)
  return zid_unpack_array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ZoneRemapping::mutable_zid_unpack_array() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.ZoneRemapping.zid_unpack_array)
  return &zid_unpack_array_;
}

// -------------------------------------------------------------------

// CommonStorage

// required uint32 catalog_bits = 1;
inline bool CommonStorage::has_catalog_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonStorage::set_has_catalog_bits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonStorage::clear_has_catalog_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonStorage::clear_catalog_bits() {
  catalog_bits_ = 0u;
  clear_has_catalog_bits();
}
inline ::google::protobuf::uint32 CommonStorage::catalog_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.catalog_bits)
  return catalog_bits_;
}
inline void CommonStorage::set_catalog_bits(::google::protobuf::uint32 value) {
  set_has_catalog_bits();
  catalog_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.catalog_bits)
}

// required string prefix = 2;
inline bool CommonStorage::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonStorage::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonStorage::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonStorage::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string& CommonStorage::prefix() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.prefix)
  return prefix_.GetNoArena();
}
inline void CommonStorage::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.prefix)
}
#if LANG_CXX11
inline void CommonStorage::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.CommonStorage.prefix)
}
#endif
inline void CommonStorage::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.CommonStorage.prefix)
}
inline void CommonStorage::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.CommonStorage.prefix)
}
inline ::std::string* CommonStorage::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:common.pb.CommonStorage.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonStorage::release_prefix() {
  // @@protoc_insertion_point(field_release:common.pb.CommonStorage.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonStorage::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:common.pb.CommonStorage.prefix)
}

// optional uint32 version_id = 3;
inline bool CommonStorage::has_version_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonStorage::set_has_version_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonStorage::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonStorage::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
inline ::google::protobuf::uint32 CommonStorage::version_id() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.version_id)
  return version_id_;
}
inline void CommonStorage::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.version_id)
}

// optional fixed32 pt_model_hash = 4;
inline bool CommonStorage::has_pt_model_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonStorage::set_has_pt_model_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonStorage::clear_has_pt_model_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonStorage::clear_pt_model_hash() {
  pt_model_hash_ = 0u;
  clear_has_pt_model_hash();
}
inline ::google::protobuf::uint32 CommonStorage::pt_model_hash() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.pt_model_hash)
  return pt_model_hash_;
}
inline void CommonStorage::set_pt_model_hash(::google::protobuf::uint32 value) {
  set_has_pt_model_hash();
  pt_model_hash_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.pt_model_hash)
}

// optional fixed32 neuro_model_hash = 5;
inline bool CommonStorage::has_neuro_model_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonStorage::set_has_neuro_model_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonStorage::clear_has_neuro_model_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonStorage::clear_neuro_model_hash() {
  neuro_model_hash_ = 0u;
  clear_has_neuro_model_hash();
}
inline ::google::protobuf::uint32 CommonStorage::neuro_model_hash() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.neuro_model_hash)
  return neuro_model_hash_;
}
inline void CommonStorage::set_neuro_model_hash(::google::protobuf::uint32 value) {
  set_has_neuro_model_hash();
  neuro_model_hash_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.neuro_model_hash)
}

// optional bool pq_vector_enabled = 6 [default = false];
inline bool CommonStorage::has_pq_vector_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonStorage::set_has_pq_vector_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonStorage::clear_has_pq_vector_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonStorage::clear_pq_vector_enabled() {
  pq_vector_enabled_ = false;
  clear_has_pq_vector_enabled();
}
inline bool CommonStorage::pq_vector_enabled() const {
  // @@protoc_insertion_point(field_get:common.pb.CommonStorage.pq_vector_enabled)
  return pq_vector_enabled_;
}
inline void CommonStorage::set_pq_vector_enabled(bool value) {
  set_has_pq_vector_enabled();
  pq_vector_enabled_ = value;
  // @@protoc_insertion_point(field_set:common.pb.CommonStorage.pq_vector_enabled)
}

// -------------------------------------------------------------------

// IndexStorage

// required uint32 catalog_bits = 1;
inline bool IndexStorage::has_catalog_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexStorage::set_has_catalog_bits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexStorage::clear_has_catalog_bits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexStorage::clear_catalog_bits() {
  catalog_bits_ = 0u;
  clear_has_catalog_bits();
}
inline ::google::protobuf::uint32 IndexStorage::catalog_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.catalog_bits)
  return catalog_bits_;
}
inline void IndexStorage::set_catalog_bits(::google::protobuf::uint32 value) {
  set_has_catalog_bits();
  catalog_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.catalog_bits)
}

// required uint32 version_id = 2;
inline bool IndexStorage::has_version_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexStorage::set_has_version_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexStorage::clear_has_version_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexStorage::clear_version_id() {
  version_id_ = 0u;
  clear_has_version_id();
}
inline ::google::protobuf::uint32 IndexStorage::version_id() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.version_id)
  return version_id_;
}
inline void IndexStorage::set_version_id(::google::protobuf::uint32 value) {
  set_has_version_id();
  version_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.version_id)
}

// optional uint64 rare_split_bound = 3;
inline bool IndexStorage::has_rare_split_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndexStorage::set_has_rare_split_bound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndexStorage::clear_has_rare_split_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndexStorage::clear_rare_split_bound() {
  rare_split_bound_ = GOOGLE_ULONGLONG(0);
  clear_has_rare_split_bound();
}
inline ::google::protobuf::uint64 IndexStorage::rare_split_bound() const {
  // @@protoc_insertion_point(field_get:common.pb.IndexStorage.rare_split_bound)
  return rare_split_bound_;
}
inline void IndexStorage::set_rare_split_bound(::google::protobuf::uint64 value) {
  set_has_rare_split_bound();
  rare_split_bound_ = value;
  // @@protoc_insertion_point(field_set:common.pb.IndexStorage.rare_split_bound)
}

// -------------------------------------------------------------------

// AnnStorage

// required string fname = 1;
inline bool AnnStorage::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnStorage::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnStorage::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnStorage::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& AnnStorage::fname() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.fname)
  return fname_.GetNoArena();
}
inline void AnnStorage::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.fname)
}
#if LANG_CXX11
inline void AnnStorage::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.AnnStorage.fname)
}
#endif
inline void AnnStorage::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.AnnStorage.fname)
}
inline void AnnStorage::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.AnnStorage.fname)
}
inline ::std::string* AnnStorage::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:common.pb.AnnStorage.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnStorage::release_fname() {
  // @@protoc_insertion_point(field_release:common.pb.AnnStorage.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnStorage::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:common.pb.AnnStorage.fname)
}

// required uint32 dim = 2;
inline bool AnnStorage::has_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnStorage::set_has_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnStorage::clear_has_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnStorage::clear_dim() {
  dim_ = 0u;
  clear_has_dim();
}
inline ::google::protobuf::uint32 AnnStorage::dim() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.dim)
  return dim_;
}
inline void AnnStorage::set_dim(::google::protobuf::uint32 value) {
  set_has_dim();
  dim_ = value;
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.dim)
}

// required uint32 depth = 3;
inline bool AnnStorage::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnStorage::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnStorage::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnStorage::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 AnnStorage::depth() const {
  // @@protoc_insertion_point(field_get:common.pb.AnnStorage.depth)
  return depth_;
}
inline void AnnStorage::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:common.pb.AnnStorage.depth)
}

// -------------------------------------------------------------------

// DBInfo

// required fixed32 header = 1;
inline bool DBInfo::has_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBInfo::set_has_header() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBInfo::clear_header() {
  header_ = 0u;
  clear_has_header();
}
inline ::google::protobuf::uint32 DBInfo::header() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.header)
  return header_;
}
inline void DBInfo::set_header(::google::protobuf::uint32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.header)
}

// optional fixed32 num_docs = 2;
inline bool DBInfo::has_num_docs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBInfo::set_has_num_docs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBInfo::clear_has_num_docs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBInfo::clear_num_docs() {
  num_docs_ = 0u;
  clear_has_num_docs();
}
inline ::google::protobuf::uint32 DBInfo::num_docs() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.num_docs)
  return num_docs_;
}
inline void DBInfo::set_num_docs(::google::protobuf::uint32 value) {
  set_has_num_docs();
  num_docs_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.num_docs)
}

// optional fixed32 last_doc_id = 3;
inline bool DBInfo::has_last_doc_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DBInfo::set_has_last_doc_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DBInfo::clear_has_last_doc_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DBInfo::clear_last_doc_id() {
  last_doc_id_ = 0u;
  clear_has_last_doc_id();
}
inline ::google::protobuf::uint32 DBInfo::last_doc_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_doc_id)
  return last_doc_id_;
}
inline void DBInfo::set_last_doc_id(::google::protobuf::uint32 value) {
  set_has_last_doc_id();
  last_doc_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_doc_id)
}

// optional uint32 storage_cat_bits = 4;
inline bool DBInfo::has_storage_cat_bits() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DBInfo::set_has_storage_cat_bits() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DBInfo::clear_has_storage_cat_bits() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DBInfo::clear_storage_cat_bits() {
  storage_cat_bits_ = 0u;
  clear_has_storage_cat_bits();
}
inline ::google::protobuf::uint32 DBInfo::storage_cat_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.storage_cat_bits)
  return storage_cat_bits_;
}
inline void DBInfo::set_storage_cat_bits(::google::protobuf::uint32 value) {
  set_has_storage_cat_bits();
  storage_cat_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.storage_cat_bits)
}

// optional uint32 data_cat_bits = 5;
inline bool DBInfo::has_data_cat_bits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DBInfo::set_has_data_cat_bits() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DBInfo::clear_has_data_cat_bits() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DBInfo::clear_data_cat_bits() {
  data_cat_bits_ = 0u;
  clear_has_data_cat_bits();
}
inline ::google::protobuf::uint32 DBInfo::data_cat_bits() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.data_cat_bits)
  return data_cat_bits_;
}
inline void DBInfo::set_data_cat_bits(::google::protobuf::uint32 value) {
  set_has_data_cat_bits();
  data_cat_bits_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.data_cat_bits)
}

// optional uint32 last_ext_link_id = 6;
inline bool DBInfo::has_last_ext_link_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DBInfo::set_has_last_ext_link_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DBInfo::clear_has_last_ext_link_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DBInfo::clear_last_ext_link_id() {
  last_ext_link_id_ = 0u;
  clear_has_last_ext_link_id();
}
inline ::google::protobuf::uint32 DBInfo::last_ext_link_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_ext_link_id)
  return last_ext_link_id_;
}
inline void DBInfo::set_last_ext_link_id(::google::protobuf::uint32 value) {
  set_has_last_ext_link_id();
  last_ext_link_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_ext_link_id)
}

// optional uint64 last_opt_data_size = 7;
inline bool DBInfo::has_last_opt_data_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DBInfo::set_has_last_opt_data_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DBInfo::clear_has_last_opt_data_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DBInfo::clear_last_opt_data_size() {
  last_opt_data_size_ = GOOGLE_ULONGLONG(0);
  clear_has_last_opt_data_size();
}
inline ::google::protobuf::uint64 DBInfo::last_opt_data_size() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_data_size)
  return last_opt_data_size_;
}
inline void DBInfo::set_last_opt_data_size(::google::protobuf::uint64 value) {
  set_has_last_opt_data_size();
  last_opt_data_size_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_data_size)
}

// optional uint64 last_opt_storage_size = 8;
inline bool DBInfo::has_last_opt_storage_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DBInfo::set_has_last_opt_storage_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DBInfo::clear_has_last_opt_storage_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DBInfo::clear_last_opt_storage_size() {
  last_opt_storage_size_ = GOOGLE_ULONGLONG(0);
  clear_has_last_opt_storage_size();
}
inline ::google::protobuf::uint64 DBInfo::last_opt_storage_size() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_storage_size)
  return last_opt_storage_size_;
}
inline void DBInfo::set_last_opt_storage_size(::google::protobuf::uint64 value) {
  set_has_last_opt_storage_size();
  last_opt_storage_size_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_storage_size)
}

// optional uint32 last_opt_docs = 9;
inline bool DBInfo::has_last_opt_docs() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DBInfo::set_has_last_opt_docs() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DBInfo::clear_has_last_opt_docs() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DBInfo::clear_last_opt_docs() {
  last_opt_docs_ = 0u;
  clear_has_last_opt_docs();
}
inline ::google::protobuf::uint32 DBInfo::last_opt_docs() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_docs)
  return last_opt_docs_;
}
inline void DBInfo::set_last_opt_docs(::google::protobuf::uint32 value) {
  set_has_last_opt_docs();
  last_opt_docs_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_docs)
}

// optional uint32 last_opt_last_doc_id = 10;
inline bool DBInfo::has_last_opt_last_doc_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DBInfo::set_has_last_opt_last_doc_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DBInfo::clear_has_last_opt_last_doc_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DBInfo::clear_last_opt_last_doc_id() {
  last_opt_last_doc_id_ = 0u;
  clear_has_last_opt_last_doc_id();
}
inline ::google::protobuf::uint32 DBInfo::last_opt_last_doc_id() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.last_opt_last_doc_id)
  return last_opt_last_doc_id_;
}
inline void DBInfo::set_last_opt_last_doc_id(::google::protobuf::uint32 value) {
  set_has_last_opt_last_doc_id();
  last_opt_last_doc_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.last_opt_last_doc_id)
}

// optional fixed32 indexing_time = 11;
inline bool DBInfo::has_indexing_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DBInfo::set_has_indexing_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DBInfo::clear_has_indexing_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DBInfo::clear_indexing_time() {
  indexing_time_ = 0u;
  clear_has_indexing_time();
}
inline ::google::protobuf::uint32 DBInfo::indexing_time() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.indexing_time)
  return indexing_time_;
}
inline void DBInfo::set_indexing_time(::google::protobuf::uint32 value) {
  set_has_indexing_time();
  indexing_time_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.indexing_time)
}

// optional fixed32 index_stamp = 16;
inline bool DBInfo::has_index_stamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DBInfo::set_has_index_stamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DBInfo::clear_has_index_stamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DBInfo::clear_index_stamp() {
  index_stamp_ = 0u;
  clear_has_index_stamp();
}
inline ::google::protobuf::uint32 DBInfo::index_stamp() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.index_stamp)
  return index_stamp_;
}
inline void DBInfo::set_index_stamp(::google::protobuf::uint32 value) {
  set_has_index_stamp();
  index_stamp_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.index_stamp)
}

// optional fixed32 fetch_stamp = 17;
inline bool DBInfo::has_fetch_stamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DBInfo::set_has_fetch_stamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DBInfo::clear_has_fetch_stamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DBInfo::clear_fetch_stamp() {
  fetch_stamp_ = 0u;
  clear_has_fetch_stamp();
}
inline ::google::protobuf::uint32 DBInfo::fetch_stamp() const {
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.fetch_stamp)
  return fetch_stamp_;
}
inline void DBInfo::set_fetch_stamp(::google::protobuf::uint32 value) {
  set_has_fetch_stamp();
  fetch_stamp_ = value;
  // @@protoc_insertion_point(field_set:common.pb.DBInfo.fetch_stamp)
}

// optional .common.pb.ZoneRemapping zone_remapping = 12;
inline bool DBInfo::has_zone_remapping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBInfo::set_has_zone_remapping() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBInfo::clear_has_zone_remapping() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBInfo::clear_zone_remapping() {
  if (zone_remapping_ != NULL) zone_remapping_->::common::pb::ZoneRemapping::Clear();
  clear_has_zone_remapping();
}
inline const ::common::pb::ZoneRemapping& DBInfo::zone_remapping() const {
  const ::common::pb::ZoneRemapping* p = zone_remapping_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.zone_remapping)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::ZoneRemapping*>(
      &::common::pb::_ZoneRemapping_default_instance_);
}
inline ::common::pb::ZoneRemapping* DBInfo::mutable_zone_remapping() {
  set_has_zone_remapping();
  if (zone_remapping_ == NULL) {
    zone_remapping_ = new ::common::pb::ZoneRemapping;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.zone_remapping)
  return zone_remapping_;
}
inline ::common::pb::ZoneRemapping* DBInfo::release_zone_remapping() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.zone_remapping)
  clear_has_zone_remapping();
  ::common::pb::ZoneRemapping* temp = zone_remapping_;
  zone_remapping_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_zone_remapping(::common::pb::ZoneRemapping* zone_remapping) {
  delete zone_remapping_;
  zone_remapping_ = zone_remapping;
  if (zone_remapping) {
    set_has_zone_remapping();
  } else {
    clear_has_zone_remapping();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.zone_remapping)
}

// optional .common.pb.CommonStorage entries_storage = 13;
inline bool DBInfo::has_entries_storage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBInfo::set_has_entries_storage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBInfo::clear_has_entries_storage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBInfo::clear_entries_storage() {
  if (entries_storage_ != NULL) entries_storage_->::common::pb::CommonStorage::Clear();
  clear_has_entries_storage();
}
inline const ::common::pb::CommonStorage& DBInfo::entries_storage() const {
  const ::common::pb::CommonStorage* p = entries_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.entries_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
inline ::common::pb::CommonStorage* DBInfo::mutable_entries_storage() {
  set_has_entries_storage();
  if (entries_storage_ == NULL) {
    entries_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.entries_storage)
  return entries_storage_;
}
inline ::common::pb::CommonStorage* DBInfo::release_entries_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.entries_storage)
  clear_has_entries_storage();
  ::common::pb::CommonStorage* temp = entries_storage_;
  entries_storage_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_entries_storage(::common::pb::CommonStorage* entries_storage) {
  delete entries_storage_;
  entries_storage_ = entries_storage;
  if (entries_storage) {
    set_has_entries_storage();
  } else {
    clear_has_entries_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.entries_storage)
}

// optional .common.pb.CommonStorage document_storage = 14;
inline bool DBInfo::has_document_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBInfo::set_has_document_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBInfo::clear_has_document_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBInfo::clear_document_storage() {
  if (document_storage_ != NULL) document_storage_->::common::pb::CommonStorage::Clear();
  clear_has_document_storage();
}
inline const ::common::pb::CommonStorage& DBInfo::document_storage() const {
  const ::common::pb::CommonStorage* p = document_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.document_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
inline ::common::pb::CommonStorage* DBInfo::mutable_document_storage() {
  set_has_document_storage();
  if (document_storage_ == NULL) {
    document_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.document_storage)
  return document_storage_;
}
inline ::common::pb::CommonStorage* DBInfo::release_document_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.document_storage)
  clear_has_document_storage();
  ::common::pb::CommonStorage* temp = document_storage_;
  document_storage_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_document_storage(::common::pb::CommonStorage* document_storage) {
  delete document_storage_;
  document_storage_ = document_storage;
  if (document_storage) {
    set_has_document_storage();
  } else {
    clear_has_document_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.document_storage)
}

// optional .common.pb.CommonStorage document_extra_storage = 15;
inline bool DBInfo::has_document_extra_storage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBInfo::set_has_document_extra_storage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBInfo::clear_has_document_extra_storage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBInfo::clear_document_extra_storage() {
  if (document_extra_storage_ != NULL) document_extra_storage_->::common::pb::CommonStorage::Clear();
  clear_has_document_extra_storage();
}
inline const ::common::pb::CommonStorage& DBInfo::document_extra_storage() const {
  const ::common::pb::CommonStorage* p = document_extra_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.document_extra_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::CommonStorage*>(
      &::common::pb::_CommonStorage_default_instance_);
}
inline ::common::pb::CommonStorage* DBInfo::mutable_document_extra_storage() {
  set_has_document_extra_storage();
  if (document_extra_storage_ == NULL) {
    document_extra_storage_ = new ::common::pb::CommonStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.document_extra_storage)
  return document_extra_storage_;
}
inline ::common::pb::CommonStorage* DBInfo::release_document_extra_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.document_extra_storage)
  clear_has_document_extra_storage();
  ::common::pb::CommonStorage* temp = document_extra_storage_;
  document_extra_storage_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_document_extra_storage(::common::pb::CommonStorage* document_extra_storage) {
  delete document_extra_storage_;
  document_extra_storage_ = document_extra_storage;
  if (document_extra_storage) {
    set_has_document_extra_storage();
  } else {
    clear_has_document_extra_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.document_extra_storage)
}

// optional .common.pb.IndexStorage index_storage = 18;
inline bool DBInfo::has_index_storage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBInfo::set_has_index_storage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBInfo::clear_has_index_storage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBInfo::clear_index_storage() {
  if (index_storage_ != NULL) index_storage_->::common::pb::IndexStorage::Clear();
  clear_has_index_storage();
}
inline const ::common::pb::IndexStorage& DBInfo::index_storage() const {
  const ::common::pb::IndexStorage* p = index_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.index_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::IndexStorage*>(
      &::common::pb::_IndexStorage_default_instance_);
}
inline ::common::pb::IndexStorage* DBInfo::mutable_index_storage() {
  set_has_index_storage();
  if (index_storage_ == NULL) {
    index_storage_ = new ::common::pb::IndexStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.index_storage)
  return index_storage_;
}
inline ::common::pb::IndexStorage* DBInfo::release_index_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.index_storage)
  clear_has_index_storage();
  ::common::pb::IndexStorage* temp = index_storage_;
  index_storage_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_index_storage(::common::pb::IndexStorage* index_storage) {
  delete index_storage_;
  index_storage_ = index_storage;
  if (index_storage) {
    set_has_index_storage();
  } else {
    clear_has_index_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.index_storage)
}

// optional .common.pb.AnnStorage ann_storage = 19;
inline bool DBInfo::has_ann_storage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBInfo::set_has_ann_storage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBInfo::clear_has_ann_storage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBInfo::clear_ann_storage() {
  if (ann_storage_ != NULL) ann_storage_->::common::pb::AnnStorage::Clear();
  clear_has_ann_storage();
}
inline const ::common::pb::AnnStorage& DBInfo::ann_storage() const {
  const ::common::pb::AnnStorage* p = ann_storage_;
  // @@protoc_insertion_point(field_get:common.pb.DBInfo.ann_storage)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::AnnStorage*>(
      &::common::pb::_AnnStorage_default_instance_);
}
inline ::common::pb::AnnStorage* DBInfo::mutable_ann_storage() {
  set_has_ann_storage();
  if (ann_storage_ == NULL) {
    ann_storage_ = new ::common::pb::AnnStorage;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.DBInfo.ann_storage)
  return ann_storage_;
}
inline ::common::pb::AnnStorage* DBInfo::release_ann_storage() {
  // @@protoc_insertion_point(field_release:common.pb.DBInfo.ann_storage)
  clear_has_ann_storage();
  ::common::pb::AnnStorage* temp = ann_storage_;
  ann_storage_ = NULL;
  return temp;
}
inline void DBInfo::set_allocated_ann_storage(::common::pb::AnnStorage* ann_storage) {
  delete ann_storage_;
  ann_storage_ = ann_storage;
  if (ann_storage) {
    set_has_ann_storage();
  } else {
    clear_has_ann_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.DBInfo.ann_storage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5finfo_2eproto__INCLUDED
