// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: doc_parser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "doc_parser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class AdditionalParsingDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AdditionalParsingData>
     _instance;
} _AdditionalParsingData_default_instance_;
class LinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Links>
     _instance;
} _Links_default_instance_;
class FeatureKVDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureKV>
     _instance;
} _FeatureKV_default_instance_;
class FeatureListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeatureList>
     _instance;
} _FeatureList_default_instance_;
class RegionKVDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionKV>
     _instance;
} _RegionKV_default_instance_;
class RegionListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionList>
     _instance;
} _RegionList_default_instance_;
class ContactInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContactInfo>
     _instance;
} _ContactInfo_default_instance_;
class ContactInfoListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContactInfoList>
     _instance;
} _ContactInfoList_default_instance_;
class SubjContextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubjContext>
     _instance;
} _SubjContext_default_instance_;
class SubjContextListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubjContextList>
     _instance;
} _SubjContextList_default_instance_;
class ProfileInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileInfo>
     _instance;
} _ProfileInfo_default_instance_;
class SubjParsed_KeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubjParsed_KeyValue>
     _instance;
} _SubjParsed_KeyValue_default_instance_;
class SubjParsedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubjParsed>
     _instance;
} _SubjParsed_default_instance_;
class ImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
     _instance;
} _ImageInfo_default_instance_;
class ChromeImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChromeImageInfo>
     _instance;
} _ChromeImageInfo_default_instance_;
class FeaturesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Features>
     _instance;
} _Features_default_instance_;
class DetectedLanguageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DetectedLanguage>
     _instance;
} _DetectedLanguage_default_instance_;
class DetectedLangArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DetectedLangArray>
     _instance;
} _DetectedLangArray_default_instance_;
class SiteLanguageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiteLanguage>
     _instance;
} _SiteLanguage_default_instance_;
class SiteLanguageArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SiteLanguageArray>
     _instance;
} _SiteLanguageArray_default_instance_;
class ParsedHtmlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParsedHtml>
     _instance;
} _ParsedHtml_default_instance_;
class MetaDescriptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetaDescription>
     _instance;
} _MetaDescription_default_instance_;
class ParsedDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParsedDoc>
     _instance;
} _ParsedDoc_default_instance_;
class StubDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StubDoc>
     _instance;
} _StubDoc_default_instance_;
class RegionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Region>
     _instance;
} _Region_default_instance_;
class RegionBlobDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionBlob>
     _instance;
} _RegionBlob_default_instance_;
class OriginalDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OriginalDoc>
     _instance;
} _OriginalDoc_default_instance_;

namespace protobuf_doc_5fparser_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, ignore_nofollow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, forumtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, downloadtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, bom_encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, flag_meta_robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalParsingData, forced_encoding_),
  0,
  5,
  1,
  2,
  6,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Links, flag_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureList, features_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionKV, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionKV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionKV, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionKV, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionList, region_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, address_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfoList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfoList, contacts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContext, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContext, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContextList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContextList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjContextList, contexts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileInfo, counter_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed_KeyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed_KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed_KeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed_KeyValue, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed_KeyValue, bvalues_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubjParsed, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, ctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, fullurl_),
  0,
  1,
  2,
  5,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromeImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromeImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromeImageInfo, imageinfo_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, spam_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, spam_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, contact_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, contacts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, subj_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, subj_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, subj_ctxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, soft_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, soft_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, subj_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, market_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, market_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, subj_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_score_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, spam_score_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_score2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_score2_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, porn_features2_),
  11,
  3,
  12,
  4,
  0,
  5,
  13,
  1,
  6,
  14,
  7,
  2,
  15,
  8,
  9,
  16,
  17,
  18,
  19,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLanguage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLanguage, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLanguage, estimation_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLangArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLangArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedLangArray, detected_lang_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguage, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguage, page_num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguageArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguageArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteLanguageArray, site_languages_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, canonical_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, flag_meta_robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, page_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, refresh_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, base_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, detlang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, description_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, flag_ajax_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, og_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, og_description_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, is_meta_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, og_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedHtml, og_title_),
  12,
  13,
  0,
  14,
  19,
  ~0u,
  1,
  2,
  3,
  10,
  4,
  11,
  5,
  6,
  15,
  16,
  7,
  17,
  18,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDescription, descritption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaDescription, description_quality_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedDoc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedDoc, html_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParsedDoc, profiling_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, scriptremoved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, content_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StubDoc, clean_size_),
  0,
  2,
  3,
  5,
  4,
  1,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, porno_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, spam_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalDoc, cuttedblob_),
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  8,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(AdditionalParsingData)},
  { 19, 27, sizeof(Links)},
  { 30, 37, sizeof(FeatureKV)},
  { 39, 45, sizeof(FeatureList)},
  { 46, 53, sizeof(RegionKV)},
  { 55, 61, sizeof(RegionList)},
  { 62, 69, sizeof(ContactInfo)},
  { 71, 77, sizeof(ContactInfoList)},
  { 78, 84, sizeof(SubjContext)},
  { 85, 91, sizeof(SubjContextList)},
  { 92, 99, sizeof(ProfileInfo)},
  { 101, 109, sizeof(SubjParsed_KeyValue)},
  { 112, 118, sizeof(SubjParsed)},
  { 119, 130, sizeof(ImageInfo)},
  { 136, 142, sizeof(ChromeImageInfo)},
  { 143, 168, sizeof(Features)},
  { 188, 195, sizeof(DetectedLanguage)},
  { 197, 203, sizeof(DetectedLangArray)},
  { 204, 211, sizeof(SiteLanguage)},
  { 213, 219, sizeof(SiteLanguageArray)},
  { 220, 246, sizeof(ParsedHtml)},
  { 267, 274, sizeof(MetaDescription)},
  { 276, 284, sizeof(ParsedDoc)},
  { 287, 301, sizeof(StubDoc)},
  { 310, 317, sizeof(Region)},
  { 319, 326, sizeof(RegionBlob)},
  { 328, 342, sizeof(OriginalDoc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdditionalParsingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Links_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureKV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionKV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContactInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContactInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubjContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubjContextList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubjParsed_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubjParsed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChromeImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectedLanguage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectedLangArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiteLanguage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SiteLanguageArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParsedHtml_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetaDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParsedDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StubDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OriginalDoc_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "doc_parser.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 27);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  _AdditionalParsingData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AdditionalParsingData_default_instance_);_Links_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Links_default_instance_);_FeatureKV_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureKV_default_instance_);_FeatureList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeatureList_default_instance_);_RegionKV_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionKV_default_instance_);_RegionList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionList_default_instance_);_ContactInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContactInfo_default_instance_);_ContactInfoList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContactInfoList_default_instance_);_SubjContext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubjContext_default_instance_);_SubjContextList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubjContextList_default_instance_);_ProfileInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileInfo_default_instance_);_SubjParsed_KeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubjParsed_KeyValue_default_instance_);_SubjParsed_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubjParsed_default_instance_);_ImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageInfo_default_instance_);_ChromeImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChromeImageInfo_default_instance_);_Features_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Features_default_instance_);_DetectedLanguage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DetectedLanguage_default_instance_);_DetectedLangArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DetectedLangArray_default_instance_);_SiteLanguage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiteLanguage_default_instance_);_SiteLanguageArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SiteLanguageArray_default_instance_);_ParsedHtml_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParsedHtml_default_instance_);_MetaDescription_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetaDescription_default_instance_);_ParsedDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParsedDoc_default_instance_);_StubDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StubDoc_default_instance_);_Region_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Region_default_instance_);_RegionBlob_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionBlob_default_instance_);_OriginalDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OriginalDoc_default_instance_);_ChromeImageInfo_default_instance_._instance.get_mutable()->imageinfo_ = const_cast< ::ru::mail::go::webbase::blobs::ImageInfo*>(
      ::ru::mail::go::webbase::blobs::ImageInfo::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->porn_features_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->spam_features_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->contacts_ = const_cast< ::ru::mail::go::webbase::blobs::ContactInfoList*>(
      ::ru::mail::go::webbase::blobs::ContactInfoList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->subj_ctxs_ = const_cast< ::ru::mail::go::webbase::blobs::SubjContextList*>(
      ::ru::mail::go::webbase::blobs::SubjContextList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->soft_features_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->market_features_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->subj_values_ = const_cast< ::ru::mail::go::webbase::blobs::SubjParsed*>(
      ::ru::mail::go::webbase::blobs::SubjParsed::internal_default_instance());
  _Features_default_instance_._instance.get_mutable()->porn_features2_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _ParsedHtml_default_instance_._instance.get_mutable()->features_ = const_cast< ::ru::mail::go::webbase::blobs::Features*>(
      ::ru::mail::go::webbase::blobs::Features::internal_default_instance());
  _ParsedHtml_default_instance_._instance.get_mutable()->detlang_ = const_cast< ::ru::mail::go::webbase::blobs::DetectedLangArray*>(
      ::ru::mail::go::webbase::blobs::DetectedLangArray::internal_default_instance());
  _ParsedDoc_default_instance_._instance.get_mutable()->html_info_ = const_cast< ::ru::mail::go::webbase::blobs::ParsedHtml*>(
      ::ru::mail::go::webbase::blobs::ParsedHtml::internal_default_instance());
  _OriginalDoc_default_instance_._instance.get_mutable()->cuttedblob_ = const_cast< ::ru::mail::go::webbase::blobs::RegionBlob*>(
      ::ru::mail::go::webbase::blobs::RegionBlob::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020doc_parser.proto\022\030ru.mail.go.webbase.b"
      "lobs\032\024document_enums.proto\"\371\002\n\025Additiona"
      "lParsingData\022\036\n\017ignore_nofollow\030\001 \001(\010:\005f"
      "alse\022C\n\010encoding\030\002 \001(\0162\".ru.mail.go.webb"
      "ase.blobs.Encoding:\renc_undefined\0226\n\tfor"
      "umType\030\003 \001(\0162#.ru.mail.go.webbase.blobs."
      "ForumType\022\024\n\014downloadTime\030\004 \001(\004\022G\n\014bom_e"
      "ncoding\030\005 \001(\0162\".ru.mail.go.webbase.blobs"
      ".Encoding:\renc_undefined\022\030\n\020flag_meta_ro"
      "bots\030\006 \001(\005\022J\n\017forced_encoding\030\007 \001(\0162\".ru"
      ".mail.go.webbase.blobs.Encoding:\renc_und"
      "efined\"\227\001\n\005Links\022\013\n\003url\030\001 \002(\t\022\014\n\004text\030\002 "
      "\001(\014\0226\n\004flag\030\003 \001(\0162(.ru.mail.go.webbase.b"
      "lobs.Links.typeFlag\";\n\010typeFlag\022\013\n\007no_ma"
      "rk\020\001\022\021\n\rwiki_nofollow\020\002\022\017\n\013from_iframe\020\003"
      "\"\'\n\tFeatureKV\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002("
      "\002\"D\n\013FeatureList\0225\n\010features\030\001 \003(\0132#.ru."
      "mail.go.webbase.blobs.FeatureKV\"&\n\010Regio"
      "nKV\022\013\n\003key\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"E\n\nRegio"
      "nList\0227\n\013region_info\030\001 \003(\0132\".ru.mail.go."
      "webbase.blobs.RegionKV\"-\n\013ContactInfo\022\r\n"
      "\005phone\030\001 \002(\t\022\017\n\007address\030\002 \002(\t\"J\n\017Contact"
      "InfoList\0227\n\010contacts\030\001 \003(\0132%.ru.mail.go."
      "webbase.blobs.ContactInfo\"\033\n\013SubjContext"
      "\022\014\n\004text\030\001 \002(\t\"J\n\017SubjContextList\0227\n\010con"
      "texts\030\001 \003(\0132%.ru.mail.go.webbase.blobs.S"
      "ubjContext\",\n\013ProfileInfo\022\014\n\004time\030\001 \002(\003\022"
      "\017\n\007counter\030\002 \001(\t\"\205\001\n\nSubjParsed\022=\n\006value"
      "s\030\001 \003(\0132-.ru.mail.go.webbase.blobs.SubjP"
      "arsed.KeyValue\0328\n\010KeyValue\022\013\n\003key\030\001 \002(\t\022"
      "\016\n\006values\030\002 \003(\t\022\017\n\007bvalues\030\003 \003(\014\"\225\001\n\tIma"
      "geInfo\022\013\n\003key\030\001 \002(\014\022\017\n\007content\030\002 \002(\014\022\014\n\004"
      "head\030\003 \002(\014\0224\n\005ctype\030\004 \002(\0162%.ru.mail.go.w"
      "ebbase.blobs.ContentType\022\025\n\rdownload_tim"
      "e\030\005 \001(\004\022\017\n\007fullUrl\030\006 \001(\t\"I\n\017ChromeImageI"
      "nfo\0226\n\timageInfo\030\001 \002(\0132#.ru.mail.go.webb"
      "ase.blobs.ImageInfo\"\322\007\n\010Features\022\022\n\nporn"
      "_score\030\001 \001(\r\022<\n\rporn_features\030\002 \001(\0132%.ru"
      ".mail.go.webbase.blobs.FeatureList\022=\n\nsp"
      "am_score\030\003 \001(\0162).ru.mail.go.webbase.blob"
      "s.Features.spam_t\022<\n\rspam_features\030\004 \001(\013"
      "2%.ru.mail.go.webbase.blobs.FeatureList\022"
      "\023\n\013contact_url\030\005 \001(\t\022;\n\010contacts\030\006 \001(\0132)"
      ".ru.mail.go.webbase.blobs.ContactInfoLis"
      "t\022=\n\nsubj_stage\030\007 \001(\0162).ru.mail.go.webba"
      "se.blobs.Features.subj_t\022\021\n\tsubj_name\030\010 "
      "\001(\t\022<\n\tsubj_ctxs\030\t \001(\0132).ru.mail.go.webb"
      "ase.blobs.SubjContextList\022\022\n\nsoft_score\030"
      "\n \001(\002\022<\n\rsoft_features\030\013 \001(\0132%.ru.mail.g"
      "o.webbase.blobs.FeatureList\022\021\n\tsubj_type"
      "\030\014 \001(\t\022\024\n\014market_score\030\r \001(\002\022>\n\017market_f"
      "eatures\030\016 \001(\0132%.ru.mail.go.webbase.blobs"
      ".FeatureList\0229\n\013subj_values\030\017 \001(\0132$.ru.m"
      "ail.go.webbase.blobs.SubjParsed\022\026\n\016porn_"
      "score_raw\030\020 \001(\002\022\026\n\016spam_score_raw\030\021 \001(\002\022"
      "\023\n\013porn_score2\030\022 \001(\r\022\027\n\017porn_score2_raw\030"
      "\023 \001(\002\022=\n\016porn_features2\030\024 \001(\0132%.ru.mail."
      "go.webbase.blobs.FeatureList\"6\n\006spam_t\022\013"
      "\n\007unknown\020\000\022\010\n\004spam\020\001\022\014\n\010not_spam\020\002\022\007\n\003b"
      "ad\020\003\"J\n\006subj_t\022\017\n\013not_related\020\000\022\016\n\nurl_p"
      "assed\020\001\022\017\n\013url_matched\020\002\022\016\n\nurl_parsed\020\003"
      "\"\\\n\020DetectedLanguage\0224\n\010language\030\001 \002(\0162\""
      ".ru.mail.go.webbase.blobs.Language\022\022\n\nes"
      "timation\030\002 \001(\001\"V\n\021DetectedLangArray\022A\n\rd"
      "etected_lang\030\001 \003(\0132*.ru.mail.go.webbase."
      "blobs.DetectedLanguage\"V\n\014SiteLanguage\0224"
      "\n\010language\030\001 \002(\0162\".ru.mail.go.webbase.bl"
      "obs.Language\022\020\n\010page_num\030\002 \002(\005\"S\n\021SiteLa"
      "nguageArray\022>\n\016site_languages\030\001 \003(\0132&.ru"
      ".mail.go.webbase.blobs.SiteLanguage\"\255\006\n\n"
      "ParsedHtml\0224\n\010language\030\001 \001(\0162\".ru.mail.g"
      "o.webbase.blobs.Language\0224\n\010encoding\030\002 \001"
      "(\0162\".ru.mail.go.webbase.blobs.Encoding\022\026"
      "\n\016canonical_link\030\003 \001(\t\022\030\n\020flag_meta_robo"
      "ts\030\004 \001(\005\022D\n\npage_error\030\005 \001(\01620.ru.mail.g"
      "o.webbase.blobs.ParsedHtml.page_errors\022."
      "\n\005links\030\006 \003(\0132\037.ru.mail.go.webbase.blobs"
      ".Links\022\024\n\014refresh_link\030\007 \001(\t\022\024\n\014refresh_"
      "time\030\010 \001(\t\022\021\n\tbase_link\030\t \001(\t\0224\n\010feature"
      "s\030\n \001(\0132\".ru.mail.go.webbase.blobs.Featu"
      "res\022\014\n\004text\030\013 \001(\014\022<\n\007detLang\030\014 \001(\0132+.ru."
      "mail.go.webbase.blobs.DetectedLangArray\022"
      "\r\n\005title\030\r \001(\014\022\023\n\013description\030\016 \001(\014\022\033\n\023d"
      "escription_quality\030\017 \001(\010\022\032\n\022flag_ajax_fr"
      "agment\030\020 \001(\010\022\026\n\016og_description\030\021 \001(\014\022\036\n\026"
      "og_description_quality\030\022 \001(\010\022\036\n\017is_meta_"
      "content\030\023 \001(\010:\005false\022\020\n\010og_image\030\024 \001(\014\022\020"
      "\n\010og_title\030\025 \001(\014\"q\n\013page_errors\022\t\n\005is_ok"
      "\020\001\022\013\n\007is_spam\020\002\022\025\n\021bad_url_normalize\020\003\022\017"
      "\n\013has_refresh\020\004\022\021\n\rhas_canonical\020\005\022\017\n\013ba"
      "d_parsing\020\006\"D\n\017MetaDescription\022\024\n\014descri"
      "tption\030\001 \001(\014\022\033\n\023description_quality\030\002 \001("
      "\010\"\263\001\n\tParsedDoc\0223\n\004type\030\001 \002(\0162%.ru.mail."
      "go.webbase.blobs.ContentType\0227\n\thtml_inf"
      "o\030\002 \001(\0132$.ru.mail.go.webbase.blobs.Parse"
      "dHtml\0228\n\tprofiling\030\003 \003(\0132%.ru.mail.go.we"
      "bbase.blobs.ProfileInfo\"\240\002\n\007StubDoc\022\013\n\003u"
      "rl\030\001 \002(\t\0223\n\004type\030\002 \001(\0162%.ru.mail.go.webb"
      "ase.blobs.ContentType\0224\n\010language\030\003 \001(\0162"
      "\".ru.mail.go.webbase.blobs.Language\0224\n\010e"
      "ncoding\030\004 \001(\0162\".ru.mail.go.webbase.blobs"
      ".Encoding\022\025\n\rdownload_time\030\005 \001(\004\022\017\n\007cont"
      "ent\030\006 \001(\014\022\025\n\rscriptRemoved\030\007 \001(\010\022\024\n\014cont"
      "ent_size\030\010 \001(\r\022\022\n\nclean_size\030\t \001(\r\"$\n\006Re"
      "gion\022\r\n\005start\030\001 \002(\005\022\013\n\003end\030\002 \002(\005\"I\n\nRegi"
      "onBlob\022\013\n\003num\030\001 \002(\005\022.\n\004data\030\002 \003(\0132 .ru.m"
      "ail.go.webbase.blobs.Region\"\306\002\n\013Original"
      "Doc\022\013\n\003url\030\001 \002(\t\022\025\n\rdownload_time\030\002 \002(\004\022"
      "\017\n\007content\030\003 \001(\014\0223\n\004type\030\004 \001(\0162%.ru.mail"
      ".go.webbase.blobs.ContentType\0224\n\010languag"
      "e\030\005 \001(\0162\".ru.mail.go.webbase.blobs.Langu"
      "age\0224\n\010encoding\030\006 \001(\0162\".ru.mail.go.webba"
      "se.blobs.Encoding\022\023\n\013porno_level\030\007 \001(\r\022\022"
      "\n\nspam_level\030\010 \001(\r\0228\n\ncuttedBlob\030\t \001(\0132$"
      ".ru.mail.go.webbase.blobs.RegionBlobB\020B\016"
      "DocParserBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "doc_parser.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_doc_5fparser_2eproto

const ::google::protobuf::EnumDescriptor* Links_typeFlag_descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_enum_descriptors[0];
}
bool Links_typeFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Links_typeFlag Links::no_mark;
const Links_typeFlag Links::wiki_nofollow;
const Links_typeFlag Links::from_iframe;
const Links_typeFlag Links::typeFlag_MIN;
const Links_typeFlag Links::typeFlag_MAX;
const int Links::typeFlag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Features_spam_t_descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_enum_descriptors[1];
}
bool Features_spam_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Features_spam_t Features::unknown;
const Features_spam_t Features::spam;
const Features_spam_t Features::not_spam;
const Features_spam_t Features::bad;
const Features_spam_t Features::spam_t_MIN;
const Features_spam_t Features::spam_t_MAX;
const int Features::spam_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Features_subj_t_descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_enum_descriptors[2];
}
bool Features_subj_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Features_subj_t Features::not_related;
const Features_subj_t Features::url_passed;
const Features_subj_t Features::url_matched;
const Features_subj_t Features::url_parsed;
const Features_subj_t Features::subj_t_MIN;
const Features_subj_t Features::subj_t_MAX;
const int Features::subj_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParsedHtml_page_errors_descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_enum_descriptors[3];
}
bool ParsedHtml_page_errors_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParsedHtml_page_errors ParsedHtml::is_ok;
const ParsedHtml_page_errors ParsedHtml::is_spam;
const ParsedHtml_page_errors ParsedHtml::bad_url_normalize;
const ParsedHtml_page_errors ParsedHtml::has_refresh;
const ParsedHtml_page_errors ParsedHtml::has_canonical;
const ParsedHtml_page_errors ParsedHtml::bad_parsing;
const ParsedHtml_page_errors ParsedHtml::page_errors_MIN;
const ParsedHtml_page_errors ParsedHtml::page_errors_MAX;
const int ParsedHtml::page_errors_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdditionalParsingData::kIgnoreNofollowFieldNumber;
const int AdditionalParsingData::kEncodingFieldNumber;
const int AdditionalParsingData::kForumTypeFieldNumber;
const int AdditionalParsingData::kDownloadTimeFieldNumber;
const int AdditionalParsingData::kBomEncodingFieldNumber;
const int AdditionalParsingData::kFlagMetaRobotsFieldNumber;
const int AdditionalParsingData::kForcedEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdditionalParsingData::AdditionalParsingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.AdditionalParsingData)
}
AdditionalParsingData::AdditionalParsingData(const AdditionalParsingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_nofollow_, &from.ignore_nofollow_,
    static_cast<size_t>(reinterpret_cast<char*>(&bom_encoding_) -
    reinterpret_cast<char*>(&ignore_nofollow_)) + sizeof(bom_encoding_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.AdditionalParsingData)
}

void AdditionalParsingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ignore_nofollow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_meta_robots_) -
      reinterpret_cast<char*>(&ignore_nofollow_)) + sizeof(flag_meta_robots_));
  forced_encoding_ = 99;
  encoding_ = 99;
  bom_encoding_ = 99;
}

AdditionalParsingData::~AdditionalParsingData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.AdditionalParsingData)
  SharedDtor();
}

void AdditionalParsingData::SharedDtor() {
}

void AdditionalParsingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalParsingData::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdditionalParsingData& AdditionalParsingData::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdditionalParsingData* AdditionalParsingData::New(::google::protobuf::Arena* arena) const {
  AdditionalParsingData* n = new AdditionalParsingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdditionalParsingData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&ignore_nofollow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_meta_robots_) -
        reinterpret_cast<char*>(&ignore_nofollow_)) + sizeof(flag_meta_robots_));
    forced_encoding_ = 99;
    encoding_ = 99;
    bom_encoding_ = 99;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdditionalParsingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ignore_nofollow = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ignore_nofollow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_nofollow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2 [default = enc_undefined];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ForumType forumType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ForumType_IsValid(value)) {
            set_forumtype(static_cast< ::ru::mail::go::webbase::blobs::ForumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 downloadTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_downloadtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downloadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding bom_encoding = 5 [default = enc_undefined];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_bom_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag_meta_robots = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_flag_meta_robots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_meta_robots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding forced_encoding = 7 [default = enc_undefined];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_forced_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.AdditionalParsingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.AdditionalParsingData)
  return false;
#undef DO_
}

void AdditionalParsingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_nofollow = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ignore_nofollow(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2 [default = enc_undefined];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->forumtype(), output);
  }

  // optional uint64 downloadTime = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->downloadtime(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding bom_encoding = 5 [default = enc_undefined];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bom_encoding(), output);
  }

  // optional int32 flag_meta_robots = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flag_meta_robots(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding forced_encoding = 7 [default = enc_undefined];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->forced_encoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.AdditionalParsingData)
}

::google::protobuf::uint8* AdditionalParsingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_nofollow = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ignore_nofollow(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2 [default = enc_undefined];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->forumtype(), target);
  }

  // optional uint64 downloadTime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->downloadtime(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding bom_encoding = 5 [default = enc_undefined];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bom_encoding(), target);
  }

  // optional int32 flag_meta_robots = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flag_meta_robots(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding forced_encoding = 7 [default = enc_undefined];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->forced_encoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.AdditionalParsingData)
  return target;
}

size_t AdditionalParsingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool ignore_nofollow = 1 [default = false];
    if (has_ignore_nofollow()) {
      total_size += 1 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.ForumType forumType = 3;
    if (has_forumtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forumtype());
    }

    // optional uint64 downloadTime = 4;
    if (has_downloadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->downloadtime());
    }

    // optional int32 flag_meta_robots = 6;
    if (has_flag_meta_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_meta_robots());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding forced_encoding = 7 [default = enc_undefined];
    if (has_forced_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forced_encoding());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2 [default = enc_undefined];
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding bom_encoding = 5 [default = enc_undefined];
    if (has_bom_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bom_encoding());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalParsingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalParsingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdditionalParsingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.AdditionalParsingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.AdditionalParsingData)
    MergeFrom(*source);
  }
}

void AdditionalParsingData::MergeFrom(const AdditionalParsingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_nofollow_ = from.ignore_nofollow_;
    }
    if (cached_has_bits & 0x00000002u) {
      forumtype_ = from.forumtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      downloadtime_ = from.downloadtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_meta_robots_ = from.flag_meta_robots_;
    }
    if (cached_has_bits & 0x00000010u) {
      forced_encoding_ = from.forced_encoding_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000040u) {
      bom_encoding_ = from.bom_encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdditionalParsingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalParsingData::CopyFrom(const AdditionalParsingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.AdditionalParsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalParsingData::IsInitialized() const {
  return true;
}

void AdditionalParsingData::Swap(AdditionalParsingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdditionalParsingData::InternalSwap(AdditionalParsingData* other) {
  using std::swap;
  swap(ignore_nofollow_, other->ignore_nofollow_);
  swap(forumtype_, other->forumtype_);
  swap(downloadtime_, other->downloadtime_);
  swap(flag_meta_robots_, other->flag_meta_robots_);
  swap(forced_encoding_, other->forced_encoding_);
  swap(encoding_, other->encoding_);
  swap(bom_encoding_, other->bom_encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdditionalParsingData::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdditionalParsingData

// optional bool ignore_nofollow = 1 [default = false];
bool AdditionalParsingData::has_ignore_nofollow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdditionalParsingData::set_has_ignore_nofollow() {
  _has_bits_[0] |= 0x00000001u;
}
void AdditionalParsingData::clear_has_ignore_nofollow() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdditionalParsingData::clear_ignore_nofollow() {
  ignore_nofollow_ = false;
  clear_has_ignore_nofollow();
}
bool AdditionalParsingData::ignore_nofollow() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.ignore_nofollow)
  return ignore_nofollow_;
}
void AdditionalParsingData::set_ignore_nofollow(bool value) {
  set_has_ignore_nofollow();
  ignore_nofollow_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.ignore_nofollow)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 2 [default = enc_undefined];
bool AdditionalParsingData::has_encoding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AdditionalParsingData::set_has_encoding() {
  _has_bits_[0] |= 0x00000020u;
}
void AdditionalParsingData::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000020u;
}
void AdditionalParsingData::clear_encoding() {
  encoding_ = 99;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding AdditionalParsingData::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void AdditionalParsingData::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.encoding)
}

// optional .ru.mail.go.webbase.blobs.ForumType forumType = 3;
bool AdditionalParsingData::has_forumtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdditionalParsingData::set_has_forumtype() {
  _has_bits_[0] |= 0x00000002u;
}
void AdditionalParsingData::clear_has_forumtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdditionalParsingData::clear_forumtype() {
  forumtype_ = 0;
  clear_has_forumtype();
}
::ru::mail::go::webbase::blobs::ForumType AdditionalParsingData::forumtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.forumType)
  return static_cast< ::ru::mail::go::webbase::blobs::ForumType >(forumtype_);
}
void AdditionalParsingData::set_forumtype(::ru::mail::go::webbase::blobs::ForumType value) {
  assert(::ru::mail::go::webbase::blobs::ForumType_IsValid(value));
  set_has_forumtype();
  forumtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.forumType)
}

// optional uint64 downloadTime = 4;
bool AdditionalParsingData::has_downloadtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdditionalParsingData::set_has_downloadtime() {
  _has_bits_[0] |= 0x00000004u;
}
void AdditionalParsingData::clear_has_downloadtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdditionalParsingData::clear_downloadtime() {
  downloadtime_ = GOOGLE_ULONGLONG(0);
  clear_has_downloadtime();
}
::google::protobuf::uint64 AdditionalParsingData::downloadtime() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.downloadTime)
  return downloadtime_;
}
void AdditionalParsingData::set_downloadtime(::google::protobuf::uint64 value) {
  set_has_downloadtime();
  downloadtime_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.downloadTime)
}

// optional .ru.mail.go.webbase.blobs.Encoding bom_encoding = 5 [default = enc_undefined];
bool AdditionalParsingData::has_bom_encoding() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AdditionalParsingData::set_has_bom_encoding() {
  _has_bits_[0] |= 0x00000040u;
}
void AdditionalParsingData::clear_has_bom_encoding() {
  _has_bits_[0] &= ~0x00000040u;
}
void AdditionalParsingData::clear_bom_encoding() {
  bom_encoding_ = 99;
  clear_has_bom_encoding();
}
::ru::mail::go::webbase::blobs::Encoding AdditionalParsingData::bom_encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.bom_encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(bom_encoding_);
}
void AdditionalParsingData::set_bom_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_bom_encoding();
  bom_encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.bom_encoding)
}

// optional int32 flag_meta_robots = 6;
bool AdditionalParsingData::has_flag_meta_robots() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdditionalParsingData::set_has_flag_meta_robots() {
  _has_bits_[0] |= 0x00000008u;
}
void AdditionalParsingData::clear_has_flag_meta_robots() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdditionalParsingData::clear_flag_meta_robots() {
  flag_meta_robots_ = 0;
  clear_has_flag_meta_robots();
}
::google::protobuf::int32 AdditionalParsingData::flag_meta_robots() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.flag_meta_robots)
  return flag_meta_robots_;
}
void AdditionalParsingData::set_flag_meta_robots(::google::protobuf::int32 value) {
  set_has_flag_meta_robots();
  flag_meta_robots_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.flag_meta_robots)
}

// optional .ru.mail.go.webbase.blobs.Encoding forced_encoding = 7 [default = enc_undefined];
bool AdditionalParsingData::has_forced_encoding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AdditionalParsingData::set_has_forced_encoding() {
  _has_bits_[0] |= 0x00000010u;
}
void AdditionalParsingData::clear_has_forced_encoding() {
  _has_bits_[0] &= ~0x00000010u;
}
void AdditionalParsingData::clear_forced_encoding() {
  forced_encoding_ = 99;
  clear_has_forced_encoding();
}
::ru::mail::go::webbase::blobs::Encoding AdditionalParsingData::forced_encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AdditionalParsingData.forced_encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(forced_encoding_);
}
void AdditionalParsingData::set_forced_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_forced_encoding();
  forced_encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AdditionalParsingData.forced_encoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Links::kUrlFieldNumber;
const int Links::kTextFieldNumber;
const int Links::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Links::Links()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Links)
}
Links::Links(const Links& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Links)
}

void Links::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 1;
}

Links::~Links() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Links)
  SharedDtor();
}

void Links::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Links::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Links& Links::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

Links* Links::New(::google::protobuf::Arena* arena) const {
  Links* n = new Links;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Links::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    flag_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Links)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Links.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Links.typeFlag flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Links_typeFlag_IsValid(value)) {
            set_flag(static_cast< ::ru::mail::go::webbase::blobs::Links_typeFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Links)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Links)
  return false;
#undef DO_
}

void Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Links.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional bytes text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->text(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Links.typeFlag flag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Links)
}

::google::protobuf::uint8* Links::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Links.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional bytes text = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->text(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Links.typeFlag flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Links)
  return target;
}

size_t Links::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Links)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // optional .ru.mail.go.webbase.blobs.Links.typeFlag flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Links::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const Links* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Links>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Links)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Links)
    MergeFrom(*source);
  }
}

void Links::MergeFrom(const Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Links::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Links::CopyFrom(const Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Links::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Links::Swap(Links* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Links::InternalSwap(Links* other) {
  using std::swap;
  url_.Swap(&other->url_);
  text_.Swap(&other->text_);
  swap(flag_, other->flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Links::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Links

// required string url = 1;
bool Links::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Links::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Links::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Links::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Links::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Links.url)
  return url_.GetNoArena();
}
void Links::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Links.url)
}
#if LANG_CXX11
void Links::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Links.url)
}
#endif
void Links::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Links.url)
}
void Links::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Links.url)
}
::std::string* Links::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Links.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Links::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Links.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Links::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Links.url)
}

// optional bytes text = 2;
bool Links::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Links::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Links::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Links::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Links::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Links.text)
  return text_.GetNoArena();
}
void Links::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Links.text)
}
#if LANG_CXX11
void Links::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Links.text)
}
#endif
void Links::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Links.text)
}
void Links::set_text(const void* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Links.text)
}
::std::string* Links::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Links.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Links::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Links.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Links::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Links.text)
}

// optional .ru.mail.go.webbase.blobs.Links.typeFlag flag = 3;
bool Links::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Links::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void Links::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void Links::clear_flag() {
  flag_ = 1;
  clear_has_flag();
}
::ru::mail::go::webbase::blobs::Links_typeFlag Links::flag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Links.flag)
  return static_cast< ::ru::mail::go::webbase::blobs::Links_typeFlag >(flag_);
}
void Links::set_flag(::ru::mail::go::webbase::blobs::Links_typeFlag value) {
  assert(::ru::mail::go::webbase::blobs::Links_typeFlag_IsValid(value));
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Links.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureKV::kKeyFieldNumber;
const int FeatureKV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureKV::FeatureKV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FeatureKV)
}
FeatureKV::FeatureKV(const FeatureKV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FeatureKV)
}

void FeatureKV::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

FeatureKV::~FeatureKV() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FeatureKV)
  SharedDtor();
}

void FeatureKV::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeatureKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureKV::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureKV& FeatureKV::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureKV* FeatureKV::New(::google::protobuf::Arena* arena) const {
  FeatureKV* n = new FeatureKV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureKV::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FeatureKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FeatureKV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FeatureKV.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FeatureKV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FeatureKV)
  return false;
#undef DO_
}

void FeatureKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FeatureKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FeatureKV.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FeatureKV)
}

::google::protobuf::uint8* FeatureKV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FeatureKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FeatureKV.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FeatureKV)
  return target;
}

size_t FeatureKV::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.FeatureKV)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required float value = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FeatureKV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FeatureKV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required float value = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureKV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FeatureKV)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureKV* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureKV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FeatureKV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FeatureKV)
    MergeFrom(*source);
  }
}

void FeatureKV::MergeFrom(const FeatureKV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FeatureKV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureKV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FeatureKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureKV::CopyFrom(const FeatureKV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FeatureKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureKV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FeatureKV::Swap(FeatureKV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureKV::InternalSwap(FeatureKV* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureKV::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureKV

// required string key = 1;
bool FeatureKV::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureKV::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureKV::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureKV::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& FeatureKV::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FeatureKV.key)
  return key_.GetNoArena();
}
void FeatureKV::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FeatureKV.key)
}
#if LANG_CXX11
void FeatureKV::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FeatureKV.key)
}
#endif
void FeatureKV::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FeatureKV.key)
}
void FeatureKV::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FeatureKV.key)
}
::std::string* FeatureKV::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FeatureKV.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureKV::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FeatureKV.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureKV::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FeatureKV.key)
}

// required float value = 2;
bool FeatureKV::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureKV::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureKV::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureKV::clear_value() {
  value_ = 0;
  clear_has_value();
}
float FeatureKV::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FeatureKV.value)
  return value_;
}
void FeatureKV::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FeatureKV.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureList::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureList::FeatureList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FeatureList)
}
FeatureList::FeatureList(const FeatureList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FeatureList)
}

void FeatureList::SharedCtor() {
  _cached_size_ = 0;
}

FeatureList::~FeatureList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FeatureList)
  SharedDtor();
}

void FeatureList::SharedDtor() {
}

void FeatureList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureList::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureList& FeatureList::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureList* FeatureList::New(::google::protobuf::Arena* arena) const {
  FeatureList* n = new FeatureList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FeatureList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FeatureList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.FeatureKV features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FeatureList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FeatureList)
  return false;
#undef DO_
}

void FeatureList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FeatureList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.FeatureKV features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->features(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FeatureList)
}

::google::protobuf::uint8* FeatureList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FeatureList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.FeatureKV features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->features(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FeatureList)
  return target;
}

size_t FeatureList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FeatureList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.FeatureKV features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FeatureList)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FeatureList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FeatureList)
    MergeFrom(*source);
  }
}

void FeatureList::MergeFrom(const FeatureList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FeatureList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
}

void FeatureList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureList::CopyFrom(const FeatureList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void FeatureList::Swap(FeatureList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureList::InternalSwap(FeatureList* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureList::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureList

// repeated .ru.mail.go.webbase.blobs.FeatureKV features = 1;
int FeatureList::features_size() const {
  return features_.size();
}
void FeatureList::clear_features() {
  features_.Clear();
}
const ::ru::mail::go::webbase::blobs::FeatureKV& FeatureList::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FeatureList.features)
  return features_.Get(index);
}
::ru::mail::go::webbase::blobs::FeatureKV* FeatureList::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FeatureList.features)
  return features_.Mutable(index);
}
::ru::mail::go::webbase::blobs::FeatureKV* FeatureList::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FeatureList.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::FeatureKV >*
FeatureList::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FeatureList.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::FeatureKV >&
FeatureList::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FeatureList.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionKV::kKeyFieldNumber;
const int RegionKV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionKV::RegionKV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RegionKV)
}
RegionKV::RegionKV(const RegionKV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RegionKV)
}

void RegionKV::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

RegionKV::~RegionKV() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RegionKV)
  SharedDtor();
}

void RegionKV::SharedDtor() {
}

void RegionKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionKV::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionKV& RegionKV::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionKV* RegionKV::New(::google::protobuf::Arena* arena) const {
  RegionKV* n = new RegionKV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionKV::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RegionKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RegionKV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RegionKV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RegionKV)
  return false;
#undef DO_
}

void RegionKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RegionKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RegionKV)
}

::google::protobuf::uint8* RegionKV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RegionKV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RegionKV)
  return target;
}

size_t RegionKV::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.RegionKV)
  size_t total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t RegionKV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RegionKV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionKV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RegionKV)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionKV* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionKV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RegionKV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RegionKV)
    MergeFrom(*source);
  }
}

void RegionKV::MergeFrom(const RegionKV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RegionKV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionKV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RegionKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionKV::CopyFrom(const RegionKV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RegionKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionKV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RegionKV::Swap(RegionKV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionKV::InternalSwap(RegionKV* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionKV::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionKV

// required int32 key = 1;
bool RegionKV::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionKV::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionKV::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionKV::clear_key() {
  key_ = 0;
  clear_has_key();
}
::google::protobuf::int32 RegionKV::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RegionKV.key)
  return key_;
}
void RegionKV::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RegionKV.key)
}

// required int32 value = 2;
bool RegionKV::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionKV::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionKV::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionKV::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 RegionKV::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RegionKV.value)
  return value_;
}
void RegionKV::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RegionKV.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionList::kRegionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionList::RegionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RegionList)
}
RegionList::RegionList(const RegionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      region_info_(from.region_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RegionList)
}

void RegionList::SharedCtor() {
  _cached_size_ = 0;
}

RegionList::~RegionList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RegionList)
  SharedDtor();
}

void RegionList::SharedDtor() {
}

void RegionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionList::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionList& RegionList::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionList* RegionList::New(::google::protobuf::Arena* arena) const {
  RegionList* n = new RegionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RegionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RegionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.RegionKV region_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RegionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RegionList)
  return false;
#undef DO_
}

void RegionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RegionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.RegionKV region_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RegionList)
}

::google::protobuf::uint8* RegionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RegionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.RegionKV region_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->region_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RegionList)
  return target;
}

size_t RegionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RegionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.RegionKV region_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RegionList)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RegionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RegionList)
    MergeFrom(*source);
  }
}

void RegionList::MergeFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RegionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_info_.MergeFrom(from.region_info_);
}

void RegionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionList::CopyFrom(const RegionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RegionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->region_info())) return false;
  return true;
}

void RegionList::Swap(RegionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionList::InternalSwap(RegionList* other) {
  using std::swap;
  region_info_.InternalSwap(&other->region_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionList::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionList

// repeated .ru.mail.go.webbase.blobs.RegionKV region_info = 1;
int RegionList::region_info_size() const {
  return region_info_.size();
}
void RegionList::clear_region_info() {
  region_info_.Clear();
}
const ::ru::mail::go::webbase::blobs::RegionKV& RegionList::region_info(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RegionList.region_info)
  return region_info_.Get(index);
}
::ru::mail::go::webbase::blobs::RegionKV* RegionList::mutable_region_info(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RegionList.region_info)
  return region_info_.Mutable(index);
}
::ru::mail::go::webbase::blobs::RegionKV* RegionList::add_region_info() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.RegionList.region_info)
  return region_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::RegionKV >*
RegionList::mutable_region_info() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.RegionList.region_info)
  return &region_info_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::RegionKV >&
RegionList::region_info() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.RegionList.region_info)
  return region_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactInfo::kPhoneFieldNumber;
const int ContactInfo::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactInfo::ContactInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ContactInfo)
}
ContactInfo::ContactInfo(const ContactInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone()) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ContactInfo)
}

void ContactInfo::SharedCtor() {
  _cached_size_ = 0;
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContactInfo::~ContactInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ContactInfo)
  SharedDtor();
}

void ContactInfo::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactInfo::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContactInfo& ContactInfo::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContactInfo* ContactInfo::New(::google::protobuf::Arena* arena) const {
  ContactInfo* n = new ContactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!phone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ContactInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ContactInfo.phone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ContactInfo.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ContactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ContactInfo)
  return false;
#undef DO_
}

void ContactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string phone = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ContactInfo.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // required string address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ContactInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ContactInfo)
}

::google::protobuf::uint8* ContactInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ContactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string phone = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ContactInfo.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone(), target);
  }

  // required string address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ContactInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ContactInfo)
  return target;
}

size_t ContactInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ContactInfo)
  size_t total_size = 0;

  if (has_phone()) {
    // required string phone = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  if (has_address()) {
    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  return total_size;
}
size_t ContactInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ContactInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string phone = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());

    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ContactInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ContactInfo)
    MergeFrom(*source);
  }
}

void ContactInfo::MergeFrom(const ContactInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ContactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
  }
}

void ContactInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactInfo::CopyFrom(const ContactInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ContactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ContactInfo::Swap(ContactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactInfo::InternalSwap(ContactInfo* other) {
  using std::swap;
  phone_.Swap(&other->phone_);
  address_.Swap(&other->address_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactInfo::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactInfo

// required string phone = 1;
bool ContactInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& ContactInfo::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ContactInfo.phone)
  return phone_.GetNoArena();
}
void ContactInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ContactInfo.phone)
}
#if LANG_CXX11
void ContactInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ContactInfo.phone)
}
#endif
void ContactInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ContactInfo.phone)
}
void ContactInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ContactInfo.phone)
}
::std::string* ContactInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ContactInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactInfo::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ContactInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ContactInfo.phone)
}

// required string address = 2;
bool ContactInfo::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactInfo::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& ContactInfo::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ContactInfo.address)
  return address_.GetNoArena();
}
void ContactInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ContactInfo.address)
}
#if LANG_CXX11
void ContactInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ContactInfo.address)
}
#endif
void ContactInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ContactInfo.address)
}
void ContactInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ContactInfo.address)
}
::std::string* ContactInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ContactInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactInfo::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ContactInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ContactInfo.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactInfoList::kContactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactInfoList::ContactInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ContactInfoList)
}
ContactInfoList::ContactInfoList(const ContactInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contacts_(from.contacts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ContactInfoList)
}

void ContactInfoList::SharedCtor() {
  _cached_size_ = 0;
}

ContactInfoList::~ContactInfoList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ContactInfoList)
  SharedDtor();
}

void ContactInfoList::SharedDtor() {
}

void ContactInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactInfoList::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContactInfoList& ContactInfoList::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContactInfoList* ContactInfoList::New(::google::protobuf::Arena* arena) const {
  ContactInfoList* n = new ContactInfoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ContactInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contacts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContactInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ContactInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.ContactInfo contacts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ContactInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ContactInfoList)
  return false;
#undef DO_
}

void ContactInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ContactInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ContactInfo contacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contacts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contacts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ContactInfoList)
}

::google::protobuf::uint8* ContactInfoList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ContactInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ContactInfo contacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contacts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->contacts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ContactInfoList)
  return target;
}

size_t ContactInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ContactInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.ContactInfo contacts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->contacts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contacts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ContactInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactInfoList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactInfoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ContactInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ContactInfoList)
    MergeFrom(*source);
  }
}

void ContactInfoList::MergeFrom(const ContactInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ContactInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contacts_.MergeFrom(from.contacts_);
}

void ContactInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ContactInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactInfoList::CopyFrom(const ContactInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ContactInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfoList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->contacts())) return false;
  return true;
}

void ContactInfoList::Swap(ContactInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactInfoList::InternalSwap(ContactInfoList* other) {
  using std::swap;
  contacts_.InternalSwap(&other->contacts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactInfoList::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactInfoList

// repeated .ru.mail.go.webbase.blobs.ContactInfo contacts = 1;
int ContactInfoList::contacts_size() const {
  return contacts_.size();
}
void ContactInfoList::clear_contacts() {
  contacts_.Clear();
}
const ::ru::mail::go::webbase::blobs::ContactInfo& ContactInfoList::contacts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ContactInfoList.contacts)
  return contacts_.Get(index);
}
::ru::mail::go::webbase::blobs::ContactInfo* ContactInfoList::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ContactInfoList.contacts)
  return contacts_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ContactInfo* ContactInfoList::add_contacts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ContactInfoList.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ContactInfo >*
ContactInfoList::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ContactInfoList.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ContactInfo >&
ContactInfoList::contacts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ContactInfoList.contacts)
  return contacts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubjContext::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubjContext::SubjContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SubjContext)
}
SubjContext::SubjContext(const SubjContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SubjContext)
}

void SubjContext::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubjContext::~SubjContext() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SubjContext)
  SharedDtor();
}

void SubjContext::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubjContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubjContext::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubjContext& SubjContext::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubjContext* SubjContext::New(::google::protobuf::Arena* arena) const {
  SubjContext* n = new SubjContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubjContext::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SubjContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubjContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SubjContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SubjContext.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SubjContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SubjContext)
  return false;
#undef DO_
}

void SubjContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SubjContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjContext.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SubjContext)
}

::google::protobuf::uint8* SubjContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SubjContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjContext.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SubjContext)
  return target;
}

size_t SubjContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SubjContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubjContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SubjContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SubjContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubjContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SubjContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SubjContext)
    MergeFrom(*source);
  }
}

void SubjContext::MergeFrom(const SubjContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SubjContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void SubjContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SubjContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubjContext::CopyFrom(const SubjContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SubjContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubjContext::Swap(SubjContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubjContext::InternalSwap(SubjContext* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubjContext::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubjContext

// required string text = 1;
bool SubjContext::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubjContext::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void SubjContext::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubjContext::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& SubjContext::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjContext.text)
  return text_.GetNoArena();
}
void SubjContext::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjContext.text)
}
#if LANG_CXX11
void SubjContext::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SubjContext.text)
}
#endif
void SubjContext::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SubjContext.text)
}
void SubjContext::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SubjContext.text)
}
::std::string* SubjContext::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjContext.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubjContext::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SubjContext.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubjContext::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SubjContext.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubjContextList::kContextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubjContextList::SubjContextList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SubjContextList)
}
SubjContextList::SubjContextList(const SubjContextList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      contexts_(from.contexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SubjContextList)
}

void SubjContextList::SharedCtor() {
  _cached_size_ = 0;
}

SubjContextList::~SubjContextList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SubjContextList)
  SharedDtor();
}

void SubjContextList::SharedDtor() {
}

void SubjContextList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubjContextList::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubjContextList& SubjContextList::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubjContextList* SubjContextList::New(::google::protobuf::Arena* arena) const {
  SubjContextList* n = new SubjContextList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubjContextList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SubjContextList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contexts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubjContextList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SubjContextList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SubjContext contexts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SubjContextList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SubjContextList)
  return false;
#undef DO_
}

void SubjContextList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SubjContextList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SubjContext contexts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contexts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SubjContextList)
}

::google::protobuf::uint8* SubjContextList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SubjContextList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SubjContext contexts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->contexts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SubjContextList)
  return target;
}

size_t SubjContextList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SubjContextList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SubjContext contexts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contexts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubjContextList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SubjContextList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubjContextList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubjContextList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SubjContextList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SubjContextList)
    MergeFrom(*source);
  }
}

void SubjContextList::MergeFrom(const SubjContextList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SubjContextList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contexts_.MergeFrom(from.contexts_);
}

void SubjContextList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SubjContextList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubjContextList::CopyFrom(const SubjContextList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SubjContextList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjContextList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->contexts())) return false;
  return true;
}

void SubjContextList::Swap(SubjContextList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubjContextList::InternalSwap(SubjContextList* other) {
  using std::swap;
  contexts_.InternalSwap(&other->contexts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubjContextList::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubjContextList

// repeated .ru.mail.go.webbase.blobs.SubjContext contexts = 1;
int SubjContextList::contexts_size() const {
  return contexts_.size();
}
void SubjContextList::clear_contexts() {
  contexts_.Clear();
}
const ::ru::mail::go::webbase::blobs::SubjContext& SubjContextList::contexts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjContextList.contexts)
  return contexts_.Get(index);
}
::ru::mail::go::webbase::blobs::SubjContext* SubjContextList::mutable_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjContextList.contexts)
  return contexts_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SubjContext* SubjContextList::add_contexts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjContextList.contexts)
  return contexts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SubjContext >*
SubjContextList::mutable_contexts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SubjContextList.contexts)
  return &contexts_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SubjContext >&
SubjContextList::contexts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SubjContextList.contexts)
  return contexts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileInfo::kTimeFieldNumber;
const int ProfileInfo::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileInfo::ProfileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ProfileInfo)
}
ProfileInfo::ProfileInfo(const ProfileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  counter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_counter()) {
    counter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counter_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ProfileInfo)
}

void ProfileInfo::SharedCtor() {
  _cached_size_ = 0;
  counter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
}

ProfileInfo::~ProfileInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ProfileInfo)
  SharedDtor();
}

void ProfileInfo::SharedDtor() {
  counter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileInfo::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileInfo& ProfileInfo::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileInfo* ProfileInfo::New(::google::protobuf::Arena* arena) const {
  ProfileInfo* n = new ProfileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_counter()) {
    GOOGLE_DCHECK(!counter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*counter_.UnsafeRawStringPointer())->clear();
  }
  time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ProfileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->counter().data(), static_cast<int>(this->counter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ProfileInfo.counter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ProfileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ProfileInfo)
  return false;
#undef DO_
}

void ProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string counter = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counter().data(), static_cast<int>(this->counter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ProfileInfo.counter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ProfileInfo)
}

::google::protobuf::uint8* ProfileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string counter = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counter().data(), static_cast<int>(this->counter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ProfileInfo.counter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ProfileInfo)
  return target;
}

size_t ProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ProfileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 time = 1;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }
  // optional string counter = 2;
  if (has_counter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->counter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ProfileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ProfileInfo)
    MergeFrom(*source);
  }
}

void ProfileInfo::MergeFrom(const ProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_counter();
      counter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counter_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileInfo::CopyFrom(const ProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ProfileInfo::Swap(ProfileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileInfo::InternalSwap(ProfileInfo* other) {
  using std::swap;
  counter_.Swap(&other->counter_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileInfo::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileInfo

// required int64 time = 1;
bool ProfileInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfileInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfileInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfileInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
::google::protobuf::int64 ProfileInfo::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ProfileInfo.time)
  return time_;
}
void ProfileInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ProfileInfo.time)
}

// optional string counter = 2;
bool ProfileInfo::has_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfileInfo::set_has_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfileInfo::clear_has_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfileInfo::clear_counter() {
  counter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_counter();
}
const ::std::string& ProfileInfo::counter() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ProfileInfo.counter)
  return counter_.GetNoArena();
}
void ProfileInfo::set_counter(const ::std::string& value) {
  set_has_counter();
  counter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ProfileInfo.counter)
}
#if LANG_CXX11
void ProfileInfo::set_counter(::std::string&& value) {
  set_has_counter();
  counter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ProfileInfo.counter)
}
#endif
void ProfileInfo::set_counter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_counter();
  counter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ProfileInfo.counter)
}
void ProfileInfo::set_counter(const char* value, size_t size) {
  set_has_counter();
  counter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ProfileInfo.counter)
}
::std::string* ProfileInfo::mutable_counter() {
  set_has_counter();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ProfileInfo.counter)
  return counter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileInfo::release_counter() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ProfileInfo.counter)
  clear_has_counter();
  return counter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileInfo::set_allocated_counter(::std::string* counter) {
  if (counter != NULL) {
    set_has_counter();
  } else {
    clear_has_counter();
  }
  counter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counter);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ProfileInfo.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubjParsed_KeyValue::kKeyFieldNumber;
const int SubjParsed_KeyValue::kValuesFieldNumber;
const int SubjParsed_KeyValue::kBvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubjParsed_KeyValue::SubjParsed_KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
}
SubjParsed_KeyValue::SubjParsed_KeyValue(const SubjParsed_KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_),
      bvalues_(from.bvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
}

void SubjParsed_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubjParsed_KeyValue::~SubjParsed_KeyValue() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  SharedDtor();
}

void SubjParsed_KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubjParsed_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubjParsed_KeyValue::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubjParsed_KeyValue& SubjParsed_KeyValue::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubjParsed_KeyValue* SubjParsed_KeyValue::New(::google::protobuf::Arena* arena) const {
  SubjParsed_KeyValue* n = new SubjParsed_KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubjParsed_KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  bvalues_.Clear();
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubjParsed_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes bvalues = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_bvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  return false;
#undef DO_
}

void SubjParsed_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  // repeated bytes bvalues = 3;
  for (int i = 0, n = this->bvalues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->bvalues(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
}

::google::protobuf::uint8* SubjParsed_KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  // repeated bytes bvalues = 3;
  for (int i = 0, n = this->bvalues_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->bvalues(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  return target;
}

size_t SubjParsed_KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // repeated string values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // repeated bytes bvalues = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bvalues_size());
  for (int i = 0, n = this->bvalues_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->bvalues(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubjParsed_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SubjParsed_KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubjParsed_KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
    MergeFrom(*source);
  }
}

void SubjParsed_KeyValue::MergeFrom(const SubjParsed_KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  bvalues_.MergeFrom(from.bvalues_);
  if (from.has_key()) {
    set_has_key();
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void SubjParsed_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubjParsed_KeyValue::CopyFrom(const SubjParsed_KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SubjParsed.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjParsed_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubjParsed_KeyValue::Swap(SubjParsed_KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubjParsed_KeyValue::InternalSwap(SubjParsed_KeyValue* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  bvalues_.InternalSwap(&other->bvalues_);
  key_.Swap(&other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubjParsed_KeyValue::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubjParsed_KeyValue

// required string key = 1;
bool SubjParsed_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubjParsed_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SubjParsed_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubjParsed_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& SubjParsed_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
  return key_.GetNoArena();
}
void SubjParsed_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
}
#if LANG_CXX11
void SubjParsed_KeyValue::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
}
#endif
void SubjParsed_KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
}
void SubjParsed_KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
}
::std::string* SubjParsed_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubjParsed_KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubjParsed_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.key)
}

// repeated string values = 2;
int SubjParsed_KeyValue::values_size() const {
  return values_.size();
}
void SubjParsed_KeyValue::clear_values() {
  values_.Clear();
}
const ::std::string& SubjParsed_KeyValue::values(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  return values_.Get(index);
}
::std::string* SubjParsed_KeyValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  return values_.Mutable(index);
}
void SubjParsed_KeyValue::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SubjParsed_KeyValue::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
void SubjParsed_KeyValue::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
void SubjParsed_KeyValue::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
::std::string* SubjParsed_KeyValue::add_values() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  return values_.Add();
}
void SubjParsed_KeyValue::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
#if LANG_CXX11
void SubjParsed_KeyValue::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
#endif
void SubjParsed_KeyValue::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
void SubjParsed_KeyValue::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubjParsed_KeyValue::values() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  return values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SubjParsed_KeyValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.values)
  return &values_;
}

// repeated bytes bvalues = 3;
int SubjParsed_KeyValue::bvalues_size() const {
  return bvalues_.size();
}
void SubjParsed_KeyValue::clear_bvalues() {
  bvalues_.Clear();
}
const ::std::string& SubjParsed_KeyValue::bvalues(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  return bvalues_.Get(index);
}
::std::string* SubjParsed_KeyValue::mutable_bvalues(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  return bvalues_.Mutable(index);
}
void SubjParsed_KeyValue::set_bvalues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  bvalues_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SubjParsed_KeyValue::set_bvalues(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  bvalues_.Mutable(index)->assign(std::move(value));
}
#endif
void SubjParsed_KeyValue::set_bvalues(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
void SubjParsed_KeyValue::set_bvalues(int index, const void* value, size_t size) {
  bvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
::std::string* SubjParsed_KeyValue::add_bvalues() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  return bvalues_.Add();
}
void SubjParsed_KeyValue::add_bvalues(const ::std::string& value) {
  bvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
#if LANG_CXX11
void SubjParsed_KeyValue::add_bvalues(::std::string&& value) {
  bvalues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
#endif
void SubjParsed_KeyValue::add_bvalues(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
void SubjParsed_KeyValue::add_bvalues(const void* value, size_t size) {
  bvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubjParsed_KeyValue::bvalues() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  return bvalues_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SubjParsed_KeyValue::mutable_bvalues() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SubjParsed.KeyValue.bvalues)
  return &bvalues_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubjParsed::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubjParsed::SubjParsed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SubjParsed)
}
SubjParsed::SubjParsed(const SubjParsed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SubjParsed)
}

void SubjParsed::SharedCtor() {
  _cached_size_ = 0;
}

SubjParsed::~SubjParsed() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SubjParsed)
  SharedDtor();
}

void SubjParsed::SharedDtor() {
}

void SubjParsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubjParsed::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubjParsed& SubjParsed::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubjParsed* SubjParsed::New(::google::protobuf::Arena* arena) const {
  SubjParsed* n = new SubjParsed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubjParsed::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SubjParsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubjParsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SubjParsed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SubjParsed.KeyValue values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SubjParsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SubjParsed)
  return false;
#undef DO_
}

void SubjParsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SubjParsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SubjParsed.KeyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SubjParsed)
}

::google::protobuf::uint8* SubjParsed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SubjParsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SubjParsed.KeyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SubjParsed)
  return target;
}

size_t SubjParsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SubjParsed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SubjParsed.KeyValue values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubjParsed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SubjParsed)
  GOOGLE_DCHECK_NE(&from, this);
  const SubjParsed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubjParsed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SubjParsed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SubjParsed)
    MergeFrom(*source);
  }
}

void SubjParsed::MergeFrom(const SubjParsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SubjParsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void SubjParsed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SubjParsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubjParsed::CopyFrom(const SubjParsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SubjParsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubjParsed::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void SubjParsed::Swap(SubjParsed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubjParsed::InternalSwap(SubjParsed* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubjParsed::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubjParsed

// repeated .ru.mail.go.webbase.blobs.SubjParsed.KeyValue values = 1;
int SubjParsed::values_size() const {
  return values_.size();
}
void SubjParsed::clear_values() {
  values_.Clear();
}
const ::ru::mail::go::webbase::blobs::SubjParsed_KeyValue& SubjParsed::values(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SubjParsed.values)
  return values_.Get(index);
}
::ru::mail::go::webbase::blobs::SubjParsed_KeyValue* SubjParsed::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SubjParsed.values)
  return values_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SubjParsed_KeyValue* SubjParsed::add_values() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SubjParsed.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SubjParsed_KeyValue >*
SubjParsed::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SubjParsed.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SubjParsed_KeyValue >&
SubjParsed::values() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SubjParsed.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kKeyFieldNumber;
const int ImageInfo::kContentFieldNumber;
const int ImageInfo::kHeadFieldNumber;
const int ImageInfo::kCtypeFieldNumber;
const int ImageInfo::kDownloadTimeFieldNumber;
const int ImageInfo::kFullUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_head()) {
    head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullurl()) {
    fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctype_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(ctype_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&download_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctype_) -
      reinterpret_cast<char*>(&download_time_)) + sizeof(ctype_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!head_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*head_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!fullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctype_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(ctype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes head = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_ctype(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 download_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fullUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullurl().data(), static_cast<int>(this->fullurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageInfo.fullUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // required bytes head = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->head(), output);
  }

  // required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ctype(), output);
  }

  // optional uint64 download_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->download_time(), output);
  }

  // optional string fullUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageInfo.fullUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fullurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // required bytes head = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->head(), target);
  }

  // required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ctype(), target);
  }

  // optional uint64 download_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->download_time(), target);
  }

  // optional string fullUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageInfo.fullUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fullurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageInfo)
  return target;
}

size_t ImageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageInfo)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_head()) {
    // required bytes head = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->head());
  }

  if (has_ctype()) {
    // required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());
  }

  return total_size;
}
size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes head = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->head());

    // required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string fullUrl = 6;
    if (has_fullurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullurl());
    }

    // optional uint64 download_time = 5;
    if (has_download_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_head();
      head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_fullurl();
      fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      ctype_ = from.ctype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  content_.Swap(&other->content_);
  head_.Swap(&other->head_);
  fullurl_.Swap(&other->fullurl_);
  swap(download_time_, other->download_time_);
  swap(ctype_, other->ctype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// required bytes key = 1;
bool ImageInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ImageInfo::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.key)
  return key_.GetNoArena();
}
void ImageInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.key)
}
#if LANG_CXX11
void ImageInfo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageInfo.key)
}
#endif
void ImageInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageInfo.key)
}
void ImageInfo::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageInfo.key)
}
::std::string* ImageInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageInfo.key)
}

// required bytes content = 2;
bool ImageInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ImageInfo::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.content)
  return content_.GetNoArena();
}
void ImageInfo::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.content)
}
#if LANG_CXX11
void ImageInfo::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageInfo.content)
}
#endif
void ImageInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageInfo.content)
}
void ImageInfo::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageInfo.content)
}
::std::string* ImageInfo::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageInfo.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageInfo.content)
}

// required bytes head = 3;
bool ImageInfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_head() {
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head();
}
const ::std::string& ImageInfo::head() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.head)
  return head_.GetNoArena();
}
void ImageInfo::set_head(const ::std::string& value) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.head)
}
#if LANG_CXX11
void ImageInfo::set_head(::std::string&& value) {
  set_has_head();
  head_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageInfo.head)
}
#endif
void ImageInfo::set_head(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageInfo.head)
}
void ImageInfo::set_head(const void* value, size_t size) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageInfo.head)
}
::std::string* ImageInfo::mutable_head() {
  set_has_head();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageInfo.head)
  return head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_head() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageInfo.head)
  clear_has_head();
  return head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_head(::std::string* head) {
  if (head != NULL) {
    set_has_head();
  } else {
    clear_has_head();
  }
  head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageInfo.head)
}

// required .ru.mail.go.webbase.blobs.ContentType ctype = 4;
bool ImageInfo::has_ctype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageInfo::set_has_ctype() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageInfo::clear_has_ctype() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageInfo::clear_ctype() {
  ctype_ = 0;
  clear_has_ctype();
}
::ru::mail::go::webbase::blobs::ContentType ImageInfo::ctype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.ctype)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(ctype_);
}
void ImageInfo::set_ctype(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_ctype();
  ctype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.ctype)
}

// optional uint64 download_time = 5;
bool ImageInfo::has_download_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageInfo::set_has_download_time() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageInfo::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageInfo::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 ImageInfo::download_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.download_time)
  return download_time_;
}
void ImageInfo::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.download_time)
}

// optional string fullUrl = 6;
bool ImageInfo::has_fullurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageInfo::set_has_fullurl() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageInfo::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageInfo::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
const ::std::string& ImageInfo::fullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
  return fullurl_.GetNoArena();
}
void ImageInfo::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
}
#if LANG_CXX11
void ImageInfo::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
}
#endif
void ImageInfo::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
}
void ImageInfo::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
}
::std::string* ImageInfo::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_fullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageInfo.fullUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeImageInfo::kImageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeImageInfo::ChromeImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ChromeImageInfo)
}
ChromeImageInfo::ChromeImageInfo(const ChromeImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imageinfo()) {
    imageinfo_ = new ::ru::mail::go::webbase::blobs::ImageInfo(*from.imageinfo_);
  } else {
    imageinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ChromeImageInfo)
}

void ChromeImageInfo::SharedCtor() {
  _cached_size_ = 0;
  imageinfo_ = NULL;
}

ChromeImageInfo::~ChromeImageInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ChromeImageInfo)
  SharedDtor();
}

void ChromeImageInfo::SharedDtor() {
  if (this != internal_default_instance()) delete imageinfo_;
}

void ChromeImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChromeImageInfo::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChromeImageInfo& ChromeImageInfo::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChromeImageInfo* ChromeImageInfo::New(::google::protobuf::Arena* arena) const {
  ChromeImageInfo* n = new ChromeImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromeImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_imageinfo()) {
    GOOGLE_DCHECK(imageinfo_ != NULL);
    imageinfo_->::ru::mail::go::webbase::blobs::ImageInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChromeImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ImageInfo imageInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ChromeImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ChromeImageInfo)
  return false;
#undef DO_
}

void ChromeImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageInfo imageInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->imageinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ChromeImageInfo)
}

::google::protobuf::uint8* ChromeImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageInfo imageInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->imageinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ChromeImageInfo)
  return target;
}

size_t ChromeImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ImageInfo imageInfo = 1;
  if (has_imageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imageinfo_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromeImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChromeImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChromeImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ChromeImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ChromeImageInfo)
    MergeFrom(*source);
  }
}

void ChromeImageInfo::MergeFrom(const ChromeImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imageinfo()) {
    mutable_imageinfo()->::ru::mail::go::webbase::blobs::ImageInfo::MergeFrom(from.imageinfo());
  }
}

void ChromeImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChromeImageInfo::CopyFrom(const ChromeImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ChromeImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_imageinfo()) {
    if (!this->imageinfo_->IsInitialized()) return false;
  }
  return true;
}

void ChromeImageInfo::Swap(ChromeImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromeImageInfo::InternalSwap(ChromeImageInfo* other) {
  using std::swap;
  swap(imageinfo_, other->imageinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChromeImageInfo::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeImageInfo

// required .ru.mail.go.webbase.blobs.ImageInfo imageInfo = 1;
bool ChromeImageInfo::has_imageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeImageInfo::set_has_imageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void ChromeImageInfo::clear_has_imageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChromeImageInfo::clear_imageinfo() {
  if (imageinfo_ != NULL) imageinfo_->::ru::mail::go::webbase::blobs::ImageInfo::Clear();
  clear_has_imageinfo();
}
const ::ru::mail::go::webbase::blobs::ImageInfo& ChromeImageInfo::imageinfo() const {
  const ::ru::mail::go::webbase::blobs::ImageInfo* p = imageinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ChromeImageInfo.imageInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageInfo*>(
      &::ru::mail::go::webbase::blobs::_ImageInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageInfo* ChromeImageInfo::mutable_imageinfo() {
  set_has_imageinfo();
  if (imageinfo_ == NULL) {
    imageinfo_ = new ::ru::mail::go::webbase::blobs::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ChromeImageInfo.imageInfo)
  return imageinfo_;
}
::ru::mail::go::webbase::blobs::ImageInfo* ChromeImageInfo::release_imageinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ChromeImageInfo.imageInfo)
  clear_has_imageinfo();
  ::ru::mail::go::webbase::blobs::ImageInfo* temp = imageinfo_;
  imageinfo_ = NULL;
  return temp;
}
void ChromeImageInfo::set_allocated_imageinfo(::ru::mail::go::webbase::blobs::ImageInfo* imageinfo) {
  delete imageinfo_;
  imageinfo_ = imageinfo;
  if (imageinfo) {
    set_has_imageinfo();
  } else {
    clear_has_imageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ChromeImageInfo.imageInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Features::kPornScoreFieldNumber;
const int Features::kPornFeaturesFieldNumber;
const int Features::kSpamScoreFieldNumber;
const int Features::kSpamFeaturesFieldNumber;
const int Features::kContactUrlFieldNumber;
const int Features::kContactsFieldNumber;
const int Features::kSubjStageFieldNumber;
const int Features::kSubjNameFieldNumber;
const int Features::kSubjCtxsFieldNumber;
const int Features::kSoftScoreFieldNumber;
const int Features::kSoftFeaturesFieldNumber;
const int Features::kSubjTypeFieldNumber;
const int Features::kMarketScoreFieldNumber;
const int Features::kMarketFeaturesFieldNumber;
const int Features::kSubjValuesFieldNumber;
const int Features::kPornScoreRawFieldNumber;
const int Features::kSpamScoreRawFieldNumber;
const int Features::kPornScore2FieldNumber;
const int Features::kPornScore2RawFieldNumber;
const int Features::kPornFeatures2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Features::Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Features)
}
Features::Features(const Features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contact_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contact_url()) {
    contact_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_url_);
  }
  subj_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subj_name()) {
    subj_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subj_name_);
  }
  subj_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subj_type()) {
    subj_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subj_type_);
  }
  if (from.has_porn_features()) {
    porn_features_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.porn_features_);
  } else {
    porn_features_ = NULL;
  }
  if (from.has_spam_features()) {
    spam_features_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.spam_features_);
  } else {
    spam_features_ = NULL;
  }
  if (from.has_contacts()) {
    contacts_ = new ::ru::mail::go::webbase::blobs::ContactInfoList(*from.contacts_);
  } else {
    contacts_ = NULL;
  }
  if (from.has_subj_ctxs()) {
    subj_ctxs_ = new ::ru::mail::go::webbase::blobs::SubjContextList(*from.subj_ctxs_);
  } else {
    subj_ctxs_ = NULL;
  }
  if (from.has_soft_features()) {
    soft_features_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.soft_features_);
  } else {
    soft_features_ = NULL;
  }
  if (from.has_market_features()) {
    market_features_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.market_features_);
  } else {
    market_features_ = NULL;
  }
  if (from.has_subj_values()) {
    subj_values_ = new ::ru::mail::go::webbase::blobs::SubjParsed(*from.subj_values_);
  } else {
    subj_values_ = NULL;
  }
  if (from.has_porn_features2()) {
    porn_features2_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.porn_features2_);
  } else {
    porn_features2_ = NULL;
  }
  ::memcpy(&porn_score_, &from.porn_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&porn_score2_raw_) -
    reinterpret_cast<char*>(&porn_score_)) + sizeof(porn_score2_raw_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Features)
}

void Features::SharedCtor() {
  _cached_size_ = 0;
  contact_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subj_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subj_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&porn_features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porn_score2_raw_) -
      reinterpret_cast<char*>(&porn_features_)) + sizeof(porn_score2_raw_));
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Features)
  SharedDtor();
}

void Features::SharedDtor() {
  contact_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subj_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subj_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete porn_features_;
  if (this != internal_default_instance()) delete spam_features_;
  if (this != internal_default_instance()) delete contacts_;
  if (this != internal_default_instance()) delete subj_ctxs_;
  if (this != internal_default_instance()) delete soft_features_;
  if (this != internal_default_instance()) delete market_features_;
  if (this != internal_default_instance()) delete subj_values_;
  if (this != internal_default_instance()) delete porn_features2_;
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Features& Features::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

Features* Features::New(::google::protobuf::Arena* arena) const {
  Features* n = new Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!contact_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contact_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!subj_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subj_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!subj_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subj_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(porn_features_ != NULL);
      porn_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(spam_features_ != NULL);
      spam_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(contacts_ != NULL);
      contacts_->::ru::mail::go::webbase::blobs::ContactInfoList::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(subj_ctxs_ != NULL);
      subj_ctxs_->::ru::mail::go::webbase::blobs::SubjContextList::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(soft_features_ != NULL);
      soft_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(market_features_ != NULL);
      market_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(subj_values_ != NULL);
      subj_values_->::ru::mail::go::webbase::blobs::SubjParsed::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(porn_features2_ != NULL);
      porn_features2_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&porn_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_score_) -
        reinterpret_cast<char*>(&porn_score_)) + sizeof(market_score_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&porn_score_raw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porn_score2_raw_) -
        reinterpret_cast<char*>(&porn_score_raw_)) + sizeof(porn_score2_raw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 porn_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_porn_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porn_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList porn_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_porn_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Features.spam_t spam_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Features_spam_t_IsValid(value)) {
            set_spam_score(static_cast< ::ru::mail::go::webbase::blobs::Features_spam_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList spam_features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spam_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contact_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contact_url().data(), static_cast<int>(this->contact_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Features.contact_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContactInfoList contacts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Features.subj_t subj_stage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Features_subj_t_IsValid(value)) {
            set_subj_stage(static_cast< ::ru::mail::go::webbase::blobs::Features_subj_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subj_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subj_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subj_name().data(), static_cast<int>(this->subj_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Features.subj_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SubjContextList subj_ctxs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subj_ctxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float soft_score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_soft_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soft_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList soft_features = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soft_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subj_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subj_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subj_type().data(), static_cast<int>(this->subj_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Features.subj_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float market_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_market_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &market_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList market_features = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SubjParsed subj_values = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subj_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_score_raw = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_porn_score_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_score_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spam_score_raw = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_spam_score_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spam_score_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 porn_score2 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_porn_score2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porn_score2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_score2_raw = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_porn_score2_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_score2_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList porn_features2 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_porn_features2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 porn_score = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->porn_score(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList porn_features = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->porn_features_, output);
  }

  // optional .ru.mail.go.webbase.blobs.Features.spam_t spam_score = 3;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->spam_score(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList spam_features = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->spam_features_, output);
  }

  // optional string contact_url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_url().data(), static_cast<int>(this->contact_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.contact_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->contact_url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContactInfoList contacts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->contacts_, output);
  }

  // optional .ru.mail.go.webbase.blobs.Features.subj_t subj_stage = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->subj_stage(), output);
  }

  // optional string subj_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subj_name().data(), static_cast<int>(this->subj_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.subj_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subj_name(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SubjContextList subj_ctxs = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->subj_ctxs_, output);
  }

  // optional float soft_score = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->soft_score(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList soft_features = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->soft_features_, output);
  }

  // optional string subj_type = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subj_type().data(), static_cast<int>(this->subj_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.subj_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->subj_type(), output);
  }

  // optional float market_score = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->market_score(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList market_features = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->market_features_, output);
  }

  // optional .ru.mail.go.webbase.blobs.SubjParsed subj_values = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->subj_values_, output);
  }

  // optional float porn_score_raw = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->porn_score_raw(), output);
  }

  // optional float spam_score_raw = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->spam_score_raw(), output);
  }

  // optional uint32 porn_score2 = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->porn_score2(), output);
  }

  // optional float porn_score2_raw = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->porn_score2_raw(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList porn_features2 = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->porn_features2_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Features)
}

::google::protobuf::uint8* Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 porn_score = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->porn_score(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList porn_features = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->porn_features_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.Features.spam_t spam_score = 3;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->spam_score(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList spam_features = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->spam_features_, deterministic, target);
  }

  // optional string contact_url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_url().data(), static_cast<int>(this->contact_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.contact_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contact_url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContactInfoList contacts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->contacts_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.Features.subj_t subj_stage = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->subj_stage(), target);
  }

  // optional string subj_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subj_name().data(), static_cast<int>(this->subj_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.subj_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subj_name(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SubjContextList subj_ctxs = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->subj_ctxs_, deterministic, target);
  }

  // optional float soft_score = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->soft_score(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList soft_features = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->soft_features_, deterministic, target);
  }

  // optional string subj_type = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subj_type().data(), static_cast<int>(this->subj_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Features.subj_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->subj_type(), target);
  }

  // optional float market_score = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->market_score(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList market_features = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->market_features_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.SubjParsed subj_values = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->subj_values_, deterministic, target);
  }

  // optional float porn_score_raw = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->porn_score_raw(), target);
  }

  // optional float spam_score_raw = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->spam_score_raw(), target);
  }

  // optional uint32 porn_score2 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->porn_score2(), target);
  }

  // optional float porn_score2_raw = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->porn_score2_raw(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList porn_features2 = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->porn_features2_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Features)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string contact_url = 5;
    if (has_contact_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_url());
    }

    // optional string subj_name = 8;
    if (has_subj_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subj_name());
    }

    // optional string subj_type = 12;
    if (has_subj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subj_type());
    }

    // optional .ru.mail.go.webbase.blobs.FeatureList porn_features = 2;
    if (has_porn_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->porn_features_);
    }

    // optional .ru.mail.go.webbase.blobs.FeatureList spam_features = 4;
    if (has_spam_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spam_features_);
    }

    // optional .ru.mail.go.webbase.blobs.ContactInfoList contacts = 6;
    if (has_contacts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contacts_);
    }

    // optional .ru.mail.go.webbase.blobs.SubjContextList subj_ctxs = 9;
    if (has_subj_ctxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subj_ctxs_);
    }

    // optional .ru.mail.go.webbase.blobs.FeatureList soft_features = 11;
    if (has_soft_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soft_features_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ru.mail.go.webbase.blobs.FeatureList market_features = 14;
    if (has_market_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->market_features_);
    }

    // optional .ru.mail.go.webbase.blobs.SubjParsed subj_values = 15;
    if (has_subj_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subj_values_);
    }

    // optional .ru.mail.go.webbase.blobs.FeatureList porn_features2 = 20;
    if (has_porn_features2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->porn_features2_);
    }

    // optional uint32 porn_score = 1;
    if (has_porn_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porn_score());
    }

    // optional .ru.mail.go.webbase.blobs.Features.spam_t spam_score = 3;
    if (has_spam_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->spam_score());
    }

    // optional .ru.mail.go.webbase.blobs.Features.subj_t subj_stage = 7;
    if (has_subj_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subj_stage());
    }

    // optional float soft_score = 10;
    if (has_soft_score()) {
      total_size += 1 + 4;
    }

    // optional float market_score = 13;
    if (has_market_score()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional float porn_score_raw = 16;
    if (has_porn_score_raw()) {
      total_size += 2 + 4;
    }

    // optional float spam_score_raw = 17;
    if (has_spam_score_raw()) {
      total_size += 2 + 4;
    }

    // optional uint32 porn_score2 = 18;
    if (has_porn_score2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porn_score2());
    }

    // optional float porn_score2_raw = 19;
    if (has_porn_score2_raw()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Features)
  GOOGLE_DCHECK_NE(&from, this);
  const Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Features)
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contact_url();
      contact_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_subj_name();
      subj_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subj_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_subj_type();
      subj_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subj_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_porn_features()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.porn_features());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_spam_features()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.spam_features());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_contacts()->::ru::mail::go::webbase::blobs::ContactInfoList::MergeFrom(from.contacts());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_subj_ctxs()->::ru::mail::go::webbase::blobs::SubjContextList::MergeFrom(from.subj_ctxs());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_soft_features()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.soft_features());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_market_features()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.market_features());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_subj_values()->::ru::mail::go::webbase::blobs::SubjParsed::MergeFrom(from.subj_values());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_porn_features2()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.porn_features2());
    }
    if (cached_has_bits & 0x00000800u) {
      porn_score_ = from.porn_score_;
    }
    if (cached_has_bits & 0x00001000u) {
      spam_score_ = from.spam_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      subj_stage_ = from.subj_stage_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_score_ = from.soft_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      market_score_ = from.market_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      porn_score_raw_ = from.porn_score_raw_;
    }
    if (cached_has_bits & 0x00020000u) {
      spam_score_raw_ = from.spam_score_raw_;
    }
    if (cached_has_bits & 0x00040000u) {
      porn_score2_ = from.porn_score2_;
    }
    if (cached_has_bits & 0x00080000u) {
      porn_score2_raw_ = from.porn_score2_raw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  if (has_porn_features()) {
    if (!this->porn_features_->IsInitialized()) return false;
  }
  if (has_spam_features()) {
    if (!this->spam_features_->IsInitialized()) return false;
  }
  if (has_contacts()) {
    if (!this->contacts_->IsInitialized()) return false;
  }
  if (has_subj_ctxs()) {
    if (!this->subj_ctxs_->IsInitialized()) return false;
  }
  if (has_soft_features()) {
    if (!this->soft_features_->IsInitialized()) return false;
  }
  if (has_market_features()) {
    if (!this->market_features_->IsInitialized()) return false;
  }
  if (has_subj_values()) {
    if (!this->subj_values_->IsInitialized()) return false;
  }
  if (has_porn_features2()) {
    if (!this->porn_features2_->IsInitialized()) return false;
  }
  return true;
}

void Features::Swap(Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Features::InternalSwap(Features* other) {
  using std::swap;
  contact_url_.Swap(&other->contact_url_);
  subj_name_.Swap(&other->subj_name_);
  subj_type_.Swap(&other->subj_type_);
  swap(porn_features_, other->porn_features_);
  swap(spam_features_, other->spam_features_);
  swap(contacts_, other->contacts_);
  swap(subj_ctxs_, other->subj_ctxs_);
  swap(soft_features_, other->soft_features_);
  swap(market_features_, other->market_features_);
  swap(subj_values_, other->subj_values_);
  swap(porn_features2_, other->porn_features2_);
  swap(porn_score_, other->porn_score_);
  swap(spam_score_, other->spam_score_);
  swap(subj_stage_, other->subj_stage_);
  swap(soft_score_, other->soft_score_);
  swap(market_score_, other->market_score_);
  swap(porn_score_raw_, other->porn_score_raw_);
  swap(spam_score_raw_, other->spam_score_raw_);
  swap(porn_score2_, other->porn_score2_);
  swap(porn_score2_raw_, other->porn_score2_raw_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Features

// optional uint32 porn_score = 1;
bool Features::has_porn_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Features::set_has_porn_score() {
  _has_bits_[0] |= 0x00000800u;
}
void Features::clear_has_porn_score() {
  _has_bits_[0] &= ~0x00000800u;
}
void Features::clear_porn_score() {
  porn_score_ = 0u;
  clear_has_porn_score();
}
::google::protobuf::uint32 Features::porn_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_score)
  return porn_score_;
}
void Features::set_porn_score(::google::protobuf::uint32 value) {
  set_has_porn_score();
  porn_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.porn_score)
}

// optional .ru.mail.go.webbase.blobs.FeatureList porn_features = 2;
bool Features::has_porn_features() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Features::set_has_porn_features() {
  _has_bits_[0] |= 0x00000008u;
}
void Features::clear_has_porn_features() {
  _has_bits_[0] &= ~0x00000008u;
}
void Features::clear_porn_features() {
  if (porn_features_ != NULL) porn_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_porn_features();
}
const ::ru::mail::go::webbase::blobs::FeatureList& Features::porn_features() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = porn_features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* Features::mutable_porn_features() {
  set_has_porn_features();
  if (porn_features_ == NULL) {
    porn_features_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.porn_features)
  return porn_features_;
}
::ru::mail::go::webbase::blobs::FeatureList* Features::release_porn_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.porn_features)
  clear_has_porn_features();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = porn_features_;
  porn_features_ = NULL;
  return temp;
}
void Features::set_allocated_porn_features(::ru::mail::go::webbase::blobs::FeatureList* porn_features) {
  delete porn_features_;
  porn_features_ = porn_features;
  if (porn_features) {
    set_has_porn_features();
  } else {
    clear_has_porn_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.porn_features)
}

// optional .ru.mail.go.webbase.blobs.Features.spam_t spam_score = 3;
bool Features::has_spam_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Features::set_has_spam_score() {
  _has_bits_[0] |= 0x00001000u;
}
void Features::clear_has_spam_score() {
  _has_bits_[0] &= ~0x00001000u;
}
void Features::clear_spam_score() {
  spam_score_ = 0;
  clear_has_spam_score();
}
::ru::mail::go::webbase::blobs::Features_spam_t Features::spam_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.spam_score)
  return static_cast< ::ru::mail::go::webbase::blobs::Features_spam_t >(spam_score_);
}
void Features::set_spam_score(::ru::mail::go::webbase::blobs::Features_spam_t value) {
  assert(::ru::mail::go::webbase::blobs::Features_spam_t_IsValid(value));
  set_has_spam_score();
  spam_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.spam_score)
}

// optional .ru.mail.go.webbase.blobs.FeatureList spam_features = 4;
bool Features::has_spam_features() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Features::set_has_spam_features() {
  _has_bits_[0] |= 0x00000010u;
}
void Features::clear_has_spam_features() {
  _has_bits_[0] &= ~0x00000010u;
}
void Features::clear_spam_features() {
  if (spam_features_ != NULL) spam_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_spam_features();
}
const ::ru::mail::go::webbase::blobs::FeatureList& Features::spam_features() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = spam_features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.spam_features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* Features::mutable_spam_features() {
  set_has_spam_features();
  if (spam_features_ == NULL) {
    spam_features_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.spam_features)
  return spam_features_;
}
::ru::mail::go::webbase::blobs::FeatureList* Features::release_spam_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.spam_features)
  clear_has_spam_features();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = spam_features_;
  spam_features_ = NULL;
  return temp;
}
void Features::set_allocated_spam_features(::ru::mail::go::webbase::blobs::FeatureList* spam_features) {
  delete spam_features_;
  spam_features_ = spam_features;
  if (spam_features) {
    set_has_spam_features();
  } else {
    clear_has_spam_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.spam_features)
}

// optional string contact_url = 5;
bool Features::has_contact_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Features::set_has_contact_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Features::clear_has_contact_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Features::clear_contact_url() {
  contact_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_url();
}
const ::std::string& Features::contact_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.contact_url)
  return contact_url_.GetNoArena();
}
void Features::set_contact_url(const ::std::string& value) {
  set_has_contact_url();
  contact_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.contact_url)
}
#if LANG_CXX11
void Features::set_contact_url(::std::string&& value) {
  set_has_contact_url();
  contact_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Features.contact_url)
}
#endif
void Features::set_contact_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contact_url();
  contact_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Features.contact_url)
}
void Features::set_contact_url(const char* value, size_t size) {
  set_has_contact_url();
  contact_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Features.contact_url)
}
::std::string* Features::mutable_contact_url() {
  set_has_contact_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.contact_url)
  return contact_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Features::release_contact_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.contact_url)
  clear_has_contact_url();
  return contact_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Features::set_allocated_contact_url(::std::string* contact_url) {
  if (contact_url != NULL) {
    set_has_contact_url();
  } else {
    clear_has_contact_url();
  }
  contact_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.contact_url)
}

// optional .ru.mail.go.webbase.blobs.ContactInfoList contacts = 6;
bool Features::has_contacts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Features::set_has_contacts() {
  _has_bits_[0] |= 0x00000020u;
}
void Features::clear_has_contacts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Features::clear_contacts() {
  if (contacts_ != NULL) contacts_->::ru::mail::go::webbase::blobs::ContactInfoList::Clear();
  clear_has_contacts();
}
const ::ru::mail::go::webbase::blobs::ContactInfoList& Features::contacts() const {
  const ::ru::mail::go::webbase::blobs::ContactInfoList* p = contacts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.contacts)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ContactInfoList*>(
      &::ru::mail::go::webbase::blobs::_ContactInfoList_default_instance_);
}
::ru::mail::go::webbase::blobs::ContactInfoList* Features::mutable_contacts() {
  set_has_contacts();
  if (contacts_ == NULL) {
    contacts_ = new ::ru::mail::go::webbase::blobs::ContactInfoList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.contacts)
  return contacts_;
}
::ru::mail::go::webbase::blobs::ContactInfoList* Features::release_contacts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.contacts)
  clear_has_contacts();
  ::ru::mail::go::webbase::blobs::ContactInfoList* temp = contacts_;
  contacts_ = NULL;
  return temp;
}
void Features::set_allocated_contacts(::ru::mail::go::webbase::blobs::ContactInfoList* contacts) {
  delete contacts_;
  contacts_ = contacts;
  if (contacts) {
    set_has_contacts();
  } else {
    clear_has_contacts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.contacts)
}

// optional .ru.mail.go.webbase.blobs.Features.subj_t subj_stage = 7;
bool Features::has_subj_stage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Features::set_has_subj_stage() {
  _has_bits_[0] |= 0x00002000u;
}
void Features::clear_has_subj_stage() {
  _has_bits_[0] &= ~0x00002000u;
}
void Features::clear_subj_stage() {
  subj_stage_ = 0;
  clear_has_subj_stage();
}
::ru::mail::go::webbase::blobs::Features_subj_t Features::subj_stage() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.subj_stage)
  return static_cast< ::ru::mail::go::webbase::blobs::Features_subj_t >(subj_stage_);
}
void Features::set_subj_stage(::ru::mail::go::webbase::blobs::Features_subj_t value) {
  assert(::ru::mail::go::webbase::blobs::Features_subj_t_IsValid(value));
  set_has_subj_stage();
  subj_stage_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.subj_stage)
}

// optional string subj_name = 8;
bool Features::has_subj_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Features::set_has_subj_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Features::clear_has_subj_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Features::clear_subj_name() {
  subj_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subj_name();
}
const ::std::string& Features::subj_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.subj_name)
  return subj_name_.GetNoArena();
}
void Features::set_subj_name(const ::std::string& value) {
  set_has_subj_name();
  subj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.subj_name)
}
#if LANG_CXX11
void Features::set_subj_name(::std::string&& value) {
  set_has_subj_name();
  subj_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Features.subj_name)
}
#endif
void Features::set_subj_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subj_name();
  subj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Features.subj_name)
}
void Features::set_subj_name(const char* value, size_t size) {
  set_has_subj_name();
  subj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Features.subj_name)
}
::std::string* Features::mutable_subj_name() {
  set_has_subj_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.subj_name)
  return subj_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Features::release_subj_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.subj_name)
  clear_has_subj_name();
  return subj_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Features::set_allocated_subj_name(::std::string* subj_name) {
  if (subj_name != NULL) {
    set_has_subj_name();
  } else {
    clear_has_subj_name();
  }
  subj_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subj_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.subj_name)
}

// optional .ru.mail.go.webbase.blobs.SubjContextList subj_ctxs = 9;
bool Features::has_subj_ctxs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Features::set_has_subj_ctxs() {
  _has_bits_[0] |= 0x00000040u;
}
void Features::clear_has_subj_ctxs() {
  _has_bits_[0] &= ~0x00000040u;
}
void Features::clear_subj_ctxs() {
  if (subj_ctxs_ != NULL) subj_ctxs_->::ru::mail::go::webbase::blobs::SubjContextList::Clear();
  clear_has_subj_ctxs();
}
const ::ru::mail::go::webbase::blobs::SubjContextList& Features::subj_ctxs() const {
  const ::ru::mail::go::webbase::blobs::SubjContextList* p = subj_ctxs_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.subj_ctxs)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SubjContextList*>(
      &::ru::mail::go::webbase::blobs::_SubjContextList_default_instance_);
}
::ru::mail::go::webbase::blobs::SubjContextList* Features::mutable_subj_ctxs() {
  set_has_subj_ctxs();
  if (subj_ctxs_ == NULL) {
    subj_ctxs_ = new ::ru::mail::go::webbase::blobs::SubjContextList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.subj_ctxs)
  return subj_ctxs_;
}
::ru::mail::go::webbase::blobs::SubjContextList* Features::release_subj_ctxs() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.subj_ctxs)
  clear_has_subj_ctxs();
  ::ru::mail::go::webbase::blobs::SubjContextList* temp = subj_ctxs_;
  subj_ctxs_ = NULL;
  return temp;
}
void Features::set_allocated_subj_ctxs(::ru::mail::go::webbase::blobs::SubjContextList* subj_ctxs) {
  delete subj_ctxs_;
  subj_ctxs_ = subj_ctxs;
  if (subj_ctxs) {
    set_has_subj_ctxs();
  } else {
    clear_has_subj_ctxs();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.subj_ctxs)
}

// optional float soft_score = 10;
bool Features::has_soft_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Features::set_has_soft_score() {
  _has_bits_[0] |= 0x00004000u;
}
void Features::clear_has_soft_score() {
  _has_bits_[0] &= ~0x00004000u;
}
void Features::clear_soft_score() {
  soft_score_ = 0;
  clear_has_soft_score();
}
float Features::soft_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.soft_score)
  return soft_score_;
}
void Features::set_soft_score(float value) {
  set_has_soft_score();
  soft_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.soft_score)
}

// optional .ru.mail.go.webbase.blobs.FeatureList soft_features = 11;
bool Features::has_soft_features() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Features::set_has_soft_features() {
  _has_bits_[0] |= 0x00000080u;
}
void Features::clear_has_soft_features() {
  _has_bits_[0] &= ~0x00000080u;
}
void Features::clear_soft_features() {
  if (soft_features_ != NULL) soft_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_soft_features();
}
const ::ru::mail::go::webbase::blobs::FeatureList& Features::soft_features() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = soft_features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.soft_features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* Features::mutable_soft_features() {
  set_has_soft_features();
  if (soft_features_ == NULL) {
    soft_features_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.soft_features)
  return soft_features_;
}
::ru::mail::go::webbase::blobs::FeatureList* Features::release_soft_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.soft_features)
  clear_has_soft_features();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = soft_features_;
  soft_features_ = NULL;
  return temp;
}
void Features::set_allocated_soft_features(::ru::mail::go::webbase::blobs::FeatureList* soft_features) {
  delete soft_features_;
  soft_features_ = soft_features;
  if (soft_features) {
    set_has_soft_features();
  } else {
    clear_has_soft_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.soft_features)
}

// optional string subj_type = 12;
bool Features::has_subj_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Features::set_has_subj_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Features::clear_has_subj_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Features::clear_subj_type() {
  subj_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subj_type();
}
const ::std::string& Features::subj_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.subj_type)
  return subj_type_.GetNoArena();
}
void Features::set_subj_type(const ::std::string& value) {
  set_has_subj_type();
  subj_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.subj_type)
}
#if LANG_CXX11
void Features::set_subj_type(::std::string&& value) {
  set_has_subj_type();
  subj_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Features.subj_type)
}
#endif
void Features::set_subj_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subj_type();
  subj_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Features.subj_type)
}
void Features::set_subj_type(const char* value, size_t size) {
  set_has_subj_type();
  subj_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Features.subj_type)
}
::std::string* Features::mutable_subj_type() {
  set_has_subj_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.subj_type)
  return subj_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Features::release_subj_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.subj_type)
  clear_has_subj_type();
  return subj_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Features::set_allocated_subj_type(::std::string* subj_type) {
  if (subj_type != NULL) {
    set_has_subj_type();
  } else {
    clear_has_subj_type();
  }
  subj_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subj_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.subj_type)
}

// optional float market_score = 13;
bool Features::has_market_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Features::set_has_market_score() {
  _has_bits_[0] |= 0x00008000u;
}
void Features::clear_has_market_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void Features::clear_market_score() {
  market_score_ = 0;
  clear_has_market_score();
}
float Features::market_score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.market_score)
  return market_score_;
}
void Features::set_market_score(float value) {
  set_has_market_score();
  market_score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.market_score)
}

// optional .ru.mail.go.webbase.blobs.FeatureList market_features = 14;
bool Features::has_market_features() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Features::set_has_market_features() {
  _has_bits_[0] |= 0x00000100u;
}
void Features::clear_has_market_features() {
  _has_bits_[0] &= ~0x00000100u;
}
void Features::clear_market_features() {
  if (market_features_ != NULL) market_features_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_market_features();
}
const ::ru::mail::go::webbase::blobs::FeatureList& Features::market_features() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = market_features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.market_features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* Features::mutable_market_features() {
  set_has_market_features();
  if (market_features_ == NULL) {
    market_features_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.market_features)
  return market_features_;
}
::ru::mail::go::webbase::blobs::FeatureList* Features::release_market_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.market_features)
  clear_has_market_features();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = market_features_;
  market_features_ = NULL;
  return temp;
}
void Features::set_allocated_market_features(::ru::mail::go::webbase::blobs::FeatureList* market_features) {
  delete market_features_;
  market_features_ = market_features;
  if (market_features) {
    set_has_market_features();
  } else {
    clear_has_market_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.market_features)
}

// optional .ru.mail.go.webbase.blobs.SubjParsed subj_values = 15;
bool Features::has_subj_values() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Features::set_has_subj_values() {
  _has_bits_[0] |= 0x00000200u;
}
void Features::clear_has_subj_values() {
  _has_bits_[0] &= ~0x00000200u;
}
void Features::clear_subj_values() {
  if (subj_values_ != NULL) subj_values_->::ru::mail::go::webbase::blobs::SubjParsed::Clear();
  clear_has_subj_values();
}
const ::ru::mail::go::webbase::blobs::SubjParsed& Features::subj_values() const {
  const ::ru::mail::go::webbase::blobs::SubjParsed* p = subj_values_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.subj_values)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SubjParsed*>(
      &::ru::mail::go::webbase::blobs::_SubjParsed_default_instance_);
}
::ru::mail::go::webbase::blobs::SubjParsed* Features::mutable_subj_values() {
  set_has_subj_values();
  if (subj_values_ == NULL) {
    subj_values_ = new ::ru::mail::go::webbase::blobs::SubjParsed;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.subj_values)
  return subj_values_;
}
::ru::mail::go::webbase::blobs::SubjParsed* Features::release_subj_values() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.subj_values)
  clear_has_subj_values();
  ::ru::mail::go::webbase::blobs::SubjParsed* temp = subj_values_;
  subj_values_ = NULL;
  return temp;
}
void Features::set_allocated_subj_values(::ru::mail::go::webbase::blobs::SubjParsed* subj_values) {
  delete subj_values_;
  subj_values_ = subj_values;
  if (subj_values) {
    set_has_subj_values();
  } else {
    clear_has_subj_values();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.subj_values)
}

// optional float porn_score_raw = 16;
bool Features::has_porn_score_raw() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Features::set_has_porn_score_raw() {
  _has_bits_[0] |= 0x00010000u;
}
void Features::clear_has_porn_score_raw() {
  _has_bits_[0] &= ~0x00010000u;
}
void Features::clear_porn_score_raw() {
  porn_score_raw_ = 0;
  clear_has_porn_score_raw();
}
float Features::porn_score_raw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_score_raw)
  return porn_score_raw_;
}
void Features::set_porn_score_raw(float value) {
  set_has_porn_score_raw();
  porn_score_raw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.porn_score_raw)
}

// optional float spam_score_raw = 17;
bool Features::has_spam_score_raw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Features::set_has_spam_score_raw() {
  _has_bits_[0] |= 0x00020000u;
}
void Features::clear_has_spam_score_raw() {
  _has_bits_[0] &= ~0x00020000u;
}
void Features::clear_spam_score_raw() {
  spam_score_raw_ = 0;
  clear_has_spam_score_raw();
}
float Features::spam_score_raw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.spam_score_raw)
  return spam_score_raw_;
}
void Features::set_spam_score_raw(float value) {
  set_has_spam_score_raw();
  spam_score_raw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.spam_score_raw)
}

// optional uint32 porn_score2 = 18;
bool Features::has_porn_score2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Features::set_has_porn_score2() {
  _has_bits_[0] |= 0x00040000u;
}
void Features::clear_has_porn_score2() {
  _has_bits_[0] &= ~0x00040000u;
}
void Features::clear_porn_score2() {
  porn_score2_ = 0u;
  clear_has_porn_score2();
}
::google::protobuf::uint32 Features::porn_score2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_score2)
  return porn_score2_;
}
void Features::set_porn_score2(::google::protobuf::uint32 value) {
  set_has_porn_score2();
  porn_score2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.porn_score2)
}

// optional float porn_score2_raw = 19;
bool Features::has_porn_score2_raw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Features::set_has_porn_score2_raw() {
  _has_bits_[0] |= 0x00080000u;
}
void Features::clear_has_porn_score2_raw() {
  _has_bits_[0] &= ~0x00080000u;
}
void Features::clear_porn_score2_raw() {
  porn_score2_raw_ = 0;
  clear_has_porn_score2_raw();
}
float Features::porn_score2_raw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_score2_raw)
  return porn_score2_raw_;
}
void Features::set_porn_score2_raw(float value) {
  set_has_porn_score2_raw();
  porn_score2_raw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Features.porn_score2_raw)
}

// optional .ru.mail.go.webbase.blobs.FeatureList porn_features2 = 20;
bool Features::has_porn_features2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Features::set_has_porn_features2() {
  _has_bits_[0] |= 0x00000400u;
}
void Features::clear_has_porn_features2() {
  _has_bits_[0] &= ~0x00000400u;
}
void Features::clear_porn_features2() {
  if (porn_features2_ != NULL) porn_features2_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_porn_features2();
}
const ::ru::mail::go::webbase::blobs::FeatureList& Features::porn_features2() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = porn_features2_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Features.porn_features2)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* Features::mutable_porn_features2() {
  set_has_porn_features2();
  if (porn_features2_ == NULL) {
    porn_features2_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Features.porn_features2)
  return porn_features2_;
}
::ru::mail::go::webbase::blobs::FeatureList* Features::release_porn_features2() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Features.porn_features2)
  clear_has_porn_features2();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = porn_features2_;
  porn_features2_ = NULL;
  return temp;
}
void Features::set_allocated_porn_features2(::ru::mail::go::webbase::blobs::FeatureList* porn_features2) {
  delete porn_features2_;
  porn_features2_ = porn_features2;
  if (porn_features2) {
    set_has_porn_features2();
  } else {
    clear_has_porn_features2();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Features.porn_features2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLanguage::kLanguageFieldNumber;
const int DetectedLanguage::kEstimationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLanguage::DetectedLanguage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DetectedLanguage)
}
DetectedLanguage::DetectedLanguage(const DetectedLanguage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&estimation_, &from.estimation_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&estimation_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DetectedLanguage)
}

void DetectedLanguage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&estimation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&estimation_)) + sizeof(language_));
}

DetectedLanguage::~DetectedLanguage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DetectedLanguage)
  SharedDtor();
}

void DetectedLanguage::SharedDtor() {
}

void DetectedLanguage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLanguage::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedLanguage& DetectedLanguage::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectedLanguage* DetectedLanguage::New(::google::protobuf::Arena* arena) const {
  DetectedLanguage* n = new DetectedLanguage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&estimation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&estimation_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectedLanguage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.Language language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double estimation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_estimation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DetectedLanguage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DetectedLanguage)
  return false;
#undef DO_
}

void DetectedLanguage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->language(), output);
  }

  // optional double estimation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->estimation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DetectedLanguage)
}

::google::protobuf::uint8* DetectedLanguage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->language(), target);
  }

  // optional double estimation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->estimation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DetectedLanguage)
  return target;
}

size_t DetectedLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.Language language = 1;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }
  // optional double estimation = 2;
  if (has_estimation()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLanguage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLanguage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLanguage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DetectedLanguage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DetectedLanguage)
    MergeFrom(*source);
  }
}

void DetectedLanguage::MergeFrom(const DetectedLanguage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      estimation_ = from.estimation_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectedLanguage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLanguage::CopyFrom(const DetectedLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DetectedLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLanguage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DetectedLanguage::Swap(DetectedLanguage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLanguage::InternalSwap(DetectedLanguage* other) {
  using std::swap;
  swap(estimation_, other->estimation_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLanguage::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedLanguage

// required .ru.mail.go.webbase.blobs.Language language = 1;
bool DetectedLanguage::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectedLanguage::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectedLanguage::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectedLanguage::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language DetectedLanguage::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DetectedLanguage.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void DetectedLanguage::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DetectedLanguage.language)
}

// optional double estimation = 2;
bool DetectedLanguage::has_estimation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectedLanguage::set_has_estimation() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectedLanguage::clear_has_estimation() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectedLanguage::clear_estimation() {
  estimation_ = 0;
  clear_has_estimation();
}
double DetectedLanguage::estimation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DetectedLanguage.estimation)
  return estimation_;
}
void DetectedLanguage::set_estimation(double value) {
  set_has_estimation();
  estimation_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DetectedLanguage.estimation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectedLangArray::kDetectedLangFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectedLangArray::DetectedLangArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DetectedLangArray)
}
DetectedLangArray::DetectedLangArray(const DetectedLangArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      detected_lang_(from.detected_lang_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DetectedLangArray)
}

void DetectedLangArray::SharedCtor() {
  _cached_size_ = 0;
}

DetectedLangArray::~DetectedLangArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DetectedLangArray)
  SharedDtor();
}

void DetectedLangArray::SharedDtor() {
}

void DetectedLangArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedLangArray::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectedLangArray& DetectedLangArray::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectedLangArray* DetectedLangArray::New(::google::protobuf::Arena* arena) const {
  DetectedLangArray* n = new DetectedLangArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectedLangArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detected_lang_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectedLangArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.DetectedLanguage detected_lang = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detected_lang()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DetectedLangArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DetectedLangArray)
  return false;
#undef DO_
}

void DetectedLangArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.DetectedLanguage detected_lang = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_lang_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detected_lang(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DetectedLangArray)
}

::google::protobuf::uint8* DetectedLangArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.DetectedLanguage detected_lang = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_lang_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->detected_lang(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DetectedLangArray)
  return target;
}

size_t DetectedLangArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.DetectedLanguage detected_lang = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detected_lang_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detected_lang(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedLangArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLangArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectedLangArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DetectedLangArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DetectedLangArray)
    MergeFrom(*source);
  }
}

void DetectedLangArray::MergeFrom(const DetectedLangArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detected_lang_.MergeFrom(from.detected_lang_);
}

void DetectedLangArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLangArray::CopyFrom(const DetectedLangArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DetectedLangArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLangArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->detected_lang())) return false;
  return true;
}

void DetectedLangArray::Swap(DetectedLangArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectedLangArray::InternalSwap(DetectedLangArray* other) {
  using std::swap;
  detected_lang_.InternalSwap(&other->detected_lang_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectedLangArray::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectedLangArray

// repeated .ru.mail.go.webbase.blobs.DetectedLanguage detected_lang = 1;
int DetectedLangArray::detected_lang_size() const {
  return detected_lang_.size();
}
void DetectedLangArray::clear_detected_lang() {
  detected_lang_.Clear();
}
const ::ru::mail::go::webbase::blobs::DetectedLanguage& DetectedLangArray::detected_lang(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DetectedLangArray.detected_lang)
  return detected_lang_.Get(index);
}
::ru::mail::go::webbase::blobs::DetectedLanguage* DetectedLangArray::mutable_detected_lang(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DetectedLangArray.detected_lang)
  return detected_lang_.Mutable(index);
}
::ru::mail::go::webbase::blobs::DetectedLanguage* DetectedLangArray::add_detected_lang() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DetectedLangArray.detected_lang)
  return detected_lang_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::DetectedLanguage >*
DetectedLangArray::mutable_detected_lang() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DetectedLangArray.detected_lang)
  return &detected_lang_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::DetectedLanguage >&
DetectedLangArray::detected_lang() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DetectedLangArray.detected_lang)
  return detected_lang_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteLanguage::kLanguageFieldNumber;
const int SiteLanguage::kPageNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteLanguage::SiteLanguage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiteLanguage)
}
SiteLanguage::SiteLanguage(const SiteLanguage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_num_) -
    reinterpret_cast<char*>(&language_)) + sizeof(page_num_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiteLanguage)
}

void SiteLanguage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&language_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_num_) -
      reinterpret_cast<char*>(&language_)) + sizeof(page_num_));
}

SiteLanguage::~SiteLanguage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiteLanguage)
  SharedDtor();
}

void SiteLanguage::SharedDtor() {
}

void SiteLanguage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiteLanguage::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiteLanguage& SiteLanguage::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiteLanguage* SiteLanguage::New(::google::protobuf::Arena* arena) const {
  SiteLanguage* n = new SiteLanguage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiteLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiteLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_num_) -
        reinterpret_cast<char*>(&language_)) + sizeof(page_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiteLanguage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiteLanguage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.Language language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 page_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_page_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiteLanguage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiteLanguage)
  return false;
#undef DO_
}

void SiteLanguage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiteLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->language(), output);
  }

  // required int32 page_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiteLanguage)
}

::google::protobuf::uint8* SiteLanguage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiteLanguage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->language(), target);
  }

  // required int32 page_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiteLanguage)
  return target;
}

size_t SiteLanguage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.SiteLanguage)
  size_t total_size = 0;

  if (has_language()) {
    // required .ru.mail.go.webbase.blobs.Language language = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  if (has_page_num()) {
    // required int32 page_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_num());
  }

  return total_size;
}
size_t SiteLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiteLanguage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.webbase.blobs.Language language = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());

    // required int32 page_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteLanguage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiteLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteLanguage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiteLanguage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiteLanguage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiteLanguage)
    MergeFrom(*source);
  }
}

void SiteLanguage::MergeFrom(const SiteLanguage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiteLanguage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000002u) {
      page_num_ = from.page_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteLanguage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiteLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteLanguage::CopyFrom(const SiteLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiteLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLanguage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SiteLanguage::Swap(SiteLanguage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteLanguage::InternalSwap(SiteLanguage* other) {
  using std::swap;
  swap(language_, other->language_);
  swap(page_num_, other->page_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiteLanguage::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiteLanguage

// required .ru.mail.go.webbase.blobs.Language language = 1;
bool SiteLanguage::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SiteLanguage::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void SiteLanguage::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void SiteLanguage::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language SiteLanguage::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteLanguage.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void SiteLanguage::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteLanguage.language)
}

// required int32 page_num = 2;
bool SiteLanguage::has_page_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SiteLanguage::set_has_page_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SiteLanguage::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SiteLanguage::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
::google::protobuf::int32 SiteLanguage::page_num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteLanguage.page_num)
  return page_num_;
}
void SiteLanguage::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SiteLanguage.page_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteLanguageArray::kSiteLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteLanguageArray::SiteLanguageArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SiteLanguageArray)
}
SiteLanguageArray::SiteLanguageArray(const SiteLanguageArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      site_languages_(from.site_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SiteLanguageArray)
}

void SiteLanguageArray::SharedCtor() {
  _cached_size_ = 0;
}

SiteLanguageArray::~SiteLanguageArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SiteLanguageArray)
  SharedDtor();
}

void SiteLanguageArray::SharedDtor() {
}

void SiteLanguageArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiteLanguageArray::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SiteLanguageArray& SiteLanguageArray::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

SiteLanguageArray* SiteLanguageArray::New(::google::protobuf::Arena* arena) const {
  SiteLanguageArray* n = new SiteLanguageArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SiteLanguageArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_languages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SiteLanguageArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.SiteLanguage site_languages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SiteLanguageArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SiteLanguageArray)
  return false;
#undef DO_
}

void SiteLanguageArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiteLanguage site_languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_languages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->site_languages(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SiteLanguageArray)
}

::google::protobuf::uint8* SiteLanguageArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.SiteLanguage site_languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_languages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->site_languages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SiteLanguageArray)
  return target;
}

size_t SiteLanguageArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.SiteLanguage site_languages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->site_languages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site_languages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteLanguageArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteLanguageArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SiteLanguageArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SiteLanguageArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SiteLanguageArray)
    MergeFrom(*source);
  }
}

void SiteLanguageArray::MergeFrom(const SiteLanguageArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_languages_.MergeFrom(from.site_languages_);
}

void SiteLanguageArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteLanguageArray::CopyFrom(const SiteLanguageArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SiteLanguageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLanguageArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->site_languages())) return false;
  return true;
}

void SiteLanguageArray::Swap(SiteLanguageArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteLanguageArray::InternalSwap(SiteLanguageArray* other) {
  using std::swap;
  site_languages_.InternalSwap(&other->site_languages_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SiteLanguageArray::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SiteLanguageArray

// repeated .ru.mail.go.webbase.blobs.SiteLanguage site_languages = 1;
int SiteLanguageArray::site_languages_size() const {
  return site_languages_.size();
}
void SiteLanguageArray::clear_site_languages() {
  site_languages_.Clear();
}
const ::ru::mail::go::webbase::blobs::SiteLanguage& SiteLanguageArray::site_languages(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SiteLanguageArray.site_languages)
  return site_languages_.Get(index);
}
::ru::mail::go::webbase::blobs::SiteLanguage* SiteLanguageArray::mutable_site_languages(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.SiteLanguageArray.site_languages)
  return site_languages_.Mutable(index);
}
::ru::mail::go::webbase::blobs::SiteLanguage* SiteLanguageArray::add_site_languages() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.SiteLanguageArray.site_languages)
  return site_languages_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiteLanguage >*
SiteLanguageArray::mutable_site_languages() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.SiteLanguageArray.site_languages)
  return &site_languages_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::SiteLanguage >&
SiteLanguageArray::site_languages() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.SiteLanguageArray.site_languages)
  return site_languages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsedHtml::kLanguageFieldNumber;
const int ParsedHtml::kEncodingFieldNumber;
const int ParsedHtml::kCanonicalLinkFieldNumber;
const int ParsedHtml::kFlagMetaRobotsFieldNumber;
const int ParsedHtml::kPageErrorFieldNumber;
const int ParsedHtml::kLinksFieldNumber;
const int ParsedHtml::kRefreshLinkFieldNumber;
const int ParsedHtml::kRefreshTimeFieldNumber;
const int ParsedHtml::kBaseLinkFieldNumber;
const int ParsedHtml::kFeaturesFieldNumber;
const int ParsedHtml::kTextFieldNumber;
const int ParsedHtml::kDetLangFieldNumber;
const int ParsedHtml::kTitleFieldNumber;
const int ParsedHtml::kDescriptionFieldNumber;
const int ParsedHtml::kDescriptionQualityFieldNumber;
const int ParsedHtml::kFlagAjaxFragmentFieldNumber;
const int ParsedHtml::kOgDescriptionFieldNumber;
const int ParsedHtml::kOgDescriptionQualityFieldNumber;
const int ParsedHtml::kIsMetaContentFieldNumber;
const int ParsedHtml::kOgImageFieldNumber;
const int ParsedHtml::kOgTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsedHtml::ParsedHtml()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ParsedHtml)
}
ParsedHtml::ParsedHtml(const ParsedHtml& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canonical_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_canonical_link()) {
    canonical_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_link_);
  }
  refresh_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refresh_link()) {
    refresh_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_link_);
  }
  refresh_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refresh_time()) {
    refresh_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_time_);
  }
  base_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_link()) {
    base_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_link_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  og_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_og_description()) {
    og_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_description_);
  }
  og_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_og_image()) {
    og_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_image_);
  }
  og_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_og_title()) {
    og_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_title_);
  }
  if (from.has_features()) {
    features_ = new ::ru::mail::go::webbase::blobs::Features(*from.features_);
  } else {
    features_ = NULL;
  }
  if (from.has_detlang()) {
    detlang_ = new ::ru::mail::go::webbase::blobs::DetectedLangArray(*from.detlang_);
  } else {
    detlang_ = NULL;
  }
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_error_) -
    reinterpret_cast<char*>(&language_)) + sizeof(page_error_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ParsedHtml)
}

void ParsedHtml::SharedCtor() {
  _cached_size_ = 0;
  canonical_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_meta_content_) -
      reinterpret_cast<char*>(&features_)) + sizeof(is_meta_content_));
  page_error_ = 1;
}

ParsedHtml::~ParsedHtml() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ParsedHtml)
  SharedDtor();
}

void ParsedHtml::SharedDtor() {
  canonical_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
  if (this != internal_default_instance()) delete detlang_;
}

void ParsedHtml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsedHtml::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsedHtml& ParsedHtml::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParsedHtml* ParsedHtml::New(::google::protobuf::Arena* arena) const {
  ParsedHtml* n = new ParsedHtml;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsedHtml::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ParsedHtml)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!canonical_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*canonical_link_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!refresh_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*refresh_link_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!refresh_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*refresh_time_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!base_link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*base_link_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!og_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*og_description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!og_image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*og_image_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!og_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*og_title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(features_ != NULL);
      features_->::ru::mail::go::webbase::blobs::Features::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(detlang_ != NULL);
      detlang_->::ru::mail::go::webbase::blobs::DetectedLangArray::Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&description_quality_) -
        reinterpret_cast<char*>(&language_)) + sizeof(description_quality_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&flag_ajax_fragment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_meta_content_) -
        reinterpret_cast<char*>(&flag_ajax_fragment_)) + sizeof(is_meta_content_));
    page_error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParsedHtml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ParsedHtml)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.Language language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string canonical_link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->canonical_link().data(), static_cast<int>(this->canonical_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ParsedHtml.canonical_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag_meta_robots = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_flag_meta_robots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_meta_robots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ParsedHtml.page_errors page_error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ParsedHtml_page_errors_IsValid(value)) {
            set_page_error(static_cast< ::ru::mail::go::webbase::blobs::ParsedHtml_page_errors >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Links links = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string refresh_link = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refresh_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refresh_link().data(), static_cast<int>(this->refresh_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ParsedHtml.refresh_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string refresh_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refresh_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refresh_time().data(), static_cast<int>(this->refresh_time().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ParsedHtml.refresh_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base_link = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_link().data(), static_cast<int>(this->base_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ParsedHtml.base_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Features features = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.DetectedLangArray detLang = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detlang()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes title = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes description = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool description_quality = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_description_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &description_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flag_ajax_fragment = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_flag_ajax_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_ajax_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes og_description = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_og_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool og_description_quality = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_og_description_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &og_description_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_meta_content = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_meta_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_meta_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes og_image = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_og_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes og_title = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_og_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ParsedHtml)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ParsedHtml)
  return false;
#undef DO_
}

void ParsedHtml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ParsedHtml)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->language(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // optional string canonical_link = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonical_link().data(), static_cast<int>(this->canonical_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.canonical_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->canonical_link(), output);
  }

  // optional int32 flag_meta_robots = 4;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag_meta_robots(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ParsedHtml.page_errors page_error = 5;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->page_error(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Links links = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->links(static_cast<int>(i)), output);
  }

  // optional string refresh_link = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_link().data(), static_cast<int>(this->refresh_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.refresh_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->refresh_link(), output);
  }

  // optional string refresh_time = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_time().data(), static_cast<int>(this->refresh_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.refresh_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->refresh_time(), output);
  }

  // optional string base_link = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_link().data(), static_cast<int>(this->base_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.base_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->base_link(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Features features = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->features_, output);
  }

  // optional bytes text = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->text(), output);
  }

  // optional .ru.mail.go.webbase.blobs.DetectedLangArray detLang = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->detlang_, output);
  }

  // optional bytes title = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->title(), output);
  }

  // optional bytes description = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->description(), output);
  }

  // optional bool description_quality = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->description_quality(), output);
  }

  // optional bool flag_ajax_fragment = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->flag_ajax_fragment(), output);
  }

  // optional bytes og_description = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->og_description(), output);
  }

  // optional bool og_description_quality = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->og_description_quality(), output);
  }

  // optional bool is_meta_content = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_meta_content(), output);
  }

  // optional bytes og_image = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->og_image(), output);
  }

  // optional bytes og_title = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->og_title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ParsedHtml)
}

::google::protobuf::uint8* ParsedHtml::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ParsedHtml)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.Language language = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->language(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // optional string canonical_link = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->canonical_link().data(), static_cast<int>(this->canonical_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.canonical_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->canonical_link(), target);
  }

  // optional int32 flag_meta_robots = 4;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag_meta_robots(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ParsedHtml.page_errors page_error = 5;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->page_error(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Links links = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->links(static_cast<int>(i)), deterministic, target);
  }

  // optional string refresh_link = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_link().data(), static_cast<int>(this->refresh_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.refresh_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->refresh_link(), target);
  }

  // optional string refresh_time = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refresh_time().data(), static_cast<int>(this->refresh_time().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.refresh_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->refresh_time(), target);
  }

  // optional string base_link = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_link().data(), static_cast<int>(this->base_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParsedHtml.base_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->base_link(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Features features = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->features_, deterministic, target);
  }

  // optional bytes text = 11;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->text(), target);
  }

  // optional .ru.mail.go.webbase.blobs.DetectedLangArray detLang = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->detlang_, deterministic, target);
  }

  // optional bytes title = 13;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->title(), target);
  }

  // optional bytes description = 14;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->description(), target);
  }

  // optional bool description_quality = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->description_quality(), target);
  }

  // optional bool flag_ajax_fragment = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->flag_ajax_fragment(), target);
  }

  // optional bytes og_description = 17;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->og_description(), target);
  }

  // optional bool og_description_quality = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->og_description_quality(), target);
  }

  // optional bool is_meta_content = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_meta_content(), target);
  }

  // optional bytes og_image = 20;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->og_image(), target);
  }

  // optional bytes og_title = 21;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->og_title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ParsedHtml)
  return target;
}

size_t ParsedHtml::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ParsedHtml)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.Links links = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string canonical_link = 3;
    if (has_canonical_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canonical_link());
    }

    // optional string refresh_link = 7;
    if (has_refresh_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refresh_link());
    }

    // optional string refresh_time = 8;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refresh_time());
    }

    // optional string base_link = 9;
    if (has_base_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_link());
    }

    // optional bytes text = 11;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

    // optional bytes title = 13;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes description = 14;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional bytes og_description = 17;
    if (has_og_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->og_description());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes og_image = 20;
    if (has_og_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->og_image());
    }

    // optional bytes og_title = 21;
    if (has_og_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->og_title());
    }

    // optional .ru.mail.go.webbase.blobs.Features features = 10;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->features_);
    }

    // optional .ru.mail.go.webbase.blobs.DetectedLangArray detLang = 12;
    if (has_detlang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detlang_);
    }

    // optional .ru.mail.go.webbase.blobs.Language language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional int32 flag_meta_robots = 4;
    if (has_flag_meta_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_meta_robots());
    }

    // optional bool description_quality = 15;
    if (has_description_quality()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool flag_ajax_fragment = 16;
    if (has_flag_ajax_fragment()) {
      total_size += 2 + 1;
    }

    // optional bool og_description_quality = 18;
    if (has_og_description_quality()) {
      total_size += 2 + 1;
    }

    // optional bool is_meta_content = 19 [default = false];
    if (has_is_meta_content()) {
      total_size += 2 + 1;
    }

    // optional .ru.mail.go.webbase.blobs.ParsedHtml.page_errors page_error = 5;
    if (has_page_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->page_error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsedHtml::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ParsedHtml)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsedHtml* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsedHtml>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ParsedHtml)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ParsedHtml)
    MergeFrom(*source);
  }
}

void ParsedHtml::MergeFrom(const ParsedHtml& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ParsedHtml)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_canonical_link();
      canonical_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_link_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_refresh_link();
      refresh_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_link_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_refresh_time();
      refresh_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refresh_time_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_base_link();
      base_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_link_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_og_description();
      og_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_description_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_og_image();
      og_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_image_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_og_title();
      og_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_title_);
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_features()->::ru::mail::go::webbase::blobs::Features::MergeFrom(from.features());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_detlang()->::ru::mail::go::webbase::blobs::DetectedLangArray::MergeFrom(from.detlang());
    }
    if (cached_has_bits & 0x00001000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00002000u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00004000u) {
      flag_meta_robots_ = from.flag_meta_robots_;
    }
    if (cached_has_bits & 0x00008000u) {
      description_quality_ = from.description_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      flag_ajax_fragment_ = from.flag_ajax_fragment_;
    }
    if (cached_has_bits & 0x00020000u) {
      og_description_quality_ = from.og_description_quality_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_meta_content_ = from.is_meta_content_;
    }
    if (cached_has_bits & 0x00080000u) {
      page_error_ = from.page_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParsedHtml::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ParsedHtml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsedHtml::CopyFrom(const ParsedHtml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ParsedHtml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsedHtml::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  if (has_features()) {
    if (!this->features_->IsInitialized()) return false;
  }
  if (has_detlang()) {
    if (!this->detlang_->IsInitialized()) return false;
  }
  return true;
}

void ParsedHtml::Swap(ParsedHtml* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsedHtml::InternalSwap(ParsedHtml* other) {
  using std::swap;
  links_.InternalSwap(&other->links_);
  canonical_link_.Swap(&other->canonical_link_);
  refresh_link_.Swap(&other->refresh_link_);
  refresh_time_.Swap(&other->refresh_time_);
  base_link_.Swap(&other->base_link_);
  text_.Swap(&other->text_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  og_description_.Swap(&other->og_description_);
  og_image_.Swap(&other->og_image_);
  og_title_.Swap(&other->og_title_);
  swap(features_, other->features_);
  swap(detlang_, other->detlang_);
  swap(language_, other->language_);
  swap(encoding_, other->encoding_);
  swap(flag_meta_robots_, other->flag_meta_robots_);
  swap(description_quality_, other->description_quality_);
  swap(flag_ajax_fragment_, other->flag_ajax_fragment_);
  swap(og_description_quality_, other->og_description_quality_);
  swap(is_meta_content_, other->is_meta_content_);
  swap(page_error_, other->page_error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsedHtml::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParsedHtml

// optional .ru.mail.go.webbase.blobs.Language language = 1;
bool ParsedHtml::has_language() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ParsedHtml::set_has_language() {
  _has_bits_[0] |= 0x00001000u;
}
void ParsedHtml::clear_has_language() {
  _has_bits_[0] &= ~0x00001000u;
}
void ParsedHtml::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language ParsedHtml::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void ParsedHtml::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.language)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 2;
bool ParsedHtml::has_encoding() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ParsedHtml::set_has_encoding() {
  _has_bits_[0] |= 0x00002000u;
}
void ParsedHtml::clear_has_encoding() {
  _has_bits_[0] &= ~0x00002000u;
}
void ParsedHtml::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding ParsedHtml::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void ParsedHtml::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.encoding)
}

// optional string canonical_link = 3;
bool ParsedHtml::has_canonical_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParsedHtml::set_has_canonical_link() {
  _has_bits_[0] |= 0x00000001u;
}
void ParsedHtml::clear_has_canonical_link() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParsedHtml::clear_canonical_link() {
  canonical_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonical_link();
}
const ::std::string& ParsedHtml::canonical_link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
  return canonical_link_.GetNoArena();
}
void ParsedHtml::set_canonical_link(const ::std::string& value) {
  set_has_canonical_link();
  canonical_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
}
#if LANG_CXX11
void ParsedHtml::set_canonical_link(::std::string&& value) {
  set_has_canonical_link();
  canonical_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
}
#endif
void ParsedHtml::set_canonical_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_canonical_link();
  canonical_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
}
void ParsedHtml::set_canonical_link(const char* value, size_t size) {
  set_has_canonical_link();
  canonical_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
}
::std::string* ParsedHtml::mutable_canonical_link() {
  set_has_canonical_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
  return canonical_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_canonical_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
  clear_has_canonical_link();
  return canonical_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_canonical_link(::std::string* canonical_link) {
  if (canonical_link != NULL) {
    set_has_canonical_link();
  } else {
    clear_has_canonical_link();
  }
  canonical_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.canonical_link)
}

// optional int32 flag_meta_robots = 4;
bool ParsedHtml::has_flag_meta_robots() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ParsedHtml::set_has_flag_meta_robots() {
  _has_bits_[0] |= 0x00004000u;
}
void ParsedHtml::clear_has_flag_meta_robots() {
  _has_bits_[0] &= ~0x00004000u;
}
void ParsedHtml::clear_flag_meta_robots() {
  flag_meta_robots_ = 0;
  clear_has_flag_meta_robots();
}
::google::protobuf::int32 ParsedHtml::flag_meta_robots() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.flag_meta_robots)
  return flag_meta_robots_;
}
void ParsedHtml::set_flag_meta_robots(::google::protobuf::int32 value) {
  set_has_flag_meta_robots();
  flag_meta_robots_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.flag_meta_robots)
}

// optional .ru.mail.go.webbase.blobs.ParsedHtml.page_errors page_error = 5;
bool ParsedHtml::has_page_error() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ParsedHtml::set_has_page_error() {
  _has_bits_[0] |= 0x00080000u;
}
void ParsedHtml::clear_has_page_error() {
  _has_bits_[0] &= ~0x00080000u;
}
void ParsedHtml::clear_page_error() {
  page_error_ = 1;
  clear_has_page_error();
}
::ru::mail::go::webbase::blobs::ParsedHtml_page_errors ParsedHtml::page_error() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.page_error)
  return static_cast< ::ru::mail::go::webbase::blobs::ParsedHtml_page_errors >(page_error_);
}
void ParsedHtml::set_page_error(::ru::mail::go::webbase::blobs::ParsedHtml_page_errors value) {
  assert(::ru::mail::go::webbase::blobs::ParsedHtml_page_errors_IsValid(value));
  set_has_page_error();
  page_error_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.page_error)
}

// repeated .ru.mail.go.webbase.blobs.Links links = 6;
int ParsedHtml::links_size() const {
  return links_.size();
}
void ParsedHtml::clear_links() {
  links_.Clear();
}
const ::ru::mail::go::webbase::blobs::Links& ParsedHtml::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.links)
  return links_.Get(index);
}
::ru::mail::go::webbase::blobs::Links* ParsedHtml::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.links)
  return links_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Links* ParsedHtml::add_links() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ParsedHtml.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Links >*
ParsedHtml::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ParsedHtml.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Links >&
ParsedHtml::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ParsedHtml.links)
  return links_;
}

// optional string refresh_link = 7;
bool ParsedHtml::has_refresh_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParsedHtml::set_has_refresh_link() {
  _has_bits_[0] |= 0x00000002u;
}
void ParsedHtml::clear_has_refresh_link() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParsedHtml::clear_refresh_link() {
  refresh_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_refresh_link();
}
const ::std::string& ParsedHtml::refresh_link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
  return refresh_link_.GetNoArena();
}
void ParsedHtml::set_refresh_link(const ::std::string& value) {
  set_has_refresh_link();
  refresh_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
}
#if LANG_CXX11
void ParsedHtml::set_refresh_link(::std::string&& value) {
  set_has_refresh_link();
  refresh_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
}
#endif
void ParsedHtml::set_refresh_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refresh_link();
  refresh_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
}
void ParsedHtml::set_refresh_link(const char* value, size_t size) {
  set_has_refresh_link();
  refresh_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
}
::std::string* ParsedHtml::mutable_refresh_link() {
  set_has_refresh_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
  return refresh_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_refresh_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
  clear_has_refresh_link();
  return refresh_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_refresh_link(::std::string* refresh_link) {
  if (refresh_link != NULL) {
    set_has_refresh_link();
  } else {
    clear_has_refresh_link();
  }
  refresh_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.refresh_link)
}

// optional string refresh_time = 8;
bool ParsedHtml::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParsedHtml::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ParsedHtml::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParsedHtml::clear_refresh_time() {
  refresh_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_refresh_time();
}
const ::std::string& ParsedHtml::refresh_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
  return refresh_time_.GetNoArena();
}
void ParsedHtml::set_refresh_time(const ::std::string& value) {
  set_has_refresh_time();
  refresh_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
}
#if LANG_CXX11
void ParsedHtml::set_refresh_time(::std::string&& value) {
  set_has_refresh_time();
  refresh_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
}
#endif
void ParsedHtml::set_refresh_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_refresh_time();
  refresh_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
}
void ParsedHtml::set_refresh_time(const char* value, size_t size) {
  set_has_refresh_time();
  refresh_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
}
::std::string* ParsedHtml::mutable_refresh_time() {
  set_has_refresh_time();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
  return refresh_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_refresh_time() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
  clear_has_refresh_time();
  return refresh_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_refresh_time(::std::string* refresh_time) {
  if (refresh_time != NULL) {
    set_has_refresh_time();
  } else {
    clear_has_refresh_time();
  }
  refresh_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), refresh_time);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.refresh_time)
}

// optional string base_link = 9;
bool ParsedHtml::has_base_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParsedHtml::set_has_base_link() {
  _has_bits_[0] |= 0x00000008u;
}
void ParsedHtml::clear_has_base_link() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParsedHtml::clear_base_link() {
  base_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base_link();
}
const ::std::string& ParsedHtml::base_link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
  return base_link_.GetNoArena();
}
void ParsedHtml::set_base_link(const ::std::string& value) {
  set_has_base_link();
  base_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
}
#if LANG_CXX11
void ParsedHtml::set_base_link(::std::string&& value) {
  set_has_base_link();
  base_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
}
#endif
void ParsedHtml::set_base_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base_link();
  base_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
}
void ParsedHtml::set_base_link(const char* value, size_t size) {
  set_has_base_link();
  base_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
}
::std::string* ParsedHtml::mutable_base_link() {
  set_has_base_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
  return base_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_base_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
  clear_has_base_link();
  return base_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_base_link(::std::string* base_link) {
  if (base_link != NULL) {
    set_has_base_link();
  } else {
    clear_has_base_link();
  }
  base_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.base_link)
}

// optional .ru.mail.go.webbase.blobs.Features features = 10;
bool ParsedHtml::has_features() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ParsedHtml::set_has_features() {
  _has_bits_[0] |= 0x00000400u;
}
void ParsedHtml::clear_has_features() {
  _has_bits_[0] &= ~0x00000400u;
}
void ParsedHtml::clear_features() {
  if (features_ != NULL) features_->::ru::mail::go::webbase::blobs::Features::Clear();
  clear_has_features();
}
const ::ru::mail::go::webbase::blobs::Features& ParsedHtml::features() const {
  const ::ru::mail::go::webbase::blobs::Features* p = features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::Features*>(
      &::ru::mail::go::webbase::blobs::_Features_default_instance_);
}
::ru::mail::go::webbase::blobs::Features* ParsedHtml::mutable_features() {
  set_has_features();
  if (features_ == NULL) {
    features_ = new ::ru::mail::go::webbase::blobs::Features;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.features)
  return features_;
}
::ru::mail::go::webbase::blobs::Features* ParsedHtml::release_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.features)
  clear_has_features();
  ::ru::mail::go::webbase::blobs::Features* temp = features_;
  features_ = NULL;
  return temp;
}
void ParsedHtml::set_allocated_features(::ru::mail::go::webbase::blobs::Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    set_has_features();
  } else {
    clear_has_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.features)
}

// optional bytes text = 11;
bool ParsedHtml::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ParsedHtml::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
void ParsedHtml::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
void ParsedHtml::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& ParsedHtml::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.text)
  return text_.GetNoArena();
}
void ParsedHtml::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.text)
}
#if LANG_CXX11
void ParsedHtml::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.text)
}
#endif
void ParsedHtml::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.text)
}
void ParsedHtml::set_text(const void* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.text)
}
::std::string* ParsedHtml::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.text)
}

// optional .ru.mail.go.webbase.blobs.DetectedLangArray detLang = 12;
bool ParsedHtml::has_detlang() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ParsedHtml::set_has_detlang() {
  _has_bits_[0] |= 0x00000800u;
}
void ParsedHtml::clear_has_detlang() {
  _has_bits_[0] &= ~0x00000800u;
}
void ParsedHtml::clear_detlang() {
  if (detlang_ != NULL) detlang_->::ru::mail::go::webbase::blobs::DetectedLangArray::Clear();
  clear_has_detlang();
}
const ::ru::mail::go::webbase::blobs::DetectedLangArray& ParsedHtml::detlang() const {
  const ::ru::mail::go::webbase::blobs::DetectedLangArray* p = detlang_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.detLang)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DetectedLangArray*>(
      &::ru::mail::go::webbase::blobs::_DetectedLangArray_default_instance_);
}
::ru::mail::go::webbase::blobs::DetectedLangArray* ParsedHtml::mutable_detlang() {
  set_has_detlang();
  if (detlang_ == NULL) {
    detlang_ = new ::ru::mail::go::webbase::blobs::DetectedLangArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.detLang)
  return detlang_;
}
::ru::mail::go::webbase::blobs::DetectedLangArray* ParsedHtml::release_detlang() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.detLang)
  clear_has_detlang();
  ::ru::mail::go::webbase::blobs::DetectedLangArray* temp = detlang_;
  detlang_ = NULL;
  return temp;
}
void ParsedHtml::set_allocated_detlang(::ru::mail::go::webbase::blobs::DetectedLangArray* detlang) {
  delete detlang_;
  detlang_ = detlang;
  if (detlang) {
    set_has_detlang();
  } else {
    clear_has_detlang();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.detLang)
}

// optional bytes title = 13;
bool ParsedHtml::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ParsedHtml::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void ParsedHtml::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void ParsedHtml::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ParsedHtml::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.title)
  return title_.GetNoArena();
}
void ParsedHtml::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.title)
}
#if LANG_CXX11
void ParsedHtml::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.title)
}
#endif
void ParsedHtml::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.title)
}
void ParsedHtml::set_title(const void* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.title)
}
::std::string* ParsedHtml::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.title)
}

// optional bytes description = 14;
bool ParsedHtml::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ParsedHtml::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void ParsedHtml::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void ParsedHtml::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ParsedHtml::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.description)
  return description_.GetNoArena();
}
void ParsedHtml::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.description)
}
#if LANG_CXX11
void ParsedHtml::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.description)
}
#endif
void ParsedHtml::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.description)
}
void ParsedHtml::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.description)
}
::std::string* ParsedHtml::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.description)
}

// optional bool description_quality = 15;
bool ParsedHtml::has_description_quality() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ParsedHtml::set_has_description_quality() {
  _has_bits_[0] |= 0x00008000u;
}
void ParsedHtml::clear_has_description_quality() {
  _has_bits_[0] &= ~0x00008000u;
}
void ParsedHtml::clear_description_quality() {
  description_quality_ = false;
  clear_has_description_quality();
}
bool ParsedHtml::description_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.description_quality)
  return description_quality_;
}
void ParsedHtml::set_description_quality(bool value) {
  set_has_description_quality();
  description_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.description_quality)
}

// optional bool flag_ajax_fragment = 16;
bool ParsedHtml::has_flag_ajax_fragment() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ParsedHtml::set_has_flag_ajax_fragment() {
  _has_bits_[0] |= 0x00010000u;
}
void ParsedHtml::clear_has_flag_ajax_fragment() {
  _has_bits_[0] &= ~0x00010000u;
}
void ParsedHtml::clear_flag_ajax_fragment() {
  flag_ajax_fragment_ = false;
  clear_has_flag_ajax_fragment();
}
bool ParsedHtml::flag_ajax_fragment() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.flag_ajax_fragment)
  return flag_ajax_fragment_;
}
void ParsedHtml::set_flag_ajax_fragment(bool value) {
  set_has_flag_ajax_fragment();
  flag_ajax_fragment_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.flag_ajax_fragment)
}

// optional bytes og_description = 17;
bool ParsedHtml::has_og_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ParsedHtml::set_has_og_description() {
  _has_bits_[0] |= 0x00000080u;
}
void ParsedHtml::clear_has_og_description() {
  _has_bits_[0] &= ~0x00000080u;
}
void ParsedHtml::clear_og_description() {
  og_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_og_description();
}
const ::std::string& ParsedHtml::og_description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
  return og_description_.GetNoArena();
}
void ParsedHtml::set_og_description(const ::std::string& value) {
  set_has_og_description();
  og_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
}
#if LANG_CXX11
void ParsedHtml::set_og_description(::std::string&& value) {
  set_has_og_description();
  og_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
}
#endif
void ParsedHtml::set_og_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_og_description();
  og_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
}
void ParsedHtml::set_og_description(const void* value, size_t size) {
  set_has_og_description();
  og_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
}
::std::string* ParsedHtml::mutable_og_description() {
  set_has_og_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
  return og_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_og_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
  clear_has_og_description();
  return og_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_og_description(::std::string* og_description) {
  if (og_description != NULL) {
    set_has_og_description();
  } else {
    clear_has_og_description();
  }
  og_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), og_description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.og_description)
}

// optional bool og_description_quality = 18;
bool ParsedHtml::has_og_description_quality() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ParsedHtml::set_has_og_description_quality() {
  _has_bits_[0] |= 0x00020000u;
}
void ParsedHtml::clear_has_og_description_quality() {
  _has_bits_[0] &= ~0x00020000u;
}
void ParsedHtml::clear_og_description_quality() {
  og_description_quality_ = false;
  clear_has_og_description_quality();
}
bool ParsedHtml::og_description_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.og_description_quality)
  return og_description_quality_;
}
void ParsedHtml::set_og_description_quality(bool value) {
  set_has_og_description_quality();
  og_description_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.og_description_quality)
}

// optional bool is_meta_content = 19 [default = false];
bool ParsedHtml::has_is_meta_content() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ParsedHtml::set_has_is_meta_content() {
  _has_bits_[0] |= 0x00040000u;
}
void ParsedHtml::clear_has_is_meta_content() {
  _has_bits_[0] &= ~0x00040000u;
}
void ParsedHtml::clear_is_meta_content() {
  is_meta_content_ = false;
  clear_has_is_meta_content();
}
bool ParsedHtml::is_meta_content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.is_meta_content)
  return is_meta_content_;
}
void ParsedHtml::set_is_meta_content(bool value) {
  set_has_is_meta_content();
  is_meta_content_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.is_meta_content)
}

// optional bytes og_image = 20;
bool ParsedHtml::has_og_image() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ParsedHtml::set_has_og_image() {
  _has_bits_[0] |= 0x00000100u;
}
void ParsedHtml::clear_has_og_image() {
  _has_bits_[0] &= ~0x00000100u;
}
void ParsedHtml::clear_og_image() {
  og_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_og_image();
}
const ::std::string& ParsedHtml::og_image() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
  return og_image_.GetNoArena();
}
void ParsedHtml::set_og_image(const ::std::string& value) {
  set_has_og_image();
  og_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
}
#if LANG_CXX11
void ParsedHtml::set_og_image(::std::string&& value) {
  set_has_og_image();
  og_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
}
#endif
void ParsedHtml::set_og_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_og_image();
  og_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
}
void ParsedHtml::set_og_image(const void* value, size_t size) {
  set_has_og_image();
  og_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
}
::std::string* ParsedHtml::mutable_og_image() {
  set_has_og_image();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
  return og_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_og_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
  clear_has_og_image();
  return og_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_og_image(::std::string* og_image) {
  if (og_image != NULL) {
    set_has_og_image();
  } else {
    clear_has_og_image();
  }
  og_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), og_image);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.og_image)
}

// optional bytes og_title = 21;
bool ParsedHtml::has_og_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ParsedHtml::set_has_og_title() {
  _has_bits_[0] |= 0x00000200u;
}
void ParsedHtml::clear_has_og_title() {
  _has_bits_[0] &= ~0x00000200u;
}
void ParsedHtml::clear_og_title() {
  og_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_og_title();
}
const ::std::string& ParsedHtml::og_title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
  return og_title_.GetNoArena();
}
void ParsedHtml::set_og_title(const ::std::string& value) {
  set_has_og_title();
  og_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
}
#if LANG_CXX11
void ParsedHtml::set_og_title(::std::string&& value) {
  set_has_og_title();
  og_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
}
#endif
void ParsedHtml::set_og_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_og_title();
  og_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
}
void ParsedHtml::set_og_title(const void* value, size_t size) {
  set_has_og_title();
  og_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
}
::std::string* ParsedHtml::mutable_og_title() {
  set_has_og_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
  return og_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParsedHtml::release_og_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
  clear_has_og_title();
  return og_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParsedHtml::set_allocated_og_title(::std::string* og_title) {
  if (og_title != NULL) {
    set_has_og_title();
  } else {
    clear_has_og_title();
  }
  og_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), og_title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedHtml.og_title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaDescription::kDescritptionFieldNumber;
const int MetaDescription::kDescriptionQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaDescription::MetaDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MetaDescription)
}
MetaDescription::MetaDescription(const MetaDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descritption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_descritption()) {
    descritption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descritption_);
  }
  description_quality_ = from.description_quality_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MetaDescription)
}

void MetaDescription::SharedCtor() {
  _cached_size_ = 0;
  descritption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_quality_ = false;
}

MetaDescription::~MetaDescription() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MetaDescription)
  SharedDtor();
}

void MetaDescription::SharedDtor() {
  descritption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetaDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaDescription::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaDescription& MetaDescription::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaDescription* MetaDescription::New(::google::protobuf::Arena* arena) const {
  MetaDescription* n = new MetaDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MetaDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_descritption()) {
    GOOGLE_DCHECK(!descritption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*descritption_.UnsafeRawStringPointer())->clear();
  }
  description_quality_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetaDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MetaDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes descritption = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_descritption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool description_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_description_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &description_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MetaDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MetaDescription)
  return false;
#undef DO_
}

void MetaDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MetaDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes descritption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->descritption(), output);
  }

  // optional bool description_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->description_quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MetaDescription)
}

::google::protobuf::uint8* MetaDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MetaDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes descritption = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->descritption(), target);
  }

  // optional bool description_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->description_quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MetaDescription)
  return target;
}

size_t MetaDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MetaDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes descritption = 1;
    if (has_descritption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->descritption());
    }

    // optional bool description_quality = 2;
    if (has_description_quality()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MetaDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MetaDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MetaDescription)
    MergeFrom(*source);
  }
}

void MetaDescription::MergeFrom(const MetaDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MetaDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_descritption();
      descritption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descritption_);
    }
    if (cached_has_bits & 0x00000002u) {
      description_quality_ = from.description_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetaDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MetaDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaDescription::CopyFrom(const MetaDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MetaDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDescription::IsInitialized() const {
  return true;
}

void MetaDescription::Swap(MetaDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaDescription::InternalSwap(MetaDescription* other) {
  using std::swap;
  descritption_.Swap(&other->descritption_);
  swap(description_quality_, other->description_quality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaDescription::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaDescription

// optional bytes descritption = 1;
bool MetaDescription::has_descritption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaDescription::set_has_descritption() {
  _has_bits_[0] |= 0x00000001u;
}
void MetaDescription::clear_has_descritption() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetaDescription::clear_descritption() {
  descritption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_descritption();
}
const ::std::string& MetaDescription::descritption() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaDescription.descritption)
  return descritption_.GetNoArena();
}
void MetaDescription::set_descritption(const ::std::string& value) {
  set_has_descritption();
  descritption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaDescription.descritption)
}
#if LANG_CXX11
void MetaDescription::set_descritption(::std::string&& value) {
  set_has_descritption();
  descritption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MetaDescription.descritption)
}
#endif
void MetaDescription::set_descritption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_descritption();
  descritption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MetaDescription.descritption)
}
void MetaDescription::set_descritption(const void* value, size_t size) {
  set_has_descritption();
  descritption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MetaDescription.descritption)
}
::std::string* MetaDescription::mutable_descritption() {
  set_has_descritption();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaDescription.descritption)
  return descritption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaDescription::release_descritption() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MetaDescription.descritption)
  clear_has_descritption();
  return descritption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaDescription::set_allocated_descritption(::std::string* descritption) {
  if (descritption != NULL) {
    set_has_descritption();
  } else {
    clear_has_descritption();
  }
  descritption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descritption);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MetaDescription.descritption)
}

// optional bool description_quality = 2;
bool MetaDescription::has_description_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaDescription::set_has_description_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void MetaDescription::clear_has_description_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetaDescription::clear_description_quality() {
  description_quality_ = false;
  clear_has_description_quality();
}
bool MetaDescription::description_quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaDescription.description_quality)
  return description_quality_;
}
void MetaDescription::set_description_quality(bool value) {
  set_has_description_quality();
  description_quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaDescription.description_quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsedDoc::kTypeFieldNumber;
const int ParsedDoc::kHtmlInfoFieldNumber;
const int ParsedDoc::kProfilingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsedDoc::ParsedDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ParsedDoc)
}
ParsedDoc::ParsedDoc(const ParsedDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      profiling_(from.profiling_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_info()) {
    html_info_ = new ::ru::mail::go::webbase::blobs::ParsedHtml(*from.html_info_);
  } else {
    html_info_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ParsedDoc)
}

void ParsedDoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&html_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&html_info_)) + sizeof(type_));
}

ParsedDoc::~ParsedDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ParsedDoc)
  SharedDtor();
}

void ParsedDoc::SharedDtor() {
  if (this != internal_default_instance()) delete html_info_;
}

void ParsedDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsedDoc::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsedDoc& ParsedDoc::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParsedDoc* ParsedDoc::New(::google::protobuf::Arena* arena) const {
  ParsedDoc* n = new ParsedDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsedDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ParsedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profiling_.Clear();
  if (has_html_info()) {
    GOOGLE_DCHECK(html_info_ != NULL);
    html_info_->::ru::mail::go::webbase::blobs::ParsedHtml::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParsedDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ParsedDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ContentType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ParsedHtml html_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_html_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiling = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profiling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ParsedDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ParsedDoc)
  return false;
#undef DO_
}

void ParsedDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ParsedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ContentType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ParsedHtml html_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->html_info_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiling = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->profiling_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->profiling(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ParsedDoc)
}

::google::protobuf::uint8* ParsedDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ParsedDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ContentType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ParsedHtml html_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->html_info_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiling = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->profiling_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->profiling(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ParsedDoc)
  return target;
}

size_t ParsedDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ParsedDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ContentType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiling = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->profiling_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profiling(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.ParsedHtml html_info = 2;
  if (has_html_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->html_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsedDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ParsedDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsedDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsedDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ParsedDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ParsedDoc)
    MergeFrom(*source);
  }
}

void ParsedDoc::MergeFrom(const ParsedDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ParsedDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  profiling_.MergeFrom(from.profiling_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_html_info()->::ru::mail::go::webbase::blobs::ParsedHtml::MergeFrom(from.html_info());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParsedDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ParsedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsedDoc::CopyFrom(const ParsedDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ParsedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsedDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->profiling())) return false;
  if (has_html_info()) {
    if (!this->html_info_->IsInitialized()) return false;
  }
  return true;
}

void ParsedDoc::Swap(ParsedDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsedDoc::InternalSwap(ParsedDoc* other) {
  using std::swap;
  profiling_.InternalSwap(&other->profiling_);
  swap(html_info_, other->html_info_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsedDoc::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParsedDoc

// required .ru.mail.go.webbase.blobs.ContentType type = 1;
bool ParsedDoc::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParsedDoc::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ParsedDoc::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParsedDoc::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ContentType ParsedDoc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedDoc.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(type_);
}
void ParsedDoc::set_type(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParsedDoc.type)
}

// optional .ru.mail.go.webbase.blobs.ParsedHtml html_info = 2;
bool ParsedDoc::has_html_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParsedDoc::set_has_html_info() {
  _has_bits_[0] |= 0x00000001u;
}
void ParsedDoc::clear_has_html_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParsedDoc::clear_html_info() {
  if (html_info_ != NULL) html_info_->::ru::mail::go::webbase::blobs::ParsedHtml::Clear();
  clear_has_html_info();
}
const ::ru::mail::go::webbase::blobs::ParsedHtml& ParsedDoc::html_info() const {
  const ::ru::mail::go::webbase::blobs::ParsedHtml* p = html_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedDoc.html_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ParsedHtml*>(
      &::ru::mail::go::webbase::blobs::_ParsedHtml_default_instance_);
}
::ru::mail::go::webbase::blobs::ParsedHtml* ParsedDoc::mutable_html_info() {
  set_has_html_info();
  if (html_info_ == NULL) {
    html_info_ = new ::ru::mail::go::webbase::blobs::ParsedHtml;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedDoc.html_info)
  return html_info_;
}
::ru::mail::go::webbase::blobs::ParsedHtml* ParsedDoc::release_html_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParsedDoc.html_info)
  clear_has_html_info();
  ::ru::mail::go::webbase::blobs::ParsedHtml* temp = html_info_;
  html_info_ = NULL;
  return temp;
}
void ParsedDoc::set_allocated_html_info(::ru::mail::go::webbase::blobs::ParsedHtml* html_info) {
  delete html_info_;
  html_info_ = html_info;
  if (html_info) {
    set_has_html_info();
  } else {
    clear_has_html_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParsedDoc.html_info)
}

// repeated .ru.mail.go.webbase.blobs.ProfileInfo profiling = 3;
int ParsedDoc::profiling_size() const {
  return profiling_.size();
}
void ParsedDoc::clear_profiling() {
  profiling_.Clear();
}
const ::ru::mail::go::webbase::blobs::ProfileInfo& ParsedDoc::profiling(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParsedDoc.profiling)
  return profiling_.Get(index);
}
::ru::mail::go::webbase::blobs::ProfileInfo* ParsedDoc::mutable_profiling(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParsedDoc.profiling)
  return profiling_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ProfileInfo* ParsedDoc::add_profiling() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ParsedDoc.profiling)
  return profiling_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ProfileInfo >*
ParsedDoc::mutable_profiling() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ParsedDoc.profiling)
  return &profiling_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ProfileInfo >&
ParsedDoc::profiling() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ParsedDoc.profiling)
  return profiling_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StubDoc::kUrlFieldNumber;
const int StubDoc::kTypeFieldNumber;
const int StubDoc::kLanguageFieldNumber;
const int StubDoc::kEncodingFieldNumber;
const int StubDoc::kDownloadTimeFieldNumber;
const int StubDoc::kContentFieldNumber;
const int StubDoc::kScriptRemovedFieldNumber;
const int StubDoc::kContentSizeFieldNumber;
const int StubDoc::kCleanSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StubDoc::StubDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.StubDoc)
}
StubDoc::StubDoc(const StubDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&clean_size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(clean_size_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.StubDoc)
}

void StubDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clean_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(clean_size_));
}

StubDoc::~StubDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.StubDoc)
  SharedDtor();
}

void StubDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StubDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StubDoc::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StubDoc& StubDoc::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

StubDoc* StubDoc::New(::google::protobuf::Arena* arena) const {
  StubDoc* n = new StubDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StubDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.StubDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(content_size_));
  }
  clean_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StubDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.StubDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.StubDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContentType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Language language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding encoding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 download_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scriptRemoved = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_scriptremoved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scriptremoved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_content_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clean_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_clean_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clean_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.StubDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.StubDoc)
  return false;
#undef DO_
}

void StubDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.StubDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.StubDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->language(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encoding(), output);
  }

  // optional uint64 download_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->download_time(), output);
  }

  // optional bytes content = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->content(), output);
  }

  // optional bool scriptRemoved = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->scriptremoved(), output);
  }

  // optional uint32 content_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->content_size(), output);
  }

  // optional uint32 clean_size = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clean_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.StubDoc)
}

::google::protobuf::uint8* StubDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.StubDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.StubDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->language(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encoding(), target);
  }

  // optional uint64 download_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->download_time(), target);
  }

  // optional bytes content = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  // optional bool scriptRemoved = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->scriptremoved(), target);
  }

  // optional uint32 content_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->content_size(), target);
  }

  // optional uint32 clean_size = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clean_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.StubDoc)
  return target;
}

size_t StubDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.StubDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional bytes content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional .ru.mail.go.webbase.blobs.ContentType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.webbase.blobs.Language language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional uint64 download_time = 5;
    if (has_download_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->download_time());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding encoding = 4;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional bool scriptRemoved = 7;
    if (has_scriptremoved()) {
      total_size += 1 + 1;
    }

    // optional uint32 content_size = 8;
    if (has_content_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_size());
    }

  }
  // optional uint32 clean_size = 9;
  if (has_clean_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clean_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StubDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.StubDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const StubDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StubDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.StubDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.StubDoc)
    MergeFrom(*source);
  }
}

void StubDoc::MergeFrom(const StubDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.StubDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000010u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000040u) {
      scriptremoved_ = from.scriptremoved_;
    }
    if (cached_has_bits & 0x00000080u) {
      content_size_ = from.content_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_clean_size(from.clean_size());
  }
}

void StubDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.StubDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StubDoc::CopyFrom(const StubDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.StubDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StubDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StubDoc::Swap(StubDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StubDoc::InternalSwap(StubDoc* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(type_, other->type_);
  swap(language_, other->language_);
  swap(download_time_, other->download_time_);
  swap(encoding_, other->encoding_);
  swap(scriptremoved_, other->scriptremoved_);
  swap(content_size_, other->content_size_);
  swap(clean_size_, other->clean_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StubDoc::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StubDoc

// required string url = 1;
bool StubDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StubDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void StubDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void StubDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& StubDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.url)
  return url_.GetNoArena();
}
void StubDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.url)
}
#if LANG_CXX11
void StubDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.StubDoc.url)
}
#endif
void StubDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.StubDoc.url)
}
void StubDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.StubDoc.url)
}
::std::string* StubDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.StubDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StubDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.StubDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StubDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.StubDoc.url)
}

// optional .ru.mail.go.webbase.blobs.ContentType type = 2;
bool StubDoc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StubDoc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void StubDoc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void StubDoc::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ContentType StubDoc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(type_);
}
void StubDoc::set_type(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.type)
}

// optional .ru.mail.go.webbase.blobs.Language language = 3;
bool StubDoc::has_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StubDoc::set_has_language() {
  _has_bits_[0] |= 0x00000008u;
}
void StubDoc::clear_has_language() {
  _has_bits_[0] &= ~0x00000008u;
}
void StubDoc::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language StubDoc::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void StubDoc::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.language)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 4;
bool StubDoc::has_encoding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StubDoc::set_has_encoding() {
  _has_bits_[0] |= 0x00000020u;
}
void StubDoc::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000020u;
}
void StubDoc::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding StubDoc::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void StubDoc::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.encoding)
}

// optional uint64 download_time = 5;
bool StubDoc::has_download_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StubDoc::set_has_download_time() {
  _has_bits_[0] |= 0x00000010u;
}
void StubDoc::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void StubDoc::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 StubDoc::download_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.download_time)
  return download_time_;
}
void StubDoc::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.download_time)
}

// optional bytes content = 6;
bool StubDoc::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StubDoc::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void StubDoc::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void StubDoc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& StubDoc::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.content)
  return content_.GetNoArena();
}
void StubDoc::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.content)
}
#if LANG_CXX11
void StubDoc::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.StubDoc.content)
}
#endif
void StubDoc::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.StubDoc.content)
}
void StubDoc::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.StubDoc.content)
}
::std::string* StubDoc::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.StubDoc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StubDoc::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.StubDoc.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StubDoc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.StubDoc.content)
}

// optional bool scriptRemoved = 7;
bool StubDoc::has_scriptremoved() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StubDoc::set_has_scriptremoved() {
  _has_bits_[0] |= 0x00000040u;
}
void StubDoc::clear_has_scriptremoved() {
  _has_bits_[0] &= ~0x00000040u;
}
void StubDoc::clear_scriptremoved() {
  scriptremoved_ = false;
  clear_has_scriptremoved();
}
bool StubDoc::scriptremoved() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.scriptRemoved)
  return scriptremoved_;
}
void StubDoc::set_scriptremoved(bool value) {
  set_has_scriptremoved();
  scriptremoved_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.scriptRemoved)
}

// optional uint32 content_size = 8;
bool StubDoc::has_content_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StubDoc::set_has_content_size() {
  _has_bits_[0] |= 0x00000080u;
}
void StubDoc::clear_has_content_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void StubDoc::clear_content_size() {
  content_size_ = 0u;
  clear_has_content_size();
}
::google::protobuf::uint32 StubDoc::content_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.content_size)
  return content_size_;
}
void StubDoc::set_content_size(::google::protobuf::uint32 value) {
  set_has_content_size();
  content_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.content_size)
}

// optional uint32 clean_size = 9;
bool StubDoc::has_clean_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StubDoc::set_has_clean_size() {
  _has_bits_[0] |= 0x00000100u;
}
void StubDoc::clear_has_clean_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void StubDoc::clear_clean_size() {
  clean_size_ = 0u;
  clear_has_clean_size();
}
::google::protobuf::uint32 StubDoc::clean_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.StubDoc.clean_size)
  return clean_size_;
}
void StubDoc::set_clean_size(::google::protobuf::uint32 value) {
  set_has_clean_size();
  clean_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.StubDoc.clean_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kStartFieldNumber;
const int Region::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Region)
}
Region::Region(const Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Region)
}

void Region::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Region)
  SharedDtor();
}

void Region::SharedDtor() {
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Region& Region::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

Region* Region::New(::google::protobuf::Arena* arena) const {
  Region* n = new Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Region)
}

::google::protobuf::uint8* Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Region)
  return target;
}

size_t Region::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.Region)
  size_t total_size = 0;

  if (has_start()) {
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  return total_size;
}
size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Region)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Region

// required int32 start = 1;
bool Region::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Region::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void Region::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void Region::clear_start() {
  start_ = 0;
  clear_has_start();
}
::google::protobuf::int32 Region::start() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Region.start)
  return start_;
}
void Region::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Region.start)
}

// required int32 end = 2;
bool Region::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Region::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void Region::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void Region::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 Region::end() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Region.end)
  return end_;
}
void Region::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Region.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionBlob::kNumFieldNumber;
const int RegionBlob::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionBlob::RegionBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RegionBlob)
}
RegionBlob::RegionBlob(const RegionBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RegionBlob)
}

void RegionBlob::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
}

RegionBlob::~RegionBlob() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RegionBlob)
  SharedDtor();
}

void RegionBlob::SharedDtor() {
}

void RegionBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionBlob::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionBlob& RegionBlob::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionBlob* RegionBlob::New(::google::protobuf::Arena* arena) const {
  RegionBlob* n = new RegionBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RegionBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Region data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RegionBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RegionBlob)
  return false;
#undef DO_
}

void RegionBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Region data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RegionBlob)
}

::google::protobuf::uint8* RegionBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Region data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RegionBlob)
  return target;
}

size_t RegionBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RegionBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 num = 1;
  if (has_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }
  // repeated .ru.mail.go.webbase.blobs.Region data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RegionBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RegionBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RegionBlob)
    MergeFrom(*source);
  }
}

void RegionBlob::MergeFrom(const RegionBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RegionBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_num()) {
    set_num(from.num());
  }
}

void RegionBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RegionBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionBlob::CopyFrom(const RegionBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RegionBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RegionBlob::Swap(RegionBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionBlob::InternalSwap(RegionBlob* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionBlob::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionBlob

// required int32 num = 1;
bool RegionBlob::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionBlob::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionBlob::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionBlob::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 RegionBlob::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RegionBlob.num)
  return num_;
}
void RegionBlob::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RegionBlob.num)
}

// repeated .ru.mail.go.webbase.blobs.Region data = 2;
int RegionBlob::data_size() const {
  return data_.size();
}
void RegionBlob::clear_data() {
  data_.Clear();
}
const ::ru::mail::go::webbase::blobs::Region& RegionBlob::data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RegionBlob.data)
  return data_.Get(index);
}
::ru::mail::go::webbase::blobs::Region* RegionBlob::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RegionBlob.data)
  return data_.Mutable(index);
}
::ru::mail::go::webbase::blobs::Region* RegionBlob::add_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.RegionBlob.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Region >*
RegionBlob::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.RegionBlob.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::Region >&
RegionBlob::data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.RegionBlob.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OriginalDoc::kUrlFieldNumber;
const int OriginalDoc::kDownloadTimeFieldNumber;
const int OriginalDoc::kContentFieldNumber;
const int OriginalDoc::kTypeFieldNumber;
const int OriginalDoc::kLanguageFieldNumber;
const int OriginalDoc::kEncodingFieldNumber;
const int OriginalDoc::kPornoLevelFieldNumber;
const int OriginalDoc::kSpamLevelFieldNumber;
const int OriginalDoc::kCuttedBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OriginalDoc::OriginalDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_doc_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.OriginalDoc)
}
OriginalDoc::OriginalDoc(const OriginalDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_cuttedblob()) {
    cuttedblob_ = new ::ru::mail::go::webbase::blobs::RegionBlob(*from.cuttedblob_);
  } else {
    cuttedblob_ = NULL;
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&spam_level_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(spam_level_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.OriginalDoc)
}

void OriginalDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cuttedblob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spam_level_) -
      reinterpret_cast<char*>(&cuttedblob_)) + sizeof(spam_level_));
}

OriginalDoc::~OriginalDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.OriginalDoc)
  SharedDtor();
}

void OriginalDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cuttedblob_;
}

void OriginalDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalDoc::descriptor() {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OriginalDoc& OriginalDoc::default_instance() {
  protobuf_doc_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

OriginalDoc* OriginalDoc::New(::google::protobuf::Arena* arena) const {
  OriginalDoc* n = new OriginalDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OriginalDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.OriginalDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cuttedblob_ != NULL);
      cuttedblob_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porno_level_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(porno_level_));
  }
  spam_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OriginalDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.OriginalDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.OriginalDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ContentType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ContentType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Language language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Language_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::Language >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Encoding encoding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 porno_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_porno_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porno_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_spam_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RegionBlob cuttedBlob = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cuttedblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.OriginalDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.OriginalDoc)
  return false;
#undef DO_
}

void OriginalDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.OriginalDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OriginalDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->download_time(), output);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->encoding(), output);
  }

  // optional uint32 porno_level = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->porno_level(), output);
  }

  // optional uint32 spam_level = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->spam_level(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob cuttedBlob = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->cuttedblob_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.OriginalDoc)
}

::google::protobuf::uint8* OriginalDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.OriginalDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OriginalDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->download_time(), target);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ContentType type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Language language = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  // optional .ru.mail.go.webbase.blobs.Encoding encoding = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->encoding(), target);
  }

  // optional uint32 porno_level = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->porno_level(), target);
  }

  // optional uint32 spam_level = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->spam_level(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob cuttedBlob = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->cuttedblob_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.OriginalDoc)
  return target;
}

size_t OriginalDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.OriginalDoc)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_download_time()) {
    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  return total_size;
}
size_t OriginalDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.OriginalDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional .ru.mail.go.webbase.blobs.RegionBlob cuttedBlob = 9;
    if (has_cuttedblob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cuttedblob_);
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional .ru.mail.go.webbase.blobs.ContentType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ru.mail.go.webbase.blobs.Language language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .ru.mail.go.webbase.blobs.Encoding encoding = 6;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional uint32 porno_level = 7;
    if (has_porno_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porno_level());
    }

  }
  // optional uint32 spam_level = 8;
  if (has_spam_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spam_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.OriginalDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginalDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OriginalDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.OriginalDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.OriginalDoc)
    MergeFrom(*source);
  }
}

void OriginalDoc::MergeFrom(const OriginalDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.OriginalDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cuttedblob()->::ru::mail::go::webbase::blobs::RegionBlob::MergeFrom(from.cuttedblob());
    }
    if (cached_has_bits & 0x00000008u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000040u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000080u) {
      porno_level_ = from.porno_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_spam_level(from.spam_level());
  }
}

void OriginalDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.OriginalDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalDoc::CopyFrom(const OriginalDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.OriginalDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (has_cuttedblob()) {
    if (!this->cuttedblob_->IsInitialized()) return false;
  }
  return true;
}

void OriginalDoc::Swap(OriginalDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OriginalDoc::InternalSwap(OriginalDoc* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(cuttedblob_, other->cuttedblob_);
  swap(download_time_, other->download_time_);
  swap(type_, other->type_);
  swap(language_, other->language_);
  swap(encoding_, other->encoding_);
  swap(porno_level_, other->porno_level_);
  swap(spam_level_, other->spam_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OriginalDoc::GetMetadata() const {
  protobuf_doc_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_doc_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OriginalDoc

// required string url = 1;
bool OriginalDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OriginalDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void OriginalDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void OriginalDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& OriginalDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.url)
  return url_.GetNoArena();
}
void OriginalDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.url)
}
#if LANG_CXX11
void OriginalDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.OriginalDoc.url)
}
#endif
void OriginalDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.OriginalDoc.url)
}
void OriginalDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.OriginalDoc.url)
}
::std::string* OriginalDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OriginalDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OriginalDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.OriginalDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OriginalDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.OriginalDoc.url)
}

// required uint64 download_time = 2;
bool OriginalDoc::has_download_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OriginalDoc::set_has_download_time() {
  _has_bits_[0] |= 0x00000008u;
}
void OriginalDoc::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void OriginalDoc::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 OriginalDoc::download_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.download_time)
  return download_time_;
}
void OriginalDoc::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.download_time)
}

// optional bytes content = 3;
bool OriginalDoc::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OriginalDoc::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void OriginalDoc::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void OriginalDoc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& OriginalDoc::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.content)
  return content_.GetNoArena();
}
void OriginalDoc::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.content)
}
#if LANG_CXX11
void OriginalDoc::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.OriginalDoc.content)
}
#endif
void OriginalDoc::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.OriginalDoc.content)
}
void OriginalDoc::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.OriginalDoc.content)
}
::std::string* OriginalDoc::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OriginalDoc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OriginalDoc::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.OriginalDoc.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OriginalDoc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.OriginalDoc.content)
}

// optional .ru.mail.go.webbase.blobs.ContentType type = 4;
bool OriginalDoc::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OriginalDoc::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void OriginalDoc::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void OriginalDoc::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::ContentType OriginalDoc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.type)
  return static_cast< ::ru::mail::go::webbase::blobs::ContentType >(type_);
}
void OriginalDoc::set_type(::ru::mail::go::webbase::blobs::ContentType value) {
  assert(::ru::mail::go::webbase::blobs::ContentType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.type)
}

// optional .ru.mail.go.webbase.blobs.Language language = 5;
bool OriginalDoc::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OriginalDoc::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
void OriginalDoc::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
void OriginalDoc::clear_language() {
  language_ = 0;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::Language OriginalDoc::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.language)
  return static_cast< ::ru::mail::go::webbase::blobs::Language >(language_);
}
void OriginalDoc::set_language(::ru::mail::go::webbase::blobs::Language value) {
  assert(::ru::mail::go::webbase::blobs::Language_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.language)
}

// optional .ru.mail.go.webbase.blobs.Encoding encoding = 6;
bool OriginalDoc::has_encoding() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OriginalDoc::set_has_encoding() {
  _has_bits_[0] |= 0x00000040u;
}
void OriginalDoc::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000040u;
}
void OriginalDoc::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::ru::mail::go::webbase::blobs::Encoding OriginalDoc::encoding() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.encoding)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(encoding_);
}
void OriginalDoc::set_encoding(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.encoding)
}

// optional uint32 porno_level = 7;
bool OriginalDoc::has_porno_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OriginalDoc::set_has_porno_level() {
  _has_bits_[0] |= 0x00000080u;
}
void OriginalDoc::clear_has_porno_level() {
  _has_bits_[0] &= ~0x00000080u;
}
void OriginalDoc::clear_porno_level() {
  porno_level_ = 0u;
  clear_has_porno_level();
}
::google::protobuf::uint32 OriginalDoc::porno_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.porno_level)
  return porno_level_;
}
void OriginalDoc::set_porno_level(::google::protobuf::uint32 value) {
  set_has_porno_level();
  porno_level_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.porno_level)
}

// optional uint32 spam_level = 8;
bool OriginalDoc::has_spam_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OriginalDoc::set_has_spam_level() {
  _has_bits_[0] |= 0x00000100u;
}
void OriginalDoc::clear_has_spam_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void OriginalDoc::clear_spam_level() {
  spam_level_ = 0u;
  clear_has_spam_level();
}
::google::protobuf::uint32 OriginalDoc::spam_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.spam_level)
  return spam_level_;
}
void OriginalDoc::set_spam_level(::google::protobuf::uint32 value) {
  set_has_spam_level();
  spam_level_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OriginalDoc.spam_level)
}

// optional .ru.mail.go.webbase.blobs.RegionBlob cuttedBlob = 9;
bool OriginalDoc::has_cuttedblob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OriginalDoc::set_has_cuttedblob() {
  _has_bits_[0] |= 0x00000004u;
}
void OriginalDoc::clear_has_cuttedblob() {
  _has_bits_[0] &= ~0x00000004u;
}
void OriginalDoc::clear_cuttedblob() {
  if (cuttedblob_ != NULL) cuttedblob_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
  clear_has_cuttedblob();
}
const ::ru::mail::go::webbase::blobs::RegionBlob& OriginalDoc::cuttedblob() const {
  const ::ru::mail::go::webbase::blobs::RegionBlob* p = cuttedblob_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OriginalDoc.cuttedBlob)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RegionBlob*>(
      &::ru::mail::go::webbase::blobs::_RegionBlob_default_instance_);
}
::ru::mail::go::webbase::blobs::RegionBlob* OriginalDoc::mutable_cuttedblob() {
  set_has_cuttedblob();
  if (cuttedblob_ == NULL) {
    cuttedblob_ = new ::ru::mail::go::webbase::blobs::RegionBlob;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OriginalDoc.cuttedBlob)
  return cuttedblob_;
}
::ru::mail::go::webbase::blobs::RegionBlob* OriginalDoc::release_cuttedblob() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.OriginalDoc.cuttedBlob)
  clear_has_cuttedblob();
  ::ru::mail::go::webbase::blobs::RegionBlob* temp = cuttedblob_;
  cuttedblob_ = NULL;
  return temp;
}
void OriginalDoc::set_allocated_cuttedblob(::ru::mail::go::webbase::blobs::RegionBlob* cuttedblob) {
  delete cuttedblob_;
  cuttedblob_ = cuttedblob;
  if (cuttedblob) {
    set_has_cuttedblob();
  } else {
    clear_has_cuttedblob();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.OriginalDoc.cuttedBlob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
