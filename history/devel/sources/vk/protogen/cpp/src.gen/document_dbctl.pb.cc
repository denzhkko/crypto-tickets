// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document_dbctl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "document_dbctl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace migrate {
class DocDbctlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocDbctl>
     _instance;
} _DocDbctl_default_instance_;
class DocListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocList>
     _instance;
} _DocList_default_instance_;

namespace protobuf_document_5fdbctl_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocDbctl, data_),
  0,
  2,
  3,
  4,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocList, docs_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(DocDbctl)},
  { 17, 23, sizeof(DocList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocDbctl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "document_dbctl.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DocDbctl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocDbctl_default_instance_);_DocList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocList_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024document_dbctl.proto\022\032ru.mail.go.webba"
      "se.migrate\"a\n\010DocDbctl\022\013\n\003url\030\001 \002(\t\022\014\n\004t"
      "ime\030\002 \002(\004\022\014\n\004flag\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\022\020\n"
      "\010language\030\005 \002(\r\022\014\n\004data\030\006 \002(\014\"=\n\007DocList"
      "\0222\n\004docs\030\001 \003(\0132$.ru.mail.go.webbase.migr"
      "ate.DocDbctlB\017B\rDocumentDbctl"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "document_dbctl.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_document_5fdbctl_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocDbctl::kUrlFieldNumber;
const int DocDbctl::kTimeFieldNumber;
const int DocDbctl::kFlagFieldNumber;
const int DocDbctl::kTypeFieldNumber;
const int DocDbctl::kLanguageFieldNumber;
const int DocDbctl::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocDbctl::DocDbctl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_5fdbctl_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.migrate.DocDbctl)
}
DocDbctl::DocDbctl(const DocDbctl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&time_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.migrate.DocDbctl)
}

void DocDbctl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&time_)) + sizeof(language_));
}

DocDbctl::~DocDbctl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.migrate.DocDbctl)
  SharedDtor();
}

void DocDbctl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocDbctl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocDbctl::descriptor() {
  protobuf_document_5fdbctl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fdbctl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocDbctl& DocDbctl::default_instance() {
  protobuf_document_5fdbctl_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocDbctl* DocDbctl::New(::google::protobuf::Arena* arena) const {
  DocDbctl* n = new DocDbctl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocDbctl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.migrate.DocDbctl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&time_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocDbctl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.migrate.DocDbctl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.migrate.DocDbctl.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.migrate.DocDbctl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.migrate.DocDbctl)
  return false;
#undef DO_
}

void DocDbctl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.migrate.DocDbctl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.migrate.DocDbctl.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required uint32 flag = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // required uint32 type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // required uint32 language = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->language(), output);
  }

  // required bytes data = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.migrate.DocDbctl)
}

::google::protobuf::uint8* DocDbctl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.migrate.DocDbctl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.migrate.DocDbctl.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required uint32 flag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // required uint32 type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // required uint32 language = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->language(), target);
  }

  // required bytes data = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.migrate.DocDbctl)
  return target;
}

size_t DocDbctl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.migrate.DocDbctl)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_data()) {
    // required bytes data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_flag()) {
    // required uint32 flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  if (has_type()) {
    // required uint32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_language()) {
    // required uint32 language = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->language());
  }

  return total_size;
}
size_t DocDbctl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.migrate.DocDbctl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required uint32 flag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());

    // required uint32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 language = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->language());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocDbctl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.migrate.DocDbctl)
  GOOGLE_DCHECK_NE(&from, this);
  const DocDbctl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocDbctl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.migrate.DocDbctl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.migrate.DocDbctl)
    MergeFrom(*source);
  }
}

void DocDbctl::MergeFrom(const DocDbctl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.migrate.DocDbctl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocDbctl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.migrate.DocDbctl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocDbctl::CopyFrom(const DocDbctl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.migrate.DocDbctl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocDbctl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void DocDbctl::Swap(DocDbctl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocDbctl::InternalSwap(DocDbctl* other) {
  using std::swap;
  url_.Swap(&other->url_);
  data_.Swap(&other->data_);
  swap(time_, other->time_);
  swap(flag_, other->flag_);
  swap(type_, other->type_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocDbctl::GetMetadata() const {
  protobuf_document_5fdbctl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fdbctl_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocDbctl

// required string url = 1;
bool DocDbctl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocDbctl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DocDbctl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocDbctl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DocDbctl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.url)
  return url_.GetNoArena();
}
void DocDbctl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.url)
}
#if LANG_CXX11
void DocDbctl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.migrate.DocDbctl.url)
}
#endif
void DocDbctl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.migrate.DocDbctl.url)
}
void DocDbctl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.migrate.DocDbctl.url)
}
::std::string* DocDbctl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.migrate.DocDbctl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocDbctl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.migrate.DocDbctl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocDbctl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.migrate.DocDbctl.url)
}

// required uint64 time = 2;
bool DocDbctl::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocDbctl::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void DocDbctl::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocDbctl::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 DocDbctl::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.time)
  return time_;
}
void DocDbctl::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.time)
}

// required uint32 flag = 3;
bool DocDbctl::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocDbctl::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
void DocDbctl::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocDbctl::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 DocDbctl::flag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.flag)
  return flag_;
}
void DocDbctl::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.flag)
}

// required uint32 type = 4;
bool DocDbctl::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocDbctl::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void DocDbctl::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocDbctl::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 DocDbctl::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.type)
  return type_;
}
void DocDbctl::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.type)
}

// required uint32 language = 5;
bool DocDbctl::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocDbctl::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
void DocDbctl::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocDbctl::clear_language() {
  language_ = 0u;
  clear_has_language();
}
::google::protobuf::uint32 DocDbctl::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.language)
  return language_;
}
void DocDbctl::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.language)
}

// required bytes data = 6;
bool DocDbctl::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocDbctl::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DocDbctl::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocDbctl::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& DocDbctl::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocDbctl.data)
  return data_.GetNoArena();
}
void DocDbctl::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.migrate.DocDbctl.data)
}
#if LANG_CXX11
void DocDbctl::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.migrate.DocDbctl.data)
}
#endif
void DocDbctl::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.migrate.DocDbctl.data)
}
void DocDbctl::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.migrate.DocDbctl.data)
}
::std::string* DocDbctl::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.migrate.DocDbctl.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocDbctl::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.migrate.DocDbctl.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocDbctl::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.migrate.DocDbctl.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocList::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocList::DocList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_5fdbctl_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.migrate.DocList)
}
DocList::DocList(const DocList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.migrate.DocList)
}

void DocList::SharedCtor() {
  _cached_size_ = 0;
}

DocList::~DocList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.migrate.DocList)
  SharedDtor();
}

void DocList::SharedDtor() {
}

void DocList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocList::descriptor() {
  protobuf_document_5fdbctl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fdbctl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocList& DocList::default_instance() {
  protobuf_document_5fdbctl_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocList* DocList::New(::google::protobuf::Arena* arena) const {
  DocList* n = new DocList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.migrate.DocList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.migrate.DocList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.migrate.DocDbctl docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.migrate.DocList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.migrate.DocList)
  return false;
#undef DO_
}

void DocList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.migrate.DocList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.migrate.DocDbctl docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.migrate.DocList)
}

::google::protobuf::uint8* DocList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.migrate.DocList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.migrate.DocDbctl docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.migrate.DocList)
  return target;
}

size_t DocList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.migrate.DocList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.migrate.DocDbctl docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.migrate.DocList)
  GOOGLE_DCHECK_NE(&from, this);
  const DocList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.migrate.DocList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.migrate.DocList)
    MergeFrom(*source);
  }
}

void DocList::MergeFrom(const DocList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.migrate.DocList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void DocList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.migrate.DocList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocList::CopyFrom(const DocList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.migrate.DocList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  return true;
}

void DocList::Swap(DocList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocList::InternalSwap(DocList* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocList::GetMetadata() const {
  protobuf_document_5fdbctl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_document_5fdbctl_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocList

// repeated .ru.mail.go.webbase.migrate.DocDbctl docs = 1;
int DocList::docs_size() const {
  return docs_.size();
}
void DocList::clear_docs() {
  docs_.Clear();
}
const ::ru::mail::go::webbase::migrate::DocDbctl& DocList::docs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.migrate.DocList.docs)
  return docs_.Get(index);
}
::ru::mail::go::webbase::migrate::DocDbctl* DocList::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.migrate.DocList.docs)
  return docs_.Mutable(index);
}
::ru::mail::go::webbase::migrate::DocDbctl* DocList::add_docs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.migrate.DocList.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::migrate::DocDbctl >*
DocList::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.migrate.DocList.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::migrate::DocDbctl >&
DocList::docs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.migrate.DocList.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace migrate
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
