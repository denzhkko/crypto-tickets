// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etc_metrics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "etc_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class BrowserInformerProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BrowserInformerProto>
     _instance;
} _BrowserInformerProto_default_instance_;
class CAVerificationProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CAVerificationProto>
     _instance;
} _CAVerificationProto_default_instance_;
class SecurityPopupProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SecurityPopupProto>
     _instance;
} _SecurityPopupProto_default_instance_;
class KOFRProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KOFRProto>
     _instance;
} _KOFRProto_default_instance_;
class ImportProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImportProto>
     _instance;
} _ImportProto_default_instance_;
class PageInfoBubbleProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PageInfoBubbleProto>
     _instance;
} _PageInfoBubbleProto_default_instance_;
class EtcInfoProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EtcInfoProto>
     _instance;
} _EtcInfoProto_default_instance_;
class CrabItemInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrabItemInfo>
     _instance;
} _CrabItemInfo_default_instance_;
class CrabItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrabItem>
     _instance;
} _CrabItem_default_instance_;
class CrabShowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrabShow>
     _instance;
} _CrabShow_default_instance_;
class CrabClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrabClick>
     _instance;
} _CrabClick_default_instance_;
class CrabEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrabEvents>
     _instance;
} _CrabEvents_default_instance_;

namespace protobuf_etc_5fmetrics_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, informer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserInformerProto, dont_ask_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAVerificationProto, update_status_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, connection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, internet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, toggle_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, period_to_clear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, permission_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, permission_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityPopupProto, cookies_state_),
  6,
  0,
  7,
  1,
  8,
  2,
  3,
  4,
  5,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, file_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, file_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, kofr_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, safe_browsing_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KOFRProto, request_status_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, import_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_bookmarks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_cookies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_passwords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_search_engines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_home_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, imported_autofill_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportProto, importer_source_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageInfoBubbleProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageInfoBubbleProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageInfoBubbleProto, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageInfoBubbleProto, security_level_metric_value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, atom_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, vk_music_switcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, vk_notify_switcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, channel_switcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, whatsapp_switcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, rfr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, default_search_engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, is_browser_default_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, home_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, ntp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, autorun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, launch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, shortcut_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, assoc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, notify_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, vk_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, browser_informer_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, ca_verification_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, security_popup_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, kofr_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, import_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, page_info_bubble_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EtcInfoProto, crab_event_),
  0,
  8,
  9,
  10,
  11,
  1,
  2,
  12,
  3,
  4,
  13,
  5,
  6,
  7,
  14,
  15,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItemInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItemInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItemInfo, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItem, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabItem, info_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, parser_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, client_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabShow, items_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, client_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabClick, final_url_),
  0,
  3,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabEvents, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrabEvents, clicks_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(BrowserInformerProto)},
  { 13, 23, sizeof(CAVerificationProto)},
  { 28, 43, sizeof(SecurityPopupProto)},
  { 53, 63, sizeof(KOFRProto)},
  { 68, 83, sizeof(ImportProto)},
  { 93, 100, sizeof(PageInfoBubbleProto)},
  { 102, 130, sizeof(EtcInfoProto)},
  { 153, 160, sizeof(CrabItemInfo)},
  { 162, 169, sizeof(CrabItem)},
  { 171, 180, sizeof(CrabShow)},
  { 184, 193, sizeof(CrabClick)},
  { 197, 204, sizeof(CrabEvents)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BrowserInformerProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CAVerificationProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SecurityPopupProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KOFRProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PageInfoBubbleProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EtcInfoProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrabItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrabItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrabShow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrabClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrabEvents_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "etc_metrics.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BrowserInformerProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BrowserInformerProto_default_instance_);_CAVerificationProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CAVerificationProto_default_instance_);_SecurityPopupProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SecurityPopupProto_default_instance_);_KOFRProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KOFRProto_default_instance_);_ImportProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImportProto_default_instance_);_PageInfoBubbleProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PageInfoBubbleProto_default_instance_);_EtcInfoProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EtcInfoProto_default_instance_);_CrabItemInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrabItemInfo_default_instance_);_CrabItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrabItem_default_instance_);_CrabShow_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrabShow_default_instance_);_CrabClick_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrabClick_default_instance_);_CrabEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrabEvents_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021etc_metrics.proto\022\007metrics\"\215\002\n\024Browser"
      "InformerProto\022\023\n\013informer_id\030\001 \001(\t\022;\n\nev"
      "ent_type\030\002 \001(\0162\'.metrics.BrowserInformer"
      "Proto.EventType\0224\n\006action\030\003 \001(\0162$.metric"
      "s.BrowserInformerProto.Action\022\020\n\010dont_as"
      "k\030\004 \001(\010\"#\n\tEventType\022\n\n\006OPENED\020\000\022\n\n\006CLOS"
      "ED\020\001\"6\n\006Action\022\n\n\006ACCEPT\020\000\022\013\n\007DECLINE\020\001\022"
      "\t\n\005CLOSE\020\002\022\010\n\004LINK\020\003\"\320\003\n\023CAVerificationP"
      "roto\022\014\n\004hash\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022:\n\ne"
      "vent_type\030\003 \001(\0162&.metrics.CAVerification"
      "Proto.EventType\0223\n\006action\030\004 \001(\0162#.metric"
      "s.CAVerificationProto.Action\022@\n\rupdate_s"
      "tatus\030\005 \001(\0162).metrics.CAVerificationProt"
      "o.UpdateStatus\"K\n\tEventType\022\014\n\010DETECTED\020"
      "\000\022\n\n\006UPDATE\020\001\022\020\n\014SHOW_INFOBAR\020\002\022\022\n\016INFOB"
      "AR_ACTION\020\003\"<\n\006Action\022\r\n\tCERT_INFO\020\000\022\t\n\005"
      "TRUST\020\001\022\r\n\tMORE_INFO\020\002\022\t\n\005CLOSE\020\003\"\\\n\014Upd"
      "ateStatus\022\n\n\006FAILED\020\000\022\013\n\007SUCCESS\020\001\022\013\n\007TI"
      "MEOUT\020\002\022\020\n\014INVALID_DATA\020\003\022\024\n\020UNTRUSTED_S"
      "ERVER\020\004\"\242\003\n\022SecurityPopupProto\0229\n\nevent_"
      "type\030\001 \001(\0162%.metrics.SecurityPopupProto."
      "EventType\022\027\n\017connection_type\030\002 \001(\t\022\020\n\010in"
      "ternet\030\003 \001(\010\022\016\n\006domain\030\004 \001(\t\022\024\n\014toggle_s"
      "tate\030\005 \001(\010\022\027\n\017period_to_clear\030\006 \001(\t\022\017\n\007c"
      "ontrol\030\007 \001(\t\022\027\n\017permission_name\030\010 \001(\t\022\031\n"
      "\021permission_status\030\t \001(\t\022\025\n\rcookies_stat"
      "e\030\n \001(\005\"\212\001\n\tEventType\022\020\n\014POPUP_OPENED\020\000\022"
      "\021\n\rCLEAR_HISTORY\020\001\022\022\n\016TOGGLE_CHANGED\020\002\022\030"
      "\n\024SITE_SETTING_CHANGED\020\003\022\021\n\rCONFIGURE_AL"
      "L\020\004\022\027\n\023THIRD_PARTY_COOKIES\020\005\"\201\001\n\tKOFRPro"
      "to\022\021\n\tfile_hash\030\001 \001(\t\022\026\n\016file_extension\030"
      "\002 \001(\t\022\023\n\013kofr_status\030\003 \001(\005\022\034\n\024safe_brows"
      "ing_status\030\004 \001(\005\022\026\n\016request_status\030\005 \001(\005"
      "\"\340\002\n\013ImportProto\0222\n\nevent_type\030\001 \001(\0162\036.m"
      "etrics.ImportProto.EventType\022\023\n\013import_f"
      "rom\030\002 \001(\005\022\030\n\020imported_history\030\003 \001(\005\022\032\n\022i"
      "mported_bookmarks\030\004 \001(\005\022\030\n\020imported_cook"
      "ies\030\005 \001(\005\022\032\n\022imported_passwords\030\006 \001(\005\022\037\n"
      "\027imported_search_engines\030\007 \001(\005\022\032\n\022import"
      "ed_home_page\030\010 \001(\005\022\036\n\026imported_autofill_"
      "data\030\t \001(\005\022\027\n\017importer_source\030\n \001(\t\"&\n\tE"
      "ventType\022\013\n\007STARTED\020\000\022\014\n\010FINISHED\020\001\"\275\001\n\023"
      "PageInfoBubbleProto\022:\n\nevent_type\030\001 \001(\0162"
      "&.metrics.PageInfoBubbleProto.EventType\022"
      "#\n\033security_level_metric_value\030\002 \001(\t\"E\n\t"
      "EventType\022\010\n\004OPEN\020\000\022\010\n\004MORE\020\001\022\010\n\004BACK\020\002\022"
      "\t\n\005CLOSE\020\003\022\017\n\013COOKIE_INFO\020\004\"\332\005\n\014EtcInfoP"
      "roto\022\024\n\014atom_version\030\001 \001(\t\022\031\n\021vk_music_s"
      "witcher\030\002 \001(\010\022\032\n\022vk_notify_switcher\030\003 \001("
      "\010\022\030\n\020channel_switcher\030\004 \001(\010\022\031\n\021whatsapp_"
      "switcher\030\005 \001(\010\022\013\n\003rfr\030\006 \001(\t\022\035\n\025default_s"
      "earch_engine\030\007 \001(\t\022\032\n\022is_browser_default"
      "\030\010 \001(\010\022\021\n\thome_page\030\t \001(\t\022\013\n\003ntp\030\n \001(\t\022\017"
      "\n\007autorun\030\013 \001(\010\022\016\n\006launch\030\014 \001(\t\022\024\n\014short"
      "cut_url\030\r \001(\t\022\r\n\005assoc\030\016 \001(\t\022\026\n\016notify_e"
      "nabled\030\017 \001(\010\022\020\n\010vk_login\030\020 \001(\005\022=\n\026browse"
      "r_informer_event\030\021 \003(\0132\035.metrics.Browser"
      "InformerProto\022;\n\025ca_verification_event\030\022"
      " \003(\0132\034.metrics.CAVerificationProto\0229\n\024se"
      "curity_popup_event\030\023 \003(\0132\033.metrics.Secur"
      "ityPopupProto\022&\n\nkofr_event\030\024 \003(\0132\022.metr"
      "ics.KOFRProto\022*\n\014import_event\030\025 \003(\0132\024.me"
      "trics.ImportProto\022<\n\026page_info_bubble_ev"
      "ent\030\026 \003(\0132\034.metrics.PageInfoBubbleProto\022"
      "\'\n\ncrab_event\030\027 \003(\0132\023.metrics.CrabEvents"
      "\"*\n\014CrabItemInfo\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002"
      " \002(\t\"@\n\010CrabItem\022\017\n\007item_id\030\001 \002(\005\022#\n\004inf"
      "o\030\002 \003(\0132\025.metrics.CrabItemInfo\"c\n\010CrabSh"
      "ow\022\021\n\tparser_id\030\001 \002(\t\022\017\n\007show_id\030\002 \002(\t\022\021"
      "\n\tclient_ts\030\003 \002(\003\022 \n\005items\030\004 \003(\0132\021.metri"
      "cs.CrabItem\"S\n\tCrabClick\022\017\n\007show_id\030\001 \002("
      "\t\022\017\n\007item_id\030\002 \002(\005\022\021\n\tclient_ts\030\003 \002(\003\022\021\n"
      "\tfinal_url\030\004 \002(\t\"R\n\nCrabEvents\022 \n\005shows\030"
      "\001 \003(\0132\021.metrics.CrabShow\022\"\n\006clicks\030\002 \003(\013"
      "2\022.metrics.CrabClickB&\n\027ru.mail.browser."
      "metricsB\013AtomMetrics"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3020);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "etc_metrics.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_etc_5fmetrics_2eproto

const ::google::protobuf::EnumDescriptor* BrowserInformerProto_EventType_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[0];
}
bool BrowserInformerProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BrowserInformerProto_EventType BrowserInformerProto::OPENED;
const BrowserInformerProto_EventType BrowserInformerProto::CLOSED;
const BrowserInformerProto_EventType BrowserInformerProto::EventType_MIN;
const BrowserInformerProto_EventType BrowserInformerProto::EventType_MAX;
const int BrowserInformerProto::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BrowserInformerProto_Action_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[1];
}
bool BrowserInformerProto_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BrowserInformerProto_Action BrowserInformerProto::ACCEPT;
const BrowserInformerProto_Action BrowserInformerProto::DECLINE;
const BrowserInformerProto_Action BrowserInformerProto::CLOSE;
const BrowserInformerProto_Action BrowserInformerProto::LINK;
const BrowserInformerProto_Action BrowserInformerProto::Action_MIN;
const BrowserInformerProto_Action BrowserInformerProto::Action_MAX;
const int BrowserInformerProto::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CAVerificationProto_EventType_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[2];
}
bool CAVerificationProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CAVerificationProto_EventType CAVerificationProto::DETECTED;
const CAVerificationProto_EventType CAVerificationProto::UPDATE;
const CAVerificationProto_EventType CAVerificationProto::SHOW_INFOBAR;
const CAVerificationProto_EventType CAVerificationProto::INFOBAR_ACTION;
const CAVerificationProto_EventType CAVerificationProto::EventType_MIN;
const CAVerificationProto_EventType CAVerificationProto::EventType_MAX;
const int CAVerificationProto::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CAVerificationProto_Action_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[3];
}
bool CAVerificationProto_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CAVerificationProto_Action CAVerificationProto::CERT_INFO;
const CAVerificationProto_Action CAVerificationProto::TRUST;
const CAVerificationProto_Action CAVerificationProto::MORE_INFO;
const CAVerificationProto_Action CAVerificationProto::CLOSE;
const CAVerificationProto_Action CAVerificationProto::Action_MIN;
const CAVerificationProto_Action CAVerificationProto::Action_MAX;
const int CAVerificationProto::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CAVerificationProto_UpdateStatus_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[4];
}
bool CAVerificationProto_UpdateStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CAVerificationProto_UpdateStatus CAVerificationProto::FAILED;
const CAVerificationProto_UpdateStatus CAVerificationProto::SUCCESS;
const CAVerificationProto_UpdateStatus CAVerificationProto::TIMEOUT;
const CAVerificationProto_UpdateStatus CAVerificationProto::INVALID_DATA;
const CAVerificationProto_UpdateStatus CAVerificationProto::UNTRUSTED_SERVER;
const CAVerificationProto_UpdateStatus CAVerificationProto::UpdateStatus_MIN;
const CAVerificationProto_UpdateStatus CAVerificationProto::UpdateStatus_MAX;
const int CAVerificationProto::UpdateStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SecurityPopupProto_EventType_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[5];
}
bool SecurityPopupProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SecurityPopupProto_EventType SecurityPopupProto::POPUP_OPENED;
const SecurityPopupProto_EventType SecurityPopupProto::CLEAR_HISTORY;
const SecurityPopupProto_EventType SecurityPopupProto::TOGGLE_CHANGED;
const SecurityPopupProto_EventType SecurityPopupProto::SITE_SETTING_CHANGED;
const SecurityPopupProto_EventType SecurityPopupProto::CONFIGURE_ALL;
const SecurityPopupProto_EventType SecurityPopupProto::THIRD_PARTY_COOKIES;
const SecurityPopupProto_EventType SecurityPopupProto::EventType_MIN;
const SecurityPopupProto_EventType SecurityPopupProto::EventType_MAX;
const int SecurityPopupProto::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImportProto_EventType_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[6];
}
bool ImportProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImportProto_EventType ImportProto::STARTED;
const ImportProto_EventType ImportProto::FINISHED;
const ImportProto_EventType ImportProto::EventType_MIN;
const ImportProto_EventType ImportProto::EventType_MAX;
const int ImportProto::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PageInfoBubbleProto_EventType_descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_enum_descriptors[7];
}
bool PageInfoBubbleProto_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PageInfoBubbleProto_EventType PageInfoBubbleProto::OPEN;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::MORE;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::BACK;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::CLOSE;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::COOKIE_INFO;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::EventType_MIN;
const PageInfoBubbleProto_EventType PageInfoBubbleProto::EventType_MAX;
const int PageInfoBubbleProto::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrowserInformerProto::kInformerIdFieldNumber;
const int BrowserInformerProto::kEventTypeFieldNumber;
const int BrowserInformerProto::kActionFieldNumber;
const int BrowserInformerProto::kDontAskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrowserInformerProto::BrowserInformerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.BrowserInformerProto)
}
BrowserInformerProto::BrowserInformerProto(const BrowserInformerProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  informer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_informer_id()) {
    informer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.informer_id_);
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dont_ask_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(dont_ask_));
  // @@protoc_insertion_point(copy_constructor:metrics.BrowserInformerProto)
}

void BrowserInformerProto::SharedCtor() {
  _cached_size_ = 0;
  informer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dont_ask_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(dont_ask_));
}

BrowserInformerProto::~BrowserInformerProto() {
  // @@protoc_insertion_point(destructor:metrics.BrowserInformerProto)
  SharedDtor();
}

void BrowserInformerProto::SharedDtor() {
  informer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BrowserInformerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowserInformerProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrowserInformerProto& BrowserInformerProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrowserInformerProto* BrowserInformerProto::New(::google::protobuf::Arena* arena) const {
  BrowserInformerProto* n = new BrowserInformerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrowserInformerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.BrowserInformerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_informer_id()) {
    GOOGLE_DCHECK(!informer_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*informer_id_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dont_ask_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(dont_ask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrowserInformerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.BrowserInformerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string informer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_informer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->informer_id().data(), static_cast<int>(this->informer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.BrowserInformerProto.informer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.BrowserInformerProto.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::BrowserInformerProto_EventType_IsValid(value)) {
            set_event_type(static_cast< ::metrics::BrowserInformerProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.BrowserInformerProto.Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::BrowserInformerProto_Action_IsValid(value)) {
            set_action(static_cast< ::metrics::BrowserInformerProto_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dont_ask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dont_ask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dont_ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.BrowserInformerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.BrowserInformerProto)
  return false;
#undef DO_
}

void BrowserInformerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.BrowserInformerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string informer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->informer_id().data(), static_cast<int>(this->informer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.BrowserInformerProto.informer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->informer_id(), output);
  }

  // optional .metrics.BrowserInformerProto.EventType event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional .metrics.BrowserInformerProto.Action action = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional bool dont_ask = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dont_ask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.BrowserInformerProto)
}

::google::protobuf::uint8* BrowserInformerProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.BrowserInformerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string informer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->informer_id().data(), static_cast<int>(this->informer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.BrowserInformerProto.informer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->informer_id(), target);
  }

  // optional .metrics.BrowserInformerProto.EventType event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // optional .metrics.BrowserInformerProto.Action action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional bool dont_ask = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dont_ask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.BrowserInformerProto)
  return target;
}

size_t BrowserInformerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.BrowserInformerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string informer_id = 1;
    if (has_informer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->informer_id());
    }

    // optional .metrics.BrowserInformerProto.EventType event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional .metrics.BrowserInformerProto.Action action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional bool dont_ask = 4;
    if (has_dont_ask()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowserInformerProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.BrowserInformerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BrowserInformerProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrowserInformerProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.BrowserInformerProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.BrowserInformerProto)
    MergeFrom(*source);
  }
}

void BrowserInformerProto::MergeFrom(const BrowserInformerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.BrowserInformerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_informer_id();
      informer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.informer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      dont_ask_ = from.dont_ask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrowserInformerProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.BrowserInformerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowserInformerProto::CopyFrom(const BrowserInformerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.BrowserInformerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserInformerProto::IsInitialized() const {
  return true;
}

void BrowserInformerProto::Swap(BrowserInformerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrowserInformerProto::InternalSwap(BrowserInformerProto* other) {
  using std::swap;
  informer_id_.Swap(&other->informer_id_);
  swap(event_type_, other->event_type_);
  swap(action_, other->action_);
  swap(dont_ask_, other->dont_ask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BrowserInformerProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrowserInformerProto

// optional string informer_id = 1;
bool BrowserInformerProto::has_informer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrowserInformerProto::set_has_informer_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BrowserInformerProto::clear_has_informer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrowserInformerProto::clear_informer_id() {
  informer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_informer_id();
}
const ::std::string& BrowserInformerProto::informer_id() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.informer_id)
  return informer_id_.GetNoArena();
}
void BrowserInformerProto::set_informer_id(const ::std::string& value) {
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.informer_id)
}
#if LANG_CXX11
void BrowserInformerProto::set_informer_id(::std::string&& value) {
  set_has_informer_id();
  informer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.BrowserInformerProto.informer_id)
}
#endif
void BrowserInformerProto::set_informer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.BrowserInformerProto.informer_id)
}
void BrowserInformerProto::set_informer_id(const char* value, size_t size) {
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.BrowserInformerProto.informer_id)
}
::std::string* BrowserInformerProto::mutable_informer_id() {
  set_has_informer_id();
  // @@protoc_insertion_point(field_mutable:metrics.BrowserInformerProto.informer_id)
  return informer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrowserInformerProto::release_informer_id() {
  // @@protoc_insertion_point(field_release:metrics.BrowserInformerProto.informer_id)
  clear_has_informer_id();
  return informer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrowserInformerProto::set_allocated_informer_id(::std::string* informer_id) {
  if (informer_id != NULL) {
    set_has_informer_id();
  } else {
    clear_has_informer_id();
  }
  informer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), informer_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.BrowserInformerProto.informer_id)
}

// optional .metrics.BrowserInformerProto.EventType event_type = 2;
bool BrowserInformerProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrowserInformerProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
void BrowserInformerProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrowserInformerProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::metrics::BrowserInformerProto_EventType BrowserInformerProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.event_type)
  return static_cast< ::metrics::BrowserInformerProto_EventType >(event_type_);
}
void BrowserInformerProto::set_event_type(::metrics::BrowserInformerProto_EventType value) {
  assert(::metrics::BrowserInformerProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.event_type)
}

// optional .metrics.BrowserInformerProto.Action action = 3;
bool BrowserInformerProto::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrowserInformerProto::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void BrowserInformerProto::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrowserInformerProto::clear_action() {
  action_ = 0;
  clear_has_action();
}
::metrics::BrowserInformerProto_Action BrowserInformerProto::action() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.action)
  return static_cast< ::metrics::BrowserInformerProto_Action >(action_);
}
void BrowserInformerProto::set_action(::metrics::BrowserInformerProto_Action value) {
  assert(::metrics::BrowserInformerProto_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.action)
}

// optional bool dont_ask = 4;
bool BrowserInformerProto::has_dont_ask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BrowserInformerProto::set_has_dont_ask() {
  _has_bits_[0] |= 0x00000008u;
}
void BrowserInformerProto::clear_has_dont_ask() {
  _has_bits_[0] &= ~0x00000008u;
}
void BrowserInformerProto::clear_dont_ask() {
  dont_ask_ = false;
  clear_has_dont_ask();
}
bool BrowserInformerProto::dont_ask() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.dont_ask)
  return dont_ask_;
}
void BrowserInformerProto::set_dont_ask(bool value) {
  set_has_dont_ask();
  dont_ask_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.dont_ask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAVerificationProto::kHashFieldNumber;
const int CAVerificationProto::kSubjectFieldNumber;
const int CAVerificationProto::kEventTypeFieldNumber;
const int CAVerificationProto::kActionFieldNumber;
const int CAVerificationProto::kUpdateStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAVerificationProto::CAVerificationProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CAVerificationProto)
}
CAVerificationProto::CAVerificationProto(const CAVerificationProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subject()) {
    subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_status_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(update_status_));
  // @@protoc_insertion_point(copy_constructor:metrics.CAVerificationProto)
}

void CAVerificationProto::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_status_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(update_status_));
}

CAVerificationProto::~CAVerificationProto() {
  // @@protoc_insertion_point(destructor:metrics.CAVerificationProto)
  SharedDtor();
}

void CAVerificationProto::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CAVerificationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAVerificationProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAVerificationProto& CAVerificationProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CAVerificationProto* CAVerificationProto::New(::google::protobuf::Arena* arena) const {
  CAVerificationProto* n = new CAVerificationProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAVerificationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CAVerificationProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!subject_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subject_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_status_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(update_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAVerificationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CAVerificationProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CAVerificationProto.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), static_cast<int>(this->subject().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CAVerificationProto.subject");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CAVerificationProto.EventType event_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CAVerificationProto_EventType_IsValid(value)) {
            set_event_type(static_cast< ::metrics::CAVerificationProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CAVerificationProto.Action action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CAVerificationProto_Action_IsValid(value)) {
            set_action(static_cast< ::metrics::CAVerificationProto_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CAVerificationProto_UpdateStatus_IsValid(value)) {
            set_update_status(static_cast< ::metrics::CAVerificationProto_UpdateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CAVerificationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CAVerificationProto)
  return false;
#undef DO_
}

void CAVerificationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CAVerificationProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CAVerificationProto.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // optional string subject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CAVerificationProto.subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subject(), output);
  }

  // optional .metrics.CAVerificationProto.EventType event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }

  // optional .metrics.CAVerificationProto.Action action = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->update_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CAVerificationProto)
}

::google::protobuf::uint8* CAVerificationProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CAVerificationProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CAVerificationProto.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // optional string subject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), static_cast<int>(this->subject().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CAVerificationProto.subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subject(), target);
  }

  // optional .metrics.CAVerificationProto.EventType event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }

  // optional .metrics.CAVerificationProto.Action action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->update_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CAVerificationProto)
  return target;
}

size_t CAVerificationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CAVerificationProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string subject = 2;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional .metrics.CAVerificationProto.EventType event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional .metrics.CAVerificationProto.Action action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
    if (has_update_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAVerificationProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CAVerificationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CAVerificationProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAVerificationProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CAVerificationProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CAVerificationProto)
    MergeFrom(*source);
  }
}

void CAVerificationProto::MergeFrom(const CAVerificationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CAVerificationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_subject();
      subject_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subject_);
    }
    if (cached_has_bits & 0x00000004u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_status_ = from.update_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAVerificationProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CAVerificationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAVerificationProto::CopyFrom(const CAVerificationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CAVerificationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAVerificationProto::IsInitialized() const {
  return true;
}

void CAVerificationProto::Swap(CAVerificationProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAVerificationProto::InternalSwap(CAVerificationProto* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  subject_.Swap(&other->subject_);
  swap(event_type_, other->event_type_);
  swap(action_, other->action_);
  swap(update_status_, other->update_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAVerificationProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAVerificationProto

// optional string hash = 1;
bool CAVerificationProto::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAVerificationProto::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CAVerificationProto::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAVerificationProto::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& CAVerificationProto::hash() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.hash)
  return hash_.GetNoArena();
}
void CAVerificationProto::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.hash)
}
#if LANG_CXX11
void CAVerificationProto::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CAVerificationProto.hash)
}
#endif
void CAVerificationProto::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CAVerificationProto.hash)
}
void CAVerificationProto::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CAVerificationProto.hash)
}
::std::string* CAVerificationProto::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:metrics.CAVerificationProto.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CAVerificationProto::release_hash() {
  // @@protoc_insertion_point(field_release:metrics.CAVerificationProto.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CAVerificationProto::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:metrics.CAVerificationProto.hash)
}

// optional string subject = 2;
bool CAVerificationProto::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAVerificationProto::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
void CAVerificationProto::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAVerificationProto::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subject();
}
const ::std::string& CAVerificationProto::subject() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.subject)
  return subject_.GetNoArena();
}
void CAVerificationProto::set_subject(const ::std::string& value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.subject)
}
#if LANG_CXX11
void CAVerificationProto::set_subject(::std::string&& value) {
  set_has_subject();
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CAVerificationProto.subject)
}
#endif
void CAVerificationProto::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CAVerificationProto.subject)
}
void CAVerificationProto::set_subject(const char* value, size_t size) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CAVerificationProto.subject)
}
::std::string* CAVerificationProto::mutable_subject() {
  set_has_subject();
  // @@protoc_insertion_point(field_mutable:metrics.CAVerificationProto.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CAVerificationProto::release_subject() {
  // @@protoc_insertion_point(field_release:metrics.CAVerificationProto.subject)
  clear_has_subject();
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CAVerificationProto::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:metrics.CAVerificationProto.subject)
}

// optional .metrics.CAVerificationProto.EventType event_type = 3;
bool CAVerificationProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAVerificationProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CAVerificationProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAVerificationProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::metrics::CAVerificationProto_EventType CAVerificationProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.event_type)
  return static_cast< ::metrics::CAVerificationProto_EventType >(event_type_);
}
void CAVerificationProto::set_event_type(::metrics::CAVerificationProto_EventType value) {
  assert(::metrics::CAVerificationProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.event_type)
}

// optional .metrics.CAVerificationProto.Action action = 4;
bool CAVerificationProto::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CAVerificationProto::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
void CAVerificationProto::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void CAVerificationProto::clear_action() {
  action_ = 0;
  clear_has_action();
}
::metrics::CAVerificationProto_Action CAVerificationProto::action() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.action)
  return static_cast< ::metrics::CAVerificationProto_Action >(action_);
}
void CAVerificationProto::set_action(::metrics::CAVerificationProto_Action value) {
  assert(::metrics::CAVerificationProto_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.action)
}

// optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
bool CAVerificationProto::has_update_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CAVerificationProto::set_has_update_status() {
  _has_bits_[0] |= 0x00000010u;
}
void CAVerificationProto::clear_has_update_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void CAVerificationProto::clear_update_status() {
  update_status_ = 0;
  clear_has_update_status();
}
::metrics::CAVerificationProto_UpdateStatus CAVerificationProto::update_status() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.update_status)
  return static_cast< ::metrics::CAVerificationProto_UpdateStatus >(update_status_);
}
void CAVerificationProto::set_update_status(::metrics::CAVerificationProto_UpdateStatus value) {
  assert(::metrics::CAVerificationProto_UpdateStatus_IsValid(value));
  set_has_update_status();
  update_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.update_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityPopupProto::kEventTypeFieldNumber;
const int SecurityPopupProto::kConnectionTypeFieldNumber;
const int SecurityPopupProto::kInternetFieldNumber;
const int SecurityPopupProto::kDomainFieldNumber;
const int SecurityPopupProto::kToggleStateFieldNumber;
const int SecurityPopupProto::kPeriodToClearFieldNumber;
const int SecurityPopupProto::kControlFieldNumber;
const int SecurityPopupProto::kPermissionNameFieldNumber;
const int SecurityPopupProto::kPermissionStatusFieldNumber;
const int SecurityPopupProto::kCookiesStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityPopupProto::SecurityPopupProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SecurityPopupProto)
}
SecurityPopupProto::SecurityPopupProto(const SecurityPopupProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_type()) {
    connection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_type_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  period_to_clear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_period_to_clear()) {
    period_to_clear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.period_to_clear_);
  }
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_control()) {
    control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
  }
  permission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission_name()) {
    permission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
  }
  permission_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission_status()) {
    permission_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_status_);
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cookies_state_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(cookies_state_));
  // @@protoc_insertion_point(copy_constructor:metrics.SecurityPopupProto)
}

void SecurityPopupProto::SharedCtor() {
  _cached_size_ = 0;
  connection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_to_clear_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookies_state_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(cookies_state_));
}

SecurityPopupProto::~SecurityPopupProto() {
  // @@protoc_insertion_point(destructor:metrics.SecurityPopupProto)
  SharedDtor();
}

void SecurityPopupProto::SharedDtor() {
  connection_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_to_clear_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  control_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityPopupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityPopupProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityPopupProto& SecurityPopupProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SecurityPopupProto* SecurityPopupProto::New(::google::protobuf::Arena* arena) const {
  SecurityPopupProto* n = new SecurityPopupProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SecurityPopupProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SecurityPopupProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!connection_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*connection_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!period_to_clear_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*period_to_clear_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!control_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*control_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!permission_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*permission_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!permission_status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*permission_status_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&internet_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(internet_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&toggle_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cookies_state_) -
        reinterpret_cast<char*>(&toggle_state_)) + sizeof(cookies_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityPopupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.SecurityPopupProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SecurityPopupProto.EventType event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SecurityPopupProto_EventType_IsValid(value)) {
            set_event_type(static_cast< ::metrics::SecurityPopupProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connection_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connection_type().data(), static_cast<int>(this->connection_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.connection_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool internet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_internet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool toggle_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_toggle_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &toggle_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string period_to_clear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_period_to_clear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->period_to_clear().data(), static_cast<int>(this->period_to_clear().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.period_to_clear");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string control = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_control()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->control().data(), static_cast<int>(this->control().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.control");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string permission_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permission_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->permission_name().data(), static_cast<int>(this->permission_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.permission_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string permission_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permission_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->permission_status().data(), static_cast<int>(this->permission_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.SecurityPopupProto.permission_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cookies_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_cookies_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookies_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SecurityPopupProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SecurityPopupProto)
  return false;
#undef DO_
}

void SecurityPopupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SecurityPopupProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SecurityPopupProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional string connection_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_type().data(), static_cast<int>(this->connection_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.connection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_type(), output);
  }

  // optional bool internet = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->internet(), output);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional bool toggle_state = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->toggle_state(), output);
  }

  // optional string period_to_clear = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->period_to_clear().data(), static_cast<int>(this->period_to_clear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.period_to_clear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->period_to_clear(), output);
  }

  // optional string control = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->control(), output);
  }

  // optional string permission_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_name().data(), static_cast<int>(this->permission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.permission_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->permission_name(), output);
  }

  // optional string permission_status = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_status().data(), static_cast<int>(this->permission_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.permission_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->permission_status(), output);
  }

  // optional int32 cookies_state = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cookies_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.SecurityPopupProto)
}

::google::protobuf::uint8* SecurityPopupProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.SecurityPopupProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SecurityPopupProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional string connection_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_type().data(), static_cast<int>(this->connection_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.connection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connection_type(), target);
  }

  // optional bool internet = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->internet(), target);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional bool toggle_state = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->toggle_state(), target);
  }

  // optional string period_to_clear = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->period_to_clear().data(), static_cast<int>(this->period_to_clear().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.period_to_clear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->period_to_clear(), target);
  }

  // optional string control = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->control(), target);
  }

  // optional string permission_name = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_name().data(), static_cast<int>(this->permission_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.permission_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->permission_name(), target);
  }

  // optional string permission_status = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permission_status().data(), static_cast<int>(this->permission_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.SecurityPopupProto.permission_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->permission_status(), target);
  }

  // optional int32 cookies_state = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cookies_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.SecurityPopupProto)
  return target;
}

size_t SecurityPopupProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SecurityPopupProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string connection_type = 2;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_type());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string period_to_clear = 6;
    if (has_period_to_clear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->period_to_clear());
    }

    // optional string control = 7;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->control());
    }

    // optional string permission_name = 8;
    if (has_permission_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->permission_name());
    }

    // optional string permission_status = 9;
    if (has_permission_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->permission_status());
    }

    // optional .metrics.SecurityPopupProto.EventType event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional bool internet = 3;
    if (has_internet()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool toggle_state = 5;
    if (has_toggle_state()) {
      total_size += 1 + 1;
    }

    // optional int32 cookies_state = 10;
    if (has_cookies_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookies_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityPopupProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.SecurityPopupProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityPopupProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityPopupProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.SecurityPopupProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.SecurityPopupProto)
    MergeFrom(*source);
  }
}

void SecurityPopupProto::MergeFrom(const SecurityPopupProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SecurityPopupProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connection_type();
      connection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_period_to_clear();
      period_to_clear_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.period_to_clear_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_control();
      control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_permission_name();
      permission_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_permission_status();
      permission_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_status_);
    }
    if (cached_has_bits & 0x00000040u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      internet_ = from.internet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      toggle_state_ = from.toggle_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      cookies_state_ = from.cookies_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityPopupProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.SecurityPopupProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityPopupProto::CopyFrom(const SecurityPopupProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SecurityPopupProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityPopupProto::IsInitialized() const {
  return true;
}

void SecurityPopupProto::Swap(SecurityPopupProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityPopupProto::InternalSwap(SecurityPopupProto* other) {
  using std::swap;
  connection_type_.Swap(&other->connection_type_);
  domain_.Swap(&other->domain_);
  period_to_clear_.Swap(&other->period_to_clear_);
  control_.Swap(&other->control_);
  permission_name_.Swap(&other->permission_name_);
  permission_status_.Swap(&other->permission_status_);
  swap(event_type_, other->event_type_);
  swap(internet_, other->internet_);
  swap(toggle_state_, other->toggle_state_);
  swap(cookies_state_, other->cookies_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SecurityPopupProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SecurityPopupProto

// optional .metrics.SecurityPopupProto.EventType event_type = 1;
bool SecurityPopupProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SecurityPopupProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SecurityPopupProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SecurityPopupProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::metrics::SecurityPopupProto_EventType SecurityPopupProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.event_type)
  return static_cast< ::metrics::SecurityPopupProto_EventType >(event_type_);
}
void SecurityPopupProto::set_event_type(::metrics::SecurityPopupProto_EventType value) {
  assert(::metrics::SecurityPopupProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.event_type)
}

// optional string connection_type = 2;
bool SecurityPopupProto::has_connection_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SecurityPopupProto::set_has_connection_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SecurityPopupProto::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SecurityPopupProto::clear_connection_type() {
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_type();
}
const ::std::string& SecurityPopupProto::connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.connection_type)
  return connection_type_.GetNoArena();
}
void SecurityPopupProto::set_connection_type(const ::std::string& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.connection_type)
}
#if LANG_CXX11
void SecurityPopupProto::set_connection_type(::std::string&& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.connection_type)
}
#endif
void SecurityPopupProto::set_connection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.connection_type)
}
void SecurityPopupProto::set_connection_type(const char* value, size_t size) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.connection_type)
}
::std::string* SecurityPopupProto::mutable_connection_type() {
  set_has_connection_type();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.connection_type)
  return connection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_connection_type() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.connection_type)
  clear_has_connection_type();
  return connection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type != NULL) {
    set_has_connection_type();
  } else {
    clear_has_connection_type();
  }
  connection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_type);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.connection_type)
}

// optional bool internet = 3;
bool SecurityPopupProto::has_internet() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SecurityPopupProto::set_has_internet() {
  _has_bits_[0] |= 0x00000080u;
}
void SecurityPopupProto::clear_has_internet() {
  _has_bits_[0] &= ~0x00000080u;
}
void SecurityPopupProto::clear_internet() {
  internet_ = false;
  clear_has_internet();
}
bool SecurityPopupProto::internet() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.internet)
  return internet_;
}
void SecurityPopupProto::set_internet(bool value) {
  set_has_internet();
  internet_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.internet)
}

// optional string domain = 4;
bool SecurityPopupProto::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SecurityPopupProto::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void SecurityPopupProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void SecurityPopupProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& SecurityPopupProto::domain() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.domain)
  return domain_.GetNoArena();
}
void SecurityPopupProto::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.domain)
}
#if LANG_CXX11
void SecurityPopupProto::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.domain)
}
#endif
void SecurityPopupProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.domain)
}
void SecurityPopupProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.domain)
}
::std::string* SecurityPopupProto::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_domain() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.domain)
}

// optional bool toggle_state = 5;
bool SecurityPopupProto::has_toggle_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SecurityPopupProto::set_has_toggle_state() {
  _has_bits_[0] |= 0x00000100u;
}
void SecurityPopupProto::clear_has_toggle_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void SecurityPopupProto::clear_toggle_state() {
  toggle_state_ = false;
  clear_has_toggle_state();
}
bool SecurityPopupProto::toggle_state() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.toggle_state)
  return toggle_state_;
}
void SecurityPopupProto::set_toggle_state(bool value) {
  set_has_toggle_state();
  toggle_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.toggle_state)
}

// optional string period_to_clear = 6;
bool SecurityPopupProto::has_period_to_clear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SecurityPopupProto::set_has_period_to_clear() {
  _has_bits_[0] |= 0x00000004u;
}
void SecurityPopupProto::clear_has_period_to_clear() {
  _has_bits_[0] &= ~0x00000004u;
}
void SecurityPopupProto::clear_period_to_clear() {
  period_to_clear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_period_to_clear();
}
const ::std::string& SecurityPopupProto::period_to_clear() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.period_to_clear)
  return period_to_clear_.GetNoArena();
}
void SecurityPopupProto::set_period_to_clear(const ::std::string& value) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.period_to_clear)
}
#if LANG_CXX11
void SecurityPopupProto::set_period_to_clear(::std::string&& value) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.period_to_clear)
}
#endif
void SecurityPopupProto::set_period_to_clear(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.period_to_clear)
}
void SecurityPopupProto::set_period_to_clear(const char* value, size_t size) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.period_to_clear)
}
::std::string* SecurityPopupProto::mutable_period_to_clear() {
  set_has_period_to_clear();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.period_to_clear)
  return period_to_clear_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_period_to_clear() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.period_to_clear)
  clear_has_period_to_clear();
  return period_to_clear_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_period_to_clear(::std::string* period_to_clear) {
  if (period_to_clear != NULL) {
    set_has_period_to_clear();
  } else {
    clear_has_period_to_clear();
  }
  period_to_clear_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), period_to_clear);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.period_to_clear)
}

// optional string control = 7;
bool SecurityPopupProto::has_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SecurityPopupProto::set_has_control() {
  _has_bits_[0] |= 0x00000008u;
}
void SecurityPopupProto::clear_has_control() {
  _has_bits_[0] &= ~0x00000008u;
}
void SecurityPopupProto::clear_control() {
  control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_control();
}
const ::std::string& SecurityPopupProto::control() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.control)
  return control_.GetNoArena();
}
void SecurityPopupProto::set_control(const ::std::string& value) {
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.control)
}
#if LANG_CXX11
void SecurityPopupProto::set_control(::std::string&& value) {
  set_has_control();
  control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.control)
}
#endif
void SecurityPopupProto::set_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.control)
}
void SecurityPopupProto::set_control(const char* value, size_t size) {
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.control)
}
::std::string* SecurityPopupProto::mutable_control() {
  set_has_control();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.control)
  return control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_control() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.control)
  clear_has_control();
  return control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_control(::std::string* control) {
  if (control != NULL) {
    set_has_control();
  } else {
    clear_has_control();
  }
  control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), control);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.control)
}

// optional string permission_name = 8;
bool SecurityPopupProto::has_permission_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SecurityPopupProto::set_has_permission_name() {
  _has_bits_[0] |= 0x00000010u;
}
void SecurityPopupProto::clear_has_permission_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void SecurityPopupProto::clear_permission_name() {
  permission_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permission_name();
}
const ::std::string& SecurityPopupProto::permission_name() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.permission_name)
  return permission_name_.GetNoArena();
}
void SecurityPopupProto::set_permission_name(const ::std::string& value) {
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.permission_name)
}
#if LANG_CXX11
void SecurityPopupProto::set_permission_name(::std::string&& value) {
  set_has_permission_name();
  permission_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.permission_name)
}
#endif
void SecurityPopupProto::set_permission_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.permission_name)
}
void SecurityPopupProto::set_permission_name(const char* value, size_t size) {
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.permission_name)
}
::std::string* SecurityPopupProto::mutable_permission_name() {
  set_has_permission_name();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.permission_name)
  return permission_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_permission_name() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.permission_name)
  clear_has_permission_name();
  return permission_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_permission_name(::std::string* permission_name) {
  if (permission_name != NULL) {
    set_has_permission_name();
  } else {
    clear_has_permission_name();
  }
  permission_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.permission_name)
}

// optional string permission_status = 9;
bool SecurityPopupProto::has_permission_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SecurityPopupProto::set_has_permission_status() {
  _has_bits_[0] |= 0x00000020u;
}
void SecurityPopupProto::clear_has_permission_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void SecurityPopupProto::clear_permission_status() {
  permission_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permission_status();
}
const ::std::string& SecurityPopupProto::permission_status() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.permission_status)
  return permission_status_.GetNoArena();
}
void SecurityPopupProto::set_permission_status(const ::std::string& value) {
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.permission_status)
}
#if LANG_CXX11
void SecurityPopupProto::set_permission_status(::std::string&& value) {
  set_has_permission_status();
  permission_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.permission_status)
}
#endif
void SecurityPopupProto::set_permission_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.permission_status)
}
void SecurityPopupProto::set_permission_status(const char* value, size_t size) {
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.permission_status)
}
::std::string* SecurityPopupProto::mutable_permission_status() {
  set_has_permission_status();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.permission_status)
  return permission_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SecurityPopupProto::release_permission_status() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.permission_status)
  clear_has_permission_status();
  return permission_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SecurityPopupProto::set_allocated_permission_status(::std::string* permission_status) {
  if (permission_status != NULL) {
    set_has_permission_status();
  } else {
    clear_has_permission_status();
  }
  permission_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission_status);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.permission_status)
}

// optional int32 cookies_state = 10;
bool SecurityPopupProto::has_cookies_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SecurityPopupProto::set_has_cookies_state() {
  _has_bits_[0] |= 0x00000200u;
}
void SecurityPopupProto::clear_has_cookies_state() {
  _has_bits_[0] &= ~0x00000200u;
}
void SecurityPopupProto::clear_cookies_state() {
  cookies_state_ = 0;
  clear_has_cookies_state();
}
::google::protobuf::int32 SecurityPopupProto::cookies_state() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.cookies_state)
  return cookies_state_;
}
void SecurityPopupProto::set_cookies_state(::google::protobuf::int32 value) {
  set_has_cookies_state();
  cookies_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.cookies_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KOFRProto::kFileHashFieldNumber;
const int KOFRProto::kFileExtensionFieldNumber;
const int KOFRProto::kKofrStatusFieldNumber;
const int KOFRProto::kSafeBrowsingStatusFieldNumber;
const int KOFRProto::kRequestStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KOFRProto::KOFRProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.KOFRProto)
}
KOFRProto::KOFRProto(const KOFRProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_hash()) {
    file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
  }
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_extension()) {
    file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
  }
  ::memcpy(&kofr_status_, &from.kofr_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&kofr_status_)) + sizeof(request_status_));
  // @@protoc_insertion_point(copy_constructor:metrics.KOFRProto)
}

void KOFRProto::SharedCtor() {
  _cached_size_ = 0;
  file_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kofr_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_status_) -
      reinterpret_cast<char*>(&kofr_status_)) + sizeof(request_status_));
}

KOFRProto::~KOFRProto() {
  // @@protoc_insertion_point(destructor:metrics.KOFRProto)
  SharedDtor();
}

void KOFRProto::SharedDtor() {
  file_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KOFRProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KOFRProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KOFRProto& KOFRProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

KOFRProto* KOFRProto::New(::google::protobuf::Arena* arena) const {
  KOFRProto* n = new KOFRProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KOFRProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.KOFRProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!file_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!file_extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_extension_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&kofr_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_status_) -
        reinterpret_cast<char*>(&kofr_status_)) + sizeof(request_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KOFRProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.KOFRProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_hash().data(), static_cast<int>(this->file_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.KOFRProto.file_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_extension = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_extension().data(), static_cast<int>(this->file_extension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.KOFRProto.file_extension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kofr_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_kofr_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kofr_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 safe_browsing_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_safe_browsing_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safe_browsing_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 request_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_request_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.KOFRProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.KOFRProto)
  return false;
#undef DO_
}

void KOFRProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.KOFRProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_hash().data(), static_cast<int>(this->file_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.KOFRProto.file_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_hash(), output);
  }

  // optional string file_extension = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.KOFRProto.file_extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_extension(), output);
  }

  // optional int32 kofr_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kofr_status(), output);
  }

  // optional int32 safe_browsing_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->safe_browsing_status(), output);
  }

  // optional int32 request_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.KOFRProto)
}

::google::protobuf::uint8* KOFRProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.KOFRProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_hash().data(), static_cast<int>(this->file_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.KOFRProto.file_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_hash(), target);
  }

  // optional string file_extension = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.KOFRProto.file_extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_extension(), target);
  }

  // optional int32 kofr_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kofr_status(), target);
  }

  // optional int32 safe_browsing_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->safe_browsing_status(), target);
  }

  // optional int32 request_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.KOFRProto)
  return target;
}

size_t KOFRProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.KOFRProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string file_hash = 1;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_hash());
    }

    // optional string file_extension = 2;
    if (has_file_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_extension());
    }

    // optional int32 kofr_status = 3;
    if (has_kofr_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kofr_status());
    }

    // optional int32 safe_browsing_status = 4;
    if (has_safe_browsing_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safe_browsing_status());
    }

    // optional int32 request_status = 5;
    if (has_request_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KOFRProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.KOFRProto)
  GOOGLE_DCHECK_NE(&from, this);
  const KOFRProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KOFRProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.KOFRProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.KOFRProto)
    MergeFrom(*source);
  }
}

void KOFRProto::MergeFrom(const KOFRProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.KOFRProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_hash();
      file_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_extension();
      file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
    }
    if (cached_has_bits & 0x00000004u) {
      kofr_status_ = from.kofr_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      safe_browsing_status_ = from.safe_browsing_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_status_ = from.request_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KOFRProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.KOFRProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KOFRProto::CopyFrom(const KOFRProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.KOFRProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KOFRProto::IsInitialized() const {
  return true;
}

void KOFRProto::Swap(KOFRProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KOFRProto::InternalSwap(KOFRProto* other) {
  using std::swap;
  file_hash_.Swap(&other->file_hash_);
  file_extension_.Swap(&other->file_extension_);
  swap(kofr_status_, other->kofr_status_);
  swap(safe_browsing_status_, other->safe_browsing_status_);
  swap(request_status_, other->request_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KOFRProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KOFRProto

// optional string file_hash = 1;
bool KOFRProto::has_file_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KOFRProto::set_has_file_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void KOFRProto::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void KOFRProto::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
const ::std::string& KOFRProto::file_hash() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.file_hash)
  return file_hash_.GetNoArena();
}
void KOFRProto::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.file_hash)
}
#if LANG_CXX11
void KOFRProto::set_file_hash(::std::string&& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.KOFRProto.file_hash)
}
#endif
void KOFRProto::set_file_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.KOFRProto.file_hash)
}
void KOFRProto::set_file_hash(const char* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.KOFRProto.file_hash)
}
::std::string* KOFRProto::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:metrics.KOFRProto.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KOFRProto::release_file_hash() {
  // @@protoc_insertion_point(field_release:metrics.KOFRProto.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KOFRProto::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:metrics.KOFRProto.file_hash)
}

// optional string file_extension = 2;
bool KOFRProto::has_file_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KOFRProto::set_has_file_extension() {
  _has_bits_[0] |= 0x00000002u;
}
void KOFRProto::clear_has_file_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
void KOFRProto::clear_file_extension() {
  file_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_extension();
}
const ::std::string& KOFRProto::file_extension() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.file_extension)
  return file_extension_.GetNoArena();
}
void KOFRProto::set_file_extension(const ::std::string& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.file_extension)
}
#if LANG_CXX11
void KOFRProto::set_file_extension(::std::string&& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.KOFRProto.file_extension)
}
#endif
void KOFRProto::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.KOFRProto.file_extension)
}
void KOFRProto::set_file_extension(const char* value, size_t size) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.KOFRProto.file_extension)
}
::std::string* KOFRProto::mutable_file_extension() {
  set_has_file_extension();
  // @@protoc_insertion_point(field_mutable:metrics.KOFRProto.file_extension)
  return file_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KOFRProto::release_file_extension() {
  // @@protoc_insertion_point(field_release:metrics.KOFRProto.file_extension)
  clear_has_file_extension();
  return file_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KOFRProto::set_allocated_file_extension(::std::string* file_extension) {
  if (file_extension != NULL) {
    set_has_file_extension();
  } else {
    clear_has_file_extension();
  }
  file_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_extension);
  // @@protoc_insertion_point(field_set_allocated:metrics.KOFRProto.file_extension)
}

// optional int32 kofr_status = 3;
bool KOFRProto::has_kofr_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KOFRProto::set_has_kofr_status() {
  _has_bits_[0] |= 0x00000004u;
}
void KOFRProto::clear_has_kofr_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void KOFRProto::clear_kofr_status() {
  kofr_status_ = 0;
  clear_has_kofr_status();
}
::google::protobuf::int32 KOFRProto::kofr_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.kofr_status)
  return kofr_status_;
}
void KOFRProto::set_kofr_status(::google::protobuf::int32 value) {
  set_has_kofr_status();
  kofr_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.kofr_status)
}

// optional int32 safe_browsing_status = 4;
bool KOFRProto::has_safe_browsing_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KOFRProto::set_has_safe_browsing_status() {
  _has_bits_[0] |= 0x00000008u;
}
void KOFRProto::clear_has_safe_browsing_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void KOFRProto::clear_safe_browsing_status() {
  safe_browsing_status_ = 0;
  clear_has_safe_browsing_status();
}
::google::protobuf::int32 KOFRProto::safe_browsing_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.safe_browsing_status)
  return safe_browsing_status_;
}
void KOFRProto::set_safe_browsing_status(::google::protobuf::int32 value) {
  set_has_safe_browsing_status();
  safe_browsing_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.safe_browsing_status)
}

// optional int32 request_status = 5;
bool KOFRProto::has_request_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KOFRProto::set_has_request_status() {
  _has_bits_[0] |= 0x00000010u;
}
void KOFRProto::clear_has_request_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void KOFRProto::clear_request_status() {
  request_status_ = 0;
  clear_has_request_status();
}
::google::protobuf::int32 KOFRProto::request_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.request_status)
  return request_status_;
}
void KOFRProto::set_request_status(::google::protobuf::int32 value) {
  set_has_request_status();
  request_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.request_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportProto::kEventTypeFieldNumber;
const int ImportProto::kImportFromFieldNumber;
const int ImportProto::kImportedHistoryFieldNumber;
const int ImportProto::kImportedBookmarksFieldNumber;
const int ImportProto::kImportedCookiesFieldNumber;
const int ImportProto::kImportedPasswordsFieldNumber;
const int ImportProto::kImportedSearchEnginesFieldNumber;
const int ImportProto::kImportedHomePageFieldNumber;
const int ImportProto::kImportedAutofillDataFieldNumber;
const int ImportProto::kImporterSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportProto::ImportProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.ImportProto)
}
ImportProto::ImportProto(const ImportProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  importer_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_importer_source()) {
    importer_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.importer_source_);
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&imported_autofill_data_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(imported_autofill_data_));
  // @@protoc_insertion_point(copy_constructor:metrics.ImportProto)
}

void ImportProto::SharedCtor() {
  _cached_size_ = 0;
  importer_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imported_autofill_data_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(imported_autofill_data_));
}

ImportProto::~ImportProto() {
  // @@protoc_insertion_point(destructor:metrics.ImportProto)
  SharedDtor();
}

void ImportProto::SharedDtor() {
  importer_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImportProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportProto& ImportProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportProto* ImportProto::New(::google::protobuf::Arena* arena) const {
  ImportProto* n = new ImportProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ImportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_importer_source()) {
    GOOGLE_DCHECK(!importer_source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*importer_source_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imported_search_engines_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(imported_search_engines_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&imported_home_page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imported_autofill_data_) -
        reinterpret_cast<char*>(&imported_home_page_)) + sizeof(imported_autofill_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.ImportProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.ImportProto.EventType event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::ImportProto_EventType_IsValid(value)) {
            set_event_type(static_cast< ::metrics::ImportProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 import_from = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_import_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &import_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_history = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_imported_history();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_history_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_bookmarks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_imported_bookmarks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_bookmarks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_cookies = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_imported_cookies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_cookies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_passwords = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_imported_passwords();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_passwords_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_search_engines = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_imported_search_engines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_search_engines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_home_page = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_imported_home_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_home_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imported_autofill_data = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_imported_autofill_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imported_autofill_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string importer_source = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_importer_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->importer_source().data(), static_cast<int>(this->importer_source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.ImportProto.importer_source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.ImportProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.ImportProto)
  return false;
#undef DO_
}

void ImportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.ImportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.ImportProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional int32 import_from = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->import_from(), output);
  }

  // optional int32 imported_history = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imported_history(), output);
  }

  // optional int32 imported_bookmarks = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imported_bookmarks(), output);
  }

  // optional int32 imported_cookies = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imported_cookies(), output);
  }

  // optional int32 imported_passwords = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->imported_passwords(), output);
  }

  // optional int32 imported_search_engines = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->imported_search_engines(), output);
  }

  // optional int32 imported_home_page = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->imported_home_page(), output);
  }

  // optional int32 imported_autofill_data = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->imported_autofill_data(), output);
  }

  // optional string importer_source = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->importer_source().data(), static_cast<int>(this->importer_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.ImportProto.importer_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->importer_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.ImportProto)
}

::google::protobuf::uint8* ImportProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ImportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.ImportProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional int32 import_from = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->import_from(), target);
  }

  // optional int32 imported_history = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imported_history(), target);
  }

  // optional int32 imported_bookmarks = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imported_bookmarks(), target);
  }

  // optional int32 imported_cookies = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imported_cookies(), target);
  }

  // optional int32 imported_passwords = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->imported_passwords(), target);
  }

  // optional int32 imported_search_engines = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->imported_search_engines(), target);
  }

  // optional int32 imported_home_page = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->imported_home_page(), target);
  }

  // optional int32 imported_autofill_data = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->imported_autofill_data(), target);
  }

  // optional string importer_source = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->importer_source().data(), static_cast<int>(this->importer_source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.ImportProto.importer_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->importer_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ImportProto)
  return target;
}

size_t ImportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ImportProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string importer_source = 10;
    if (has_importer_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->importer_source());
    }

    // optional .metrics.ImportProto.EventType event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional int32 import_from = 2;
    if (has_import_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->import_from());
    }

    // optional int32 imported_history = 3;
    if (has_imported_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_history());
    }

    // optional int32 imported_bookmarks = 4;
    if (has_imported_bookmarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_bookmarks());
    }

    // optional int32 imported_cookies = 5;
    if (has_imported_cookies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_cookies());
    }

    // optional int32 imported_passwords = 6;
    if (has_imported_passwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_passwords());
    }

    // optional int32 imported_search_engines = 7;
    if (has_imported_search_engines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_search_engines());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 imported_home_page = 8;
    if (has_imported_home_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_home_page());
    }

    // optional int32 imported_autofill_data = 9;
    if (has_imported_autofill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imported_autofill_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.ImportProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.ImportProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.ImportProto)
    MergeFrom(*source);
  }
}

void ImportProto::MergeFrom(const ImportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ImportProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_importer_source();
      importer_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.importer_source_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      import_from_ = from.import_from_;
    }
    if (cached_has_bits & 0x00000008u) {
      imported_history_ = from.imported_history_;
    }
    if (cached_has_bits & 0x00000010u) {
      imported_bookmarks_ = from.imported_bookmarks_;
    }
    if (cached_has_bits & 0x00000020u) {
      imported_cookies_ = from.imported_cookies_;
    }
    if (cached_has_bits & 0x00000040u) {
      imported_passwords_ = from.imported_passwords_;
    }
    if (cached_has_bits & 0x00000080u) {
      imported_search_engines_ = from.imported_search_engines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      imported_home_page_ = from.imported_home_page_;
    }
    if (cached_has_bits & 0x00000200u) {
      imported_autofill_data_ = from.imported_autofill_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImportProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.ImportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportProto::CopyFrom(const ImportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ImportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportProto::IsInitialized() const {
  return true;
}

void ImportProto::Swap(ImportProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportProto::InternalSwap(ImportProto* other) {
  using std::swap;
  importer_source_.Swap(&other->importer_source_);
  swap(event_type_, other->event_type_);
  swap(import_from_, other->import_from_);
  swap(imported_history_, other->imported_history_);
  swap(imported_bookmarks_, other->imported_bookmarks_);
  swap(imported_cookies_, other->imported_cookies_);
  swap(imported_passwords_, other->imported_passwords_);
  swap(imported_search_engines_, other->imported_search_engines_);
  swap(imported_home_page_, other->imported_home_page_);
  swap(imported_autofill_data_, other->imported_autofill_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportProto

// optional .metrics.ImportProto.EventType event_type = 1;
bool ImportProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImportProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ImportProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImportProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::metrics::ImportProto_EventType ImportProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.event_type)
  return static_cast< ::metrics::ImportProto_EventType >(event_type_);
}
void ImportProto::set_event_type(::metrics::ImportProto_EventType value) {
  assert(::metrics::ImportProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.event_type)
}

// optional int32 import_from = 2;
bool ImportProto::has_import_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImportProto::set_has_import_from() {
  _has_bits_[0] |= 0x00000004u;
}
void ImportProto::clear_has_import_from() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImportProto::clear_import_from() {
  import_from_ = 0;
  clear_has_import_from();
}
::google::protobuf::int32 ImportProto::import_from() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.import_from)
  return import_from_;
}
void ImportProto::set_import_from(::google::protobuf::int32 value) {
  set_has_import_from();
  import_from_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.import_from)
}

// optional int32 imported_history = 3;
bool ImportProto::has_imported_history() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImportProto::set_has_imported_history() {
  _has_bits_[0] |= 0x00000008u;
}
void ImportProto::clear_has_imported_history() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImportProto::clear_imported_history() {
  imported_history_ = 0;
  clear_has_imported_history();
}
::google::protobuf::int32 ImportProto::imported_history() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_history)
  return imported_history_;
}
void ImportProto::set_imported_history(::google::protobuf::int32 value) {
  set_has_imported_history();
  imported_history_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_history)
}

// optional int32 imported_bookmarks = 4;
bool ImportProto::has_imported_bookmarks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImportProto::set_has_imported_bookmarks() {
  _has_bits_[0] |= 0x00000010u;
}
void ImportProto::clear_has_imported_bookmarks() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImportProto::clear_imported_bookmarks() {
  imported_bookmarks_ = 0;
  clear_has_imported_bookmarks();
}
::google::protobuf::int32 ImportProto::imported_bookmarks() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_bookmarks)
  return imported_bookmarks_;
}
void ImportProto::set_imported_bookmarks(::google::protobuf::int32 value) {
  set_has_imported_bookmarks();
  imported_bookmarks_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_bookmarks)
}

// optional int32 imported_cookies = 5;
bool ImportProto::has_imported_cookies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImportProto::set_has_imported_cookies() {
  _has_bits_[0] |= 0x00000020u;
}
void ImportProto::clear_has_imported_cookies() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImportProto::clear_imported_cookies() {
  imported_cookies_ = 0;
  clear_has_imported_cookies();
}
::google::protobuf::int32 ImportProto::imported_cookies() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_cookies)
  return imported_cookies_;
}
void ImportProto::set_imported_cookies(::google::protobuf::int32 value) {
  set_has_imported_cookies();
  imported_cookies_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_cookies)
}

// optional int32 imported_passwords = 6;
bool ImportProto::has_imported_passwords() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImportProto::set_has_imported_passwords() {
  _has_bits_[0] |= 0x00000040u;
}
void ImportProto::clear_has_imported_passwords() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImportProto::clear_imported_passwords() {
  imported_passwords_ = 0;
  clear_has_imported_passwords();
}
::google::protobuf::int32 ImportProto::imported_passwords() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_passwords)
  return imported_passwords_;
}
void ImportProto::set_imported_passwords(::google::protobuf::int32 value) {
  set_has_imported_passwords();
  imported_passwords_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_passwords)
}

// optional int32 imported_search_engines = 7;
bool ImportProto::has_imported_search_engines() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImportProto::set_has_imported_search_engines() {
  _has_bits_[0] |= 0x00000080u;
}
void ImportProto::clear_has_imported_search_engines() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImportProto::clear_imported_search_engines() {
  imported_search_engines_ = 0;
  clear_has_imported_search_engines();
}
::google::protobuf::int32 ImportProto::imported_search_engines() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_search_engines)
  return imported_search_engines_;
}
void ImportProto::set_imported_search_engines(::google::protobuf::int32 value) {
  set_has_imported_search_engines();
  imported_search_engines_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_search_engines)
}

// optional int32 imported_home_page = 8;
bool ImportProto::has_imported_home_page() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImportProto::set_has_imported_home_page() {
  _has_bits_[0] |= 0x00000100u;
}
void ImportProto::clear_has_imported_home_page() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImportProto::clear_imported_home_page() {
  imported_home_page_ = 0;
  clear_has_imported_home_page();
}
::google::protobuf::int32 ImportProto::imported_home_page() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_home_page)
  return imported_home_page_;
}
void ImportProto::set_imported_home_page(::google::protobuf::int32 value) {
  set_has_imported_home_page();
  imported_home_page_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_home_page)
}

// optional int32 imported_autofill_data = 9;
bool ImportProto::has_imported_autofill_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImportProto::set_has_imported_autofill_data() {
  _has_bits_[0] |= 0x00000200u;
}
void ImportProto::clear_has_imported_autofill_data() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImportProto::clear_imported_autofill_data() {
  imported_autofill_data_ = 0;
  clear_has_imported_autofill_data();
}
::google::protobuf::int32 ImportProto::imported_autofill_data() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_autofill_data)
  return imported_autofill_data_;
}
void ImportProto::set_imported_autofill_data(::google::protobuf::int32 value) {
  set_has_imported_autofill_data();
  imported_autofill_data_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_autofill_data)
}

// optional string importer_source = 10;
bool ImportProto::has_importer_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportProto::set_has_importer_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportProto::clear_has_importer_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportProto::clear_importer_source() {
  importer_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_importer_source();
}
const ::std::string& ImportProto::importer_source() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.importer_source)
  return importer_source_.GetNoArena();
}
void ImportProto::set_importer_source(const ::std::string& value) {
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.ImportProto.importer_source)
}
#if LANG_CXX11
void ImportProto::set_importer_source(::std::string&& value) {
  set_has_importer_source();
  importer_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.ImportProto.importer_source)
}
#endif
void ImportProto::set_importer_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.ImportProto.importer_source)
}
void ImportProto::set_importer_source(const char* value, size_t size) {
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.ImportProto.importer_source)
}
::std::string* ImportProto::mutable_importer_source() {
  set_has_importer_source();
  // @@protoc_insertion_point(field_mutable:metrics.ImportProto.importer_source)
  return importer_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportProto::release_importer_source() {
  // @@protoc_insertion_point(field_release:metrics.ImportProto.importer_source)
  clear_has_importer_source();
  return importer_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportProto::set_allocated_importer_source(::std::string* importer_source) {
  if (importer_source != NULL) {
    set_has_importer_source();
  } else {
    clear_has_importer_source();
  }
  importer_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), importer_source);
  // @@protoc_insertion_point(field_set_allocated:metrics.ImportProto.importer_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageInfoBubbleProto::kEventTypeFieldNumber;
const int PageInfoBubbleProto::kSecurityLevelMetricValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageInfoBubbleProto::PageInfoBubbleProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PageInfoBubbleProto)
}
PageInfoBubbleProto::PageInfoBubbleProto(const PageInfoBubbleProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  security_level_metric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_security_level_metric_value()) {
    security_level_metric_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_level_metric_value_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:metrics.PageInfoBubbleProto)
}

void PageInfoBubbleProto::SharedCtor() {
  _cached_size_ = 0;
  security_level_metric_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

PageInfoBubbleProto::~PageInfoBubbleProto() {
  // @@protoc_insertion_point(destructor:metrics.PageInfoBubbleProto)
  SharedDtor();
}

void PageInfoBubbleProto::SharedDtor() {
  security_level_metric_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PageInfoBubbleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageInfoBubbleProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PageInfoBubbleProto& PageInfoBubbleProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PageInfoBubbleProto* PageInfoBubbleProto::New(::google::protobuf::Arena* arena) const {
  PageInfoBubbleProto* n = new PageInfoBubbleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PageInfoBubbleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PageInfoBubbleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_security_level_metric_value()) {
    GOOGLE_DCHECK(!security_level_metric_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*security_level_metric_value_.UnsafeRawStringPointer())->clear();
  }
  event_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PageInfoBubbleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.PageInfoBubbleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::PageInfoBubbleProto_EventType_IsValid(value)) {
            set_event_type(static_cast< ::metrics::PageInfoBubbleProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string security_level_metric_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_level_metric_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->security_level_metric_value().data(), static_cast<int>(this->security_level_metric_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.PageInfoBubbleProto.security_level_metric_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PageInfoBubbleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PageInfoBubbleProto)
  return false;
#undef DO_
}

void PageInfoBubbleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PageInfoBubbleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional string security_level_metric_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->security_level_metric_value().data(), static_cast<int>(this->security_level_metric_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.PageInfoBubbleProto.security_level_metric_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->security_level_metric_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.PageInfoBubbleProto)
}

::google::protobuf::uint8* PageInfoBubbleProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.PageInfoBubbleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional string security_level_metric_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->security_level_metric_value().data(), static_cast<int>(this->security_level_metric_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.PageInfoBubbleProto.security_level_metric_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->security_level_metric_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.PageInfoBubbleProto)
  return target;
}

size_t PageInfoBubbleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PageInfoBubbleProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string security_level_metric_value = 2;
    if (has_security_level_metric_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_level_metric_value());
    }

    // optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageInfoBubbleProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.PageInfoBubbleProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PageInfoBubbleProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PageInfoBubbleProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.PageInfoBubbleProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.PageInfoBubbleProto)
    MergeFrom(*source);
  }
}

void PageInfoBubbleProto::MergeFrom(const PageInfoBubbleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PageInfoBubbleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_security_level_metric_value();
      security_level_metric_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.security_level_metric_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageInfoBubbleProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.PageInfoBubbleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageInfoBubbleProto::CopyFrom(const PageInfoBubbleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PageInfoBubbleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageInfoBubbleProto::IsInitialized() const {
  return true;
}

void PageInfoBubbleProto::Swap(PageInfoBubbleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageInfoBubbleProto::InternalSwap(PageInfoBubbleProto* other) {
  using std::swap;
  security_level_metric_value_.Swap(&other->security_level_metric_value_);
  swap(event_type_, other->event_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PageInfoBubbleProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PageInfoBubbleProto

// optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
bool PageInfoBubbleProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PageInfoBubbleProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
void PageInfoBubbleProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void PageInfoBubbleProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::metrics::PageInfoBubbleProto_EventType PageInfoBubbleProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.PageInfoBubbleProto.event_type)
  return static_cast< ::metrics::PageInfoBubbleProto_EventType >(event_type_);
}
void PageInfoBubbleProto::set_event_type(::metrics::PageInfoBubbleProto_EventType value) {
  assert(::metrics::PageInfoBubbleProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PageInfoBubbleProto.event_type)
}

// optional string security_level_metric_value = 2;
bool PageInfoBubbleProto::has_security_level_metric_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PageInfoBubbleProto::set_has_security_level_metric_value() {
  _has_bits_[0] |= 0x00000001u;
}
void PageInfoBubbleProto::clear_has_security_level_metric_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void PageInfoBubbleProto::clear_security_level_metric_value() {
  security_level_metric_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_security_level_metric_value();
}
const ::std::string& PageInfoBubbleProto::security_level_metric_value() const {
  // @@protoc_insertion_point(field_get:metrics.PageInfoBubbleProto.security_level_metric_value)
  return security_level_metric_value_.GetNoArena();
}
void PageInfoBubbleProto::set_security_level_metric_value(const ::std::string& value) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PageInfoBubbleProto.security_level_metric_value)
}
#if LANG_CXX11
void PageInfoBubbleProto::set_security_level_metric_value(::std::string&& value) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PageInfoBubbleProto.security_level_metric_value)
}
#endif
void PageInfoBubbleProto::set_security_level_metric_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PageInfoBubbleProto.security_level_metric_value)
}
void PageInfoBubbleProto::set_security_level_metric_value(const char* value, size_t size) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PageInfoBubbleProto.security_level_metric_value)
}
::std::string* PageInfoBubbleProto::mutable_security_level_metric_value() {
  set_has_security_level_metric_value();
  // @@protoc_insertion_point(field_mutable:metrics.PageInfoBubbleProto.security_level_metric_value)
  return security_level_metric_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageInfoBubbleProto::release_security_level_metric_value() {
  // @@protoc_insertion_point(field_release:metrics.PageInfoBubbleProto.security_level_metric_value)
  clear_has_security_level_metric_value();
  return security_level_metric_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageInfoBubbleProto::set_allocated_security_level_metric_value(::std::string* security_level_metric_value) {
  if (security_level_metric_value != NULL) {
    set_has_security_level_metric_value();
  } else {
    clear_has_security_level_metric_value();
  }
  security_level_metric_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_level_metric_value);
  // @@protoc_insertion_point(field_set_allocated:metrics.PageInfoBubbleProto.security_level_metric_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EtcInfoProto::kAtomVersionFieldNumber;
const int EtcInfoProto::kVkMusicSwitcherFieldNumber;
const int EtcInfoProto::kVkNotifySwitcherFieldNumber;
const int EtcInfoProto::kChannelSwitcherFieldNumber;
const int EtcInfoProto::kWhatsappSwitcherFieldNumber;
const int EtcInfoProto::kRfrFieldNumber;
const int EtcInfoProto::kDefaultSearchEngineFieldNumber;
const int EtcInfoProto::kIsBrowserDefaultFieldNumber;
const int EtcInfoProto::kHomePageFieldNumber;
const int EtcInfoProto::kNtpFieldNumber;
const int EtcInfoProto::kAutorunFieldNumber;
const int EtcInfoProto::kLaunchFieldNumber;
const int EtcInfoProto::kShortcutUrlFieldNumber;
const int EtcInfoProto::kAssocFieldNumber;
const int EtcInfoProto::kNotifyEnabledFieldNumber;
const int EtcInfoProto::kVkLoginFieldNumber;
const int EtcInfoProto::kBrowserInformerEventFieldNumber;
const int EtcInfoProto::kCaVerificationEventFieldNumber;
const int EtcInfoProto::kSecurityPopupEventFieldNumber;
const int EtcInfoProto::kKofrEventFieldNumber;
const int EtcInfoProto::kImportEventFieldNumber;
const int EtcInfoProto::kPageInfoBubbleEventFieldNumber;
const int EtcInfoProto::kCrabEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EtcInfoProto::EtcInfoProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.EtcInfoProto)
}
EtcInfoProto::EtcInfoProto(const EtcInfoProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      browser_informer_event_(from.browser_informer_event_),
      ca_verification_event_(from.ca_verification_event_),
      security_popup_event_(from.security_popup_event_),
      kofr_event_(from.kofr_event_),
      import_event_(from.import_event_),
      page_info_bubble_event_(from.page_info_bubble_event_),
      crab_event_(from.crab_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  atom_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_atom_version()) {
    atom_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.atom_version_);
  }
  rfr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rfr()) {
    rfr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rfr_);
  }
  default_search_engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_search_engine()) {
    default_search_engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_);
  }
  home_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_home_page()) {
    home_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_page_);
  }
  ntp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ntp()) {
    ntp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ntp_);
  }
  launch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_launch()) {
    launch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launch_);
  }
  shortcut_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shortcut_url()) {
    shortcut_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcut_url_);
  }
  assoc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_assoc()) {
    assoc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assoc_);
  }
  ::memcpy(&vk_music_switcher_, &from.vk_music_switcher_,
    static_cast<size_t>(reinterpret_cast<char*>(&vk_login_) -
    reinterpret_cast<char*>(&vk_music_switcher_)) + sizeof(vk_login_));
  // @@protoc_insertion_point(copy_constructor:metrics.EtcInfoProto)
}

void EtcInfoProto::SharedCtor() {
  _cached_size_ = 0;
  atom_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rfr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_search_engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  launch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assoc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vk_music_switcher_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vk_login_) -
      reinterpret_cast<char*>(&vk_music_switcher_)) + sizeof(vk_login_));
}

EtcInfoProto::~EtcInfoProto() {
  // @@protoc_insertion_point(destructor:metrics.EtcInfoProto)
  SharedDtor();
}

void EtcInfoProto::SharedDtor() {
  atom_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rfr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_search_engine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  launch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assoc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EtcInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EtcInfoProto::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EtcInfoProto& EtcInfoProto::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

EtcInfoProto* EtcInfoProto::New(::google::protobuf::Arena* arena) const {
  EtcInfoProto* n = new EtcInfoProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EtcInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.EtcInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_informer_event_.Clear();
  ca_verification_event_.Clear();
  security_popup_event_.Clear();
  kofr_event_.Clear();
  import_event_.Clear();
  page_info_bubble_event_.Clear();
  crab_event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!atom_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*atom_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rfr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rfr_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!default_search_engine_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*default_search_engine_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!home_page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*home_page_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!ntp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ntp_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!launch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*launch_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!shortcut_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shortcut_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!assoc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*assoc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&vk_music_switcher_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vk_login_) -
        reinterpret_cast<char*>(&vk_music_switcher_)) + sizeof(vk_login_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EtcInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.EtcInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string atom_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atom_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atom_version().data(), static_cast<int>(this->atom_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.atom_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vk_music_switcher = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vk_music_switcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vk_music_switcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vk_notify_switcher = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vk_notify_switcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vk_notify_switcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_switcher = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_channel_switcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_switcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool whatsapp_switcher = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_whatsapp_switcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whatsapp_switcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rfr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rfr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rfr().data(), static_cast<int>(this->rfr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.rfr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_search_engine = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_search_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_search_engine().data(), static_cast<int>(this->default_search_engine().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.default_search_engine");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_browser_default = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_browser_default();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_browser_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string home_page = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->home_page().data(), static_cast<int>(this->home_page().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.home_page");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ntp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ntp().data(), static_cast<int>(this->ntp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.ntp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autorun = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_autorun();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autorun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string launch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_launch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->launch().data(), static_cast<int>(this->launch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.launch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shortcut_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcut_url().data(), static_cast<int>(this->shortcut_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.shortcut_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string assoc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assoc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assoc().data(), static_cast<int>(this->assoc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.EtcInfoProto.assoc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_notify_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vk_login = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_vk_login();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vk_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.BrowserInformerProto browser_informer_event = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_browser_informer_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CAVerificationProto ca_verification_event = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ca_verification_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SecurityPopupProto security_popup_event = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_security_popup_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.KOFRProto kofr_event = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kofr_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.ImportProto import_event = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_import_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_info_bubble_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CrabEvents crab_event = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crab_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.EtcInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.EtcInfoProto)
  return false;
#undef DO_
}

void EtcInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.EtcInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string atom_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atom_version().data(), static_cast<int>(this->atom_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.atom_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->atom_version(), output);
  }

  // optional bool vk_music_switcher = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vk_music_switcher(), output);
  }

  // optional bool vk_notify_switcher = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vk_notify_switcher(), output);
  }

  // optional bool channel_switcher = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->channel_switcher(), output);
  }

  // optional bool whatsapp_switcher = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->whatsapp_switcher(), output);
  }

  // optional string rfr = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rfr().data(), static_cast<int>(this->rfr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.rfr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rfr(), output);
  }

  // optional string default_search_engine = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_search_engine().data(), static_cast<int>(this->default_search_engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.default_search_engine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->default_search_engine(), output);
  }

  // optional bool is_browser_default = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_browser_default(), output);
  }

  // optional string home_page = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home_page().data(), static_cast<int>(this->home_page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.home_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->home_page(), output);
  }

  // optional string ntp = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ntp().data(), static_cast<int>(this->ntp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.ntp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ntp(), output);
  }

  // optional bool autorun = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->autorun(), output);
  }

  // optional string launch = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->launch().data(), static_cast<int>(this->launch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.launch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->launch(), output);
  }

  // optional string shortcut_url = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut_url().data(), static_cast<int>(this->shortcut_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.shortcut_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->shortcut_url(), output);
  }

  // optional string assoc = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assoc().data(), static_cast<int>(this->assoc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.assoc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->assoc(), output);
  }

  // optional bool notify_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->notify_enabled(), output);
  }

  // optional int32 vk_login = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->vk_login(), output);
  }

  // repeated .metrics.BrowserInformerProto browser_informer_event = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->browser_informer_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->browser_informer_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.CAVerificationProto ca_verification_event = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ca_verification_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->ca_verification_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.SecurityPopupProto security_popup_event = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->security_popup_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->security_popup_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.KOFRProto kofr_event = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kofr_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->kofr_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.ImportProto import_event = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->import_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->import_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_info_bubble_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->page_info_bubble_event(static_cast<int>(i)), output);
  }

  // repeated .metrics.CrabEvents crab_event = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crab_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->crab_event(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.EtcInfoProto)
}

::google::protobuf::uint8* EtcInfoProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.EtcInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string atom_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atom_version().data(), static_cast<int>(this->atom_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.atom_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->atom_version(), target);
  }

  // optional bool vk_music_switcher = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vk_music_switcher(), target);
  }

  // optional bool vk_notify_switcher = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vk_notify_switcher(), target);
  }

  // optional bool channel_switcher = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->channel_switcher(), target);
  }

  // optional bool whatsapp_switcher = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->whatsapp_switcher(), target);
  }

  // optional string rfr = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rfr().data(), static_cast<int>(this->rfr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.rfr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rfr(), target);
  }

  // optional string default_search_engine = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_search_engine().data(), static_cast<int>(this->default_search_engine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.default_search_engine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->default_search_engine(), target);
  }

  // optional bool is_browser_default = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_browser_default(), target);
  }

  // optional string home_page = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home_page().data(), static_cast<int>(this->home_page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.home_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->home_page(), target);
  }

  // optional string ntp = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ntp().data(), static_cast<int>(this->ntp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.ntp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ntp(), target);
  }

  // optional bool autorun = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->autorun(), target);
  }

  // optional string launch = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->launch().data(), static_cast<int>(this->launch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.launch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->launch(), target);
  }

  // optional string shortcut_url = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut_url().data(), static_cast<int>(this->shortcut_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.shortcut_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->shortcut_url(), target);
  }

  // optional string assoc = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assoc().data(), static_cast<int>(this->assoc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.EtcInfoProto.assoc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->assoc(), target);
  }

  // optional bool notify_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->notify_enabled(), target);
  }

  // optional int32 vk_login = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->vk_login(), target);
  }

  // repeated .metrics.BrowserInformerProto browser_informer_event = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->browser_informer_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->browser_informer_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.CAVerificationProto ca_verification_event = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ca_verification_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->ca_verification_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.SecurityPopupProto security_popup_event = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->security_popup_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->security_popup_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.KOFRProto kofr_event = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kofr_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->kofr_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.ImportProto import_event = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->import_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->import_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_info_bubble_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->page_info_bubble_event(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.CrabEvents crab_event = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crab_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->crab_event(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.EtcInfoProto)
  return target;
}

size_t EtcInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.EtcInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .metrics.BrowserInformerProto browser_informer_event = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->browser_informer_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browser_informer_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CAVerificationProto ca_verification_event = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->ca_verification_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ca_verification_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SecurityPopupProto security_popup_event = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->security_popup_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_popup_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.KOFRProto kofr_event = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->kofr_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kofr_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.ImportProto import_event = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->import_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->import_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->page_info_bubble_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_info_bubble_event(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CrabEvents crab_event = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->crab_event_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crab_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string atom_version = 1;
    if (has_atom_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atom_version());
    }

    // optional string rfr = 6;
    if (has_rfr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rfr());
    }

    // optional string default_search_engine = 7;
    if (has_default_search_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_search_engine());
    }

    // optional string home_page = 9;
    if (has_home_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home_page());
    }

    // optional string ntp = 10;
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntp());
    }

    // optional string launch = 12;
    if (has_launch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->launch());
    }

    // optional string shortcut_url = 13;
    if (has_shortcut_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcut_url());
    }

    // optional string assoc = 14;
    if (has_assoc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assoc());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool vk_music_switcher = 2;
    if (has_vk_music_switcher()) {
      total_size += 1 + 1;
    }

    // optional bool vk_notify_switcher = 3;
    if (has_vk_notify_switcher()) {
      total_size += 1 + 1;
    }

    // optional bool channel_switcher = 4;
    if (has_channel_switcher()) {
      total_size += 1 + 1;
    }

    // optional bool whatsapp_switcher = 5;
    if (has_whatsapp_switcher()) {
      total_size += 1 + 1;
    }

    // optional bool is_browser_default = 8;
    if (has_is_browser_default()) {
      total_size += 1 + 1;
    }

    // optional bool autorun = 11;
    if (has_autorun()) {
      total_size += 1 + 1;
    }

    // optional bool notify_enabled = 15;
    if (has_notify_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 vk_login = 16;
    if (has_vk_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vk_login());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EtcInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.EtcInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EtcInfoProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EtcInfoProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.EtcInfoProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.EtcInfoProto)
    MergeFrom(*source);
  }
}

void EtcInfoProto::MergeFrom(const EtcInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.EtcInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  browser_informer_event_.MergeFrom(from.browser_informer_event_);
  ca_verification_event_.MergeFrom(from.ca_verification_event_);
  security_popup_event_.MergeFrom(from.security_popup_event_);
  kofr_event_.MergeFrom(from.kofr_event_);
  import_event_.MergeFrom(from.import_event_);
  page_info_bubble_event_.MergeFrom(from.page_info_bubble_event_);
  crab_event_.MergeFrom(from.crab_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_atom_version();
      atom_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.atom_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rfr();
      rfr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rfr_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_default_search_engine();
      default_search_engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_home_page();
      home_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_page_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ntp();
      ntp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ntp_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_launch();
      launch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launch_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_shortcut_url();
      shortcut_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcut_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_assoc();
      assoc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assoc_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      vk_music_switcher_ = from.vk_music_switcher_;
    }
    if (cached_has_bits & 0x00000200u) {
      vk_notify_switcher_ = from.vk_notify_switcher_;
    }
    if (cached_has_bits & 0x00000400u) {
      channel_switcher_ = from.channel_switcher_;
    }
    if (cached_has_bits & 0x00000800u) {
      whatsapp_switcher_ = from.whatsapp_switcher_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_browser_default_ = from.is_browser_default_;
    }
    if (cached_has_bits & 0x00002000u) {
      autorun_ = from.autorun_;
    }
    if (cached_has_bits & 0x00004000u) {
      notify_enabled_ = from.notify_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      vk_login_ = from.vk_login_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EtcInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.EtcInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EtcInfoProto::CopyFrom(const EtcInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.EtcInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtcInfoProto::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->crab_event())) return false;
  return true;
}

void EtcInfoProto::Swap(EtcInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EtcInfoProto::InternalSwap(EtcInfoProto* other) {
  using std::swap;
  browser_informer_event_.InternalSwap(&other->browser_informer_event_);
  ca_verification_event_.InternalSwap(&other->ca_verification_event_);
  security_popup_event_.InternalSwap(&other->security_popup_event_);
  kofr_event_.InternalSwap(&other->kofr_event_);
  import_event_.InternalSwap(&other->import_event_);
  page_info_bubble_event_.InternalSwap(&other->page_info_bubble_event_);
  crab_event_.InternalSwap(&other->crab_event_);
  atom_version_.Swap(&other->atom_version_);
  rfr_.Swap(&other->rfr_);
  default_search_engine_.Swap(&other->default_search_engine_);
  home_page_.Swap(&other->home_page_);
  ntp_.Swap(&other->ntp_);
  launch_.Swap(&other->launch_);
  shortcut_url_.Swap(&other->shortcut_url_);
  assoc_.Swap(&other->assoc_);
  swap(vk_music_switcher_, other->vk_music_switcher_);
  swap(vk_notify_switcher_, other->vk_notify_switcher_);
  swap(channel_switcher_, other->channel_switcher_);
  swap(whatsapp_switcher_, other->whatsapp_switcher_);
  swap(is_browser_default_, other->is_browser_default_);
  swap(autorun_, other->autorun_);
  swap(notify_enabled_, other->notify_enabled_);
  swap(vk_login_, other->vk_login_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EtcInfoProto::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EtcInfoProto

// optional string atom_version = 1;
bool EtcInfoProto::has_atom_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EtcInfoProto::set_has_atom_version() {
  _has_bits_[0] |= 0x00000001u;
}
void EtcInfoProto::clear_has_atom_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void EtcInfoProto::clear_atom_version() {
  atom_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_atom_version();
}
const ::std::string& EtcInfoProto::atom_version() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.atom_version)
  return atom_version_.GetNoArena();
}
void EtcInfoProto::set_atom_version(const ::std::string& value) {
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.atom_version)
}
#if LANG_CXX11
void EtcInfoProto::set_atom_version(::std::string&& value) {
  set_has_atom_version();
  atom_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.atom_version)
}
#endif
void EtcInfoProto::set_atom_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.atom_version)
}
void EtcInfoProto::set_atom_version(const char* value, size_t size) {
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.atom_version)
}
::std::string* EtcInfoProto::mutable_atom_version() {
  set_has_atom_version();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.atom_version)
  return atom_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_atom_version() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.atom_version)
  clear_has_atom_version();
  return atom_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_atom_version(::std::string* atom_version) {
  if (atom_version != NULL) {
    set_has_atom_version();
  } else {
    clear_has_atom_version();
  }
  atom_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), atom_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.atom_version)
}

// optional bool vk_music_switcher = 2;
bool EtcInfoProto::has_vk_music_switcher() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EtcInfoProto::set_has_vk_music_switcher() {
  _has_bits_[0] |= 0x00000100u;
}
void EtcInfoProto::clear_has_vk_music_switcher() {
  _has_bits_[0] &= ~0x00000100u;
}
void EtcInfoProto::clear_vk_music_switcher() {
  vk_music_switcher_ = false;
  clear_has_vk_music_switcher();
}
bool EtcInfoProto::vk_music_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_music_switcher)
  return vk_music_switcher_;
}
void EtcInfoProto::set_vk_music_switcher(bool value) {
  set_has_vk_music_switcher();
  vk_music_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_music_switcher)
}

// optional bool vk_notify_switcher = 3;
bool EtcInfoProto::has_vk_notify_switcher() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EtcInfoProto::set_has_vk_notify_switcher() {
  _has_bits_[0] |= 0x00000200u;
}
void EtcInfoProto::clear_has_vk_notify_switcher() {
  _has_bits_[0] &= ~0x00000200u;
}
void EtcInfoProto::clear_vk_notify_switcher() {
  vk_notify_switcher_ = false;
  clear_has_vk_notify_switcher();
}
bool EtcInfoProto::vk_notify_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_notify_switcher)
  return vk_notify_switcher_;
}
void EtcInfoProto::set_vk_notify_switcher(bool value) {
  set_has_vk_notify_switcher();
  vk_notify_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_notify_switcher)
}

// optional bool channel_switcher = 4;
bool EtcInfoProto::has_channel_switcher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EtcInfoProto::set_has_channel_switcher() {
  _has_bits_[0] |= 0x00000400u;
}
void EtcInfoProto::clear_has_channel_switcher() {
  _has_bits_[0] &= ~0x00000400u;
}
void EtcInfoProto::clear_channel_switcher() {
  channel_switcher_ = false;
  clear_has_channel_switcher();
}
bool EtcInfoProto::channel_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.channel_switcher)
  return channel_switcher_;
}
void EtcInfoProto::set_channel_switcher(bool value) {
  set_has_channel_switcher();
  channel_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.channel_switcher)
}

// optional bool whatsapp_switcher = 5;
bool EtcInfoProto::has_whatsapp_switcher() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EtcInfoProto::set_has_whatsapp_switcher() {
  _has_bits_[0] |= 0x00000800u;
}
void EtcInfoProto::clear_has_whatsapp_switcher() {
  _has_bits_[0] &= ~0x00000800u;
}
void EtcInfoProto::clear_whatsapp_switcher() {
  whatsapp_switcher_ = false;
  clear_has_whatsapp_switcher();
}
bool EtcInfoProto::whatsapp_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.whatsapp_switcher)
  return whatsapp_switcher_;
}
void EtcInfoProto::set_whatsapp_switcher(bool value) {
  set_has_whatsapp_switcher();
  whatsapp_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.whatsapp_switcher)
}

// optional string rfr = 6;
bool EtcInfoProto::has_rfr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EtcInfoProto::set_has_rfr() {
  _has_bits_[0] |= 0x00000002u;
}
void EtcInfoProto::clear_has_rfr() {
  _has_bits_[0] &= ~0x00000002u;
}
void EtcInfoProto::clear_rfr() {
  rfr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rfr();
}
const ::std::string& EtcInfoProto::rfr() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.rfr)
  return rfr_.GetNoArena();
}
void EtcInfoProto::set_rfr(const ::std::string& value) {
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.rfr)
}
#if LANG_CXX11
void EtcInfoProto::set_rfr(::std::string&& value) {
  set_has_rfr();
  rfr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.rfr)
}
#endif
void EtcInfoProto::set_rfr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.rfr)
}
void EtcInfoProto::set_rfr(const char* value, size_t size) {
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.rfr)
}
::std::string* EtcInfoProto::mutable_rfr() {
  set_has_rfr();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.rfr)
  return rfr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_rfr() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.rfr)
  clear_has_rfr();
  return rfr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_rfr(::std::string* rfr) {
  if (rfr != NULL) {
    set_has_rfr();
  } else {
    clear_has_rfr();
  }
  rfr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rfr);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.rfr)
}

// optional string default_search_engine = 7;
bool EtcInfoProto::has_default_search_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EtcInfoProto::set_has_default_search_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void EtcInfoProto::clear_has_default_search_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void EtcInfoProto::clear_default_search_engine() {
  default_search_engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_search_engine();
}
const ::std::string& EtcInfoProto::default_search_engine() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.default_search_engine)
  return default_search_engine_.GetNoArena();
}
void EtcInfoProto::set_default_search_engine(const ::std::string& value) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.default_search_engine)
}
#if LANG_CXX11
void EtcInfoProto::set_default_search_engine(::std::string&& value) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.default_search_engine)
}
#endif
void EtcInfoProto::set_default_search_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.default_search_engine)
}
void EtcInfoProto::set_default_search_engine(const char* value, size_t size) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.default_search_engine)
}
::std::string* EtcInfoProto::mutable_default_search_engine() {
  set_has_default_search_engine();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.default_search_engine)
  return default_search_engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_default_search_engine() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.default_search_engine)
  clear_has_default_search_engine();
  return default_search_engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_default_search_engine(::std::string* default_search_engine) {
  if (default_search_engine != NULL) {
    set_has_default_search_engine();
  } else {
    clear_has_default_search_engine();
  }
  default_search_engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_search_engine);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.default_search_engine)
}

// optional bool is_browser_default = 8;
bool EtcInfoProto::has_is_browser_default() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EtcInfoProto::set_has_is_browser_default() {
  _has_bits_[0] |= 0x00001000u;
}
void EtcInfoProto::clear_has_is_browser_default() {
  _has_bits_[0] &= ~0x00001000u;
}
void EtcInfoProto::clear_is_browser_default() {
  is_browser_default_ = false;
  clear_has_is_browser_default();
}
bool EtcInfoProto::is_browser_default() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.is_browser_default)
  return is_browser_default_;
}
void EtcInfoProto::set_is_browser_default(bool value) {
  set_has_is_browser_default();
  is_browser_default_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.is_browser_default)
}

// optional string home_page = 9;
bool EtcInfoProto::has_home_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EtcInfoProto::set_has_home_page() {
  _has_bits_[0] |= 0x00000008u;
}
void EtcInfoProto::clear_has_home_page() {
  _has_bits_[0] &= ~0x00000008u;
}
void EtcInfoProto::clear_home_page() {
  home_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_home_page();
}
const ::std::string& EtcInfoProto::home_page() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.home_page)
  return home_page_.GetNoArena();
}
void EtcInfoProto::set_home_page(const ::std::string& value) {
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.home_page)
}
#if LANG_CXX11
void EtcInfoProto::set_home_page(::std::string&& value) {
  set_has_home_page();
  home_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.home_page)
}
#endif
void EtcInfoProto::set_home_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.home_page)
}
void EtcInfoProto::set_home_page(const char* value, size_t size) {
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.home_page)
}
::std::string* EtcInfoProto::mutable_home_page() {
  set_has_home_page();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.home_page)
  return home_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_home_page() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.home_page)
  clear_has_home_page();
  return home_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_home_page(::std::string* home_page) {
  if (home_page != NULL) {
    set_has_home_page();
  } else {
    clear_has_home_page();
  }
  home_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home_page);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.home_page)
}

// optional string ntp = 10;
bool EtcInfoProto::has_ntp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EtcInfoProto::set_has_ntp() {
  _has_bits_[0] |= 0x00000010u;
}
void EtcInfoProto::clear_has_ntp() {
  _has_bits_[0] &= ~0x00000010u;
}
void EtcInfoProto::clear_ntp() {
  ntp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ntp();
}
const ::std::string& EtcInfoProto::ntp() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.ntp)
  return ntp_.GetNoArena();
}
void EtcInfoProto::set_ntp(const ::std::string& value) {
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.ntp)
}
#if LANG_CXX11
void EtcInfoProto::set_ntp(::std::string&& value) {
  set_has_ntp();
  ntp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.ntp)
}
#endif
void EtcInfoProto::set_ntp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.ntp)
}
void EtcInfoProto::set_ntp(const char* value, size_t size) {
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.ntp)
}
::std::string* EtcInfoProto::mutable_ntp() {
  set_has_ntp();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.ntp)
  return ntp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_ntp() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.ntp)
  clear_has_ntp();
  return ntp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_ntp(::std::string* ntp) {
  if (ntp != NULL) {
    set_has_ntp();
  } else {
    clear_has_ntp();
  }
  ntp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.ntp)
}

// optional bool autorun = 11;
bool EtcInfoProto::has_autorun() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EtcInfoProto::set_has_autorun() {
  _has_bits_[0] |= 0x00002000u;
}
void EtcInfoProto::clear_has_autorun() {
  _has_bits_[0] &= ~0x00002000u;
}
void EtcInfoProto::clear_autorun() {
  autorun_ = false;
  clear_has_autorun();
}
bool EtcInfoProto::autorun() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.autorun)
  return autorun_;
}
void EtcInfoProto::set_autorun(bool value) {
  set_has_autorun();
  autorun_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.autorun)
}

// optional string launch = 12;
bool EtcInfoProto::has_launch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EtcInfoProto::set_has_launch() {
  _has_bits_[0] |= 0x00000020u;
}
void EtcInfoProto::clear_has_launch() {
  _has_bits_[0] &= ~0x00000020u;
}
void EtcInfoProto::clear_launch() {
  launch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_launch();
}
const ::std::string& EtcInfoProto::launch() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.launch)
  return launch_.GetNoArena();
}
void EtcInfoProto::set_launch(const ::std::string& value) {
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.launch)
}
#if LANG_CXX11
void EtcInfoProto::set_launch(::std::string&& value) {
  set_has_launch();
  launch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.launch)
}
#endif
void EtcInfoProto::set_launch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.launch)
}
void EtcInfoProto::set_launch(const char* value, size_t size) {
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.launch)
}
::std::string* EtcInfoProto::mutable_launch() {
  set_has_launch();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.launch)
  return launch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_launch() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.launch)
  clear_has_launch();
  return launch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_launch(::std::string* launch) {
  if (launch != NULL) {
    set_has_launch();
  } else {
    clear_has_launch();
  }
  launch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.launch)
}

// optional string shortcut_url = 13;
bool EtcInfoProto::has_shortcut_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EtcInfoProto::set_has_shortcut_url() {
  _has_bits_[0] |= 0x00000040u;
}
void EtcInfoProto::clear_has_shortcut_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void EtcInfoProto::clear_shortcut_url() {
  shortcut_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shortcut_url();
}
const ::std::string& EtcInfoProto::shortcut_url() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.shortcut_url)
  return shortcut_url_.GetNoArena();
}
void EtcInfoProto::set_shortcut_url(const ::std::string& value) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.shortcut_url)
}
#if LANG_CXX11
void EtcInfoProto::set_shortcut_url(::std::string&& value) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.shortcut_url)
}
#endif
void EtcInfoProto::set_shortcut_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.shortcut_url)
}
void EtcInfoProto::set_shortcut_url(const char* value, size_t size) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.shortcut_url)
}
::std::string* EtcInfoProto::mutable_shortcut_url() {
  set_has_shortcut_url();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.shortcut_url)
  return shortcut_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_shortcut_url() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.shortcut_url)
  clear_has_shortcut_url();
  return shortcut_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_shortcut_url(::std::string* shortcut_url) {
  if (shortcut_url != NULL) {
    set_has_shortcut_url();
  } else {
    clear_has_shortcut_url();
  }
  shortcut_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shortcut_url);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.shortcut_url)
}

// optional string assoc = 14;
bool EtcInfoProto::has_assoc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EtcInfoProto::set_has_assoc() {
  _has_bits_[0] |= 0x00000080u;
}
void EtcInfoProto::clear_has_assoc() {
  _has_bits_[0] &= ~0x00000080u;
}
void EtcInfoProto::clear_assoc() {
  assoc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_assoc();
}
const ::std::string& EtcInfoProto::assoc() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.assoc)
  return assoc_.GetNoArena();
}
void EtcInfoProto::set_assoc(const ::std::string& value) {
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.assoc)
}
#if LANG_CXX11
void EtcInfoProto::set_assoc(::std::string&& value) {
  set_has_assoc();
  assoc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.assoc)
}
#endif
void EtcInfoProto::set_assoc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.assoc)
}
void EtcInfoProto::set_assoc(const char* value, size_t size) {
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.assoc)
}
::std::string* EtcInfoProto::mutable_assoc() {
  set_has_assoc();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.assoc)
  return assoc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EtcInfoProto::release_assoc() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.assoc)
  clear_has_assoc();
  return assoc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EtcInfoProto::set_allocated_assoc(::std::string* assoc) {
  if (assoc != NULL) {
    set_has_assoc();
  } else {
    clear_has_assoc();
  }
  assoc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assoc);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.assoc)
}

// optional bool notify_enabled = 15;
bool EtcInfoProto::has_notify_enabled() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EtcInfoProto::set_has_notify_enabled() {
  _has_bits_[0] |= 0x00004000u;
}
void EtcInfoProto::clear_has_notify_enabled() {
  _has_bits_[0] &= ~0x00004000u;
}
void EtcInfoProto::clear_notify_enabled() {
  notify_enabled_ = false;
  clear_has_notify_enabled();
}
bool EtcInfoProto::notify_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.notify_enabled)
  return notify_enabled_;
}
void EtcInfoProto::set_notify_enabled(bool value) {
  set_has_notify_enabled();
  notify_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.notify_enabled)
}

// optional int32 vk_login = 16;
bool EtcInfoProto::has_vk_login() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EtcInfoProto::set_has_vk_login() {
  _has_bits_[0] |= 0x00008000u;
}
void EtcInfoProto::clear_has_vk_login() {
  _has_bits_[0] &= ~0x00008000u;
}
void EtcInfoProto::clear_vk_login() {
  vk_login_ = 0;
  clear_has_vk_login();
}
::google::protobuf::int32 EtcInfoProto::vk_login() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_login)
  return vk_login_;
}
void EtcInfoProto::set_vk_login(::google::protobuf::int32 value) {
  set_has_vk_login();
  vk_login_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_login)
}

// repeated .metrics.BrowserInformerProto browser_informer_event = 17;
int EtcInfoProto::browser_informer_event_size() const {
  return browser_informer_event_.size();
}
void EtcInfoProto::clear_browser_informer_event() {
  browser_informer_event_.Clear();
}
const ::metrics::BrowserInformerProto& EtcInfoProto::browser_informer_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Get(index);
}
::metrics::BrowserInformerProto* EtcInfoProto::mutable_browser_informer_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Mutable(index);
}
::metrics::BrowserInformerProto* EtcInfoProto::add_browser_informer_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >*
EtcInfoProto::mutable_browser_informer_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.browser_informer_event)
  return &browser_informer_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >&
EtcInfoProto::browser_informer_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_;
}

// repeated .metrics.CAVerificationProto ca_verification_event = 18;
int EtcInfoProto::ca_verification_event_size() const {
  return ca_verification_event_.size();
}
void EtcInfoProto::clear_ca_verification_event() {
  ca_verification_event_.Clear();
}
const ::metrics::CAVerificationProto& EtcInfoProto::ca_verification_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Get(index);
}
::metrics::CAVerificationProto* EtcInfoProto::mutable_ca_verification_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Mutable(index);
}
::metrics::CAVerificationProto* EtcInfoProto::add_ca_verification_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >*
EtcInfoProto::mutable_ca_verification_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.ca_verification_event)
  return &ca_verification_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >&
EtcInfoProto::ca_verification_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_;
}

// repeated .metrics.SecurityPopupProto security_popup_event = 19;
int EtcInfoProto::security_popup_event_size() const {
  return security_popup_event_.size();
}
void EtcInfoProto::clear_security_popup_event() {
  security_popup_event_.Clear();
}
const ::metrics::SecurityPopupProto& EtcInfoProto::security_popup_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Get(index);
}
::metrics::SecurityPopupProto* EtcInfoProto::mutable_security_popup_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Mutable(index);
}
::metrics::SecurityPopupProto* EtcInfoProto::add_security_popup_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >*
EtcInfoProto::mutable_security_popup_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.security_popup_event)
  return &security_popup_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >&
EtcInfoProto::security_popup_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_;
}

// repeated .metrics.KOFRProto kofr_event = 20;
int EtcInfoProto::kofr_event_size() const {
  return kofr_event_.size();
}
void EtcInfoProto::clear_kofr_event() {
  kofr_event_.Clear();
}
const ::metrics::KOFRProto& EtcInfoProto::kofr_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Get(index);
}
::metrics::KOFRProto* EtcInfoProto::mutable_kofr_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Mutable(index);
}
::metrics::KOFRProto* EtcInfoProto::add_kofr_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >*
EtcInfoProto::mutable_kofr_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.kofr_event)
  return &kofr_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >&
EtcInfoProto::kofr_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.kofr_event)
  return kofr_event_;
}

// repeated .metrics.ImportProto import_event = 21;
int EtcInfoProto::import_event_size() const {
  return import_event_.size();
}
void EtcInfoProto::clear_import_event() {
  import_event_.Clear();
}
const ::metrics::ImportProto& EtcInfoProto::import_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.import_event)
  return import_event_.Get(index);
}
::metrics::ImportProto* EtcInfoProto::mutable_import_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.import_event)
  return import_event_.Mutable(index);
}
::metrics::ImportProto* EtcInfoProto::add_import_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.import_event)
  return import_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >*
EtcInfoProto::mutable_import_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.import_event)
  return &import_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >&
EtcInfoProto::import_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.import_event)
  return import_event_;
}

// repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
int EtcInfoProto::page_info_bubble_event_size() const {
  return page_info_bubble_event_.size();
}
void EtcInfoProto::clear_page_info_bubble_event() {
  page_info_bubble_event_.Clear();
}
const ::metrics::PageInfoBubbleProto& EtcInfoProto::page_info_bubble_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Get(index);
}
::metrics::PageInfoBubbleProto* EtcInfoProto::mutable_page_info_bubble_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Mutable(index);
}
::metrics::PageInfoBubbleProto* EtcInfoProto::add_page_info_bubble_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >*
EtcInfoProto::mutable_page_info_bubble_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.page_info_bubble_event)
  return &page_info_bubble_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >&
EtcInfoProto::page_info_bubble_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_;
}

// repeated .metrics.CrabEvents crab_event = 23;
int EtcInfoProto::crab_event_size() const {
  return crab_event_.size();
}
void EtcInfoProto::clear_crab_event() {
  crab_event_.Clear();
}
const ::metrics::CrabEvents& EtcInfoProto::crab_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.crab_event)
  return crab_event_.Get(index);
}
::metrics::CrabEvents* EtcInfoProto::mutable_crab_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.crab_event)
  return crab_event_.Mutable(index);
}
::metrics::CrabEvents* EtcInfoProto::add_crab_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.crab_event)
  return crab_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >*
EtcInfoProto::mutable_crab_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.crab_event)
  return &crab_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >&
EtcInfoProto::crab_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.crab_event)
  return crab_event_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrabItemInfo::kKeyFieldNumber;
const int CrabItemInfo::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrabItemInfo::CrabItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CrabItemInfo)
}
CrabItemInfo::CrabItemInfo(const CrabItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.CrabItemInfo)
}

void CrabItemInfo::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CrabItemInfo::~CrabItemInfo() {
  // @@protoc_insertion_point(destructor:metrics.CrabItemInfo)
  SharedDtor();
}

void CrabItemInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrabItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabItemInfo::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrabItemInfo& CrabItemInfo::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrabItemInfo* CrabItemInfo::New(::google::protobuf::Arena* arena) const {
  CrabItemInfo* n = new CrabItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrabItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CrabItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrabItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CrabItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabItemInfo.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabItemInfo.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CrabItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CrabItemInfo)
  return false;
#undef DO_
}

void CrabItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CrabItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabItemInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabItemInfo.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CrabItemInfo)
}

::google::protobuf::uint8* CrabItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CrabItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabItemInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabItemInfo.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CrabItemInfo)
  return target;
}

size_t CrabItemInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:metrics.CrabItemInfo)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t CrabItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CrabItemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CrabItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrabItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrabItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CrabItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CrabItemInfo)
    MergeFrom(*source);
  }
}

void CrabItemInfo::MergeFrom(const CrabItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CrabItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CrabItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CrabItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabItemInfo::CopyFrom(const CrabItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CrabItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CrabItemInfo::Swap(CrabItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrabItemInfo::InternalSwap(CrabItemInfo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrabItemInfo::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrabItemInfo

// required string key = 1;
bool CrabItemInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrabItemInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CrabItemInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrabItemInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CrabItemInfo::key() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItemInfo.key)
  return key_.GetNoArena();
}
void CrabItemInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabItemInfo.key)
}
#if LANG_CXX11
void CrabItemInfo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabItemInfo.key)
}
#endif
void CrabItemInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabItemInfo.key)
}
void CrabItemInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabItemInfo.key)
}
::std::string* CrabItemInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:metrics.CrabItemInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabItemInfo::release_key() {
  // @@protoc_insertion_point(field_release:metrics.CrabItemInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabItemInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabItemInfo.key)
}

// required string value = 2;
bool CrabItemInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrabItemInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CrabItemInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrabItemInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CrabItemInfo::value() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItemInfo.value)
  return value_.GetNoArena();
}
void CrabItemInfo::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabItemInfo.value)
}
#if LANG_CXX11
void CrabItemInfo::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabItemInfo.value)
}
#endif
void CrabItemInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabItemInfo.value)
}
void CrabItemInfo::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabItemInfo.value)
}
::std::string* CrabItemInfo::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:metrics.CrabItemInfo.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabItemInfo::release_value() {
  // @@protoc_insertion_point(field_release:metrics.CrabItemInfo.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabItemInfo::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabItemInfo.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrabItem::kItemIdFieldNumber;
const int CrabItem::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrabItem::CrabItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CrabItem)
}
CrabItem::CrabItem(const CrabItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:metrics.CrabItem)
}

void CrabItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
}

CrabItem::~CrabItem() {
  // @@protoc_insertion_point(destructor:metrics.CrabItem)
  SharedDtor();
}

void CrabItem::SharedDtor() {
}

void CrabItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabItem::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrabItem& CrabItem::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrabItem* CrabItem::New(::google::protobuf::Arena* arena) const {
  CrabItem* n = new CrabItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrabItem::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CrabItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  item_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrabItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CrabItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CrabItemInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CrabItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CrabItem)
  return false;
#undef DO_
}

void CrabItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CrabItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // repeated .metrics.CrabItemInfo info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CrabItem)
}

::google::protobuf::uint8* CrabItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CrabItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // repeated .metrics.CrabItemInfo info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CrabItem)
  return target;
}

size_t CrabItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CrabItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 item_id = 1;
  if (has_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_id());
  }
  // repeated .metrics.CrabItemInfo info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CrabItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CrabItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrabItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CrabItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CrabItem)
    MergeFrom(*source);
  }
}

void CrabItem::MergeFrom(const CrabItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CrabItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.has_item_id()) {
    set_item_id(from.item_id());
  }
}

void CrabItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CrabItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabItem::CopyFrom(const CrabItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CrabItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void CrabItem::Swap(CrabItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrabItem::InternalSwap(CrabItem* other) {
  using std::swap;
  info_.InternalSwap(&other->info_);
  swap(item_id_, other->item_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrabItem::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrabItem

// required int32 item_id = 1;
bool CrabItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrabItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CrabItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrabItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
::google::protobuf::int32 CrabItem::item_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItem.item_id)
  return item_id_;
}
void CrabItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabItem.item_id)
}

// repeated .metrics.CrabItemInfo info = 2;
int CrabItem::info_size() const {
  return info_.size();
}
void CrabItem::clear_info() {
  info_.Clear();
}
const ::metrics::CrabItemInfo& CrabItem::info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabItem.info)
  return info_.Get(index);
}
::metrics::CrabItemInfo* CrabItem::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabItem.info)
  return info_.Mutable(index);
}
::metrics::CrabItemInfo* CrabItem::add_info() {
  // @@protoc_insertion_point(field_add:metrics.CrabItem.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >*
CrabItem::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabItem.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >&
CrabItem::info() const {
  // @@protoc_insertion_point(field_list:metrics.CrabItem.info)
  return info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrabShow::kParserIdFieldNumber;
const int CrabShow::kShowIdFieldNumber;
const int CrabShow::kClientTsFieldNumber;
const int CrabShow::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrabShow::CrabShow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CrabShow)
}
CrabShow::CrabShow(const CrabShow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parser_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parser_id()) {
    parser_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_id_);
  }
  show_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_show_id()) {
    show_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_id_);
  }
  client_ts_ = from.client_ts_;
  // @@protoc_insertion_point(copy_constructor:metrics.CrabShow)
}

void CrabShow::SharedCtor() {
  _cached_size_ = 0;
  parser_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ts_ = GOOGLE_LONGLONG(0);
}

CrabShow::~CrabShow() {
  // @@protoc_insertion_point(destructor:metrics.CrabShow)
  SharedDtor();
}

void CrabShow::SharedDtor() {
  parser_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrabShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabShow::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrabShow& CrabShow::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrabShow* CrabShow::New(::google::protobuf::Arena* arena) const {
  CrabShow* n = new CrabShow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrabShow::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CrabShow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!parser_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parser_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!show_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*show_id_.UnsafeRawStringPointer())->clear();
    }
  }
  client_ts_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrabShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CrabShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string parser_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parser_id().data(), static_cast<int>(this->parser_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabShow.parser_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string show_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_show_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_id().data(), static_cast<int>(this->show_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabShow.show_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 client_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CrabItem items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CrabShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CrabShow)
  return false;
#undef DO_
}

void CrabShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CrabShow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string parser_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parser_id().data(), static_cast<int>(this->parser_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabShow.parser_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parser_id(), output);
  }

  // required string show_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_id().data(), static_cast<int>(this->show_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabShow.show_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->show_id(), output);
  }

  // required int64 client_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_ts(), output);
  }

  // repeated .metrics.CrabItem items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CrabShow)
}

::google::protobuf::uint8* CrabShow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CrabShow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string parser_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parser_id().data(), static_cast<int>(this->parser_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabShow.parser_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parser_id(), target);
  }

  // required string show_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_id().data(), static_cast<int>(this->show_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabShow.show_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->show_id(), target);
  }

  // required int64 client_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_ts(), target);
  }

  // repeated .metrics.CrabItem items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CrabShow)
  return target;
}

size_t CrabShow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:metrics.CrabShow)
  size_t total_size = 0;

  if (has_parser_id()) {
    // required string parser_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parser_id());
  }

  if (has_show_id()) {
    // required string show_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_id());
  }

  if (has_client_ts()) {
    // required int64 client_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_ts());
  }

  return total_size;
}
size_t CrabShow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CrabShow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string parser_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parser_id());

    // required string show_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_id());

    // required int64 client_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .metrics.CrabItem items = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabShow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CrabShow)
  GOOGLE_DCHECK_NE(&from, this);
  const CrabShow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrabShow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CrabShow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CrabShow)
    MergeFrom(*source);
  }
}

void CrabShow::MergeFrom(const CrabShow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CrabShow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_parser_id();
      parser_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parser_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_show_id();
      show_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      client_ts_ = from.client_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrabShow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CrabShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabShow::CopyFrom(const CrabShow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CrabShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CrabShow::Swap(CrabShow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrabShow::InternalSwap(CrabShow* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  parser_id_.Swap(&other->parser_id_);
  show_id_.Swap(&other->show_id_);
  swap(client_ts_, other->client_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrabShow::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrabShow

// required string parser_id = 1;
bool CrabShow::has_parser_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrabShow::set_has_parser_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CrabShow::clear_has_parser_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrabShow::clear_parser_id() {
  parser_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parser_id();
}
const ::std::string& CrabShow::parser_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.parser_id)
  return parser_id_.GetNoArena();
}
void CrabShow::set_parser_id(const ::std::string& value) {
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabShow.parser_id)
}
#if LANG_CXX11
void CrabShow::set_parser_id(::std::string&& value) {
  set_has_parser_id();
  parser_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabShow.parser_id)
}
#endif
void CrabShow::set_parser_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabShow.parser_id)
}
void CrabShow::set_parser_id(const char* value, size_t size) {
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabShow.parser_id)
}
::std::string* CrabShow::mutable_parser_id() {
  set_has_parser_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.parser_id)
  return parser_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabShow::release_parser_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabShow.parser_id)
  clear_has_parser_id();
  return parser_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabShow::set_allocated_parser_id(::std::string* parser_id) {
  if (parser_id != NULL) {
    set_has_parser_id();
  } else {
    clear_has_parser_id();
  }
  parser_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabShow.parser_id)
}

// required string show_id = 2;
bool CrabShow::has_show_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrabShow::set_has_show_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CrabShow::clear_has_show_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrabShow::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_show_id();
}
const ::std::string& CrabShow::show_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.show_id)
  return show_id_.GetNoArena();
}
void CrabShow::set_show_id(const ::std::string& value) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabShow.show_id)
}
#if LANG_CXX11
void CrabShow::set_show_id(::std::string&& value) {
  set_has_show_id();
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabShow.show_id)
}
#endif
void CrabShow::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabShow.show_id)
}
void CrabShow::set_show_id(const char* value, size_t size) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabShow.show_id)
}
::std::string* CrabShow::mutable_show_id() {
  set_has_show_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabShow::release_show_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabShow.show_id)
  clear_has_show_id();
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabShow::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    set_has_show_id();
  } else {
    clear_has_show_id();
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabShow.show_id)
}

// required int64 client_ts = 3;
bool CrabShow::has_client_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrabShow::set_has_client_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void CrabShow::clear_has_client_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrabShow::clear_client_ts() {
  client_ts_ = GOOGLE_LONGLONG(0);
  clear_has_client_ts();
}
::google::protobuf::int64 CrabShow::client_ts() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.client_ts)
  return client_ts_;
}
void CrabShow::set_client_ts(::google::protobuf::int64 value) {
  set_has_client_ts();
  client_ts_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabShow.client_ts)
}

// repeated .metrics.CrabItem items = 4;
int CrabShow::items_size() const {
  return items_.size();
}
void CrabShow::clear_items() {
  items_.Clear();
}
const ::metrics::CrabItem& CrabShow::items(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.items)
  return items_.Get(index);
}
::metrics::CrabItem* CrabShow::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.items)
  return items_.Mutable(index);
}
::metrics::CrabItem* CrabShow::add_items() {
  // @@protoc_insertion_point(field_add:metrics.CrabShow.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >*
CrabShow::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabShow.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >&
CrabShow::items() const {
  // @@protoc_insertion_point(field_list:metrics.CrabShow.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrabClick::kShowIdFieldNumber;
const int CrabClick::kItemIdFieldNumber;
const int CrabClick::kClientTsFieldNumber;
const int CrabClick::kFinalUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrabClick::CrabClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CrabClick)
}
CrabClick::CrabClick(const CrabClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_show_id()) {
    show_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_id_);
  }
  final_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_final_url()) {
    final_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_url_);
  }
  ::memcpy(&client_ts_, &from.client_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&client_ts_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CrabClick)
}

void CrabClick::SharedCtor() {
  _cached_size_ = 0;
  show_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&client_ts_)) + sizeof(item_id_));
}

CrabClick::~CrabClick() {
  // @@protoc_insertion_point(destructor:metrics.CrabClick)
  SharedDtor();
}

void CrabClick::SharedDtor() {
  show_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrabClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabClick::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrabClick& CrabClick::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrabClick* CrabClick::New(::google::protobuf::Arena* arena) const {
  CrabClick* n = new CrabClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrabClick::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CrabClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!show_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*show_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!final_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*final_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&client_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&client_ts_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrabClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CrabClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string show_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_show_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_id().data(), static_cast<int>(this->show_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabClick.show_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 client_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string final_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->final_url().data(), static_cast<int>(this->final_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CrabClick.final_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CrabClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CrabClick)
  return false;
#undef DO_
}

void CrabClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CrabClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string show_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_id().data(), static_cast<int>(this->show_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabClick.show_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->show_id(), output);
  }

  // required int32 item_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // required int64 client_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_ts(), output);
  }

  // required string final_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->final_url().data(), static_cast<int>(this->final_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabClick.final_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->final_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CrabClick)
}

::google::protobuf::uint8* CrabClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CrabClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string show_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_id().data(), static_cast<int>(this->show_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabClick.show_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->show_id(), target);
  }

  // required int32 item_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // required int64 client_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_ts(), target);
  }

  // required string final_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->final_url().data(), static_cast<int>(this->final_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CrabClick.final_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->final_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CrabClick)
  return target;
}

size_t CrabClick::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:metrics.CrabClick)
  size_t total_size = 0;

  if (has_show_id()) {
    // required string show_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_id());
  }

  if (has_final_url()) {
    // required string final_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_url());
  }

  if (has_client_ts()) {
    // required int64 client_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_ts());
  }

  if (has_item_id()) {
    // required int32 item_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_id());
  }

  return total_size;
}
size_t CrabClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CrabClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string show_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_id());

    // required string final_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_url());

    // required int64 client_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_ts());

    // required int32 item_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CrabClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CrabClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrabClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CrabClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CrabClick)
    MergeFrom(*source);
  }
}

void CrabClick::MergeFrom(const CrabClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CrabClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_show_id();
      show_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_final_url();
      final_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      client_ts_ = from.client_ts_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrabClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CrabClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabClick::CopyFrom(const CrabClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CrabClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabClick::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CrabClick::Swap(CrabClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrabClick::InternalSwap(CrabClick* other) {
  using std::swap;
  show_id_.Swap(&other->show_id_);
  final_url_.Swap(&other->final_url_);
  swap(client_ts_, other->client_ts_);
  swap(item_id_, other->item_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrabClick::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrabClick

// required string show_id = 1;
bool CrabClick::has_show_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrabClick::set_has_show_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CrabClick::clear_has_show_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrabClick::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_show_id();
}
const ::std::string& CrabClick::show_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.show_id)
  return show_id_.GetNoArena();
}
void CrabClick::set_show_id(const ::std::string& value) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabClick.show_id)
}
#if LANG_CXX11
void CrabClick::set_show_id(::std::string&& value) {
  set_has_show_id();
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabClick.show_id)
}
#endif
void CrabClick::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabClick.show_id)
}
void CrabClick::set_show_id(const char* value, size_t size) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabClick.show_id)
}
::std::string* CrabClick::mutable_show_id() {
  set_has_show_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabClick.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabClick::release_show_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabClick.show_id)
  clear_has_show_id();
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabClick::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    set_has_show_id();
  } else {
    clear_has_show_id();
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabClick.show_id)
}

// required int32 item_id = 2;
bool CrabClick::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CrabClick::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CrabClick::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CrabClick::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
::google::protobuf::int32 CrabClick::item_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.item_id)
  return item_id_;
}
void CrabClick::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabClick.item_id)
}

// required int64 client_ts = 3;
bool CrabClick::has_client_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrabClick::set_has_client_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void CrabClick::clear_has_client_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrabClick::clear_client_ts() {
  client_ts_ = GOOGLE_LONGLONG(0);
  clear_has_client_ts();
}
::google::protobuf::int64 CrabClick::client_ts() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.client_ts)
  return client_ts_;
}
void CrabClick::set_client_ts(::google::protobuf::int64 value) {
  set_has_client_ts();
  client_ts_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabClick.client_ts)
}

// required string final_url = 4;
bool CrabClick::has_final_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrabClick::set_has_final_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CrabClick::clear_has_final_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrabClick::clear_final_url() {
  final_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_final_url();
}
const ::std::string& CrabClick::final_url() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.final_url)
  return final_url_.GetNoArena();
}
void CrabClick::set_final_url(const ::std::string& value) {
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabClick.final_url)
}
#if LANG_CXX11
void CrabClick::set_final_url(::std::string&& value) {
  set_has_final_url();
  final_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabClick.final_url)
}
#endif
void CrabClick::set_final_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabClick.final_url)
}
void CrabClick::set_final_url(const char* value, size_t size) {
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabClick.final_url)
}
::std::string* CrabClick::mutable_final_url() {
  set_has_final_url();
  // @@protoc_insertion_point(field_mutable:metrics.CrabClick.final_url)
  return final_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CrabClick::release_final_url() {
  // @@protoc_insertion_point(field_release:metrics.CrabClick.final_url)
  clear_has_final_url();
  return final_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CrabClick::set_allocated_final_url(::std::string* final_url) {
  if (final_url != NULL) {
    set_has_final_url();
  } else {
    clear_has_final_url();
  }
  final_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_url);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabClick.final_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrabEvents::kShowsFieldNumber;
const int CrabEvents::kClicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrabEvents::CrabEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_etc_5fmetrics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CrabEvents)
}
CrabEvents::CrabEvents(const CrabEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shows_(from.shows_),
      clicks_(from.clicks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metrics.CrabEvents)
}

void CrabEvents::SharedCtor() {
  _cached_size_ = 0;
}

CrabEvents::~CrabEvents() {
  // @@protoc_insertion_point(destructor:metrics.CrabEvents)
  SharedDtor();
}

void CrabEvents::SharedDtor() {
}

void CrabEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrabEvents::descriptor() {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrabEvents& CrabEvents::default_instance() {
  protobuf_etc_5fmetrics_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrabEvents* CrabEvents::New(::google::protobuf::Arena* arena) const {
  CrabEvents* n = new CrabEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrabEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CrabEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shows_.Clear();
  clicks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrabEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CrabEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.CrabShow shows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CrabClick clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CrabEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CrabEvents)
  return false;
#undef DO_
}

void CrabEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CrabEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CrabShow shows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shows(static_cast<int>(i)), output);
  }

  // repeated .metrics.CrabClick clicks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clicks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CrabEvents)
}

::google::protobuf::uint8* CrabEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CrabEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.CrabShow shows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.CrabClick clicks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clicks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->clicks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CrabEvents)
  return target;
}

size_t CrabEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CrabEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .metrics.CrabShow shows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shows(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CrabClick clicks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->clicks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clicks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrabEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CrabEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CrabEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrabEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CrabEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CrabEvents)
    MergeFrom(*source);
  }
}

void CrabEvents::MergeFrom(const CrabEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CrabEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shows_.MergeFrom(from.shows_);
  clicks_.MergeFrom(from.clicks_);
}

void CrabEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CrabEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrabEvents::CopyFrom(const CrabEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CrabEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrabEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->shows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->clicks())) return false;
  return true;
}

void CrabEvents::Swap(CrabEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrabEvents::InternalSwap(CrabEvents* other) {
  using std::swap;
  shows_.InternalSwap(&other->shows_);
  clicks_.InternalSwap(&other->clicks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrabEvents::GetMetadata() const {
  protobuf_etc_5fmetrics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_etc_5fmetrics_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrabEvents

// repeated .metrics.CrabShow shows = 1;
int CrabEvents::shows_size() const {
  return shows_.size();
}
void CrabEvents::clear_shows() {
  shows_.Clear();
}
const ::metrics::CrabShow& CrabEvents::shows(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabEvents.shows)
  return shows_.Get(index);
}
::metrics::CrabShow* CrabEvents::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabEvents.shows)
  return shows_.Mutable(index);
}
::metrics::CrabShow* CrabEvents::add_shows() {
  // @@protoc_insertion_point(field_add:metrics.CrabEvents.shows)
  return shows_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >*
CrabEvents::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabEvents.shows)
  return &shows_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >&
CrabEvents::shows() const {
  // @@protoc_insertion_point(field_list:metrics.CrabEvents.shows)
  return shows_;
}

// repeated .metrics.CrabClick clicks = 2;
int CrabEvents::clicks_size() const {
  return clicks_.size();
}
void CrabEvents::clear_clicks() {
  clicks_.Clear();
}
const ::metrics::CrabClick& CrabEvents::clicks(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabEvents.clicks)
  return clicks_.Get(index);
}
::metrics::CrabClick* CrabEvents::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabEvents.clicks)
  return clicks_.Mutable(index);
}
::metrics::CrabClick* CrabEvents::add_clicks() {
  // @@protoc_insertion_point(field_add:metrics.CrabEvents.clicks)
  return clicks_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >*
CrabEvents::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabEvents.clicks)
  return &clicks_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >&
CrabEvents::clicks() const {
  // @@protoc_insertion_point(field_list:metrics.CrabEvents.clicks)
  return clicks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
