// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etc_metrics.proto

#ifndef PROTOBUF_etc_5fmetrics_2eproto__INCLUDED
#define PROTOBUF_etc_5fmetrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace metrics {
class BrowserInformerProto;
class BrowserInformerProtoDefaultTypeInternal;
extern BrowserInformerProtoDefaultTypeInternal _BrowserInformerProto_default_instance_;
class CAVerificationProto;
class CAVerificationProtoDefaultTypeInternal;
extern CAVerificationProtoDefaultTypeInternal _CAVerificationProto_default_instance_;
class CrabClick;
class CrabClickDefaultTypeInternal;
extern CrabClickDefaultTypeInternal _CrabClick_default_instance_;
class CrabEvents;
class CrabEventsDefaultTypeInternal;
extern CrabEventsDefaultTypeInternal _CrabEvents_default_instance_;
class CrabItem;
class CrabItemDefaultTypeInternal;
extern CrabItemDefaultTypeInternal _CrabItem_default_instance_;
class CrabItemInfo;
class CrabItemInfoDefaultTypeInternal;
extern CrabItemInfoDefaultTypeInternal _CrabItemInfo_default_instance_;
class CrabShow;
class CrabShowDefaultTypeInternal;
extern CrabShowDefaultTypeInternal _CrabShow_default_instance_;
class EtcInfoProto;
class EtcInfoProtoDefaultTypeInternal;
extern EtcInfoProtoDefaultTypeInternal _EtcInfoProto_default_instance_;
class ImportProto;
class ImportProtoDefaultTypeInternal;
extern ImportProtoDefaultTypeInternal _ImportProto_default_instance_;
class KOFRProto;
class KOFRProtoDefaultTypeInternal;
extern KOFRProtoDefaultTypeInternal _KOFRProto_default_instance_;
class PageInfoBubbleProto;
class PageInfoBubbleProtoDefaultTypeInternal;
extern PageInfoBubbleProtoDefaultTypeInternal _PageInfoBubbleProto_default_instance_;
class SecurityPopupProto;
class SecurityPopupProtoDefaultTypeInternal;
extern SecurityPopupProtoDefaultTypeInternal _SecurityPopupProto_default_instance_;
}  // namespace metrics

namespace metrics {

namespace protobuf_etc_5fmetrics_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_etc_5fmetrics_2eproto

enum BrowserInformerProto_EventType {
  BrowserInformerProto_EventType_OPENED = 0,
  BrowserInformerProto_EventType_CLOSED = 1
};
bool BrowserInformerProto_EventType_IsValid(int value);
const BrowserInformerProto_EventType BrowserInformerProto_EventType_EventType_MIN = BrowserInformerProto_EventType_OPENED;
const BrowserInformerProto_EventType BrowserInformerProto_EventType_EventType_MAX = BrowserInformerProto_EventType_CLOSED;
const int BrowserInformerProto_EventType_EventType_ARRAYSIZE = BrowserInformerProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BrowserInformerProto_EventType_descriptor();
inline const ::std::string& BrowserInformerProto_EventType_Name(BrowserInformerProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrowserInformerProto_EventType_descriptor(), value);
}
inline bool BrowserInformerProto_EventType_Parse(
    const ::std::string& name, BrowserInformerProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrowserInformerProto_EventType>(
    BrowserInformerProto_EventType_descriptor(), name, value);
}
enum BrowserInformerProto_Action {
  BrowserInformerProto_Action_ACCEPT = 0,
  BrowserInformerProto_Action_DECLINE = 1,
  BrowserInformerProto_Action_CLOSE = 2,
  BrowserInformerProto_Action_LINK = 3
};
bool BrowserInformerProto_Action_IsValid(int value);
const BrowserInformerProto_Action BrowserInformerProto_Action_Action_MIN = BrowserInformerProto_Action_ACCEPT;
const BrowserInformerProto_Action BrowserInformerProto_Action_Action_MAX = BrowserInformerProto_Action_LINK;
const int BrowserInformerProto_Action_Action_ARRAYSIZE = BrowserInformerProto_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* BrowserInformerProto_Action_descriptor();
inline const ::std::string& BrowserInformerProto_Action_Name(BrowserInformerProto_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrowserInformerProto_Action_descriptor(), value);
}
inline bool BrowserInformerProto_Action_Parse(
    const ::std::string& name, BrowserInformerProto_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrowserInformerProto_Action>(
    BrowserInformerProto_Action_descriptor(), name, value);
}
enum CAVerificationProto_EventType {
  CAVerificationProto_EventType_DETECTED = 0,
  CAVerificationProto_EventType_UPDATE = 1,
  CAVerificationProto_EventType_SHOW_INFOBAR = 2,
  CAVerificationProto_EventType_INFOBAR_ACTION = 3
};
bool CAVerificationProto_EventType_IsValid(int value);
const CAVerificationProto_EventType CAVerificationProto_EventType_EventType_MIN = CAVerificationProto_EventType_DETECTED;
const CAVerificationProto_EventType CAVerificationProto_EventType_EventType_MAX = CAVerificationProto_EventType_INFOBAR_ACTION;
const int CAVerificationProto_EventType_EventType_ARRAYSIZE = CAVerificationProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CAVerificationProto_EventType_descriptor();
inline const ::std::string& CAVerificationProto_EventType_Name(CAVerificationProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CAVerificationProto_EventType_descriptor(), value);
}
inline bool CAVerificationProto_EventType_Parse(
    const ::std::string& name, CAVerificationProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CAVerificationProto_EventType>(
    CAVerificationProto_EventType_descriptor(), name, value);
}
enum CAVerificationProto_Action {
  CAVerificationProto_Action_CERT_INFO = 0,
  CAVerificationProto_Action_TRUST = 1,
  CAVerificationProto_Action_MORE_INFO = 2,
  CAVerificationProto_Action_CLOSE = 3
};
bool CAVerificationProto_Action_IsValid(int value);
const CAVerificationProto_Action CAVerificationProto_Action_Action_MIN = CAVerificationProto_Action_CERT_INFO;
const CAVerificationProto_Action CAVerificationProto_Action_Action_MAX = CAVerificationProto_Action_CLOSE;
const int CAVerificationProto_Action_Action_ARRAYSIZE = CAVerificationProto_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* CAVerificationProto_Action_descriptor();
inline const ::std::string& CAVerificationProto_Action_Name(CAVerificationProto_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    CAVerificationProto_Action_descriptor(), value);
}
inline bool CAVerificationProto_Action_Parse(
    const ::std::string& name, CAVerificationProto_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CAVerificationProto_Action>(
    CAVerificationProto_Action_descriptor(), name, value);
}
enum CAVerificationProto_UpdateStatus {
  CAVerificationProto_UpdateStatus_FAILED = 0,
  CAVerificationProto_UpdateStatus_SUCCESS = 1,
  CAVerificationProto_UpdateStatus_TIMEOUT = 2,
  CAVerificationProto_UpdateStatus_INVALID_DATA = 3,
  CAVerificationProto_UpdateStatus_UNTRUSTED_SERVER = 4
};
bool CAVerificationProto_UpdateStatus_IsValid(int value);
const CAVerificationProto_UpdateStatus CAVerificationProto_UpdateStatus_UpdateStatus_MIN = CAVerificationProto_UpdateStatus_FAILED;
const CAVerificationProto_UpdateStatus CAVerificationProto_UpdateStatus_UpdateStatus_MAX = CAVerificationProto_UpdateStatus_UNTRUSTED_SERVER;
const int CAVerificationProto_UpdateStatus_UpdateStatus_ARRAYSIZE = CAVerificationProto_UpdateStatus_UpdateStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CAVerificationProto_UpdateStatus_descriptor();
inline const ::std::string& CAVerificationProto_UpdateStatus_Name(CAVerificationProto_UpdateStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CAVerificationProto_UpdateStatus_descriptor(), value);
}
inline bool CAVerificationProto_UpdateStatus_Parse(
    const ::std::string& name, CAVerificationProto_UpdateStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CAVerificationProto_UpdateStatus>(
    CAVerificationProto_UpdateStatus_descriptor(), name, value);
}
enum SecurityPopupProto_EventType {
  SecurityPopupProto_EventType_POPUP_OPENED = 0,
  SecurityPopupProto_EventType_CLEAR_HISTORY = 1,
  SecurityPopupProto_EventType_TOGGLE_CHANGED = 2,
  SecurityPopupProto_EventType_SITE_SETTING_CHANGED = 3,
  SecurityPopupProto_EventType_CONFIGURE_ALL = 4,
  SecurityPopupProto_EventType_THIRD_PARTY_COOKIES = 5
};
bool SecurityPopupProto_EventType_IsValid(int value);
const SecurityPopupProto_EventType SecurityPopupProto_EventType_EventType_MIN = SecurityPopupProto_EventType_POPUP_OPENED;
const SecurityPopupProto_EventType SecurityPopupProto_EventType_EventType_MAX = SecurityPopupProto_EventType_THIRD_PARTY_COOKIES;
const int SecurityPopupProto_EventType_EventType_ARRAYSIZE = SecurityPopupProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityPopupProto_EventType_descriptor();
inline const ::std::string& SecurityPopupProto_EventType_Name(SecurityPopupProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityPopupProto_EventType_descriptor(), value);
}
inline bool SecurityPopupProto_EventType_Parse(
    const ::std::string& name, SecurityPopupProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityPopupProto_EventType>(
    SecurityPopupProto_EventType_descriptor(), name, value);
}
enum ImportProto_EventType {
  ImportProto_EventType_STARTED = 0,
  ImportProto_EventType_FINISHED = 1
};
bool ImportProto_EventType_IsValid(int value);
const ImportProto_EventType ImportProto_EventType_EventType_MIN = ImportProto_EventType_STARTED;
const ImportProto_EventType ImportProto_EventType_EventType_MAX = ImportProto_EventType_FINISHED;
const int ImportProto_EventType_EventType_ARRAYSIZE = ImportProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImportProto_EventType_descriptor();
inline const ::std::string& ImportProto_EventType_Name(ImportProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImportProto_EventType_descriptor(), value);
}
inline bool ImportProto_EventType_Parse(
    const ::std::string& name, ImportProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImportProto_EventType>(
    ImportProto_EventType_descriptor(), name, value);
}
enum PageInfoBubbleProto_EventType {
  PageInfoBubbleProto_EventType_OPEN = 0,
  PageInfoBubbleProto_EventType_MORE = 1,
  PageInfoBubbleProto_EventType_BACK = 2,
  PageInfoBubbleProto_EventType_CLOSE = 3,
  PageInfoBubbleProto_EventType_COOKIE_INFO = 4
};
bool PageInfoBubbleProto_EventType_IsValid(int value);
const PageInfoBubbleProto_EventType PageInfoBubbleProto_EventType_EventType_MIN = PageInfoBubbleProto_EventType_OPEN;
const PageInfoBubbleProto_EventType PageInfoBubbleProto_EventType_EventType_MAX = PageInfoBubbleProto_EventType_COOKIE_INFO;
const int PageInfoBubbleProto_EventType_EventType_ARRAYSIZE = PageInfoBubbleProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PageInfoBubbleProto_EventType_descriptor();
inline const ::std::string& PageInfoBubbleProto_EventType_Name(PageInfoBubbleProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PageInfoBubbleProto_EventType_descriptor(), value);
}
inline bool PageInfoBubbleProto_EventType_Parse(
    const ::std::string& name, PageInfoBubbleProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PageInfoBubbleProto_EventType>(
    PageInfoBubbleProto_EventType_descriptor(), name, value);
}
// ===================================================================

class BrowserInformerProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.BrowserInformerProto) */ {
 public:
  BrowserInformerProto();
  virtual ~BrowserInformerProto();

  BrowserInformerProto(const BrowserInformerProto& from);

  inline BrowserInformerProto& operator=(const BrowserInformerProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrowserInformerProto(BrowserInformerProto&& from) noexcept
    : BrowserInformerProto() {
    *this = ::std::move(from);
  }

  inline BrowserInformerProto& operator=(BrowserInformerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrowserInformerProto& default_instance();

  static inline const BrowserInformerProto* internal_default_instance() {
    return reinterpret_cast<const BrowserInformerProto*>(
               &_BrowserInformerProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BrowserInformerProto* other);
  friend void swap(BrowserInformerProto& a, BrowserInformerProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrowserInformerProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BrowserInformerProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrowserInformerProto& from);
  void MergeFrom(const BrowserInformerProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrowserInformerProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BrowserInformerProto_EventType EventType;
  static const EventType OPENED =
    BrowserInformerProto_EventType_OPENED;
  static const EventType CLOSED =
    BrowserInformerProto_EventType_CLOSED;
  static inline bool EventType_IsValid(int value) {
    return BrowserInformerProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    BrowserInformerProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    BrowserInformerProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    BrowserInformerProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return BrowserInformerProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return BrowserInformerProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return BrowserInformerProto_EventType_Parse(name, value);
  }

  typedef BrowserInformerProto_Action Action;
  static const Action ACCEPT =
    BrowserInformerProto_Action_ACCEPT;
  static const Action DECLINE =
    BrowserInformerProto_Action_DECLINE;
  static const Action CLOSE =
    BrowserInformerProto_Action_CLOSE;
  static const Action LINK =
    BrowserInformerProto_Action_LINK;
  static inline bool Action_IsValid(int value) {
    return BrowserInformerProto_Action_IsValid(value);
  }
  static const Action Action_MIN =
    BrowserInformerProto_Action_Action_MIN;
  static const Action Action_MAX =
    BrowserInformerProto_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    BrowserInformerProto_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return BrowserInformerProto_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return BrowserInformerProto_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return BrowserInformerProto_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string informer_id = 1;
  bool has_informer_id() const;
  void clear_informer_id();
  static const int kInformerIdFieldNumber = 1;
  const ::std::string& informer_id() const;
  void set_informer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_informer_id(::std::string&& value);
  #endif
  void set_informer_id(const char* value);
  void set_informer_id(const char* value, size_t size);
  ::std::string* mutable_informer_id();
  ::std::string* release_informer_id();
  void set_allocated_informer_id(::std::string* informer_id);

  // optional .metrics.BrowserInformerProto.EventType event_type = 2;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::metrics::BrowserInformerProto_EventType event_type() const;
  void set_event_type(::metrics::BrowserInformerProto_EventType value);

  // optional .metrics.BrowserInformerProto.Action action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::metrics::BrowserInformerProto_Action action() const;
  void set_action(::metrics::BrowserInformerProto_Action value);

  // optional bool dont_ask = 4;
  bool has_dont_ask() const;
  void clear_dont_ask();
  static const int kDontAskFieldNumber = 4;
  bool dont_ask() const;
  void set_dont_ask(bool value);

  // @@protoc_insertion_point(class_scope:metrics.BrowserInformerProto)
 private:
  void set_has_informer_id();
  void clear_has_informer_id();
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_action();
  void clear_has_action();
  void set_has_dont_ask();
  void clear_has_dont_ask();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr informer_id_;
  int event_type_;
  int action_;
  bool dont_ask_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CAVerificationProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CAVerificationProto) */ {
 public:
  CAVerificationProto();
  virtual ~CAVerificationProto();

  CAVerificationProto(const CAVerificationProto& from);

  inline CAVerificationProto& operator=(const CAVerificationProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAVerificationProto(CAVerificationProto&& from) noexcept
    : CAVerificationProto() {
    *this = ::std::move(from);
  }

  inline CAVerificationProto& operator=(CAVerificationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAVerificationProto& default_instance();

  static inline const CAVerificationProto* internal_default_instance() {
    return reinterpret_cast<const CAVerificationProto*>(
               &_CAVerificationProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CAVerificationProto* other);
  friend void swap(CAVerificationProto& a, CAVerificationProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAVerificationProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CAVerificationProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CAVerificationProto& from);
  void MergeFrom(const CAVerificationProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CAVerificationProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CAVerificationProto_EventType EventType;
  static const EventType DETECTED =
    CAVerificationProto_EventType_DETECTED;
  static const EventType UPDATE =
    CAVerificationProto_EventType_UPDATE;
  static const EventType SHOW_INFOBAR =
    CAVerificationProto_EventType_SHOW_INFOBAR;
  static const EventType INFOBAR_ACTION =
    CAVerificationProto_EventType_INFOBAR_ACTION;
  static inline bool EventType_IsValid(int value) {
    return CAVerificationProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    CAVerificationProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    CAVerificationProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    CAVerificationProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return CAVerificationProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return CAVerificationProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return CAVerificationProto_EventType_Parse(name, value);
  }

  typedef CAVerificationProto_Action Action;
  static const Action CERT_INFO =
    CAVerificationProto_Action_CERT_INFO;
  static const Action TRUST =
    CAVerificationProto_Action_TRUST;
  static const Action MORE_INFO =
    CAVerificationProto_Action_MORE_INFO;
  static const Action CLOSE =
    CAVerificationProto_Action_CLOSE;
  static inline bool Action_IsValid(int value) {
    return CAVerificationProto_Action_IsValid(value);
  }
  static const Action Action_MIN =
    CAVerificationProto_Action_Action_MIN;
  static const Action Action_MAX =
    CAVerificationProto_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    CAVerificationProto_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return CAVerificationProto_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return CAVerificationProto_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return CAVerificationProto_Action_Parse(name, value);
  }

  typedef CAVerificationProto_UpdateStatus UpdateStatus;
  static const UpdateStatus FAILED =
    CAVerificationProto_UpdateStatus_FAILED;
  static const UpdateStatus SUCCESS =
    CAVerificationProto_UpdateStatus_SUCCESS;
  static const UpdateStatus TIMEOUT =
    CAVerificationProto_UpdateStatus_TIMEOUT;
  static const UpdateStatus INVALID_DATA =
    CAVerificationProto_UpdateStatus_INVALID_DATA;
  static const UpdateStatus UNTRUSTED_SERVER =
    CAVerificationProto_UpdateStatus_UNTRUSTED_SERVER;
  static inline bool UpdateStatus_IsValid(int value) {
    return CAVerificationProto_UpdateStatus_IsValid(value);
  }
  static const UpdateStatus UpdateStatus_MIN =
    CAVerificationProto_UpdateStatus_UpdateStatus_MIN;
  static const UpdateStatus UpdateStatus_MAX =
    CAVerificationProto_UpdateStatus_UpdateStatus_MAX;
  static const int UpdateStatus_ARRAYSIZE =
    CAVerificationProto_UpdateStatus_UpdateStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateStatus_descriptor() {
    return CAVerificationProto_UpdateStatus_descriptor();
  }
  static inline const ::std::string& UpdateStatus_Name(UpdateStatus value) {
    return CAVerificationProto_UpdateStatus_Name(value);
  }
  static inline bool UpdateStatus_Parse(const ::std::string& name,
      UpdateStatus* value) {
    return CAVerificationProto_UpdateStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional string subject = 2;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // optional .metrics.CAVerificationProto.EventType event_type = 3;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  ::metrics::CAVerificationProto_EventType event_type() const;
  void set_event_type(::metrics::CAVerificationProto_EventType value);

  // optional .metrics.CAVerificationProto.Action action = 4;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::metrics::CAVerificationProto_Action action() const;
  void set_action(::metrics::CAVerificationProto_Action value);

  // optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
  bool has_update_status() const;
  void clear_update_status();
  static const int kUpdateStatusFieldNumber = 5;
  ::metrics::CAVerificationProto_UpdateStatus update_status() const;
  void set_update_status(::metrics::CAVerificationProto_UpdateStatus value);

  // @@protoc_insertion_point(class_scope:metrics.CAVerificationProto)
 private:
  void set_has_hash();
  void clear_has_hash();
  void set_has_subject();
  void clear_has_subject();
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_action();
  void clear_has_action();
  void set_has_update_status();
  void clear_has_update_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int event_type_;
  int action_;
  int update_status_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecurityPopupProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.SecurityPopupProto) */ {
 public:
  SecurityPopupProto();
  virtual ~SecurityPopupProto();

  SecurityPopupProto(const SecurityPopupProto& from);

  inline SecurityPopupProto& operator=(const SecurityPopupProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityPopupProto(SecurityPopupProto&& from) noexcept
    : SecurityPopupProto() {
    *this = ::std::move(from);
  }

  inline SecurityPopupProto& operator=(SecurityPopupProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityPopupProto& default_instance();

  static inline const SecurityPopupProto* internal_default_instance() {
    return reinterpret_cast<const SecurityPopupProto*>(
               &_SecurityPopupProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SecurityPopupProto* other);
  friend void swap(SecurityPopupProto& a, SecurityPopupProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityPopupProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SecurityPopupProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecurityPopupProto& from);
  void MergeFrom(const SecurityPopupProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecurityPopupProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SecurityPopupProto_EventType EventType;
  static const EventType POPUP_OPENED =
    SecurityPopupProto_EventType_POPUP_OPENED;
  static const EventType CLEAR_HISTORY =
    SecurityPopupProto_EventType_CLEAR_HISTORY;
  static const EventType TOGGLE_CHANGED =
    SecurityPopupProto_EventType_TOGGLE_CHANGED;
  static const EventType SITE_SETTING_CHANGED =
    SecurityPopupProto_EventType_SITE_SETTING_CHANGED;
  static const EventType CONFIGURE_ALL =
    SecurityPopupProto_EventType_CONFIGURE_ALL;
  static const EventType THIRD_PARTY_COOKIES =
    SecurityPopupProto_EventType_THIRD_PARTY_COOKIES;
  static inline bool EventType_IsValid(int value) {
    return SecurityPopupProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    SecurityPopupProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    SecurityPopupProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    SecurityPopupProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return SecurityPopupProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return SecurityPopupProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return SecurityPopupProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string connection_type = 2;
  bool has_connection_type() const;
  void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 2;
  const ::std::string& connection_type() const;
  void set_connection_type(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_type(::std::string&& value);
  #endif
  void set_connection_type(const char* value);
  void set_connection_type(const char* value, size_t size);
  ::std::string* mutable_connection_type();
  ::std::string* release_connection_type();
  void set_allocated_connection_type(::std::string* connection_type);

  // optional string domain = 4;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // optional string period_to_clear = 6;
  bool has_period_to_clear() const;
  void clear_period_to_clear();
  static const int kPeriodToClearFieldNumber = 6;
  const ::std::string& period_to_clear() const;
  void set_period_to_clear(const ::std::string& value);
  #if LANG_CXX11
  void set_period_to_clear(::std::string&& value);
  #endif
  void set_period_to_clear(const char* value);
  void set_period_to_clear(const char* value, size_t size);
  ::std::string* mutable_period_to_clear();
  ::std::string* release_period_to_clear();
  void set_allocated_period_to_clear(::std::string* period_to_clear);

  // optional string control = 7;
  bool has_control() const;
  void clear_control();
  static const int kControlFieldNumber = 7;
  const ::std::string& control() const;
  void set_control(const ::std::string& value);
  #if LANG_CXX11
  void set_control(::std::string&& value);
  #endif
  void set_control(const char* value);
  void set_control(const char* value, size_t size);
  ::std::string* mutable_control();
  ::std::string* release_control();
  void set_allocated_control(::std::string* control);

  // optional string permission_name = 8;
  bool has_permission_name() const;
  void clear_permission_name();
  static const int kPermissionNameFieldNumber = 8;
  const ::std::string& permission_name() const;
  void set_permission_name(const ::std::string& value);
  #if LANG_CXX11
  void set_permission_name(::std::string&& value);
  #endif
  void set_permission_name(const char* value);
  void set_permission_name(const char* value, size_t size);
  ::std::string* mutable_permission_name();
  ::std::string* release_permission_name();
  void set_allocated_permission_name(::std::string* permission_name);

  // optional string permission_status = 9;
  bool has_permission_status() const;
  void clear_permission_status();
  static const int kPermissionStatusFieldNumber = 9;
  const ::std::string& permission_status() const;
  void set_permission_status(const ::std::string& value);
  #if LANG_CXX11
  void set_permission_status(::std::string&& value);
  #endif
  void set_permission_status(const char* value);
  void set_permission_status(const char* value, size_t size);
  ::std::string* mutable_permission_status();
  ::std::string* release_permission_status();
  void set_allocated_permission_status(::std::string* permission_status);

  // optional .metrics.SecurityPopupProto.EventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::metrics::SecurityPopupProto_EventType event_type() const;
  void set_event_type(::metrics::SecurityPopupProto_EventType value);

  // optional bool internet = 3;
  bool has_internet() const;
  void clear_internet();
  static const int kInternetFieldNumber = 3;
  bool internet() const;
  void set_internet(bool value);

  // optional bool toggle_state = 5;
  bool has_toggle_state() const;
  void clear_toggle_state();
  static const int kToggleStateFieldNumber = 5;
  bool toggle_state() const;
  void set_toggle_state(bool value);

  // optional int32 cookies_state = 10;
  bool has_cookies_state() const;
  void clear_cookies_state();
  static const int kCookiesStateFieldNumber = 10;
  ::google::protobuf::int32 cookies_state() const;
  void set_cookies_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.SecurityPopupProto)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_connection_type();
  void clear_has_connection_type();
  void set_has_internet();
  void clear_has_internet();
  void set_has_domain();
  void clear_has_domain();
  void set_has_toggle_state();
  void clear_has_toggle_state();
  void set_has_period_to_clear();
  void clear_has_period_to_clear();
  void set_has_control();
  void clear_has_control();
  void set_has_permission_name();
  void clear_has_permission_name();
  void set_has_permission_status();
  void clear_has_permission_status();
  void set_has_cookies_state();
  void clear_has_cookies_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr connection_type_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr period_to_clear_;
  ::google::protobuf::internal::ArenaStringPtr control_;
  ::google::protobuf::internal::ArenaStringPtr permission_name_;
  ::google::protobuf::internal::ArenaStringPtr permission_status_;
  int event_type_;
  bool internet_;
  bool toggle_state_;
  ::google::protobuf::int32 cookies_state_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KOFRProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.KOFRProto) */ {
 public:
  KOFRProto();
  virtual ~KOFRProto();

  KOFRProto(const KOFRProto& from);

  inline KOFRProto& operator=(const KOFRProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KOFRProto(KOFRProto&& from) noexcept
    : KOFRProto() {
    *this = ::std::move(from);
  }

  inline KOFRProto& operator=(KOFRProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KOFRProto& default_instance();

  static inline const KOFRProto* internal_default_instance() {
    return reinterpret_cast<const KOFRProto*>(
               &_KOFRProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(KOFRProto* other);
  friend void swap(KOFRProto& a, KOFRProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KOFRProto* New() const PROTOBUF_FINAL { return New(NULL); }

  KOFRProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KOFRProto& from);
  void MergeFrom(const KOFRProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KOFRProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_hash = 1;
  bool has_file_hash() const;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 1;
  const ::std::string& file_hash() const;
  void set_file_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_file_hash(::std::string&& value);
  #endif
  void set_file_hash(const char* value);
  void set_file_hash(const char* value, size_t size);
  ::std::string* mutable_file_hash();
  ::std::string* release_file_hash();
  void set_allocated_file_hash(::std::string* file_hash);

  // optional string file_extension = 2;
  bool has_file_extension() const;
  void clear_file_extension();
  static const int kFileExtensionFieldNumber = 2;
  const ::std::string& file_extension() const;
  void set_file_extension(const ::std::string& value);
  #if LANG_CXX11
  void set_file_extension(::std::string&& value);
  #endif
  void set_file_extension(const char* value);
  void set_file_extension(const char* value, size_t size);
  ::std::string* mutable_file_extension();
  ::std::string* release_file_extension();
  void set_allocated_file_extension(::std::string* file_extension);

  // optional int32 kofr_status = 3;
  bool has_kofr_status() const;
  void clear_kofr_status();
  static const int kKofrStatusFieldNumber = 3;
  ::google::protobuf::int32 kofr_status() const;
  void set_kofr_status(::google::protobuf::int32 value);

  // optional int32 safe_browsing_status = 4;
  bool has_safe_browsing_status() const;
  void clear_safe_browsing_status();
  static const int kSafeBrowsingStatusFieldNumber = 4;
  ::google::protobuf::int32 safe_browsing_status() const;
  void set_safe_browsing_status(::google::protobuf::int32 value);

  // optional int32 request_status = 5;
  bool has_request_status() const;
  void clear_request_status();
  static const int kRequestStatusFieldNumber = 5;
  ::google::protobuf::int32 request_status() const;
  void set_request_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.KOFRProto)
 private:
  void set_has_file_hash();
  void clear_has_file_hash();
  void set_has_file_extension();
  void clear_has_file_extension();
  void set_has_kofr_status();
  void clear_has_kofr_status();
  void set_has_safe_browsing_status();
  void clear_has_safe_browsing_status();
  void set_has_request_status();
  void clear_has_request_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_hash_;
  ::google::protobuf::internal::ArenaStringPtr file_extension_;
  ::google::protobuf::int32 kofr_status_;
  ::google::protobuf::int32 safe_browsing_status_;
  ::google::protobuf::int32 request_status_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.ImportProto) */ {
 public:
  ImportProto();
  virtual ~ImportProto();

  ImportProto(const ImportProto& from);

  inline ImportProto& operator=(const ImportProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportProto(ImportProto&& from) noexcept
    : ImportProto() {
    *this = ::std::move(from);
  }

  inline ImportProto& operator=(ImportProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportProto& default_instance();

  static inline const ImportProto* internal_default_instance() {
    return reinterpret_cast<const ImportProto*>(
               &_ImportProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ImportProto* other);
  friend void swap(ImportProto& a, ImportProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ImportProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImportProto& from);
  void MergeFrom(const ImportProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImportProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImportProto_EventType EventType;
  static const EventType STARTED =
    ImportProto_EventType_STARTED;
  static const EventType FINISHED =
    ImportProto_EventType_FINISHED;
  static inline bool EventType_IsValid(int value) {
    return ImportProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    ImportProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    ImportProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    ImportProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return ImportProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return ImportProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return ImportProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string importer_source = 10;
  bool has_importer_source() const;
  void clear_importer_source();
  static const int kImporterSourceFieldNumber = 10;
  const ::std::string& importer_source() const;
  void set_importer_source(const ::std::string& value);
  #if LANG_CXX11
  void set_importer_source(::std::string&& value);
  #endif
  void set_importer_source(const char* value);
  void set_importer_source(const char* value, size_t size);
  ::std::string* mutable_importer_source();
  ::std::string* release_importer_source();
  void set_allocated_importer_source(::std::string* importer_source);

  // optional .metrics.ImportProto.EventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::metrics::ImportProto_EventType event_type() const;
  void set_event_type(::metrics::ImportProto_EventType value);

  // optional int32 import_from = 2;
  bool has_import_from() const;
  void clear_import_from();
  static const int kImportFromFieldNumber = 2;
  ::google::protobuf::int32 import_from() const;
  void set_import_from(::google::protobuf::int32 value);

  // optional int32 imported_history = 3;
  bool has_imported_history() const;
  void clear_imported_history();
  static const int kImportedHistoryFieldNumber = 3;
  ::google::protobuf::int32 imported_history() const;
  void set_imported_history(::google::protobuf::int32 value);

  // optional int32 imported_bookmarks = 4;
  bool has_imported_bookmarks() const;
  void clear_imported_bookmarks();
  static const int kImportedBookmarksFieldNumber = 4;
  ::google::protobuf::int32 imported_bookmarks() const;
  void set_imported_bookmarks(::google::protobuf::int32 value);

  // optional int32 imported_cookies = 5;
  bool has_imported_cookies() const;
  void clear_imported_cookies();
  static const int kImportedCookiesFieldNumber = 5;
  ::google::protobuf::int32 imported_cookies() const;
  void set_imported_cookies(::google::protobuf::int32 value);

  // optional int32 imported_passwords = 6;
  bool has_imported_passwords() const;
  void clear_imported_passwords();
  static const int kImportedPasswordsFieldNumber = 6;
  ::google::protobuf::int32 imported_passwords() const;
  void set_imported_passwords(::google::protobuf::int32 value);

  // optional int32 imported_search_engines = 7;
  bool has_imported_search_engines() const;
  void clear_imported_search_engines();
  static const int kImportedSearchEnginesFieldNumber = 7;
  ::google::protobuf::int32 imported_search_engines() const;
  void set_imported_search_engines(::google::protobuf::int32 value);

  // optional int32 imported_home_page = 8;
  bool has_imported_home_page() const;
  void clear_imported_home_page();
  static const int kImportedHomePageFieldNumber = 8;
  ::google::protobuf::int32 imported_home_page() const;
  void set_imported_home_page(::google::protobuf::int32 value);

  // optional int32 imported_autofill_data = 9;
  bool has_imported_autofill_data() const;
  void clear_imported_autofill_data();
  static const int kImportedAutofillDataFieldNumber = 9;
  ::google::protobuf::int32 imported_autofill_data() const;
  void set_imported_autofill_data(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.ImportProto)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_import_from();
  void clear_has_import_from();
  void set_has_imported_history();
  void clear_has_imported_history();
  void set_has_imported_bookmarks();
  void clear_has_imported_bookmarks();
  void set_has_imported_cookies();
  void clear_has_imported_cookies();
  void set_has_imported_passwords();
  void clear_has_imported_passwords();
  void set_has_imported_search_engines();
  void clear_has_imported_search_engines();
  void set_has_imported_home_page();
  void clear_has_imported_home_page();
  void set_has_imported_autofill_data();
  void clear_has_imported_autofill_data();
  void set_has_importer_source();
  void clear_has_importer_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr importer_source_;
  int event_type_;
  ::google::protobuf::int32 import_from_;
  ::google::protobuf::int32 imported_history_;
  ::google::protobuf::int32 imported_bookmarks_;
  ::google::protobuf::int32 imported_cookies_;
  ::google::protobuf::int32 imported_passwords_;
  ::google::protobuf::int32 imported_search_engines_;
  ::google::protobuf::int32 imported_home_page_;
  ::google::protobuf::int32 imported_autofill_data_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PageInfoBubbleProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.PageInfoBubbleProto) */ {
 public:
  PageInfoBubbleProto();
  virtual ~PageInfoBubbleProto();

  PageInfoBubbleProto(const PageInfoBubbleProto& from);

  inline PageInfoBubbleProto& operator=(const PageInfoBubbleProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PageInfoBubbleProto(PageInfoBubbleProto&& from) noexcept
    : PageInfoBubbleProto() {
    *this = ::std::move(from);
  }

  inline PageInfoBubbleProto& operator=(PageInfoBubbleProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageInfoBubbleProto& default_instance();

  static inline const PageInfoBubbleProto* internal_default_instance() {
    return reinterpret_cast<const PageInfoBubbleProto*>(
               &_PageInfoBubbleProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PageInfoBubbleProto* other);
  friend void swap(PageInfoBubbleProto& a, PageInfoBubbleProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PageInfoBubbleProto* New() const PROTOBUF_FINAL { return New(NULL); }

  PageInfoBubbleProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PageInfoBubbleProto& from);
  void MergeFrom(const PageInfoBubbleProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PageInfoBubbleProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PageInfoBubbleProto_EventType EventType;
  static const EventType OPEN =
    PageInfoBubbleProto_EventType_OPEN;
  static const EventType MORE =
    PageInfoBubbleProto_EventType_MORE;
  static const EventType BACK =
    PageInfoBubbleProto_EventType_BACK;
  static const EventType CLOSE =
    PageInfoBubbleProto_EventType_CLOSE;
  static const EventType COOKIE_INFO =
    PageInfoBubbleProto_EventType_COOKIE_INFO;
  static inline bool EventType_IsValid(int value) {
    return PageInfoBubbleProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    PageInfoBubbleProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    PageInfoBubbleProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    PageInfoBubbleProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return PageInfoBubbleProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return PageInfoBubbleProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return PageInfoBubbleProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string security_level_metric_value = 2;
  bool has_security_level_metric_value() const;
  void clear_security_level_metric_value();
  static const int kSecurityLevelMetricValueFieldNumber = 2;
  const ::std::string& security_level_metric_value() const;
  void set_security_level_metric_value(const ::std::string& value);
  #if LANG_CXX11
  void set_security_level_metric_value(::std::string&& value);
  #endif
  void set_security_level_metric_value(const char* value);
  void set_security_level_metric_value(const char* value, size_t size);
  ::std::string* mutable_security_level_metric_value();
  ::std::string* release_security_level_metric_value();
  void set_allocated_security_level_metric_value(::std::string* security_level_metric_value);

  // optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::metrics::PageInfoBubbleProto_EventType event_type() const;
  void set_event_type(::metrics::PageInfoBubbleProto_EventType value);

  // @@protoc_insertion_point(class_scope:metrics.PageInfoBubbleProto)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_security_level_metric_value();
  void clear_has_security_level_metric_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr security_level_metric_value_;
  int event_type_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EtcInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.EtcInfoProto) */ {
 public:
  EtcInfoProto();
  virtual ~EtcInfoProto();

  EtcInfoProto(const EtcInfoProto& from);

  inline EtcInfoProto& operator=(const EtcInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EtcInfoProto(EtcInfoProto&& from) noexcept
    : EtcInfoProto() {
    *this = ::std::move(from);
  }

  inline EtcInfoProto& operator=(EtcInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EtcInfoProto& default_instance();

  static inline const EtcInfoProto* internal_default_instance() {
    return reinterpret_cast<const EtcInfoProto*>(
               &_EtcInfoProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EtcInfoProto* other);
  friend void swap(EtcInfoProto& a, EtcInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtcInfoProto* New() const PROTOBUF_FINAL { return New(NULL); }

  EtcInfoProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EtcInfoProto& from);
  void MergeFrom(const EtcInfoProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EtcInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metrics.BrowserInformerProto browser_informer_event = 17;
  int browser_informer_event_size() const;
  void clear_browser_informer_event();
  static const int kBrowserInformerEventFieldNumber = 17;
  const ::metrics::BrowserInformerProto& browser_informer_event(int index) const;
  ::metrics::BrowserInformerProto* mutable_browser_informer_event(int index);
  ::metrics::BrowserInformerProto* add_browser_informer_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >*
      mutable_browser_informer_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >&
      browser_informer_event() const;

  // repeated .metrics.CAVerificationProto ca_verification_event = 18;
  int ca_verification_event_size() const;
  void clear_ca_verification_event();
  static const int kCaVerificationEventFieldNumber = 18;
  const ::metrics::CAVerificationProto& ca_verification_event(int index) const;
  ::metrics::CAVerificationProto* mutable_ca_verification_event(int index);
  ::metrics::CAVerificationProto* add_ca_verification_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >*
      mutable_ca_verification_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >&
      ca_verification_event() const;

  // repeated .metrics.SecurityPopupProto security_popup_event = 19;
  int security_popup_event_size() const;
  void clear_security_popup_event();
  static const int kSecurityPopupEventFieldNumber = 19;
  const ::metrics::SecurityPopupProto& security_popup_event(int index) const;
  ::metrics::SecurityPopupProto* mutable_security_popup_event(int index);
  ::metrics::SecurityPopupProto* add_security_popup_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >*
      mutable_security_popup_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >&
      security_popup_event() const;

  // repeated .metrics.KOFRProto kofr_event = 20;
  int kofr_event_size() const;
  void clear_kofr_event();
  static const int kKofrEventFieldNumber = 20;
  const ::metrics::KOFRProto& kofr_event(int index) const;
  ::metrics::KOFRProto* mutable_kofr_event(int index);
  ::metrics::KOFRProto* add_kofr_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >*
      mutable_kofr_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >&
      kofr_event() const;

  // repeated .metrics.ImportProto import_event = 21;
  int import_event_size() const;
  void clear_import_event();
  static const int kImportEventFieldNumber = 21;
  const ::metrics::ImportProto& import_event(int index) const;
  ::metrics::ImportProto* mutable_import_event(int index);
  ::metrics::ImportProto* add_import_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >*
      mutable_import_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >&
      import_event() const;

  // repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
  int page_info_bubble_event_size() const;
  void clear_page_info_bubble_event();
  static const int kPageInfoBubbleEventFieldNumber = 22;
  const ::metrics::PageInfoBubbleProto& page_info_bubble_event(int index) const;
  ::metrics::PageInfoBubbleProto* mutable_page_info_bubble_event(int index);
  ::metrics::PageInfoBubbleProto* add_page_info_bubble_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >*
      mutable_page_info_bubble_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >&
      page_info_bubble_event() const;

  // repeated .metrics.CrabEvents crab_event = 23;
  int crab_event_size() const;
  void clear_crab_event();
  static const int kCrabEventFieldNumber = 23;
  const ::metrics::CrabEvents& crab_event(int index) const;
  ::metrics::CrabEvents* mutable_crab_event(int index);
  ::metrics::CrabEvents* add_crab_event();
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >*
      mutable_crab_event();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >&
      crab_event() const;

  // optional string atom_version = 1;
  bool has_atom_version() const;
  void clear_atom_version();
  static const int kAtomVersionFieldNumber = 1;
  const ::std::string& atom_version() const;
  void set_atom_version(const ::std::string& value);
  #if LANG_CXX11
  void set_atom_version(::std::string&& value);
  #endif
  void set_atom_version(const char* value);
  void set_atom_version(const char* value, size_t size);
  ::std::string* mutable_atom_version();
  ::std::string* release_atom_version();
  void set_allocated_atom_version(::std::string* atom_version);

  // optional string rfr = 6;
  bool has_rfr() const;
  void clear_rfr();
  static const int kRfrFieldNumber = 6;
  const ::std::string& rfr() const;
  void set_rfr(const ::std::string& value);
  #if LANG_CXX11
  void set_rfr(::std::string&& value);
  #endif
  void set_rfr(const char* value);
  void set_rfr(const char* value, size_t size);
  ::std::string* mutable_rfr();
  ::std::string* release_rfr();
  void set_allocated_rfr(::std::string* rfr);

  // optional string default_search_engine = 7;
  bool has_default_search_engine() const;
  void clear_default_search_engine();
  static const int kDefaultSearchEngineFieldNumber = 7;
  const ::std::string& default_search_engine() const;
  void set_default_search_engine(const ::std::string& value);
  #if LANG_CXX11
  void set_default_search_engine(::std::string&& value);
  #endif
  void set_default_search_engine(const char* value);
  void set_default_search_engine(const char* value, size_t size);
  ::std::string* mutable_default_search_engine();
  ::std::string* release_default_search_engine();
  void set_allocated_default_search_engine(::std::string* default_search_engine);

  // optional string home_page = 9;
  bool has_home_page() const;
  void clear_home_page();
  static const int kHomePageFieldNumber = 9;
  const ::std::string& home_page() const;
  void set_home_page(const ::std::string& value);
  #if LANG_CXX11
  void set_home_page(::std::string&& value);
  #endif
  void set_home_page(const char* value);
  void set_home_page(const char* value, size_t size);
  ::std::string* mutable_home_page();
  ::std::string* release_home_page();
  void set_allocated_home_page(::std::string* home_page);

  // optional string ntp = 10;
  bool has_ntp() const;
  void clear_ntp();
  static const int kNtpFieldNumber = 10;
  const ::std::string& ntp() const;
  void set_ntp(const ::std::string& value);
  #if LANG_CXX11
  void set_ntp(::std::string&& value);
  #endif
  void set_ntp(const char* value);
  void set_ntp(const char* value, size_t size);
  ::std::string* mutable_ntp();
  ::std::string* release_ntp();
  void set_allocated_ntp(::std::string* ntp);

  // optional string launch = 12;
  bool has_launch() const;
  void clear_launch();
  static const int kLaunchFieldNumber = 12;
  const ::std::string& launch() const;
  void set_launch(const ::std::string& value);
  #if LANG_CXX11
  void set_launch(::std::string&& value);
  #endif
  void set_launch(const char* value);
  void set_launch(const char* value, size_t size);
  ::std::string* mutable_launch();
  ::std::string* release_launch();
  void set_allocated_launch(::std::string* launch);

  // optional string shortcut_url = 13;
  bool has_shortcut_url() const;
  void clear_shortcut_url();
  static const int kShortcutUrlFieldNumber = 13;
  const ::std::string& shortcut_url() const;
  void set_shortcut_url(const ::std::string& value);
  #if LANG_CXX11
  void set_shortcut_url(::std::string&& value);
  #endif
  void set_shortcut_url(const char* value);
  void set_shortcut_url(const char* value, size_t size);
  ::std::string* mutable_shortcut_url();
  ::std::string* release_shortcut_url();
  void set_allocated_shortcut_url(::std::string* shortcut_url);

  // optional string assoc = 14;
  bool has_assoc() const;
  void clear_assoc();
  static const int kAssocFieldNumber = 14;
  const ::std::string& assoc() const;
  void set_assoc(const ::std::string& value);
  #if LANG_CXX11
  void set_assoc(::std::string&& value);
  #endif
  void set_assoc(const char* value);
  void set_assoc(const char* value, size_t size);
  ::std::string* mutable_assoc();
  ::std::string* release_assoc();
  void set_allocated_assoc(::std::string* assoc);

  // optional bool vk_music_switcher = 2;
  bool has_vk_music_switcher() const;
  void clear_vk_music_switcher();
  static const int kVkMusicSwitcherFieldNumber = 2;
  bool vk_music_switcher() const;
  void set_vk_music_switcher(bool value);

  // optional bool vk_notify_switcher = 3;
  bool has_vk_notify_switcher() const;
  void clear_vk_notify_switcher();
  static const int kVkNotifySwitcherFieldNumber = 3;
  bool vk_notify_switcher() const;
  void set_vk_notify_switcher(bool value);

  // optional bool channel_switcher = 4;
  bool has_channel_switcher() const;
  void clear_channel_switcher();
  static const int kChannelSwitcherFieldNumber = 4;
  bool channel_switcher() const;
  void set_channel_switcher(bool value);

  // optional bool whatsapp_switcher = 5;
  bool has_whatsapp_switcher() const;
  void clear_whatsapp_switcher();
  static const int kWhatsappSwitcherFieldNumber = 5;
  bool whatsapp_switcher() const;
  void set_whatsapp_switcher(bool value);

  // optional bool is_browser_default = 8;
  bool has_is_browser_default() const;
  void clear_is_browser_default();
  static const int kIsBrowserDefaultFieldNumber = 8;
  bool is_browser_default() const;
  void set_is_browser_default(bool value);

  // optional bool autorun = 11;
  bool has_autorun() const;
  void clear_autorun();
  static const int kAutorunFieldNumber = 11;
  bool autorun() const;
  void set_autorun(bool value);

  // optional bool notify_enabled = 15;
  bool has_notify_enabled() const;
  void clear_notify_enabled();
  static const int kNotifyEnabledFieldNumber = 15;
  bool notify_enabled() const;
  void set_notify_enabled(bool value);

  // optional int32 vk_login = 16;
  bool has_vk_login() const;
  void clear_vk_login();
  static const int kVkLoginFieldNumber = 16;
  ::google::protobuf::int32 vk_login() const;
  void set_vk_login(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.EtcInfoProto)
 private:
  void set_has_atom_version();
  void clear_has_atom_version();
  void set_has_vk_music_switcher();
  void clear_has_vk_music_switcher();
  void set_has_vk_notify_switcher();
  void clear_has_vk_notify_switcher();
  void set_has_channel_switcher();
  void clear_has_channel_switcher();
  void set_has_whatsapp_switcher();
  void clear_has_whatsapp_switcher();
  void set_has_rfr();
  void clear_has_rfr();
  void set_has_default_search_engine();
  void clear_has_default_search_engine();
  void set_has_is_browser_default();
  void clear_has_is_browser_default();
  void set_has_home_page();
  void clear_has_home_page();
  void set_has_ntp();
  void clear_has_ntp();
  void set_has_autorun();
  void clear_has_autorun();
  void set_has_launch();
  void clear_has_launch();
  void set_has_shortcut_url();
  void clear_has_shortcut_url();
  void set_has_assoc();
  void clear_has_assoc();
  void set_has_notify_enabled();
  void clear_has_notify_enabled();
  void set_has_vk_login();
  void clear_has_vk_login();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto > browser_informer_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto > ca_verification_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto > security_popup_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto > kofr_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto > import_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto > page_info_bubble_event_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents > crab_event_;
  ::google::protobuf::internal::ArenaStringPtr atom_version_;
  ::google::protobuf::internal::ArenaStringPtr rfr_;
  ::google::protobuf::internal::ArenaStringPtr default_search_engine_;
  ::google::protobuf::internal::ArenaStringPtr home_page_;
  ::google::protobuf::internal::ArenaStringPtr ntp_;
  ::google::protobuf::internal::ArenaStringPtr launch_;
  ::google::protobuf::internal::ArenaStringPtr shortcut_url_;
  ::google::protobuf::internal::ArenaStringPtr assoc_;
  bool vk_music_switcher_;
  bool vk_notify_switcher_;
  bool channel_switcher_;
  bool whatsapp_switcher_;
  bool is_browser_default_;
  bool autorun_;
  bool notify_enabled_;
  ::google::protobuf::int32 vk_login_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrabItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CrabItemInfo) */ {
 public:
  CrabItemInfo();
  virtual ~CrabItemInfo();

  CrabItemInfo(const CrabItemInfo& from);

  inline CrabItemInfo& operator=(const CrabItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrabItemInfo(CrabItemInfo&& from) noexcept
    : CrabItemInfo() {
    *this = ::std::move(from);
  }

  inline CrabItemInfo& operator=(CrabItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrabItemInfo& default_instance();

  static inline const CrabItemInfo* internal_default_instance() {
    return reinterpret_cast<const CrabItemInfo*>(
               &_CrabItemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CrabItemInfo* other);
  friend void swap(CrabItemInfo& a, CrabItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrabItemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CrabItemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrabItemInfo& from);
  void MergeFrom(const CrabItemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrabItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:metrics.CrabItemInfo)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrabItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CrabItem) */ {
 public:
  CrabItem();
  virtual ~CrabItem();

  CrabItem(const CrabItem& from);

  inline CrabItem& operator=(const CrabItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrabItem(CrabItem&& from) noexcept
    : CrabItem() {
    *this = ::std::move(from);
  }

  inline CrabItem& operator=(CrabItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrabItem& default_instance();

  static inline const CrabItem* internal_default_instance() {
    return reinterpret_cast<const CrabItem*>(
               &_CrabItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CrabItem* other);
  friend void swap(CrabItem& a, CrabItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrabItem* New() const PROTOBUF_FINAL { return New(NULL); }

  CrabItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrabItem& from);
  void MergeFrom(const CrabItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrabItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metrics.CrabItemInfo info = 2;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::metrics::CrabItemInfo& info(int index) const;
  ::metrics::CrabItemInfo* mutable_info(int index);
  ::metrics::CrabItemInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >&
      info() const;

  // required int32 item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::int32 item_id() const;
  void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.CrabItem)
 private:
  void set_has_item_id();
  void clear_has_item_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo > info_;
  ::google::protobuf::int32 item_id_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrabShow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CrabShow) */ {
 public:
  CrabShow();
  virtual ~CrabShow();

  CrabShow(const CrabShow& from);

  inline CrabShow& operator=(const CrabShow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrabShow(CrabShow&& from) noexcept
    : CrabShow() {
    *this = ::std::move(from);
  }

  inline CrabShow& operator=(CrabShow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrabShow& default_instance();

  static inline const CrabShow* internal_default_instance() {
    return reinterpret_cast<const CrabShow*>(
               &_CrabShow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CrabShow* other);
  friend void swap(CrabShow& a, CrabShow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrabShow* New() const PROTOBUF_FINAL { return New(NULL); }

  CrabShow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrabShow& from);
  void MergeFrom(const CrabShow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrabShow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metrics.CrabItem items = 4;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 4;
  const ::metrics::CrabItem& items(int index) const;
  ::metrics::CrabItem* mutable_items(int index);
  ::metrics::CrabItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >&
      items() const;

  // required string parser_id = 1;
  bool has_parser_id() const;
  void clear_parser_id();
  static const int kParserIdFieldNumber = 1;
  const ::std::string& parser_id() const;
  void set_parser_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parser_id(::std::string&& value);
  #endif
  void set_parser_id(const char* value);
  void set_parser_id(const char* value, size_t size);
  ::std::string* mutable_parser_id();
  ::std::string* release_parser_id();
  void set_allocated_parser_id(::std::string* parser_id);

  // required string show_id = 2;
  bool has_show_id() const;
  void clear_show_id();
  static const int kShowIdFieldNumber = 2;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // required int64 client_ts = 3;
  bool has_client_ts() const;
  void clear_client_ts();
  static const int kClientTsFieldNumber = 3;
  ::google::protobuf::int64 client_ts() const;
  void set_client_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:metrics.CrabShow)
 private:
  void set_has_parser_id();
  void clear_has_parser_id();
  void set_has_show_id();
  void clear_has_show_id();
  void set_has_client_ts();
  void clear_has_client_ts();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem > items_;
  ::google::protobuf::internal::ArenaStringPtr parser_id_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::int64 client_ts_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrabClick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CrabClick) */ {
 public:
  CrabClick();
  virtual ~CrabClick();

  CrabClick(const CrabClick& from);

  inline CrabClick& operator=(const CrabClick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrabClick(CrabClick&& from) noexcept
    : CrabClick() {
    *this = ::std::move(from);
  }

  inline CrabClick& operator=(CrabClick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrabClick& default_instance();

  static inline const CrabClick* internal_default_instance() {
    return reinterpret_cast<const CrabClick*>(
               &_CrabClick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CrabClick* other);
  friend void swap(CrabClick& a, CrabClick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrabClick* New() const PROTOBUF_FINAL { return New(NULL); }

  CrabClick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrabClick& from);
  void MergeFrom(const CrabClick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrabClick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string show_id = 1;
  bool has_show_id() const;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // required string final_url = 4;
  bool has_final_url() const;
  void clear_final_url();
  static const int kFinalUrlFieldNumber = 4;
  const ::std::string& final_url() const;
  void set_final_url(const ::std::string& value);
  #if LANG_CXX11
  void set_final_url(::std::string&& value);
  #endif
  void set_final_url(const char* value);
  void set_final_url(const char* value, size_t size);
  ::std::string* mutable_final_url();
  ::std::string* release_final_url();
  void set_allocated_final_url(::std::string* final_url);

  // required int64 client_ts = 3;
  bool has_client_ts() const;
  void clear_client_ts();
  static const int kClientTsFieldNumber = 3;
  ::google::protobuf::int64 client_ts() const;
  void set_client_ts(::google::protobuf::int64 value);

  // required int32 item_id = 2;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::int32 item_id() const;
  void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metrics.CrabClick)
 private:
  void set_has_show_id();
  void clear_has_show_id();
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_client_ts();
  void clear_has_client_ts();
  void set_has_final_url();
  void clear_has_final_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr final_url_;
  ::google::protobuf::int64 client_ts_;
  ::google::protobuf::int32 item_id_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrabEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metrics.CrabEvents) */ {
 public:
  CrabEvents();
  virtual ~CrabEvents();

  CrabEvents(const CrabEvents& from);

  inline CrabEvents& operator=(const CrabEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrabEvents(CrabEvents&& from) noexcept
    : CrabEvents() {
    *this = ::std::move(from);
  }

  inline CrabEvents& operator=(CrabEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrabEvents& default_instance();

  static inline const CrabEvents* internal_default_instance() {
    return reinterpret_cast<const CrabEvents*>(
               &_CrabEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CrabEvents* other);
  friend void swap(CrabEvents& a, CrabEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrabEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  CrabEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrabEvents& from);
  void MergeFrom(const CrabEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrabEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metrics.CrabShow shows = 1;
  int shows_size() const;
  void clear_shows();
  static const int kShowsFieldNumber = 1;
  const ::metrics::CrabShow& shows(int index) const;
  ::metrics::CrabShow* mutable_shows(int index);
  ::metrics::CrabShow* add_shows();
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >*
      mutable_shows();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >&
      shows() const;

  // repeated .metrics.CrabClick clicks = 2;
  int clicks_size() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  const ::metrics::CrabClick& clicks(int index) const;
  ::metrics::CrabClick* mutable_clicks(int index);
  ::metrics::CrabClick* add_clicks();
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >*
      mutable_clicks();
  const ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >&
      clicks() const;

  // @@protoc_insertion_point(class_scope:metrics.CrabEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow > shows_;
  ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick > clicks_;
  friend struct protobuf_etc_5fmetrics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrowserInformerProto

// optional string informer_id = 1;
inline bool BrowserInformerProto::has_informer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowserInformerProto::set_has_informer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrowserInformerProto::clear_has_informer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrowserInformerProto::clear_informer_id() {
  informer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_informer_id();
}
inline const ::std::string& BrowserInformerProto::informer_id() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.informer_id)
  return informer_id_.GetNoArena();
}
inline void BrowserInformerProto::set_informer_id(const ::std::string& value) {
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.informer_id)
}
#if LANG_CXX11
inline void BrowserInformerProto::set_informer_id(::std::string&& value) {
  set_has_informer_id();
  informer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.BrowserInformerProto.informer_id)
}
#endif
inline void BrowserInformerProto::set_informer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.BrowserInformerProto.informer_id)
}
inline void BrowserInformerProto::set_informer_id(const char* value, size_t size) {
  set_has_informer_id();
  informer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.BrowserInformerProto.informer_id)
}
inline ::std::string* BrowserInformerProto::mutable_informer_id() {
  set_has_informer_id();
  // @@protoc_insertion_point(field_mutable:metrics.BrowserInformerProto.informer_id)
  return informer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrowserInformerProto::release_informer_id() {
  // @@protoc_insertion_point(field_release:metrics.BrowserInformerProto.informer_id)
  clear_has_informer_id();
  return informer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrowserInformerProto::set_allocated_informer_id(::std::string* informer_id) {
  if (informer_id != NULL) {
    set_has_informer_id();
  } else {
    clear_has_informer_id();
  }
  informer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), informer_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.BrowserInformerProto.informer_id)
}

// optional .metrics.BrowserInformerProto.EventType event_type = 2;
inline bool BrowserInformerProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowserInformerProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrowserInformerProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrowserInformerProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::BrowserInformerProto_EventType BrowserInformerProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.event_type)
  return static_cast< ::metrics::BrowserInformerProto_EventType >(event_type_);
}
inline void BrowserInformerProto::set_event_type(::metrics::BrowserInformerProto_EventType value) {
  assert(::metrics::BrowserInformerProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.event_type)
}

// optional .metrics.BrowserInformerProto.Action action = 3;
inline bool BrowserInformerProto::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrowserInformerProto::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrowserInformerProto::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrowserInformerProto::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::metrics::BrowserInformerProto_Action BrowserInformerProto::action() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.action)
  return static_cast< ::metrics::BrowserInformerProto_Action >(action_);
}
inline void BrowserInformerProto::set_action(::metrics::BrowserInformerProto_Action value) {
  assert(::metrics::BrowserInformerProto_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.action)
}

// optional bool dont_ask = 4;
inline bool BrowserInformerProto::has_dont_ask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrowserInformerProto::set_has_dont_ask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BrowserInformerProto::clear_has_dont_ask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BrowserInformerProto::clear_dont_ask() {
  dont_ask_ = false;
  clear_has_dont_ask();
}
inline bool BrowserInformerProto::dont_ask() const {
  // @@protoc_insertion_point(field_get:metrics.BrowserInformerProto.dont_ask)
  return dont_ask_;
}
inline void BrowserInformerProto::set_dont_ask(bool value) {
  set_has_dont_ask();
  dont_ask_ = value;
  // @@protoc_insertion_point(field_set:metrics.BrowserInformerProto.dont_ask)
}

// -------------------------------------------------------------------

// CAVerificationProto

// optional string hash = 1;
inline bool CAVerificationProto::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAVerificationProto::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAVerificationProto::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAVerificationProto::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& CAVerificationProto::hash() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.hash)
  return hash_.GetNoArena();
}
inline void CAVerificationProto::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.hash)
}
#if LANG_CXX11
inline void CAVerificationProto::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CAVerificationProto.hash)
}
#endif
inline void CAVerificationProto::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CAVerificationProto.hash)
}
inline void CAVerificationProto::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CAVerificationProto.hash)
}
inline ::std::string* CAVerificationProto::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:metrics.CAVerificationProto.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAVerificationProto::release_hash() {
  // @@protoc_insertion_point(field_release:metrics.CAVerificationProto.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAVerificationProto::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:metrics.CAVerificationProto.hash)
}

// optional string subject = 2;
inline bool CAVerificationProto::has_subject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAVerificationProto::set_has_subject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAVerificationProto::clear_has_subject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAVerificationProto::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subject();
}
inline const ::std::string& CAVerificationProto::subject() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.subject)
  return subject_.GetNoArena();
}
inline void CAVerificationProto::set_subject(const ::std::string& value) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.subject)
}
#if LANG_CXX11
inline void CAVerificationProto::set_subject(::std::string&& value) {
  set_has_subject();
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CAVerificationProto.subject)
}
#endif
inline void CAVerificationProto::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CAVerificationProto.subject)
}
inline void CAVerificationProto::set_subject(const char* value, size_t size) {
  set_has_subject();
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CAVerificationProto.subject)
}
inline ::std::string* CAVerificationProto::mutable_subject() {
  set_has_subject();
  // @@protoc_insertion_point(field_mutable:metrics.CAVerificationProto.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAVerificationProto::release_subject() {
  // @@protoc_insertion_point(field_release:metrics.CAVerificationProto.subject)
  clear_has_subject();
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAVerificationProto::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:metrics.CAVerificationProto.subject)
}

// optional .metrics.CAVerificationProto.EventType event_type = 3;
inline bool CAVerificationProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAVerificationProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAVerificationProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAVerificationProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::CAVerificationProto_EventType CAVerificationProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.event_type)
  return static_cast< ::metrics::CAVerificationProto_EventType >(event_type_);
}
inline void CAVerificationProto::set_event_type(::metrics::CAVerificationProto_EventType value) {
  assert(::metrics::CAVerificationProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.event_type)
}

// optional .metrics.CAVerificationProto.Action action = 4;
inline bool CAVerificationProto::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAVerificationProto::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAVerificationProto::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAVerificationProto::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::metrics::CAVerificationProto_Action CAVerificationProto::action() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.action)
  return static_cast< ::metrics::CAVerificationProto_Action >(action_);
}
inline void CAVerificationProto::set_action(::metrics::CAVerificationProto_Action value) {
  assert(::metrics::CAVerificationProto_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.action)
}

// optional .metrics.CAVerificationProto.UpdateStatus update_status = 5;
inline bool CAVerificationProto::has_update_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAVerificationProto::set_has_update_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAVerificationProto::clear_has_update_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAVerificationProto::clear_update_status() {
  update_status_ = 0;
  clear_has_update_status();
}
inline ::metrics::CAVerificationProto_UpdateStatus CAVerificationProto::update_status() const {
  // @@protoc_insertion_point(field_get:metrics.CAVerificationProto.update_status)
  return static_cast< ::metrics::CAVerificationProto_UpdateStatus >(update_status_);
}
inline void CAVerificationProto::set_update_status(::metrics::CAVerificationProto_UpdateStatus value) {
  assert(::metrics::CAVerificationProto_UpdateStatus_IsValid(value));
  set_has_update_status();
  update_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.CAVerificationProto.update_status)
}

// -------------------------------------------------------------------

// SecurityPopupProto

// optional .metrics.SecurityPopupProto.EventType event_type = 1;
inline bool SecurityPopupProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecurityPopupProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecurityPopupProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecurityPopupProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::SecurityPopupProto_EventType SecurityPopupProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.event_type)
  return static_cast< ::metrics::SecurityPopupProto_EventType >(event_type_);
}
inline void SecurityPopupProto::set_event_type(::metrics::SecurityPopupProto_EventType value) {
  assert(::metrics::SecurityPopupProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.event_type)
}

// optional string connection_type = 2;
inline bool SecurityPopupProto::has_connection_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityPopupProto::set_has_connection_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityPopupProto::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityPopupProto::clear_connection_type() {
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_type();
}
inline const ::std::string& SecurityPopupProto::connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.connection_type)
  return connection_type_.GetNoArena();
}
inline void SecurityPopupProto::set_connection_type(const ::std::string& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.connection_type)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_connection_type(::std::string&& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.connection_type)
}
#endif
inline void SecurityPopupProto::set_connection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.connection_type)
}
inline void SecurityPopupProto::set_connection_type(const char* value, size_t size) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.connection_type)
}
inline ::std::string* SecurityPopupProto::mutable_connection_type() {
  set_has_connection_type();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.connection_type)
  return connection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_connection_type() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.connection_type)
  clear_has_connection_type();
  return connection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type != NULL) {
    set_has_connection_type();
  } else {
    clear_has_connection_type();
  }
  connection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_type);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.connection_type)
}

// optional bool internet = 3;
inline bool SecurityPopupProto::has_internet() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SecurityPopupProto::set_has_internet() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SecurityPopupProto::clear_has_internet() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SecurityPopupProto::clear_internet() {
  internet_ = false;
  clear_has_internet();
}
inline bool SecurityPopupProto::internet() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.internet)
  return internet_;
}
inline void SecurityPopupProto::set_internet(bool value) {
  set_has_internet();
  internet_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.internet)
}

// optional string domain = 4;
inline bool SecurityPopupProto::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityPopupProto::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityPopupProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityPopupProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& SecurityPopupProto::domain() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.domain)
  return domain_.GetNoArena();
}
inline void SecurityPopupProto::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.domain)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.domain)
}
#endif
inline void SecurityPopupProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.domain)
}
inline void SecurityPopupProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.domain)
}
inline ::std::string* SecurityPopupProto::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_domain() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.domain)
}

// optional bool toggle_state = 5;
inline bool SecurityPopupProto::has_toggle_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SecurityPopupProto::set_has_toggle_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SecurityPopupProto::clear_has_toggle_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SecurityPopupProto::clear_toggle_state() {
  toggle_state_ = false;
  clear_has_toggle_state();
}
inline bool SecurityPopupProto::toggle_state() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.toggle_state)
  return toggle_state_;
}
inline void SecurityPopupProto::set_toggle_state(bool value) {
  set_has_toggle_state();
  toggle_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.toggle_state)
}

// optional string period_to_clear = 6;
inline bool SecurityPopupProto::has_period_to_clear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityPopupProto::set_has_period_to_clear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityPopupProto::clear_has_period_to_clear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityPopupProto::clear_period_to_clear() {
  period_to_clear_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_period_to_clear();
}
inline const ::std::string& SecurityPopupProto::period_to_clear() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.period_to_clear)
  return period_to_clear_.GetNoArena();
}
inline void SecurityPopupProto::set_period_to_clear(const ::std::string& value) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.period_to_clear)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_period_to_clear(::std::string&& value) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.period_to_clear)
}
#endif
inline void SecurityPopupProto::set_period_to_clear(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.period_to_clear)
}
inline void SecurityPopupProto::set_period_to_clear(const char* value, size_t size) {
  set_has_period_to_clear();
  period_to_clear_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.period_to_clear)
}
inline ::std::string* SecurityPopupProto::mutable_period_to_clear() {
  set_has_period_to_clear();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.period_to_clear)
  return period_to_clear_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_period_to_clear() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.period_to_clear)
  clear_has_period_to_clear();
  return period_to_clear_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_period_to_clear(::std::string* period_to_clear) {
  if (period_to_clear != NULL) {
    set_has_period_to_clear();
  } else {
    clear_has_period_to_clear();
  }
  period_to_clear_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), period_to_clear);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.period_to_clear)
}

// optional string control = 7;
inline bool SecurityPopupProto::has_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityPopupProto::set_has_control() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityPopupProto::clear_has_control() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityPopupProto::clear_control() {
  control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_control();
}
inline const ::std::string& SecurityPopupProto::control() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.control)
  return control_.GetNoArena();
}
inline void SecurityPopupProto::set_control(const ::std::string& value) {
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.control)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_control(::std::string&& value) {
  set_has_control();
  control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.control)
}
#endif
inline void SecurityPopupProto::set_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.control)
}
inline void SecurityPopupProto::set_control(const char* value, size_t size) {
  set_has_control();
  control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.control)
}
inline ::std::string* SecurityPopupProto::mutable_control() {
  set_has_control();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.control)
  return control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_control() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.control)
  clear_has_control();
  return control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_control(::std::string* control) {
  if (control != NULL) {
    set_has_control();
  } else {
    clear_has_control();
  }
  control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), control);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.control)
}

// optional string permission_name = 8;
inline bool SecurityPopupProto::has_permission_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecurityPopupProto::set_has_permission_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecurityPopupProto::clear_has_permission_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecurityPopupProto::clear_permission_name() {
  permission_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permission_name();
}
inline const ::std::string& SecurityPopupProto::permission_name() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.permission_name)
  return permission_name_.GetNoArena();
}
inline void SecurityPopupProto::set_permission_name(const ::std::string& value) {
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.permission_name)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_permission_name(::std::string&& value) {
  set_has_permission_name();
  permission_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.permission_name)
}
#endif
inline void SecurityPopupProto::set_permission_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.permission_name)
}
inline void SecurityPopupProto::set_permission_name(const char* value, size_t size) {
  set_has_permission_name();
  permission_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.permission_name)
}
inline ::std::string* SecurityPopupProto::mutable_permission_name() {
  set_has_permission_name();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.permission_name)
  return permission_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_permission_name() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.permission_name)
  clear_has_permission_name();
  return permission_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_permission_name(::std::string* permission_name) {
  if (permission_name != NULL) {
    set_has_permission_name();
  } else {
    clear_has_permission_name();
  }
  permission_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.permission_name)
}

// optional string permission_status = 9;
inline bool SecurityPopupProto::has_permission_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecurityPopupProto::set_has_permission_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecurityPopupProto::clear_has_permission_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecurityPopupProto::clear_permission_status() {
  permission_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_permission_status();
}
inline const ::std::string& SecurityPopupProto::permission_status() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.permission_status)
  return permission_status_.GetNoArena();
}
inline void SecurityPopupProto::set_permission_status(const ::std::string& value) {
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.permission_status)
}
#if LANG_CXX11
inline void SecurityPopupProto::set_permission_status(::std::string&& value) {
  set_has_permission_status();
  permission_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.SecurityPopupProto.permission_status)
}
#endif
inline void SecurityPopupProto::set_permission_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.SecurityPopupProto.permission_status)
}
inline void SecurityPopupProto::set_permission_status(const char* value, size_t size) {
  set_has_permission_status();
  permission_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.SecurityPopupProto.permission_status)
}
inline ::std::string* SecurityPopupProto::mutable_permission_status() {
  set_has_permission_status();
  // @@protoc_insertion_point(field_mutable:metrics.SecurityPopupProto.permission_status)
  return permission_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityPopupProto::release_permission_status() {
  // @@protoc_insertion_point(field_release:metrics.SecurityPopupProto.permission_status)
  clear_has_permission_status();
  return permission_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityPopupProto::set_allocated_permission_status(::std::string* permission_status) {
  if (permission_status != NULL) {
    set_has_permission_status();
  } else {
    clear_has_permission_status();
  }
  permission_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission_status);
  // @@protoc_insertion_point(field_set_allocated:metrics.SecurityPopupProto.permission_status)
}

// optional int32 cookies_state = 10;
inline bool SecurityPopupProto::has_cookies_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SecurityPopupProto::set_has_cookies_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SecurityPopupProto::clear_has_cookies_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SecurityPopupProto::clear_cookies_state() {
  cookies_state_ = 0;
  clear_has_cookies_state();
}
inline ::google::protobuf::int32 SecurityPopupProto::cookies_state() const {
  // @@protoc_insertion_point(field_get:metrics.SecurityPopupProto.cookies_state)
  return cookies_state_;
}
inline void SecurityPopupProto::set_cookies_state(::google::protobuf::int32 value) {
  set_has_cookies_state();
  cookies_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.SecurityPopupProto.cookies_state)
}

// -------------------------------------------------------------------

// KOFRProto

// optional string file_hash = 1;
inline bool KOFRProto::has_file_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KOFRProto::set_has_file_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KOFRProto::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KOFRProto::clear_file_hash() {
  file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_hash();
}
inline const ::std::string& KOFRProto::file_hash() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.file_hash)
  return file_hash_.GetNoArena();
}
inline void KOFRProto::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.file_hash)
}
#if LANG_CXX11
inline void KOFRProto::set_file_hash(::std::string&& value) {
  set_has_file_hash();
  file_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.KOFRProto.file_hash)
}
#endif
inline void KOFRProto::set_file_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.KOFRProto.file_hash)
}
inline void KOFRProto::set_file_hash(const char* value, size_t size) {
  set_has_file_hash();
  file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.KOFRProto.file_hash)
}
inline ::std::string* KOFRProto::mutable_file_hash() {
  set_has_file_hash();
  // @@protoc_insertion_point(field_mutable:metrics.KOFRProto.file_hash)
  return file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KOFRProto::release_file_hash() {
  // @@protoc_insertion_point(field_release:metrics.KOFRProto.file_hash)
  clear_has_file_hash();
  return file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KOFRProto::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash != NULL) {
    set_has_file_hash();
  } else {
    clear_has_file_hash();
  }
  file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_hash);
  // @@protoc_insertion_point(field_set_allocated:metrics.KOFRProto.file_hash)
}

// optional string file_extension = 2;
inline bool KOFRProto::has_file_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KOFRProto::set_has_file_extension() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KOFRProto::clear_has_file_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KOFRProto::clear_file_extension() {
  file_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_extension();
}
inline const ::std::string& KOFRProto::file_extension() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.file_extension)
  return file_extension_.GetNoArena();
}
inline void KOFRProto::set_file_extension(const ::std::string& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.file_extension)
}
#if LANG_CXX11
inline void KOFRProto::set_file_extension(::std::string&& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.KOFRProto.file_extension)
}
#endif
inline void KOFRProto::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.KOFRProto.file_extension)
}
inline void KOFRProto::set_file_extension(const char* value, size_t size) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.KOFRProto.file_extension)
}
inline ::std::string* KOFRProto::mutable_file_extension() {
  set_has_file_extension();
  // @@protoc_insertion_point(field_mutable:metrics.KOFRProto.file_extension)
  return file_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KOFRProto::release_file_extension() {
  // @@protoc_insertion_point(field_release:metrics.KOFRProto.file_extension)
  clear_has_file_extension();
  return file_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KOFRProto::set_allocated_file_extension(::std::string* file_extension) {
  if (file_extension != NULL) {
    set_has_file_extension();
  } else {
    clear_has_file_extension();
  }
  file_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_extension);
  // @@protoc_insertion_point(field_set_allocated:metrics.KOFRProto.file_extension)
}

// optional int32 kofr_status = 3;
inline bool KOFRProto::has_kofr_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KOFRProto::set_has_kofr_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KOFRProto::clear_has_kofr_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KOFRProto::clear_kofr_status() {
  kofr_status_ = 0;
  clear_has_kofr_status();
}
inline ::google::protobuf::int32 KOFRProto::kofr_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.kofr_status)
  return kofr_status_;
}
inline void KOFRProto::set_kofr_status(::google::protobuf::int32 value) {
  set_has_kofr_status();
  kofr_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.kofr_status)
}

// optional int32 safe_browsing_status = 4;
inline bool KOFRProto::has_safe_browsing_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KOFRProto::set_has_safe_browsing_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KOFRProto::clear_has_safe_browsing_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KOFRProto::clear_safe_browsing_status() {
  safe_browsing_status_ = 0;
  clear_has_safe_browsing_status();
}
inline ::google::protobuf::int32 KOFRProto::safe_browsing_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.safe_browsing_status)
  return safe_browsing_status_;
}
inline void KOFRProto::set_safe_browsing_status(::google::protobuf::int32 value) {
  set_has_safe_browsing_status();
  safe_browsing_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.safe_browsing_status)
}

// optional int32 request_status = 5;
inline bool KOFRProto::has_request_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KOFRProto::set_has_request_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KOFRProto::clear_has_request_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KOFRProto::clear_request_status() {
  request_status_ = 0;
  clear_has_request_status();
}
inline ::google::protobuf::int32 KOFRProto::request_status() const {
  // @@protoc_insertion_point(field_get:metrics.KOFRProto.request_status)
  return request_status_;
}
inline void KOFRProto::set_request_status(::google::protobuf::int32 value) {
  set_has_request_status();
  request_status_ = value;
  // @@protoc_insertion_point(field_set:metrics.KOFRProto.request_status)
}

// -------------------------------------------------------------------

// ImportProto

// optional .metrics.ImportProto.EventType event_type = 1;
inline bool ImportProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::ImportProto_EventType ImportProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.event_type)
  return static_cast< ::metrics::ImportProto_EventType >(event_type_);
}
inline void ImportProto::set_event_type(::metrics::ImportProto_EventType value) {
  assert(::metrics::ImportProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.event_type)
}

// optional int32 import_from = 2;
inline bool ImportProto::has_import_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportProto::set_has_import_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportProto::clear_has_import_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportProto::clear_import_from() {
  import_from_ = 0;
  clear_has_import_from();
}
inline ::google::protobuf::int32 ImportProto::import_from() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.import_from)
  return import_from_;
}
inline void ImportProto::set_import_from(::google::protobuf::int32 value) {
  set_has_import_from();
  import_from_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.import_from)
}

// optional int32 imported_history = 3;
inline bool ImportProto::has_imported_history() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImportProto::set_has_imported_history() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImportProto::clear_has_imported_history() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImportProto::clear_imported_history() {
  imported_history_ = 0;
  clear_has_imported_history();
}
inline ::google::protobuf::int32 ImportProto::imported_history() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_history)
  return imported_history_;
}
inline void ImportProto::set_imported_history(::google::protobuf::int32 value) {
  set_has_imported_history();
  imported_history_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_history)
}

// optional int32 imported_bookmarks = 4;
inline bool ImportProto::has_imported_bookmarks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImportProto::set_has_imported_bookmarks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImportProto::clear_has_imported_bookmarks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImportProto::clear_imported_bookmarks() {
  imported_bookmarks_ = 0;
  clear_has_imported_bookmarks();
}
inline ::google::protobuf::int32 ImportProto::imported_bookmarks() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_bookmarks)
  return imported_bookmarks_;
}
inline void ImportProto::set_imported_bookmarks(::google::protobuf::int32 value) {
  set_has_imported_bookmarks();
  imported_bookmarks_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_bookmarks)
}

// optional int32 imported_cookies = 5;
inline bool ImportProto::has_imported_cookies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImportProto::set_has_imported_cookies() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImportProto::clear_has_imported_cookies() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImportProto::clear_imported_cookies() {
  imported_cookies_ = 0;
  clear_has_imported_cookies();
}
inline ::google::protobuf::int32 ImportProto::imported_cookies() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_cookies)
  return imported_cookies_;
}
inline void ImportProto::set_imported_cookies(::google::protobuf::int32 value) {
  set_has_imported_cookies();
  imported_cookies_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_cookies)
}

// optional int32 imported_passwords = 6;
inline bool ImportProto::has_imported_passwords() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImportProto::set_has_imported_passwords() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImportProto::clear_has_imported_passwords() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImportProto::clear_imported_passwords() {
  imported_passwords_ = 0;
  clear_has_imported_passwords();
}
inline ::google::protobuf::int32 ImportProto::imported_passwords() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_passwords)
  return imported_passwords_;
}
inline void ImportProto::set_imported_passwords(::google::protobuf::int32 value) {
  set_has_imported_passwords();
  imported_passwords_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_passwords)
}

// optional int32 imported_search_engines = 7;
inline bool ImportProto::has_imported_search_engines() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImportProto::set_has_imported_search_engines() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImportProto::clear_has_imported_search_engines() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImportProto::clear_imported_search_engines() {
  imported_search_engines_ = 0;
  clear_has_imported_search_engines();
}
inline ::google::protobuf::int32 ImportProto::imported_search_engines() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_search_engines)
  return imported_search_engines_;
}
inline void ImportProto::set_imported_search_engines(::google::protobuf::int32 value) {
  set_has_imported_search_engines();
  imported_search_engines_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_search_engines)
}

// optional int32 imported_home_page = 8;
inline bool ImportProto::has_imported_home_page() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImportProto::set_has_imported_home_page() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImportProto::clear_has_imported_home_page() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImportProto::clear_imported_home_page() {
  imported_home_page_ = 0;
  clear_has_imported_home_page();
}
inline ::google::protobuf::int32 ImportProto::imported_home_page() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_home_page)
  return imported_home_page_;
}
inline void ImportProto::set_imported_home_page(::google::protobuf::int32 value) {
  set_has_imported_home_page();
  imported_home_page_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_home_page)
}

// optional int32 imported_autofill_data = 9;
inline bool ImportProto::has_imported_autofill_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImportProto::set_has_imported_autofill_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImportProto::clear_has_imported_autofill_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImportProto::clear_imported_autofill_data() {
  imported_autofill_data_ = 0;
  clear_has_imported_autofill_data();
}
inline ::google::protobuf::int32 ImportProto::imported_autofill_data() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.imported_autofill_data)
  return imported_autofill_data_;
}
inline void ImportProto::set_imported_autofill_data(::google::protobuf::int32 value) {
  set_has_imported_autofill_data();
  imported_autofill_data_ = value;
  // @@protoc_insertion_point(field_set:metrics.ImportProto.imported_autofill_data)
}

// optional string importer_source = 10;
inline bool ImportProto::has_importer_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportProto::set_has_importer_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportProto::clear_has_importer_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportProto::clear_importer_source() {
  importer_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_importer_source();
}
inline const ::std::string& ImportProto::importer_source() const {
  // @@protoc_insertion_point(field_get:metrics.ImportProto.importer_source)
  return importer_source_.GetNoArena();
}
inline void ImportProto::set_importer_source(const ::std::string& value) {
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.ImportProto.importer_source)
}
#if LANG_CXX11
inline void ImportProto::set_importer_source(::std::string&& value) {
  set_has_importer_source();
  importer_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.ImportProto.importer_source)
}
#endif
inline void ImportProto::set_importer_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.ImportProto.importer_source)
}
inline void ImportProto::set_importer_source(const char* value, size_t size) {
  set_has_importer_source();
  importer_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.ImportProto.importer_source)
}
inline ::std::string* ImportProto::mutable_importer_source() {
  set_has_importer_source();
  // @@protoc_insertion_point(field_mutable:metrics.ImportProto.importer_source)
  return importer_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportProto::release_importer_source() {
  // @@protoc_insertion_point(field_release:metrics.ImportProto.importer_source)
  clear_has_importer_source();
  return importer_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportProto::set_allocated_importer_source(::std::string* importer_source) {
  if (importer_source != NULL) {
    set_has_importer_source();
  } else {
    clear_has_importer_source();
  }
  importer_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), importer_source);
  // @@protoc_insertion_point(field_set_allocated:metrics.ImportProto.importer_source)
}

// -------------------------------------------------------------------

// PageInfoBubbleProto

// optional .metrics.PageInfoBubbleProto.EventType event_type = 1;
inline bool PageInfoBubbleProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageInfoBubbleProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageInfoBubbleProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageInfoBubbleProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::PageInfoBubbleProto_EventType PageInfoBubbleProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.PageInfoBubbleProto.event_type)
  return static_cast< ::metrics::PageInfoBubbleProto_EventType >(event_type_);
}
inline void PageInfoBubbleProto::set_event_type(::metrics::PageInfoBubbleProto_EventType value) {
  assert(::metrics::PageInfoBubbleProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PageInfoBubbleProto.event_type)
}

// optional string security_level_metric_value = 2;
inline bool PageInfoBubbleProto::has_security_level_metric_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageInfoBubbleProto::set_has_security_level_metric_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageInfoBubbleProto::clear_has_security_level_metric_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageInfoBubbleProto::clear_security_level_metric_value() {
  security_level_metric_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_security_level_metric_value();
}
inline const ::std::string& PageInfoBubbleProto::security_level_metric_value() const {
  // @@protoc_insertion_point(field_get:metrics.PageInfoBubbleProto.security_level_metric_value)
  return security_level_metric_value_.GetNoArena();
}
inline void PageInfoBubbleProto::set_security_level_metric_value(const ::std::string& value) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PageInfoBubbleProto.security_level_metric_value)
}
#if LANG_CXX11
inline void PageInfoBubbleProto::set_security_level_metric_value(::std::string&& value) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PageInfoBubbleProto.security_level_metric_value)
}
#endif
inline void PageInfoBubbleProto::set_security_level_metric_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PageInfoBubbleProto.security_level_metric_value)
}
inline void PageInfoBubbleProto::set_security_level_metric_value(const char* value, size_t size) {
  set_has_security_level_metric_value();
  security_level_metric_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PageInfoBubbleProto.security_level_metric_value)
}
inline ::std::string* PageInfoBubbleProto::mutable_security_level_metric_value() {
  set_has_security_level_metric_value();
  // @@protoc_insertion_point(field_mutable:metrics.PageInfoBubbleProto.security_level_metric_value)
  return security_level_metric_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageInfoBubbleProto::release_security_level_metric_value() {
  // @@protoc_insertion_point(field_release:metrics.PageInfoBubbleProto.security_level_metric_value)
  clear_has_security_level_metric_value();
  return security_level_metric_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageInfoBubbleProto::set_allocated_security_level_metric_value(::std::string* security_level_metric_value) {
  if (security_level_metric_value != NULL) {
    set_has_security_level_metric_value();
  } else {
    clear_has_security_level_metric_value();
  }
  security_level_metric_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_level_metric_value);
  // @@protoc_insertion_point(field_set_allocated:metrics.PageInfoBubbleProto.security_level_metric_value)
}

// -------------------------------------------------------------------

// EtcInfoProto

// optional string atom_version = 1;
inline bool EtcInfoProto::has_atom_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EtcInfoProto::set_has_atom_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EtcInfoProto::clear_has_atom_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EtcInfoProto::clear_atom_version() {
  atom_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_atom_version();
}
inline const ::std::string& EtcInfoProto::atom_version() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.atom_version)
  return atom_version_.GetNoArena();
}
inline void EtcInfoProto::set_atom_version(const ::std::string& value) {
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.atom_version)
}
#if LANG_CXX11
inline void EtcInfoProto::set_atom_version(::std::string&& value) {
  set_has_atom_version();
  atom_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.atom_version)
}
#endif
inline void EtcInfoProto::set_atom_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.atom_version)
}
inline void EtcInfoProto::set_atom_version(const char* value, size_t size) {
  set_has_atom_version();
  atom_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.atom_version)
}
inline ::std::string* EtcInfoProto::mutable_atom_version() {
  set_has_atom_version();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.atom_version)
  return atom_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_atom_version() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.atom_version)
  clear_has_atom_version();
  return atom_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_atom_version(::std::string* atom_version) {
  if (atom_version != NULL) {
    set_has_atom_version();
  } else {
    clear_has_atom_version();
  }
  atom_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), atom_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.atom_version)
}

// optional bool vk_music_switcher = 2;
inline bool EtcInfoProto::has_vk_music_switcher() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EtcInfoProto::set_has_vk_music_switcher() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EtcInfoProto::clear_has_vk_music_switcher() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EtcInfoProto::clear_vk_music_switcher() {
  vk_music_switcher_ = false;
  clear_has_vk_music_switcher();
}
inline bool EtcInfoProto::vk_music_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_music_switcher)
  return vk_music_switcher_;
}
inline void EtcInfoProto::set_vk_music_switcher(bool value) {
  set_has_vk_music_switcher();
  vk_music_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_music_switcher)
}

// optional bool vk_notify_switcher = 3;
inline bool EtcInfoProto::has_vk_notify_switcher() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EtcInfoProto::set_has_vk_notify_switcher() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EtcInfoProto::clear_has_vk_notify_switcher() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EtcInfoProto::clear_vk_notify_switcher() {
  vk_notify_switcher_ = false;
  clear_has_vk_notify_switcher();
}
inline bool EtcInfoProto::vk_notify_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_notify_switcher)
  return vk_notify_switcher_;
}
inline void EtcInfoProto::set_vk_notify_switcher(bool value) {
  set_has_vk_notify_switcher();
  vk_notify_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_notify_switcher)
}

// optional bool channel_switcher = 4;
inline bool EtcInfoProto::has_channel_switcher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EtcInfoProto::set_has_channel_switcher() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EtcInfoProto::clear_has_channel_switcher() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EtcInfoProto::clear_channel_switcher() {
  channel_switcher_ = false;
  clear_has_channel_switcher();
}
inline bool EtcInfoProto::channel_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.channel_switcher)
  return channel_switcher_;
}
inline void EtcInfoProto::set_channel_switcher(bool value) {
  set_has_channel_switcher();
  channel_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.channel_switcher)
}

// optional bool whatsapp_switcher = 5;
inline bool EtcInfoProto::has_whatsapp_switcher() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EtcInfoProto::set_has_whatsapp_switcher() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EtcInfoProto::clear_has_whatsapp_switcher() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EtcInfoProto::clear_whatsapp_switcher() {
  whatsapp_switcher_ = false;
  clear_has_whatsapp_switcher();
}
inline bool EtcInfoProto::whatsapp_switcher() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.whatsapp_switcher)
  return whatsapp_switcher_;
}
inline void EtcInfoProto::set_whatsapp_switcher(bool value) {
  set_has_whatsapp_switcher();
  whatsapp_switcher_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.whatsapp_switcher)
}

// optional string rfr = 6;
inline bool EtcInfoProto::has_rfr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EtcInfoProto::set_has_rfr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EtcInfoProto::clear_has_rfr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EtcInfoProto::clear_rfr() {
  rfr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rfr();
}
inline const ::std::string& EtcInfoProto::rfr() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.rfr)
  return rfr_.GetNoArena();
}
inline void EtcInfoProto::set_rfr(const ::std::string& value) {
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.rfr)
}
#if LANG_CXX11
inline void EtcInfoProto::set_rfr(::std::string&& value) {
  set_has_rfr();
  rfr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.rfr)
}
#endif
inline void EtcInfoProto::set_rfr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.rfr)
}
inline void EtcInfoProto::set_rfr(const char* value, size_t size) {
  set_has_rfr();
  rfr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.rfr)
}
inline ::std::string* EtcInfoProto::mutable_rfr() {
  set_has_rfr();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.rfr)
  return rfr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_rfr() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.rfr)
  clear_has_rfr();
  return rfr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_rfr(::std::string* rfr) {
  if (rfr != NULL) {
    set_has_rfr();
  } else {
    clear_has_rfr();
  }
  rfr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rfr);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.rfr)
}

// optional string default_search_engine = 7;
inline bool EtcInfoProto::has_default_search_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EtcInfoProto::set_has_default_search_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EtcInfoProto::clear_has_default_search_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EtcInfoProto::clear_default_search_engine() {
  default_search_engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_search_engine();
}
inline const ::std::string& EtcInfoProto::default_search_engine() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.default_search_engine)
  return default_search_engine_.GetNoArena();
}
inline void EtcInfoProto::set_default_search_engine(const ::std::string& value) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.default_search_engine)
}
#if LANG_CXX11
inline void EtcInfoProto::set_default_search_engine(::std::string&& value) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.default_search_engine)
}
#endif
inline void EtcInfoProto::set_default_search_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.default_search_engine)
}
inline void EtcInfoProto::set_default_search_engine(const char* value, size_t size) {
  set_has_default_search_engine();
  default_search_engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.default_search_engine)
}
inline ::std::string* EtcInfoProto::mutable_default_search_engine() {
  set_has_default_search_engine();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.default_search_engine)
  return default_search_engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_default_search_engine() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.default_search_engine)
  clear_has_default_search_engine();
  return default_search_engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_default_search_engine(::std::string* default_search_engine) {
  if (default_search_engine != NULL) {
    set_has_default_search_engine();
  } else {
    clear_has_default_search_engine();
  }
  default_search_engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_search_engine);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.default_search_engine)
}

// optional bool is_browser_default = 8;
inline bool EtcInfoProto::has_is_browser_default() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EtcInfoProto::set_has_is_browser_default() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EtcInfoProto::clear_has_is_browser_default() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EtcInfoProto::clear_is_browser_default() {
  is_browser_default_ = false;
  clear_has_is_browser_default();
}
inline bool EtcInfoProto::is_browser_default() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.is_browser_default)
  return is_browser_default_;
}
inline void EtcInfoProto::set_is_browser_default(bool value) {
  set_has_is_browser_default();
  is_browser_default_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.is_browser_default)
}

// optional string home_page = 9;
inline bool EtcInfoProto::has_home_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EtcInfoProto::set_has_home_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EtcInfoProto::clear_has_home_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EtcInfoProto::clear_home_page() {
  home_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_home_page();
}
inline const ::std::string& EtcInfoProto::home_page() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.home_page)
  return home_page_.GetNoArena();
}
inline void EtcInfoProto::set_home_page(const ::std::string& value) {
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.home_page)
}
#if LANG_CXX11
inline void EtcInfoProto::set_home_page(::std::string&& value) {
  set_has_home_page();
  home_page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.home_page)
}
#endif
inline void EtcInfoProto::set_home_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.home_page)
}
inline void EtcInfoProto::set_home_page(const char* value, size_t size) {
  set_has_home_page();
  home_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.home_page)
}
inline ::std::string* EtcInfoProto::mutable_home_page() {
  set_has_home_page();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.home_page)
  return home_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_home_page() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.home_page)
  clear_has_home_page();
  return home_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_home_page(::std::string* home_page) {
  if (home_page != NULL) {
    set_has_home_page();
  } else {
    clear_has_home_page();
  }
  home_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home_page);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.home_page)
}

// optional string ntp = 10;
inline bool EtcInfoProto::has_ntp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EtcInfoProto::set_has_ntp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EtcInfoProto::clear_has_ntp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EtcInfoProto::clear_ntp() {
  ntp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ntp();
}
inline const ::std::string& EtcInfoProto::ntp() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.ntp)
  return ntp_.GetNoArena();
}
inline void EtcInfoProto::set_ntp(const ::std::string& value) {
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.ntp)
}
#if LANG_CXX11
inline void EtcInfoProto::set_ntp(::std::string&& value) {
  set_has_ntp();
  ntp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.ntp)
}
#endif
inline void EtcInfoProto::set_ntp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.ntp)
}
inline void EtcInfoProto::set_ntp(const char* value, size_t size) {
  set_has_ntp();
  ntp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.ntp)
}
inline ::std::string* EtcInfoProto::mutable_ntp() {
  set_has_ntp();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.ntp)
  return ntp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_ntp() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.ntp)
  clear_has_ntp();
  return ntp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_ntp(::std::string* ntp) {
  if (ntp != NULL) {
    set_has_ntp();
  } else {
    clear_has_ntp();
  }
  ntp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.ntp)
}

// optional bool autorun = 11;
inline bool EtcInfoProto::has_autorun() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EtcInfoProto::set_has_autorun() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EtcInfoProto::clear_has_autorun() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EtcInfoProto::clear_autorun() {
  autorun_ = false;
  clear_has_autorun();
}
inline bool EtcInfoProto::autorun() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.autorun)
  return autorun_;
}
inline void EtcInfoProto::set_autorun(bool value) {
  set_has_autorun();
  autorun_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.autorun)
}

// optional string launch = 12;
inline bool EtcInfoProto::has_launch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EtcInfoProto::set_has_launch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EtcInfoProto::clear_has_launch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EtcInfoProto::clear_launch() {
  launch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_launch();
}
inline const ::std::string& EtcInfoProto::launch() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.launch)
  return launch_.GetNoArena();
}
inline void EtcInfoProto::set_launch(const ::std::string& value) {
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.launch)
}
#if LANG_CXX11
inline void EtcInfoProto::set_launch(::std::string&& value) {
  set_has_launch();
  launch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.launch)
}
#endif
inline void EtcInfoProto::set_launch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.launch)
}
inline void EtcInfoProto::set_launch(const char* value, size_t size) {
  set_has_launch();
  launch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.launch)
}
inline ::std::string* EtcInfoProto::mutable_launch() {
  set_has_launch();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.launch)
  return launch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_launch() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.launch)
  clear_has_launch();
  return launch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_launch(::std::string* launch) {
  if (launch != NULL) {
    set_has_launch();
  } else {
    clear_has_launch();
  }
  launch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.launch)
}

// optional string shortcut_url = 13;
inline bool EtcInfoProto::has_shortcut_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EtcInfoProto::set_has_shortcut_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EtcInfoProto::clear_has_shortcut_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EtcInfoProto::clear_shortcut_url() {
  shortcut_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shortcut_url();
}
inline const ::std::string& EtcInfoProto::shortcut_url() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.shortcut_url)
  return shortcut_url_.GetNoArena();
}
inline void EtcInfoProto::set_shortcut_url(const ::std::string& value) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.shortcut_url)
}
#if LANG_CXX11
inline void EtcInfoProto::set_shortcut_url(::std::string&& value) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.shortcut_url)
}
#endif
inline void EtcInfoProto::set_shortcut_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.shortcut_url)
}
inline void EtcInfoProto::set_shortcut_url(const char* value, size_t size) {
  set_has_shortcut_url();
  shortcut_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.shortcut_url)
}
inline ::std::string* EtcInfoProto::mutable_shortcut_url() {
  set_has_shortcut_url();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.shortcut_url)
  return shortcut_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_shortcut_url() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.shortcut_url)
  clear_has_shortcut_url();
  return shortcut_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_shortcut_url(::std::string* shortcut_url) {
  if (shortcut_url != NULL) {
    set_has_shortcut_url();
  } else {
    clear_has_shortcut_url();
  }
  shortcut_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shortcut_url);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.shortcut_url)
}

// optional string assoc = 14;
inline bool EtcInfoProto::has_assoc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EtcInfoProto::set_has_assoc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EtcInfoProto::clear_has_assoc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EtcInfoProto::clear_assoc() {
  assoc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_assoc();
}
inline const ::std::string& EtcInfoProto::assoc() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.assoc)
  return assoc_.GetNoArena();
}
inline void EtcInfoProto::set_assoc(const ::std::string& value) {
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.assoc)
}
#if LANG_CXX11
inline void EtcInfoProto::set_assoc(::std::string&& value) {
  set_has_assoc();
  assoc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.EtcInfoProto.assoc)
}
#endif
inline void EtcInfoProto::set_assoc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.EtcInfoProto.assoc)
}
inline void EtcInfoProto::set_assoc(const char* value, size_t size) {
  set_has_assoc();
  assoc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.EtcInfoProto.assoc)
}
inline ::std::string* EtcInfoProto::mutable_assoc() {
  set_has_assoc();
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.assoc)
  return assoc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EtcInfoProto::release_assoc() {
  // @@protoc_insertion_point(field_release:metrics.EtcInfoProto.assoc)
  clear_has_assoc();
  return assoc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EtcInfoProto::set_allocated_assoc(::std::string* assoc) {
  if (assoc != NULL) {
    set_has_assoc();
  } else {
    clear_has_assoc();
  }
  assoc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assoc);
  // @@protoc_insertion_point(field_set_allocated:metrics.EtcInfoProto.assoc)
}

// optional bool notify_enabled = 15;
inline bool EtcInfoProto::has_notify_enabled() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EtcInfoProto::set_has_notify_enabled() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EtcInfoProto::clear_has_notify_enabled() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EtcInfoProto::clear_notify_enabled() {
  notify_enabled_ = false;
  clear_has_notify_enabled();
}
inline bool EtcInfoProto::notify_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.notify_enabled)
  return notify_enabled_;
}
inline void EtcInfoProto::set_notify_enabled(bool value) {
  set_has_notify_enabled();
  notify_enabled_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.notify_enabled)
}

// optional int32 vk_login = 16;
inline bool EtcInfoProto::has_vk_login() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EtcInfoProto::set_has_vk_login() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EtcInfoProto::clear_has_vk_login() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EtcInfoProto::clear_vk_login() {
  vk_login_ = 0;
  clear_has_vk_login();
}
inline ::google::protobuf::int32 EtcInfoProto::vk_login() const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.vk_login)
  return vk_login_;
}
inline void EtcInfoProto::set_vk_login(::google::protobuf::int32 value) {
  set_has_vk_login();
  vk_login_ = value;
  // @@protoc_insertion_point(field_set:metrics.EtcInfoProto.vk_login)
}

// repeated .metrics.BrowserInformerProto browser_informer_event = 17;
inline int EtcInfoProto::browser_informer_event_size() const {
  return browser_informer_event_.size();
}
inline void EtcInfoProto::clear_browser_informer_event() {
  browser_informer_event_.Clear();
}
inline const ::metrics::BrowserInformerProto& EtcInfoProto::browser_informer_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Get(index);
}
inline ::metrics::BrowserInformerProto* EtcInfoProto::mutable_browser_informer_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Mutable(index);
}
inline ::metrics::BrowserInformerProto* EtcInfoProto::add_browser_informer_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >*
EtcInfoProto::mutable_browser_informer_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.browser_informer_event)
  return &browser_informer_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::BrowserInformerProto >&
EtcInfoProto::browser_informer_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.browser_informer_event)
  return browser_informer_event_;
}

// repeated .metrics.CAVerificationProto ca_verification_event = 18;
inline int EtcInfoProto::ca_verification_event_size() const {
  return ca_verification_event_.size();
}
inline void EtcInfoProto::clear_ca_verification_event() {
  ca_verification_event_.Clear();
}
inline const ::metrics::CAVerificationProto& EtcInfoProto::ca_verification_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Get(index);
}
inline ::metrics::CAVerificationProto* EtcInfoProto::mutable_ca_verification_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Mutable(index);
}
inline ::metrics::CAVerificationProto* EtcInfoProto::add_ca_verification_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >*
EtcInfoProto::mutable_ca_verification_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.ca_verification_event)
  return &ca_verification_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CAVerificationProto >&
EtcInfoProto::ca_verification_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.ca_verification_event)
  return ca_verification_event_;
}

// repeated .metrics.SecurityPopupProto security_popup_event = 19;
inline int EtcInfoProto::security_popup_event_size() const {
  return security_popup_event_.size();
}
inline void EtcInfoProto::clear_security_popup_event() {
  security_popup_event_.Clear();
}
inline const ::metrics::SecurityPopupProto& EtcInfoProto::security_popup_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Get(index);
}
inline ::metrics::SecurityPopupProto* EtcInfoProto::mutable_security_popup_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Mutable(index);
}
inline ::metrics::SecurityPopupProto* EtcInfoProto::add_security_popup_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >*
EtcInfoProto::mutable_security_popup_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.security_popup_event)
  return &security_popup_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::SecurityPopupProto >&
EtcInfoProto::security_popup_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.security_popup_event)
  return security_popup_event_;
}

// repeated .metrics.KOFRProto kofr_event = 20;
inline int EtcInfoProto::kofr_event_size() const {
  return kofr_event_.size();
}
inline void EtcInfoProto::clear_kofr_event() {
  kofr_event_.Clear();
}
inline const ::metrics::KOFRProto& EtcInfoProto::kofr_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Get(index);
}
inline ::metrics::KOFRProto* EtcInfoProto::mutable_kofr_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Mutable(index);
}
inline ::metrics::KOFRProto* EtcInfoProto::add_kofr_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.kofr_event)
  return kofr_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >*
EtcInfoProto::mutable_kofr_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.kofr_event)
  return &kofr_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::KOFRProto >&
EtcInfoProto::kofr_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.kofr_event)
  return kofr_event_;
}

// repeated .metrics.ImportProto import_event = 21;
inline int EtcInfoProto::import_event_size() const {
  return import_event_.size();
}
inline void EtcInfoProto::clear_import_event() {
  import_event_.Clear();
}
inline const ::metrics::ImportProto& EtcInfoProto::import_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.import_event)
  return import_event_.Get(index);
}
inline ::metrics::ImportProto* EtcInfoProto::mutable_import_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.import_event)
  return import_event_.Mutable(index);
}
inline ::metrics::ImportProto* EtcInfoProto::add_import_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.import_event)
  return import_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >*
EtcInfoProto::mutable_import_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.import_event)
  return &import_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::ImportProto >&
EtcInfoProto::import_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.import_event)
  return import_event_;
}

// repeated .metrics.PageInfoBubbleProto page_info_bubble_event = 22;
inline int EtcInfoProto::page_info_bubble_event_size() const {
  return page_info_bubble_event_.size();
}
inline void EtcInfoProto::clear_page_info_bubble_event() {
  page_info_bubble_event_.Clear();
}
inline const ::metrics::PageInfoBubbleProto& EtcInfoProto::page_info_bubble_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Get(index);
}
inline ::metrics::PageInfoBubbleProto* EtcInfoProto::mutable_page_info_bubble_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Mutable(index);
}
inline ::metrics::PageInfoBubbleProto* EtcInfoProto::add_page_info_bubble_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >*
EtcInfoProto::mutable_page_info_bubble_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.page_info_bubble_event)
  return &page_info_bubble_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::PageInfoBubbleProto >&
EtcInfoProto::page_info_bubble_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.page_info_bubble_event)
  return page_info_bubble_event_;
}

// repeated .metrics.CrabEvents crab_event = 23;
inline int EtcInfoProto::crab_event_size() const {
  return crab_event_.size();
}
inline void EtcInfoProto::clear_crab_event() {
  crab_event_.Clear();
}
inline const ::metrics::CrabEvents& EtcInfoProto::crab_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.EtcInfoProto.crab_event)
  return crab_event_.Get(index);
}
inline ::metrics::CrabEvents* EtcInfoProto::mutable_crab_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.EtcInfoProto.crab_event)
  return crab_event_.Mutable(index);
}
inline ::metrics::CrabEvents* EtcInfoProto::add_crab_event() {
  // @@protoc_insertion_point(field_add:metrics.EtcInfoProto.crab_event)
  return crab_event_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >*
EtcInfoProto::mutable_crab_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.EtcInfoProto.crab_event)
  return &crab_event_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CrabEvents >&
EtcInfoProto::crab_event() const {
  // @@protoc_insertion_point(field_list:metrics.EtcInfoProto.crab_event)
  return crab_event_;
}

// -------------------------------------------------------------------

// CrabItemInfo

// required string key = 1;
inline bool CrabItemInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrabItemInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrabItemInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrabItemInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CrabItemInfo::key() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItemInfo.key)
  return key_.GetNoArena();
}
inline void CrabItemInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabItemInfo.key)
}
#if LANG_CXX11
inline void CrabItemInfo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabItemInfo.key)
}
#endif
inline void CrabItemInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabItemInfo.key)
}
inline void CrabItemInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabItemInfo.key)
}
inline ::std::string* CrabItemInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:metrics.CrabItemInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabItemInfo::release_key() {
  // @@protoc_insertion_point(field_release:metrics.CrabItemInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabItemInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabItemInfo.key)
}

// required string value = 2;
inline bool CrabItemInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrabItemInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrabItemInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrabItemInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CrabItemInfo::value() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItemInfo.value)
  return value_.GetNoArena();
}
inline void CrabItemInfo::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabItemInfo.value)
}
#if LANG_CXX11
inline void CrabItemInfo::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabItemInfo.value)
}
#endif
inline void CrabItemInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabItemInfo.value)
}
inline void CrabItemInfo::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabItemInfo.value)
}
inline ::std::string* CrabItemInfo::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:metrics.CrabItemInfo.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabItemInfo::release_value() {
  // @@protoc_insertion_point(field_release:metrics.CrabItemInfo.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabItemInfo::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabItemInfo.value)
}

// -------------------------------------------------------------------

// CrabItem

// required int32 item_id = 1;
inline bool CrabItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrabItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrabItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrabItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 CrabItem::item_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabItem.item_id)
  return item_id_;
}
inline void CrabItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabItem.item_id)
}

// repeated .metrics.CrabItemInfo info = 2;
inline int CrabItem::info_size() const {
  return info_.size();
}
inline void CrabItem::clear_info() {
  info_.Clear();
}
inline const ::metrics::CrabItemInfo& CrabItem::info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabItem.info)
  return info_.Get(index);
}
inline ::metrics::CrabItemInfo* CrabItem::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabItem.info)
  return info_.Mutable(index);
}
inline ::metrics::CrabItemInfo* CrabItem::add_info() {
  // @@protoc_insertion_point(field_add:metrics.CrabItem.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >*
CrabItem::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabItem.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItemInfo >&
CrabItem::info() const {
  // @@protoc_insertion_point(field_list:metrics.CrabItem.info)
  return info_;
}

// -------------------------------------------------------------------

// CrabShow

// required string parser_id = 1;
inline bool CrabShow::has_parser_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrabShow::set_has_parser_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrabShow::clear_has_parser_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrabShow::clear_parser_id() {
  parser_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parser_id();
}
inline const ::std::string& CrabShow::parser_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.parser_id)
  return parser_id_.GetNoArena();
}
inline void CrabShow::set_parser_id(const ::std::string& value) {
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabShow.parser_id)
}
#if LANG_CXX11
inline void CrabShow::set_parser_id(::std::string&& value) {
  set_has_parser_id();
  parser_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabShow.parser_id)
}
#endif
inline void CrabShow::set_parser_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabShow.parser_id)
}
inline void CrabShow::set_parser_id(const char* value, size_t size) {
  set_has_parser_id();
  parser_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabShow.parser_id)
}
inline ::std::string* CrabShow::mutable_parser_id() {
  set_has_parser_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.parser_id)
  return parser_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabShow::release_parser_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabShow.parser_id)
  clear_has_parser_id();
  return parser_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabShow::set_allocated_parser_id(::std::string* parser_id) {
  if (parser_id != NULL) {
    set_has_parser_id();
  } else {
    clear_has_parser_id();
  }
  parser_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parser_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabShow.parser_id)
}

// required string show_id = 2;
inline bool CrabShow::has_show_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrabShow::set_has_show_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrabShow::clear_has_show_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrabShow::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_show_id();
}
inline const ::std::string& CrabShow::show_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.show_id)
  return show_id_.GetNoArena();
}
inline void CrabShow::set_show_id(const ::std::string& value) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabShow.show_id)
}
#if LANG_CXX11
inline void CrabShow::set_show_id(::std::string&& value) {
  set_has_show_id();
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabShow.show_id)
}
#endif
inline void CrabShow::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabShow.show_id)
}
inline void CrabShow::set_show_id(const char* value, size_t size) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabShow.show_id)
}
inline ::std::string* CrabShow::mutable_show_id() {
  set_has_show_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabShow::release_show_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabShow.show_id)
  clear_has_show_id();
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabShow::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    set_has_show_id();
  } else {
    clear_has_show_id();
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabShow.show_id)
}

// required int64 client_ts = 3;
inline bool CrabShow::has_client_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrabShow::set_has_client_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrabShow::clear_has_client_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrabShow::clear_client_ts() {
  client_ts_ = GOOGLE_LONGLONG(0);
  clear_has_client_ts();
}
inline ::google::protobuf::int64 CrabShow::client_ts() const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.client_ts)
  return client_ts_;
}
inline void CrabShow::set_client_ts(::google::protobuf::int64 value) {
  set_has_client_ts();
  client_ts_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabShow.client_ts)
}

// repeated .metrics.CrabItem items = 4;
inline int CrabShow::items_size() const {
  return items_.size();
}
inline void CrabShow::clear_items() {
  items_.Clear();
}
inline const ::metrics::CrabItem& CrabShow::items(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabShow.items)
  return items_.Get(index);
}
inline ::metrics::CrabItem* CrabShow::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabShow.items)
  return items_.Mutable(index);
}
inline ::metrics::CrabItem* CrabShow::add_items() {
  // @@protoc_insertion_point(field_add:metrics.CrabShow.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >*
CrabShow::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabShow.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CrabItem >&
CrabShow::items() const {
  // @@protoc_insertion_point(field_list:metrics.CrabShow.items)
  return items_;
}

// -------------------------------------------------------------------

// CrabClick

// required string show_id = 1;
inline bool CrabClick::has_show_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrabClick::set_has_show_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrabClick::clear_has_show_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrabClick::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_show_id();
}
inline const ::std::string& CrabClick::show_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.show_id)
  return show_id_.GetNoArena();
}
inline void CrabClick::set_show_id(const ::std::string& value) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabClick.show_id)
}
#if LANG_CXX11
inline void CrabClick::set_show_id(::std::string&& value) {
  set_has_show_id();
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabClick.show_id)
}
#endif
inline void CrabClick::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabClick.show_id)
}
inline void CrabClick::set_show_id(const char* value, size_t size) {
  set_has_show_id();
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabClick.show_id)
}
inline ::std::string* CrabClick::mutable_show_id() {
  set_has_show_id();
  // @@protoc_insertion_point(field_mutable:metrics.CrabClick.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabClick::release_show_id() {
  // @@protoc_insertion_point(field_release:metrics.CrabClick.show_id)
  clear_has_show_id();
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabClick::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    set_has_show_id();
  } else {
    clear_has_show_id();
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabClick.show_id)
}

// required int32 item_id = 2;
inline bool CrabClick::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrabClick::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrabClick::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrabClick::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 CrabClick::item_id() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.item_id)
  return item_id_;
}
inline void CrabClick::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabClick.item_id)
}

// required int64 client_ts = 3;
inline bool CrabClick::has_client_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrabClick::set_has_client_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrabClick::clear_has_client_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrabClick::clear_client_ts() {
  client_ts_ = GOOGLE_LONGLONG(0);
  clear_has_client_ts();
}
inline ::google::protobuf::int64 CrabClick::client_ts() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.client_ts)
  return client_ts_;
}
inline void CrabClick::set_client_ts(::google::protobuf::int64 value) {
  set_has_client_ts();
  client_ts_ = value;
  // @@protoc_insertion_point(field_set:metrics.CrabClick.client_ts)
}

// required string final_url = 4;
inline bool CrabClick::has_final_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrabClick::set_has_final_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrabClick::clear_has_final_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrabClick::clear_final_url() {
  final_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_final_url();
}
inline const ::std::string& CrabClick::final_url() const {
  // @@protoc_insertion_point(field_get:metrics.CrabClick.final_url)
  return final_url_.GetNoArena();
}
inline void CrabClick::set_final_url(const ::std::string& value) {
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CrabClick.final_url)
}
#if LANG_CXX11
inline void CrabClick::set_final_url(::std::string&& value) {
  set_has_final_url();
  final_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CrabClick.final_url)
}
#endif
inline void CrabClick::set_final_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CrabClick.final_url)
}
inline void CrabClick::set_final_url(const char* value, size_t size) {
  set_has_final_url();
  final_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CrabClick.final_url)
}
inline ::std::string* CrabClick::mutable_final_url() {
  set_has_final_url();
  // @@protoc_insertion_point(field_mutable:metrics.CrabClick.final_url)
  return final_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrabClick::release_final_url() {
  // @@protoc_insertion_point(field_release:metrics.CrabClick.final_url)
  clear_has_final_url();
  return final_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrabClick::set_allocated_final_url(::std::string* final_url) {
  if (final_url != NULL) {
    set_has_final_url();
  } else {
    clear_has_final_url();
  }
  final_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_url);
  // @@protoc_insertion_point(field_set_allocated:metrics.CrabClick.final_url)
}

// -------------------------------------------------------------------

// CrabEvents

// repeated .metrics.CrabShow shows = 1;
inline int CrabEvents::shows_size() const {
  return shows_.size();
}
inline void CrabEvents::clear_shows() {
  shows_.Clear();
}
inline const ::metrics::CrabShow& CrabEvents::shows(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabEvents.shows)
  return shows_.Get(index);
}
inline ::metrics::CrabShow* CrabEvents::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabEvents.shows)
  return shows_.Mutable(index);
}
inline ::metrics::CrabShow* CrabEvents::add_shows() {
  // @@protoc_insertion_point(field_add:metrics.CrabEvents.shows)
  return shows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >*
CrabEvents::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabEvents.shows)
  return &shows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CrabShow >&
CrabEvents::shows() const {
  // @@protoc_insertion_point(field_list:metrics.CrabEvents.shows)
  return shows_;
}

// repeated .metrics.CrabClick clicks = 2;
inline int CrabEvents::clicks_size() const {
  return clicks_.size();
}
inline void CrabEvents::clear_clicks() {
  clicks_.Clear();
}
inline const ::metrics::CrabClick& CrabEvents::clicks(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CrabEvents.clicks)
  return clicks_.Get(index);
}
inline ::metrics::CrabClick* CrabEvents::mutable_clicks(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CrabEvents.clicks)
  return clicks_.Mutable(index);
}
inline ::metrics::CrabClick* CrabEvents::add_clicks() {
  // @@protoc_insertion_point(field_add:metrics.CrabEvents.clicks)
  return clicks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >*
CrabEvents::mutable_clicks() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CrabEvents.clicks)
  return &clicks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metrics::CrabClick >&
CrabEvents::clicks() const {
  // @@protoc_insertion_point(field_list:metrics.CrabEvents.clicks)
  return clicks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace metrics

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metrics::BrowserInformerProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::BrowserInformerProto_EventType>() {
  return ::metrics::BrowserInformerProto_EventType_descriptor();
}
template <> struct is_proto_enum< ::metrics::BrowserInformerProto_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::BrowserInformerProto_Action>() {
  return ::metrics::BrowserInformerProto_Action_descriptor();
}
template <> struct is_proto_enum< ::metrics::CAVerificationProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::CAVerificationProto_EventType>() {
  return ::metrics::CAVerificationProto_EventType_descriptor();
}
template <> struct is_proto_enum< ::metrics::CAVerificationProto_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::CAVerificationProto_Action>() {
  return ::metrics::CAVerificationProto_Action_descriptor();
}
template <> struct is_proto_enum< ::metrics::CAVerificationProto_UpdateStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::CAVerificationProto_UpdateStatus>() {
  return ::metrics::CAVerificationProto_UpdateStatus_descriptor();
}
template <> struct is_proto_enum< ::metrics::SecurityPopupProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::SecurityPopupProto_EventType>() {
  return ::metrics::SecurityPopupProto_EventType_descriptor();
}
template <> struct is_proto_enum< ::metrics::ImportProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::ImportProto_EventType>() {
  return ::metrics::ImportProto_EventType_descriptor();
}
template <> struct is_proto_enum< ::metrics::PageInfoBubbleProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::PageInfoBubbleProto_EventType>() {
  return ::metrics::PageInfoBubbleProto_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_etc_5fmetrics_2eproto__INCLUDED
