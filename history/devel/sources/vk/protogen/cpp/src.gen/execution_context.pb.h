// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_context.proto

#ifndef PROTOBUF_execution_5fcontext_2eproto__INCLUDED
#define PROTOBUF_execution_5fcontext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace metrics {
}  // namespace metrics

namespace metrics {

namespace protobuf_execution_5fcontext_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_execution_5fcontext_2eproto

enum Process {
  UNKNOWN_PROCESS = 0,
  BROWSER_PROCESS = 1,
  RENDERER_PROCESS = 2,
  GPU_PROCESS = 3,
  UTILITY_PROCESS = 4,
  ZYGOTE_PROCESS = 5,
  SANDBOX_HELPER_PROCESS = 6,
  PPAPI_PLUGIN_PROCESS = 7,
  PPAPI_BROKER_PROCESS = 8,
  NETWORK_SERVICE_PROCESS = 10,
  OTHER_PROCESS = 9
};
bool Process_IsValid(int value);
const Process Process_MIN = UNKNOWN_PROCESS;
const Process Process_MAX = NETWORK_SERVICE_PROCESS;
const int Process_ARRAYSIZE = Process_MAX + 1;

const ::google::protobuf::EnumDescriptor* Process_descriptor();
inline const ::std::string& Process_Name(Process value) {
  return ::google::protobuf::internal::NameOfEnum(
    Process_descriptor(), value);
}
inline bool Process_Parse(
    const ::std::string& name, Process* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Process>(
    Process_descriptor(), name, value);
}
enum Thread {
  UNKNOWN_THREAD = 0,
  MAIN_THREAD = 1,
  FILE_THREAD = 2,
  FILE_USER_BLOCKING_THREAD = 3,
  PROCESS_LAUNCHER_THREAD = 4,
  CACHE_THREAD = 5,
  IO_THREAD = 6,
  DB_THREAD = 7,
  GPU_MAIN_THREAD = 8,
  RENDER_THREAD = 9,
  UTILITY_THREAD = 10,
  COMPOSITOR_THREAD = 11,
  SCHEDULER_WORKER_THREAD = 13,
  COMPOSITOR_TILE_WORKER_THREAD = 14,
  SERVICE_WORKER_THREAD = 15,
  DEDICATED_WORKER_THREAD = 18,
  THREAD_POOL_THREAD = 16,
  GPU_MEMORY_THREAD = 17,
  MEMORY_INFRA_THREAD = 19,
  MEDIA_THREAD = 20,
  WEBRTC_THREAD = 21,
  OTHER_THREAD = 12
};
bool Thread_IsValid(int value);
const Thread Thread_MIN = UNKNOWN_THREAD;
const Thread Thread_MAX = WEBRTC_THREAD;
const int Thread_ARRAYSIZE = Thread_MAX + 1;

const ::google::protobuf::EnumDescriptor* Thread_descriptor();
inline const ::std::string& Thread_Name(Thread value) {
  return ::google::protobuf::internal::NameOfEnum(
    Thread_descriptor(), value);
}
inline bool Thread_Parse(
    const ::std::string& name, Thread* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Thread>(
    Thread_descriptor(), name, value);
}
enum ProcessPhase {
  MAIN_LOOP_START = 0,
  MAIN_NAVIGATION_START = 1,
  MAIN_NAVIGATION_FINISHED = 2,
  FIRST_NONEMPTY_PAINT = 3,
  SHUTDOWN_START = 4
};
bool ProcessPhase_IsValid(int value);
const ProcessPhase ProcessPhase_MIN = MAIN_LOOP_START;
const ProcessPhase ProcessPhase_MAX = SHUTDOWN_START;
const int ProcessPhase_ARRAYSIZE = ProcessPhase_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcessPhase_descriptor();
inline const ::std::string& ProcessPhase_Name(ProcessPhase value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcessPhase_descriptor(), value);
}
inline bool ProcessPhase_Parse(
    const ::std::string& name, ProcessPhase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessPhase>(
    ProcessPhase_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace metrics

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metrics::Process> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::Process>() {
  return ::metrics::Process_descriptor();
}
template <> struct is_proto_enum< ::metrics::Thread> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::Thread>() {
  return ::metrics::Thread_descriptor();
}
template <> struct is_proto_enum< ::metrics::ProcessPhase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metrics::ProcessPhase>() {
  return ::metrics::ProcessPhase_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_execution_5fcontext_2eproto__INCLUDED
