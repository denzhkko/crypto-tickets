// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fact_extractor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fact_extractor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fact_extractor {
namespace pb {
class RequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Request>
     _instance;
} _Request_default_instance_;
class ResultSentenceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResultSentence>
     _instance;
} _ResultSentence_default_instance_;
class ResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Response>
     _instance;
} _Response_default_instance_;

namespace protobuf_fact_5fextractor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, plain_index_documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, documents_urls_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSentence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSentence, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSentence, sentence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSentence, confidence_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, doc_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sentences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, q_score_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Request)},
  { 11, 19, sizeof(ResultSentence)},
  { 22, 30, sizeof(Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultSentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fact_extractor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Request_default_instance_);_ResultSentence_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResultSentence_default_instance_);_Response_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Response_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024fact_extractor.proto\022\021fact_extractor.p"
      "b\"S\n\007Request\022\021\n\tdocuments\030\001 \003(\t\022\035\n\025plain"
      "_index_documents\030\002 \003(\014\022\026\n\016documents_urls"
      "\030\003 \003(\t\"\237\001\n\016ResultSentence\022\r\n\005score\030\001 \001(\002"
      "\022\020\n\010sentence\030\002 \001(\t\022@\n\nconfidence\030\003 \001(\0162,"
      ".fact_extractor.pb.ResultSentence.Confid"
      "ence\"*\n\nConfidence\022\t\n\005TRASH\020\024\022\007\n\003LOW\020(\022\010"
      "\n\004HIGH\020<\"d\n\010Response\022\021\n\tdoc_index\030\001 \001(\005\022"
      "4\n\tsentences\030\002 \003(\0132!.fact_extractor.pb.R"
      "esultSentence\022\017\n\007q_score\030\003 \001(\002B\017B\rFactEx"
      "tractor"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fact_extractor.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fact_5fextractor_2eproto

const ::google::protobuf::EnumDescriptor* ResultSentence_Confidence_descriptor() {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_enum_descriptors[0];
}
bool ResultSentence_Confidence_IsValid(int value) {
  switch (value) {
    case 20:
    case 40:
    case 60:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResultSentence_Confidence ResultSentence::TRASH;
const ResultSentence_Confidence ResultSentence::LOW;
const ResultSentence_Confidence ResultSentence::HIGH;
const ResultSentence_Confidence ResultSentence::Confidence_MIN;
const ResultSentence_Confidence ResultSentence::Confidence_MAX;
const int ResultSentence::Confidence_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kDocumentsFieldNumber;
const int Request::kPlainIndexDocumentsFieldNumber;
const int Request::kDocumentsUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fact_5fextractor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fact_extractor.pb.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_),
      plain_index_documents_(from.plain_index_documents_),
      documents_urls_(from.documents_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fact_extractor.pb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:fact_extractor.pb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_fact_5fextractor_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:fact_extractor.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  plain_index_documents_.Clear();
  documents_urls_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fact_extractor.pb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_documents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documents(this->documents_size() - 1).data(),
            static_cast<int>(this->documents(this->documents_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fact_extractor.pb.Request.documents");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes plain_index_documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_plain_index_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string documents_urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_documents_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documents_urls(this->documents_urls_size() - 1).data(),
            static_cast<int>(this->documents_urls(this->documents_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fact_extractor.pb.Request.documents_urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fact_extractor.pb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fact_extractor.pb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fact_extractor.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string documents = 1;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.Request.documents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->documents(i), output);
  }

  // repeated bytes plain_index_documents = 2;
  for (int i = 0, n = this->plain_index_documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->plain_index_documents(i), output);
  }

  // repeated string documents_urls = 3;
  for (int i = 0, n = this->documents_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documents_urls(i).data(), static_cast<int>(this->documents_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.Request.documents_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->documents_urls(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fact_extractor.pb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fact_extractor.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string documents = 1;
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documents(i).data(), static_cast<int>(this->documents(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.Request.documents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->documents(i), target);
  }

  // repeated bytes plain_index_documents = 2;
  for (int i = 0, n = this->plain_index_documents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->plain_index_documents(i), target);
  }

  // repeated string documents_urls = 3;
  for (int i = 0, n = this->documents_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documents_urls(i).data(), static_cast<int>(this->documents_urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.Request.documents_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->documents_urls(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fact_extractor.pb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fact_extractor.pb.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string documents = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_size());
  for (int i = 0, n = this->documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->documents(i));
  }

  // repeated bytes plain_index_documents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->plain_index_documents_size());
  for (int i = 0, n = this->plain_index_documents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->plain_index_documents(i));
  }

  // repeated string documents_urls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->documents_urls_size());
  for (int i = 0, n = this->documents_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->documents_urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fact_extractor.pb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fact_extractor.pb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fact_extractor.pb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fact_extractor.pb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  plain_index_documents_.MergeFrom(from.plain_index_documents_);
  documents_urls_.MergeFrom(from.documents_urls_);
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fact_extractor.pb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fact_extractor.pb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  plain_index_documents_.InternalSwap(&other->plain_index_documents_);
  documents_urls_.InternalSwap(&other->documents_urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// repeated string documents = 1;
int Request::documents_size() const {
  return documents_.size();
}
void Request::clear_documents() {
  documents_.Clear();
}
const ::std::string& Request::documents(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.documents)
  return documents_.Get(index);
}
::std::string* Request::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.documents)
  return documents_.Mutable(index);
}
void Request::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Request::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
void Request::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.documents)
}
void Request::set_documents(int index, const char* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.documents)
}
::std::string* Request::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.documents)
  return documents_.Add();
}
void Request::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents)
}
#if LANG_CXX11
void Request::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents)
}
#endif
void Request::add_documents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.documents)
}
void Request::add_documents(const char* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.documents)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::documents() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.documents)
  return documents_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.documents)
  return &documents_;
}

// repeated bytes plain_index_documents = 2;
int Request::plain_index_documents_size() const {
  return plain_index_documents_.size();
}
void Request::clear_plain_index_documents() {
  plain_index_documents_.Clear();
}
const ::std::string& Request::plain_index_documents(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Get(index);
}
::std::string* Request::mutable_plain_index_documents(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Mutable(index);
}
void Request::set_plain_index_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.plain_index_documents)
  plain_index_documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Request::set_plain_index_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.plain_index_documents)
  plain_index_documents_.Mutable(index)->assign(std::move(value));
}
#endif
void Request::set_plain_index_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plain_index_documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.plain_index_documents)
}
void Request::set_plain_index_documents(int index, const void* value, size_t size) {
  plain_index_documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.plain_index_documents)
}
::std::string* Request::add_plain_index_documents() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Add();
}
void Request::add_plain_index_documents(const ::std::string& value) {
  plain_index_documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.plain_index_documents)
}
#if LANG_CXX11
void Request::add_plain_index_documents(::std::string&& value) {
  plain_index_documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.plain_index_documents)
}
#endif
void Request::add_plain_index_documents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plain_index_documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.plain_index_documents)
}
void Request::add_plain_index_documents(const void* value, size_t size) {
  plain_index_documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.plain_index_documents)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::plain_index_documents() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_plain_index_documents() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.plain_index_documents)
  return &plain_index_documents_;
}

// repeated string documents_urls = 3;
int Request::documents_urls_size() const {
  return documents_urls_.size();
}
void Request::clear_documents_urls() {
  documents_urls_.Clear();
}
const ::std::string& Request::documents_urls(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Get(index);
}
::std::string* Request::mutable_documents_urls(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Mutable(index);
}
void Request::set_documents_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents_urls)
  documents_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Request::set_documents_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents_urls)
  documents_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Request::set_documents_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.documents_urls)
}
void Request::set_documents_urls(int index, const char* value, size_t size) {
  documents_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.documents_urls)
}
::std::string* Request::add_documents_urls() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Add();
}
void Request::add_documents_urls(const ::std::string& value) {
  documents_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents_urls)
}
#if LANG_CXX11
void Request::add_documents_urls(::std::string&& value) {
  documents_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents_urls)
}
#endif
void Request::add_documents_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.documents_urls)
}
void Request::add_documents_urls(const char* value, size_t size) {
  documents_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.documents_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::documents_urls() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.documents_urls)
  return documents_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_documents_urls() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.documents_urls)
  return &documents_urls_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultSentence::kScoreFieldNumber;
const int ResultSentence::kSentenceFieldNumber;
const int ResultSentence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultSentence::ResultSentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fact_5fextractor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fact_extractor.pb.ResultSentence)
}
ResultSentence::ResultSentence(const ResultSentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sentence()) {
    sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sentence_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&score_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:fact_extractor.pb.ResultSentence)
}

void ResultSentence::SharedCtor() {
  _cached_size_ = 0;
  sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  confidence_ = 20;
}

ResultSentence::~ResultSentence() {
  // @@protoc_insertion_point(destructor:fact_extractor.pb.ResultSentence)
  SharedDtor();
}

void ResultSentence::SharedDtor() {
  sentence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResultSentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultSentence::descriptor() {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultSentence& ResultSentence::default_instance() {
  protobuf_fact_5fextractor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultSentence* ResultSentence::New(::google::protobuf::Arena* arena) const {
  ResultSentence* n = new ResultSentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultSentence::Clear() {
// @@protoc_insertion_point(message_clear_start:fact_extractor.pb.ResultSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_sentence()) {
    GOOGLE_DCHECK(!sentence_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sentence_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    score_ = 0;
    confidence_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultSentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fact_extractor.pb.ResultSentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sentence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sentence().data(), static_cast<int>(this->sentence().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fact_extractor.pb.ResultSentence.sentence");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fact_extractor::pb::ResultSentence_Confidence_IsValid(value)) {
            set_confidence(static_cast< ::fact_extractor::pb::ResultSentence_Confidence >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fact_extractor.pb.ResultSentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fact_extractor.pb.ResultSentence)
  return false;
#undef DO_
}

void ResultSentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fact_extractor.pb.ResultSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // optional string sentence = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), static_cast<int>(this->sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.ResultSentence.sentence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sentence(), output);
  }

  // optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fact_extractor.pb.ResultSentence)
}

::google::protobuf::uint8* ResultSentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fact_extractor.pb.ResultSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // optional string sentence = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), static_cast<int>(this->sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fact_extractor.pb.ResultSentence.sentence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sentence(), target);
  }

  // optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fact_extractor.pb.ResultSentence)
  return target;
}

size_t ResultSentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fact_extractor.pb.ResultSentence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string sentence = 2;
    if (has_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence());
    }

    // optional float score = 1;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
    if (has_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultSentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fact_extractor.pb.ResultSentence)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultSentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultSentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fact_extractor.pb.ResultSentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fact_extractor.pb.ResultSentence)
    MergeFrom(*source);
  }
}

void ResultSentence::MergeFrom(const ResultSentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fact_extractor.pb.ResultSentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sentence();
      sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sentence_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultSentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fact_extractor.pb.ResultSentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultSentence::CopyFrom(const ResultSentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fact_extractor.pb.ResultSentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSentence::IsInitialized() const {
  return true;
}

void ResultSentence::Swap(ResultSentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultSentence::InternalSwap(ResultSentence* other) {
  using std::swap;
  sentence_.Swap(&other->sentence_);
  swap(score_, other->score_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultSentence::GetMetadata() const {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultSentence

// optional float score = 1;
bool ResultSentence::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResultSentence::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void ResultSentence::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResultSentence::clear_score() {
  score_ = 0;
  clear_has_score();
}
float ResultSentence::score() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.score)
  return score_;
}
void ResultSentence::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.score)
}

// optional string sentence = 2;
bool ResultSentence::has_sentence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultSentence::set_has_sentence() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultSentence::clear_has_sentence() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultSentence::clear_sentence() {
  sentence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sentence();
}
const ::std::string& ResultSentence::sentence() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.sentence)
  return sentence_.GetNoArena();
}
void ResultSentence::set_sentence(const ::std::string& value) {
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.sentence)
}
#if LANG_CXX11
void ResultSentence::set_sentence(::std::string&& value) {
  set_has_sentence();
  sentence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fact_extractor.pb.ResultSentence.sentence)
}
#endif
void ResultSentence::set_sentence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.ResultSentence.sentence)
}
void ResultSentence::set_sentence(const char* value, size_t size) {
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.ResultSentence.sentence)
}
::std::string* ResultSentence::mutable_sentence() {
  set_has_sentence();
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.ResultSentence.sentence)
  return sentence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultSentence::release_sentence() {
  // @@protoc_insertion_point(field_release:fact_extractor.pb.ResultSentence.sentence)
  clear_has_sentence();
  return sentence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultSentence::set_allocated_sentence(::std::string* sentence) {
  if (sentence != NULL) {
    set_has_sentence();
  } else {
    clear_has_sentence();
  }
  sentence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sentence);
  // @@protoc_insertion_point(field_set_allocated:fact_extractor.pb.ResultSentence.sentence)
}

// optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
bool ResultSentence::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResultSentence::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
void ResultSentence::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResultSentence::clear_confidence() {
  confidence_ = 20;
  clear_has_confidence();
}
::fact_extractor::pb::ResultSentence_Confidence ResultSentence::confidence() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.confidence)
  return static_cast< ::fact_extractor::pb::ResultSentence_Confidence >(confidence_);
}
void ResultSentence::set_confidence(::fact_extractor::pb::ResultSentence_Confidence value) {
  assert(::fact_extractor::pb::ResultSentence_Confidence_IsValid(value));
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kDocIndexFieldNumber;
const int Response::kSentencesFieldNumber;
const int Response::kQScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fact_5fextractor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fact_extractor.pb.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sentences_(from.sentences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_index_, &from.doc_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&q_score_) -
    reinterpret_cast<char*>(&doc_index_)) + sizeof(q_score_));
  // @@protoc_insertion_point(copy_constructor:fact_extractor.pb.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&q_score_) -
      reinterpret_cast<char*>(&doc_index_)) + sizeof(q_score_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:fact_extractor.pb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_fact_5fextractor_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:fact_extractor.pb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sentences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&doc_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&q_score_) -
        reinterpret_cast<char*>(&doc_index_)) + sizeof(q_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fact_extractor.pb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 doc_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doc_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fact_extractor.pb.ResultSentence sentences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float q_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_q_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fact_extractor.pb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fact_extractor.pb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fact_extractor.pb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 doc_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->doc_index(), output);
  }

  // repeated .fact_extractor.pb.ResultSentence sentences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sentences(static_cast<int>(i)), output);
  }

  // optional float q_score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->q_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fact_extractor.pb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fact_extractor.pb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 doc_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->doc_index(), target);
  }

  // repeated .fact_extractor.pb.ResultSentence sentences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sentences(static_cast<int>(i)), deterministic, target);
  }

  // optional float q_score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->q_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fact_extractor.pb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fact_extractor.pb.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fact_extractor.pb.ResultSentence sentences = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sentences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 doc_index = 1;
    if (has_doc_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doc_index());
    }

    // optional float q_score = 3;
    if (has_q_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fact_extractor.pb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fact_extractor.pb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fact_extractor.pb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fact_extractor.pb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      doc_index_ = from.doc_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      q_score_ = from.q_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fact_extractor.pb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fact_extractor.pb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  sentences_.InternalSwap(&other->sentences_);
  swap(doc_index_, other->doc_index_);
  swap(q_score_, other->q_score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_fact_5fextractor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fact_5fextractor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 doc_index = 1;
bool Response::has_doc_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_doc_index() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_doc_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_doc_index() {
  doc_index_ = 0;
  clear_has_doc_index();
}
::google::protobuf::int32 Response::doc_index() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.doc_index)
  return doc_index_;
}
void Response::set_doc_index(::google::protobuf::int32 value) {
  set_has_doc_index();
  doc_index_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Response.doc_index)
}

// repeated .fact_extractor.pb.ResultSentence sentences = 2;
int Response::sentences_size() const {
  return sentences_.size();
}
void Response::clear_sentences() {
  sentences_.Clear();
}
const ::fact_extractor::pb::ResultSentence& Response::sentences(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.sentences)
  return sentences_.Get(index);
}
::fact_extractor::pb::ResultSentence* Response::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Response.sentences)
  return sentences_.Mutable(index);
}
::fact_extractor::pb::ResultSentence* Response::add_sentences() {
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Response.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >*
Response::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Response.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >&
Response::sentences() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Response.sentences)
  return sentences_;
}

// optional float q_score = 3;
bool Response::has_q_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_q_score() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_q_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_q_score() {
  q_score_ = 0;
  clear_has_q_score();
}
float Response::q_score() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.q_score)
  return q_score_;
}
void Response::set_q_score(float value) {
  set_has_q_score();
  q_score_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Response.q_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace fact_extractor

// @@protoc_insertion_point(global_scope)
