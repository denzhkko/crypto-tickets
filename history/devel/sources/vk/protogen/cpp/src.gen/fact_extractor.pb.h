// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fact_extractor.proto

#ifndef PROTOBUF_fact_5fextractor_2eproto__INCLUDED
#define PROTOBUF_fact_5fextractor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace fact_extractor {
namespace pb {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResultSentence;
class ResultSentenceDefaultTypeInternal;
extern ResultSentenceDefaultTypeInternal _ResultSentence_default_instance_;
}  // namespace pb
}  // namespace fact_extractor

namespace fact_extractor {
namespace pb {

namespace protobuf_fact_5fextractor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fact_5fextractor_2eproto

enum ResultSentence_Confidence {
  ResultSentence_Confidence_TRASH = 20,
  ResultSentence_Confidence_LOW = 40,
  ResultSentence_Confidence_HIGH = 60
};
bool ResultSentence_Confidence_IsValid(int value);
const ResultSentence_Confidence ResultSentence_Confidence_Confidence_MIN = ResultSentence_Confidence_TRASH;
const ResultSentence_Confidence ResultSentence_Confidence_Confidence_MAX = ResultSentence_Confidence_HIGH;
const int ResultSentence_Confidence_Confidence_ARRAYSIZE = ResultSentence_Confidence_Confidence_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultSentence_Confidence_descriptor();
inline const ::std::string& ResultSentence_Confidence_Name(ResultSentence_Confidence value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultSentence_Confidence_descriptor(), value);
}
inline bool ResultSentence_Confidence_Parse(
    const ::std::string& name, ResultSentence_Confidence* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultSentence_Confidence>(
    ResultSentence_Confidence_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fact_extractor.pb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::std::string& documents(int index) const;
  ::std::string* mutable_documents(int index);
  void set_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents(int index, ::std::string&& value);
  #endif
  void set_documents(int index, const char* value);
  void set_documents(int index, const char* value, size_t size);
  ::std::string* add_documents();
  void add_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_documents(::std::string&& value);
  #endif
  void add_documents(const char* value);
  void add_documents(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& documents() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_documents();

  // repeated bytes plain_index_documents = 2;
  int plain_index_documents_size() const;
  void clear_plain_index_documents();
  static const int kPlainIndexDocumentsFieldNumber = 2;
  const ::std::string& plain_index_documents(int index) const;
  ::std::string* mutable_plain_index_documents(int index);
  void set_plain_index_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_plain_index_documents(int index, ::std::string&& value);
  #endif
  void set_plain_index_documents(int index, const char* value);
  void set_plain_index_documents(int index, const void* value, size_t size);
  ::std::string* add_plain_index_documents();
  void add_plain_index_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_plain_index_documents(::std::string&& value);
  #endif
  void add_plain_index_documents(const char* value);
  void add_plain_index_documents(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& plain_index_documents() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_plain_index_documents();

  // repeated string documents_urls = 3;
  int documents_urls_size() const;
  void clear_documents_urls();
  static const int kDocumentsUrlsFieldNumber = 3;
  const ::std::string& documents_urls(int index) const;
  ::std::string* mutable_documents_urls(int index);
  void set_documents_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents_urls(int index, ::std::string&& value);
  #endif
  void set_documents_urls(int index, const char* value);
  void set_documents_urls(int index, const char* value, size_t size);
  ::std::string* add_documents_urls();
  void add_documents_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_documents_urls(::std::string&& value);
  #endif
  void add_documents_urls(const char* value);
  void add_documents_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& documents_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_documents_urls();

  // @@protoc_insertion_point(class_scope:fact_extractor.pb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> documents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> plain_index_documents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> documents_urls_;
  friend struct protobuf_fact_5fextractor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResultSentence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fact_extractor.pb.ResultSentence) */ {
 public:
  ResultSentence();
  virtual ~ResultSentence();

  ResultSentence(const ResultSentence& from);

  inline ResultSentence& operator=(const ResultSentence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultSentence(ResultSentence&& from) noexcept
    : ResultSentence() {
    *this = ::std::move(from);
  }

  inline ResultSentence& operator=(ResultSentence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultSentence& default_instance();

  static inline const ResultSentence* internal_default_instance() {
    return reinterpret_cast<const ResultSentence*>(
               &_ResultSentence_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResultSentence* other);
  friend void swap(ResultSentence& a, ResultSentence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultSentence* New() const PROTOBUF_FINAL { return New(NULL); }

  ResultSentence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResultSentence& from);
  void MergeFrom(const ResultSentence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResultSentence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResultSentence_Confidence Confidence;
  static const Confidence TRASH =
    ResultSentence_Confidence_TRASH;
  static const Confidence LOW =
    ResultSentence_Confidence_LOW;
  static const Confidence HIGH =
    ResultSentence_Confidence_HIGH;
  static inline bool Confidence_IsValid(int value) {
    return ResultSentence_Confidence_IsValid(value);
  }
  static const Confidence Confidence_MIN =
    ResultSentence_Confidence_Confidence_MIN;
  static const Confidence Confidence_MAX =
    ResultSentence_Confidence_Confidence_MAX;
  static const int Confidence_ARRAYSIZE =
    ResultSentence_Confidence_Confidence_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Confidence_descriptor() {
    return ResultSentence_Confidence_descriptor();
  }
  static inline const ::std::string& Confidence_Name(Confidence value) {
    return ResultSentence_Confidence_Name(value);
  }
  static inline bool Confidence_Parse(const ::std::string& name,
      Confidence* value) {
    return ResultSentence_Confidence_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string sentence = 2;
  bool has_sentence() const;
  void clear_sentence();
  static const int kSentenceFieldNumber = 2;
  const ::std::string& sentence() const;
  void set_sentence(const ::std::string& value);
  #if LANG_CXX11
  void set_sentence(::std::string&& value);
  #endif
  void set_sentence(const char* value);
  void set_sentence(const char* value, size_t size);
  ::std::string* mutable_sentence();
  ::std::string* release_sentence();
  void set_allocated_sentence(::std::string* sentence);

  // optional float score = 1;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  float score() const;
  void set_score(float value);

  // optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  ::fact_extractor::pb::ResultSentence_Confidence confidence() const;
  void set_confidence(::fact_extractor::pb::ResultSentence_Confidence value);

  // @@protoc_insertion_point(class_scope:fact_extractor.pb.ResultSentence)
 private:
  void set_has_score();
  void clear_has_score();
  void set_has_sentence();
  void clear_has_sentence();
  void set_has_confidence();
  void clear_has_confidence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sentence_;
  float score_;
  int confidence_;
  friend struct protobuf_fact_5fextractor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fact_extractor.pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fact_extractor.pb.ResultSentence sentences = 2;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 2;
  const ::fact_extractor::pb::ResultSentence& sentences(int index) const;
  ::fact_extractor::pb::ResultSentence* mutable_sentences(int index);
  ::fact_extractor::pb::ResultSentence* add_sentences();
  ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >*
      mutable_sentences();
  const ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >&
      sentences() const;

  // optional int32 doc_index = 1;
  bool has_doc_index() const;
  void clear_doc_index();
  static const int kDocIndexFieldNumber = 1;
  ::google::protobuf::int32 doc_index() const;
  void set_doc_index(::google::protobuf::int32 value);

  // optional float q_score = 3;
  bool has_q_score() const;
  void clear_q_score();
  static const int kQScoreFieldNumber = 3;
  float q_score() const;
  void set_q_score(float value);

  // @@protoc_insertion_point(class_scope:fact_extractor.pb.Response)
 private:
  void set_has_doc_index();
  void clear_has_doc_index();
  void set_has_q_score();
  void clear_has_q_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence > sentences_;
  ::google::protobuf::int32 doc_index_;
  float q_score_;
  friend struct protobuf_fact_5fextractor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// repeated string documents = 1;
inline int Request::documents_size() const {
  return documents_.size();
}
inline void Request::clear_documents() {
  documents_.Clear();
}
inline const ::std::string& Request::documents(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.documents)
  return documents_.Get(index);
}
inline ::std::string* Request::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.documents)
  return documents_.Mutable(index);
}
inline void Request::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.documents)
}
inline void Request::set_documents(int index, const char* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.documents)
}
inline ::std::string* Request::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.documents)
  return documents_.Add();
}
inline void Request::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents)
}
#if LANG_CXX11
inline void Request::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents)
}
#endif
inline void Request::add_documents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.documents)
}
inline void Request::add_documents(const char* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.documents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::documents() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.documents)
  return &documents_;
}

// repeated bytes plain_index_documents = 2;
inline int Request::plain_index_documents_size() const {
  return plain_index_documents_.size();
}
inline void Request::clear_plain_index_documents() {
  plain_index_documents_.Clear();
}
inline const ::std::string& Request::plain_index_documents(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Get(index);
}
inline ::std::string* Request::mutable_plain_index_documents(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Mutable(index);
}
inline void Request::set_plain_index_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.plain_index_documents)
  plain_index_documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_plain_index_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.plain_index_documents)
  plain_index_documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_plain_index_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plain_index_documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.plain_index_documents)
}
inline void Request::set_plain_index_documents(int index, const void* value, size_t size) {
  plain_index_documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.plain_index_documents)
}
inline ::std::string* Request::add_plain_index_documents() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_.Add();
}
inline void Request::add_plain_index_documents(const ::std::string& value) {
  plain_index_documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.plain_index_documents)
}
#if LANG_CXX11
inline void Request::add_plain_index_documents(::std::string&& value) {
  plain_index_documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.plain_index_documents)
}
#endif
inline void Request::add_plain_index_documents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  plain_index_documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.plain_index_documents)
}
inline void Request::add_plain_index_documents(const void* value, size_t size) {
  plain_index_documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.plain_index_documents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::plain_index_documents() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.plain_index_documents)
  return plain_index_documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_plain_index_documents() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.plain_index_documents)
  return &plain_index_documents_;
}

// repeated string documents_urls = 3;
inline int Request::documents_urls_size() const {
  return documents_urls_.size();
}
inline void Request::clear_documents_urls() {
  documents_urls_.Clear();
}
inline const ::std::string& Request::documents_urls(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Get(index);
}
inline ::std::string* Request::mutable_documents_urls(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Mutable(index);
}
inline void Request::set_documents_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents_urls)
  documents_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_documents_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Request.documents_urls)
  documents_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_documents_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.Request.documents_urls)
}
inline void Request::set_documents_urls(int index, const char* value, size_t size) {
  documents_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.Request.documents_urls)
}
inline ::std::string* Request::add_documents_urls() {
  // @@protoc_insertion_point(field_add_mutable:fact_extractor.pb.Request.documents_urls)
  return documents_urls_.Add();
}
inline void Request::add_documents_urls(const ::std::string& value) {
  documents_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents_urls)
}
#if LANG_CXX11
inline void Request::add_documents_urls(::std::string&& value) {
  documents_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Request.documents_urls)
}
#endif
inline void Request::add_documents_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fact_extractor.pb.Request.documents_urls)
}
inline void Request::add_documents_urls(const char* value, size_t size) {
  documents_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fact_extractor.pb.Request.documents_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::documents_urls() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Request.documents_urls)
  return documents_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_documents_urls() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Request.documents_urls)
  return &documents_urls_;
}

// -------------------------------------------------------------------

// ResultSentence

// optional float score = 1;
inline bool ResultSentence::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultSentence::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultSentence::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultSentence::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float ResultSentence::score() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.score)
  return score_;
}
inline void ResultSentence::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.score)
}

// optional string sentence = 2;
inline bool ResultSentence::has_sentence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultSentence::set_has_sentence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultSentence::clear_has_sentence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultSentence::clear_sentence() {
  sentence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sentence();
}
inline const ::std::string& ResultSentence::sentence() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.sentence)
  return sentence_.GetNoArena();
}
inline void ResultSentence::set_sentence(const ::std::string& value) {
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.sentence)
}
#if LANG_CXX11
inline void ResultSentence::set_sentence(::std::string&& value) {
  set_has_sentence();
  sentence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fact_extractor.pb.ResultSentence.sentence)
}
#endif
inline void ResultSentence::set_sentence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fact_extractor.pb.ResultSentence.sentence)
}
inline void ResultSentence::set_sentence(const char* value, size_t size) {
  set_has_sentence();
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fact_extractor.pb.ResultSentence.sentence)
}
inline ::std::string* ResultSentence::mutable_sentence() {
  set_has_sentence();
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.ResultSentence.sentence)
  return sentence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultSentence::release_sentence() {
  // @@protoc_insertion_point(field_release:fact_extractor.pb.ResultSentence.sentence)
  clear_has_sentence();
  return sentence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultSentence::set_allocated_sentence(::std::string* sentence) {
  if (sentence != NULL) {
    set_has_sentence();
  } else {
    clear_has_sentence();
  }
  sentence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sentence);
  // @@protoc_insertion_point(field_set_allocated:fact_extractor.pb.ResultSentence.sentence)
}

// optional .fact_extractor.pb.ResultSentence.Confidence confidence = 3;
inline bool ResultSentence::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResultSentence::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResultSentence::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResultSentence::clear_confidence() {
  confidence_ = 20;
  clear_has_confidence();
}
inline ::fact_extractor::pb::ResultSentence_Confidence ResultSentence::confidence() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.ResultSentence.confidence)
  return static_cast< ::fact_extractor::pb::ResultSentence_Confidence >(confidence_);
}
inline void ResultSentence::set_confidence(::fact_extractor::pb::ResultSentence_Confidence value) {
  assert(::fact_extractor::pb::ResultSentence_Confidence_IsValid(value));
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.ResultSentence.confidence)
}

// -------------------------------------------------------------------

// Response

// optional int32 doc_index = 1;
inline bool Response::has_doc_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_doc_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_doc_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_doc_index() {
  doc_index_ = 0;
  clear_has_doc_index();
}
inline ::google::protobuf::int32 Response::doc_index() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.doc_index)
  return doc_index_;
}
inline void Response::set_doc_index(::google::protobuf::int32 value) {
  set_has_doc_index();
  doc_index_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Response.doc_index)
}

// repeated .fact_extractor.pb.ResultSentence sentences = 2;
inline int Response::sentences_size() const {
  return sentences_.size();
}
inline void Response::clear_sentences() {
  sentences_.Clear();
}
inline const ::fact_extractor::pb::ResultSentence& Response::sentences(int index) const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.sentences)
  return sentences_.Get(index);
}
inline ::fact_extractor::pb::ResultSentence* Response::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:fact_extractor.pb.Response.sentences)
  return sentences_.Mutable(index);
}
inline ::fact_extractor::pb::ResultSentence* Response::add_sentences() {
  // @@protoc_insertion_point(field_add:fact_extractor.pb.Response.sentences)
  return sentences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >*
Response::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:fact_extractor.pb.Response.sentences)
  return &sentences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fact_extractor::pb::ResultSentence >&
Response::sentences() const {
  // @@protoc_insertion_point(field_list:fact_extractor.pb.Response.sentences)
  return sentences_;
}

// optional float q_score = 3;
inline bool Response::has_q_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_q_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_q_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_q_score() {
  q_score_ = 0;
  clear_has_q_score();
}
inline float Response::q_score() const {
  // @@protoc_insertion_point(field_get:fact_extractor.pb.Response.q_score)
  return q_score_;
}
inline void Response::set_q_score(float value) {
  set_has_q_score();
  q_score_ = value;
  // @@protoc_insertion_point(field_set:fact_extractor.pb.Response.q_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace fact_extractor

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fact_extractor::pb::ResultSentence_Confidence> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fact_extractor::pb::ResultSentence_Confidence>() {
  return ::fact_extractor::pb::ResultSentence_Confidence_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fact_5fextractor_2eproto__INCLUDED
