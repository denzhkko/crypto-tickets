// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factoid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "factoid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace factoid {
namespace pb {
class FactDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Fact>
     _instance;
} _Fact_default_instance_;
class FactsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Facts>
     _instance;
} _Facts_default_instance_;

namespace protobuf_factoid_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fact, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fact, score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Facts, facts_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Fact)},
  { 9, 15, sizeof(Facts)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Fact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Facts_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "factoid.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Fact_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Fact_default_instance_);_Facts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Facts_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfactoid.proto\022\nfactoid.pb\"$\n\004Fact\022\r\n\005l"
      "abel\030\001 \001(\t\022\r\n\005score\030\002 \001(\002\"(\n\005Facts\022\037\n\005fa"
      "cts\030\001 \003(\0132\020.factoid.pb.Fact"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "factoid.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_factoid_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fact::kLabelFieldNumber;
const int Fact::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fact::Fact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_factoid_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:factoid.pb.Fact)
}
Fact::Fact(const Fact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:factoid.pb.Fact)
}

void Fact::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

Fact::~Fact() {
  // @@protoc_insertion_point(destructor:factoid.pb.Fact)
  SharedDtor();
}

void Fact::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fact::descriptor() {
  protobuf_factoid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_factoid_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fact& Fact::default_instance() {
  protobuf_factoid_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fact* Fact::New(::google::protobuf::Arena* arena) const {
  Fact* n = new Fact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fact::Clear() {
// @@protoc_insertion_point(message_clear_start:factoid.pb.Fact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_label()) {
    GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*label_.UnsafeRawStringPointer())->clear();
  }
  score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factoid.pb.Fact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "factoid.pb.Fact.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factoid.pb.Fact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factoid.pb.Fact)
  return false;
#undef DO_
}

void Fact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factoid.pb.Fact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "factoid.pb.Fact.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factoid.pb.Fact)
}

::google::protobuf::uint8* Fact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:factoid.pb.Fact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "factoid.pb.Fact.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factoid.pb.Fact)
  return target;
}

size_t Fact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:factoid.pb.Fact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:factoid.pb.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  const Fact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:factoid.pb.Fact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:factoid.pb.Fact)
    MergeFrom(*source);
  }
}

void Fact::MergeFrom(const Fact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:factoid.pb.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:factoid.pb.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fact::CopyFrom(const Fact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:factoid.pb.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fact::IsInitialized() const {
  return true;
}

void Fact::Swap(Fact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fact::InternalSwap(Fact* other) {
  using std::swap;
  label_.Swap(&other->label_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fact::GetMetadata() const {
  protobuf_factoid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_factoid_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fact

// optional string label = 1;
bool Fact::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fact::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Fact::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fact::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Fact::label() const {
  // @@protoc_insertion_point(field_get:factoid.pb.Fact.label)
  return label_.GetNoArena();
}
void Fact::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:factoid.pb.Fact.label)
}
#if LANG_CXX11
void Fact::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:factoid.pb.Fact.label)
}
#endif
void Fact::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:factoid.pb.Fact.label)
}
void Fact::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:factoid.pb.Fact.label)
}
::std::string* Fact::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:factoid.pb.Fact.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Fact::release_label() {
  // @@protoc_insertion_point(field_release:factoid.pb.Fact.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Fact::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:factoid.pb.Fact.label)
}

// optional float score = 2;
bool Fact::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fact::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void Fact::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fact::clear_score() {
  score_ = 0;
  clear_has_score();
}
float Fact::score() const {
  // @@protoc_insertion_point(field_get:factoid.pb.Fact.score)
  return score_;
}
void Fact::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:factoid.pb.Fact.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facts::kFactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facts::Facts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_factoid_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:factoid.pb.Facts)
}
Facts::Facts(const Facts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      facts_(from.facts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:factoid.pb.Facts)
}

void Facts::SharedCtor() {
  _cached_size_ = 0;
}

Facts::~Facts() {
  // @@protoc_insertion_point(destructor:factoid.pb.Facts)
  SharedDtor();
}

void Facts::SharedDtor() {
}

void Facts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Facts::descriptor() {
  protobuf_factoid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_factoid_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Facts& Facts::default_instance() {
  protobuf_factoid_2eproto::InitDefaults();
  return *internal_default_instance();
}

Facts* Facts::New(::google::protobuf::Arena* arena) const {
  Facts* n = new Facts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Facts::Clear() {
// @@protoc_insertion_point(message_clear_start:factoid.pb.Facts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Facts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factoid.pb.Facts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .factoid.pb.Fact facts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factoid.pb.Facts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factoid.pb.Facts)
  return false;
#undef DO_
}

void Facts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factoid.pb.Facts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .factoid.pb.Fact facts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factoid.pb.Facts)
}

::google::protobuf::uint8* Facts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:factoid.pb.Facts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .factoid.pb.Fact facts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->facts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->facts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factoid.pb.Facts)
  return target;
}

size_t Facts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:factoid.pb.Facts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .factoid.pb.Fact facts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->facts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Facts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:factoid.pb.Facts)
  GOOGLE_DCHECK_NE(&from, this);
  const Facts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Facts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:factoid.pb.Facts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:factoid.pb.Facts)
    MergeFrom(*source);
  }
}

void Facts::MergeFrom(const Facts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:factoid.pb.Facts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facts_.MergeFrom(from.facts_);
}

void Facts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:factoid.pb.Facts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facts::CopyFrom(const Facts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:factoid.pb.Facts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facts::IsInitialized() const {
  return true;
}

void Facts::Swap(Facts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Facts::InternalSwap(Facts* other) {
  using std::swap;
  facts_.InternalSwap(&other->facts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Facts::GetMetadata() const {
  protobuf_factoid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_factoid_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Facts

// repeated .factoid.pb.Fact facts = 1;
int Facts::facts_size() const {
  return facts_.size();
}
void Facts::clear_facts() {
  facts_.Clear();
}
const ::factoid::pb::Fact& Facts::facts(int index) const {
  // @@protoc_insertion_point(field_get:factoid.pb.Facts.facts)
  return facts_.Get(index);
}
::factoid::pb::Fact* Facts::mutable_facts(int index) {
  // @@protoc_insertion_point(field_mutable:factoid.pb.Facts.facts)
  return facts_.Mutable(index);
}
::factoid::pb::Fact* Facts::add_facts() {
  // @@protoc_insertion_point(field_add:factoid.pb.Facts.facts)
  return facts_.Add();
}
::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >*
Facts::mutable_facts() {
  // @@protoc_insertion_point(field_mutable_list:factoid.pb.Facts.facts)
  return &facts_;
}
const ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >&
Facts::facts() const {
  // @@protoc_insertion_point(field_list:factoid.pb.Facts.facts)
  return facts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace factoid

// @@protoc_insertion_point(global_scope)
