// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factoid.proto

#ifndef PROTOBUF_factoid_2eproto__INCLUDED
#define PROTOBUF_factoid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace factoid {
namespace pb {
class Fact;
class FactDefaultTypeInternal;
extern FactDefaultTypeInternal _Fact_default_instance_;
class Facts;
class FactsDefaultTypeInternal;
extern FactsDefaultTypeInternal _Facts_default_instance_;
}  // namespace pb
}  // namespace factoid

namespace factoid {
namespace pb {

namespace protobuf_factoid_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_factoid_2eproto

// ===================================================================

class Fact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:factoid.pb.Fact) */ {
 public:
  Fact();
  virtual ~Fact();

  Fact(const Fact& from);

  inline Fact& operator=(const Fact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fact(Fact&& from) noexcept
    : Fact() {
    *this = ::std::move(from);
  }

  inline Fact& operator=(Fact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fact& default_instance();

  static inline const Fact* internal_default_instance() {
    return reinterpret_cast<const Fact*>(
               &_Fact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Fact* other);
  friend void swap(Fact& a, Fact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fact* New() const PROTOBUF_FINAL { return New(NULL); }

  Fact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Fact& from);
  void MergeFrom(const Fact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Fact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional float score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:factoid.pb.Fact)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_score();
  void clear_has_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  float score_;
  friend struct protobuf_factoid_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Facts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:factoid.pb.Facts) */ {
 public:
  Facts();
  virtual ~Facts();

  Facts(const Facts& from);

  inline Facts& operator=(const Facts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Facts(Facts&& from) noexcept
    : Facts() {
    *this = ::std::move(from);
  }

  inline Facts& operator=(Facts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Facts& default_instance();

  static inline const Facts* internal_default_instance() {
    return reinterpret_cast<const Facts*>(
               &_Facts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Facts* other);
  friend void swap(Facts& a, Facts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Facts* New() const PROTOBUF_FINAL { return New(NULL); }

  Facts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Facts& from);
  void MergeFrom(const Facts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Facts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .factoid.pb.Fact facts = 1;
  int facts_size() const;
  void clear_facts();
  static const int kFactsFieldNumber = 1;
  const ::factoid::pb::Fact& facts(int index) const;
  ::factoid::pb::Fact* mutable_facts(int index);
  ::factoid::pb::Fact* add_facts();
  ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >*
      mutable_facts();
  const ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >&
      facts() const;

  // @@protoc_insertion_point(class_scope:factoid.pb.Facts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact > facts_;
  friend struct protobuf_factoid_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fact

// optional string label = 1;
inline bool Fact::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fact::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fact::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fact::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Fact::label() const {
  // @@protoc_insertion_point(field_get:factoid.pb.Fact.label)
  return label_.GetNoArena();
}
inline void Fact::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:factoid.pb.Fact.label)
}
#if LANG_CXX11
inline void Fact::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:factoid.pb.Fact.label)
}
#endif
inline void Fact::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:factoid.pb.Fact.label)
}
inline void Fact::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:factoid.pb.Fact.label)
}
inline ::std::string* Fact::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:factoid.pb.Fact.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fact::release_label() {
  // @@protoc_insertion_point(field_release:factoid.pb.Fact.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fact::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:factoid.pb.Fact.label)
}

// optional float score = 2;
inline bool Fact::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fact::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fact::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fact::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float Fact::score() const {
  // @@protoc_insertion_point(field_get:factoid.pb.Fact.score)
  return score_;
}
inline void Fact::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:factoid.pb.Fact.score)
}

// -------------------------------------------------------------------

// Facts

// repeated .factoid.pb.Fact facts = 1;
inline int Facts::facts_size() const {
  return facts_.size();
}
inline void Facts::clear_facts() {
  facts_.Clear();
}
inline const ::factoid::pb::Fact& Facts::facts(int index) const {
  // @@protoc_insertion_point(field_get:factoid.pb.Facts.facts)
  return facts_.Get(index);
}
inline ::factoid::pb::Fact* Facts::mutable_facts(int index) {
  // @@protoc_insertion_point(field_mutable:factoid.pb.Facts.facts)
  return facts_.Mutable(index);
}
inline ::factoid::pb::Fact* Facts::add_facts() {
  // @@protoc_insertion_point(field_add:factoid.pb.Facts.facts)
  return facts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >*
Facts::mutable_facts() {
  // @@protoc_insertion_point(field_mutable_list:factoid.pb.Facts.facts)
  return &facts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::factoid::pb::Fact >&
Facts::facts() const {
  // @@protoc_insertion_point(field_list:factoid.pb.Facts.facts)
  return facts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace factoid

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_factoid_2eproto__INCLUDED
