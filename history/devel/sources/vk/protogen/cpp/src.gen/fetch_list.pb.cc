// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetch_list.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fetch_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class SplitFlagsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SplitFlags>
     _instance;
} _SplitFlags_default_instance_;
class FetchUrlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FetchUrl>
     _instance;
} _FetchUrl_default_instance_;
class BaseSplitInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BaseSplitInfo>
     _instance;
} _BaseSplitInfo_default_instance_;
class YouTubeWebSearchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YouTubeWebSearch>
     _instance;
} _YouTubeWebSearch_default_instance_;
class YouTubeCommonDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YouTubeCommon>
     _instance;
} _YouTubeCommon_default_instance_;
class YouTubeIdUrlMappingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<YouTubeIdUrlMapping>
     _instance;
} _YouTubeIdUrlMapping_default_instance_;
class OkApiMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OkApiMessage>
     _instance;
} _OkApiMessage_default_instance_;
class OkIdToUrlMappingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OkIdToUrlMapping>
     _instance;
} _OkIdToUrlMapping_default_instance_;
class CrawlHistoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrawlHistory>
     _instance;
} _CrawlHistory_default_instance_;
class FetchResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FetchResult>
     _instance;
} _FetchResult_default_instance_;
class FetchBanResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FetchBanResult>
     _instance;
} _FetchBanResult_default_instance_;
class PublicationMarkupRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PublicationMarkupRecord>
     _instance;
} _PublicationMarkupRecord_default_instance_;
class PublicationMarkupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PublicationMarkup>
     _instance;
} _PublicationMarkup_default_instance_;

namespace protobuf_fetch_5flist_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFlags, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFlags, splita_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFlags, splitb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitFlags, splitc_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, lastmodified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, etag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, targetbases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, attemptstofetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, meetdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, mindatetofetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, minutestoredownload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, redirects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, publicationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, fetchertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, splitflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, originalurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, forumtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, mainpriority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, isnew_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, basesplitinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, referer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, schedulername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, schedulerpriority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, schedulertimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, batchtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, schedulerjobendtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, ispostscheduled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, batchgeneratortimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, parsertimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchUrl, discoverybatchingtimestamp_),
  0,
  7,
  6,
  1,
  ~0u,
  8,
  9,
  10,
  11,
  ~0u,
  13,
  12,
  5,
  2,
  14,
  15,
  17,
  ~0u,
  3,
  4,
  16,
  19,
  20,
  21,
  18,
  22,
  23,
  24,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseSplitInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseSplitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseSplitInfo, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseSplitInfo, splitflags_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeWebSearch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeWebSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeWebSearch, originalurl_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeCommon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeCommon, idurlmapping_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeIdUrlMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeIdUrlMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeIdUrlMapping, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouTubeIdUrlMapping, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkApiMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkApiMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkApiMessage, idtourlmapping_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkIdToUrlMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkIdToUrlMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkIdToUrlMapping, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OkIdToUrlMapping, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlHistory, firstcrawlts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlHistory, changesnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrawlHistory, lastchangets_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, crawlstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, attemptstofetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, mindatetofetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, redirects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, fetchertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchResult, isrotten_),
  0,
  2,
  1,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, sourceurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, fetchstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, crawlstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, redirects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchBanResult, httpstatuscode_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, parsed_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkupRecord, content_type_),
  3,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicationMarkup, records_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(SplitFlags)},
  { 11, 44, sizeof(FetchUrl)},
  { 72, 79, sizeof(BaseSplitInfo)},
  { 81, 87, sizeof(YouTubeWebSearch)},
  { 88, 94, sizeof(YouTubeCommon)},
  { 95, 102, sizeof(YouTubeIdUrlMapping)},
  { 104, 110, sizeof(OkApiMessage)},
  { 111, 118, sizeof(OkIdToUrlMapping)},
  { 120, 128, sizeof(CrawlHistory)},
  { 131, 142, sizeof(FetchResult)},
  { 148, 158, sizeof(FetchBanResult)},
  { 163, 172, sizeof(PublicationMarkupRecord)},
  { 176, 182, sizeof(PublicationMarkup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SplitFlags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseSplitInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YouTubeWebSearch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YouTubeCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YouTubeIdUrlMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OkApiMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OkIdToUrlMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrawlHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FetchBanResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublicationMarkupRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublicationMarkup_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fetch_list.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_silicon_5fdata_2eproto::InitDefaults();
  _SplitFlags_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SplitFlags_default_instance_);_FetchUrl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FetchUrl_default_instance_);_BaseSplitInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BaseSplitInfo_default_instance_);_YouTubeWebSearch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YouTubeWebSearch_default_instance_);_YouTubeCommon_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YouTubeCommon_default_instance_);_YouTubeIdUrlMapping_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_YouTubeIdUrlMapping_default_instance_);_OkApiMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OkApiMessage_default_instance_);_OkIdToUrlMapping_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OkIdToUrlMapping_default_instance_);_CrawlHistory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrawlHistory_default_instance_);_FetchResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FetchResult_default_instance_);_FetchBanResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FetchBanResult_default_instance_);_PublicationMarkupRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PublicationMarkupRecord_default_instance_);_PublicationMarkup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PublicationMarkup_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1000, 14, false, false,
    &::ru::mail::go::webbase::blobs::BatchingResult_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1001, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1002, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1003, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1004, 14, false, false,
    &::ru::mail::go::webbase::blobs::VideoBanSource_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1005, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1006, 11, false, false,
    ::ru::mail::go::webbase::blobs::YouTubeWebSearch::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1007, 11, false, false,
    ::ru::mail::go::webbase::blobs::YouTubeCommon::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1008, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1009, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1010, 11, false, false,
    ::ru::mail::go::webbase::blobs::CrawlHistory::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1011, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1012, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1013, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1014, 11, true, false,
    ::ru::mail::go::webbase::blobs::SiliconFetchUrl::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1015, 11, false, false,
    ::ru::mail::go::webbase::blobs::OkApiMessage::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance(),
    1016, 9, false, false);
  _FetchUrl_default_instance_._instance.get_mutable()->splitflags_ = const_cast< ::ru::mail::go::webbase::blobs::SplitFlags*>(
      ::ru::mail::go::webbase::blobs::SplitFlags::internal_default_instance());
  _BaseSplitInfo_default_instance_._instance.get_mutable()->splitflags_ = const_cast< ::ru::mail::go::webbase::blobs::SplitFlags*>(
      ::ru::mail::go::webbase::blobs::SplitFlags::internal_default_instance());
  _FetchResult_default_instance_._instance.get_mutable()->crawlstatus_ = const_cast< ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      ::ru::mail::go::webbase::blobs::CrawlDetails::internal_default_instance());
  _FetchBanResult_default_instance_._instance.get_mutable()->crawlstatus_ = const_cast< ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      ::ru::mail::go::webbase::blobs::CrawlDetails::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020fetch_list.proto\022\030ru.mail.go.webbase.b"
      "lobs\032\021crawl_state.proto\032\024document_enums."
      "proto\032\022silicon_data.proto\"Q\n\nSplitFlags\022"
      "\025\n\006SplitA\030\001 \001(\010:\005false\022\025\n\006SplitB\030\002 \001(\010:\005"
      "false\022\025\n\006SplitC\030\003 \001(\010:\005false\"\341\021\n\010FetchUr"
      "l\022\013\n\003url\030\001 \002(\t\022\014\n\004flag\030\002 \001(\005\022\024\n\014lastModi"
      "fied\030\003 \001(\003\022\014\n\004eTag\030\004 \001(\t\022A\n\013targetBases\030"
      "\005 \003(\0162,.ru.mail.go.webbase.blobs.FetchUr"
      "l.Fastbases\022\027\n\017attemptsToFetch\030\006 \001(\005\022\020\n\010"
      "meetDate\030\007 \001(\003\022\026\n\016minDateToFetch\030\010 \001(\003\022\033"
      "\n\023minutesToRedownload\030\t \001(\005\022\021\n\tredirects"
      "\030\n \003(\t\022\027\n\017publicationDate\030\013 \001(\003\022:\n\013fetch"
      "erType\030\014 \001(\0162%.ru.mail.go.webbase.blobs."
      "FetcherType\0228\n\nsplitFlags\030\r \001(\0132$.ru.mai"
      "l.go.webbase.blobs.SplitFlags\022\023\n\013origina"
      "lUrl\030\016 \001(\t\0226\n\tforumType\030\017 \001(\0162#.ru.mail."
      "go.webbase.blobs.ForumType\022\024\n\014mainPriori"
      "ty\030\020 \001(\005\022\r\n\005isNew\030\021 \001(\010\022>\n\rbaseSplitInfo"
      "\030\022 \003(\0132\'.ru.mail.go.webbase.blobs.BaseSp"
      "litInfo\022\017\n\007referer\030\023 \001(\t\022\025\n\rschedulerNam"
      "e\030\024 \001(\t\022\031\n\021schedulerPriority\030\025 \001(\005\022\032\n\022sc"
      "hedulerTimestamp\030\026 \001(\003\022\026\n\016batchTimestamp"
      "\030\027 \001(\003\022 \n\030schedulerJobEndTimestamp\030\030 \001(\003"
      "\022\027\n\017isPostscheduled\030\031 \001(\010\022\037\n\027batchGenera"
      "torTimestamp\030\032 \001(\003\022\027\n\017parserTimestamp\030\033 "
      "\001(\003\022\"\n\032discoveryBatchingTimestamp\030\034 \001(\003\""
      "\205\001\n\tFastbases\022\r\n\tINFO_BASE\020\000\022\016\n\nNAVIG_BA"
      "SE\020\001\022\020\n\014SITEMAP_BASE\020\002\022\014\n\010BAN_BASE\020\003\022\r\n\t"
      "NAIL_BASE\020\004\022\025\n\021INTERLEAVING_BASE\020\005\022\023\n\017BE"
      "HAVIORAL_BASE\020\006*\t\010\350\007\020\200\200\200\200\0022e\n\016batchingRe"
      "sult\022\".ru.mail.go.webbase.blobs.FetchUrl"
      "\030\350\007 \001(\0162(.ru.mail.go.webbase.blobs.Batch"
      "ingResult27\n\nbatchingTs\022\".ru.mail.go.web"
      "base.blobs.FetchUrl\030\351\007 \001(\00325\n\010checkSum\022\""
      ".ru.mail.go.webbase.blobs.FetchUrl\030\352\007 \001("
      "\00327\n\ncheckSumTs\022\".ru.mail.go.webbase.blo"
      "bs.FetchUrl\030\353\007 \001(\0032e\n\016videoBanSource\022\".r"
      "u.mail.go.webbase.blobs.FetchUrl\030\354\007 \001(\0162"
      "(.ru.mail.go.webbase.blobs.VideoBanSourc"
      "e2B\n\025youtubeForVideoSearch\022\".ru.mail.go."
      "webbase.blobs.FetchUrl\030\355\007 \001(\0102i\n\020youTube"
      "WebSearch\022\".ru.mail.go.webbase.blobs.Fet"
      "chUrl\030\356\007 \001(\0132*.ru.mail.go.webbase.blobs."
      "YouTubeWebSearch2c\n\ryouTubeCommon\022\".ru.m"
      "ail.go.webbase.blobs.FetchUrl\030\357\007 \001(\0132\'.r"
      "u.mail.go.webbase.blobs.YouTubeCommon28\n"
      "\013microbaseID\022\".ru.mail.go.webbase.blobs."
      "FetchUrl\030\360\007 \001(\00525\n\010routeKey\022\".ru.mail.go"
      ".webbase.blobs.FetchUrl\030\361\007 \001(\t2a\n\014crawlH"
      "istory\022\".ru.mail.go.webbase.blobs.FetchU"
      "rl\030\362\007 \001(\0132&.ru.mail.go.webbase.blobs.Cra"
      "wlHistory28\n\013releaseDate\022\".ru.mail.go.we"
      "bbase.blobs.FetchUrl\030\363\007 \001(\00322\n\005depth\022\".r"
      "u.mail.go.webbase.blobs.FetchUrl\030\364\007 \001(\0052"
      "6\n\tsourceUrl\022\".ru.mail.go.webbase.blobs."
      "FetchUrl\030\365\007 \001(\t2c\n\013siliconUrls\022\".ru.mail"
      ".go.webbase.blobs.FetchUrl\030\366\007 \003(\0132).ru.m"
      "ail.go.webbase.blobs.SiliconFetchUrl2Z\n\005"
      "okApi\022\".ru.mail.go.webbase.blobs.FetchUr"
      "l\030\367\007 \001(\0132&.ru.mail.go.webbase.blobs.OkAp"
      "iMessage26\n\tbatchPool\022\".ru.mail.go.webba"
      "se.blobs.FetchUrl\030\370\007 \001(\t\"\205\001\n\rBaseSplitIn"
      "fo\022:\n\004base\030\001 \002(\0162,.ru.mail.go.webbase.bl"
      "obs.FetchUrl.Fastbases\0228\n\nsplitFlags\030\002 \001"
      "(\0132$.ru.mail.go.webbase.blobs.SplitFlags"
      "\"\'\n\020YouTubeWebSearch\022\023\n\013originalUrl\030\001 \001("
      "\t\"T\n\rYouTubeCommon\022C\n\014idUrlMapping\030\001 \003(\013"
      "2-.ru.mail.go.webbase.blobs.YouTubeIdUrl"
      "Mapping\".\n\023YouTubeIdUrlMapping\022\n\n\002id\030\001 \002"
      "(\t\022\013\n\003url\030\002 \002(\t\"R\n\014OkApiMessage\022B\n\016idToU"
      "rlMapping\030\001 \003(\0132*.ru.mail.go.webbase.blo"
      "bs.OkIdToUrlMapping\"+\n\020OkIdToUrlMapping\022"
      "\n\n\002id\030\001 \002(\003\022\013\n\003url\030\002 \002(\t\"Q\n\014CrawlHistory"
      "\022\024\n\014firstCrawlTs\030\001 \002(\003\022\025\n\rchangesNumber\030"
      "\002 \002(\005\022\024\n\014lastChangeTs\030\003 \002(\003\"\343\001\n\013FetchRes"
      "ult\022;\n\013crawlStatus\030\001 \001(\0132&.ru.mail.go.we"
      "bbase.blobs.CrawlDetails\022\027\n\017attemptsToFe"
      "tch\030\002 \001(\005\022\026\n\016minDateToFetch\030\003 \001(\003\022\021\n\tred"
      "irects\030\004 \003(\t\022:\n\013fetcherType\030\005 \001(\0162%.ru.m"
      "ail.go.webbase.blobs.FetcherType\022\027\n\010isRo"
      "tten\030\006 \001(\010:\005false\"\240\001\n\016FetchBanResult\022\021\n\t"
      "sourceUrl\030\001 \002(\t\022\023\n\013fetchStatus\030\002 \001(\014\022;\n\013"
      "crawlStatus\030\003 \001(\0132&.ru.mail.go.webbase.b"
      "lobs.CrawlDetails\022\021\n\tredirects\030\004 \003(\t\022\026\n\016"
      "httpStatusCode\030\005 \001(\005\"\206\003\n\027PublicationMark"
      "upRecord\022H\n\006source\030\001 \002(\01628.ru.mail.go.we"
      "bbase.blobs.PublicationMarkupRecord.Sour"
      "ce\022\r\n\005value\030\002 \002(\t\022\023\n\013parsed_date\030\003 \002(\003\022\024"
      "\n\014content_type\030\004 \001(\t\"\346\001\n\006Source\022\026\n\022ya_ov"
      "s_upload_date\020\000\022\027\n\023meta_date_published\020\001"
      "\022\024\n\020meta_upload_date\020\002\022\027\n\023span_date_publ"
      "ished\020\003\022\024\n\020span_upload_date\020\004\022\031\n\025script_"
      "date_published\020\005\022\032\n\026article_published_ti"
      "me\020\006\022\027\n\023time_date_published\020\007\022\026\n\022div_dat"
      "e_published\020\010\"W\n\021PublicationMarkup\022B\n\007re"
      "cords\030\001 \003(\01321.ru.mail.go.webbase.blobs.P"
      "ublicationMarkupRecord*N\n\013FetcherType\022\020\n"
      "\014FAST_FETCHER\020\000\022\020\n\014DARK_FETCHER\020\001\022\033\n\027DAR"
      "K_AFTER_FAST_FETCHER\020\002*b\n\016BatchingResult"
      "\022\025\n\021not_needed_result\020\000\022\022\n\016skipped_resul"
      "t\020\001\022\021\n\rrotten_result\020\002\022\022\n\016batched_result"
      "\020\003*F\n\016VideoBanSource\022\027\n\023from_dead_video_"
      "ban\020\000\022\033\n\027from_dead_video_checker\020\001B\013B\tFe"
      "tchList"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fetch_list.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_silicon_5fdata_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fetch_5flist_2eproto

const ::google::protobuf::EnumDescriptor* FetchUrl_Fastbases_descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_enum_descriptors[0];
}
bool FetchUrl_Fastbases_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FetchUrl_Fastbases FetchUrl::INFO_BASE;
const FetchUrl_Fastbases FetchUrl::NAVIG_BASE;
const FetchUrl_Fastbases FetchUrl::SITEMAP_BASE;
const FetchUrl_Fastbases FetchUrl::BAN_BASE;
const FetchUrl_Fastbases FetchUrl::NAIL_BASE;
const FetchUrl_Fastbases FetchUrl::INTERLEAVING_BASE;
const FetchUrl_Fastbases FetchUrl::BEHAVIORAL_BASE;
const FetchUrl_Fastbases FetchUrl::Fastbases_MIN;
const FetchUrl_Fastbases FetchUrl::Fastbases_MAX;
const int FetchUrl::Fastbases_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublicationMarkupRecord_Source_descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_enum_descriptors[1];
}
bool PublicationMarkupRecord_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublicationMarkupRecord_Source PublicationMarkupRecord::ya_ovs_upload_date;
const PublicationMarkupRecord_Source PublicationMarkupRecord::meta_date_published;
const PublicationMarkupRecord_Source PublicationMarkupRecord::meta_upload_date;
const PublicationMarkupRecord_Source PublicationMarkupRecord::span_date_published;
const PublicationMarkupRecord_Source PublicationMarkupRecord::span_upload_date;
const PublicationMarkupRecord_Source PublicationMarkupRecord::script_date_published;
const PublicationMarkupRecord_Source PublicationMarkupRecord::article_published_time;
const PublicationMarkupRecord_Source PublicationMarkupRecord::time_date_published;
const PublicationMarkupRecord_Source PublicationMarkupRecord::div_date_published;
const PublicationMarkupRecord_Source PublicationMarkupRecord::Source_MIN;
const PublicationMarkupRecord_Source PublicationMarkupRecord::Source_MAX;
const int PublicationMarkupRecord::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FetcherType_descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_enum_descriptors[2];
}
bool FetcherType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BatchingResult_descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_enum_descriptors[3];
}
bool BatchingResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoBanSource_descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_enum_descriptors[4];
}
bool VideoBanSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitFlags::kSplitAFieldNumber;
const int SplitFlags::kSplitBFieldNumber;
const int SplitFlags::kSplitCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitFlags::SplitFlags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.SplitFlags)
}
SplitFlags::SplitFlags(const SplitFlags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&splita_, &from.splita_,
    static_cast<size_t>(reinterpret_cast<char*>(&splitc_) -
    reinterpret_cast<char*>(&splita_)) + sizeof(splitc_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.SplitFlags)
}

void SplitFlags::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&splita_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&splitc_) -
      reinterpret_cast<char*>(&splita_)) + sizeof(splitc_));
}

SplitFlags::~SplitFlags() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.SplitFlags)
  SharedDtor();
}

void SplitFlags::SharedDtor() {
}

void SplitFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitFlags::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitFlags& SplitFlags::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

SplitFlags* SplitFlags::New(::google::protobuf::Arena* arena) const {
  SplitFlags* n = new SplitFlags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.SplitFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&splita_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&splitc_) -
        reinterpret_cast<char*>(&splita_)) + sizeof(splitc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SplitFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.SplitFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool SplitA = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_splita();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &splita_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool SplitB = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_splitb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &splitb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool SplitC = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_splitc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &splitc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.SplitFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.SplitFlags)
  return false;
#undef DO_
}

void SplitFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.SplitFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool SplitA = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->splita(), output);
  }

  // optional bool SplitB = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->splitb(), output);
  }

  // optional bool SplitC = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->splitc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.SplitFlags)
}

::google::protobuf::uint8* SplitFlags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.SplitFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool SplitA = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->splita(), target);
  }

  // optional bool SplitB = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->splitb(), target);
  }

  // optional bool SplitC = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->splitc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.SplitFlags)
  return target;
}

size_t SplitFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.SplitFlags)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool SplitA = 1 [default = false];
    if (has_splita()) {
      total_size += 1 + 1;
    }

    // optional bool SplitB = 2 [default = false];
    if (has_splitb()) {
      total_size += 1 + 1;
    }

    // optional bool SplitC = 3 [default = false];
    if (has_splitc()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitFlags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.SplitFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitFlags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitFlags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.SplitFlags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.SplitFlags)
    MergeFrom(*source);
  }
}

void SplitFlags::MergeFrom(const SplitFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.SplitFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      splita_ = from.splita_;
    }
    if (cached_has_bits & 0x00000002u) {
      splitb_ = from.splitb_;
    }
    if (cached_has_bits & 0x00000004u) {
      splitc_ = from.splitc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SplitFlags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.SplitFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitFlags::CopyFrom(const SplitFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.SplitFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitFlags::IsInitialized() const {
  return true;
}

void SplitFlags::Swap(SplitFlags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitFlags::InternalSwap(SplitFlags* other) {
  using std::swap;
  swap(splita_, other->splita_);
  swap(splitb_, other->splitb_);
  swap(splitc_, other->splitc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitFlags::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitFlags

// optional bool SplitA = 1 [default = false];
bool SplitFlags::has_splita() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitFlags::set_has_splita() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitFlags::clear_has_splita() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitFlags::clear_splita() {
  splita_ = false;
  clear_has_splita();
}
bool SplitFlags::splita() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SplitFlags.SplitA)
  return splita_;
}
void SplitFlags::set_splita(bool value) {
  set_has_splita();
  splita_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SplitFlags.SplitA)
}

// optional bool SplitB = 2 [default = false];
bool SplitFlags::has_splitb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitFlags::set_has_splitb() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitFlags::clear_has_splitb() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitFlags::clear_splitb() {
  splitb_ = false;
  clear_has_splitb();
}
bool SplitFlags::splitb() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SplitFlags.SplitB)
  return splitb_;
}
void SplitFlags::set_splitb(bool value) {
  set_has_splitb();
  splitb_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SplitFlags.SplitB)
}

// optional bool SplitC = 3 [default = false];
bool SplitFlags::has_splitc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SplitFlags::set_has_splitc() {
  _has_bits_[0] |= 0x00000004u;
}
void SplitFlags::clear_has_splitc() {
  _has_bits_[0] &= ~0x00000004u;
}
void SplitFlags::clear_splitc() {
  splitc_ = false;
  clear_has_splitc();
}
bool SplitFlags::splitc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.SplitFlags.SplitC)
  return splitc_;
}
void SplitFlags::set_splitc(bool value) {
  set_has_splitc();
  splitc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.SplitFlags.SplitC)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kUrlFieldNumber;
const int FetchUrl::kFlagFieldNumber;
const int FetchUrl::kLastModifiedFieldNumber;
const int FetchUrl::kETagFieldNumber;
const int FetchUrl::kTargetBasesFieldNumber;
const int FetchUrl::kAttemptsToFetchFieldNumber;
const int FetchUrl::kMeetDateFieldNumber;
const int FetchUrl::kMinDateToFetchFieldNumber;
const int FetchUrl::kMinutesToRedownloadFieldNumber;
const int FetchUrl::kRedirectsFieldNumber;
const int FetchUrl::kPublicationDateFieldNumber;
const int FetchUrl::kFetcherTypeFieldNumber;
const int FetchUrl::kSplitFlagsFieldNumber;
const int FetchUrl::kOriginalUrlFieldNumber;
const int FetchUrl::kForumTypeFieldNumber;
const int FetchUrl::kMainPriorityFieldNumber;
const int FetchUrl::kIsNewFieldNumber;
const int FetchUrl::kBaseSplitInfoFieldNumber;
const int FetchUrl::kRefererFieldNumber;
const int FetchUrl::kSchedulerNameFieldNumber;
const int FetchUrl::kSchedulerPriorityFieldNumber;
const int FetchUrl::kSchedulerTimestampFieldNumber;
const int FetchUrl::kBatchTimestampFieldNumber;
const int FetchUrl::kSchedulerJobEndTimestampFieldNumber;
const int FetchUrl::kIsPostscheduledFieldNumber;
const int FetchUrl::kBatchGeneratorTimestampFieldNumber;
const int FetchUrl::kParserTimestampFieldNumber;
const int FetchUrl::kDiscoveryBatchingTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchUrl::FetchUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FetchUrl)
}
FetchUrl::FetchUrl(const FetchUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      targetbases_(from.targetbases_),
      redirects_(from.redirects_),
      basesplitinfo_(from.basesplitinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_etag()) {
    etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originalurl()) {
    originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
  }
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referer()) {
    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  schedulername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schedulername()) {
    schedulername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedulername_);
  }
  if (from.has_splitflags()) {
    splitflags_ = new ::ru::mail::go::webbase::blobs::SplitFlags(*from.splitflags_);
  } else {
    splitflags_ = NULL;
  }
  ::memcpy(&lastmodified_, &from.lastmodified_,
    static_cast<size_t>(reinterpret_cast<char*>(&discoverybatchingtimestamp_) -
    reinterpret_cast<char*>(&lastmodified_)) + sizeof(discoverybatchingtimestamp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FetchUrl)
}

void FetchUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedulername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&splitflags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discoverybatchingtimestamp_) -
      reinterpret_cast<char*>(&splitflags_)) + sizeof(discoverybatchingtimestamp_));
}

FetchUrl::~FetchUrl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FetchUrl)
  SharedDtor();
}

void FetchUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedulername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete splitflags_;
}

void FetchUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchUrl::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchUrl& FetchUrl::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchUrl* FetchUrl::New(::google::protobuf::Arena* arena) const {
  FetchUrl* n = new FetchUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  targetbases_.Clear();
  redirects_.Clear();
  basesplitinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!etag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*etag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!originalurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*originalurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!referer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!schedulername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schedulername_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(splitflags_ != NULL);
      splitflags_->::ru::mail::go::webbase::blobs::SplitFlags::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&lastmodified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&lastmodified_)) + sizeof(flag_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&attemptstofetch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mainpriority_) -
        reinterpret_cast<char*>(&attemptstofetch_)) + sizeof(mainpriority_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&schedulerpriority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parsertimestamp_) -
        reinterpret_cast<char*>(&schedulerpriority_)) + sizeof(parsertimestamp_));
  }
  discoverybatchingtimestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FetchUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lastModified = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lastmodified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastmodified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eTag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->etag().data(), static_cast<int>(this->etag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.eTag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.FetchUrl.Fastbases targetBases = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid(value)) {
            add_targetbases(static_cast< ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_targetbases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attemptsToFetch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_attemptstofetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attemptstofetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 meetDate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_meetdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meetdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 minDateToFetch = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_mindatetofetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mindatetofetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutesToRedownload = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_minutestoredownload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutestoredownload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirects = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirects(this->redirects_size() - 1).data(),
            static_cast<int>(this->redirects(this->redirects_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.redirects");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 publicationDate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_publicationdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publicationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::FetcherType_IsValid(value)) {
            set_fetchertype(static_cast< ::ru::mail::go::webbase::blobs::FetcherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splitflags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string originalUrl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originalurl().data(), static_cast<int>(this->originalurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.originalUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ForumType forumType = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ForumType_IsValid(value)) {
            set_forumtype(static_cast< ::ru::mail::go::webbase::blobs::ForumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mainPriority = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_mainpriority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainpriority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isNew = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_isnew();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.BaseSplitInfo baseSplitInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basesplitinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referer = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referer().data(), static_cast<int>(this->referer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.referer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schedulerName = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedulername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schedulername().data(), static_cast<int>(this->schedulername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchUrl.schedulerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 schedulerPriority = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_schedulerpriority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schedulerpriority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 schedulerTimestamp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_schedulertimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &schedulertimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 batchTimestamp = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_batchtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batchtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 schedulerJobEndTimestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_schedulerjobendtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &schedulerjobendtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isPostscheduled = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_ispostscheduled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispostscheduled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 batchGeneratorTimestamp = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_batchgeneratortimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batchgeneratortimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parserTimestamp = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_parsertimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parsertimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 discoveryBatchingTimestamp = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_discoverybatchingtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &discoverybatchingtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FetchUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FetchUrl)
  return false;
#undef DO_
}

void FetchUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 flag = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int64 lastModified = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastmodified(), output);
  }

  // optional string eTag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), static_cast<int>(this->etag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.eTag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->etag(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.FetchUrl.Fastbases targetBases = 5;
  for (int i = 0, n = this->targetbases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->targetbases(i), output);
  }

  // optional int32 attemptsToFetch = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attemptstofetch(), output);
  }

  // optional int64 meetDate = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->meetdate(), output);
  }

  // optional int64 minDateToFetch = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mindatetofetch(), output);
  }

  // optional int32 minutesToRedownload = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minutestoredownload(), output);
  }

  // repeated string redirects = 10;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.redirects");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->redirects(i), output);
  }

  // optional int64 publicationDate = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->publicationdate(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->fetchertype(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->splitflags_, output);
  }

  // optional string originalUrl = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.originalUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->originalurl(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->forumtype(), output);
  }

  // optional int32 mainPriority = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->mainpriority(), output);
  }

  // optional bool isNew = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isnew(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.BaseSplitInfo baseSplitInfo = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->basesplitinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->basesplitinfo(static_cast<int>(i)), output);
  }

  // optional string referer = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->referer(), output);
  }

  // optional string schedulerName = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schedulername().data(), static_cast<int>(this->schedulername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.schedulerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->schedulername(), output);
  }

  // optional int32 schedulerPriority = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->schedulerpriority(), output);
  }

  // optional int64 schedulerTimestamp = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->schedulertimestamp(), output);
  }

  // optional int64 batchTimestamp = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->batchtimestamp(), output);
  }

  // optional int64 schedulerJobEndTimestamp = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->schedulerjobendtimestamp(), output);
  }

  // optional bool isPostscheduled = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->ispostscheduled(), output);
  }

  // optional int64 batchGeneratorTimestamp = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->batchgeneratortimestamp(), output);
  }

  // optional int64 parserTimestamp = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->parsertimestamp(), output);
  }

  // optional int64 discoveryBatchingTimestamp = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->discoverybatchingtimestamp(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FetchUrl)
}

::google::protobuf::uint8* FetchUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FetchUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 flag = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional int64 lastModified = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastmodified(), target);
  }

  // optional string eTag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->etag().data(), static_cast<int>(this->etag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.eTag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->etag(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.FetchUrl.Fastbases targetBases = 5;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    5, this->targetbases_, target);

  // optional int32 attemptsToFetch = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attemptstofetch(), target);
  }

  // optional int64 meetDate = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->meetdate(), target);
  }

  // optional int64 minDateToFetch = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mindatetofetch(), target);
  }

  // optional int32 minutesToRedownload = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minutestoredownload(), target);
  }

  // repeated string redirects = 10;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.redirects");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->redirects(i), target);
  }

  // optional int64 publicationDate = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->publicationdate(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->fetchertype(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->splitflags_, deterministic, target);
  }

  // optional string originalUrl = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.originalUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->originalurl(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ForumType forumType = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->forumtype(), target);
  }

  // optional int32 mainPriority = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->mainpriority(), target);
  }

  // optional bool isNew = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isnew(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.BaseSplitInfo baseSplitInfo = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->basesplitinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->basesplitinfo(static_cast<int>(i)), deterministic, target);
  }

  // optional string referer = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->referer(), target);
  }

  // optional string schedulerName = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schedulername().data(), static_cast<int>(this->schedulername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchUrl.schedulerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->schedulername(), target);
  }

  // optional int32 schedulerPriority = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->schedulerpriority(), target);
  }

  // optional int64 schedulerTimestamp = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->schedulertimestamp(), target);
  }

  // optional int64 batchTimestamp = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->batchtimestamp(), target);
  }

  // optional int64 schedulerJobEndTimestamp = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->schedulerjobendtimestamp(), target);
  }

  // optional bool isPostscheduled = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->ispostscheduled(), target);
  }

  // optional int64 batchGeneratorTimestamp = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->batchgeneratortimestamp(), target);
  }

  // optional int64 parserTimestamp = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->parsertimestamp(), target);
  }

  // optional int64 discoveryBatchingTimestamp = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->discoverybatchingtimestamp(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FetchUrl)
  return target;
}

size_t FetchUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FetchUrl)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated .ru.mail.go.webbase.blobs.FetchUrl.Fastbases targetBases = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->targetbases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->targetbases(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string redirects = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirects_size());
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirects(i));
  }

  // repeated .ru.mail.go.webbase.blobs.BaseSplitInfo baseSplitInfo = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->basesplitinfo_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basesplitinfo(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string eTag = 4;
    if (has_etag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etag());
    }

    // optional string originalUrl = 14;
    if (has_originalurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originalurl());
    }

    // optional string referer = 19;
    if (has_referer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referer());
    }

    // optional string schedulerName = 20;
    if (has_schedulername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schedulername());
    }

    // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 13;
    if (has_splitflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->splitflags_);
    }

    // optional int64 lastModified = 3;
    if (has_lastmodified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastmodified());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 attemptsToFetch = 6;
    if (has_attemptstofetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attemptstofetch());
    }

    // optional int64 meetDate = 7;
    if (has_meetdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meetdate());
    }

    // optional int64 minDateToFetch = 8;
    if (has_mindatetofetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mindatetofetch());
    }

    // optional int32 minutesToRedownload = 9;
    if (has_minutestoredownload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutestoredownload());
    }

    // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 12;
    if (has_fetchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fetchertype());
    }

    // optional int64 publicationDate = 11;
    if (has_publicationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publicationdate());
    }

    // optional .ru.mail.go.webbase.blobs.ForumType forumType = 15;
    if (has_forumtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forumtype());
    }

    // optional int32 mainPriority = 16;
    if (has_mainpriority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainpriority());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 schedulerPriority = 21;
    if (has_schedulerpriority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schedulerpriority());
    }

    // optional bool isNew = 17;
    if (has_isnew()) {
      total_size += 2 + 1;
    }

    // optional bool isPostscheduled = 25;
    if (has_ispostscheduled()) {
      total_size += 2 + 1;
    }

    // optional int64 schedulerTimestamp = 22;
    if (has_schedulertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->schedulertimestamp());
    }

    // optional int64 batchTimestamp = 23;
    if (has_batchtimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batchtimestamp());
    }

    // optional int64 schedulerJobEndTimestamp = 24;
    if (has_schedulerjobendtimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->schedulerjobendtimestamp());
    }

    // optional int64 batchGeneratorTimestamp = 26;
    if (has_batchgeneratortimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batchgeneratortimestamp());
    }

    // optional int64 parserTimestamp = 27;
    if (has_parsertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parsertimestamp());
    }

  }
  // optional int64 discoveryBatchingTimestamp = 28;
  if (has_discoverybatchingtimestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->discoverybatchingtimestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FetchUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FetchUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FetchUrl)
    MergeFrom(*source);
  }
}

void FetchUrl::MergeFrom(const FetchUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FetchUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetbases_.MergeFrom(from.targetbases_);
  redirects_.MergeFrom(from.redirects_);
  basesplitinfo_.MergeFrom(from.basesplitinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_etag();
      etag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_originalurl();
      originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_referer();
      referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_schedulername();
      schedulername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedulername_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_splitflags()->::ru::mail::go::webbase::blobs::SplitFlags::MergeFrom(from.splitflags());
    }
    if (cached_has_bits & 0x00000040u) {
      lastmodified_ = from.lastmodified_;
    }
    if (cached_has_bits & 0x00000080u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      attemptstofetch_ = from.attemptstofetch_;
    }
    if (cached_has_bits & 0x00000200u) {
      meetdate_ = from.meetdate_;
    }
    if (cached_has_bits & 0x00000400u) {
      mindatetofetch_ = from.mindatetofetch_;
    }
    if (cached_has_bits & 0x00000800u) {
      minutestoredownload_ = from.minutestoredownload_;
    }
    if (cached_has_bits & 0x00001000u) {
      fetchertype_ = from.fetchertype_;
    }
    if (cached_has_bits & 0x00002000u) {
      publicationdate_ = from.publicationdate_;
    }
    if (cached_has_bits & 0x00004000u) {
      forumtype_ = from.forumtype_;
    }
    if (cached_has_bits & 0x00008000u) {
      mainpriority_ = from.mainpriority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      schedulerpriority_ = from.schedulerpriority_;
    }
    if (cached_has_bits & 0x00020000u) {
      isnew_ = from.isnew_;
    }
    if (cached_has_bits & 0x00040000u) {
      ispostscheduled_ = from.ispostscheduled_;
    }
    if (cached_has_bits & 0x00080000u) {
      schedulertimestamp_ = from.schedulertimestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      batchtimestamp_ = from.batchtimestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      schedulerjobendtimestamp_ = from.schedulerjobendtimestamp_;
    }
    if (cached_has_bits & 0x00400000u) {
      batchgeneratortimestamp_ = from.batchgeneratortimestamp_;
    }
    if (cached_has_bits & 0x00800000u) {
      parsertimestamp_ = from.parsertimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_discoverybatchingtimestamp(from.discoverybatchingtimestamp());
  }
}

void FetchUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FetchUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchUrl::CopyFrom(const FetchUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FetchUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchUrl::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->basesplitinfo())) return false;
  return true;
}

void FetchUrl::Swap(FetchUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchUrl::InternalSwap(FetchUrl* other) {
  using std::swap;
  targetbases_.InternalSwap(&other->targetbases_);
  redirects_.InternalSwap(&other->redirects_);
  basesplitinfo_.InternalSwap(&other->basesplitinfo_);
  url_.Swap(&other->url_);
  etag_.Swap(&other->etag_);
  originalurl_.Swap(&other->originalurl_);
  referer_.Swap(&other->referer_);
  schedulername_.Swap(&other->schedulername_);
  swap(splitflags_, other->splitflags_);
  swap(lastmodified_, other->lastmodified_);
  swap(flag_, other->flag_);
  swap(attemptstofetch_, other->attemptstofetch_);
  swap(meetdate_, other->meetdate_);
  swap(mindatetofetch_, other->mindatetofetch_);
  swap(minutestoredownload_, other->minutestoredownload_);
  swap(fetchertype_, other->fetchertype_);
  swap(publicationdate_, other->publicationdate_);
  swap(forumtype_, other->forumtype_);
  swap(mainpriority_, other->mainpriority_);
  swap(schedulerpriority_, other->schedulerpriority_);
  swap(isnew_, other->isnew_);
  swap(ispostscheduled_, other->ispostscheduled_);
  swap(schedulertimestamp_, other->schedulertimestamp_);
  swap(batchtimestamp_, other->batchtimestamp_);
  swap(schedulerjobendtimestamp_, other->schedulerjobendtimestamp_);
  swap(batchgeneratortimestamp_, other->batchgeneratortimestamp_);
  swap(parsertimestamp_, other->parsertimestamp_);
  swap(discoverybatchingtimestamp_, other->discoverybatchingtimestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata FetchUrl::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchUrl

// required string url = 1;
bool FetchUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FetchUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void FetchUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void FetchUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& FetchUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.url)
  return url_.GetNoArena();
}
void FetchUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.url)
}
#if LANG_CXX11
void FetchUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchUrl.url)
}
#endif
void FetchUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.url)
}
void FetchUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.url)
}
::std::string* FetchUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.url)
}

// optional int32 flag = 2;
bool FetchUrl::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FetchUrl::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void FetchUrl::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void FetchUrl::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 FetchUrl::flag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.flag)
  return flag_;
}
void FetchUrl::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.flag)
}

// optional int64 lastModified = 3;
bool FetchUrl::has_lastmodified() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FetchUrl::set_has_lastmodified() {
  _has_bits_[0] |= 0x00000040u;
}
void FetchUrl::clear_has_lastmodified() {
  _has_bits_[0] &= ~0x00000040u;
}
void FetchUrl::clear_lastmodified() {
  lastmodified_ = GOOGLE_LONGLONG(0);
  clear_has_lastmodified();
}
::google::protobuf::int64 FetchUrl::lastmodified() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.lastModified)
  return lastmodified_;
}
void FetchUrl::set_lastmodified(::google::protobuf::int64 value) {
  set_has_lastmodified();
  lastmodified_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.lastModified)
}

// optional string eTag = 4;
bool FetchUrl::has_etag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FetchUrl::set_has_etag() {
  _has_bits_[0] |= 0x00000002u;
}
void FetchUrl::clear_has_etag() {
  _has_bits_[0] &= ~0x00000002u;
}
void FetchUrl::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_etag();
}
const ::std::string& FetchUrl::etag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.eTag)
  return etag_.GetNoArena();
}
void FetchUrl::set_etag(const ::std::string& value) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.eTag)
}
#if LANG_CXX11
void FetchUrl::set_etag(::std::string&& value) {
  set_has_etag();
  etag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchUrl.eTag)
}
#endif
void FetchUrl::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.eTag)
}
void FetchUrl::set_etag(const char* value, size_t size) {
  set_has_etag();
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.eTag)
}
::std::string* FetchUrl::mutable_etag() {
  set_has_etag();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.eTag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchUrl::release_etag() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.eTag)
  clear_has_etag();
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchUrl::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    set_has_etag();
  } else {
    clear_has_etag();
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.eTag)
}

// repeated .ru.mail.go.webbase.blobs.FetchUrl.Fastbases targetBases = 5;
int FetchUrl::targetbases_size() const {
  return targetbases_.size();
}
void FetchUrl::clear_targetbases() {
  targetbases_.Clear();
}
::ru::mail::go::webbase::blobs::FetchUrl_Fastbases FetchUrl::targetbases(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.targetBases)
  return static_cast< ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases >(targetbases_.Get(index));
}
void FetchUrl::set_targetbases(int index, ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases value) {
  assert(::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid(value));
  targetbases_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.targetBases)
}
void FetchUrl::add_targetbases(::ru::mail::go::webbase::blobs::FetchUrl_Fastbases value) {
  assert(::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid(value));
  targetbases_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchUrl.targetBases)
}
const ::google::protobuf::RepeatedField<int>&
FetchUrl::targetbases() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FetchUrl.targetBases)
  return targetbases_;
}
::google::protobuf::RepeatedField<int>*
FetchUrl::mutable_targetbases() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FetchUrl.targetBases)
  return &targetbases_;
}

// optional int32 attemptsToFetch = 6;
bool FetchUrl::has_attemptstofetch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FetchUrl::set_has_attemptstofetch() {
  _has_bits_[0] |= 0x00000100u;
}
void FetchUrl::clear_has_attemptstofetch() {
  _has_bits_[0] &= ~0x00000100u;
}
void FetchUrl::clear_attemptstofetch() {
  attemptstofetch_ = 0;
  clear_has_attemptstofetch();
}
::google::protobuf::int32 FetchUrl::attemptstofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.attemptsToFetch)
  return attemptstofetch_;
}
void FetchUrl::set_attemptstofetch(::google::protobuf::int32 value) {
  set_has_attemptstofetch();
  attemptstofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.attemptsToFetch)
}

// optional int64 meetDate = 7;
bool FetchUrl::has_meetdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FetchUrl::set_has_meetdate() {
  _has_bits_[0] |= 0x00000200u;
}
void FetchUrl::clear_has_meetdate() {
  _has_bits_[0] &= ~0x00000200u;
}
void FetchUrl::clear_meetdate() {
  meetdate_ = GOOGLE_LONGLONG(0);
  clear_has_meetdate();
}
::google::protobuf::int64 FetchUrl::meetdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.meetDate)
  return meetdate_;
}
void FetchUrl::set_meetdate(::google::protobuf::int64 value) {
  set_has_meetdate();
  meetdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.meetDate)
}

// optional int64 minDateToFetch = 8;
bool FetchUrl::has_mindatetofetch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FetchUrl::set_has_mindatetofetch() {
  _has_bits_[0] |= 0x00000400u;
}
void FetchUrl::clear_has_mindatetofetch() {
  _has_bits_[0] &= ~0x00000400u;
}
void FetchUrl::clear_mindatetofetch() {
  mindatetofetch_ = GOOGLE_LONGLONG(0);
  clear_has_mindatetofetch();
}
::google::protobuf::int64 FetchUrl::mindatetofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.minDateToFetch)
  return mindatetofetch_;
}
void FetchUrl::set_mindatetofetch(::google::protobuf::int64 value) {
  set_has_mindatetofetch();
  mindatetofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.minDateToFetch)
}

// optional int32 minutesToRedownload = 9;
bool FetchUrl::has_minutestoredownload() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FetchUrl::set_has_minutestoredownload() {
  _has_bits_[0] |= 0x00000800u;
}
void FetchUrl::clear_has_minutestoredownload() {
  _has_bits_[0] &= ~0x00000800u;
}
void FetchUrl::clear_minutestoredownload() {
  minutestoredownload_ = 0;
  clear_has_minutestoredownload();
}
::google::protobuf::int32 FetchUrl::minutestoredownload() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.minutesToRedownload)
  return minutestoredownload_;
}
void FetchUrl::set_minutestoredownload(::google::protobuf::int32 value) {
  set_has_minutestoredownload();
  minutestoredownload_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.minutesToRedownload)
}

// repeated string redirects = 10;
int FetchUrl::redirects_size() const {
  return redirects_.size();
}
void FetchUrl::clear_redirects() {
  redirects_.Clear();
}
const ::std::string& FetchUrl::redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  return redirects_.Get(index);
}
::std::string* FetchUrl::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  return redirects_.Mutable(index);
}
void FetchUrl::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FetchUrl::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
void FetchUrl::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
void FetchUrl::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
::std::string* FetchUrl::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  return redirects_.Add();
}
void FetchUrl::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
#if LANG_CXX11
void FetchUrl::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
#endif
void FetchUrl::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
void FetchUrl::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.FetchUrl.redirects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FetchUrl::redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  return redirects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FetchUrl::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FetchUrl.redirects)
  return &redirects_;
}

// optional int64 publicationDate = 11;
bool FetchUrl::has_publicationdate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FetchUrl::set_has_publicationdate() {
  _has_bits_[0] |= 0x00002000u;
}
void FetchUrl::clear_has_publicationdate() {
  _has_bits_[0] &= ~0x00002000u;
}
void FetchUrl::clear_publicationdate() {
  publicationdate_ = GOOGLE_LONGLONG(0);
  clear_has_publicationdate();
}
::google::protobuf::int64 FetchUrl::publicationdate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.publicationDate)
  return publicationdate_;
}
void FetchUrl::set_publicationdate(::google::protobuf::int64 value) {
  set_has_publicationdate();
  publicationdate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.publicationDate)
}

// optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 12;
bool FetchUrl::has_fetchertype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FetchUrl::set_has_fetchertype() {
  _has_bits_[0] |= 0x00001000u;
}
void FetchUrl::clear_has_fetchertype() {
  _has_bits_[0] &= ~0x00001000u;
}
void FetchUrl::clear_fetchertype() {
  fetchertype_ = 0;
  clear_has_fetchertype();
}
::ru::mail::go::webbase::blobs::FetcherType FetchUrl::fetchertype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.fetcherType)
  return static_cast< ::ru::mail::go::webbase::blobs::FetcherType >(fetchertype_);
}
void FetchUrl::set_fetchertype(::ru::mail::go::webbase::blobs::FetcherType value) {
  assert(::ru::mail::go::webbase::blobs::FetcherType_IsValid(value));
  set_has_fetchertype();
  fetchertype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.fetcherType)
}

// optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 13;
bool FetchUrl::has_splitflags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FetchUrl::set_has_splitflags() {
  _has_bits_[0] |= 0x00000020u;
}
void FetchUrl::clear_has_splitflags() {
  _has_bits_[0] &= ~0x00000020u;
}
void FetchUrl::clear_splitflags() {
  if (splitflags_ != NULL) splitflags_->::ru::mail::go::webbase::blobs::SplitFlags::Clear();
  clear_has_splitflags();
}
const ::ru::mail::go::webbase::blobs::SplitFlags& FetchUrl::splitflags() const {
  const ::ru::mail::go::webbase::blobs::SplitFlags* p = splitflags_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.splitFlags)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SplitFlags*>(
      &::ru::mail::go::webbase::blobs::_SplitFlags_default_instance_);
}
::ru::mail::go::webbase::blobs::SplitFlags* FetchUrl::mutable_splitflags() {
  set_has_splitflags();
  if (splitflags_ == NULL) {
    splitflags_ = new ::ru::mail::go::webbase::blobs::SplitFlags;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.splitFlags)
  return splitflags_;
}
::ru::mail::go::webbase::blobs::SplitFlags* FetchUrl::release_splitflags() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.splitFlags)
  clear_has_splitflags();
  ::ru::mail::go::webbase::blobs::SplitFlags* temp = splitflags_;
  splitflags_ = NULL;
  return temp;
}
void FetchUrl::set_allocated_splitflags(::ru::mail::go::webbase::blobs::SplitFlags* splitflags) {
  delete splitflags_;
  splitflags_ = splitflags;
  if (splitflags) {
    set_has_splitflags();
  } else {
    clear_has_splitflags();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.splitFlags)
}

// optional string originalUrl = 14;
bool FetchUrl::has_originalurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FetchUrl::set_has_originalurl() {
  _has_bits_[0] |= 0x00000004u;
}
void FetchUrl::clear_has_originalurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void FetchUrl::clear_originalurl() {
  originalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalurl();
}
const ::std::string& FetchUrl::originalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
  return originalurl_.GetNoArena();
}
void FetchUrl::set_originalurl(const ::std::string& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
}
#if LANG_CXX11
void FetchUrl::set_originalurl(::std::string&& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
}
#endif
void FetchUrl::set_originalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
}
void FetchUrl::set_originalurl(const char* value, size_t size) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
}
::std::string* FetchUrl::mutable_originalurl() {
  set_has_originalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
  return originalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchUrl::release_originalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
  clear_has_originalurl();
  return originalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchUrl::set_allocated_originalurl(::std::string* originalurl) {
  if (originalurl != NULL) {
    set_has_originalurl();
  } else {
    clear_has_originalurl();
  }
  originalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.originalUrl)
}

// optional .ru.mail.go.webbase.blobs.ForumType forumType = 15;
bool FetchUrl::has_forumtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FetchUrl::set_has_forumtype() {
  _has_bits_[0] |= 0x00004000u;
}
void FetchUrl::clear_has_forumtype() {
  _has_bits_[0] &= ~0x00004000u;
}
void FetchUrl::clear_forumtype() {
  forumtype_ = 0;
  clear_has_forumtype();
}
::ru::mail::go::webbase::blobs::ForumType FetchUrl::forumtype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.forumType)
  return static_cast< ::ru::mail::go::webbase::blobs::ForumType >(forumtype_);
}
void FetchUrl::set_forumtype(::ru::mail::go::webbase::blobs::ForumType value) {
  assert(::ru::mail::go::webbase::blobs::ForumType_IsValid(value));
  set_has_forumtype();
  forumtype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.forumType)
}

// optional int32 mainPriority = 16;
bool FetchUrl::has_mainpriority() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FetchUrl::set_has_mainpriority() {
  _has_bits_[0] |= 0x00008000u;
}
void FetchUrl::clear_has_mainpriority() {
  _has_bits_[0] &= ~0x00008000u;
}
void FetchUrl::clear_mainpriority() {
  mainpriority_ = 0;
  clear_has_mainpriority();
}
::google::protobuf::int32 FetchUrl::mainpriority() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.mainPriority)
  return mainpriority_;
}
void FetchUrl::set_mainpriority(::google::protobuf::int32 value) {
  set_has_mainpriority();
  mainpriority_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.mainPriority)
}

// optional bool isNew = 17;
bool FetchUrl::has_isnew() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FetchUrl::set_has_isnew() {
  _has_bits_[0] |= 0x00020000u;
}
void FetchUrl::clear_has_isnew() {
  _has_bits_[0] &= ~0x00020000u;
}
void FetchUrl::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
bool FetchUrl::isnew() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.isNew)
  return isnew_;
}
void FetchUrl::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.isNew)
}

// repeated .ru.mail.go.webbase.blobs.BaseSplitInfo baseSplitInfo = 18;
int FetchUrl::basesplitinfo_size() const {
  return basesplitinfo_.size();
}
void FetchUrl::clear_basesplitinfo() {
  basesplitinfo_.Clear();
}
const ::ru::mail::go::webbase::blobs::BaseSplitInfo& FetchUrl::basesplitinfo(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.baseSplitInfo)
  return basesplitinfo_.Get(index);
}
::ru::mail::go::webbase::blobs::BaseSplitInfo* FetchUrl::mutable_basesplitinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.baseSplitInfo)
  return basesplitinfo_.Mutable(index);
}
::ru::mail::go::webbase::blobs::BaseSplitInfo* FetchUrl::add_basesplitinfo() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchUrl.baseSplitInfo)
  return basesplitinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::BaseSplitInfo >*
FetchUrl::mutable_basesplitinfo() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FetchUrl.baseSplitInfo)
  return &basesplitinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::BaseSplitInfo >&
FetchUrl::basesplitinfo() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FetchUrl.baseSplitInfo)
  return basesplitinfo_;
}

// optional string referer = 19;
bool FetchUrl::has_referer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FetchUrl::set_has_referer() {
  _has_bits_[0] |= 0x00000008u;
}
void FetchUrl::clear_has_referer() {
  _has_bits_[0] &= ~0x00000008u;
}
void FetchUrl::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referer();
}
const ::std::string& FetchUrl::referer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.referer)
  return referer_.GetNoArena();
}
void FetchUrl::set_referer(const ::std::string& value) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.referer)
}
#if LANG_CXX11
void FetchUrl::set_referer(::std::string&& value) {
  set_has_referer();
  referer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchUrl.referer)
}
#endif
void FetchUrl::set_referer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.referer)
}
void FetchUrl::set_referer(const char* value, size_t size) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.referer)
}
::std::string* FetchUrl::mutable_referer() {
  set_has_referer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchUrl::release_referer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.referer)
  clear_has_referer();
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchUrl::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    set_has_referer();
  } else {
    clear_has_referer();
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.referer)
}

// optional string schedulerName = 20;
bool FetchUrl::has_schedulername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FetchUrl::set_has_schedulername() {
  _has_bits_[0] |= 0x00000010u;
}
void FetchUrl::clear_has_schedulername() {
  _has_bits_[0] &= ~0x00000010u;
}
void FetchUrl::clear_schedulername() {
  schedulername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schedulername();
}
const ::std::string& FetchUrl::schedulername() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
  return schedulername_.GetNoArena();
}
void FetchUrl::set_schedulername(const ::std::string& value) {
  set_has_schedulername();
  schedulername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
}
#if LANG_CXX11
void FetchUrl::set_schedulername(::std::string&& value) {
  set_has_schedulername();
  schedulername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
}
#endif
void FetchUrl::set_schedulername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schedulername();
  schedulername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
}
void FetchUrl::set_schedulername(const char* value, size_t size) {
  set_has_schedulername();
  schedulername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
}
::std::string* FetchUrl::mutable_schedulername() {
  set_has_schedulername();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
  return schedulername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchUrl::release_schedulername() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
  clear_has_schedulername();
  return schedulername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchUrl::set_allocated_schedulername(::std::string* schedulername) {
  if (schedulername != NULL) {
    set_has_schedulername();
  } else {
    clear_has_schedulername();
  }
  schedulername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedulername);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchUrl.schedulerName)
}

// optional int32 schedulerPriority = 21;
bool FetchUrl::has_schedulerpriority() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FetchUrl::set_has_schedulerpriority() {
  _has_bits_[0] |= 0x00010000u;
}
void FetchUrl::clear_has_schedulerpriority() {
  _has_bits_[0] &= ~0x00010000u;
}
void FetchUrl::clear_schedulerpriority() {
  schedulerpriority_ = 0;
  clear_has_schedulerpriority();
}
::google::protobuf::int32 FetchUrl::schedulerpriority() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.schedulerPriority)
  return schedulerpriority_;
}
void FetchUrl::set_schedulerpriority(::google::protobuf::int32 value) {
  set_has_schedulerpriority();
  schedulerpriority_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.schedulerPriority)
}

// optional int64 schedulerTimestamp = 22;
bool FetchUrl::has_schedulertimestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FetchUrl::set_has_schedulertimestamp() {
  _has_bits_[0] |= 0x00080000u;
}
void FetchUrl::clear_has_schedulertimestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
void FetchUrl::clear_schedulertimestamp() {
  schedulertimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_schedulertimestamp();
}
::google::protobuf::int64 FetchUrl::schedulertimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.schedulerTimestamp)
  return schedulertimestamp_;
}
void FetchUrl::set_schedulertimestamp(::google::protobuf::int64 value) {
  set_has_schedulertimestamp();
  schedulertimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.schedulerTimestamp)
}

// optional int64 batchTimestamp = 23;
bool FetchUrl::has_batchtimestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FetchUrl::set_has_batchtimestamp() {
  _has_bits_[0] |= 0x00100000u;
}
void FetchUrl::clear_has_batchtimestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
void FetchUrl::clear_batchtimestamp() {
  batchtimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_batchtimestamp();
}
::google::protobuf::int64 FetchUrl::batchtimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.batchTimestamp)
  return batchtimestamp_;
}
void FetchUrl::set_batchtimestamp(::google::protobuf::int64 value) {
  set_has_batchtimestamp();
  batchtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.batchTimestamp)
}

// optional int64 schedulerJobEndTimestamp = 24;
bool FetchUrl::has_schedulerjobendtimestamp() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FetchUrl::set_has_schedulerjobendtimestamp() {
  _has_bits_[0] |= 0x00200000u;
}
void FetchUrl::clear_has_schedulerjobendtimestamp() {
  _has_bits_[0] &= ~0x00200000u;
}
void FetchUrl::clear_schedulerjobendtimestamp() {
  schedulerjobendtimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_schedulerjobendtimestamp();
}
::google::protobuf::int64 FetchUrl::schedulerjobendtimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.schedulerJobEndTimestamp)
  return schedulerjobendtimestamp_;
}
void FetchUrl::set_schedulerjobendtimestamp(::google::protobuf::int64 value) {
  set_has_schedulerjobendtimestamp();
  schedulerjobendtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.schedulerJobEndTimestamp)
}

// optional bool isPostscheduled = 25;
bool FetchUrl::has_ispostscheduled() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FetchUrl::set_has_ispostscheduled() {
  _has_bits_[0] |= 0x00040000u;
}
void FetchUrl::clear_has_ispostscheduled() {
  _has_bits_[0] &= ~0x00040000u;
}
void FetchUrl::clear_ispostscheduled() {
  ispostscheduled_ = false;
  clear_has_ispostscheduled();
}
bool FetchUrl::ispostscheduled() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.isPostscheduled)
  return ispostscheduled_;
}
void FetchUrl::set_ispostscheduled(bool value) {
  set_has_ispostscheduled();
  ispostscheduled_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.isPostscheduled)
}

// optional int64 batchGeneratorTimestamp = 26;
bool FetchUrl::has_batchgeneratortimestamp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void FetchUrl::set_has_batchgeneratortimestamp() {
  _has_bits_[0] |= 0x00400000u;
}
void FetchUrl::clear_has_batchgeneratortimestamp() {
  _has_bits_[0] &= ~0x00400000u;
}
void FetchUrl::clear_batchgeneratortimestamp() {
  batchgeneratortimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_batchgeneratortimestamp();
}
::google::protobuf::int64 FetchUrl::batchgeneratortimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.batchGeneratorTimestamp)
  return batchgeneratortimestamp_;
}
void FetchUrl::set_batchgeneratortimestamp(::google::protobuf::int64 value) {
  set_has_batchgeneratortimestamp();
  batchgeneratortimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.batchGeneratorTimestamp)
}

// optional int64 parserTimestamp = 27;
bool FetchUrl::has_parsertimestamp() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void FetchUrl::set_has_parsertimestamp() {
  _has_bits_[0] |= 0x00800000u;
}
void FetchUrl::clear_has_parsertimestamp() {
  _has_bits_[0] &= ~0x00800000u;
}
void FetchUrl::clear_parsertimestamp() {
  parsertimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_parsertimestamp();
}
::google::protobuf::int64 FetchUrl::parsertimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.parserTimestamp)
  return parsertimestamp_;
}
void FetchUrl::set_parsertimestamp(::google::protobuf::int64 value) {
  set_has_parsertimestamp();
  parsertimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.parserTimestamp)
}

// optional int64 discoveryBatchingTimestamp = 28;
bool FetchUrl::has_discoverybatchingtimestamp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void FetchUrl::set_has_discoverybatchingtimestamp() {
  _has_bits_[0] |= 0x01000000u;
}
void FetchUrl::clear_has_discoverybatchingtimestamp() {
  _has_bits_[0] &= ~0x01000000u;
}
void FetchUrl::clear_discoverybatchingtimestamp() {
  discoverybatchingtimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_discoverybatchingtimestamp();
}
::google::protobuf::int64 FetchUrl::discoverybatchingtimestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchUrl.discoveryBatchingTimestamp)
  return discoverybatchingtimestamp_;
}
void FetchUrl::set_discoverybatchingtimestamp(::google::protobuf::int64 value) {
  set_has_discoverybatchingtimestamp();
  discoverybatchingtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchUrl.discoveryBatchingTimestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseSplitInfo::kBaseFieldNumber;
const int BaseSplitInfo::kSplitFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseSplitInfo::BaseSplitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.BaseSplitInfo)
}
BaseSplitInfo::BaseSplitInfo(const BaseSplitInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_splitflags()) {
    splitflags_ = new ::ru::mail::go::webbase::blobs::SplitFlags(*from.splitflags_);
  } else {
    splitflags_ = NULL;
  }
  base_ = from.base_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.BaseSplitInfo)
}

void BaseSplitInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&splitflags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&splitflags_)) + sizeof(base_));
}

BaseSplitInfo::~BaseSplitInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.BaseSplitInfo)
  SharedDtor();
}

void BaseSplitInfo::SharedDtor() {
  if (this != internal_default_instance()) delete splitflags_;
}

void BaseSplitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseSplitInfo::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseSplitInfo& BaseSplitInfo::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseSplitInfo* BaseSplitInfo::New(::google::protobuf::Arena* arena) const {
  BaseSplitInfo* n = new BaseSplitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseSplitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_splitflags()) {
    GOOGLE_DCHECK(splitflags_ != NULL);
    splitflags_->::ru::mail::go::webbase::blobs::SplitFlags::Clear();
  }
  base_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseSplitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.FetchUrl.Fastbases base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid(value)) {
            set_base(static_cast< ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splitflags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.BaseSplitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.BaseSplitInfo)
  return false;
#undef DO_
}

void BaseSplitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.FetchUrl.Fastbases base = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->base(), output);
  }

  // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->splitflags_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.BaseSplitInfo)
}

::google::protobuf::uint8* BaseSplitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.FetchUrl.Fastbases base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->base(), target);
  }

  // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->splitflags_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.BaseSplitInfo)
  return target;
}

size_t BaseSplitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.FetchUrl.Fastbases base = 1;
  if (has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->base());
  }
  // optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 2;
  if (has_splitflags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->splitflags_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseSplitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseSplitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseSplitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.BaseSplitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.BaseSplitInfo)
    MergeFrom(*source);
  }
}

void BaseSplitInfo::MergeFrom(const BaseSplitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_splitflags()->::ru::mail::go::webbase::blobs::SplitFlags::MergeFrom(from.splitflags());
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseSplitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseSplitInfo::CopyFrom(const BaseSplitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.BaseSplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseSplitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void BaseSplitInfo::Swap(BaseSplitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseSplitInfo::InternalSwap(BaseSplitInfo* other) {
  using std::swap;
  swap(splitflags_, other->splitflags_);
  swap(base_, other->base_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseSplitInfo::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseSplitInfo

// required .ru.mail.go.webbase.blobs.FetchUrl.Fastbases base = 1;
bool BaseSplitInfo::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseSplitInfo::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseSplitInfo::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseSplitInfo::clear_base() {
  base_ = 0;
  clear_has_base();
}
::ru::mail::go::webbase::blobs::FetchUrl_Fastbases BaseSplitInfo::base() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BaseSplitInfo.base)
  return static_cast< ::ru::mail::go::webbase::blobs::FetchUrl_Fastbases >(base_);
}
void BaseSplitInfo::set_base(::ru::mail::go::webbase::blobs::FetchUrl_Fastbases value) {
  assert(::ru::mail::go::webbase::blobs::FetchUrl_Fastbases_IsValid(value));
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BaseSplitInfo.base)
}

// optional .ru.mail.go.webbase.blobs.SplitFlags splitFlags = 2;
bool BaseSplitInfo::has_splitflags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseSplitInfo::set_has_splitflags() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseSplitInfo::clear_has_splitflags() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseSplitInfo::clear_splitflags() {
  if (splitflags_ != NULL) splitflags_->::ru::mail::go::webbase::blobs::SplitFlags::Clear();
  clear_has_splitflags();
}
const ::ru::mail::go::webbase::blobs::SplitFlags& BaseSplitInfo::splitflags() const {
  const ::ru::mail::go::webbase::blobs::SplitFlags* p = splitflags_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BaseSplitInfo.splitFlags)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::SplitFlags*>(
      &::ru::mail::go::webbase::blobs::_SplitFlags_default_instance_);
}
::ru::mail::go::webbase::blobs::SplitFlags* BaseSplitInfo::mutable_splitflags() {
  set_has_splitflags();
  if (splitflags_ == NULL) {
    splitflags_ = new ::ru::mail::go::webbase::blobs::SplitFlags;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BaseSplitInfo.splitFlags)
  return splitflags_;
}
::ru::mail::go::webbase::blobs::SplitFlags* BaseSplitInfo::release_splitflags() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BaseSplitInfo.splitFlags)
  clear_has_splitflags();
  ::ru::mail::go::webbase::blobs::SplitFlags* temp = splitflags_;
  splitflags_ = NULL;
  return temp;
}
void BaseSplitInfo::set_allocated_splitflags(::ru::mail::go::webbase::blobs::SplitFlags* splitflags) {
  delete splitflags_;
  splitflags_ = splitflags;
  if (splitflags) {
    set_has_splitflags();
  } else {
    clear_has_splitflags();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BaseSplitInfo.splitFlags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YouTubeWebSearch::kOriginalUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YouTubeWebSearch::YouTubeWebSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.YouTubeWebSearch)
}
YouTubeWebSearch::YouTubeWebSearch(const YouTubeWebSearch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_originalurl()) {
    originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.YouTubeWebSearch)
}

void YouTubeWebSearch::SharedCtor() {
  _cached_size_ = 0;
  originalurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

YouTubeWebSearch::~YouTubeWebSearch() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  SharedDtor();
}

void YouTubeWebSearch::SharedDtor() {
  originalurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void YouTubeWebSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouTubeWebSearch::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YouTubeWebSearch& YouTubeWebSearch::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

YouTubeWebSearch* YouTubeWebSearch::New(::google::protobuf::Arena* arena) const {
  YouTubeWebSearch* n = new YouTubeWebSearch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouTubeWebSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_originalurl()) {
    GOOGLE_DCHECK(!originalurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*originalurl_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YouTubeWebSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string originalUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originalurl().data(), static_cast<int>(this->originalurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  return false;
#undef DO_
}

void YouTubeWebSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string originalUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->originalurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.YouTubeWebSearch)
}

::google::protobuf::uint8* YouTubeWebSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string originalUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalurl().data(), static_cast<int>(this->originalurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->originalurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  return target;
}

size_t YouTubeWebSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string originalUrl = 1;
  if (has_originalurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->originalurl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouTubeWebSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const YouTubeWebSearch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YouTubeWebSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.YouTubeWebSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.YouTubeWebSearch)
    MergeFrom(*source);
  }
}

void YouTubeWebSearch::MergeFrom(const YouTubeWebSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_originalurl()) {
    set_has_originalurl();
    originalurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.originalurl_);
  }
}

void YouTubeWebSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouTubeWebSearch::CopyFrom(const YouTubeWebSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.YouTubeWebSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouTubeWebSearch::IsInitialized() const {
  return true;
}

void YouTubeWebSearch::Swap(YouTubeWebSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouTubeWebSearch::InternalSwap(YouTubeWebSearch* other) {
  using std::swap;
  originalurl_.Swap(&other->originalurl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YouTubeWebSearch::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouTubeWebSearch

// optional string originalUrl = 1;
bool YouTubeWebSearch::has_originalurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouTubeWebSearch::set_has_originalurl() {
  _has_bits_[0] |= 0x00000001u;
}
void YouTubeWebSearch::clear_has_originalurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouTubeWebSearch::clear_originalurl() {
  originalurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_originalurl();
}
const ::std::string& YouTubeWebSearch::originalurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
  return originalurl_.GetNoArena();
}
void YouTubeWebSearch::set_originalurl(const ::std::string& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
}
#if LANG_CXX11
void YouTubeWebSearch::set_originalurl(::std::string&& value) {
  set_has_originalurl();
  originalurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
}
#endif
void YouTubeWebSearch::set_originalurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
}
void YouTubeWebSearch::set_originalurl(const char* value, size_t size) {
  set_has_originalurl();
  originalurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
}
::std::string* YouTubeWebSearch::mutable_originalurl() {
  set_has_originalurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
  return originalurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YouTubeWebSearch::release_originalurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
  clear_has_originalurl();
  return originalurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YouTubeWebSearch::set_allocated_originalurl(::std::string* originalurl) {
  if (originalurl != NULL) {
    set_has_originalurl();
  } else {
    clear_has_originalurl();
  }
  originalurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.YouTubeWebSearch.originalUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YouTubeCommon::kIdUrlMappingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YouTubeCommon::YouTubeCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.YouTubeCommon)
}
YouTubeCommon::YouTubeCommon(const YouTubeCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      idurlmapping_(from.idurlmapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.YouTubeCommon)
}

void YouTubeCommon::SharedCtor() {
  _cached_size_ = 0;
}

YouTubeCommon::~YouTubeCommon() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.YouTubeCommon)
  SharedDtor();
}

void YouTubeCommon::SharedDtor() {
}

void YouTubeCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouTubeCommon::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YouTubeCommon& YouTubeCommon::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

YouTubeCommon* YouTubeCommon::New(::google::protobuf::Arena* arena) const {
  YouTubeCommon* n = new YouTubeCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouTubeCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idurlmapping_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YouTubeCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.YouTubeIdUrlMapping idUrlMapping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_idurlmapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.YouTubeCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.YouTubeCommon)
  return false;
#undef DO_
}

void YouTubeCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.YouTubeIdUrlMapping idUrlMapping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->idurlmapping_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->idurlmapping(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.YouTubeCommon)
}

::google::protobuf::uint8* YouTubeCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.YouTubeIdUrlMapping idUrlMapping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->idurlmapping_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->idurlmapping(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.YouTubeCommon)
  return target;
}

size_t YouTubeCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.YouTubeIdUrlMapping idUrlMapping = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->idurlmapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idurlmapping(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouTubeCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const YouTubeCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YouTubeCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.YouTubeCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.YouTubeCommon)
    MergeFrom(*source);
  }
}

void YouTubeCommon::MergeFrom(const YouTubeCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idurlmapping_.MergeFrom(from.idurlmapping_);
}

void YouTubeCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouTubeCommon::CopyFrom(const YouTubeCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.YouTubeCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouTubeCommon::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->idurlmapping())) return false;
  return true;
}

void YouTubeCommon::Swap(YouTubeCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouTubeCommon::InternalSwap(YouTubeCommon* other) {
  using std::swap;
  idurlmapping_.InternalSwap(&other->idurlmapping_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YouTubeCommon::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouTubeCommon

// repeated .ru.mail.go.webbase.blobs.YouTubeIdUrlMapping idUrlMapping = 1;
int YouTubeCommon::idurlmapping_size() const {
  return idurlmapping_.size();
}
void YouTubeCommon::clear_idurlmapping() {
  idurlmapping_.Clear();
}
const ::ru::mail::go::webbase::blobs::YouTubeIdUrlMapping& YouTubeCommon::idurlmapping(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeCommon.idUrlMapping)
  return idurlmapping_.Get(index);
}
::ru::mail::go::webbase::blobs::YouTubeIdUrlMapping* YouTubeCommon::mutable_idurlmapping(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeCommon.idUrlMapping)
  return idurlmapping_.Mutable(index);
}
::ru::mail::go::webbase::blobs::YouTubeIdUrlMapping* YouTubeCommon::add_idurlmapping() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.YouTubeCommon.idUrlMapping)
  return idurlmapping_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::YouTubeIdUrlMapping >*
YouTubeCommon::mutable_idurlmapping() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.YouTubeCommon.idUrlMapping)
  return &idurlmapping_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::YouTubeIdUrlMapping >&
YouTubeCommon::idurlmapping() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.YouTubeCommon.idUrlMapping)
  return idurlmapping_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YouTubeIdUrlMapping::kIdFieldNumber;
const int YouTubeIdUrlMapping::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YouTubeIdUrlMapping::YouTubeIdUrlMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
}
YouTubeIdUrlMapping::YouTubeIdUrlMapping(const YouTubeIdUrlMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
}

void YouTubeIdUrlMapping::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

YouTubeIdUrlMapping::~YouTubeIdUrlMapping() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  SharedDtor();
}

void YouTubeIdUrlMapping::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void YouTubeIdUrlMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouTubeIdUrlMapping::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YouTubeIdUrlMapping& YouTubeIdUrlMapping::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

YouTubeIdUrlMapping* YouTubeIdUrlMapping::New(::google::protobuf::Arena* arena) const {
  YouTubeIdUrlMapping* n = new YouTubeIdUrlMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouTubeIdUrlMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YouTubeIdUrlMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  return false;
#undef DO_
}

void YouTubeIdUrlMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
}

::google::protobuf::uint8* YouTubeIdUrlMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  return target;
}

size_t YouTubeIdUrlMapping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  return total_size;
}
size_t YouTubeIdUrlMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouTubeIdUrlMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const YouTubeIdUrlMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YouTubeIdUrlMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
    MergeFrom(*source);
  }
}

void YouTubeIdUrlMapping::MergeFrom(const YouTubeIdUrlMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void YouTubeIdUrlMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouTubeIdUrlMapping::CopyFrom(const YouTubeIdUrlMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouTubeIdUrlMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void YouTubeIdUrlMapping::Swap(YouTubeIdUrlMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouTubeIdUrlMapping::InternalSwap(YouTubeIdUrlMapping* other) {
  using std::swap;
  id_.Swap(&other->id_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YouTubeIdUrlMapping::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouTubeIdUrlMapping

// required string id = 1;
bool YouTubeIdUrlMapping::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouTubeIdUrlMapping::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void YouTubeIdUrlMapping::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouTubeIdUrlMapping::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& YouTubeIdUrlMapping::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
  return id_.GetNoArena();
}
void YouTubeIdUrlMapping::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
}
#if LANG_CXX11
void YouTubeIdUrlMapping::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
}
#endif
void YouTubeIdUrlMapping::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
}
void YouTubeIdUrlMapping::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
}
::std::string* YouTubeIdUrlMapping::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YouTubeIdUrlMapping::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YouTubeIdUrlMapping::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.id)
}

// required string url = 2;
bool YouTubeIdUrlMapping::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouTubeIdUrlMapping::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void YouTubeIdUrlMapping::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouTubeIdUrlMapping::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& YouTubeIdUrlMapping::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
  return url_.GetNoArena();
}
void YouTubeIdUrlMapping::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
}
#if LANG_CXX11
void YouTubeIdUrlMapping::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
}
#endif
void YouTubeIdUrlMapping::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
}
void YouTubeIdUrlMapping::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
}
::std::string* YouTubeIdUrlMapping::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YouTubeIdUrlMapping::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YouTubeIdUrlMapping::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.YouTubeIdUrlMapping.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OkApiMessage::kIdToUrlMappingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OkApiMessage::OkApiMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.OkApiMessage)
}
OkApiMessage::OkApiMessage(const OkApiMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      idtourlmapping_(from.idtourlmapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.OkApiMessage)
}

void OkApiMessage::SharedCtor() {
  _cached_size_ = 0;
}

OkApiMessage::~OkApiMessage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.OkApiMessage)
  SharedDtor();
}

void OkApiMessage::SharedDtor() {
}

void OkApiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OkApiMessage::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OkApiMessage& OkApiMessage::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

OkApiMessage* OkApiMessage::New(::google::protobuf::Arena* arena) const {
  OkApiMessage* n = new OkApiMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OkApiMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.OkApiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idtourlmapping_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OkApiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.OkApiMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.OkIdToUrlMapping idToUrlMapping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_idtourlmapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.OkApiMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.OkApiMessage)
  return false;
#undef DO_
}

void OkApiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.OkApiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.OkIdToUrlMapping idToUrlMapping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->idtourlmapping_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->idtourlmapping(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.OkApiMessage)
}

::google::protobuf::uint8* OkApiMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.OkApiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.OkIdToUrlMapping idToUrlMapping = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->idtourlmapping_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->idtourlmapping(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.OkApiMessage)
  return target;
}

size_t OkApiMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.OkApiMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.OkIdToUrlMapping idToUrlMapping = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->idtourlmapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idtourlmapping(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OkApiMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.OkApiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OkApiMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OkApiMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.OkApiMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.OkApiMessage)
    MergeFrom(*source);
  }
}

void OkApiMessage::MergeFrom(const OkApiMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.OkApiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idtourlmapping_.MergeFrom(from.idtourlmapping_);
}

void OkApiMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.OkApiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OkApiMessage::CopyFrom(const OkApiMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.OkApiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OkApiMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->idtourlmapping())) return false;
  return true;
}

void OkApiMessage::Swap(OkApiMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OkApiMessage::InternalSwap(OkApiMessage* other) {
  using std::swap;
  idtourlmapping_.InternalSwap(&other->idtourlmapping_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OkApiMessage::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OkApiMessage

// repeated .ru.mail.go.webbase.blobs.OkIdToUrlMapping idToUrlMapping = 1;
int OkApiMessage::idtourlmapping_size() const {
  return idtourlmapping_.size();
}
void OkApiMessage::clear_idtourlmapping() {
  idtourlmapping_.Clear();
}
const ::ru::mail::go::webbase::blobs::OkIdToUrlMapping& OkApiMessage::idtourlmapping(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OkApiMessage.idToUrlMapping)
  return idtourlmapping_.Get(index);
}
::ru::mail::go::webbase::blobs::OkIdToUrlMapping* OkApiMessage::mutable_idtourlmapping(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OkApiMessage.idToUrlMapping)
  return idtourlmapping_.Mutable(index);
}
::ru::mail::go::webbase::blobs::OkIdToUrlMapping* OkApiMessage::add_idtourlmapping() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.OkApiMessage.idToUrlMapping)
  return idtourlmapping_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::OkIdToUrlMapping >*
OkApiMessage::mutable_idtourlmapping() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.OkApiMessage.idToUrlMapping)
  return &idtourlmapping_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::OkIdToUrlMapping >&
OkApiMessage::idtourlmapping() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.OkApiMessage.idToUrlMapping)
  return idtourlmapping_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OkIdToUrlMapping::kIdFieldNumber;
const int OkIdToUrlMapping::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OkIdToUrlMapping::OkIdToUrlMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
}
OkIdToUrlMapping::OkIdToUrlMapping(const OkIdToUrlMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
}

void OkIdToUrlMapping::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

OkIdToUrlMapping::~OkIdToUrlMapping() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  SharedDtor();
}

void OkIdToUrlMapping::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OkIdToUrlMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OkIdToUrlMapping::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OkIdToUrlMapping& OkIdToUrlMapping::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

OkIdToUrlMapping* OkIdToUrlMapping::New(::google::protobuf::Arena* arena) const {
  OkIdToUrlMapping* n = new OkIdToUrlMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OkIdToUrlMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OkIdToUrlMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.OkIdToUrlMapping.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  return false;
#undef DO_
}

void OkIdToUrlMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OkIdToUrlMapping.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
}

::google::protobuf::uint8* OkIdToUrlMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OkIdToUrlMapping.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  return target;
}

size_t OkIdToUrlMapping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  return total_size;
}
size_t OkIdToUrlMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OkIdToUrlMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const OkIdToUrlMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OkIdToUrlMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
    MergeFrom(*source);
  }
}

void OkIdToUrlMapping::MergeFrom(const OkIdToUrlMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OkIdToUrlMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OkIdToUrlMapping::CopyFrom(const OkIdToUrlMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.OkIdToUrlMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OkIdToUrlMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void OkIdToUrlMapping::Swap(OkIdToUrlMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OkIdToUrlMapping::InternalSwap(OkIdToUrlMapping* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OkIdToUrlMapping::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OkIdToUrlMapping

// required int64 id = 1;
bool OkIdToUrlMapping::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OkIdToUrlMapping::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OkIdToUrlMapping::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OkIdToUrlMapping::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 OkIdToUrlMapping::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OkIdToUrlMapping.id)
  return id_;
}
void OkIdToUrlMapping::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OkIdToUrlMapping.id)
}

// required string url = 2;
bool OkIdToUrlMapping::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OkIdToUrlMapping::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void OkIdToUrlMapping::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void OkIdToUrlMapping::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& OkIdToUrlMapping::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
  return url_.GetNoArena();
}
void OkIdToUrlMapping::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
}
#if LANG_CXX11
void OkIdToUrlMapping::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
}
#endif
void OkIdToUrlMapping::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
}
void OkIdToUrlMapping::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
}
::std::string* OkIdToUrlMapping::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OkIdToUrlMapping::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OkIdToUrlMapping::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.OkIdToUrlMapping.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlHistory::kFirstCrawlTsFieldNumber;
const int CrawlHistory::kChangesNumberFieldNumber;
const int CrawlHistory::kLastChangeTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlHistory::CrawlHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CrawlHistory)
}
CrawlHistory::CrawlHistory(const CrawlHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&firstcrawlts_, &from.firstcrawlts_,
    static_cast<size_t>(reinterpret_cast<char*>(&changesnumber_) -
    reinterpret_cast<char*>(&firstcrawlts_)) + sizeof(changesnumber_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CrawlHistory)
}

void CrawlHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&firstcrawlts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changesnumber_) -
      reinterpret_cast<char*>(&firstcrawlts_)) + sizeof(changesnumber_));
}

CrawlHistory::~CrawlHistory() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CrawlHistory)
  SharedDtor();
}

void CrawlHistory::SharedDtor() {
}

void CrawlHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrawlHistory::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrawlHistory& CrawlHistory::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrawlHistory* CrawlHistory::New(::google::protobuf::Arena* arena) const {
  CrawlHistory* n = new CrawlHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrawlHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CrawlHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&firstcrawlts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&changesnumber_) -
        reinterpret_cast<char*>(&firstcrawlts_)) + sizeof(changesnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrawlHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CrawlHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 firstCrawlTs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_firstcrawlts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstcrawlts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 changesNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_changesnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changesnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lastChangeTs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lastchangets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastchangets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CrawlHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CrawlHistory)
  return false;
#undef DO_
}

void CrawlHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CrawlHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 firstCrawlTs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->firstcrawlts(), output);
  }

  // required int32 changesNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changesnumber(), output);
  }

  // required int64 lastChangeTs = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastchangets(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CrawlHistory)
}

::google::protobuf::uint8* CrawlHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CrawlHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 firstCrawlTs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->firstcrawlts(), target);
  }

  // required int32 changesNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changesnumber(), target);
  }

  // required int64 lastChangeTs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastchangets(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CrawlHistory)
  return target;
}

size_t CrawlHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.CrawlHistory)
  size_t total_size = 0;

  if (has_firstcrawlts()) {
    // required int64 firstCrawlTs = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->firstcrawlts());
  }

  if (has_lastchangets()) {
    // required int64 lastChangeTs = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastchangets());
  }

  if (has_changesnumber()) {
    // required int32 changesNumber = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changesnumber());
  }

  return total_size;
}
size_t CrawlHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CrawlHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 firstCrawlTs = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->firstcrawlts());

    // required int64 lastChangeTs = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastchangets());

    // required int32 changesNumber = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->changesnumber());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrawlHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CrawlHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrawlHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CrawlHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CrawlHistory)
    MergeFrom(*source);
  }
}

void CrawlHistory::MergeFrom(const CrawlHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CrawlHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      firstcrawlts_ = from.firstcrawlts_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastchangets_ = from.lastchangets_;
    }
    if (cached_has_bits & 0x00000004u) {
      changesnumber_ = from.changesnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrawlHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CrawlHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlHistory::CopyFrom(const CrawlHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CrawlHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CrawlHistory::Swap(CrawlHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlHistory::InternalSwap(CrawlHistory* other) {
  using std::swap;
  swap(firstcrawlts_, other->firstcrawlts_);
  swap(lastchangets_, other->lastchangets_);
  swap(changesnumber_, other->changesnumber_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrawlHistory::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrawlHistory

// required int64 firstCrawlTs = 1;
bool CrawlHistory::has_firstcrawlts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrawlHistory::set_has_firstcrawlts() {
  _has_bits_[0] |= 0x00000001u;
}
void CrawlHistory::clear_has_firstcrawlts() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrawlHistory::clear_firstcrawlts() {
  firstcrawlts_ = GOOGLE_LONGLONG(0);
  clear_has_firstcrawlts();
}
::google::protobuf::int64 CrawlHistory::firstcrawlts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlHistory.firstCrawlTs)
  return firstcrawlts_;
}
void CrawlHistory::set_firstcrawlts(::google::protobuf::int64 value) {
  set_has_firstcrawlts();
  firstcrawlts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlHistory.firstCrawlTs)
}

// required int32 changesNumber = 2;
bool CrawlHistory::has_changesnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrawlHistory::set_has_changesnumber() {
  _has_bits_[0] |= 0x00000004u;
}
void CrawlHistory::clear_has_changesnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrawlHistory::clear_changesnumber() {
  changesnumber_ = 0;
  clear_has_changesnumber();
}
::google::protobuf::int32 CrawlHistory::changesnumber() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlHistory.changesNumber)
  return changesnumber_;
}
void CrawlHistory::set_changesnumber(::google::protobuf::int32 value) {
  set_has_changesnumber();
  changesnumber_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlHistory.changesNumber)
}

// required int64 lastChangeTs = 3;
bool CrawlHistory::has_lastchangets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrawlHistory::set_has_lastchangets() {
  _has_bits_[0] |= 0x00000002u;
}
void CrawlHistory::clear_has_lastchangets() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrawlHistory::clear_lastchangets() {
  lastchangets_ = GOOGLE_LONGLONG(0);
  clear_has_lastchangets();
}
::google::protobuf::int64 CrawlHistory::lastchangets() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CrawlHistory.lastChangeTs)
  return lastchangets_;
}
void CrawlHistory::set_lastchangets(::google::protobuf::int64 value) {
  set_has_lastchangets();
  lastchangets_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CrawlHistory.lastChangeTs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchResult::kCrawlStatusFieldNumber;
const int FetchResult::kAttemptsToFetchFieldNumber;
const int FetchResult::kMinDateToFetchFieldNumber;
const int FetchResult::kRedirectsFieldNumber;
const int FetchResult::kFetcherTypeFieldNumber;
const int FetchResult::kIsRottenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchResult::FetchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FetchResult)
}
FetchResult::FetchResult(const FetchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      redirects_(from.redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crawlstatus()) {
    crawlstatus_ = new ::ru::mail::go::webbase::blobs::CrawlDetails(*from.crawlstatus_);
  } else {
    crawlstatus_ = NULL;
  }
  ::memcpy(&mindatetofetch_, &from.mindatetofetch_,
    static_cast<size_t>(reinterpret_cast<char*>(&isrotten_) -
    reinterpret_cast<char*>(&mindatetofetch_)) + sizeof(isrotten_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FetchResult)
}

void FetchResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crawlstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isrotten_) -
      reinterpret_cast<char*>(&crawlstatus_)) + sizeof(isrotten_));
}

FetchResult::~FetchResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FetchResult)
  SharedDtor();
}

void FetchResult::SharedDtor() {
  if (this != internal_default_instance()) delete crawlstatus_;
}

void FetchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchResult::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchResult& FetchResult::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchResult* FetchResult::New(::google::protobuf::Arena* arena) const {
  FetchResult* n = new FetchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirects_.Clear();
  if (has_crawlstatus()) {
    GOOGLE_DCHECK(crawlstatus_ != NULL);
    crawlstatus_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&mindatetofetch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isrotten_) -
        reinterpret_cast<char*>(&mindatetofetch_)) + sizeof(isrotten_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FetchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crawlstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attemptsToFetch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_attemptstofetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attemptstofetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 minDateToFetch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mindatetofetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mindatetofetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirects(this->redirects_size() - 1).data(),
            static_cast<int>(this->redirects(this->redirects_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchResult.redirects");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::FetcherType_IsValid(value)) {
            set_fetchertype(static_cast< ::ru::mail::go::webbase::blobs::FetcherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isRotten = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isrotten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrotten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FetchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FetchResult)
  return false;
#undef DO_
}

void FetchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->crawlstatus_, output);
  }

  // optional int32 attemptsToFetch = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attemptstofetch(), output);
  }

  // optional int64 minDateToFetch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mindatetofetch(), output);
  }

  // repeated string redirects = 4;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchResult.redirects");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->redirects(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->fetchertype(), output);
  }

  // optional bool isRotten = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrotten(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FetchResult)
}

::google::protobuf::uint8* FetchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->crawlstatus_, deterministic, target);
  }

  // optional int32 attemptsToFetch = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attemptstofetch(), target);
  }

  // optional int64 minDateToFetch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mindatetofetch(), target);
  }

  // repeated string redirects = 4;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchResult.redirects");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->redirects(i), target);
  }

  // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->fetchertype(), target);
  }

  // optional bool isRotten = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrotten(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FetchResult)
  return target;
}

size_t FetchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FetchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string redirects = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirects_size());
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirects(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 1;
    if (has_crawlstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crawlstatus_);
    }

    // optional int64 minDateToFetch = 3;
    if (has_mindatetofetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mindatetofetch());
    }

    // optional int32 attemptsToFetch = 2;
    if (has_attemptstofetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attemptstofetch());
    }

    // optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 5;
    if (has_fetchertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fetchertype());
    }

    // optional bool isRotten = 6 [default = false];
    if (has_isrotten()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FetchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FetchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FetchResult)
    MergeFrom(*source);
  }
}

void FetchResult::MergeFrom(const FetchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FetchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redirects_.MergeFrom(from.redirects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crawlstatus()->::ru::mail::go::webbase::blobs::CrawlDetails::MergeFrom(from.crawlstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      mindatetofetch_ = from.mindatetofetch_;
    }
    if (cached_has_bits & 0x00000004u) {
      attemptstofetch_ = from.attemptstofetch_;
    }
    if (cached_has_bits & 0x00000008u) {
      fetchertype_ = from.fetchertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      isrotten_ = from.isrotten_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FetchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FetchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchResult::CopyFrom(const FetchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FetchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchResult::IsInitialized() const {
  if (has_crawlstatus()) {
    if (!this->crawlstatus_->IsInitialized()) return false;
  }
  return true;
}

void FetchResult::Swap(FetchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchResult::InternalSwap(FetchResult* other) {
  using std::swap;
  redirects_.InternalSwap(&other->redirects_);
  swap(crawlstatus_, other->crawlstatus_);
  swap(mindatetofetch_, other->mindatetofetch_);
  swap(attemptstofetch_, other->attemptstofetch_);
  swap(fetchertype_, other->fetchertype_);
  swap(isrotten_, other->isrotten_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchResult::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchResult

// optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 1;
bool FetchResult::has_crawlstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FetchResult::set_has_crawlstatus() {
  _has_bits_[0] |= 0x00000001u;
}
void FetchResult::clear_has_crawlstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void FetchResult::clear_crawlstatus() {
  if (crawlstatus_ != NULL) crawlstatus_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
  clear_has_crawlstatus();
}
const ::ru::mail::go::webbase::blobs::CrawlDetails& FetchResult::crawlstatus() const {
  const ::ru::mail::go::webbase::blobs::CrawlDetails* p = crawlstatus_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.crawlStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      &::ru::mail::go::webbase::blobs::_CrawlDetails_default_instance_);
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetchResult::mutable_crawlstatus() {
  set_has_crawlstatus();
  if (crawlstatus_ == NULL) {
    crawlstatus_ = new ::ru::mail::go::webbase::blobs::CrawlDetails;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchResult.crawlStatus)
  return crawlstatus_;
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetchResult::release_crawlstatus() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchResult.crawlStatus)
  clear_has_crawlstatus();
  ::ru::mail::go::webbase::blobs::CrawlDetails* temp = crawlstatus_;
  crawlstatus_ = NULL;
  return temp;
}
void FetchResult::set_allocated_crawlstatus(::ru::mail::go::webbase::blobs::CrawlDetails* crawlstatus) {
  delete crawlstatus_;
  crawlstatus_ = crawlstatus;
  if (crawlstatus) {
    set_has_crawlstatus();
  } else {
    clear_has_crawlstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchResult.crawlStatus)
}

// optional int32 attemptsToFetch = 2;
bool FetchResult::has_attemptstofetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FetchResult::set_has_attemptstofetch() {
  _has_bits_[0] |= 0x00000004u;
}
void FetchResult::clear_has_attemptstofetch() {
  _has_bits_[0] &= ~0x00000004u;
}
void FetchResult::clear_attemptstofetch() {
  attemptstofetch_ = 0;
  clear_has_attemptstofetch();
}
::google::protobuf::int32 FetchResult::attemptstofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.attemptsToFetch)
  return attemptstofetch_;
}
void FetchResult::set_attemptstofetch(::google::protobuf::int32 value) {
  set_has_attemptstofetch();
  attemptstofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.attemptsToFetch)
}

// optional int64 minDateToFetch = 3;
bool FetchResult::has_mindatetofetch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FetchResult::set_has_mindatetofetch() {
  _has_bits_[0] |= 0x00000002u;
}
void FetchResult::clear_has_mindatetofetch() {
  _has_bits_[0] &= ~0x00000002u;
}
void FetchResult::clear_mindatetofetch() {
  mindatetofetch_ = GOOGLE_LONGLONG(0);
  clear_has_mindatetofetch();
}
::google::protobuf::int64 FetchResult::mindatetofetch() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.minDateToFetch)
  return mindatetofetch_;
}
void FetchResult::set_mindatetofetch(::google::protobuf::int64 value) {
  set_has_mindatetofetch();
  mindatetofetch_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.minDateToFetch)
}

// repeated string redirects = 4;
int FetchResult::redirects_size() const {
  return redirects_.size();
}
void FetchResult::clear_redirects() {
  redirects_.Clear();
}
const ::std::string& FetchResult::redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.redirects)
  return redirects_.Get(index);
}
::std::string* FetchResult::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchResult.redirects)
  return redirects_.Mutable(index);
}
void FetchResult::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FetchResult::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
void FetchResult::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
void FetchResult::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
::std::string* FetchResult::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.FetchResult.redirects)
  return redirects_.Add();
}
void FetchResult::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
#if LANG_CXX11
void FetchResult::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
#endif
void FetchResult::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
void FetchResult::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.FetchResult.redirects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FetchResult::redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FetchResult.redirects)
  return redirects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FetchResult::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FetchResult.redirects)
  return &redirects_;
}

// optional .ru.mail.go.webbase.blobs.FetcherType fetcherType = 5;
bool FetchResult::has_fetchertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FetchResult::set_has_fetchertype() {
  _has_bits_[0] |= 0x00000008u;
}
void FetchResult::clear_has_fetchertype() {
  _has_bits_[0] &= ~0x00000008u;
}
void FetchResult::clear_fetchertype() {
  fetchertype_ = 0;
  clear_has_fetchertype();
}
::ru::mail::go::webbase::blobs::FetcherType FetchResult::fetchertype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.fetcherType)
  return static_cast< ::ru::mail::go::webbase::blobs::FetcherType >(fetchertype_);
}
void FetchResult::set_fetchertype(::ru::mail::go::webbase::blobs::FetcherType value) {
  assert(::ru::mail::go::webbase::blobs::FetcherType_IsValid(value));
  set_has_fetchertype();
  fetchertype_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.fetcherType)
}

// optional bool isRotten = 6 [default = false];
bool FetchResult::has_isrotten() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FetchResult::set_has_isrotten() {
  _has_bits_[0] |= 0x00000010u;
}
void FetchResult::clear_has_isrotten() {
  _has_bits_[0] &= ~0x00000010u;
}
void FetchResult::clear_isrotten() {
  isrotten_ = false;
  clear_has_isrotten();
}
bool FetchResult::isrotten() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchResult.isRotten)
  return isrotten_;
}
void FetchResult::set_isrotten(bool value) {
  set_has_isrotten();
  isrotten_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchResult.isRotten)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchBanResult::kSourceUrlFieldNumber;
const int FetchBanResult::kFetchStatusFieldNumber;
const int FetchBanResult::kCrawlStatusFieldNumber;
const int FetchBanResult::kRedirectsFieldNumber;
const int FetchBanResult::kHttpStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchBanResult::FetchBanResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FetchBanResult)
}
FetchBanResult::FetchBanResult(const FetchBanResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      redirects_(from.redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourceurl()) {
    sourceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceurl_);
  }
  fetchstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fetchstatus()) {
    fetchstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetchstatus_);
  }
  if (from.has_crawlstatus()) {
    crawlstatus_ = new ::ru::mail::go::webbase::blobs::CrawlDetails(*from.crawlstatus_);
  } else {
    crawlstatus_ = NULL;
  }
  httpstatuscode_ = from.httpstatuscode_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FetchBanResult)
}

void FetchBanResult::SharedCtor() {
  _cached_size_ = 0;
  sourceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetchstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crawlstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpstatuscode_) -
      reinterpret_cast<char*>(&crawlstatus_)) + sizeof(httpstatuscode_));
}

FetchBanResult::~FetchBanResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FetchBanResult)
  SharedDtor();
}

void FetchBanResult::SharedDtor() {
  sourceurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetchstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crawlstatus_;
}

void FetchBanResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchBanResult::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchBanResult& FetchBanResult::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

FetchBanResult* FetchBanResult::New(::google::protobuf::Arena* arena) const {
  FetchBanResult* n = new FetchBanResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchBanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FetchBanResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sourceurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sourceurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fetchstatus_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fetchstatus_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(crawlstatus_ != NULL);
      crawlstatus_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
    }
  }
  httpstatuscode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchBanResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FetchBanResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceurl().data(), static_cast<int>(this->sourceurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fetchStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fetchstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crawlstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirects(this->redirects_size() - 1).data(),
            static_cast<int>(this->redirects(this->redirects_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FetchBanResult.redirects");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 httpStatusCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_httpstatuscode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpstatuscode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FetchBanResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FetchBanResult)
  return false;
#undef DO_
}

void FetchBanResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FetchBanResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sourceUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceurl().data(), static_cast<int>(this->sourceurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourceurl(), output);
  }

  // optional bytes fetchStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fetchstatus(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->crawlstatus_, output);
  }

  // repeated string redirects = 4;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchBanResult.redirects");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->redirects(i), output);
  }

  // optional int32 httpStatusCode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->httpstatuscode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FetchBanResult)
}

::google::protobuf::uint8* FetchBanResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FetchBanResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sourceUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceurl().data(), static_cast<int>(this->sourceurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourceurl(), target);
  }

  // optional bytes fetchStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fetchstatus(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->crawlstatus_, deterministic, target);
  }

  // repeated string redirects = 4;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FetchBanResult.redirects");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->redirects(i), target);
  }

  // optional int32 httpStatusCode = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->httpstatuscode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FetchBanResult)
  return target;
}

size_t FetchBanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FetchBanResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sourceUrl = 1;
  if (has_sourceurl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceurl());
  }
  // repeated string redirects = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirects_size());
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirects(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional bytes fetchStatus = 2;
    if (has_fetchstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fetchstatus());
    }

    // optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 3;
    if (has_crawlstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crawlstatus_);
    }

    // optional int32 httpStatusCode = 5;
    if (has_httpstatuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpstatuscode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchBanResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FetchBanResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchBanResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchBanResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FetchBanResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FetchBanResult)
    MergeFrom(*source);
  }
}

void FetchBanResult::MergeFrom(const FetchBanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FetchBanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  redirects_.MergeFrom(from.redirects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sourceurl();
      sourceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fetchstatus();
      fetchstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetchstatus_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_crawlstatus()->::ru::mail::go::webbase::blobs::CrawlDetails::MergeFrom(from.crawlstatus());
    }
    if (cached_has_bits & 0x00000008u) {
      httpstatuscode_ = from.httpstatuscode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FetchBanResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FetchBanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchBanResult::CopyFrom(const FetchBanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FetchBanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchBanResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_crawlstatus()) {
    if (!this->crawlstatus_->IsInitialized()) return false;
  }
  return true;
}

void FetchBanResult::Swap(FetchBanResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchBanResult::InternalSwap(FetchBanResult* other) {
  using std::swap;
  redirects_.InternalSwap(&other->redirects_);
  sourceurl_.Swap(&other->sourceurl_);
  fetchstatus_.Swap(&other->fetchstatus_);
  swap(crawlstatus_, other->crawlstatus_);
  swap(httpstatuscode_, other->httpstatuscode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchBanResult::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchBanResult

// required string sourceUrl = 1;
bool FetchBanResult::has_sourceurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FetchBanResult::set_has_sourceurl() {
  _has_bits_[0] |= 0x00000001u;
}
void FetchBanResult::clear_has_sourceurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void FetchBanResult::clear_sourceurl() {
  sourceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourceurl();
}
const ::std::string& FetchBanResult::sourceurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
  return sourceurl_.GetNoArena();
}
void FetchBanResult::set_sourceurl(const ::std::string& value) {
  set_has_sourceurl();
  sourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
}
#if LANG_CXX11
void FetchBanResult::set_sourceurl(::std::string&& value) {
  set_has_sourceurl();
  sourceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
}
#endif
void FetchBanResult::set_sourceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourceurl();
  sourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
}
void FetchBanResult::set_sourceurl(const char* value, size_t size) {
  set_has_sourceurl();
  sourceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
}
::std::string* FetchBanResult::mutable_sourceurl() {
  set_has_sourceurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
  return sourceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchBanResult::release_sourceurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
  clear_has_sourceurl();
  return sourceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchBanResult::set_allocated_sourceurl(::std::string* sourceurl) {
  if (sourceurl != NULL) {
    set_has_sourceurl();
  } else {
    clear_has_sourceurl();
  }
  sourceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchBanResult.sourceUrl)
}

// optional bytes fetchStatus = 2;
bool FetchBanResult::has_fetchstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FetchBanResult::set_has_fetchstatus() {
  _has_bits_[0] |= 0x00000002u;
}
void FetchBanResult::clear_has_fetchstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
void FetchBanResult::clear_fetchstatus() {
  fetchstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fetchstatus();
}
const ::std::string& FetchBanResult::fetchstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
  return fetchstatus_.GetNoArena();
}
void FetchBanResult::set_fetchstatus(const ::std::string& value) {
  set_has_fetchstatus();
  fetchstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
}
#if LANG_CXX11
void FetchBanResult::set_fetchstatus(::std::string&& value) {
  set_has_fetchstatus();
  fetchstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
}
#endif
void FetchBanResult::set_fetchstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fetchstatus();
  fetchstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
}
void FetchBanResult::set_fetchstatus(const void* value, size_t size) {
  set_has_fetchstatus();
  fetchstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
}
::std::string* FetchBanResult::mutable_fetchstatus() {
  set_has_fetchstatus();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
  return fetchstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FetchBanResult::release_fetchstatus() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
  clear_has_fetchstatus();
  return fetchstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FetchBanResult::set_allocated_fetchstatus(::std::string* fetchstatus) {
  if (fetchstatus != NULL) {
    set_has_fetchstatus();
  } else {
    clear_has_fetchstatus();
  }
  fetchstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fetchstatus);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchBanResult.fetchStatus)
}

// optional .ru.mail.go.webbase.blobs.CrawlDetails crawlStatus = 3;
bool FetchBanResult::has_crawlstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FetchBanResult::set_has_crawlstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void FetchBanResult::clear_has_crawlstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void FetchBanResult::clear_crawlstatus() {
  if (crawlstatus_ != NULL) crawlstatus_->::ru::mail::go::webbase::blobs::CrawlDetails::Clear();
  clear_has_crawlstatus();
}
const ::ru::mail::go::webbase::blobs::CrawlDetails& FetchBanResult::crawlstatus() const {
  const ::ru::mail::go::webbase::blobs::CrawlDetails* p = crawlstatus_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchBanResult.crawlStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::CrawlDetails*>(
      &::ru::mail::go::webbase::blobs::_CrawlDetails_default_instance_);
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetchBanResult::mutable_crawlstatus() {
  set_has_crawlstatus();
  if (crawlstatus_ == NULL) {
    crawlstatus_ = new ::ru::mail::go::webbase::blobs::CrawlDetails;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchBanResult.crawlStatus)
  return crawlstatus_;
}
::ru::mail::go::webbase::blobs::CrawlDetails* FetchBanResult::release_crawlstatus() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FetchBanResult.crawlStatus)
  clear_has_crawlstatus();
  ::ru::mail::go::webbase::blobs::CrawlDetails* temp = crawlstatus_;
  crawlstatus_ = NULL;
  return temp;
}
void FetchBanResult::set_allocated_crawlstatus(::ru::mail::go::webbase::blobs::CrawlDetails* crawlstatus) {
  delete crawlstatus_;
  crawlstatus_ = crawlstatus;
  if (crawlstatus) {
    set_has_crawlstatus();
  } else {
    clear_has_crawlstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FetchBanResult.crawlStatus)
}

// repeated string redirects = 4;
int FetchBanResult::redirects_size() const {
  return redirects_.size();
}
void FetchBanResult::clear_redirects() {
  redirects_.Clear();
}
const ::std::string& FetchBanResult::redirects(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  return redirects_.Get(index);
}
::std::string* FetchBanResult::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  return redirects_.Mutable(index);
}
void FetchBanResult::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FetchBanResult::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
void FetchBanResult::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
void FetchBanResult::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
::std::string* FetchBanResult::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  return redirects_.Add();
}
void FetchBanResult::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
#if LANG_CXX11
void FetchBanResult::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
#endif
void FetchBanResult::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
void FetchBanResult::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FetchBanResult::redirects() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  return redirects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FetchBanResult::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FetchBanResult.redirects)
  return &redirects_;
}

// optional int32 httpStatusCode = 5;
bool FetchBanResult::has_httpstatuscode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FetchBanResult::set_has_httpstatuscode() {
  _has_bits_[0] |= 0x00000008u;
}
void FetchBanResult::clear_has_httpstatuscode() {
  _has_bits_[0] &= ~0x00000008u;
}
void FetchBanResult::clear_httpstatuscode() {
  httpstatuscode_ = 0;
  clear_has_httpstatuscode();
}
::google::protobuf::int32 FetchBanResult::httpstatuscode() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FetchBanResult.httpStatusCode)
  return httpstatuscode_;
}
void FetchBanResult::set_httpstatuscode(::google::protobuf::int32 value) {
  set_has_httpstatuscode();
  httpstatuscode_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FetchBanResult.httpStatusCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicationMarkupRecord::kSourceFieldNumber;
const int PublicationMarkupRecord::kValueFieldNumber;
const int PublicationMarkupRecord::kParsedDateFieldNumber;
const int PublicationMarkupRecord::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicationMarkupRecord::PublicationMarkupRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
}
PublicationMarkupRecord::PublicationMarkupRecord(const PublicationMarkupRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content_type()) {
    content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
  }
  ::memcpy(&parsed_date_, &from.parsed_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&parsed_date_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
}

void PublicationMarkupRecord::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parsed_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&parsed_date_)) + sizeof(source_));
}

PublicationMarkupRecord::~PublicationMarkupRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  SharedDtor();
}

void PublicationMarkupRecord::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicationMarkupRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicationMarkupRecord::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicationMarkupRecord& PublicationMarkupRecord::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublicationMarkupRecord* PublicationMarkupRecord::New(::google::protobuf::Arena* arena) const {
  PublicationMarkupRecord* n = new PublicationMarkupRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicationMarkupRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&parsed_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&parsed_date_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicationMarkupRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PublicationMarkupRecord.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 parsed_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_parsed_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parsed_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_type().data(), static_cast<int>(this->content_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  return false;
#undef DO_
}

void PublicationMarkupRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PublicationMarkupRecord.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // required int64 parsed_date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parsed_date(), output);
  }

  // optional string content_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
}

::google::protobuf::uint8* PublicationMarkupRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PublicationMarkupRecord.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // required int64 parsed_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parsed_date(), target);
  }

  // optional string content_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), static_cast<int>(this->content_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  return target;
}

size_t PublicationMarkupRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  size_t total_size = 0;

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_parsed_date()) {
    // required int64 parsed_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parsed_date());
  }

  if (has_source()) {
    // required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  return total_size;
}
size_t PublicationMarkupRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required int64 parsed_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parsed_date());

    // required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string content_type = 4;
  if (has_content_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicationMarkupRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicationMarkupRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicationMarkupRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
    MergeFrom(*source);
  }
}

void PublicationMarkupRecord::MergeFrom(const PublicationMarkupRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content_type();
      content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      parsed_date_ = from.parsed_date_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublicationMarkupRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicationMarkupRecord::CopyFrom(const PublicationMarkupRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PublicationMarkupRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicationMarkupRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void PublicationMarkupRecord::Swap(PublicationMarkupRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicationMarkupRecord::InternalSwap(PublicationMarkupRecord* other) {
  using std::swap;
  value_.Swap(&other->value_);
  content_type_.Swap(&other->content_type_);
  swap(parsed_date_, other->parsed_date_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicationMarkupRecord::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicationMarkupRecord

// required .ru.mail.go.webbase.blobs.PublicationMarkupRecord.Source source = 1;
bool PublicationMarkupRecord::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PublicationMarkupRecord::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
void PublicationMarkupRecord::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
void PublicationMarkupRecord::clear_source() {
  source_ = 0;
  clear_has_source();
}
::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source PublicationMarkupRecord::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PublicationMarkupRecord.source)
  return static_cast< ::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source >(source_);
}
void PublicationMarkupRecord::set_source(::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source value) {
  assert(::ru::mail::go::webbase::blobs::PublicationMarkupRecord_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PublicationMarkupRecord.source)
}

// required string value = 2;
bool PublicationMarkupRecord::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublicationMarkupRecord::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void PublicationMarkupRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublicationMarkupRecord::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& PublicationMarkupRecord::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
  return value_.GetNoArena();
}
void PublicationMarkupRecord::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
}
#if LANG_CXX11
void PublicationMarkupRecord::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
}
#endif
void PublicationMarkupRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
}
void PublicationMarkupRecord::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
}
::std::string* PublicationMarkupRecord::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicationMarkupRecord::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicationMarkupRecord::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PublicationMarkupRecord.value)
}

// required int64 parsed_date = 3;
bool PublicationMarkupRecord::has_parsed_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublicationMarkupRecord::set_has_parsed_date() {
  _has_bits_[0] |= 0x00000004u;
}
void PublicationMarkupRecord::clear_has_parsed_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublicationMarkupRecord::clear_parsed_date() {
  parsed_date_ = GOOGLE_LONGLONG(0);
  clear_has_parsed_date();
}
::google::protobuf::int64 PublicationMarkupRecord::parsed_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PublicationMarkupRecord.parsed_date)
  return parsed_date_;
}
void PublicationMarkupRecord::set_parsed_date(::google::protobuf::int64 value) {
  set_has_parsed_date();
  parsed_date_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PublicationMarkupRecord.parsed_date)
}

// optional string content_type = 4;
bool PublicationMarkupRecord::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublicationMarkupRecord::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
void PublicationMarkupRecord::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublicationMarkupRecord::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content_type();
}
const ::std::string& PublicationMarkupRecord::content_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
  return content_type_.GetNoArena();
}
void PublicationMarkupRecord::set_content_type(const ::std::string& value) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
}
#if LANG_CXX11
void PublicationMarkupRecord::set_content_type(::std::string&& value) {
  set_has_content_type();
  content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
}
#endif
void PublicationMarkupRecord::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
}
void PublicationMarkupRecord::set_content_type(const char* value, size_t size) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
}
::std::string* PublicationMarkupRecord::mutable_content_type() {
  set_has_content_type();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicationMarkupRecord::release_content_type() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
  clear_has_content_type();
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicationMarkupRecord::set_allocated_content_type(::std::string* content_type) {
  if (content_type != NULL) {
    set_has_content_type();
  } else {
    clear_has_content_type();
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PublicationMarkupRecord.content_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicationMarkup::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicationMarkup::PublicationMarkup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fetch_5flist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PublicationMarkup)
}
PublicationMarkup::PublicationMarkup(const PublicationMarkup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PublicationMarkup)
}

void PublicationMarkup::SharedCtor() {
  _cached_size_ = 0;
}

PublicationMarkup::~PublicationMarkup() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PublicationMarkup)
  SharedDtor();
}

void PublicationMarkup::SharedDtor() {
}

void PublicationMarkup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicationMarkup::descriptor() {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicationMarkup& PublicationMarkup::default_instance() {
  protobuf_fetch_5flist_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublicationMarkup* PublicationMarkup::New(::google::protobuf::Arena* arena) const {
  PublicationMarkup* n = new PublicationMarkup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicationMarkup::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublicationMarkup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.PublicationMarkupRecord records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PublicationMarkup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PublicationMarkup)
  return false;
#undef DO_
}

void PublicationMarkup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.PublicationMarkupRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PublicationMarkup)
}

::google::protobuf::uint8* PublicationMarkup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.PublicationMarkupRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PublicationMarkup)
  return target;
}

size_t PublicationMarkup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.PublicationMarkupRecord records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicationMarkup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicationMarkup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicationMarkup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PublicationMarkup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PublicationMarkup)
    MergeFrom(*source);
  }
}

void PublicationMarkup::MergeFrom(const PublicationMarkup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void PublicationMarkup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicationMarkup::CopyFrom(const PublicationMarkup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PublicationMarkup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicationMarkup::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void PublicationMarkup::Swap(PublicationMarkup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicationMarkup::InternalSwap(PublicationMarkup* other) {
  using std::swap;
  records_.InternalSwap(&other->records_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicationMarkup::GetMetadata() const {
  protobuf_fetch_5flist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fetch_5flist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicationMarkup

// repeated .ru.mail.go.webbase.blobs.PublicationMarkupRecord records = 1;
int PublicationMarkup::records_size() const {
  return records_.size();
}
void PublicationMarkup::clear_records() {
  records_.Clear();
}
const ::ru::mail::go::webbase::blobs::PublicationMarkupRecord& PublicationMarkup::records(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PublicationMarkup.records)
  return records_.Get(index);
}
::ru::mail::go::webbase::blobs::PublicationMarkupRecord* PublicationMarkup::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PublicationMarkup.records)
  return records_.Mutable(index);
}
::ru::mail::go::webbase::blobs::PublicationMarkupRecord* PublicationMarkup::add_records() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PublicationMarkup.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PublicationMarkupRecord >*
PublicationMarkup::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PublicationMarkup.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::PublicationMarkupRecord >&
PublicationMarkup::records() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PublicationMarkup.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kBatchingResultFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::EnumTypeTraits< ::ru::mail::go::webbase::blobs::BatchingResult, ::ru::mail::go::webbase::blobs::BatchingResult_IsValid>, 14, false >
  FetchUrl::batchingResult(kBatchingResultFieldNumber, static_cast< ::ru::mail::go::webbase::blobs::BatchingResult >(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kBatchingTsFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  FetchUrl::batchingTs(kBatchingTsFieldNumber, GOOGLE_LONGLONG(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kCheckSumFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  FetchUrl::checkSum(kCheckSumFieldNumber, GOOGLE_LONGLONG(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kCheckSumTsFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  FetchUrl::checkSumTs(kCheckSumTsFieldNumber, GOOGLE_LONGLONG(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kVideoBanSourceFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::EnumTypeTraits< ::ru::mail::go::webbase::blobs::VideoBanSource, ::ru::mail::go::webbase::blobs::VideoBanSource_IsValid>, 14, false >
  FetchUrl::videoBanSource(kVideoBanSourceFieldNumber, static_cast< ::ru::mail::go::webbase::blobs::VideoBanSource >(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kYoutubeForVideoSearchFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  FetchUrl::youtubeForVideoSearch(kYoutubeForVideoSearchFieldNumber, false);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kYouTubeWebSearchFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::YouTubeWebSearch >, 11, false >
  FetchUrl::youTubeWebSearch(kYouTubeWebSearchFieldNumber, *::ru::mail::go::webbase::blobs::YouTubeWebSearch::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kYouTubeCommonFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::YouTubeCommon >, 11, false >
  FetchUrl::youTubeCommon(kYouTubeCommonFieldNumber, *::ru::mail::go::webbase::blobs::YouTubeCommon::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kMicrobaseIDFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  FetchUrl::microbaseID(kMicrobaseIDFieldNumber, 0);
const ::std::string FetchUrl_routeKey_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kRouteKeyFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  FetchUrl::routeKey(kRouteKeyFieldNumber, FetchUrl_routeKey_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kCrawlHistoryFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::CrawlHistory >, 11, false >
  FetchUrl::crawlHistory(kCrawlHistoryFieldNumber, *::ru::mail::go::webbase::blobs::CrawlHistory::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kReleaseDateFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  FetchUrl::releaseDate(kReleaseDateFieldNumber, GOOGLE_LONGLONG(0));
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kDepthFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  FetchUrl::depth(kDepthFieldNumber, 0);
const ::std::string FetchUrl_sourceUrl_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kSourceUrlFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  FetchUrl::sourceUrl(kSourceUrlFieldNumber, FetchUrl_sourceUrl_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kSiliconUrlsFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::ru::mail::go::webbase::blobs::SiliconFetchUrl >, 11, false >
  FetchUrl::siliconUrls(kSiliconUrlsFieldNumber, *::ru::mail::go::webbase::blobs::SiliconFetchUrl::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kOkApiFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::OkApiMessage >, 11, false >
  FetchUrl::okApi(kOkApiFieldNumber, *::ru::mail::go::webbase::blobs::OkApiMessage::internal_default_instance());
const ::std::string FetchUrl_batchPool_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUrl::kBatchPoolFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ru::mail::go::webbase::blobs::FetchUrl,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  FetchUrl::batchPool(kBatchPoolFieldNumber, FetchUrl_batchPool_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
