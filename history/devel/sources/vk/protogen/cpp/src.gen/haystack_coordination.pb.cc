// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haystack_coordination.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "haystack_coordination.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace haystack {
namespace pb {
class MicrobasesList_MicrobaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MicrobasesList_Microbase>
     _instance;
} _MicrobasesList_Microbase_default_instance_;
class MicrobasesListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MicrobasesList>
     _instance;
} _MicrobasesList_default_instance_;

namespace protobuf_haystack_5fcoordination_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList_Microbase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList_Microbase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList_Microbase, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList_Microbase, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList_Microbase, tag_hash_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList, microbases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MicrobasesList, host_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(MicrobasesList_Microbase)},
  { 11, 18, sizeof(MicrobasesList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MicrobasesList_Microbase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MicrobasesList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "haystack_coordination.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MicrobasesList_Microbase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MicrobasesList_Microbase_default_instance_);_MicrobasesList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MicrobasesList_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033haystack_coordination.proto\022\013haystack."
      "pb\"\225\001\n\016MicrobasesList\0229\n\nmicrobases\030\001 \003("
      "\0132%.haystack.pb.MicrobasesList.Microbase"
      "\022\014\n\004host\030\002 \001(\t\032:\n\tMicrobase\022\n\n\002id\030\001 \002(\005\022"
      "\017\n\007version\030\002 \001(\005\022\020\n\010tag_hash\030\003 \001(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "haystack_coordination.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_haystack_5fcoordination_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicrobasesList_Microbase::kIdFieldNumber;
const int MicrobasesList_Microbase::kVersionFieldNumber;
const int MicrobasesList_Microbase::kTagHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicrobasesList_Microbase::MicrobasesList_Microbase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_haystack_5fcoordination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:haystack.pb.MicrobasesList.Microbase)
}
MicrobasesList_Microbase::MicrobasesList_Microbase(const MicrobasesList_Microbase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_hash_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tag_hash_));
  // @@protoc_insertion_point(copy_constructor:haystack.pb.MicrobasesList.Microbase)
}

void MicrobasesList_Microbase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_hash_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tag_hash_));
}

MicrobasesList_Microbase::~MicrobasesList_Microbase() {
  // @@protoc_insertion_point(destructor:haystack.pb.MicrobasesList.Microbase)
  SharedDtor();
}

void MicrobasesList_Microbase::SharedDtor() {
}

void MicrobasesList_Microbase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MicrobasesList_Microbase::descriptor() {
  protobuf_haystack_5fcoordination_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_haystack_5fcoordination_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MicrobasesList_Microbase& MicrobasesList_Microbase::default_instance() {
  protobuf_haystack_5fcoordination_2eproto::InitDefaults();
  return *internal_default_instance();
}

MicrobasesList_Microbase* MicrobasesList_Microbase::New(::google::protobuf::Arena* arena) const {
  MicrobasesList_Microbase* n = new MicrobasesList_Microbase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MicrobasesList_Microbase::Clear() {
// @@protoc_insertion_point(message_clear_start:haystack.pb.MicrobasesList.Microbase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_hash_) -
        reinterpret_cast<char*>(&id_)) + sizeof(tag_hash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MicrobasesList_Microbase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:haystack.pb.MicrobasesList.Microbase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tag_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tag_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:haystack.pb.MicrobasesList.Microbase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:haystack.pb.MicrobasesList.Microbase)
  return false;
#undef DO_
}

void MicrobasesList_Microbase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:haystack.pb.MicrobasesList.Microbase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional int64 tag_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tag_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:haystack.pb.MicrobasesList.Microbase)
}

::google::protobuf::uint8* MicrobasesList_Microbase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:haystack.pb.MicrobasesList.Microbase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional int64 tag_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tag_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:haystack.pb.MicrobasesList.Microbase)
  return target;
}

size_t MicrobasesList_Microbase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:haystack.pb.MicrobasesList.Microbase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int64 tag_hash = 3;
    if (has_tag_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tag_hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MicrobasesList_Microbase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:haystack.pb.MicrobasesList.Microbase)
  GOOGLE_DCHECK_NE(&from, this);
  const MicrobasesList_Microbase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MicrobasesList_Microbase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:haystack.pb.MicrobasesList.Microbase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:haystack.pb.MicrobasesList.Microbase)
    MergeFrom(*source);
  }
}

void MicrobasesList_Microbase::MergeFrom(const MicrobasesList_Microbase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:haystack.pb.MicrobasesList.Microbase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag_hash_ = from.tag_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicrobasesList_Microbase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:haystack.pb.MicrobasesList.Microbase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicrobasesList_Microbase::CopyFrom(const MicrobasesList_Microbase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:haystack.pb.MicrobasesList.Microbase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicrobasesList_Microbase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MicrobasesList_Microbase::Swap(MicrobasesList_Microbase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicrobasesList_Microbase::InternalSwap(MicrobasesList_Microbase* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(version_, other->version_);
  swap(tag_hash_, other->tag_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MicrobasesList_Microbase::GetMetadata() const {
  protobuf_haystack_5fcoordination_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_haystack_5fcoordination_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MicrobasesList_Microbase

// required int32 id = 1;
bool MicrobasesList_Microbase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MicrobasesList_Microbase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MicrobasesList_Microbase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MicrobasesList_Microbase::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 MicrobasesList_Microbase::id() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.id)
  return id_;
}
void MicrobasesList_Microbase::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.id)
}

// optional int32 version = 2;
bool MicrobasesList_Microbase::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MicrobasesList_Microbase::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void MicrobasesList_Microbase::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void MicrobasesList_Microbase::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 MicrobasesList_Microbase::version() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.version)
  return version_;
}
void MicrobasesList_Microbase::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.version)
}

// optional int64 tag_hash = 3;
bool MicrobasesList_Microbase::has_tag_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MicrobasesList_Microbase::set_has_tag_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void MicrobasesList_Microbase::clear_has_tag_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void MicrobasesList_Microbase::clear_tag_hash() {
  tag_hash_ = GOOGLE_LONGLONG(0);
  clear_has_tag_hash();
}
::google::protobuf::int64 MicrobasesList_Microbase::tag_hash() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.tag_hash)
  return tag_hash_;
}
void MicrobasesList_Microbase::set_tag_hash(::google::protobuf::int64 value) {
  set_has_tag_hash();
  tag_hash_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.tag_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicrobasesList::kMicrobasesFieldNumber;
const int MicrobasesList::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicrobasesList::MicrobasesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_haystack_5fcoordination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:haystack.pb.MicrobasesList)
}
MicrobasesList::MicrobasesList(const MicrobasesList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      microbases_(from.microbases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:haystack.pb.MicrobasesList)
}

void MicrobasesList::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MicrobasesList::~MicrobasesList() {
  // @@protoc_insertion_point(destructor:haystack.pb.MicrobasesList)
  SharedDtor();
}

void MicrobasesList::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MicrobasesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MicrobasesList::descriptor() {
  protobuf_haystack_5fcoordination_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_haystack_5fcoordination_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MicrobasesList& MicrobasesList::default_instance() {
  protobuf_haystack_5fcoordination_2eproto::InitDefaults();
  return *internal_default_instance();
}

MicrobasesList* MicrobasesList::New(::google::protobuf::Arena* arena) const {
  MicrobasesList* n = new MicrobasesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MicrobasesList::Clear() {
// @@protoc_insertion_point(message_clear_start:haystack.pb.MicrobasesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  microbases_.Clear();
  if (has_host()) {
    GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*host_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MicrobasesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:haystack.pb.MicrobasesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_microbases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "haystack.pb.MicrobasesList.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:haystack.pb.MicrobasesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:haystack.pb.MicrobasesList)
  return false;
#undef DO_
}

void MicrobasesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:haystack.pb.MicrobasesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->microbases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->microbases(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "haystack.pb.MicrobasesList.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:haystack.pb.MicrobasesList)
}

::google::protobuf::uint8* MicrobasesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:haystack.pb.MicrobasesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->microbases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->microbases(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "haystack.pb.MicrobasesList.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:haystack.pb.MicrobasesList)
  return target;
}

size_t MicrobasesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:haystack.pb.MicrobasesList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->microbases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->microbases(static_cast<int>(i)));
    }
  }

  // optional string host = 2;
  if (has_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MicrobasesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:haystack.pb.MicrobasesList)
  GOOGLE_DCHECK_NE(&from, this);
  const MicrobasesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MicrobasesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:haystack.pb.MicrobasesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:haystack.pb.MicrobasesList)
    MergeFrom(*source);
  }
}

void MicrobasesList::MergeFrom(const MicrobasesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:haystack.pb.MicrobasesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  microbases_.MergeFrom(from.microbases_);
  if (from.has_host()) {
    set_has_host();
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void MicrobasesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:haystack.pb.MicrobasesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicrobasesList::CopyFrom(const MicrobasesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:haystack.pb.MicrobasesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicrobasesList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->microbases())) return false;
  return true;
}

void MicrobasesList::Swap(MicrobasesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicrobasesList::InternalSwap(MicrobasesList* other) {
  using std::swap;
  microbases_.InternalSwap(&other->microbases_);
  host_.Swap(&other->host_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MicrobasesList::GetMetadata() const {
  protobuf_haystack_5fcoordination_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_haystack_5fcoordination_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MicrobasesList

// repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
int MicrobasesList::microbases_size() const {
  return microbases_.size();
}
void MicrobasesList::clear_microbases() {
  microbases_.Clear();
}
const ::haystack::pb::MicrobasesList_Microbase& MicrobasesList::microbases(int index) const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.microbases)
  return microbases_.Get(index);
}
::haystack::pb::MicrobasesList_Microbase* MicrobasesList::mutable_microbases(int index) {
  // @@protoc_insertion_point(field_mutable:haystack.pb.MicrobasesList.microbases)
  return microbases_.Mutable(index);
}
::haystack::pb::MicrobasesList_Microbase* MicrobasesList::add_microbases() {
  // @@protoc_insertion_point(field_add:haystack.pb.MicrobasesList.microbases)
  return microbases_.Add();
}
::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >*
MicrobasesList::mutable_microbases() {
  // @@protoc_insertion_point(field_mutable_list:haystack.pb.MicrobasesList.microbases)
  return &microbases_;
}
const ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >&
MicrobasesList::microbases() const {
  // @@protoc_insertion_point(field_list:haystack.pb.MicrobasesList.microbases)
  return microbases_;
}

// optional string host = 2;
bool MicrobasesList::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MicrobasesList::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void MicrobasesList::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void MicrobasesList::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& MicrobasesList::host() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.host)
  return host_.GetNoArena();
}
void MicrobasesList::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.host)
}
#if LANG_CXX11
void MicrobasesList::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:haystack.pb.MicrobasesList.host)
}
#endif
void MicrobasesList::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:haystack.pb.MicrobasesList.host)
}
void MicrobasesList::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:haystack.pb.MicrobasesList.host)
}
::std::string* MicrobasesList::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:haystack.pb.MicrobasesList.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MicrobasesList::release_host() {
  // @@protoc_insertion_point(field_release:haystack.pb.MicrobasesList.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MicrobasesList::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:haystack.pb.MicrobasesList.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace haystack

// @@protoc_insertion_point(global_scope)
