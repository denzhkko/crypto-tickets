// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haystack_coordination.proto

#ifndef PROTOBUF_haystack_5fcoordination_2eproto__INCLUDED
#define PROTOBUF_haystack_5fcoordination_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace haystack {
namespace pb {
class MicrobasesList;
class MicrobasesListDefaultTypeInternal;
extern MicrobasesListDefaultTypeInternal _MicrobasesList_default_instance_;
class MicrobasesList_Microbase;
class MicrobasesList_MicrobaseDefaultTypeInternal;
extern MicrobasesList_MicrobaseDefaultTypeInternal _MicrobasesList_Microbase_default_instance_;
}  // namespace pb
}  // namespace haystack

namespace haystack {
namespace pb {

namespace protobuf_haystack_5fcoordination_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_haystack_5fcoordination_2eproto

// ===================================================================

class MicrobasesList_Microbase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:haystack.pb.MicrobasesList.Microbase) */ {
 public:
  MicrobasesList_Microbase();
  virtual ~MicrobasesList_Microbase();

  MicrobasesList_Microbase(const MicrobasesList_Microbase& from);

  inline MicrobasesList_Microbase& operator=(const MicrobasesList_Microbase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MicrobasesList_Microbase(MicrobasesList_Microbase&& from) noexcept
    : MicrobasesList_Microbase() {
    *this = ::std::move(from);
  }

  inline MicrobasesList_Microbase& operator=(MicrobasesList_Microbase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MicrobasesList_Microbase& default_instance();

  static inline const MicrobasesList_Microbase* internal_default_instance() {
    return reinterpret_cast<const MicrobasesList_Microbase*>(
               &_MicrobasesList_Microbase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MicrobasesList_Microbase* other);
  friend void swap(MicrobasesList_Microbase& a, MicrobasesList_Microbase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MicrobasesList_Microbase* New() const PROTOBUF_FINAL { return New(NULL); }

  MicrobasesList_Microbase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MicrobasesList_Microbase& from);
  void MergeFrom(const MicrobasesList_Microbase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MicrobasesList_Microbase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int64 tag_hash = 3;
  bool has_tag_hash() const;
  void clear_tag_hash();
  static const int kTagHashFieldNumber = 3;
  ::google::protobuf::int64 tag_hash() const;
  void set_tag_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:haystack.pb.MicrobasesList.Microbase)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_version();
  void clear_has_version();
  void set_has_tag_hash();
  void clear_has_tag_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int64 tag_hash_;
  friend struct protobuf_haystack_5fcoordination_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MicrobasesList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:haystack.pb.MicrobasesList) */ {
 public:
  MicrobasesList();
  virtual ~MicrobasesList();

  MicrobasesList(const MicrobasesList& from);

  inline MicrobasesList& operator=(const MicrobasesList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MicrobasesList(MicrobasesList&& from) noexcept
    : MicrobasesList() {
    *this = ::std::move(from);
  }

  inline MicrobasesList& operator=(MicrobasesList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MicrobasesList& default_instance();

  static inline const MicrobasesList* internal_default_instance() {
    return reinterpret_cast<const MicrobasesList*>(
               &_MicrobasesList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MicrobasesList* other);
  friend void swap(MicrobasesList& a, MicrobasesList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MicrobasesList* New() const PROTOBUF_FINAL { return New(NULL); }

  MicrobasesList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MicrobasesList& from);
  void MergeFrom(const MicrobasesList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MicrobasesList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MicrobasesList_Microbase Microbase;

  // accessors -------------------------------------------------------

  // repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
  int microbases_size() const;
  void clear_microbases();
  static const int kMicrobasesFieldNumber = 1;
  const ::haystack::pb::MicrobasesList_Microbase& microbases(int index) const;
  ::haystack::pb::MicrobasesList_Microbase* mutable_microbases(int index);
  ::haystack::pb::MicrobasesList_Microbase* add_microbases();
  ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >*
      mutable_microbases();
  const ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >&
      microbases() const;

  // optional string host = 2;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // @@protoc_insertion_point(class_scope:haystack.pb.MicrobasesList)
 private:
  void set_has_host();
  void clear_has_host();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase > microbases_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  friend struct protobuf_haystack_5fcoordination_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MicrobasesList_Microbase

// required int32 id = 1;
inline bool MicrobasesList_Microbase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MicrobasesList_Microbase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MicrobasesList_Microbase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MicrobasesList_Microbase::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MicrobasesList_Microbase::id() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.id)
  return id_;
}
inline void MicrobasesList_Microbase::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.id)
}

// optional int32 version = 2;
inline bool MicrobasesList_Microbase::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MicrobasesList_Microbase::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MicrobasesList_Microbase::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MicrobasesList_Microbase::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 MicrobasesList_Microbase::version() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.version)
  return version_;
}
inline void MicrobasesList_Microbase::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.version)
}

// optional int64 tag_hash = 3;
inline bool MicrobasesList_Microbase::has_tag_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MicrobasesList_Microbase::set_has_tag_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MicrobasesList_Microbase::clear_has_tag_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MicrobasesList_Microbase::clear_tag_hash() {
  tag_hash_ = GOOGLE_LONGLONG(0);
  clear_has_tag_hash();
}
inline ::google::protobuf::int64 MicrobasesList_Microbase::tag_hash() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.Microbase.tag_hash)
  return tag_hash_;
}
inline void MicrobasesList_Microbase::set_tag_hash(::google::protobuf::int64 value) {
  set_has_tag_hash();
  tag_hash_ = value;
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.Microbase.tag_hash)
}

// -------------------------------------------------------------------

// MicrobasesList

// repeated .haystack.pb.MicrobasesList.Microbase microbases = 1;
inline int MicrobasesList::microbases_size() const {
  return microbases_.size();
}
inline void MicrobasesList::clear_microbases() {
  microbases_.Clear();
}
inline const ::haystack::pb::MicrobasesList_Microbase& MicrobasesList::microbases(int index) const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.microbases)
  return microbases_.Get(index);
}
inline ::haystack::pb::MicrobasesList_Microbase* MicrobasesList::mutable_microbases(int index) {
  // @@protoc_insertion_point(field_mutable:haystack.pb.MicrobasesList.microbases)
  return microbases_.Mutable(index);
}
inline ::haystack::pb::MicrobasesList_Microbase* MicrobasesList::add_microbases() {
  // @@protoc_insertion_point(field_add:haystack.pb.MicrobasesList.microbases)
  return microbases_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >*
MicrobasesList::mutable_microbases() {
  // @@protoc_insertion_point(field_mutable_list:haystack.pb.MicrobasesList.microbases)
  return &microbases_;
}
inline const ::google::protobuf::RepeatedPtrField< ::haystack::pb::MicrobasesList_Microbase >&
MicrobasesList::microbases() const {
  // @@protoc_insertion_point(field_list:haystack.pb.MicrobasesList.microbases)
  return microbases_;
}

// optional string host = 2;
inline bool MicrobasesList::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MicrobasesList::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MicrobasesList::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MicrobasesList::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& MicrobasesList::host() const {
  // @@protoc_insertion_point(field_get:haystack.pb.MicrobasesList.host)
  return host_.GetNoArena();
}
inline void MicrobasesList::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:haystack.pb.MicrobasesList.host)
}
#if LANG_CXX11
inline void MicrobasesList::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:haystack.pb.MicrobasesList.host)
}
#endif
inline void MicrobasesList::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:haystack.pb.MicrobasesList.host)
}
inline void MicrobasesList::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:haystack.pb.MicrobasesList.host)
}
inline ::std::string* MicrobasesList::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:haystack.pb.MicrobasesList.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MicrobasesList::release_host() {
  // @@protoc_insertion_point(field_release:haystack.pb.MicrobasesList.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MicrobasesList::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:haystack.pb.MicrobasesList.host)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace haystack

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_haystack_5fcoordination_2eproto__INCLUDED
