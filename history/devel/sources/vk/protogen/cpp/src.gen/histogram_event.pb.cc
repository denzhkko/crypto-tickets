// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "histogram_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class HistogramEventProto_BucketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HistogramEventProto_Bucket>
     _instance;
} _HistogramEventProto_Bucket_default_instance_;
class HistogramEventProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HistogramEventProto>
     _instance;
} _HistogramEventProto_default_instance_;

namespace protobuf_histogram_5fevent_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, bucket_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto_Bucket, count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto, name_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto, sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramEventProto, bucket_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(HistogramEventProto_Bucket)},
  { 13, 21, sizeof(HistogramEventProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistogramEventProto_Bucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HistogramEventProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "histogram_event.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HistogramEventProto_Bucket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HistogramEventProto_Bucket_default_instance_);_HistogramEventProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HistogramEventProto_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025histogram_event.proto\022\007metrics\"\272\001\n\023His"
      "togramEventProto\022\021\n\tname_hash\030\001 \001(\006\022\013\n\003s"
      "um\030\002 \001(\003\0223\n\006bucket\030\003 \003(\0132#.metrics.Histo"
      "gramEventProto.Bucket\032N\n\006Bucket\022\013\n\003min\030\001"
      " \001(\003\022\013\n\003max\030\002 \001(\003\022\030\n\014bucket_index\030\003 \001(\005B"
      "\002\030\001\022\020\n\005count\030\004 \001(\003:\0011B7\n\037org.chromium.co"
      "mponents.metricsB\024HistogramEventProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "histogram_event.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_histogram_5fevent_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistogramEventProto_Bucket::kMinFieldNumber;
const int HistogramEventProto_Bucket::kMaxFieldNumber;
const int HistogramEventProto_Bucket::kBucketIndexFieldNumber;
const int HistogramEventProto_Bucket::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistogramEventProto_Bucket::HistogramEventProto_Bucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_histogram_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.HistogramEventProto.Bucket)
}
HistogramEventProto_Bucket::HistogramEventProto_Bucket(const HistogramEventProto_Bucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&min_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:metrics.HistogramEventProto.Bucket)
}

void HistogramEventProto_Bucket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_index_) -
      reinterpret_cast<char*>(&min_)) + sizeof(bucket_index_));
  count_ = GOOGLE_LONGLONG(1);
}

HistogramEventProto_Bucket::~HistogramEventProto_Bucket() {
  // @@protoc_insertion_point(destructor:metrics.HistogramEventProto.Bucket)
  SharedDtor();
}

void HistogramEventProto_Bucket::SharedDtor() {
}

void HistogramEventProto_Bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramEventProto_Bucket::descriptor() {
  protobuf_histogram_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_histogram_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistogramEventProto_Bucket& HistogramEventProto_Bucket::default_instance() {
  protobuf_histogram_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistogramEventProto_Bucket* HistogramEventProto_Bucket::New(::google::protobuf::Arena* arena) const {
  HistogramEventProto_Bucket* n = new HistogramEventProto_Bucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistogramEventProto_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.HistogramEventProto.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bucket_index_) -
        reinterpret_cast<char*>(&min_)) + sizeof(bucket_index_));
    count_ = GOOGLE_LONGLONG(1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistogramEventProto_Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.HistogramEventProto.Bucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bucket_index = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bucket_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.HistogramEventProto.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.HistogramEventProto.Bucket)
  return false;
#undef DO_
}

void HistogramEventProto_Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.HistogramEventProto.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min(), output);
  }

  // optional int64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max(), output);
  }

  // optional int32 bucket_index = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bucket_index(), output);
  }

  // optional int64 count = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.HistogramEventProto.Bucket)
}

::google::protobuf::uint8* HistogramEventProto_Bucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.HistogramEventProto.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min(), target);
  }

  // optional int64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max(), target);
  }

  // optional int32 bucket_index = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bucket_index(), target);
  }

  // optional int64 count = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.HistogramEventProto.Bucket)
  return target;
}

size_t HistogramEventProto_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.HistogramEventProto.Bucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }

    // optional int64 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }

    // optional int32 bucket_index = 3 [deprecated = true];
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }

    // optional int64 count = 4 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramEventProto_Bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.HistogramEventProto.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramEventProto_Bucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistogramEventProto_Bucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.HistogramEventProto.Bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.HistogramEventProto.Bucket)
    MergeFrom(*source);
  }
}

void HistogramEventProto_Bucket::MergeFrom(const HistogramEventProto_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.HistogramEventProto.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000004u) {
      bucket_index_ = from.bucket_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistogramEventProto_Bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.HistogramEventProto.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramEventProto_Bucket::CopyFrom(const HistogramEventProto_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.HistogramEventProto.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramEventProto_Bucket::IsInitialized() const {
  return true;
}

void HistogramEventProto_Bucket::Swap(HistogramEventProto_Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramEventProto_Bucket::InternalSwap(HistogramEventProto_Bucket* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(bucket_index_, other->bucket_index_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistogramEventProto_Bucket::GetMetadata() const {
  protobuf_histogram_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_histogram_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistogramEventProto_Bucket

// optional int64 min = 1;
bool HistogramEventProto_Bucket::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistogramEventProto_Bucket::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void HistogramEventProto_Bucket::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistogramEventProto_Bucket::clear_min() {
  min_ = GOOGLE_LONGLONG(0);
  clear_has_min();
}
::google::protobuf::int64 HistogramEventProto_Bucket::min() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.Bucket.min)
  return min_;
}
void HistogramEventProto_Bucket::set_min(::google::protobuf::int64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.Bucket.min)
}

// optional int64 max = 2;
bool HistogramEventProto_Bucket::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistogramEventProto_Bucket::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void HistogramEventProto_Bucket::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistogramEventProto_Bucket::clear_max() {
  max_ = GOOGLE_LONGLONG(0);
  clear_has_max();
}
::google::protobuf::int64 HistogramEventProto_Bucket::max() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.Bucket.max)
  return max_;
}
void HistogramEventProto_Bucket::set_max(::google::protobuf::int64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.Bucket.max)
}

// optional int32 bucket_index = 3 [deprecated = true];
bool HistogramEventProto_Bucket::has_bucket_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HistogramEventProto_Bucket::set_has_bucket_index() {
  _has_bits_[0] |= 0x00000004u;
}
void HistogramEventProto_Bucket::clear_has_bucket_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void HistogramEventProto_Bucket::clear_bucket_index() {
  bucket_index_ = 0;
  clear_has_bucket_index();
}
::google::protobuf::int32 HistogramEventProto_Bucket::bucket_index() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.Bucket.bucket_index)
  return bucket_index_;
}
void HistogramEventProto_Bucket::set_bucket_index(::google::protobuf::int32 value) {
  set_has_bucket_index();
  bucket_index_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.Bucket.bucket_index)
}

// optional int64 count = 4 [default = 1];
bool HistogramEventProto_Bucket::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HistogramEventProto_Bucket::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void HistogramEventProto_Bucket::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void HistogramEventProto_Bucket::clear_count() {
  count_ = GOOGLE_LONGLONG(1);
  clear_has_count();
}
::google::protobuf::int64 HistogramEventProto_Bucket::count() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.Bucket.count)
  return count_;
}
void HistogramEventProto_Bucket::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.Bucket.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistogramEventProto::kNameHashFieldNumber;
const int HistogramEventProto::kSumFieldNumber;
const int HistogramEventProto::kBucketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistogramEventProto::HistogramEventProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_histogram_5fevent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.HistogramEventProto)
}
HistogramEventProto::HistogramEventProto(const HistogramEventProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:metrics.HistogramEventProto)
}

void HistogramEventProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
}

HistogramEventProto::~HistogramEventProto() {
  // @@protoc_insertion_point(destructor:metrics.HistogramEventProto)
  SharedDtor();
}

void HistogramEventProto::SharedDtor() {
}

void HistogramEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramEventProto::descriptor() {
  protobuf_histogram_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_histogram_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistogramEventProto& HistogramEventProto::default_instance() {
  protobuf_histogram_5fevent_2eproto::InitDefaults();
  return *internal_default_instance();
}

HistogramEventProto* HistogramEventProto::New(::google::protobuf::Arena* arena) const {
  HistogramEventProto* n = new HistogramEventProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistogramEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.HistogramEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistogramEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.HistogramEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bucket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.HistogramEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.HistogramEventProto)
  return false;
#undef DO_
}

void HistogramEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.HistogramEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 sum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sum(), output);
  }

  // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bucket(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.HistogramEventProto)
}

::google::protobuf::uint8* HistogramEventProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.HistogramEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->name_hash(), target);
  }

  // optional int64 sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sum(), target);
  }

  // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->bucket(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.HistogramEventProto)
  return target;
}

size_t HistogramEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.HistogramEventProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bucket(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 sum = 2;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramEventProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.HistogramEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramEventProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistogramEventProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.HistogramEventProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.HistogramEventProto)
    MergeFrom(*source);
  }
}

void HistogramEventProto::MergeFrom(const HistogramEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.HistogramEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_.MergeFrom(from.bucket_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      sum_ = from.sum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistogramEventProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.HistogramEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramEventProto::CopyFrom(const HistogramEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.HistogramEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramEventProto::IsInitialized() const {
  return true;
}

void HistogramEventProto::Swap(HistogramEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramEventProto::InternalSwap(HistogramEventProto* other) {
  using std::swap;
  bucket_.InternalSwap(&other->bucket_);
  swap(name_hash_, other->name_hash_);
  swap(sum_, other->sum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistogramEventProto::GetMetadata() const {
  protobuf_histogram_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_histogram_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistogramEventProto

// optional fixed64 name_hash = 1;
bool HistogramEventProto::has_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistogramEventProto::set_has_name_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void HistogramEventProto::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistogramEventProto::clear_name_hash() {
  name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_name_hash();
}
::google::protobuf::uint64 HistogramEventProto::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.name_hash)
  return name_hash_;
}
void HistogramEventProto::set_name_hash(::google::protobuf::uint64 value) {
  set_has_name_hash();
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.name_hash)
}

// optional int64 sum = 2;
bool HistogramEventProto::has_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistogramEventProto::set_has_sum() {
  _has_bits_[0] |= 0x00000002u;
}
void HistogramEventProto::clear_has_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistogramEventProto::clear_sum() {
  sum_ = GOOGLE_LONGLONG(0);
  clear_has_sum();
}
::google::protobuf::int64 HistogramEventProto::sum() const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.sum)
  return sum_;
}
void HistogramEventProto::set_sum(::google::protobuf::int64 value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:metrics.HistogramEventProto.sum)
}

// repeated .metrics.HistogramEventProto.Bucket bucket = 3;
int HistogramEventProto::bucket_size() const {
  return bucket_.size();
}
void HistogramEventProto::clear_bucket() {
  bucket_.Clear();
}
const ::metrics::HistogramEventProto_Bucket& HistogramEventProto::bucket(int index) const {
  // @@protoc_insertion_point(field_get:metrics.HistogramEventProto.bucket)
  return bucket_.Get(index);
}
::metrics::HistogramEventProto_Bucket* HistogramEventProto::mutable_bucket(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.HistogramEventProto.bucket)
  return bucket_.Mutable(index);
}
::metrics::HistogramEventProto_Bucket* HistogramEventProto::add_bucket() {
  // @@protoc_insertion_point(field_add:metrics.HistogramEventProto.bucket)
  return bucket_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::HistogramEventProto_Bucket >*
HistogramEventProto::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:metrics.HistogramEventProto.bucket)
  return &bucket_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::HistogramEventProto_Bucket >&
HistogramEventProto::bucket() const {
  // @@protoc_insertion_point(field_list:metrics.HistogramEventProto.bucket)
  return bucket_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
