// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "homer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace homer {
namespace pb {
class OKCacheDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OKCacheData>
     _instance;
} _OKCacheData_default_instance_;

namespace protobuf_homer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, picture_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, like_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, reshare_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, reshare_possible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OKCacheData, reshare_unavailable_reason_),
  0,
  2,
  3,
  4,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(OKCacheData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OKCacheData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "homer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OKCacheData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OKCacheData_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013homer.proto\022\010homer.pb\"\213\001\n\013OKCacheData\022"
      "\023\n\013picture_url\030\001 \002(\t\022\022\n\nlike_count\030\002 \002(\003"
      "\022\025\n\rreshare_count\030\003 \002(\003\022\030\n\020reshare_possi"
      "ble\030\004 \002(\010\022\"\n\032reshare_unavailable_reason\030"
      "\005 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "homer.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_homer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OKCacheData::kPictureUrlFieldNumber;
const int OKCacheData::kLikeCountFieldNumber;
const int OKCacheData::kReshareCountFieldNumber;
const int OKCacheData::kResharePossibleFieldNumber;
const int OKCacheData::kReshareUnavailableReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OKCacheData::OKCacheData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_homer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:homer.pb.OKCacheData)
}
OKCacheData::OKCacheData(const OKCacheData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  picture_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_picture_url()) {
    picture_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_url_);
  }
  reshare_unavailable_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reshare_unavailable_reason()) {
    reshare_unavailable_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reshare_unavailable_reason_);
  }
  ::memcpy(&like_count_, &from.like_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&reshare_possible_) -
    reinterpret_cast<char*>(&like_count_)) + sizeof(reshare_possible_));
  // @@protoc_insertion_point(copy_constructor:homer.pb.OKCacheData)
}

void OKCacheData::SharedCtor() {
  _cached_size_ = 0;
  picture_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reshare_unavailable_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&like_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reshare_possible_) -
      reinterpret_cast<char*>(&like_count_)) + sizeof(reshare_possible_));
}

OKCacheData::~OKCacheData() {
  // @@protoc_insertion_point(destructor:homer.pb.OKCacheData)
  SharedDtor();
}

void OKCacheData::SharedDtor() {
  picture_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reshare_unavailable_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OKCacheData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OKCacheData::descriptor() {
  protobuf_homer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OKCacheData& OKCacheData::default_instance() {
  protobuf_homer_2eproto::InitDefaults();
  return *internal_default_instance();
}

OKCacheData* OKCacheData::New(::google::protobuf::Arena* arena) const {
  OKCacheData* n = new OKCacheData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OKCacheData::Clear() {
// @@protoc_insertion_point(message_clear_start:homer.pb.OKCacheData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!picture_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*picture_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!reshare_unavailable_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reshare_unavailable_reason_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&like_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reshare_possible_) -
        reinterpret_cast<char*>(&like_count_)) + sizeof(reshare_possible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OKCacheData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:homer.pb.OKCacheData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string picture_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture_url().data(), static_cast<int>(this->picture_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "homer.pb.OKCacheData.picture_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 like_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_like_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &like_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 reshare_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_reshare_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reshare_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool reshare_possible = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reshare_possible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reshare_possible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reshare_unavailable_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reshare_unavailable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reshare_unavailable_reason().data(), static_cast<int>(this->reshare_unavailable_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "homer.pb.OKCacheData.reshare_unavailable_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:homer.pb.OKCacheData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:homer.pb.OKCacheData)
  return false;
#undef DO_
}

void OKCacheData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:homer.pb.OKCacheData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string picture_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_url().data(), static_cast<int>(this->picture_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homer.pb.OKCacheData.picture_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->picture_url(), output);
  }

  // required int64 like_count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->like_count(), output);
  }

  // required int64 reshare_count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reshare_count(), output);
  }

  // required bool reshare_possible = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reshare_possible(), output);
  }

  // required string reshare_unavailable_reason = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reshare_unavailable_reason().data(), static_cast<int>(this->reshare_unavailable_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homer.pb.OKCacheData.reshare_unavailable_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reshare_unavailable_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:homer.pb.OKCacheData)
}

::google::protobuf::uint8* OKCacheData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:homer.pb.OKCacheData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string picture_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_url().data(), static_cast<int>(this->picture_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homer.pb.OKCacheData.picture_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->picture_url(), target);
  }

  // required int64 like_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->like_count(), target);
  }

  // required int64 reshare_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reshare_count(), target);
  }

  // required bool reshare_possible = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reshare_possible(), target);
  }

  // required string reshare_unavailable_reason = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reshare_unavailable_reason().data(), static_cast<int>(this->reshare_unavailable_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "homer.pb.OKCacheData.reshare_unavailable_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reshare_unavailable_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:homer.pb.OKCacheData)
  return target;
}

size_t OKCacheData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:homer.pb.OKCacheData)
  size_t total_size = 0;

  if (has_picture_url()) {
    // required string picture_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picture_url());
  }

  if (has_reshare_unavailable_reason()) {
    // required string reshare_unavailable_reason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reshare_unavailable_reason());
  }

  if (has_like_count()) {
    // required int64 like_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->like_count());
  }

  if (has_reshare_count()) {
    // required int64 reshare_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reshare_count());
  }

  if (has_reshare_possible()) {
    // required bool reshare_possible = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t OKCacheData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:homer.pb.OKCacheData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string picture_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picture_url());

    // required string reshare_unavailable_reason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reshare_unavailable_reason());

    // required int64 like_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->like_count());

    // required int64 reshare_count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reshare_count());

    // required bool reshare_possible = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OKCacheData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:homer.pb.OKCacheData)
  GOOGLE_DCHECK_NE(&from, this);
  const OKCacheData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OKCacheData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:homer.pb.OKCacheData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:homer.pb.OKCacheData)
    MergeFrom(*source);
  }
}

void OKCacheData::MergeFrom(const OKCacheData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:homer.pb.OKCacheData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_picture_url();
      picture_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reshare_unavailable_reason();
      reshare_unavailable_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reshare_unavailable_reason_);
    }
    if (cached_has_bits & 0x00000004u) {
      like_count_ = from.like_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      reshare_count_ = from.reshare_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      reshare_possible_ = from.reshare_possible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OKCacheData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:homer.pb.OKCacheData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OKCacheData::CopyFrom(const OKCacheData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:homer.pb.OKCacheData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OKCacheData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void OKCacheData::Swap(OKCacheData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OKCacheData::InternalSwap(OKCacheData* other) {
  using std::swap;
  picture_url_.Swap(&other->picture_url_);
  reshare_unavailable_reason_.Swap(&other->reshare_unavailable_reason_);
  swap(like_count_, other->like_count_);
  swap(reshare_count_, other->reshare_count_);
  swap(reshare_possible_, other->reshare_possible_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OKCacheData::GetMetadata() const {
  protobuf_homer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OKCacheData

// required string picture_url = 1;
bool OKCacheData::has_picture_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OKCacheData::set_has_picture_url() {
  _has_bits_[0] |= 0x00000001u;
}
void OKCacheData::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void OKCacheData::clear_picture_url() {
  picture_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_picture_url();
}
const ::std::string& OKCacheData::picture_url() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.picture_url)
  return picture_url_.GetNoArena();
}
void OKCacheData::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.picture_url)
}
#if LANG_CXX11
void OKCacheData::set_picture_url(::std::string&& value) {
  set_has_picture_url();
  picture_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:homer.pb.OKCacheData.picture_url)
}
#endif
void OKCacheData::set_picture_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:homer.pb.OKCacheData.picture_url)
}
void OKCacheData::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:homer.pb.OKCacheData.picture_url)
}
::std::string* OKCacheData::mutable_picture_url() {
  set_has_picture_url();
  // @@protoc_insertion_point(field_mutable:homer.pb.OKCacheData.picture_url)
  return picture_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OKCacheData::release_picture_url() {
  // @@protoc_insertion_point(field_release:homer.pb.OKCacheData.picture_url)
  clear_has_picture_url();
  return picture_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OKCacheData::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url != NULL) {
    set_has_picture_url();
  } else {
    clear_has_picture_url();
  }
  picture_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture_url);
  // @@protoc_insertion_point(field_set_allocated:homer.pb.OKCacheData.picture_url)
}

// required int64 like_count = 2;
bool OKCacheData::has_like_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OKCacheData::set_has_like_count() {
  _has_bits_[0] |= 0x00000004u;
}
void OKCacheData::clear_has_like_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void OKCacheData::clear_like_count() {
  like_count_ = GOOGLE_LONGLONG(0);
  clear_has_like_count();
}
::google::protobuf::int64 OKCacheData::like_count() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.like_count)
  return like_count_;
}
void OKCacheData::set_like_count(::google::protobuf::int64 value) {
  set_has_like_count();
  like_count_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.like_count)
}

// required int64 reshare_count = 3;
bool OKCacheData::has_reshare_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OKCacheData::set_has_reshare_count() {
  _has_bits_[0] |= 0x00000008u;
}
void OKCacheData::clear_has_reshare_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void OKCacheData::clear_reshare_count() {
  reshare_count_ = GOOGLE_LONGLONG(0);
  clear_has_reshare_count();
}
::google::protobuf::int64 OKCacheData::reshare_count() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_count)
  return reshare_count_;
}
void OKCacheData::set_reshare_count(::google::protobuf::int64 value) {
  set_has_reshare_count();
  reshare_count_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_count)
}

// required bool reshare_possible = 4;
bool OKCacheData::has_reshare_possible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OKCacheData::set_has_reshare_possible() {
  _has_bits_[0] |= 0x00000010u;
}
void OKCacheData::clear_has_reshare_possible() {
  _has_bits_[0] &= ~0x00000010u;
}
void OKCacheData::clear_reshare_possible() {
  reshare_possible_ = false;
  clear_has_reshare_possible();
}
bool OKCacheData::reshare_possible() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_possible)
  return reshare_possible_;
}
void OKCacheData::set_reshare_possible(bool value) {
  set_has_reshare_possible();
  reshare_possible_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_possible)
}

// required string reshare_unavailable_reason = 5;
bool OKCacheData::has_reshare_unavailable_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OKCacheData::set_has_reshare_unavailable_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void OKCacheData::clear_has_reshare_unavailable_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void OKCacheData::clear_reshare_unavailable_reason() {
  reshare_unavailable_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reshare_unavailable_reason();
}
const ::std::string& OKCacheData::reshare_unavailable_reason() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_unavailable_reason)
  return reshare_unavailable_reason_.GetNoArena();
}
void OKCacheData::set_reshare_unavailable_reason(const ::std::string& value) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_unavailable_reason)
}
#if LANG_CXX11
void OKCacheData::set_reshare_unavailable_reason(::std::string&& value) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:homer.pb.OKCacheData.reshare_unavailable_reason)
}
#endif
void OKCacheData::set_reshare_unavailable_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:homer.pb.OKCacheData.reshare_unavailable_reason)
}
void OKCacheData::set_reshare_unavailable_reason(const char* value, size_t size) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:homer.pb.OKCacheData.reshare_unavailable_reason)
}
::std::string* OKCacheData::mutable_reshare_unavailable_reason() {
  set_has_reshare_unavailable_reason();
  // @@protoc_insertion_point(field_mutable:homer.pb.OKCacheData.reshare_unavailable_reason)
  return reshare_unavailable_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OKCacheData::release_reshare_unavailable_reason() {
  // @@protoc_insertion_point(field_release:homer.pb.OKCacheData.reshare_unavailable_reason)
  clear_has_reshare_unavailable_reason();
  return reshare_unavailable_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OKCacheData::set_allocated_reshare_unavailable_reason(::std::string* reshare_unavailable_reason) {
  if (reshare_unavailable_reason != NULL) {
    set_has_reshare_unavailable_reason();
  } else {
    clear_has_reshare_unavailable_reason();
  }
  reshare_unavailable_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reshare_unavailable_reason);
  // @@protoc_insertion_point(field_set_allocated:homer.pb.OKCacheData.reshare_unavailable_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace homer

// @@protoc_insertion_point(global_scope)
