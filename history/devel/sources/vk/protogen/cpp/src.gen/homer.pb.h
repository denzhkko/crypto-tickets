// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homer.proto

#ifndef PROTOBUF_homer_2eproto__INCLUDED
#define PROTOBUF_homer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace homer {
namespace pb {
class OKCacheData;
class OKCacheDataDefaultTypeInternal;
extern OKCacheDataDefaultTypeInternal _OKCacheData_default_instance_;
}  // namespace pb
}  // namespace homer

namespace homer {
namespace pb {

namespace protobuf_homer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_homer_2eproto

// ===================================================================

class OKCacheData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:homer.pb.OKCacheData) */ {
 public:
  OKCacheData();
  virtual ~OKCacheData();

  OKCacheData(const OKCacheData& from);

  inline OKCacheData& operator=(const OKCacheData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OKCacheData(OKCacheData&& from) noexcept
    : OKCacheData() {
    *this = ::std::move(from);
  }

  inline OKCacheData& operator=(OKCacheData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OKCacheData& default_instance();

  static inline const OKCacheData* internal_default_instance() {
    return reinterpret_cast<const OKCacheData*>(
               &_OKCacheData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OKCacheData* other);
  friend void swap(OKCacheData& a, OKCacheData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OKCacheData* New() const PROTOBUF_FINAL { return New(NULL); }

  OKCacheData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OKCacheData& from);
  void MergeFrom(const OKCacheData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OKCacheData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string picture_url = 1;
  bool has_picture_url() const;
  void clear_picture_url();
  static const int kPictureUrlFieldNumber = 1;
  const ::std::string& picture_url() const;
  void set_picture_url(const ::std::string& value);
  #if LANG_CXX11
  void set_picture_url(::std::string&& value);
  #endif
  void set_picture_url(const char* value);
  void set_picture_url(const char* value, size_t size);
  ::std::string* mutable_picture_url();
  ::std::string* release_picture_url();
  void set_allocated_picture_url(::std::string* picture_url);

  // required string reshare_unavailable_reason = 5;
  bool has_reshare_unavailable_reason() const;
  void clear_reshare_unavailable_reason();
  static const int kReshareUnavailableReasonFieldNumber = 5;
  const ::std::string& reshare_unavailable_reason() const;
  void set_reshare_unavailable_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reshare_unavailable_reason(::std::string&& value);
  #endif
  void set_reshare_unavailable_reason(const char* value);
  void set_reshare_unavailable_reason(const char* value, size_t size);
  ::std::string* mutable_reshare_unavailable_reason();
  ::std::string* release_reshare_unavailable_reason();
  void set_allocated_reshare_unavailable_reason(::std::string* reshare_unavailable_reason);

  // required int64 like_count = 2;
  bool has_like_count() const;
  void clear_like_count();
  static const int kLikeCountFieldNumber = 2;
  ::google::protobuf::int64 like_count() const;
  void set_like_count(::google::protobuf::int64 value);

  // required int64 reshare_count = 3;
  bool has_reshare_count() const;
  void clear_reshare_count();
  static const int kReshareCountFieldNumber = 3;
  ::google::protobuf::int64 reshare_count() const;
  void set_reshare_count(::google::protobuf::int64 value);

  // required bool reshare_possible = 4;
  bool has_reshare_possible() const;
  void clear_reshare_possible();
  static const int kResharePossibleFieldNumber = 4;
  bool reshare_possible() const;
  void set_reshare_possible(bool value);

  // @@protoc_insertion_point(class_scope:homer.pb.OKCacheData)
 private:
  void set_has_picture_url();
  void clear_has_picture_url();
  void set_has_like_count();
  void clear_has_like_count();
  void set_has_reshare_count();
  void clear_has_reshare_count();
  void set_has_reshare_possible();
  void clear_has_reshare_possible();
  void set_has_reshare_unavailable_reason();
  void clear_has_reshare_unavailable_reason();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr picture_url_;
  ::google::protobuf::internal::ArenaStringPtr reshare_unavailable_reason_;
  ::google::protobuf::int64 like_count_;
  ::google::protobuf::int64 reshare_count_;
  bool reshare_possible_;
  friend struct protobuf_homer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OKCacheData

// required string picture_url = 1;
inline bool OKCacheData::has_picture_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OKCacheData::set_has_picture_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OKCacheData::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OKCacheData::clear_picture_url() {
  picture_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_picture_url();
}
inline const ::std::string& OKCacheData::picture_url() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.picture_url)
  return picture_url_.GetNoArena();
}
inline void OKCacheData::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.picture_url)
}
#if LANG_CXX11
inline void OKCacheData::set_picture_url(::std::string&& value) {
  set_has_picture_url();
  picture_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:homer.pb.OKCacheData.picture_url)
}
#endif
inline void OKCacheData::set_picture_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:homer.pb.OKCacheData.picture_url)
}
inline void OKCacheData::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:homer.pb.OKCacheData.picture_url)
}
inline ::std::string* OKCacheData::mutable_picture_url() {
  set_has_picture_url();
  // @@protoc_insertion_point(field_mutable:homer.pb.OKCacheData.picture_url)
  return picture_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OKCacheData::release_picture_url() {
  // @@protoc_insertion_point(field_release:homer.pb.OKCacheData.picture_url)
  clear_has_picture_url();
  return picture_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OKCacheData::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url != NULL) {
    set_has_picture_url();
  } else {
    clear_has_picture_url();
  }
  picture_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture_url);
  // @@protoc_insertion_point(field_set_allocated:homer.pb.OKCacheData.picture_url)
}

// required int64 like_count = 2;
inline bool OKCacheData::has_like_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OKCacheData::set_has_like_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OKCacheData::clear_has_like_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OKCacheData::clear_like_count() {
  like_count_ = GOOGLE_LONGLONG(0);
  clear_has_like_count();
}
inline ::google::protobuf::int64 OKCacheData::like_count() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.like_count)
  return like_count_;
}
inline void OKCacheData::set_like_count(::google::protobuf::int64 value) {
  set_has_like_count();
  like_count_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.like_count)
}

// required int64 reshare_count = 3;
inline bool OKCacheData::has_reshare_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OKCacheData::set_has_reshare_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OKCacheData::clear_has_reshare_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OKCacheData::clear_reshare_count() {
  reshare_count_ = GOOGLE_LONGLONG(0);
  clear_has_reshare_count();
}
inline ::google::protobuf::int64 OKCacheData::reshare_count() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_count)
  return reshare_count_;
}
inline void OKCacheData::set_reshare_count(::google::protobuf::int64 value) {
  set_has_reshare_count();
  reshare_count_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_count)
}

// required bool reshare_possible = 4;
inline bool OKCacheData::has_reshare_possible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OKCacheData::set_has_reshare_possible() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OKCacheData::clear_has_reshare_possible() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OKCacheData::clear_reshare_possible() {
  reshare_possible_ = false;
  clear_has_reshare_possible();
}
inline bool OKCacheData::reshare_possible() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_possible)
  return reshare_possible_;
}
inline void OKCacheData::set_reshare_possible(bool value) {
  set_has_reshare_possible();
  reshare_possible_ = value;
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_possible)
}

// required string reshare_unavailable_reason = 5;
inline bool OKCacheData::has_reshare_unavailable_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OKCacheData::set_has_reshare_unavailable_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OKCacheData::clear_has_reshare_unavailable_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OKCacheData::clear_reshare_unavailable_reason() {
  reshare_unavailable_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reshare_unavailable_reason();
}
inline const ::std::string& OKCacheData::reshare_unavailable_reason() const {
  // @@protoc_insertion_point(field_get:homer.pb.OKCacheData.reshare_unavailable_reason)
  return reshare_unavailable_reason_.GetNoArena();
}
inline void OKCacheData::set_reshare_unavailable_reason(const ::std::string& value) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:homer.pb.OKCacheData.reshare_unavailable_reason)
}
#if LANG_CXX11
inline void OKCacheData::set_reshare_unavailable_reason(::std::string&& value) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:homer.pb.OKCacheData.reshare_unavailable_reason)
}
#endif
inline void OKCacheData::set_reshare_unavailable_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:homer.pb.OKCacheData.reshare_unavailable_reason)
}
inline void OKCacheData::set_reshare_unavailable_reason(const char* value, size_t size) {
  set_has_reshare_unavailable_reason();
  reshare_unavailable_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:homer.pb.OKCacheData.reshare_unavailable_reason)
}
inline ::std::string* OKCacheData::mutable_reshare_unavailable_reason() {
  set_has_reshare_unavailable_reason();
  // @@protoc_insertion_point(field_mutable:homer.pb.OKCacheData.reshare_unavailable_reason)
  return reshare_unavailable_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OKCacheData::release_reshare_unavailable_reason() {
  // @@protoc_insertion_point(field_release:homer.pb.OKCacheData.reshare_unavailable_reason)
  clear_has_reshare_unavailable_reason();
  return reshare_unavailable_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OKCacheData::set_allocated_reshare_unavailable_reason(::std::string* reshare_unavailable_reason) {
  if (reshare_unavailable_reason != NULL) {
    set_has_reshare_unavailable_reason();
  } else {
    clear_has_reshare_unavailable_reason();
  }
  reshare_unavailable_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reshare_unavailable_reason);
  // @@protoc_insertion_point(field_set_allocated:homer.pb.OKCacheData.reshare_unavailable_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace homer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_homer_2eproto__INCLUDED
