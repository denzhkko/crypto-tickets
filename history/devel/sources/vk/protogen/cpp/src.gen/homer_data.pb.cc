// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homer_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "homer_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace logsParsers {
class HomerStat_StatisticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomerStat_Statistic>
     _instance;
} _HomerStat_Statistic_default_instance_;
class HomerStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomerStat>
     _instance;
} _HomerStat_default_instance_;

namespace protobuf_homer_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, searcher_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat_Statistic, cancels_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomerStat, stats_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(HomerStat_Statistic)},
  { 13, 20, sizeof(HomerStat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomerStat_Statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomerStat_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "homer_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HomerStat_Statistic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomerStat_Statistic_default_instance_);_HomerStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomerStat_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020homer_data.proto\022\036ru.mail.go.webbase.l"
      "ogsParsers\"\351\001\n\tHomerStat\022\014\n\004hash\030\001 \001(\004\022B"
      "\n\005stats\030\002 \003(\01323.ru.mail.go.webbase.logsP"
      "arsers.HomerStat.Statistic\032\211\001\n\tStatistic"
      "\022C\n\rsearcher_type\030\001 \001(\0162,.ru.mail.go.web"
      "base.logsParsers.SearcherType\022\020\n\005views\030\002"
      " \001(\r:\0010\022\021\n\006clicks\030\003 \001(\r:\0010\022\022\n\007cancels\030\004 "
      "\001(\r:\0010*\241\003\n\014SearcherType\022\007\n\003CMS\020\001\022\023\n\017RECI"
      "PE_BY_TITLE\020\002\022\025\n\021RECIPE_BY_CONSIST\020\003\022\022\n\016"
      "TOPIC_BY_TITLE\020\004\022\024\n\020TOPIC_BY_CONSIST\020\005\022\017"
      "\n\013TOPIC_BY_ID\020\006\022\010\n\004NEWS\020\007\022\013\n\007SIMPLE9\020\010\022\023"
      "\n\017NEWS_CLASSIFIER\020\t\022\r\n\tITEM2ITEM\020\n\022\024\n\020SI"
      "MPLE9_LOW_FREQ\020\013\022\025\n\021TOPIC_BY_ID_SPLIT\020\014\022"
      "\026\n\022NEWS_BY_URL_HEALTH\020\r\022\027\n\023NEWS_BY_TEXT_"
      "HEALTH\020\016\022\032\n\026NEWS_BY_URL_ANTIMAIDAN\020\017\022\033\n\027"
      "NEWS_BY_TEXT_ANTIMAIDAN\020\020\022\031\n\025NEWS_BY_RUB"
      "RIC_HEALTH\020\021\022\027\n\023NEWS_SIMPLE9_HEALTH\020\022\022\033\n"
      "\027NEWS_SIMPLE9_ANTIMAIDAN\020\023B\013B\tHomerData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "homer_data.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_homer_5fdata_2eproto

const ::google::protobuf::EnumDescriptor* SearcherType_descriptor() {
  protobuf_homer_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool SearcherType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomerStat_Statistic::kSearcherTypeFieldNumber;
const int HomerStat_Statistic::kViewsFieldNumber;
const int HomerStat_Statistic::kClicksFieldNumber;
const int HomerStat_Statistic::kCancelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomerStat_Statistic::HomerStat_Statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_homer_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
}
HomerStat_Statistic::HomerStat_Statistic(const HomerStat_Statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&views_, &from.views_,
    static_cast<size_t>(reinterpret_cast<char*>(&searcher_type_) -
    reinterpret_cast<char*>(&views_)) + sizeof(searcher_type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
}

void HomerStat_Statistic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&views_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancels_) -
      reinterpret_cast<char*>(&views_)) + sizeof(cancels_));
  searcher_type_ = 1;
}

HomerStat_Statistic::~HomerStat_Statistic() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  SharedDtor();
}

void HomerStat_Statistic::SharedDtor() {
}

void HomerStat_Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomerStat_Statistic::descriptor() {
  protobuf_homer_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomerStat_Statistic& HomerStat_Statistic::default_instance() {
  protobuf_homer_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomerStat_Statistic* HomerStat_Statistic::New(::google::protobuf::Arena* arena) const {
  HomerStat_Statistic* n = new HomerStat_Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomerStat_Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&views_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cancels_) -
        reinterpret_cast<char*>(&views_)) + sizeof(cancels_));
    searcher_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HomerStat_Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.logsParsers.SearcherType searcher_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::logsParsers::SearcherType_IsValid(value)) {
            set_searcher_type(static_cast< ::ru::mail::go::webbase::logsParsers::SearcherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cancels = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cancels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  return false;
#undef DO_
}

void HomerStat_Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.logsParsers.SearcherType searcher_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->searcher_type(), output);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->views(), output);
  }

  // optional uint32 clicks = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clicks(), output);
  }

  // optional uint32 cancels = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cancels(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
}

::google::protobuf::uint8* HomerStat_Statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.logsParsers.SearcherType searcher_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->searcher_type(), target);
  }

  // optional uint32 views = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->views(), target);
  }

  // optional uint32 clicks = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clicks(), target);
  }

  // optional uint32 cancels = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cancels(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  return target;
}

size_t HomerStat_Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 views = 2 [default = 0];
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 clicks = 3 [default = 0];
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks());
    }

    // optional uint32 cancels = 4 [default = 0];
    if (has_cancels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cancels());
    }

    // optional .ru.mail.go.webbase.logsParsers.SearcherType searcher_type = 1;
    if (has_searcher_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searcher_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomerStat_Statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const HomerStat_Statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomerStat_Statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
    MergeFrom(*source);
  }
}

void HomerStat_Statistic::MergeFrom(const HomerStat_Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000004u) {
      cancels_ = from.cancels_;
    }
    if (cached_has_bits & 0x00000008u) {
      searcher_type_ = from.searcher_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HomerStat_Statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomerStat_Statistic::CopyFrom(const HomerStat_Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.logsParsers.HomerStat.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomerStat_Statistic::IsInitialized() const {
  return true;
}

void HomerStat_Statistic::Swap(HomerStat_Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomerStat_Statistic::InternalSwap(HomerStat_Statistic* other) {
  using std::swap;
  swap(views_, other->views_);
  swap(clicks_, other->clicks_);
  swap(cancels_, other->cancels_);
  swap(searcher_type_, other->searcher_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomerStat_Statistic::GetMetadata() const {
  protobuf_homer_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomerStat_Statistic

// optional .ru.mail.go.webbase.logsParsers.SearcherType searcher_type = 1;
bool HomerStat_Statistic::has_searcher_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HomerStat_Statistic::set_has_searcher_type() {
  _has_bits_[0] |= 0x00000008u;
}
void HomerStat_Statistic::clear_has_searcher_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void HomerStat_Statistic::clear_searcher_type() {
  searcher_type_ = 1;
  clear_has_searcher_type();
}
::ru::mail::go::webbase::logsParsers::SearcherType HomerStat_Statistic::searcher_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.searcher_type)
  return static_cast< ::ru::mail::go::webbase::logsParsers::SearcherType >(searcher_type_);
}
void HomerStat_Statistic::set_searcher_type(::ru::mail::go::webbase::logsParsers::SearcherType value) {
  assert(::ru::mail::go::webbase::logsParsers::SearcherType_IsValid(value));
  set_has_searcher_type();
  searcher_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.searcher_type)
}

// optional uint32 views = 2 [default = 0];
bool HomerStat_Statistic::has_views() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HomerStat_Statistic::set_has_views() {
  _has_bits_[0] |= 0x00000001u;
}
void HomerStat_Statistic::clear_has_views() {
  _has_bits_[0] &= ~0x00000001u;
}
void HomerStat_Statistic::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 HomerStat_Statistic::views() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.views)
  return views_;
}
void HomerStat_Statistic::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.views)
}

// optional uint32 clicks = 3 [default = 0];
bool HomerStat_Statistic::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HomerStat_Statistic::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void HomerStat_Statistic::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void HomerStat_Statistic::clear_clicks() {
  clicks_ = 0u;
  clear_has_clicks();
}
::google::protobuf::uint32 HomerStat_Statistic::clicks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.clicks)
  return clicks_;
}
void HomerStat_Statistic::set_clicks(::google::protobuf::uint32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.clicks)
}

// optional uint32 cancels = 4 [default = 0];
bool HomerStat_Statistic::has_cancels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HomerStat_Statistic::set_has_cancels() {
  _has_bits_[0] |= 0x00000004u;
}
void HomerStat_Statistic::clear_has_cancels() {
  _has_bits_[0] &= ~0x00000004u;
}
void HomerStat_Statistic::clear_cancels() {
  cancels_ = 0u;
  clear_has_cancels();
}
::google::protobuf::uint32 HomerStat_Statistic::cancels() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.cancels)
  return cancels_;
}
void HomerStat_Statistic::set_cancels(::google::protobuf::uint32 value) {
  set_has_cancels();
  cancels_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.logsParsers.HomerStat.Statistic.cancels)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomerStat::kHashFieldNumber;
const int HomerStat::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomerStat::HomerStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_homer_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.logsParsers.HomerStat)
}
HomerStat::HomerStat(const HomerStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.logsParsers.HomerStat)
}

void HomerStat::SharedCtor() {
  _cached_size_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
}

HomerStat::~HomerStat() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.logsParsers.HomerStat)
  SharedDtor();
}

void HomerStat::SharedDtor() {
}

void HomerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomerStat::descriptor() {
  protobuf_homer_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomerStat& HomerStat::default_instance() {
  protobuf_homer_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomerStat* HomerStat::New(::google::protobuf::Arena* arena) const {
  HomerStat* n = new HomerStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.logsParsers.HomerStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  hash_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HomerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.logsParsers.HomerStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.logsParsers.HomerStat.Statistic stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.logsParsers.HomerStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.logsParsers.HomerStat)
  return false;
#undef DO_
}

void HomerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.logsParsers.HomerStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // repeated .ru.mail.go.webbase.logsParsers.HomerStat.Statistic stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.logsParsers.HomerStat)
}

::google::protobuf::uint8* HomerStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.logsParsers.HomerStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // repeated .ru.mail.go.webbase.logsParsers.HomerStat.Statistic stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.logsParsers.HomerStat)
  return target;
}

size_t HomerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.logsParsers.HomerStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.logsParsers.HomerStat.Statistic stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(static_cast<int>(i)));
    }
  }

  // optional uint64 hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomerStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.logsParsers.HomerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const HomerStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomerStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.logsParsers.HomerStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.logsParsers.HomerStat)
    MergeFrom(*source);
  }
}

void HomerStat::MergeFrom(const HomerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.logsParsers.HomerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_hash()) {
    set_hash(from.hash());
  }
}

void HomerStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.logsParsers.HomerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomerStat::CopyFrom(const HomerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.logsParsers.HomerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomerStat::IsInitialized() const {
  return true;
}

void HomerStat::Swap(HomerStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomerStat::InternalSwap(HomerStat* other) {
  using std::swap;
  stats_.InternalSwap(&other->stats_);
  swap(hash_, other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomerStat::GetMetadata() const {
  protobuf_homer_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_homer_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomerStat

// optional uint64 hash = 1;
bool HomerStat::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HomerStat::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void HomerStat::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void HomerStat::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 HomerStat::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.hash)
  return hash_;
}
void HomerStat::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.logsParsers.HomerStat.hash)
}

// repeated .ru.mail.go.webbase.logsParsers.HomerStat.Statistic stats = 2;
int HomerStat::stats_size() const {
  return stats_.size();
}
void HomerStat::clear_stats() {
  stats_.Clear();
}
const ::ru::mail::go::webbase::logsParsers::HomerStat_Statistic& HomerStat::stats(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.logsParsers.HomerStat.stats)
  return stats_.Get(index);
}
::ru::mail::go::webbase::logsParsers::HomerStat_Statistic* HomerStat::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.logsParsers.HomerStat.stats)
  return stats_.Mutable(index);
}
::ru::mail::go::webbase::logsParsers::HomerStat_Statistic* HomerStat::add_stats() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.logsParsers.HomerStat.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::logsParsers::HomerStat_Statistic >*
HomerStat::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.logsParsers.HomerStat.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::logsParsers::HomerStat_Statistic >&
HomerStat::stats() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.logsParsers.HomerStat.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace logsParsers
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
