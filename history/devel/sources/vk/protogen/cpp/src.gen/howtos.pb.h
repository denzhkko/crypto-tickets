// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: howtos.proto

#ifndef PROTOBUF_howtos_2eproto__INCLUDED
#define PROTOBUF_howtos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace howtos {
class Howtos;
class HowtosDefaultTypeInternal;
extern HowtosDefaultTypeInternal _Howtos_default_instance_;
}  // namespace howtos
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace howtos {

namespace protobuf_howtos_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_howtos_2eproto

// ===================================================================

class Howtos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.howtos.Howtos) */ {
 public:
  Howtos();
  virtual ~Howtos();

  Howtos(const Howtos& from);

  inline Howtos& operator=(const Howtos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Howtos(Howtos&& from) noexcept
    : Howtos() {
    *this = ::std::move(from);
  }

  inline Howtos& operator=(Howtos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Howtos& default_instance();

  static inline const Howtos* internal_default_instance() {
    return reinterpret_cast<const Howtos*>(
               &_Howtos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Howtos* other);
  friend void swap(Howtos& a, Howtos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Howtos* New() const PROTOBUF_FINAL { return New(NULL); }

  Howtos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Howtos& from);
  void MergeFrom(const Howtos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Howtos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional string title_site = 2;
  bool has_title_site() const;
  void clear_title_site();
  static const int kTitleSiteFieldNumber = 2;
  const ::std::string& title_site() const;
  void set_title_site(const ::std::string& value);
  #if LANG_CXX11
  void set_title_site(::std::string&& value);
  #endif
  void set_title_site(const char* value);
  void set_title_site(const char* value, size_t size);
  ::std::string* mutable_title_site();
  ::std::string* release_title_site();
  void set_allocated_title_site(::std::string* title_site);

  // optional string doc_url = 3;
  bool has_doc_url() const;
  void clear_doc_url();
  static const int kDocUrlFieldNumber = 3;
  const ::std::string& doc_url() const;
  void set_doc_url(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_url(::std::string&& value);
  #endif
  void set_doc_url(const char* value);
  void set_doc_url(const char* value, size_t size);
  ::std::string* mutable_doc_url();
  ::std::string* release_doc_url();
  void set_allocated_doc_url(::std::string* doc_url);

  // optional string answer = 4;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 4;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.howtos.Howtos)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_title_site();
  void clear_has_title_site();
  void set_has_doc_url();
  void clear_has_doc_url();
  void set_has_answer();
  void clear_has_answer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::google::protobuf::internal::ArenaStringPtr title_site_;
  ::google::protobuf::internal::ArenaStringPtr doc_url_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  friend struct protobuf_howtos_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Howtos

// optional string query_text = 1;
inline bool Howtos::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Howtos::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Howtos::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Howtos::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& Howtos::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.howtos.Howtos.query_text)
  return query_text_.GetNoArena();
}
inline void Howtos::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.howtos.Howtos.query_text)
}
#if LANG_CXX11
inline void Howtos::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.howtos.Howtos.query_text)
}
#endif
inline void Howtos::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.howtos.Howtos.query_text)
}
inline void Howtos::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.howtos.Howtos.query_text)
}
inline ::std::string* Howtos::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.howtos.Howtos.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Howtos::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.howtos.Howtos.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Howtos::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.howtos.Howtos.query_text)
}

// optional string title_site = 2;
inline bool Howtos::has_title_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Howtos::set_has_title_site() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Howtos::clear_has_title_site() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Howtos::clear_title_site() {
  title_site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title_site();
}
inline const ::std::string& Howtos::title_site() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.howtos.Howtos.title_site)
  return title_site_.GetNoArena();
}
inline void Howtos::set_title_site(const ::std::string& value) {
  set_has_title_site();
  title_site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.howtos.Howtos.title_site)
}
#if LANG_CXX11
inline void Howtos::set_title_site(::std::string&& value) {
  set_has_title_site();
  title_site_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.howtos.Howtos.title_site)
}
#endif
inline void Howtos::set_title_site(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title_site();
  title_site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.howtos.Howtos.title_site)
}
inline void Howtos::set_title_site(const char* value, size_t size) {
  set_has_title_site();
  title_site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.howtos.Howtos.title_site)
}
inline ::std::string* Howtos::mutable_title_site() {
  set_has_title_site();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.howtos.Howtos.title_site)
  return title_site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Howtos::release_title_site() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.howtos.Howtos.title_site)
  clear_has_title_site();
  return title_site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Howtos::set_allocated_title_site(::std::string* title_site) {
  if (title_site != NULL) {
    set_has_title_site();
  } else {
    clear_has_title_site();
  }
  title_site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_site);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.howtos.Howtos.title_site)
}

// optional string doc_url = 3;
inline bool Howtos::has_doc_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Howtos::set_has_doc_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Howtos::clear_has_doc_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Howtos::clear_doc_url() {
  doc_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_url();
}
inline const ::std::string& Howtos::doc_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.howtos.Howtos.doc_url)
  return doc_url_.GetNoArena();
}
inline void Howtos::set_doc_url(const ::std::string& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.howtos.Howtos.doc_url)
}
#if LANG_CXX11
inline void Howtos::set_doc_url(::std::string&& value) {
  set_has_doc_url();
  doc_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.howtos.Howtos.doc_url)
}
#endif
inline void Howtos::set_doc_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.howtos.Howtos.doc_url)
}
inline void Howtos::set_doc_url(const char* value, size_t size) {
  set_has_doc_url();
  doc_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.howtos.Howtos.doc_url)
}
inline ::std::string* Howtos::mutable_doc_url() {
  set_has_doc_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.howtos.Howtos.doc_url)
  return doc_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Howtos::release_doc_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.howtos.Howtos.doc_url)
  clear_has_doc_url();
  return doc_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Howtos::set_allocated_doc_url(::std::string* doc_url) {
  if (doc_url != NULL) {
    set_has_doc_url();
  } else {
    clear_has_doc_url();
  }
  doc_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.howtos.Howtos.doc_url)
}

// optional string answer = 4;
inline bool Howtos::has_answer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Howtos::set_has_answer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Howtos::clear_has_answer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Howtos::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_answer();
}
inline const ::std::string& Howtos::answer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.howtos.Howtos.answer)
  return answer_.GetNoArena();
}
inline void Howtos::set_answer(const ::std::string& value) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.howtos.Howtos.answer)
}
#if LANG_CXX11
inline void Howtos::set_answer(::std::string&& value) {
  set_has_answer();
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.howtos.Howtos.answer)
}
#endif
inline void Howtos::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.howtos.Howtos.answer)
}
inline void Howtos::set_answer(const char* value, size_t size) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.howtos.Howtos.answer)
}
inline ::std::string* Howtos::mutable_answer() {
  set_has_answer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.howtos.Howtos.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Howtos::release_answer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.howtos.Howtos.answer)
  clear_has_answer();
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Howtos::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    set_has_answer();
  } else {
    clear_has_answer();
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.howtos.Howtos.answer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace howtos
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_howtos_2eproto__INCLUDED
