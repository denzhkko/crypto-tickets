// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idxembedder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idxembedder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace idxembedder {
namespace pb {
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;
class VectorDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VectorData>
     _instance;
} _VectorData_default_instance_;
class BakedDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BakedDocument>
     _instance;
} _BakedDocument_default_instance_;
class BakedDocumentV2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BakedDocumentV2>
     _instance;
} _BakedDocumentV2_default_instance_;
class Zone2BlockIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Zone2BlockId>
     _instance;
} _Zone2BlockId_default_instance_;
class RequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Request>
     _instance;
} _Request_default_instance_;
class AnswerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Answer>
     _instance;
} _Answer_default_instance_;

namespace protobuf_idxembedder_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, zone_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorData, blockid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, blockid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, pt_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocument, neuro_vector_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocumentV2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocumentV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocumentV2, docid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakedDocumentV2, vectors_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone2BlockId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone2BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone2BlockId, zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone2BlockId, block_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, minimal_version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, pt_model_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, neuro_model_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, pq_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, blockid_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, documents_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, version_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Document)},
  { 11, 18, sizeof(VectorData)},
  { 20, 29, sizeof(BakedDocument)},
  { 33, 40, sizeof(BakedDocumentV2)},
  { 42, 49, sizeof(Zone2BlockId)},
  { 51, 58, sizeof(Request)},
  { 60, 73, sizeof(Answer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VectorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BakedDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BakedDocumentV2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Zone2BlockId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Answer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "idxembedder.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_VectorData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VectorData_default_instance_);_BakedDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BakedDocument_default_instance_);_BakedDocumentV2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BakedDocumentV2_default_instance_);_Zone2BlockId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Zone2BlockId_default_instance_);_Request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Request_default_instance_);_Answer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Answer_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021idxembedder.proto\022\016idxembedder.pb\"8\n\010D"
      "ocument\022\014\n\004text\030\001 \002(\t\022\r\n\005docid\030\002 \002(\r\022\017\n\007"
      "zone_id\030\003 \002(\r\"+\n\nVectorData\022\014\n\004data\030\001 \002("
      "\014\022\017\n\007blockid\030\002 \001(\r\"X\n\rBakedDocument\022\r\n\005d"
      "ocid\030\001 \002(\r\022\017\n\007blockid\030\002 \002(\r\022\021\n\tpt_vector"
      "\030\003 \001(\014\022\024\n\014neuro_vector\030\004 \001(\014\"M\n\017BakedDoc"
      "umentV2\022\r\n\005docid\030\001 \002(\r\022+\n\007vectors\030\002 \003(\0132"
      "\032.idxembedder.pb.VectorData\"2\n\014Zone2Bloc"
      "kId\022\017\n\007zone_id\030\001 \002(\r\022\021\n\tblock_ids\030\002 \003(\r\""
      "O\n\007Request\022+\n\tdocuments\030\001 \003(\0132\030.idxembed"
      "der.pb.Document\022\027\n\017minimal_version\030\002 \001(\r"
      "\"\370\001\n\006Answer\022\023\n\013result_code\030\001 \002(\r\0220\n\tdocu"
      "ments\030\002 \003(\0132\035.idxembedder.pb.BakedDocume"
      "nt\022\025\n\rpt_model_hash\030\003 \001(\007\022\030\n\020neuro_model"
      "_hash\030\004 \001(\007\022\031\n\npq_enabled\030\005 \001(\010:\005false\022\023"
      "\n\013blockid_map\030\006 \003(\r\0225\n\014documents_v2\030\007 \003("
      "\0132\037.idxembedder.pb.BakedDocumentV2\022\017\n\007ve"
      "rsion\030\010 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idxembedder.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_idxembedder_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kTextFieldNumber;
const int Document::kDocidFieldNumber;
const int Document::kZoneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&docid_, &from.docid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zone_id_) -
    reinterpret_cast<char*>(&docid_)) + sizeof(zone_id_));
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&docid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zone_id_) -
      reinterpret_cast<char*>(&docid_)) + sizeof(zone_id_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&docid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zone_id_) -
        reinterpret_cast<char*>(&docid_)) + sizeof(zone_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idxembedder.pb.Document.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 docid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 zone_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idxembedder.pb.Document.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // required uint32 docid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->docid(), output);
  }

  // required uint32 zone_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zone_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idxembedder.pb.Document.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required uint32 docid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->docid(), target);
  }

  // required uint32 zone_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zone_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.Document)
  return target;
}

size_t Document::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:idxembedder.pb.Document)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_docid()) {
    // required uint32 docid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());
  }

  if (has_zone_id()) {
    // required uint32 zone_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());
  }

  return total_size;
}
size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint32 docid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());

    // required uint32 zone_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      docid_ = from.docid_;
    }
    if (cached_has_bits & 0x00000004u) {
      zone_id_ = from.zone_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(docid_, other->docid_);
  swap(zone_id_, other->zone_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// required string text = 1;
bool Document::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Document::text() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.text)
  return text_.GetNoArena();
}
void Document::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.text)
}
#if LANG_CXX11
void Document::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.Document.text)
}
#endif
void Document::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.Document.text)
}
void Document::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.Document.text)
}
::std::string* Document::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Document.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_text() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.Document.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.Document.text)
}

// required uint32 docid = 2;
bool Document::has_docid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_docid() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_docid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
::google::protobuf::uint32 Document::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.docid)
  return docid_;
}
void Document::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.docid)
}

// required uint32 zone_id = 3;
bool Document::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Document::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Document::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Document::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
::google::protobuf::uint32 Document::zone_id() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.zone_id)
  return zone_id_;
}
void Document::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.zone_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorData::kDataFieldNumber;
const int VectorData::kBlockidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorData::VectorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.VectorData)
}
VectorData::VectorData(const VectorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  blockid_ = from.blockid_;
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.VectorData)
}

void VectorData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockid_ = 0u;
}

VectorData::~VectorData() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.VectorData)
  SharedDtor();
}

void VectorData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VectorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorData::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorData& VectorData::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

VectorData* VectorData::New(::google::protobuf::Arena* arena) const {
  VectorData* n = new VectorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VectorData::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.VectorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  blockid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.VectorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_blockid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.VectorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.VectorData)
  return false;
#undef DO_
}

void VectorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.VectorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional uint32 blockid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blockid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.VectorData)
}

::google::protobuf::uint8* VectorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.VectorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional uint32 blockid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blockid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.VectorData)
  return target;
}

size_t VectorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.VectorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }
  // optional uint32 blockid = 2;
  if (has_blockid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.VectorData)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.VectorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.VectorData)
    MergeFrom(*source);
  }
}

void VectorData::MergeFrom(const VectorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.VectorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.VectorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorData::CopyFrom(const VectorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.VectorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VectorData::Swap(VectorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorData::InternalSwap(VectorData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(blockid_, other->blockid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VectorData::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VectorData

// required bytes data = 1;
bool VectorData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VectorData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void VectorData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void VectorData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& VectorData::data() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.VectorData.data)
  return data_.GetNoArena();
}
void VectorData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.VectorData.data)
}
#if LANG_CXX11
void VectorData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.VectorData.data)
}
#endif
void VectorData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.VectorData.data)
}
void VectorData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.VectorData.data)
}
::std::string* VectorData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.VectorData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VectorData::release_data() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.VectorData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VectorData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.VectorData.data)
}

// optional uint32 blockid = 2;
bool VectorData::has_blockid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VectorData::set_has_blockid() {
  _has_bits_[0] |= 0x00000002u;
}
void VectorData::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000002u;
}
void VectorData::clear_blockid() {
  blockid_ = 0u;
  clear_has_blockid();
}
::google::protobuf::uint32 VectorData::blockid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.VectorData.blockid)
  return blockid_;
}
void VectorData::set_blockid(::google::protobuf::uint32 value) {
  set_has_blockid();
  blockid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.VectorData.blockid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BakedDocument::kDocidFieldNumber;
const int BakedDocument::kBlockidFieldNumber;
const int BakedDocument::kPtVectorFieldNumber;
const int BakedDocument::kNeuroVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BakedDocument::BakedDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.BakedDocument)
}
BakedDocument::BakedDocument(const BakedDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pt_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pt_vector()) {
    pt_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pt_vector_);
  }
  neuro_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_neuro_vector()) {
    neuro_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neuro_vector_);
  }
  ::memcpy(&docid_, &from.docid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockid_) -
    reinterpret_cast<char*>(&docid_)) + sizeof(blockid_));
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.BakedDocument)
}

void BakedDocument::SharedCtor() {
  _cached_size_ = 0;
  pt_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neuro_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&docid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockid_) -
      reinterpret_cast<char*>(&docid_)) + sizeof(blockid_));
}

BakedDocument::~BakedDocument() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.BakedDocument)
  SharedDtor();
}

void BakedDocument::SharedDtor() {
  pt_vector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neuro_vector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BakedDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BakedDocument::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BakedDocument& BakedDocument::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

BakedDocument* BakedDocument::New(::google::protobuf::Arena* arena) const {
  BakedDocument* n = new BakedDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BakedDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.BakedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pt_vector_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pt_vector_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!neuro_vector_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*neuro_vector_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&docid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blockid_) -
        reinterpret_cast<char*>(&docid_)) + sizeof(blockid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BakedDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.BakedDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 docid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_blockid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pt_vector = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pt_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes neuro_vector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_neuro_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.BakedDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.BakedDocument)
  return false;
#undef DO_
}

void BakedDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.BakedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->docid(), output);
  }

  // required uint32 blockid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blockid(), output);
  }

  // optional bytes pt_vector = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pt_vector(), output);
  }

  // optional bytes neuro_vector = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->neuro_vector(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.BakedDocument)
}

::google::protobuf::uint8* BakedDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.BakedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->docid(), target);
  }

  // required uint32 blockid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blockid(), target);
  }

  // optional bytes pt_vector = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pt_vector(), target);
  }

  // optional bytes neuro_vector = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->neuro_vector(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.BakedDocument)
  return target;
}

size_t BakedDocument::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:idxembedder.pb.BakedDocument)
  size_t total_size = 0;

  if (has_docid()) {
    // required uint32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());
  }

  if (has_blockid()) {
    // required uint32 blockid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());
  }

  return total_size;
}
size_t BakedDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.BakedDocument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 docid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());

    // required uint32 blockid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blockid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes pt_vector = 3;
    if (has_pt_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pt_vector());
    }

    // optional bytes neuro_vector = 4;
    if (has_neuro_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->neuro_vector());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BakedDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.BakedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const BakedDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BakedDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.BakedDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.BakedDocument)
    MergeFrom(*source);
  }
}

void BakedDocument::MergeFrom(const BakedDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.BakedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pt_vector();
      pt_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pt_vector_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_neuro_vector();
      neuro_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neuro_vector_);
    }
    if (cached_has_bits & 0x00000004u) {
      docid_ = from.docid_;
    }
    if (cached_has_bits & 0x00000008u) {
      blockid_ = from.blockid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BakedDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.BakedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakedDocument::CopyFrom(const BakedDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.BakedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakedDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void BakedDocument::Swap(BakedDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BakedDocument::InternalSwap(BakedDocument* other) {
  using std::swap;
  pt_vector_.Swap(&other->pt_vector_);
  neuro_vector_.Swap(&other->neuro_vector_);
  swap(docid_, other->docid_);
  swap(blockid_, other->blockid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BakedDocument::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BakedDocument

// required uint32 docid = 1;
bool BakedDocument::has_docid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BakedDocument::set_has_docid() {
  _has_bits_[0] |= 0x00000004u;
}
void BakedDocument::clear_has_docid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BakedDocument::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
::google::protobuf::uint32 BakedDocument::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.docid)
  return docid_;
}
void BakedDocument::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.docid)
}

// required uint32 blockid = 2;
bool BakedDocument::has_blockid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BakedDocument::set_has_blockid() {
  _has_bits_[0] |= 0x00000008u;
}
void BakedDocument::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000008u;
}
void BakedDocument::clear_blockid() {
  blockid_ = 0u;
  clear_has_blockid();
}
::google::protobuf::uint32 BakedDocument::blockid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.blockid)
  return blockid_;
}
void BakedDocument::set_blockid(::google::protobuf::uint32 value) {
  set_has_blockid();
  blockid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.blockid)
}

// optional bytes pt_vector = 3;
bool BakedDocument::has_pt_vector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BakedDocument::set_has_pt_vector() {
  _has_bits_[0] |= 0x00000001u;
}
void BakedDocument::clear_has_pt_vector() {
  _has_bits_[0] &= ~0x00000001u;
}
void BakedDocument::clear_pt_vector() {
  pt_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pt_vector();
}
const ::std::string& BakedDocument::pt_vector() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.pt_vector)
  return pt_vector_.GetNoArena();
}
void BakedDocument::set_pt_vector(const ::std::string& value) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.pt_vector)
}
#if LANG_CXX11
void BakedDocument::set_pt_vector(::std::string&& value) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.BakedDocument.pt_vector)
}
#endif
void BakedDocument::set_pt_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.BakedDocument.pt_vector)
}
void BakedDocument::set_pt_vector(const void* value, size_t size) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.BakedDocument.pt_vector)
}
::std::string* BakedDocument::mutable_pt_vector() {
  set_has_pt_vector();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocument.pt_vector)
  return pt_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakedDocument::release_pt_vector() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.BakedDocument.pt_vector)
  clear_has_pt_vector();
  return pt_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakedDocument::set_allocated_pt_vector(::std::string* pt_vector) {
  if (pt_vector != NULL) {
    set_has_pt_vector();
  } else {
    clear_has_pt_vector();
  }
  pt_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pt_vector);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.BakedDocument.pt_vector)
}

// optional bytes neuro_vector = 4;
bool BakedDocument::has_neuro_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BakedDocument::set_has_neuro_vector() {
  _has_bits_[0] |= 0x00000002u;
}
void BakedDocument::clear_has_neuro_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
void BakedDocument::clear_neuro_vector() {
  neuro_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neuro_vector();
}
const ::std::string& BakedDocument::neuro_vector() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.neuro_vector)
  return neuro_vector_.GetNoArena();
}
void BakedDocument::set_neuro_vector(const ::std::string& value) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.neuro_vector)
}
#if LANG_CXX11
void BakedDocument::set_neuro_vector(::std::string&& value) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.BakedDocument.neuro_vector)
}
#endif
void BakedDocument::set_neuro_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.BakedDocument.neuro_vector)
}
void BakedDocument::set_neuro_vector(const void* value, size_t size) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.BakedDocument.neuro_vector)
}
::std::string* BakedDocument::mutable_neuro_vector() {
  set_has_neuro_vector();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocument.neuro_vector)
  return neuro_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakedDocument::release_neuro_vector() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.BakedDocument.neuro_vector)
  clear_has_neuro_vector();
  return neuro_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakedDocument::set_allocated_neuro_vector(::std::string* neuro_vector) {
  if (neuro_vector != NULL) {
    set_has_neuro_vector();
  } else {
    clear_has_neuro_vector();
  }
  neuro_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neuro_vector);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.BakedDocument.neuro_vector)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BakedDocumentV2::kDocidFieldNumber;
const int BakedDocumentV2::kVectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BakedDocumentV2::BakedDocumentV2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.BakedDocumentV2)
}
BakedDocumentV2::BakedDocumentV2(const BakedDocumentV2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vectors_(from.vectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  docid_ = from.docid_;
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.BakedDocumentV2)
}

void BakedDocumentV2::SharedCtor() {
  _cached_size_ = 0;
  docid_ = 0u;
}

BakedDocumentV2::~BakedDocumentV2() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.BakedDocumentV2)
  SharedDtor();
}

void BakedDocumentV2::SharedDtor() {
}

void BakedDocumentV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BakedDocumentV2::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BakedDocumentV2& BakedDocumentV2::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

BakedDocumentV2* BakedDocumentV2::New(::google::protobuf::Arena* arena) const {
  BakedDocumentV2* n = new BakedDocumentV2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BakedDocumentV2::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.BakedDocumentV2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectors_.Clear();
  docid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BakedDocumentV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.BakedDocumentV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 docid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_docid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .idxembedder.pb.VectorData vectors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.BakedDocumentV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.BakedDocumentV2)
  return false;
#undef DO_
}

void BakedDocumentV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.BakedDocumentV2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->docid(), output);
  }

  // repeated .idxembedder.pb.VectorData vectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vectors(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.BakedDocumentV2)
}

::google::protobuf::uint8* BakedDocumentV2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.BakedDocumentV2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 docid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->docid(), target);
  }

  // repeated .idxembedder.pb.VectorData vectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vectors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.BakedDocumentV2)
  return target;
}

size_t BakedDocumentV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.BakedDocumentV2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 docid = 1;
  if (has_docid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docid());
  }
  // repeated .idxembedder.pb.VectorData vectors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vectors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BakedDocumentV2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.BakedDocumentV2)
  GOOGLE_DCHECK_NE(&from, this);
  const BakedDocumentV2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BakedDocumentV2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.BakedDocumentV2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.BakedDocumentV2)
    MergeFrom(*source);
  }
}

void BakedDocumentV2::MergeFrom(const BakedDocumentV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.BakedDocumentV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vectors_.MergeFrom(from.vectors_);
  if (from.has_docid()) {
    set_docid(from.docid());
  }
}

void BakedDocumentV2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.BakedDocumentV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakedDocumentV2::CopyFrom(const BakedDocumentV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.BakedDocumentV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakedDocumentV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vectors())) return false;
  return true;
}

void BakedDocumentV2::Swap(BakedDocumentV2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BakedDocumentV2::InternalSwap(BakedDocumentV2* other) {
  using std::swap;
  vectors_.InternalSwap(&other->vectors_);
  swap(docid_, other->docid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BakedDocumentV2::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BakedDocumentV2

// required uint32 docid = 1;
bool BakedDocumentV2::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BakedDocumentV2::set_has_docid() {
  _has_bits_[0] |= 0x00000001u;
}
void BakedDocumentV2::clear_has_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BakedDocumentV2::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
::google::protobuf::uint32 BakedDocumentV2::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocumentV2.docid)
  return docid_;
}
void BakedDocumentV2::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocumentV2.docid)
}

// repeated .idxembedder.pb.VectorData vectors = 2;
int BakedDocumentV2::vectors_size() const {
  return vectors_.size();
}
void BakedDocumentV2::clear_vectors() {
  vectors_.Clear();
}
const ::idxembedder::pb::VectorData& BakedDocumentV2::vectors(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Get(index);
}
::idxembedder::pb::VectorData* BakedDocumentV2::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Mutable(index);
}
::idxembedder::pb::VectorData* BakedDocumentV2::add_vectors() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >*
BakedDocumentV2::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.BakedDocumentV2.vectors)
  return &vectors_;
}
const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >&
BakedDocumentV2::vectors() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Zone2BlockId::kZoneIdFieldNumber;
const int Zone2BlockId::kBlockIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Zone2BlockId::Zone2BlockId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.Zone2BlockId)
}
Zone2BlockId::Zone2BlockId(const Zone2BlockId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  zone_id_ = from.zone_id_;
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.Zone2BlockId)
}

void Zone2BlockId::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
}

Zone2BlockId::~Zone2BlockId() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.Zone2BlockId)
  SharedDtor();
}

void Zone2BlockId::SharedDtor() {
}

void Zone2BlockId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone2BlockId::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Zone2BlockId& Zone2BlockId::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

Zone2BlockId* Zone2BlockId::New(::google::protobuf::Arena* arena) const {
  Zone2BlockId* n = new Zone2BlockId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Zone2BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.Zone2BlockId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  zone_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Zone2BlockId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.Zone2BlockId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zone_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 block_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_block_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_block_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.Zone2BlockId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.Zone2BlockId)
  return false;
#undef DO_
}

void Zone2BlockId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.Zone2BlockId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  // repeated uint32 block_ids = 2;
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->block_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.Zone2BlockId)
}

::google::protobuf::uint8* Zone2BlockId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.Zone2BlockId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 zone_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  // repeated uint32 block_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->block_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.Zone2BlockId)
  return target;
}

size_t Zone2BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.Zone2BlockId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 zone_id = 1;
  if (has_zone_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zone_id());
  }
  // repeated uint32 block_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->block_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->block_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone2BlockId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.Zone2BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  const Zone2BlockId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Zone2BlockId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.Zone2BlockId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.Zone2BlockId)
    MergeFrom(*source);
  }
}

void Zone2BlockId::MergeFrom(const Zone2BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.Zone2BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  if (from.has_zone_id()) {
    set_zone_id(from.zone_id());
  }
}

void Zone2BlockId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.Zone2BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone2BlockId::CopyFrom(const Zone2BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.Zone2BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone2BlockId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Zone2BlockId::Swap(Zone2BlockId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Zone2BlockId::InternalSwap(Zone2BlockId* other) {
  using std::swap;
  block_ids_.InternalSwap(&other->block_ids_);
  swap(zone_id_, other->zone_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Zone2BlockId::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Zone2BlockId

// required uint32 zone_id = 1;
bool Zone2BlockId::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Zone2BlockId::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Zone2BlockId::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Zone2BlockId::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
::google::protobuf::uint32 Zone2BlockId::zone_id() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Zone2BlockId.zone_id)
  return zone_id_;
}
void Zone2BlockId::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Zone2BlockId.zone_id)
}

// repeated uint32 block_ids = 2;
int Zone2BlockId::block_ids_size() const {
  return block_ids_.size();
}
void Zone2BlockId::clear_block_ids() {
  block_ids_.Clear();
}
::google::protobuf::uint32 Zone2BlockId::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Zone2BlockId.block_ids)
  return block_ids_.Get(index);
}
void Zone2BlockId::set_block_ids(int index, ::google::protobuf::uint32 value) {
  block_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Zone2BlockId.block_ids)
}
void Zone2BlockId::add_block_ids(::google::protobuf::uint32 value) {
  block_ids_.Add(value);
  // @@protoc_insertion_point(field_add:idxembedder.pb.Zone2BlockId.block_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Zone2BlockId::block_ids() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Zone2BlockId.block_ids)
  return block_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Zone2BlockId::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Zone2BlockId.block_ids)
  return &block_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kDocumentsFieldNumber;
const int Request::kMinimalVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  minimal_version_ = from.minimal_version_;
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  minimal_version_ = 0u;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  minimal_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .idxembedder.pb.Document documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minimal_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minimal_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimal_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idxembedder.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 minimal_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minimal_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idxembedder.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->documents(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 minimal_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minimal_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .idxembedder.pb.Document documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  // optional uint32 minimal_version = 2;
  if (has_minimal_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimal_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (from.has_minimal_version()) {
    set_minimal_version(from.minimal_version());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  swap(minimal_version_, other->minimal_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// repeated .idxembedder.pb.Document documents = 1;
int Request::documents_size() const {
  return documents_.size();
}
void Request::clear_documents() {
  documents_.Clear();
}
const ::idxembedder::pb::Document& Request::documents(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Request.documents)
  return documents_.Get(index);
}
::idxembedder::pb::Document* Request::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Request.documents)
  return documents_.Mutable(index);
}
::idxembedder::pb::Document* Request::add_documents() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Request.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >*
Request::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Request.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >&
Request::documents() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Request.documents)
  return documents_;
}

// optional uint32 minimal_version = 2;
bool Request::has_minimal_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_minimal_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_minimal_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_minimal_version() {
  minimal_version_ = 0u;
  clear_has_minimal_version();
}
::google::protobuf::uint32 Request::minimal_version() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Request.minimal_version)
  return minimal_version_;
}
void Request::set_minimal_version(::google::protobuf::uint32 value) {
  set_has_minimal_version();
  minimal_version_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Request.minimal_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kResultCodeFieldNumber;
const int Answer::kDocumentsFieldNumber;
const int Answer::kPtModelHashFieldNumber;
const int Answer::kNeuroModelHashFieldNumber;
const int Answer::kPqEnabledFieldNumber;
const int Answer::kBlockidMapFieldNumber;
const int Answer::kDocumentsV2FieldNumber;
const int Answer::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_idxembedder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:idxembedder.pb.Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_),
      blockid_map_(from.blockid_map_),
      documents_v2_(from.documents_v2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_code_, &from.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&result_code_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:idxembedder.pb.Answer)
}

void Answer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&result_code_)) + sizeof(version_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:idxembedder.pb.Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
}

void Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Answer& Answer::default_instance() {
  protobuf_idxembedder_2eproto::InitDefaults();
  return *internal_default_instance();
}

Answer* Answer::New(::google::protobuf::Arena* arena) const {
  Answer* n = new Answer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:idxembedder.pb.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  blockid_map_.Clear();
  documents_v2_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&result_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&result_code_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:idxembedder.pb.Answer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .idxembedder.pb.BakedDocument documents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 pt_model_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pt_model_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pt_model_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 neuro_model_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_neuro_model_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &neuro_model_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pq_enabled = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pq_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pq_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 blockid_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_blockid_map())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blockid_map())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:idxembedder.pb.Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:idxembedder.pb.Answer)
  return false;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:idxembedder.pb.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // repeated .idxembedder.pb.BakedDocument documents = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->documents(static_cast<int>(i)), output);
  }

  // optional fixed32 pt_model_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->pt_model_hash(), output);
  }

  // optional fixed32 neuro_model_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->neuro_model_hash(), output);
  }

  // optional bool pq_enabled = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pq_enabled(), output);
  }

  // repeated uint32 blockid_map = 6;
  for (int i = 0, n = this->blockid_map_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->blockid_map(i), output);
  }

  // repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_v2_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->documents_v2(static_cast<int>(i)), output);
  }

  // optional uint32 version = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:idxembedder.pb.Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:idxembedder.pb.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // repeated .idxembedder.pb.BakedDocument documents = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->documents(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed32 pt_model_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->pt_model_hash(), target);
  }

  // optional fixed32 neuro_model_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->neuro_model_hash(), target);
  }

  // optional bool pq_enabled = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pq_enabled(), target);
  }

  // repeated uint32 blockid_map = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->blockid_map_, target);

  // repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_v2_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->documents_v2(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 version = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idxembedder.pb.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idxembedder.pb.Answer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 result_code = 1;
  if (has_result_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }
  // repeated .idxembedder.pb.BakedDocument documents = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  // repeated uint32 blockid_map = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->blockid_map_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->blockid_map_size());
    total_size += data_size;
  }

  // repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_v2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents_v2(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional fixed32 pt_model_hash = 3;
    if (has_pt_model_hash()) {
      total_size += 1 + 4;
    }

    // optional fixed32 neuro_model_hash = 4;
    if (has_neuro_model_hash()) {
      total_size += 1 + 4;
    }

    // optional bool pq_enabled = 5 [default = false];
    if (has_pq_enabled()) {
      total_size += 1 + 1;
    }

    // optional uint32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idxembedder.pb.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Answer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idxembedder.pb.Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idxembedder.pb.Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idxembedder.pb.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  blockid_map_.MergeFrom(from.blockid_map_);
  documents_v2_.MergeFrom(from.documents_v2_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      result_code_ = from.result_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      pt_model_hash_ = from.pt_model_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      neuro_model_hash_ = from.neuro_model_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      pq_enabled_ = from.pq_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idxembedder.pb.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idxembedder.pb.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->documents_v2())) return false;
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  blockid_map_.InternalSwap(&other->blockid_map_);
  documents_v2_.InternalSwap(&other->documents_v2_);
  swap(result_code_, other->result_code_);
  swap(pt_model_hash_, other->pt_model_hash_);
  swap(neuro_model_hash_, other->neuro_model_hash_);
  swap(pq_enabled_, other->pq_enabled_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_idxembedder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_idxembedder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Answer

// required uint32 result_code = 1;
bool Answer::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Answer::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Answer::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Answer::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
::google::protobuf::uint32 Answer::result_code() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.result_code)
  return result_code_;
}
void Answer::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.result_code)
}

// repeated .idxembedder.pb.BakedDocument documents = 2;
int Answer::documents_size() const {
  return documents_.size();
}
void Answer::clear_documents() {
  documents_.Clear();
}
const ::idxembedder::pb::BakedDocument& Answer::documents(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.documents)
  return documents_.Get(index);
}
::idxembedder::pb::BakedDocument* Answer::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Answer.documents)
  return documents_.Mutable(index);
}
::idxembedder::pb::BakedDocument* Answer::add_documents() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >*
Answer::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >&
Answer::documents() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.documents)
  return documents_;
}

// optional fixed32 pt_model_hash = 3;
bool Answer::has_pt_model_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Answer::set_has_pt_model_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void Answer::clear_has_pt_model_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void Answer::clear_pt_model_hash() {
  pt_model_hash_ = 0u;
  clear_has_pt_model_hash();
}
::google::protobuf::uint32 Answer::pt_model_hash() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.pt_model_hash)
  return pt_model_hash_;
}
void Answer::set_pt_model_hash(::google::protobuf::uint32 value) {
  set_has_pt_model_hash();
  pt_model_hash_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.pt_model_hash)
}

// optional fixed32 neuro_model_hash = 4;
bool Answer::has_neuro_model_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Answer::set_has_neuro_model_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void Answer::clear_has_neuro_model_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void Answer::clear_neuro_model_hash() {
  neuro_model_hash_ = 0u;
  clear_has_neuro_model_hash();
}
::google::protobuf::uint32 Answer::neuro_model_hash() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.neuro_model_hash)
  return neuro_model_hash_;
}
void Answer::set_neuro_model_hash(::google::protobuf::uint32 value) {
  set_has_neuro_model_hash();
  neuro_model_hash_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.neuro_model_hash)
}

// optional bool pq_enabled = 5 [default = false];
bool Answer::has_pq_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Answer::set_has_pq_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
void Answer::clear_has_pq_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
void Answer::clear_pq_enabled() {
  pq_enabled_ = false;
  clear_has_pq_enabled();
}
bool Answer::pq_enabled() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.pq_enabled)
  return pq_enabled_;
}
void Answer::set_pq_enabled(bool value) {
  set_has_pq_enabled();
  pq_enabled_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.pq_enabled)
}

// repeated uint32 blockid_map = 6;
int Answer::blockid_map_size() const {
  return blockid_map_.size();
}
void Answer::clear_blockid_map() {
  blockid_map_.Clear();
}
::google::protobuf::uint32 Answer::blockid_map(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.blockid_map)
  return blockid_map_.Get(index);
}
void Answer::set_blockid_map(int index, ::google::protobuf::uint32 value) {
  blockid_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.blockid_map)
}
void Answer::add_blockid_map(::google::protobuf::uint32 value) {
  blockid_map_.Add(value);
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.blockid_map)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Answer::blockid_map() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.blockid_map)
  return blockid_map_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Answer::mutable_blockid_map() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.blockid_map)
  return &blockid_map_;
}

// repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
int Answer::documents_v2_size() const {
  return documents_v2_.size();
}
void Answer::clear_documents_v2() {
  documents_v2_.Clear();
}
const ::idxembedder::pb::BakedDocumentV2& Answer::documents_v2(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Get(index);
}
::idxembedder::pb::BakedDocumentV2* Answer::mutable_documents_v2(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Mutable(index);
}
::idxembedder::pb::BakedDocumentV2* Answer::add_documents_v2() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Add();
}
::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >*
Answer::mutable_documents_v2() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.documents_v2)
  return &documents_v2_;
}
const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >&
Answer::documents_v2() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.documents_v2)
  return documents_v2_;
}

// optional uint32 version = 8;
bool Answer::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Answer::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void Answer::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void Answer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 Answer::version() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.version)
  return version_;
}
void Answer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace idxembedder

// @@protoc_insertion_point(global_scope)
