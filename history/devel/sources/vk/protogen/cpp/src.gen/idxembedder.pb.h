// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idxembedder.proto

#ifndef PROTOBUF_idxembedder_2eproto__INCLUDED
#define PROTOBUF_idxembedder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace idxembedder {
namespace pb {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class BakedDocument;
class BakedDocumentDefaultTypeInternal;
extern BakedDocumentDefaultTypeInternal _BakedDocument_default_instance_;
class BakedDocumentV2;
class BakedDocumentV2DefaultTypeInternal;
extern BakedDocumentV2DefaultTypeInternal _BakedDocumentV2_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class VectorData;
class VectorDataDefaultTypeInternal;
extern VectorDataDefaultTypeInternal _VectorData_default_instance_;
class Zone2BlockId;
class Zone2BlockIdDefaultTypeInternal;
extern Zone2BlockIdDefaultTypeInternal _Zone2BlockId_default_instance_;
}  // namespace pb
}  // namespace idxembedder

namespace idxembedder {
namespace pb {

namespace protobuf_idxembedder_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_idxembedder_2eproto

// ===================================================================

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint32 docid = 2;
  bool has_docid() const;
  void clear_docid();
  static const int kDocidFieldNumber = 2;
  ::google::protobuf::uint32 docid() const;
  void set_docid(::google::protobuf::uint32 value);

  // required uint32 zone_id = 3;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.Document)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_docid();
  void clear_has_docid();
  void set_has_zone_id();
  void clear_has_zone_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 docid_;
  ::google::protobuf::uint32 zone_id_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VectorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.VectorData) */ {
 public:
  VectorData();
  virtual ~VectorData();

  VectorData(const VectorData& from);

  inline VectorData& operator=(const VectorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorData(VectorData&& from) noexcept
    : VectorData() {
    *this = ::std::move(from);
  }

  inline VectorData& operator=(VectorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorData& default_instance();

  static inline const VectorData* internal_default_instance() {
    return reinterpret_cast<const VectorData*>(
               &_VectorData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VectorData* other);
  friend void swap(VectorData& a, VectorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorData* New() const PROTOBUF_FINAL { return New(NULL); }

  VectorData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VectorData& from);
  void MergeFrom(const VectorData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VectorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional uint32 blockid = 2;
  bool has_blockid() const;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  ::google::protobuf::uint32 blockid() const;
  void set_blockid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.VectorData)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_blockid();
  void clear_has_blockid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 blockid_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BakedDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.BakedDocument) */ {
 public:
  BakedDocument();
  virtual ~BakedDocument();

  BakedDocument(const BakedDocument& from);

  inline BakedDocument& operator=(const BakedDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BakedDocument(BakedDocument&& from) noexcept
    : BakedDocument() {
    *this = ::std::move(from);
  }

  inline BakedDocument& operator=(BakedDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BakedDocument& default_instance();

  static inline const BakedDocument* internal_default_instance() {
    return reinterpret_cast<const BakedDocument*>(
               &_BakedDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BakedDocument* other);
  friend void swap(BakedDocument& a, BakedDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BakedDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  BakedDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BakedDocument& from);
  void MergeFrom(const BakedDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BakedDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pt_vector = 3;
  bool has_pt_vector() const;
  void clear_pt_vector();
  static const int kPtVectorFieldNumber = 3;
  const ::std::string& pt_vector() const;
  void set_pt_vector(const ::std::string& value);
  #if LANG_CXX11
  void set_pt_vector(::std::string&& value);
  #endif
  void set_pt_vector(const char* value);
  void set_pt_vector(const void* value, size_t size);
  ::std::string* mutable_pt_vector();
  ::std::string* release_pt_vector();
  void set_allocated_pt_vector(::std::string* pt_vector);

  // optional bytes neuro_vector = 4;
  bool has_neuro_vector() const;
  void clear_neuro_vector();
  static const int kNeuroVectorFieldNumber = 4;
  const ::std::string& neuro_vector() const;
  void set_neuro_vector(const ::std::string& value);
  #if LANG_CXX11
  void set_neuro_vector(::std::string&& value);
  #endif
  void set_neuro_vector(const char* value);
  void set_neuro_vector(const void* value, size_t size);
  ::std::string* mutable_neuro_vector();
  ::std::string* release_neuro_vector();
  void set_allocated_neuro_vector(::std::string* neuro_vector);

  // required uint32 docid = 1;
  bool has_docid() const;
  void clear_docid();
  static const int kDocidFieldNumber = 1;
  ::google::protobuf::uint32 docid() const;
  void set_docid(::google::protobuf::uint32 value);

  // required uint32 blockid = 2;
  bool has_blockid() const;
  void clear_blockid();
  static const int kBlockidFieldNumber = 2;
  ::google::protobuf::uint32 blockid() const;
  void set_blockid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.BakedDocument)
 private:
  void set_has_docid();
  void clear_has_docid();
  void set_has_blockid();
  void clear_has_blockid();
  void set_has_pt_vector();
  void clear_has_pt_vector();
  void set_has_neuro_vector();
  void clear_has_neuro_vector();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pt_vector_;
  ::google::protobuf::internal::ArenaStringPtr neuro_vector_;
  ::google::protobuf::uint32 docid_;
  ::google::protobuf::uint32 blockid_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BakedDocumentV2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.BakedDocumentV2) */ {
 public:
  BakedDocumentV2();
  virtual ~BakedDocumentV2();

  BakedDocumentV2(const BakedDocumentV2& from);

  inline BakedDocumentV2& operator=(const BakedDocumentV2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BakedDocumentV2(BakedDocumentV2&& from) noexcept
    : BakedDocumentV2() {
    *this = ::std::move(from);
  }

  inline BakedDocumentV2& operator=(BakedDocumentV2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BakedDocumentV2& default_instance();

  static inline const BakedDocumentV2* internal_default_instance() {
    return reinterpret_cast<const BakedDocumentV2*>(
               &_BakedDocumentV2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BakedDocumentV2* other);
  friend void swap(BakedDocumentV2& a, BakedDocumentV2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BakedDocumentV2* New() const PROTOBUF_FINAL { return New(NULL); }

  BakedDocumentV2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BakedDocumentV2& from);
  void MergeFrom(const BakedDocumentV2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BakedDocumentV2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idxembedder.pb.VectorData vectors = 2;
  int vectors_size() const;
  void clear_vectors();
  static const int kVectorsFieldNumber = 2;
  const ::idxembedder::pb::VectorData& vectors(int index) const;
  ::idxembedder::pb::VectorData* mutable_vectors(int index);
  ::idxembedder::pb::VectorData* add_vectors();
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >*
      mutable_vectors();
  const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >&
      vectors() const;

  // required uint32 docid = 1;
  bool has_docid() const;
  void clear_docid();
  static const int kDocidFieldNumber = 1;
  ::google::protobuf::uint32 docid() const;
  void set_docid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.BakedDocumentV2)
 private:
  void set_has_docid();
  void clear_has_docid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData > vectors_;
  ::google::protobuf::uint32 docid_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Zone2BlockId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.Zone2BlockId) */ {
 public:
  Zone2BlockId();
  virtual ~Zone2BlockId();

  Zone2BlockId(const Zone2BlockId& from);

  inline Zone2BlockId& operator=(const Zone2BlockId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Zone2BlockId(Zone2BlockId&& from) noexcept
    : Zone2BlockId() {
    *this = ::std::move(from);
  }

  inline Zone2BlockId& operator=(Zone2BlockId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zone2BlockId& default_instance();

  static inline const Zone2BlockId* internal_default_instance() {
    return reinterpret_cast<const Zone2BlockId*>(
               &_Zone2BlockId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Zone2BlockId* other);
  friend void swap(Zone2BlockId& a, Zone2BlockId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Zone2BlockId* New() const PROTOBUF_FINAL { return New(NULL); }

  Zone2BlockId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Zone2BlockId& from);
  void MergeFrom(const Zone2BlockId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Zone2BlockId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 block_ids = 2;
  int block_ids_size() const;
  void clear_block_ids();
  static const int kBlockIdsFieldNumber = 2;
  ::google::protobuf::uint32 block_ids(int index) const;
  void set_block_ids(int index, ::google::protobuf::uint32 value);
  void add_block_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      block_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_block_ids();

  // required uint32 zone_id = 1;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.Zone2BlockId)
 private:
  void set_has_zone_id();
  void clear_has_zone_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > block_ids_;
  ::google::protobuf::uint32 zone_id_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idxembedder.pb.Document documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::idxembedder::pb::Document& documents(int index) const;
  ::idxembedder::pb::Document* mutable_documents(int index);
  ::idxembedder::pb::Document* add_documents();
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >&
      documents() const;

  // optional uint32 minimal_version = 2;
  bool has_minimal_version() const;
  void clear_minimal_version();
  static const int kMinimalVersionFieldNumber = 2;
  ::google::protobuf::uint32 minimal_version() const;
  void set_minimal_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.Request)
 private:
  void set_has_minimal_version();
  void clear_has_minimal_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document > documents_;
  ::google::protobuf::uint32 minimal_version_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idxembedder.pb.Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Answer* other);
  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const PROTOBUF_FINAL { return New(NULL); }

  Answer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .idxembedder.pb.BakedDocument documents = 2;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 2;
  const ::idxembedder::pb::BakedDocument& documents(int index) const;
  ::idxembedder::pb::BakedDocument* mutable_documents(int index);
  ::idxembedder::pb::BakedDocument* add_documents();
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >&
      documents() const;

  // repeated uint32 blockid_map = 6;
  int blockid_map_size() const;
  void clear_blockid_map();
  static const int kBlockidMapFieldNumber = 6;
  ::google::protobuf::uint32 blockid_map(int index) const;
  void set_blockid_map(int index, ::google::protobuf::uint32 value);
  void add_blockid_map(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      blockid_map() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_blockid_map();

  // repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
  int documents_v2_size() const;
  void clear_documents_v2();
  static const int kDocumentsV2FieldNumber = 7;
  const ::idxembedder::pb::BakedDocumentV2& documents_v2(int index) const;
  ::idxembedder::pb::BakedDocumentV2* mutable_documents_v2(int index);
  ::idxembedder::pb::BakedDocumentV2* add_documents_v2();
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >*
      mutable_documents_v2();
  const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >&
      documents_v2() const;

  // required uint32 result_code = 1;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // optional fixed32 pt_model_hash = 3;
  bool has_pt_model_hash() const;
  void clear_pt_model_hash();
  static const int kPtModelHashFieldNumber = 3;
  ::google::protobuf::uint32 pt_model_hash() const;
  void set_pt_model_hash(::google::protobuf::uint32 value);

  // optional fixed32 neuro_model_hash = 4;
  bool has_neuro_model_hash() const;
  void clear_neuro_model_hash();
  static const int kNeuroModelHashFieldNumber = 4;
  ::google::protobuf::uint32 neuro_model_hash() const;
  void set_neuro_model_hash(::google::protobuf::uint32 value);

  // optional bool pq_enabled = 5 [default = false];
  bool has_pq_enabled() const;
  void clear_pq_enabled();
  static const int kPqEnabledFieldNumber = 5;
  bool pq_enabled() const;
  void set_pq_enabled(bool value);

  // optional uint32 version = 8;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 8;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:idxembedder.pb.Answer)
 private:
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_pt_model_hash();
  void clear_has_pt_model_hash();
  void set_has_neuro_model_hash();
  void clear_has_neuro_model_hash();
  void set_has_pq_enabled();
  void clear_has_pq_enabled();
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument > documents_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > blockid_map_;
  ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 > documents_v2_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 pt_model_hash_;
  ::google::protobuf::uint32 neuro_model_hash_;
  bool pq_enabled_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_idxembedder_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Document

// required string text = 1;
inline bool Document::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Document::text() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.text)
  return text_.GetNoArena();
}
inline void Document::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.text)
}
#if LANG_CXX11
inline void Document::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.Document.text)
}
#endif
inline void Document::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.Document.text)
}
inline void Document::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.Document.text)
}
inline ::std::string* Document::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Document.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_text() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.Document.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.Document.text)
}

// required uint32 docid = 2;
inline bool Document::has_docid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_docid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_docid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
inline ::google::protobuf::uint32 Document::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.docid)
  return docid_;
}
inline void Document::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.docid)
}

// required uint32 zone_id = 3;
inline bool Document::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 Document::zone_id() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Document.zone_id)
  return zone_id_;
}
inline void Document::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Document.zone_id)
}

// -------------------------------------------------------------------

// VectorData

// required bytes data = 1;
inline bool VectorData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& VectorData::data() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.VectorData.data)
  return data_.GetNoArena();
}
inline void VectorData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.VectorData.data)
}
#if LANG_CXX11
inline void VectorData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.VectorData.data)
}
#endif
inline void VectorData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.VectorData.data)
}
inline void VectorData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.VectorData.data)
}
inline ::std::string* VectorData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.VectorData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VectorData::release_data() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.VectorData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VectorData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.VectorData.data)
}

// optional uint32 blockid = 2;
inline bool VectorData::has_blockid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorData::set_has_blockid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorData::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorData::clear_blockid() {
  blockid_ = 0u;
  clear_has_blockid();
}
inline ::google::protobuf::uint32 VectorData::blockid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.VectorData.blockid)
  return blockid_;
}
inline void VectorData::set_blockid(::google::protobuf::uint32 value) {
  set_has_blockid();
  blockid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.VectorData.blockid)
}

// -------------------------------------------------------------------

// BakedDocument

// required uint32 docid = 1;
inline bool BakedDocument::has_docid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BakedDocument::set_has_docid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BakedDocument::clear_has_docid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BakedDocument::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
inline ::google::protobuf::uint32 BakedDocument::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.docid)
  return docid_;
}
inline void BakedDocument::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.docid)
}

// required uint32 blockid = 2;
inline bool BakedDocument::has_blockid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BakedDocument::set_has_blockid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BakedDocument::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BakedDocument::clear_blockid() {
  blockid_ = 0u;
  clear_has_blockid();
}
inline ::google::protobuf::uint32 BakedDocument::blockid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.blockid)
  return blockid_;
}
inline void BakedDocument::set_blockid(::google::protobuf::uint32 value) {
  set_has_blockid();
  blockid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.blockid)
}

// optional bytes pt_vector = 3;
inline bool BakedDocument::has_pt_vector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BakedDocument::set_has_pt_vector() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BakedDocument::clear_has_pt_vector() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BakedDocument::clear_pt_vector() {
  pt_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pt_vector();
}
inline const ::std::string& BakedDocument::pt_vector() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.pt_vector)
  return pt_vector_.GetNoArena();
}
inline void BakedDocument::set_pt_vector(const ::std::string& value) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.pt_vector)
}
#if LANG_CXX11
inline void BakedDocument::set_pt_vector(::std::string&& value) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.BakedDocument.pt_vector)
}
#endif
inline void BakedDocument::set_pt_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.BakedDocument.pt_vector)
}
inline void BakedDocument::set_pt_vector(const void* value, size_t size) {
  set_has_pt_vector();
  pt_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.BakedDocument.pt_vector)
}
inline ::std::string* BakedDocument::mutable_pt_vector() {
  set_has_pt_vector();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocument.pt_vector)
  return pt_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakedDocument::release_pt_vector() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.BakedDocument.pt_vector)
  clear_has_pt_vector();
  return pt_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakedDocument::set_allocated_pt_vector(::std::string* pt_vector) {
  if (pt_vector != NULL) {
    set_has_pt_vector();
  } else {
    clear_has_pt_vector();
  }
  pt_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pt_vector);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.BakedDocument.pt_vector)
}

// optional bytes neuro_vector = 4;
inline bool BakedDocument::has_neuro_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BakedDocument::set_has_neuro_vector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BakedDocument::clear_has_neuro_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BakedDocument::clear_neuro_vector() {
  neuro_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_neuro_vector();
}
inline const ::std::string& BakedDocument::neuro_vector() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocument.neuro_vector)
  return neuro_vector_.GetNoArena();
}
inline void BakedDocument::set_neuro_vector(const ::std::string& value) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocument.neuro_vector)
}
#if LANG_CXX11
inline void BakedDocument::set_neuro_vector(::std::string&& value) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idxembedder.pb.BakedDocument.neuro_vector)
}
#endif
inline void BakedDocument::set_neuro_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idxembedder.pb.BakedDocument.neuro_vector)
}
inline void BakedDocument::set_neuro_vector(const void* value, size_t size) {
  set_has_neuro_vector();
  neuro_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idxembedder.pb.BakedDocument.neuro_vector)
}
inline ::std::string* BakedDocument::mutable_neuro_vector() {
  set_has_neuro_vector();
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocument.neuro_vector)
  return neuro_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakedDocument::release_neuro_vector() {
  // @@protoc_insertion_point(field_release:idxembedder.pb.BakedDocument.neuro_vector)
  clear_has_neuro_vector();
  return neuro_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakedDocument::set_allocated_neuro_vector(::std::string* neuro_vector) {
  if (neuro_vector != NULL) {
    set_has_neuro_vector();
  } else {
    clear_has_neuro_vector();
  }
  neuro_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neuro_vector);
  // @@protoc_insertion_point(field_set_allocated:idxembedder.pb.BakedDocument.neuro_vector)
}

// -------------------------------------------------------------------

// BakedDocumentV2

// required uint32 docid = 1;
inline bool BakedDocumentV2::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BakedDocumentV2::set_has_docid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BakedDocumentV2::clear_has_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BakedDocumentV2::clear_docid() {
  docid_ = 0u;
  clear_has_docid();
}
inline ::google::protobuf::uint32 BakedDocumentV2::docid() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocumentV2.docid)
  return docid_;
}
inline void BakedDocumentV2::set_docid(::google::protobuf::uint32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.BakedDocumentV2.docid)
}

// repeated .idxembedder.pb.VectorData vectors = 2;
inline int BakedDocumentV2::vectors_size() const {
  return vectors_.size();
}
inline void BakedDocumentV2::clear_vectors() {
  vectors_.Clear();
}
inline const ::idxembedder::pb::VectorData& BakedDocumentV2::vectors(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Get(index);
}
inline ::idxembedder::pb::VectorData* BakedDocumentV2::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Mutable(index);
}
inline ::idxembedder::pb::VectorData* BakedDocumentV2::add_vectors() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >*
BakedDocumentV2::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.BakedDocumentV2.vectors)
  return &vectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::VectorData >&
BakedDocumentV2::vectors() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.BakedDocumentV2.vectors)
  return vectors_;
}

// -------------------------------------------------------------------

// Zone2BlockId

// required uint32 zone_id = 1;
inline bool Zone2BlockId::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zone2BlockId::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zone2BlockId::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zone2BlockId::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 Zone2BlockId::zone_id() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Zone2BlockId.zone_id)
  return zone_id_;
}
inline void Zone2BlockId::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Zone2BlockId.zone_id)
}

// repeated uint32 block_ids = 2;
inline int Zone2BlockId::block_ids_size() const {
  return block_ids_.size();
}
inline void Zone2BlockId::clear_block_ids() {
  block_ids_.Clear();
}
inline ::google::protobuf::uint32 Zone2BlockId::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Zone2BlockId.block_ids)
  return block_ids_.Get(index);
}
inline void Zone2BlockId::set_block_ids(int index, ::google::protobuf::uint32 value) {
  block_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Zone2BlockId.block_ids)
}
inline void Zone2BlockId::add_block_ids(::google::protobuf::uint32 value) {
  block_ids_.Add(value);
  // @@protoc_insertion_point(field_add:idxembedder.pb.Zone2BlockId.block_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Zone2BlockId::block_ids() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Zone2BlockId.block_ids)
  return block_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Zone2BlockId::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Zone2BlockId.block_ids)
  return &block_ids_;
}

// -------------------------------------------------------------------

// Request

// repeated .idxembedder.pb.Document documents = 1;
inline int Request::documents_size() const {
  return documents_.size();
}
inline void Request::clear_documents() {
  documents_.Clear();
}
inline const ::idxembedder::pb::Document& Request::documents(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Request.documents)
  return documents_.Get(index);
}
inline ::idxembedder::pb::Document* Request::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Request.documents)
  return documents_.Mutable(index);
}
inline ::idxembedder::pb::Document* Request::add_documents() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Request.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >*
Request::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Request.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::Document >&
Request::documents() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Request.documents)
  return documents_;
}

// optional uint32 minimal_version = 2;
inline bool Request::has_minimal_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_minimal_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_minimal_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_minimal_version() {
  minimal_version_ = 0u;
  clear_has_minimal_version();
}
inline ::google::protobuf::uint32 Request::minimal_version() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Request.minimal_version)
  return minimal_version_;
}
inline void Request::set_minimal_version(::google::protobuf::uint32 value) {
  set_has_minimal_version();
  minimal_version_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Request.minimal_version)
}

// -------------------------------------------------------------------

// Answer

// required uint32 result_code = 1;
inline bool Answer::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Answer::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Answer::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Answer::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 Answer::result_code() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.result_code)
  return result_code_;
}
inline void Answer::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.result_code)
}

// repeated .idxembedder.pb.BakedDocument documents = 2;
inline int Answer::documents_size() const {
  return documents_.size();
}
inline void Answer::clear_documents() {
  documents_.Clear();
}
inline const ::idxembedder::pb::BakedDocument& Answer::documents(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.documents)
  return documents_.Get(index);
}
inline ::idxembedder::pb::BakedDocument* Answer::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Answer.documents)
  return documents_.Mutable(index);
}
inline ::idxembedder::pb::BakedDocument* Answer::add_documents() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >*
Answer::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocument >&
Answer::documents() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.documents)
  return documents_;
}

// optional fixed32 pt_model_hash = 3;
inline bool Answer::has_pt_model_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Answer::set_has_pt_model_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Answer::clear_has_pt_model_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Answer::clear_pt_model_hash() {
  pt_model_hash_ = 0u;
  clear_has_pt_model_hash();
}
inline ::google::protobuf::uint32 Answer::pt_model_hash() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.pt_model_hash)
  return pt_model_hash_;
}
inline void Answer::set_pt_model_hash(::google::protobuf::uint32 value) {
  set_has_pt_model_hash();
  pt_model_hash_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.pt_model_hash)
}

// optional fixed32 neuro_model_hash = 4;
inline bool Answer::has_neuro_model_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Answer::set_has_neuro_model_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Answer::clear_has_neuro_model_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Answer::clear_neuro_model_hash() {
  neuro_model_hash_ = 0u;
  clear_has_neuro_model_hash();
}
inline ::google::protobuf::uint32 Answer::neuro_model_hash() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.neuro_model_hash)
  return neuro_model_hash_;
}
inline void Answer::set_neuro_model_hash(::google::protobuf::uint32 value) {
  set_has_neuro_model_hash();
  neuro_model_hash_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.neuro_model_hash)
}

// optional bool pq_enabled = 5 [default = false];
inline bool Answer::has_pq_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Answer::set_has_pq_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Answer::clear_has_pq_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Answer::clear_pq_enabled() {
  pq_enabled_ = false;
  clear_has_pq_enabled();
}
inline bool Answer::pq_enabled() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.pq_enabled)
  return pq_enabled_;
}
inline void Answer::set_pq_enabled(bool value) {
  set_has_pq_enabled();
  pq_enabled_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.pq_enabled)
}

// repeated uint32 blockid_map = 6;
inline int Answer::blockid_map_size() const {
  return blockid_map_.size();
}
inline void Answer::clear_blockid_map() {
  blockid_map_.Clear();
}
inline ::google::protobuf::uint32 Answer::blockid_map(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.blockid_map)
  return blockid_map_.Get(index);
}
inline void Answer::set_blockid_map(int index, ::google::protobuf::uint32 value) {
  blockid_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.blockid_map)
}
inline void Answer::add_blockid_map(::google::protobuf::uint32 value) {
  blockid_map_.Add(value);
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.blockid_map)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Answer::blockid_map() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.blockid_map)
  return blockid_map_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Answer::mutable_blockid_map() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.blockid_map)
  return &blockid_map_;
}

// repeated .idxembedder.pb.BakedDocumentV2 documents_v2 = 7;
inline int Answer::documents_v2_size() const {
  return documents_v2_.size();
}
inline void Answer::clear_documents_v2() {
  documents_v2_.Clear();
}
inline const ::idxembedder::pb::BakedDocumentV2& Answer::documents_v2(int index) const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Get(index);
}
inline ::idxembedder::pb::BakedDocumentV2* Answer::mutable_documents_v2(int index) {
  // @@protoc_insertion_point(field_mutable:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Mutable(index);
}
inline ::idxembedder::pb::BakedDocumentV2* Answer::add_documents_v2() {
  // @@protoc_insertion_point(field_add:idxembedder.pb.Answer.documents_v2)
  return documents_v2_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >*
Answer::mutable_documents_v2() {
  // @@protoc_insertion_point(field_mutable_list:idxembedder.pb.Answer.documents_v2)
  return &documents_v2_;
}
inline const ::google::protobuf::RepeatedPtrField< ::idxembedder::pb::BakedDocumentV2 >&
Answer::documents_v2() const {
  // @@protoc_insertion_point(field_list:idxembedder.pb.Answer.documents_v2)
  return documents_v2_;
}

// optional uint32 version = 8;
inline bool Answer::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Answer::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Answer::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Answer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Answer::version() const {
  // @@protoc_insertion_point(field_get:idxembedder.pb.Answer.version)
  return version_;
}
inline void Answer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:idxembedder.pb.Answer.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace idxembedder

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_idxembedder_2eproto__INCLUDED
