// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_blobs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image_blobs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class TextItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TextItem>
     _instance;
} _TextItem_default_instance_;
class ExplicitDescriptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExplicitDescription>
     _instance;
} _ExplicitDescription_default_instance_;
class ImageLinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageLinks>
     _instance;
} _ImageLinks_default_instance_;
class ImageLinksItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageLinksItem>
     _instance;
} _ImageLinksItem_default_instance_;
class ImagePropsWithUrlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImagePropsWithUrl>
     _instance;
} _ImagePropsWithUrl_default_instance_;
class ImageItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageItem>
     _instance;
} _ImageItem_default_instance_;
class VarItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VarItem>
     _instance;
} _VarItem_default_instance_;
class MetaAttrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetaAttr>
     _instance;
} _MetaAttr_default_instance_;
class MetaItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MetaItem>
     _instance;
} _MetaItem_default_instance_;
class CustomItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomItem>
     _instance;
} _CustomItem_default_instance_;
class GifestDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GifestData>
     _instance;
} _GifestData_default_instance_;
class HtmlPageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HtmlPage>
     _instance;
} _HtmlPage_default_instance_;
class ParseHtmlInputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParseHtmlInput>
     _instance;
} _ParseHtmlInput_default_instance_;
class BOWDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BOW>
     _instance;
} _BOW_default_instance_;
class DCTDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DCT>
     _instance;
} _DCT_default_instance_;
class ImagePropsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageProps>
     _instance;
} _ImageProps_default_instance_;
class ParserSignatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParserSignature>
     _instance;
} _ParserSignature_default_instance_;
class ImgParserBlobDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImgParserBlob>
     _instance;
} _ImgParserBlob_default_instance_;
class ImgParserBlobListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImgParserBlobList>
     _instance;
} _ImgParserBlobList_default_instance_;
class DomainStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DomainStruct>
     _instance;
} _DomainStruct_default_instance_;
class ImageStruct_AdditionalPropsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageStruct_AdditionalProps>
     _instance;
} _ImageStruct_AdditionalProps_default_instance_;
class ImageStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageStruct>
     _instance;
} _ImageStruct_default_instance_;
class PageStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PageStruct>
     _instance;
} _PageStruct_default_instance_;
class QueryStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryStruct>
     _instance;
} _QueryStruct_default_instance_;
class FullPageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FullPage>
     _instance;
} _FullPage_default_instance_;
class LimitingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LimitingInfo>
     _instance;
} _LimitingInfo_default_instance_;
class BoundImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BoundImage>
     _instance;
} _BoundImage_default_instance_;
class TextBlockDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TextBlock>
     _instance;
} _TextBlock_default_instance_;
class VisitInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VisitInfo>
     _instance;
} _VisitInfo_default_instance_;
class UrlPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlPair>
     _instance;
} _UrlPair_default_instance_;
class AnyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Any>
     _instance;
} _Any_default_instance_;
class ImageMarkerUrlTraceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageMarkerUrlTrace>
     _instance;
} _ImageMarkerUrlTrace_default_instance_;
class ImageTexts_PageTextsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageTexts_PageTexts>
     _instance;
} _ImageTexts_PageTexts_default_instance_;
class ImageTextsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageTexts>
     _instance;
} _ImageTexts_default_instance_;
class ClusteringResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusteringResult>
     _instance;
} _ClusteringResult_default_instance_;
class HostWithImgUrlsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HostWithImgUrls>
     _instance;
} _HostWithImgUrls_default_instance_;
class ThumbListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThumbList>
     _instance;
} _ThumbList_default_instance_;
class ThumbDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThumbDoc>
     _instance;
} _ThumbDoc_default_instance_;
class RatioStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RatioStats>
     _instance;
} _RatioStats_default_instance_;
class FaviconObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FaviconObj>
     _instance;
} _FaviconObj_default_instance_;
class ImageStructInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageStructInfo>
     _instance;
} _ImageStructInfo_default_instance_;
class NewsImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NewsImageInfo>
     _instance;
} _NewsImageInfo_default_instance_;
class ImageKeywordsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageKeywords>
     _instance;
} _ImageKeywords_default_instance_;
class ImageObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageObj>
     _instance;
} _ImageObj_default_instance_;
class ImageIndexObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageIndexObj>
     _instance;
} _ImageIndexObj_default_instance_;
class WOTInfo_WOTElementDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WOTInfo_WOTElement>
     _instance;
} _WOTInfo_WOTElement_default_instance_;
class WOTInfo_WOTCategoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WOTInfo_WOTCategory>
     _instance;
} _WOTInfo_WOTCategory_default_instance_;
class WOTInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WOTInfo>
     _instance;
} _WOTInfo_default_instance_;
class WOTInfoObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WOTInfoObj>
     _instance;
} _WOTInfoObj_default_instance_;
class UrlRankInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlRankInfo>
     _instance;
} _UrlRankInfo_default_instance_;
class UrlQueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlQueryInfo>
     _instance;
} _UrlQueryInfo_default_instance_;
class UrlQueryInfoKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlQueryInfoKey>
     _instance;
} _UrlQueryInfoKey_default_instance_;
class ThumbIndexKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThumbIndexKey>
     _instance;
} _ThumbIndexKey_default_instance_;
class TextIndexKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TextIndexKey>
     _instance;
} _TextIndexKey_default_instance_;
class MarkersInfo_PageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkersInfo_PageInfo>
     _instance;
} _MarkersInfo_PageInfo_default_instance_;
class MarkersInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MarkersInfo>
     _instance;
} _MarkersInfo_default_instance_;
class ResClustInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResClustInfo>
     _instance;
} _ResClustInfo_default_instance_;
class DiscoveryVisitUrlInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DiscoveryVisitUrlInfo>
     _instance;
} _DiscoveryVisitUrlInfo_default_instance_;
class DarkImageLinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DarkImageLinks>
     _instance;
} _DarkImageLinks_default_instance_;
class DarkImageLinksItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DarkImageLinksItem>
     _instance;
} _DarkImageLinksItem_default_instance_;
class EmbeddingDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbeddingData>
     _instance;
} _EmbeddingData_default_instance_;
class ImageHashItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageHashItem>
     _instance;
} _ImageHashItem_default_instance_;
class VideoFramesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoFrames>
     _instance;
} _VideoFrames_default_instance_;
class OCRSentenceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OCRSentence>
     _instance;
} _OCRSentence_default_instance_;
class OCRResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OCRResult>
     _instance;
} _OCRResult_default_instance_;

namespace protobuf_image_5fblobs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[65];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, from_alt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextItem, urlkey_),
  0,
  1,
  ~0u,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, caption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, keywords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitDescription, htmlurl_),
  5,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinks, links_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinksItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinksItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLinksItem, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePropsWithUrl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePropsWithUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePropsWithUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePropsWithUrl, imageprops_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, alt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, declaredwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, declaredheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, descrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItem, urlkey_),
  0,
  1,
  4,
  5,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, txt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarItem, tag_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaAttr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaAttr, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaAttr, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaItem, attrs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomItem, texts_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifestData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GifestData, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, porn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, features_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlPage, meta_items_),
  1,
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseHtmlInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseHtmlInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseHtmlInput, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseHtmlInput, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseHtmlInput, enc_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOW, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOW, words_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCT, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, enthropy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, exif_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, sharpness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, brightness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, contrast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, transparent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, cv_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, is_demotivator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, short_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, visual_words_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, bow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, dct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, animated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProps, animation_length_),
  4,
  5,
  7,
  6,
  8,
  0,
  10,
  9,
  11,
  12,
  13,
  15,
  1,
  16,
  14,
  ~0u,
  2,
  3,
  19,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserSignature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserSignature, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserSignature, ppl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserSignature, time_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, video_thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, sifts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, thumb_hidpi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlob, video_thumb_hidpi_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlobList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlobList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlobList, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgParserBlobList, images_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, keydomain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, fulldomain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, ic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, trusted_ic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, cloaking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, nbrsq2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, wot_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, domain_extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainStruct, spam_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  ~0u,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct_AdditionalProps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct_AdditionalProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct_AdditionalProps, porn_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct_AdditionalProps, porn_prob_v2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, keyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, fullurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, broken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, imageextratexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, preview_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, video_thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, ygvisitinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, additional_props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, cnn_embedding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, cnn_serp_embedding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, vit_serp_embedding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, required_for_assessor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, aws_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, img_match_embedding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStruct, previous_),
  0,
  1,
  2,
  3,
  12,
  4,
  13,
  5,
  6,
  7,
  8,
  9,
  10,
  15,
  14,
  11,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, keyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, fullurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, extratexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, imageextratexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, page_extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, spam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PageStruct, limiterrank_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, keyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, ctr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, imps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStruct, gyimps_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPage, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullPage, image_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitingInfo, imagekeyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitingInfo, pageurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitingInfo, limiterrank_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, pagedomain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, pagekeyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, pagefullurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, extratexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, imagesmedium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, imageslarge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, imagesdups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, porn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, preview_db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, maxporn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, featureslist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, clusteringresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, page_extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, imagecopies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, numpages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, pornstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, spam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, altlen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, numtextblocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundImage, limiterrank_),
  2,
  3,
  0,
  1,
  ~0u,
  4,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  5,
  6,
  ~0u,
  14,
  15,
  ~0u,
  16,
  19,
  18,
  20,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, zname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextBlock, tags_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitInfo, lastyvisit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitInfo, lastgvisit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlPair, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlPair, page_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, keydomain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, pagekeyurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, fullpage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, boundimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, limitinginfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, sekitei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, duplicates_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  9,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMarkerUrlTrace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMarkerUrlTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMarkerUrlTrace, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMarkerUrlTrace, limiterpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMarkerUrlTrace, maindup_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts_PageTexts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts_PageTexts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts_PageTexts, text_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageTexts, texts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusteringResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusteringResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusteringResult, pagesweights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusteringResult, keywords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusteringResult, kweights_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostWithImgUrls, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostWithImgUrls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostWithImgUrls, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostWithImgUrls, url_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbList, thumb_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbDoc, thumblist_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RatioStats, mrcu_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, siteurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, faviconurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, favicon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, faviconurl_high_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaviconObj, favicon_high_res_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, page_full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageStructInfo, image_time_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsImageInfo, news_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsImageInfo, news_img_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsImageInfo, src_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageKeywords, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageKeywords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageKeywords, keywords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageKeywords, weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageKeywords, cluster_size_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageObj, imageurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageObj, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageObj, image_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageIndexObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageIndexObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageIndexObj, thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageIndexObj, xml_doc_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTElement, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTElement, reputation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTCategory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTCategory, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo_WOTCategory, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, trust_worthiness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, vendor_reliability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, privacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, child_safety_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfo, category_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfoObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfoObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfoObj, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WOTInfoObj, wot_info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlRankInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlRankInfo, rank_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlRankInfo, kvrecords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlRankInfo, query_info_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, mb_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, main_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, ranks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfo, vk_music_hash_),
  0,
  6,
  1,
  4,
  2,
  5,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfoKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfoKey, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlQueryInfoKey, rank_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbIndexKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbIndexKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbIndexKey, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbIndexKey, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbIndexKey, partition_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextIndexKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextIndexKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextIndexKey, partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextIndexKey, keydomain_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo_PageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo_PageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo_PageInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo_PageInfo, webmarkerscnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo_PageInfo, imgmarkerscnt_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo, pageinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkersInfo, sekitei_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClustInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClustInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClustInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClustInfo, res_part1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClustInfo, res_part2_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryVisitUrlInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryVisitUrlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryVisitUrlInfo, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryVisitUrlInfo, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryVisitUrlInfo, url_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinks, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, httpstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, zindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkImageLinksItem, meta_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingData, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddingData, embedding_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, souce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageHashItem, height_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrames, frames_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRSentence, h_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OCRResult, sentences_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(TextItem)},
  { 17, 29, sizeof(ExplicitDescription)},
  { 36, 42, sizeof(ImageLinks)},
  { 43, 49, sizeof(ImageLinksItem)},
  { 50, 57, sizeof(ImagePropsWithUrl)},
  { 59, 71, sizeof(ImageItem)},
  { 78, 87, sizeof(VarItem)},
  { 91, 98, sizeof(MetaAttr)},
  { 100, 106, sizeof(MetaItem)},
  { 107, 114, sizeof(CustomItem)},
  { 116, 122, sizeof(GifestData)},
  { 123, 132, sizeof(HtmlPage)},
  { 136, 144, sizeof(ParseHtmlInput)},
  { 147, 153, sizeof(BOW)},
  { 154, 160, sizeof(DCT)},
  { 161, 187, sizeof(ImageProps)},
  { 208, 216, sizeof(ParserSignature)},
  { 219, 231, sizeof(ImgParserBlob)},
  { 238, 245, sizeof(ImgParserBlobList)},
  { 247, 261, sizeof(DomainStruct)},
  { 270, 277, sizeof(ImageStruct_AdditionalProps)},
  { 279, 301, sizeof(ImageStruct)},
  { 318, 331, sizeof(PageStruct)},
  { 339, 349, sizeof(QueryStruct)},
  { 354, 361, sizeof(FullPage)},
  { 363, 371, sizeof(LimitingInfo)},
  { 374, 404, sizeof(BoundImage)},
  { 429, 438, sizeof(TextBlock)},
  { 442, 449, sizeof(VisitInfo)},
  { 451, 458, sizeof(UrlPair)},
  { 460, 476, sizeof(Any)},
  { 487, 495, sizeof(ImageMarkerUrlTrace)},
  { 498, 504, sizeof(ImageTexts_PageTexts)},
  { 505, 511, sizeof(ImageTexts)},
  { 512, 520, sizeof(ClusteringResult)},
  { 523, 530, sizeof(HostWithImgUrls)},
  { 532, 538, sizeof(ThumbList)},
  { 539, 546, sizeof(ThumbDoc)},
  { 548, 557, sizeof(RatioStats)},
  { 561, 571, sizeof(FaviconObj)},
  { 576, 586, sizeof(ImageStructInfo)},
  { 591, 599, sizeof(NewsImageInfo)},
  { 602, 610, sizeof(ImageKeywords)},
  { 613, 621, sizeof(ImageObj)},
  { 624, 631, sizeof(ImageIndexObj)},
  { 633, 640, sizeof(WOTInfo_WOTElement)},
  { 642, 649, sizeof(WOTInfo_WOTCategory)},
  { 651, 661, sizeof(WOTInfo)},
  { 666, 673, sizeof(WOTInfoObj)},
  { 675, 683, sizeof(UrlRankInfo)},
  { 686, 699, sizeof(UrlQueryInfo)},
  { 707, 714, sizeof(UrlQueryInfoKey)},
  { 716, 724, sizeof(ThumbIndexKey)},
  { 727, 734, sizeof(TextIndexKey)},
  { 736, 744, sizeof(MarkersInfo_PageInfo)},
  { 747, 755, sizeof(MarkersInfo)},
  { 758, 766, sizeof(ResClustInfo)},
  { 769, 777, sizeof(DiscoveryVisitUrlInfo)},
  { 780, 786, sizeof(DarkImageLinks)},
  { 787, 800, sizeof(DarkImageLinksItem)},
  { 808, 815, sizeof(EmbeddingData)},
  { 817, 826, sizeof(ImageHashItem)},
  { 830, 836, sizeof(VideoFrames)},
  { 837, 848, sizeof(OCRSentence)},
  { 854, 860, sizeof(OCRResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExplicitDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageLinks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageLinksItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImagePropsWithUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VarItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetaAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetaItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GifestData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HtmlPage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParseHtmlInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BOW_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DCT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageProps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParserSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgParserBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgParserBlobList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DomainStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageStruct_AdditionalProps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PageStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FullPage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LimitingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoundImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VisitInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Any_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageMarkerUrlTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageTexts_PageTexts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageTexts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusteringResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostWithImgUrls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThumbList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThumbDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RatioStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaviconObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageStructInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewsImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageKeywords_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageIndexObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WOTInfo_WOTElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WOTInfo_WOTCategory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WOTInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WOTInfoObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlRankInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlQueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlQueryInfoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThumbIndexKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextIndexKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkersInfo_PageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarkersInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResClustInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiscoveryVisitUrlInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DarkImageLinks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DarkImageLinksItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbeddingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageHashItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoFrames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OCRSentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OCRResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image_blobs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 65);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::InitDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::InitDefaults();
  ::ru::mail::go::webbase::protobuf_result_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::InitDefaults();
  ::gogo::storage::protobuf_content_5fstorage_2eproto::InitDefaults();
  ::ru::mail::go::webbase::sekitei::protobuf_sekitei_2eproto::InitDefaults();
  ::qembedder::pb::protobuf_qembedder_2eproto::InitDefaults();
  _TextItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TextItem_default_instance_);_ExplicitDescription_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExplicitDescription_default_instance_);_ImageLinks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageLinks_default_instance_);_ImageLinksItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageLinksItem_default_instance_);_ImagePropsWithUrl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImagePropsWithUrl_default_instance_);_ImageItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageItem_default_instance_);_VarItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VarItem_default_instance_);_MetaAttr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetaAttr_default_instance_);_MetaItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MetaItem_default_instance_);_CustomItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomItem_default_instance_);_GifestData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GifestData_default_instance_);_HtmlPage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HtmlPage_default_instance_);_ParseHtmlInput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParseHtmlInput_default_instance_);_BOW_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BOW_default_instance_);_DCT_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DCT_default_instance_);_ImageProps_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageProps_default_instance_);_ParserSignature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParserSignature_default_instance_);_ImgParserBlob_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImgParserBlob_default_instance_);_ImgParserBlobList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImgParserBlobList_default_instance_);_DomainStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DomainStruct_default_instance_);_ImageStruct_AdditionalProps_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageStruct_AdditionalProps_default_instance_);_ImageStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageStruct_default_instance_);_PageStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PageStruct_default_instance_);_QueryStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryStruct_default_instance_);_FullPage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FullPage_default_instance_);_LimitingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LimitingInfo_default_instance_);_BoundImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BoundImage_default_instance_);_TextBlock_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TextBlock_default_instance_);_VisitInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VisitInfo_default_instance_);_UrlPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlPair_default_instance_);_Any_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Any_default_instance_);_ImageMarkerUrlTrace_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageMarkerUrlTrace_default_instance_);_ImageTexts_PageTexts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageTexts_PageTexts_default_instance_);_ImageTexts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageTexts_default_instance_);_ClusteringResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusteringResult_default_instance_);_HostWithImgUrls_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HostWithImgUrls_default_instance_);_ThumbList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThumbList_default_instance_);_ThumbDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThumbDoc_default_instance_);_RatioStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RatioStats_default_instance_);_FaviconObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FaviconObj_default_instance_);_ImageStructInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageStructInfo_default_instance_);_NewsImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NewsImageInfo_default_instance_);_ImageKeywords_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageKeywords_default_instance_);_ImageObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageObj_default_instance_);_ImageIndexObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageIndexObj_default_instance_);_WOTInfo_WOTElement_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WOTInfo_WOTElement_default_instance_);_WOTInfo_WOTCategory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WOTInfo_WOTCategory_default_instance_);_WOTInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WOTInfo_default_instance_);_WOTInfoObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WOTInfoObj_default_instance_);_UrlRankInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlRankInfo_default_instance_);_UrlQueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlQueryInfo_default_instance_);_UrlQueryInfoKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlQueryInfoKey_default_instance_);_ThumbIndexKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThumbIndexKey_default_instance_);_TextIndexKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TextIndexKey_default_instance_);_MarkersInfo_PageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkersInfo_PageInfo_default_instance_);_MarkersInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MarkersInfo_default_instance_);_ResClustInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResClustInfo_default_instance_);_DiscoveryVisitUrlInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DiscoveryVisitUrlInfo_default_instance_);_DarkImageLinks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DarkImageLinks_default_instance_);_DarkImageLinksItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DarkImageLinksItem_default_instance_);_EmbeddingData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbeddingData_default_instance_);_ImageHashItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageHashItem_default_instance_);_VideoFrames_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoFrames_default_instance_);_OCRSentence_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OCRSentence_default_instance_);_OCRResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OCRResult_default_instance_);_ImagePropsWithUrl_default_instance_._instance.get_mutable()->imageprops_ = const_cast< ::ru::mail::go::webbase::blobs::ImageProps*>(
      ::ru::mail::go::webbase::blobs::ImageProps::internal_default_instance());
  _VarItem_default_instance_._instance.get_mutable()->img_ = const_cast< ::ru::mail::go::webbase::blobs::ImageItem*>(
      ::ru::mail::go::webbase::blobs::ImageItem::internal_default_instance());
  _VarItem_default_instance_._instance.get_mutable()->txt_ = const_cast< ::ru::mail::go::webbase::blobs::TextItem*>(
      ::ru::mail::go::webbase::blobs::TextItem::internal_default_instance());
  _HtmlPage_default_instance_._instance.get_mutable()->features_list_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _ImageProps_default_instance_._instance.get_mutable()->exif_ = const_cast< ::ru::mail::go::webbase::parsing::img::Exif*>(
      ::ru::mail::go::webbase::parsing::img::Exif::internal_default_instance());
  _ImageProps_default_instance_._instance.get_mutable()->cv_features_ = const_cast< ::ru::mail::go::webbase::parsing::img::CvFeatures*>(
      ::ru::mail::go::webbase::parsing::img::CvFeatures::internal_default_instance());
  _ImageProps_default_instance_._instance.get_mutable()->bow_ = const_cast< ::ru::mail::go::webbase::blobs::BOW*>(
      ::ru::mail::go::webbase::blobs::BOW::internal_default_instance());
  _ImageProps_default_instance_._instance.get_mutable()->dct_ = const_cast< ::ru::mail::go::webbase::blobs::DCT*>(
      ::ru::mail::go::webbase::blobs::DCT::internal_default_instance());
  _ImgParserBlob_default_instance_._instance.get_mutable()->props_ = const_cast< ::ru::mail::go::webbase::blobs::ImageProps*>(
      ::ru::mail::go::webbase::blobs::ImageProps::internal_default_instance());
  _ImgParserBlob_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _ImgParserBlob_default_instance_._instance.get_mutable()->video_thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      ::ru::mail::go::webbase::parsing::img::VideoClip::internal_default_instance());
  _ImgParserBlob_default_instance_._instance.get_mutable()->thumb_hidpi_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _ImgParserBlob_default_instance_._instance.get_mutable()->video_thumb_hidpi_ = const_cast< ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      ::ru::mail::go::webbase::parsing::img::VideoClip::internal_default_instance());
  _DomainStruct_default_instance_._instance.get_mutable()->wot_info_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo*>(
      ::ru::mail::go::webbase::blobs::WOTInfo::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->props_ = const_cast< ::ru::mail::go::webbase::blobs::ImageProps*>(
      ::ru::mail::go::webbase::blobs::ImageProps::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->imageextratexts_ = const_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      ::ru::mail::go::webbase::blobs::ExtraTextArray::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->video_thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      ::ru::mail::go::webbase::parsing::img::VideoClip::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->ygvisitinfo_ = const_cast< ::ru::mail::go::webbase::blobs::VisitInfo*>(
      ::ru::mail::go::webbase::blobs::VisitInfo::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->additional_props_ = const_cast< ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps*>(
      ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->cnn_embedding_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->cnn_serp_embedding_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->vit_serp_embedding_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _ImageStruct_default_instance_._instance.get_mutable()->img_match_embedding_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _PageStruct_default_instance_._instance.get_mutable()->page_ = const_cast< ::ru::mail::go::webbase::blobs::HtmlPage*>(
      ::ru::mail::go::webbase::blobs::HtmlPage::internal_default_instance());
  _PageStruct_default_instance_._instance.get_mutable()->extratexts_ = const_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      ::ru::mail::go::webbase::blobs::ExtraTextArray::internal_default_instance());
  _PageStruct_default_instance_._instance.get_mutable()->imageextratexts_ = const_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      ::ru::mail::go::webbase::blobs::ExtraTextArray::internal_default_instance());
  _FullPage_default_instance_._instance.get_mutable()->page_ = const_cast< ::ru::mail::go::webbase::blobs::PageStruct*>(
      ::ru::mail::go::webbase::blobs::PageStruct::internal_default_instance());
  _BoundImage_default_instance_._instance.get_mutable()->image_ = const_cast< ::ru::mail::go::webbase::blobs::ImageStruct*>(
      ::ru::mail::go::webbase::blobs::ImageStruct::internal_default_instance());
  _BoundImage_default_instance_._instance.get_mutable()->pagedomain_ = const_cast< ::ru::mail::go::webbase::blobs::DomainStruct*>(
      ::ru::mail::go::webbase::blobs::DomainStruct::internal_default_instance());
  _BoundImage_default_instance_._instance.get_mutable()->extratexts_ = const_cast< ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      ::ru::mail::go::webbase::blobs::ExtraTextArray::internal_default_instance());
  _BoundImage_default_instance_._instance.get_mutable()->featureslist_ = const_cast< ::ru::mail::go::webbase::blobs::FeatureList*>(
      ::ru::mail::go::webbase::blobs::FeatureList::internal_default_instance());
  _BoundImage_default_instance_._instance.get_mutable()->clusteringresult_ = const_cast< ::ru::mail::go::webbase::blobs::ClusteringResult*>(
      ::ru::mail::go::webbase::blobs::ClusteringResult::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->domain_ = const_cast< ::ru::mail::go::webbase::blobs::DomainStruct*>(
      ::ru::mail::go::webbase::blobs::DomainStruct::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->image_ = const_cast< ::ru::mail::go::webbase::blobs::ImageStruct*>(
      ::ru::mail::go::webbase::blobs::ImageStruct::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->page_ = const_cast< ::ru::mail::go::webbase::blobs::PageStruct*>(
      ::ru::mail::go::webbase::blobs::PageStruct::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->fullpage_ = const_cast< ::ru::mail::go::webbase::blobs::FullPage*>(
      ::ru::mail::go::webbase::blobs::FullPage::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->boundimage_ = const_cast< ::ru::mail::go::webbase::blobs::BoundImage*>(
      ::ru::mail::go::webbase::blobs::BoundImage::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->limitinginfo_ = const_cast< ::ru::mail::go::webbase::blobs::LimitingInfo*>(
      ::ru::mail::go::webbase::blobs::LimitingInfo::internal_default_instance());
  _Any_default_instance_._instance.get_mutable()->sekitei_ = const_cast< ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      ::ru::mail::go::webbase::sekitei::Sekitei_m::internal_default_instance());
  _ThumbDoc_default_instance_._instance.get_mutable()->thumblist_ = const_cast< ::ru::mail::go::webbase::blobs::ThumbList*>(
      ::ru::mail::go::webbase::blobs::ThumbList::internal_default_instance());
  _FaviconObj_default_instance_._instance.get_mutable()->favicon_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _FaviconObj_default_instance_._instance.get_mutable()->favicon_high_res_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _ImageIndexObj_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::ru::mail::go::webbase::blobs::ThumbDoc*>(
      ::ru::mail::go::webbase::blobs::ThumbDoc::internal_default_instance());
  _WOTInfo_default_instance_._instance.get_mutable()->trust_worthiness_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::internal_default_instance());
  _WOTInfo_default_instance_._instance.get_mutable()->vendor_reliability_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::internal_default_instance());
  _WOTInfo_default_instance_._instance.get_mutable()->privacy_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::internal_default_instance());
  _WOTInfo_default_instance_._instance.get_mutable()->child_safety_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::internal_default_instance());
  _WOTInfoObj_default_instance_._instance.get_mutable()->wot_info_ = const_cast< ::ru::mail::go::webbase::blobs::WOTInfo*>(
      ::ru::mail::go::webbase::blobs::WOTInfo::internal_default_instance());
  _UrlRankInfo_default_instance_._instance.get_mutable()->query_info_ = const_cast< ::ru::mail::go::webbase::ComputedValues*>(
      ::ru::mail::go::webbase::ComputedValues::internal_default_instance());
  _MarkersInfo_default_instance_._instance.get_mutable()->pageinfo_ = const_cast< ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo*>(
      ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo::internal_default_instance());
  _MarkersInfo_default_instance_._instance.get_mutable()->sekitei_ = const_cast< ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      ::ru::mail::go::webbase::sekitei::Sekitei_m::internal_default_instance());
  _EmbeddingData_default_instance_._instance.get_mutable()->embedding_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _VideoFrames_default_instance_._instance.get_mutable()->frames_ = const_cast< ::ru::mail::go::webbase::blobs::ThumbDoc*>(
      ::ru::mail::go::webbase::blobs::ThumbDoc::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021image_blobs.proto\022\030ru.mail.go.webbase."
      "blobs\032\022parsed_blobs.proto\032\020image_defs.pr"
      "oto\032\024document_enums.proto\032\014result.proto\032"
      "\020doc_parser.proto\032\025content_storage.proto"
      "\032\rsekitei.proto\032\017qembedder.proto\"\212\001\n\010Tex"
      "tItem\022\014\n\004text\030\001 \002(\t\022\013\n\003url\030\002 \001(\t\022+\n\004tags"
      "\030\003 \003(\0162\035.ru.mail.go.webbase.blobs.Tag\022\027\n"
      "\010from_alt\030\004 \001(\010:\005false\022\r\n\005title\030\005 \001(\t\022\016\n"
      "\006urlkey\030\006 \001(\t\"\250\001\n\023ExplicitDescription\022/\n"
      "\003pid\030\001 \002(\0162\".ru.mail.go.webbase.blobs.Pa"
      "rserID\022\017\n\007caption\030\002 \001(\t\022\016\n\006author\030\003 \001(\t\022"
      "\014\n\004path\030\004 \001(\t\022\020\n\010keywords\030\005 \003(\t\022\016\n\006imgUr"
      "l\030\006 \001(\t\022\017\n\007htmlUrl\030\007 \001(\t\"E\n\nImageLinks\0227"
      "\n\005links\030\001 \003(\0132(.ru.mail.go.webbase.blobs"
      ".ImageLinksItem\"\035\n\016ImageLinksItem\022\013\n\003url"
      "\030\001 \002(\t\"Z\n\021ImagePropsWithUrl\022\013\n\003url\030\001 \002(\t"
      "\0228\n\nimageProps\030\002 \001(\0132$.ru.mail.go.webbas"
      "e.blobs.ImageProps\"\262\001\n\tImageItem\022\013\n\003url\030"
      "\001 \002(\t\022\013\n\003alt\030\002 \001(\t\022\025\n\rdeclaredWidth\030\003 \001("
      "\r\022\026\n\016declaredHeight\030\004 \001(\r\022=\n\006descrs\030\005 \003("
      "\0132-.ru.mail.go.webbase.blobs.ExplicitDes"
      "cription\022\r\n\005title\030\006 \001(\t\022\016\n\006urlkey\030\007 \001(\t\""
      "\315\001\n\007VarItem\0220\n\003img\030\001 \001(\0132#.ru.mail.go.we"
      "bbase.blobs.ImageItem\022/\n\003txt\030\002 \001(\0132\".ru."
      "mail.go.webbase.blobs.TextItem\0223\n\010childr"
      "en\030\003 \003(\0132!.ru.mail.go.webbase.blobs.VarI"
      "tem\022*\n\003tag\030\004 \001(\0162\035.ru.mail.go.webbase.bl"
      "obs.Tag\"\'\n\010MetaAttr\022\014\n\004name\030\001 \002(\t\022\r\n\005val"
      "ue\030\002 \002(\t\"=\n\010MetaItem\0221\n\005attrs\030\001 \003(\0132\".ru"
      ".mail.go.webbase.blobs.MetaAttr\"(\n\nCusto"
      "mItem\022\013\n\003url\030\001 \002(\t\022\r\n\005texts\030\002 \003(\t\"A\n\nGif"
      "estData\0223\n\005items\030\001 \003(\0132$.ru.mail.go.webb"
      "ase.blobs.CustomItem\"\300\001\n\010HtmlPage\022\014\n\004por"
      "n\030\001 \002(\r\0220\n\005items\030\003 \003(\0132!.ru.mail.go.webb"
      "ase.blobs.VarItem\022<\n\rfeatures_list\030\004 \001(\013"
      "2%.ru.mail.go.webbase.blobs.FeatureList\022"
      "6\n\nmeta_items\030\005 \003(\0132\".ru.mail.go.webbase"
      ".blobs.MetaItem\"_\n\016ParseHtmlInput\022\013\n\003url"
      "\030\001 \002(\t\022\017\n\007content\030\002 \002(\014\022/\n\003enc\030\003 \002(\0162\".r"
      "u.mail.go.webbase.blobs.Encoding\"\024\n\003BOW\022"
      "\r\n\005words\030\001 \003(\r\"\025\n\003DCT\022\016\n\006values\030\001 \003(\002\"\355\004"
      "\n\nImageProps\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 "
      "\002(\r\022;\n\006format\030\003 \002(\0162+.ru.mail.go.webbase"
      ".parsing.img.ImageFormat\022\014\n\004hash\030\004 \002(\004\022\020"
      "\n\010enthropy\030\005 \002(\r\0222\n\004exif\030\006 \001(\0132$.ru.mail"
      ".go.webbase.parsing.img.Exif\022\014\n\004size\030\007 \002"
      "(\r\022\021\n\tsharpness\030\010 \001(\001\022\022\n\nbrightness\030\t \001("
      "\r\022\020\n\010contrast\030\n \001(\r\022\016\n\006colors\030\013 \001(\r\022\023\n\013t"
      "ransparent\030\014 \001(\010\022\?\n\013cv_features\030\r \001(\0132*."
      "ru.mail.go.webbase.parsing.img.CvFeature"
      "s\022\026\n\016is_demotivator\030\016 \001(\010\022\022\n\nshort_hash\030"
      "\017 \001(\r\022\024\n\014visual_words\030\020 \003(\r\022*\n\003bow\030\021 \001(\013"
      "2\035.ru.mail.go.webbase.blobs.BOW\022*\n\003dct\030\022"
      " \001(\0132\035.ru.mail.go.webbase.blobs.DCT\022<\n\010c"
      "ategory\030\023 \001(\0162*.ru.mail.go.webbase.parsi"
      "ng.img.ImageClass\022\020\n\010animated\030\024 \001(\010\022\030\n\020a"
      "nimation_length\030\025 \001(\004\"9\n\017ParserSignature"
      "\022\013\n\003img\030\001 \002(\010\022\013\n\003ppl\030\002 \002(\010\022\014\n\004time\030\003 \002(\004"
      "\"\330\002\n\rImgParserBlob\022\013\n\003key\030\001 \002(\014\0223\n\005props"
      "\030\002 \002(\0132$.ru.mail.go.webbase.blobs.ImageP"
      "rops\0224\n\005thumb\030\003 \002(\0132%.ru.mail.go.webbase"
      ".parsing.img.Thumb\022>\n\013video_thumb\030\004 \001(\0132"
      ").ru.mail.go.webbase.parsing.img.VideoCl"
      "ip\022\r\n\005sifts\030\005 \003(\002\022:\n\013thumb_hidpi\030\006 \001(\0132%"
      ".ru.mail.go.webbase.parsing.img.Thumb\022D\n"
      "\021video_thumb_hidpi\030\007 \001(\0132).ru.mail.go.we"
      "bbase.parsing.img.VideoClip\"Y\n\021ImgParser"
      "BlobList\022\013\n\003num\030\001 \002(\r\0227\n\006images\030\002 \003(\0132\'."
      "ru.mail.go.webbase.blobs.ImgParserBlob\"\357"
      "\001\n\014DomainStruct\022\021\n\tkeyDomain\030\001 \002(\t\022\022\n\nfu"
      "llDomain\030\002 \002(\t\022\n\n\002ic\030\003 \001(\r\022\022\n\ntrusted_ic"
      "\030\004 \001(\r\022\020\n\010cloaking\030\005 \001(\010\022\016\n\006nbrsq2\030\006 \001(\r"
      "\0223\n\010wot_info\030\007 \001(\0132!.ru.mail.go.webbase."
      "blobs.WOTInfo\0223\n\021domain_extra_info\030\010 \003(\013"
      "2\030.gogo.storage.extra_info\022\014\n\004spam\030\t \001(\r"
      "\"\241\006\n\013ImageStruct\022\016\n\006keyUrl\030\001 \002(\t\022\017\n\007full"
      "Url\030\002 \002(\t\0224\n\005thumb\030\003 \001(\0132%.ru.mail.go.we"
      "bbase.parsing.img.Thumb\0223\n\005props\030\004 \002(\0132$"
      ".ru.mail.go.webbase.blobs.ImageProps\022\016\n\006"
      "broken\030\005 \001(\r\022A\n\017imageExtraTexts\030\006 \001(\0132(."
      "ru.mail.go.webbase.blobs.ExtraTextArray\022"
      "\022\n\npreview_db\030\007 \001(\r\022>\n\013video_thumb\030\010 \001(\013"
      "2).ru.mail.go.webbase.parsing.img.VideoC"
      "lip\0228\n\013YGVisitInfo\030\t \001(\0132#.ru.mail.go.we"
      "bbase.blobs.VisitInfo\022O\n\020additional_prop"
      "s\030\n \001(\01325.ru.mail.go.webbase.blobs.Image"
      "Struct.AdditionalProps\022.\n\rcnn_embedding\030"
      "\013 \001(\0132\027.qembedder.pb.Embedding\0223\n\022cnn_se"
      "rp_embedding\030\014 \001(\0132\027.qembedder.pb.Embedd"
      "ing\0223\n\022vit_serp_embedding\030\016 \001(\0132\027.qembed"
      "der.pb.Embedding\022\035\n\025required_for_assesso"
      "r\030\r \001(\010\022\027\n\017aws_probability\030\017 \001(\002\0224\n\023img_"
      "match_embedding\030\020 \001(\0132\027.qembedder.pb.Emb"
      "edding\022\020\n\010previous\030\021 \001(\010\032:\n\017AdditionalPr"
      "ops\022\021\n\tporn_prob\030\026 \001(\002\022\024\n\014porn_prob_v2\030\027"
      " \001(\002\"\266\002\n\nPageStruct\022\016\n\006keyUrl\030\001 \002(\t\022\017\n\007f"
      "ullUrl\030\002 \002(\t\0220\n\004page\030\003 \002(\0132\".ru.mail.go."
      "webbase.blobs.HtmlPage\022<\n\nextraTexts\030\004 \001"
      "(\0132(.ru.mail.go.webbase.blobs.ExtraTextA"
      "rray\022A\n\017imageExtraTexts\030\005 \001(\0132(.ru.mail."
      "go.webbase.blobs.ExtraTextArray\0221\n\017page_"
      "extra_info\030\006 \003(\0132\030.gogo.storage.extra_in"
      "fo\022\014\n\004spam\030\007 \001(\r\022\023\n\013limiterRank\030\010 \002(\002\"W\n"
      "\013QueryStruct\022\r\n\005query\030\001 \002(\t\022\016\n\006keyUrl\030\002 "
      "\002(\t\022\013\n\003ctr\030\003 \002(\001\022\014\n\004imps\030\004 \002(\r\022\016\n\006gyimps"
      "\030\005 \002(\r\"t\n\010FullPage\0222\n\004page\030\002 \002(\0132$.ru.ma"
      "il.go.webbase.blobs.PageStruct\0224\n\005image\030"
      "\003 \003(\0132%.ru.mail.go.webbase.blobs.ImageSt"
      "ruct\"I\n\014LimitingInfo\022\023\n\013imageKeyUrl\030\001 \002("
      "\t\022\017\n\007pageUrl\030\002 \002(\t\022\023\n\013limiterRank\030\003 \002(\002\""
      "\237\006\n\nBoundImage\0224\n\005image\030\001 \002(\0132%.ru.mail."
      "go.webbase.blobs.ImageStruct\022:\n\npageDoma"
      "in\030\003 \001(\0132&.ru.mail.go.webbase.blobs.Doma"
      "inStruct\022\022\n\npageKeyUrl\030\004 \002(\t\022\023\n\013pageFull"
      "Url\030\005 \002(\t\0222\n\005block\030\006 \003(\0132#.ru.mail.go.we"
      "bbase.blobs.TextBlock\022<\n\nextraTexts\030\007 \001("
      "\0132(.ru.mail.go.webbase.blobs.ExtraTextAr"
      "ray\0224\n\005query\030\010 \003(\0132%.ru.mail.go.webbase."
      "blobs.QueryStruct\022\024\n\014imagesMedium\030\n \002(\r\022"
      "\023\n\013imagesLarge\030\013 \002(\r\022\022\n\nimagesDups\030\014 \001(\r"
      "\022\014\n\004porn\030\r \002(\r\022\022\n\npreview_db\030\016 \001(\r\022\017\n\004ti"
      "me\030\017 \001(\r:\0010\022\017\n\007maxPorn\030\020 \001(\r\022;\n\014features"
      "List\030\021 \001(\0132%.ru.mail.go.webbase.blobs.Fe"
      "atureList\022D\n\020clusteringResult\030\022 \001(\0132*.ru"
      ".mail.go.webbase.blobs.ClusteringResult\022"
      "1\n\017page_extra_info\030\025 \003(\0132\030.gogo.storage."
      "extra_info\022\023\n\013imageCopies\030\026 \001(\r\022\020\n\010numPa"
      "ges\030\027 \001(\r\022\020\n\010pornStat\030\030 \003(\r\022\014\n\004spam\030\031 \001("
      "\r\022\016\n\006altlen\030\032 \001(\r\022\022\n\ncluster_id\030\033 \001(\004\022\025\n"
      "\rnumTextBlocks\030\034 \001(\r\022\023\n\013limiterRank\030\035 \001("
      "\002\"\207\001\n\tTextBlock\022\014\n\004text\030\001 \002(\t\0221\n\005zname\030\002"
      " \002(\0162\".ru.mail.go.webbase.blobs.ZoneName"
      "\022\014\n\004dist\030\003 \001(\r\022+\n\004tags\030\004 \003(\0162\035.ru.mail.g"
      "o.webbase.blobs.Tag\"3\n\tVisitInfo\022\022\n\nlast"
      "YVisit\030\001 \002(\003\022\022\n\nlastGVisit\030\002 \002(\003\"&\n\007UrlP"
      "air\022\r\n\005image\030\001 \002(\t\022\014\n\004page\030\002 \002(\t\"\377\003\n\003Any"
      "\0226\n\006domain\030\001 \001(\0132&.ru.mail.go.webbase.bl"
      "obs.DomainStruct\0224\n\005image\030\002 \001(\0132%.ru.mai"
      "l.go.webbase.blobs.ImageStruct\0222\n\004page\030\003"
      " \001(\0132$.ru.mail.go.webbase.blobs.PageStru"
      "ct\022\021\n\tkeyDomain\030\004 \001(\t\022\022\n\npageKeyUrl\030\005 \001("
      "\t\0224\n\010fullPage\030\006 \001(\0132\".ru.mail.go.webbase"
      ".blobs.FullPage\0228\n\nboundImage\030\007 \001(\0132$.ru"
      ".mail.go.webbase.blobs.BoundImage\022<\n\014lim"
      "itingInfo\030\010 \001(\0132&.ru.mail.go.webbase.blo"
      "bs.LimitingInfo\022\022\n\ncluster_id\030\t \001(\004\0226\n\007s"
      "ekitei\030\n \001(\0132%.ru.mail.go.webbase.sekite"
      "i.Sekitei_m\0225\n\nduplicates\030\013 \003(\0132!.ru.mai"
      "l.go.webbase.blobs.UrlPair\"\370\003\n\023ImageMark"
      "erUrlTrace\022F\n\005stage\030\001 \002(\01627.ru.mail.go.w"
      "ebbase.blobs.ImageMarkerUrlTrace.StageIn"
      "fo\022\022\n\nlimiterPos\030\002 \001(\003\022\017\n\007mainDup\030\003 \001(\t\""
      "\363\002\n\tStageInfo\022\023\n\017PassedImageDump\020\000\022\022\n\016Pa"
      "ssedHtmlJoin\020\001\022\025\n\021NotPassedHtmlJoin\020\002\022\025\n"
      "\021PassedMaxHtmlJoin\020\003\022\031\n\025NotPassedMaxPage"
      "Limit\020\004\022\026\n\022PassedMaxPageLimit\020\005\022\032\n\026NotPa"
      "ssedManualSimhash\020\006\022\027\n\023PassedManualSimha"
      "sh\020\007\022!\n\035NotPassedCollectionClustering\020\010\022"
      "\036\n\032PassedCollectionClustering\020\t\022\027\n\023NotPa"
      "ssedSimhashDup\020\n\022\024\n\020PassedSimhashDup\020\013\022\033"
      "\n\027NotPassedSekiteiLimiter\020\014\022\030\n\024PassedSek"
      "iteiLimiter\020\r\"\213\001\n\nImageTexts\022=\n\005texts\030\001 "
      "\003(\0132..ru.mail.go.webbase.blobs.ImageText"
      "s.PageTexts\032>\n\tPageTexts\0221\n\004text\030\001 \003(\0132#"
      ".ru.mail.go.webbase.blobs.TextBlock\"L\n\020C"
      "lusteringResult\022\024\n\014pagesWeights\030\001 \003(\002\022\020\n"
      "\010keywords\030\002 \003(\t\022\020\n\010kWeights\030\003 \003(\002\",\n\017Hos"
      "tWithImgUrls\022\014\n\004host\030\001 \001(\t\022\013\n\003url\030\002 \003(\t\""
      "A\n\tThumbList\0224\n\005thumb\030\001 \003(\0132%.ru.mail.go"
      ".webbase.parsing.img.Thumb\"O\n\010ThumbDoc\022\013"
      "\n\003url\030\001 \002(\t\0226\n\tthumblist\030\002 \002(\0132#.ru.mail"
      ".go.webbase.blobs.ThumbList\"\224\001\n\nRatioSta"
      "ts\022\r\n\005query\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\0227\n\004kind\030"
      "\003 \002(\0162).ru.mail.go.webbase.blobs.RatioSt"
      "ats.Kind\022\014\n\004mrcu\030\004 \002(\t\"\"\n\004Kind\022\014\n\010WEB_SH"
      "OW\020\000\022\014\n\010IMG_SHOW\020\001\"\307\001\n\nFaviconObj\022\017\n\007sit"
      "eURL\030\001 \002(\t\022\022\n\nfaviconURL\030\002 \002(\t\0226\n\007favico"
      "n\030\003 \002(\0132%.ru.mail.go.webbase.parsing.img"
      ".Thumb\022\033\n\023faviconURL_high_res\030\004 \001(\t\022\?\n\020f"
      "avicon_high_res\030\005 \001(\0132%.ru.mail.go.webba"
      "se.parsing.img.Thumb\"\222\002\n\017ImageStructInfo"
      "\022E\n\006source\030\001 \002(\01625.ru.mail.go.webbase.bl"
      "obs.ImageStructInfo.ImageSource\022\025\n\rpage_"
      "full_URL\030\002 \002(\t\022\r\n\005title\030\003 \001(\t\022\014\n\004text\030\004 "
      "\001(\t\022\022\n\nimage_time\030\005 \001(\003\"p\n\013ImageSource\022\010"
      "\n\004NEWS\020\000\022\010\n\004TORG\020\001\022\n\n\006AFISHA\020\002\022\010\n\004APPS\020\003"
      "\022\n\n\006GIFEST\020\004\022\r\n\tRESERVED2\020\005\022\r\n\tRESERVED3"
      "\020\006\022\r\n\tRESERVED4\020\007\"G\n\rNewsImageInfo\022\017\n\007ne"
      "ws_id\030\001 \002(\003\022\025\n\rnews_img_hash\030\002 \002(\t\022\016\n\006sr"
      "c_id\030\003 \002(\005\"H\n\rImageKeywords\022\020\n\010keywords\030"
      "\001 \003(\t\022\017\n\007weights\030\002 \003(\002\022\024\n\014cluster_size\030\003"
      " \001(\005\"@\n\010ImageObj\022\020\n\010imageURL\030\001 \002(\t\022\023\n\013re"
      "sult_code\030\002 \002(\005\022\r\n\005image\030\003 \001(\014\"S\n\rImageI"
      "ndexObj\0221\n\005thumb\030\001 \002(\0132\".ru.mail.go.webb"
      "ase.blobs.ThumbDoc\022\017\n\007xml_doc\030\002 \002(\t\"\305\003\n\007"
      "WOTInfo\022F\n\020trust_worthiness\030\001 \001(\0132,.ru.m"
      "ail.go.webbase.blobs.WOTInfo.WOTElement\022"
      "H\n\022vendor_reliability\030\002 \001(\0132,.ru.mail.go"
      ".webbase.blobs.WOTInfo.WOTElement\022=\n\007pri"
      "vacy\030\003 \001(\0132,.ru.mail.go.webbase.blobs.WO"
      "TInfo.WOTElement\022B\n\014child_safety\030\004 \001(\0132,"
      ".ru.mail.go.webbase.blobs.WOTInfo.WOTEle"
      "ment\022\?\n\010category\030\005 \003(\0132-.ru.mail.go.webb"
      "ase.blobs.WOTInfo.WOTCategory\0324\n\nWOTElem"
      "ent\022\022\n\nconfidence\030\001 \002(\005\022\022\n\nreputation\030\002 "
      "\002(\005\032.\n\013WOTCategory\022\020\n\010category\030\001 \002(\005\022\r\n\005"
      "value\030\002 \002(\005\"O\n\nWOTInfoObj\022\014\n\004host\030\001 \002(\t\022"
      "3\n\010wot_info\030\002 \002(\0132!.ru.mail.go.webbase.b"
      "lobs.WOTInfo\"\226\001\n\013UrlRankInfo\022\021\n\trank_nam"
      "e\030\001 \002(\t\022<\n\tkvRecords\030\002 \003(\0132).ru.mail.go."
      "webbase.ComputedValues.Record\0226\n\nquery_i"
      "nfo\030\003 \001(\0132\".ru.mail.go.webbase.ComputedV"
      "alues\"\276\001\n\014UrlQueryInfo\022\013\n\003url\030\001 \001(\t\022\021\n\tm"
      "b_number\030\002 \001(\005\022\r\n\005query\030\003 \001(\t\022\014\n\004hash\030\005 "
      "\001(\004\022\020\n\010main_url\030\006 \001(\t\022\022\n\ncluster_id\030\t \001("
      "\004\0224\n\005ranks\030\n \003(\0132%.ru.mail.go.webbase.bl"
      "obs.UrlRankInfo\022\025\n\rvk_music_hash\030\013 \001(\t\"6"
      "\n\017UrlQueryInfoKey\022\020\n\010full_url\030\001 \002(\t\022\021\n\tr"
      "ank_name\030\002 \002(\t\"F\n\rThumbIndexKey\022\020\n\010full_"
      "url\030\001 \002(\t\022\020\n\010priority\030\002 \002(\r\022\021\n\tpartition"
      "\030\003 \002(\r\"4\n\014TextIndexKey\022\021\n\tpartition\030\001 \002("
      "\r\022\021\n\tkeyDomain\030\002 \002(\t\"\246\002\n\013MarkersInfo\0228\n\004"
      "type\030\001 \002(\0162*.ru.mail.go.webbase.blobs.Ma"
      "rkersInfo.Type\022@\n\010pageinfo\030\002 \001(\0132..ru.ma"
      "il.go.webbase.blobs.MarkersInfo.PageInfo"
      "\0226\n\007sekitei\030\003 \001(\0132%.ru.mail.go.webbase.s"
      "ekitei.Sekitei_m\032E\n\010PageInfo\022\013\n\003url\030\001 \002("
      "\t\022\025\n\rwebMarkersCnt\030\002 \002(\r\022\025\n\rImgMarkersCn"
      "t\030\003 \002(\r\"\034\n\004Type\022\n\n\006Domain\020\000\022\010\n\004Page\020\001\"@\n"
      "\014ResClustInfo\022\n\n\002id\030\001 \002(\003\022\021\n\tres_part1\030\002"
      " \001(\t\022\021\n\tres_part2\030\003 \001(\t\"\333\001\n\025DiscoveryVis"
      "itUrlInfo\022F\n\006source\030\001 \002(\01626.ru.mail.go.w"
      "ebbase.blobs.DiscoveryVisitUrlInfo.Sourc"
      "e\022\n\n\002ts\030\002 \002(\004\022\013\n\003url\030\003 \002(\t\"a\n\006Source\022\n\n\006"
      "KVAKIN\020\000\022\r\n\tTELEMETRY\020\001\022\026\n\022INTERLEAVING_"
      "DOC_A\020\002\022\026\n\022INTERLEAVING_DOC_B\020\003\022\014\n\010WPIID"
      "UMP\020\004\"M\n\016DarkImageLinks\022;\n\005items\030\001 \003(\0132,"
      ".ru.mail.go.webbase.blobs.DarkImageLinks"
      "Item\"\215\001\n\022DarkImageLinksItem\022\013\n\003url\030\001 \002(\t"
      "\022\022\n\nhttpStatus\030\002 \002(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006h"
      "eight\030\004 \001(\r\022\014\n\004left\030\005 \001(\005\022\013\n\003top\030\006 \001(\005\022\016"
      "\n\006zindex\030\007 \001(\005\022\014\n\004meta\030\010 \001(\t\"H\n\rEmbeddin"
      "gData\022\013\n\003url\030\001 \002(\t\022*\n\tembedding\030\002 \002(\0132\027."
      "qembedder.pb.Embedding\"\316\001\n\rImageHashItem"
      "\022\013\n\003url\030\001 \002(\t\022=\n\005souce\030\002 \002(\0162..ru.mail.g"
      "o.webbase.blobs.ImageHashItem.Source\022\r\n\005"
      "width\030\003 \002(\r\022\016\n\006height\030\004 \002(\r\"R\n\006Source\022\n\n"
      "\006PARSER\020\001\022\026\n\022INTERLEAVING_DOC_A\020\002\022\026\n\022INT"
      "ERLEAVING_DOC_B\020\003\022\014\n\010WPIIDUMP\020\004\"A\n\013Video"
      "Frames\0222\n\006frames\030\001 \002(\0132\".ru.mail.go.webb"
      "ase.blobs.ThumbDoc\"V\n\013OCRSentence\022\014\n\004tex"
      "t\030\001 \002(\t\022\r\n\005score\030\002 \002(\002\022\t\n\001x\030\003 \002(\005\022\t\n\001y\030\004"
      " \002(\005\022\t\n\001w\030\005 \002(\005\022\t\n\001h\030\006 \002(\005\"E\n\tOCRResult\022"
      "8\n\tsentences\030\001 \003(\0132%.ru.mail.go.webbase."
      "blobs.OCRSentence*\272\002\n\003Tag\022\007\n\003ALT\020\000\022\t\n\005TI"
      "TLE\020\001\022\n\n\006STRONG\020\002\022\006\n\002H1\020\003\022\006\n\002H2\020\004\022\006\n\002H3\020"
      "\005\022\006\n\002H4\020\006\022\006\n\002H5\020\007\022\006\n\002H6\020\010\022\005\n\001B\020\t\022\005\n\001U\020\n\022"
      "\005\n\001A\020\013\022\005\n\001P\020\014\022\007\n\003DIV\020\r\022\010\n\004SPAN\020\016\022\t\n\005TABL"
      "E\020\017\022\006\n\002TR\020\020\022\006\n\002TD\020\021\022\010\n\004LINK\020\022\022\006\n\002BR\020\023\022\010\n"
      "\004FONT\020\024\022\n\n\006CENTER\020\025\022\r\n\tFAKE_TEXT\020\026\022\006\n\002UL"
      "\020\027\022\006\n\002LI\020\030\022\007\n\003IMG\020\031\022\013\n\007SECTION\020\032\022\013\n\007ARTI"
      "CLE\020\033\022\006\n\002EM\020\034\022\010\n\004BODY\020\035\022\010\n\004HEAD\020\036\022\010\n\004ROO"
      "T\020\037\022\t\n\005TBODY\020 *\024\n\010ParserID\022\010\n\004LIRU\020\000*\312\001\n"
      "\010ZoneName\022\n\n\006ZN_ALT\020\001\022\n\n\006ZN_CTX\020\002\022\021\n\rZN_"
      "PAGE_TITLE\020\003\022\t\n\005ZN_H1\020\004\022\t\n\005ZN_H2\020\005\022\t\n\005ZN"
      "_H3\020\006\022\017\n\013ZN_PAGE_URL\020\007\022\020\n\014ZN_IMAGE_URL\020\010"
      "\022\020\n\014ZN_PH_AUTHOR\020\t\022\021\n\rZN_PH_CAPTION\020\n\022\016\n"
      "\nZN_PH_PATH\020\013\022\017\n\013ZN_CTX_TEXT\020\014\022\t\n\005ZN_OG\020"
      "\rB\014B\nImageBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image_blobs.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_parsed_5fblobs_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_document_5fenums_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::protobuf_result_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::AddDescriptors();
  ::gogo::storage::protobuf_content_5fstorage_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::sekitei::protobuf_sekitei_2eproto::AddDescriptors();
  ::qembedder::pb::protobuf_qembedder_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_image_5fblobs_2eproto

const ::google::protobuf::EnumDescriptor* ImageMarkerUrlTrace_StageInfo_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[0];
}
bool ImageMarkerUrlTrace_StageInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedImageDump;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedHtmlJoin;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedHtmlJoin;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedMaxHtmlJoin;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedMaxPageLimit;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedMaxPageLimit;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedManualSimhash;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedManualSimhash;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedCollectionClustering;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedCollectionClustering;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedSimhashDup;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedSimhashDup;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::NotPassedSekiteiLimiter;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::PassedSekiteiLimiter;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::StageInfo_MIN;
const ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::StageInfo_MAX;
const int ImageMarkerUrlTrace::StageInfo_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RatioStats_Kind_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[1];
}
bool RatioStats_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RatioStats_Kind RatioStats::WEB_SHOW;
const RatioStats_Kind RatioStats::IMG_SHOW;
const RatioStats_Kind RatioStats::Kind_MIN;
const RatioStats_Kind RatioStats::Kind_MAX;
const int RatioStats::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageStructInfo_ImageSource_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[2];
}
bool ImageStructInfo_ImageSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageStructInfo_ImageSource ImageStructInfo::NEWS;
const ImageStructInfo_ImageSource ImageStructInfo::TORG;
const ImageStructInfo_ImageSource ImageStructInfo::AFISHA;
const ImageStructInfo_ImageSource ImageStructInfo::APPS;
const ImageStructInfo_ImageSource ImageStructInfo::GIFEST;
const ImageStructInfo_ImageSource ImageStructInfo::RESERVED2;
const ImageStructInfo_ImageSource ImageStructInfo::RESERVED3;
const ImageStructInfo_ImageSource ImageStructInfo::RESERVED4;
const ImageStructInfo_ImageSource ImageStructInfo::ImageSource_MIN;
const ImageStructInfo_ImageSource ImageStructInfo::ImageSource_MAX;
const int ImageStructInfo::ImageSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MarkersInfo_Type_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[3];
}
bool MarkersInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarkersInfo_Type MarkersInfo::Domain;
const MarkersInfo_Type MarkersInfo::Page;
const MarkersInfo_Type MarkersInfo::Type_MIN;
const MarkersInfo_Type MarkersInfo::Type_MAX;
const int MarkersInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DiscoveryVisitUrlInfo_Source_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[4];
}
bool DiscoveryVisitUrlInfo_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::KVAKIN;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::TELEMETRY;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::INTERLEAVING_DOC_A;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::INTERLEAVING_DOC_B;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::WPIIDUMP;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::Source_MIN;
const DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::Source_MAX;
const int DiscoveryVisitUrlInfo::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageHashItem_Source_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[5];
}
bool ImageHashItem_Source_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageHashItem_Source ImageHashItem::PARSER;
const ImageHashItem_Source ImageHashItem::INTERLEAVING_DOC_A;
const ImageHashItem_Source ImageHashItem::INTERLEAVING_DOC_B;
const ImageHashItem_Source ImageHashItem::WPIIDUMP;
const ImageHashItem_Source ImageHashItem::Source_MIN;
const ImageHashItem_Source ImageHashItem::Source_MAX;
const int ImageHashItem::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Tag_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[6];
}
bool Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParserID_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[7];
}
bool ParserID_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZoneName_descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_enum_descriptors[8];
}
bool ZoneName_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextItem::kTextFieldNumber;
const int TextItem::kUrlFieldNumber;
const int TextItem::kTagsFieldNumber;
const int TextItem::kFromAltFieldNumber;
const int TextItem::kTitleFieldNumber;
const int TextItem::kUrlkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextItem::TextItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TextItem)
}
TextItem::TextItem(const TextItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  urlkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urlkey()) {
    urlkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlkey_);
  }
  from_alt_ = from.from_alt_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TextItem)
}

void TextItem::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_alt_ = false;
}

TextItem::~TextItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TextItem)
  SharedDtor();
}

void TextItem::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextItem& TextItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextItem* TextItem::New(::google::protobuf::Arena* arena) const {
  TextItem* n = new TextItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TextItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!urlkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urlkey_.UnsafeRawStringPointer())->clear();
    }
  }
  from_alt_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TextItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextItem.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Tag tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Tag_IsValid(value)) {
            add_tags(static_cast< ::ru::mail::go::webbase::blobs::Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::ru::mail::go::webbase::blobs::Tag_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_alt = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_from_alt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextItem.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urlkey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urlkey().data(), static_cast<int>(this->urlkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextItem.urlkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TextItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TextItem)
  return false;
#undef DO_
}

void TextItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TextItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Tag tags = 3;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tags(i), output);
  }

  // optional bool from_alt = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->from_alt(), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string urlkey = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlkey().data(), static_cast<int>(this->urlkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.urlkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->urlkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TextItem)
}

::google::protobuf::uint8* TextItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TextItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Tag tags = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->tags_, target);

  // optional bool from_alt = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->from_alt(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string urlkey = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlkey().data(), static_cast<int>(this->urlkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextItem.urlkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->urlkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TextItem)
  return target;
}

size_t TextItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TextItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  // repeated .ru.mail.go.webbase.blobs.Tag tags = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string urlkey = 6;
    if (has_urlkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlkey());
    }

    // optional bool from_alt = 4 [default = false];
    if (has_from_alt()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TextItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TextItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TextItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TextItem)
    MergeFrom(*source);
  }
}

void TextItem::MergeFrom(const TextItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TextItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_urlkey();
      urlkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      from_alt_ = from.from_alt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TextItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextItem::CopyFrom(const TextItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TextItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TextItem::Swap(TextItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextItem::InternalSwap(TextItem* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  text_.Swap(&other->text_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  urlkey_.Swap(&other->urlkey_);
  swap(from_alt_, other->from_alt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextItem

// required string text = 1;
bool TextItem::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextItem::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void TextItem::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextItem::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& TextItem::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.text)
  return text_.GetNoArena();
}
void TextItem::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.text)
}
#if LANG_CXX11
void TextItem::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextItem.text)
}
#endif
void TextItem::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextItem.text)
}
void TextItem::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextItem.text)
}
::std::string* TextItem::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextItem.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextItem::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextItem.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextItem::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextItem.text)
}

// optional string url = 2;
bool TextItem::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TextItem::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void TextItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void TextItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& TextItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.url)
  return url_.GetNoArena();
}
void TextItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.url)
}
#if LANG_CXX11
void TextItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextItem.url)
}
#endif
void TextItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextItem.url)
}
void TextItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextItem.url)
}
::std::string* TextItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextItem.url)
}

// repeated .ru.mail.go.webbase.blobs.Tag tags = 3;
int TextItem::tags_size() const {
  return tags_.size();
}
void TextItem::clear_tags() {
  tags_.Clear();
}
::ru::mail::go::webbase::blobs::Tag TextItem::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.tags)
  return static_cast< ::ru::mail::go::webbase::blobs::Tag >(tags_.Get(index));
}
void TextItem::set_tags(int index, ::ru::mail::go::webbase::blobs::Tag value) {
  assert(::ru::mail::go::webbase::blobs::Tag_IsValid(value));
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.tags)
}
void TextItem::add_tags(::ru::mail::go::webbase::blobs::Tag value) {
  assert(::ru::mail::go::webbase::blobs::Tag_IsValid(value));
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TextItem.tags)
}
const ::google::protobuf::RepeatedField<int>&
TextItem::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TextItem.tags)
  return tags_;
}
::google::protobuf::RepeatedField<int>*
TextItem::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TextItem.tags)
  return &tags_;
}

// optional bool from_alt = 4 [default = false];
bool TextItem::has_from_alt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TextItem::set_has_from_alt() {
  _has_bits_[0] |= 0x00000010u;
}
void TextItem::clear_has_from_alt() {
  _has_bits_[0] &= ~0x00000010u;
}
void TextItem::clear_from_alt() {
  from_alt_ = false;
  clear_has_from_alt();
}
bool TextItem::from_alt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.from_alt)
  return from_alt_;
}
void TextItem::set_from_alt(bool value) {
  set_has_from_alt();
  from_alt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.from_alt)
}

// optional string title = 5;
bool TextItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TextItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void TextItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void TextItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& TextItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.title)
  return title_.GetNoArena();
}
void TextItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.title)
}
#if LANG_CXX11
void TextItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextItem.title)
}
#endif
void TextItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextItem.title)
}
void TextItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextItem.title)
}
::std::string* TextItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextItem.title)
}

// optional string urlkey = 6;
bool TextItem::has_urlkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TextItem::set_has_urlkey() {
  _has_bits_[0] |= 0x00000008u;
}
void TextItem::clear_has_urlkey() {
  _has_bits_[0] &= ~0x00000008u;
}
void TextItem::clear_urlkey() {
  urlkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlkey();
}
const ::std::string& TextItem::urlkey() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextItem.urlkey)
  return urlkey_.GetNoArena();
}
void TextItem::set_urlkey(const ::std::string& value) {
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextItem.urlkey)
}
#if LANG_CXX11
void TextItem::set_urlkey(::std::string&& value) {
  set_has_urlkey();
  urlkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextItem.urlkey)
}
#endif
void TextItem::set_urlkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextItem.urlkey)
}
void TextItem::set_urlkey(const char* value, size_t size) {
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextItem.urlkey)
}
::std::string* TextItem::mutable_urlkey() {
  set_has_urlkey();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextItem.urlkey)
  return urlkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextItem::release_urlkey() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextItem.urlkey)
  clear_has_urlkey();
  return urlkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextItem::set_allocated_urlkey(::std::string* urlkey) {
  if (urlkey != NULL) {
    set_has_urlkey();
  } else {
    clear_has_urlkey();
  }
  urlkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlkey);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextItem.urlkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitDescription::kPidFieldNumber;
const int ExplicitDescription::kCaptionFieldNumber;
const int ExplicitDescription::kAuthorFieldNumber;
const int ExplicitDescription::kPathFieldNumber;
const int ExplicitDescription::kKeywordsFieldNumber;
const int ExplicitDescription::kImgUrlFieldNumber;
const int ExplicitDescription::kHtmlUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitDescription::ExplicitDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ExplicitDescription)
}
ExplicitDescription::ExplicitDescription(const ExplicitDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keywords_(from.keywords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caption()) {
    caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author()) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgurl()) {
    imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
  }
  htmlurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_htmlurl()) {
    htmlurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htmlurl_);
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ExplicitDescription)
}

void ExplicitDescription::SharedCtor() {
  _cached_size_ = 0;
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  htmlurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

ExplicitDescription::~ExplicitDescription() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ExplicitDescription)
  SharedDtor();
}

void ExplicitDescription::SharedDtor() {
  caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  htmlurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExplicitDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplicitDescription::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitDescription& ExplicitDescription::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplicitDescription* ExplicitDescription::New(::google::protobuf::Arena* arena) const {
  ExplicitDescription* n = new ExplicitDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplicitDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!caption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caption_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!author_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!htmlurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*htmlurl_.UnsafeRawStringPointer())->clear();
    }
  }
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExplicitDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ParserID pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ParserID_IsValid(value)) {
            set_pid(static_cast< ::ru::mail::go::webbase::blobs::ParserID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string caption = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption().data(), static_cast<int>(this->caption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.caption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string author = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), static_cast<int>(this->author().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.author");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keywords = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            static_cast<int>(this->keywords(this->keywords_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.keywords");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imgUrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgurl().data(), static_cast<int>(this->imgurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string htmlUrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htmlurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->htmlurl().data(), static_cast<int>(this->htmlurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ExplicitDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ExplicitDescription)
  return false;
#undef DO_
}

void ExplicitDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ParserID pid = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pid(), output);
  }

  // optional string caption = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->caption(), output);
  }

  // optional string author = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->author(), output);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->path(), output);
  }

  // repeated string keywords = 5;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keywords(i), output);
  }

  // optional string imgUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), static_cast<int>(this->imgurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->imgurl(), output);
  }

  // optional string htmlUrl = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htmlurl().data(), static_cast<int>(this->htmlurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->htmlurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ExplicitDescription)
}

::google::protobuf::uint8* ExplicitDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ParserID pid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pid(), target);
  }

  // optional string caption = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caption(), target);
  }

  // optional string author = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->author(), target);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  // repeated string keywords = 5;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->keywords(i), target);
  }

  // optional string imgUrl = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), static_cast<int>(this->imgurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imgurl(), target);
  }

  // optional string htmlUrl = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htmlurl().data(), static_cast<int>(this->htmlurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->htmlurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ExplicitDescription)
  return target;
}

size_t ExplicitDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ParserID pid = 1;
  if (has_pid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pid());
  }
  // repeated string keywords = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keywords_size());
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string caption = 2;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string author = 3;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string imgUrl = 6;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional string htmlUrl = 7;
    if (has_htmlurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->htmlurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplicitDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ExplicitDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ExplicitDescription)
    MergeFrom(*source);
  }
}

void ExplicitDescription::MergeFrom(const ExplicitDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_caption();
      caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_imgurl();
      imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_htmlurl();
      htmlurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htmlurl_);
    }
    if (cached_has_bits & 0x00000020u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExplicitDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitDescription::CopyFrom(const ExplicitDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ExplicitDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void ExplicitDescription::Swap(ExplicitDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitDescription::InternalSwap(ExplicitDescription* other) {
  using std::swap;
  keywords_.InternalSwap(&other->keywords_);
  caption_.Swap(&other->caption_);
  author_.Swap(&other->author_);
  path_.Swap(&other->path_);
  imgurl_.Swap(&other->imgurl_);
  htmlurl_.Swap(&other->htmlurl_);
  swap(pid_, other->pid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExplicitDescription::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplicitDescription

// required .ru.mail.go.webbase.blobs.ParserID pid = 1;
bool ExplicitDescription::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExplicitDescription::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
void ExplicitDescription::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExplicitDescription::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
::ru::mail::go::webbase::blobs::ParserID ExplicitDescription::pid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.pid)
  return static_cast< ::ru::mail::go::webbase::blobs::ParserID >(pid_);
}
void ExplicitDescription::set_pid(::ru::mail::go::webbase::blobs::ParserID value) {
  assert(::ru::mail::go::webbase::blobs::ParserID_IsValid(value));
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.pid)
}

// optional string caption = 2;
bool ExplicitDescription::has_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExplicitDescription::set_has_caption() {
  _has_bits_[0] |= 0x00000001u;
}
void ExplicitDescription::clear_has_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExplicitDescription::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
const ::std::string& ExplicitDescription::caption() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
  return caption_.GetNoArena();
}
void ExplicitDescription::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
}
#if LANG_CXX11
void ExplicitDescription::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
}
#endif
void ExplicitDescription::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
}
void ExplicitDescription::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
}
::std::string* ExplicitDescription::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitDescription::release_caption() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitDescription::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ExplicitDescription.caption)
}

// optional string author = 3;
bool ExplicitDescription::has_author() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExplicitDescription::set_has_author() {
  _has_bits_[0] |= 0x00000002u;
}
void ExplicitDescription::clear_has_author() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExplicitDescription::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
const ::std::string& ExplicitDescription::author() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.author)
  return author_.GetNoArena();
}
void ExplicitDescription::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.author)
}
#if LANG_CXX11
void ExplicitDescription::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ExplicitDescription.author)
}
#endif
void ExplicitDescription::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.author)
}
void ExplicitDescription::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.author)
}
::std::string* ExplicitDescription::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitDescription::release_author() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ExplicitDescription.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitDescription::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ExplicitDescription.author)
}

// optional string path = 4;
bool ExplicitDescription::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExplicitDescription::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
void ExplicitDescription::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExplicitDescription::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& ExplicitDescription::path() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.path)
  return path_.GetNoArena();
}
void ExplicitDescription::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.path)
}
#if LANG_CXX11
void ExplicitDescription::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ExplicitDescription.path)
}
#endif
void ExplicitDescription::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.path)
}
void ExplicitDescription::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.path)
}
::std::string* ExplicitDescription::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitDescription::release_path() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ExplicitDescription.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitDescription::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ExplicitDescription.path)
}

// repeated string keywords = 5;
int ExplicitDescription::keywords_size() const {
  return keywords_.size();
}
void ExplicitDescription::clear_keywords() {
  keywords_.Clear();
}
const ::std::string& ExplicitDescription::keywords(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  return keywords_.Get(index);
}
::std::string* ExplicitDescription::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  return keywords_.Mutable(index);
}
void ExplicitDescription::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ExplicitDescription::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
void ExplicitDescription::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
void ExplicitDescription::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
::std::string* ExplicitDescription::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  return keywords_.Add();
}
void ExplicitDescription::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
#if LANG_CXX11
void ExplicitDescription::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
#endif
void ExplicitDescription::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
void ExplicitDescription::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExplicitDescription::keywords() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  return keywords_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExplicitDescription::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ExplicitDescription.keywords)
  return &keywords_;
}

// optional string imgUrl = 6;
bool ExplicitDescription::has_imgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExplicitDescription::set_has_imgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void ExplicitDescription::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExplicitDescription::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
const ::std::string& ExplicitDescription::imgurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
  return imgurl_.GetNoArena();
}
void ExplicitDescription::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
}
#if LANG_CXX11
void ExplicitDescription::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
}
#endif
void ExplicitDescription::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
}
void ExplicitDescription::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
}
::std::string* ExplicitDescription::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitDescription::release_imgurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitDescription::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ExplicitDescription.imgUrl)
}

// optional string htmlUrl = 7;
bool ExplicitDescription::has_htmlurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExplicitDescription::set_has_htmlurl() {
  _has_bits_[0] |= 0x00000010u;
}
void ExplicitDescription::clear_has_htmlurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExplicitDescription::clear_htmlurl() {
  htmlurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htmlurl();
}
const ::std::string& ExplicitDescription::htmlurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
  return htmlurl_.GetNoArena();
}
void ExplicitDescription::set_htmlurl(const ::std::string& value) {
  set_has_htmlurl();
  htmlurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
}
#if LANG_CXX11
void ExplicitDescription::set_htmlurl(::std::string&& value) {
  set_has_htmlurl();
  htmlurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
}
#endif
void ExplicitDescription::set_htmlurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_htmlurl();
  htmlurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
}
void ExplicitDescription::set_htmlurl(const char* value, size_t size) {
  set_has_htmlurl();
  htmlurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
}
::std::string* ExplicitDescription::mutable_htmlurl() {
  set_has_htmlurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
  return htmlurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitDescription::release_htmlurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
  clear_has_htmlurl();
  return htmlurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitDescription::set_allocated_htmlurl(::std::string* htmlurl) {
  if (htmlurl != NULL) {
    set_has_htmlurl();
  } else {
    clear_has_htmlurl();
  }
  htmlurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htmlurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ExplicitDescription.htmlUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLinks::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLinks::ImageLinks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageLinks)
}
ImageLinks::ImageLinks(const ImageLinks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageLinks)
}

void ImageLinks::SharedCtor() {
  _cached_size_ = 0;
}

ImageLinks::~ImageLinks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageLinks)
  SharedDtor();
}

void ImageLinks::SharedDtor() {
}

void ImageLinks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLinks::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageLinks& ImageLinks::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageLinks* ImageLinks::New(::google::protobuf::Arena* arena) const {
  ImageLinks* n = new ImageLinks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageLinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageLinks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.ImageLinksItem links = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageLinks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageLinks)
  return false;
#undef DO_
}

void ImageLinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageLinksItem links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->links(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageLinks)
}

::google::protobuf::uint8* ImageLinks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageLinksItem links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->links(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageLinks)
  return target;
}

size_t ImageLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageLinks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.ImageLinksItem links = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLinks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageLinks)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLinks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLinks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageLinks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageLinks)
    MergeFrom(*source);
  }
}

void ImageLinks::MergeFrom(const ImageLinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageLinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
}

void ImageLinks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLinks::CopyFrom(const ImageLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLinks::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  return true;
}

void ImageLinks::Swap(ImageLinks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLinks::InternalSwap(ImageLinks* other) {
  using std::swap;
  links_.InternalSwap(&other->links_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLinks::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLinks

// repeated .ru.mail.go.webbase.blobs.ImageLinksItem links = 1;
int ImageLinks::links_size() const {
  return links_.size();
}
void ImageLinks::clear_links() {
  links_.Clear();
}
const ::ru::mail::go::webbase::blobs::ImageLinksItem& ImageLinks::links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageLinks.links)
  return links_.Get(index);
}
::ru::mail::go::webbase::blobs::ImageLinksItem* ImageLinks::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageLinks.links)
  return links_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ImageLinksItem* ImageLinks::add_links() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageLinks.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageLinksItem >*
ImageLinks::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageLinks.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageLinksItem >&
ImageLinks::links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageLinks.links)
  return links_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLinksItem::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLinksItem::ImageLinksItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageLinksItem)
}
ImageLinksItem::ImageLinksItem(const ImageLinksItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageLinksItem)
}

void ImageLinksItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageLinksItem::~ImageLinksItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageLinksItem)
  SharedDtor();
}

void ImageLinksItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageLinksItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLinksItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageLinksItem& ImageLinksItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageLinksItem* ImageLinksItem::New(::google::protobuf::Arena* arena) const {
  ImageLinksItem* n = new ImageLinksItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLinksItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageLinksItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageLinksItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageLinksItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageLinksItem)
  return false;
#undef DO_
}

void ImageLinksItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageLinksItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageLinksItem)
}

::google::protobuf::uint8* ImageLinksItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageLinksItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageLinksItem)
  return target;
}

size_t ImageLinksItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLinksItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLinksItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLinksItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageLinksItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageLinksItem)
    MergeFrom(*source);
  }
}

void ImageLinksItem::MergeFrom(const ImageLinksItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void ImageLinksItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLinksItem::CopyFrom(const ImageLinksItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageLinksItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLinksItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ImageLinksItem::Swap(ImageLinksItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLinksItem::InternalSwap(ImageLinksItem* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLinksItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLinksItem

// required string url = 1;
bool ImageLinksItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageLinksItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageLinksItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageLinksItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageLinksItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageLinksItem.url)
  return url_.GetNoArena();
}
void ImageLinksItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageLinksItem.url)
}
#if LANG_CXX11
void ImageLinksItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageLinksItem.url)
}
#endif
void ImageLinksItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageLinksItem.url)
}
void ImageLinksItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageLinksItem.url)
}
::std::string* ImageLinksItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageLinksItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageLinksItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageLinksItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageLinksItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageLinksItem.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImagePropsWithUrl::kUrlFieldNumber;
const int ImagePropsWithUrl::kImagePropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImagePropsWithUrl::ImagePropsWithUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
}
ImagePropsWithUrl::ImagePropsWithUrl(const ImagePropsWithUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_imageprops()) {
    imageprops_ = new ::ru::mail::go::webbase::blobs::ImageProps(*from.imageprops_);
  } else {
    imageprops_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
}

void ImagePropsWithUrl::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imageprops_ = NULL;
}

ImagePropsWithUrl::~ImagePropsWithUrl() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  SharedDtor();
}

void ImagePropsWithUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete imageprops_;
}

void ImagePropsWithUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImagePropsWithUrl::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImagePropsWithUrl& ImagePropsWithUrl::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImagePropsWithUrl* ImagePropsWithUrl::New(::google::protobuf::Arena* arena) const {
  ImagePropsWithUrl* n = new ImagePropsWithUrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImagePropsWithUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(imageprops_ != NULL);
      imageprops_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImagePropsWithUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImagePropsWithUrl.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ImageProps imageProps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageprops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  return false;
#undef DO_
}

void ImagePropsWithUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImagePropsWithUrl.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ImageProps imageProps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imageprops_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
}

::google::protobuf::uint8* ImagePropsWithUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImagePropsWithUrl.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ImageProps imageProps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imageprops_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  return target;
}

size_t ImagePropsWithUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // optional .ru.mail.go.webbase.blobs.ImageProps imageProps = 2;
  if (has_imageprops()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imageprops_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImagePropsWithUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagePropsWithUrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImagePropsWithUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
    MergeFrom(*source);
  }
}

void ImagePropsWithUrl::MergeFrom(const ImagePropsWithUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_imageprops()->::ru::mail::go::webbase::blobs::ImageProps::MergeFrom(from.imageprops());
    }
  }
}

void ImagePropsWithUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePropsWithUrl::CopyFrom(const ImagePropsWithUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImagePropsWithUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePropsWithUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_imageprops()) {
    if (!this->imageprops_->IsInitialized()) return false;
  }
  return true;
}

void ImagePropsWithUrl::Swap(ImagePropsWithUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImagePropsWithUrl::InternalSwap(ImagePropsWithUrl* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(imageprops_, other->imageprops_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImagePropsWithUrl::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImagePropsWithUrl

// required string url = 1;
bool ImagePropsWithUrl::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImagePropsWithUrl::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImagePropsWithUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImagePropsWithUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImagePropsWithUrl::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
  return url_.GetNoArena();
}
void ImagePropsWithUrl::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
}
#if LANG_CXX11
void ImagePropsWithUrl::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
}
#endif
void ImagePropsWithUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
}
void ImagePropsWithUrl::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
}
::std::string* ImagePropsWithUrl::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImagePropsWithUrl::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImagePropsWithUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImagePropsWithUrl.url)
}

// optional .ru.mail.go.webbase.blobs.ImageProps imageProps = 2;
bool ImagePropsWithUrl::has_imageprops() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImagePropsWithUrl::set_has_imageprops() {
  _has_bits_[0] |= 0x00000002u;
}
void ImagePropsWithUrl::clear_has_imageprops() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImagePropsWithUrl::clear_imageprops() {
  if (imageprops_ != NULL) imageprops_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
  clear_has_imageprops();
}
const ::ru::mail::go::webbase::blobs::ImageProps& ImagePropsWithUrl::imageprops() const {
  const ::ru::mail::go::webbase::blobs::ImageProps* p = imageprops_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImagePropsWithUrl.imageProps)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageProps*>(
      &::ru::mail::go::webbase::blobs::_ImageProps_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageProps* ImagePropsWithUrl::mutable_imageprops() {
  set_has_imageprops();
  if (imageprops_ == NULL) {
    imageprops_ = new ::ru::mail::go::webbase::blobs::ImageProps;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImagePropsWithUrl.imageProps)
  return imageprops_;
}
::ru::mail::go::webbase::blobs::ImageProps* ImagePropsWithUrl::release_imageprops() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImagePropsWithUrl.imageProps)
  clear_has_imageprops();
  ::ru::mail::go::webbase::blobs::ImageProps* temp = imageprops_;
  imageprops_ = NULL;
  return temp;
}
void ImagePropsWithUrl::set_allocated_imageprops(::ru::mail::go::webbase::blobs::ImageProps* imageprops) {
  delete imageprops_;
  imageprops_ = imageprops;
  if (imageprops) {
    set_has_imageprops();
  } else {
    clear_has_imageprops();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImagePropsWithUrl.imageProps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageItem::kUrlFieldNumber;
const int ImageItem::kAltFieldNumber;
const int ImageItem::kDeclaredWidthFieldNumber;
const int ImageItem::kDeclaredHeightFieldNumber;
const int ImageItem::kDescrsFieldNumber;
const int ImageItem::kTitleFieldNumber;
const int ImageItem::kUrlkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageItem::ImageItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageItem)
}
ImageItem::ImageItem(const ImageItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      descrs_(from.descrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  alt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alt()) {
    alt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alt_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  urlkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_urlkey()) {
    urlkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlkey_);
  }
  ::memcpy(&declaredwidth_, &from.declaredwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&declaredheight_) -
    reinterpret_cast<char*>(&declaredwidth_)) + sizeof(declaredheight_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageItem)
}

void ImageItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&declaredwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&declaredheight_) -
      reinterpret_cast<char*>(&declaredwidth_)) + sizeof(declaredheight_));
}

ImageItem::~ImageItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageItem)
  SharedDtor();
}

void ImageItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  urlkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageItem& ImageItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageItem* ImageItem::New(::google::protobuf::Arena* arena) const {
  ImageItem* n = new ImageItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!alt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alt_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!urlkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*urlkey_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&declaredwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&declaredheight_) -
        reinterpret_cast<char*>(&declaredwidth_)) + sizeof(declaredheight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alt().data(), static_cast<int>(this->alt().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageItem.alt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 declaredWidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_declaredwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &declaredwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 declaredHeight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_declaredheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &declaredheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ExplicitDescription descrs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageItem.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string urlkey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urlkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urlkey().data(), static_cast<int>(this->urlkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageItem.urlkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageItem)
  return false;
#undef DO_
}

void ImageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string alt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alt().data(), static_cast<int>(this->alt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.alt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alt(), output);
  }

  // optional uint32 declaredWidth = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->declaredwidth(), output);
  }

  // optional uint32 declaredHeight = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->declaredheight(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.ExplicitDescription descrs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->descrs(static_cast<int>(i)), output);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // optional string urlkey = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlkey().data(), static_cast<int>(this->urlkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.urlkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->urlkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageItem)
}

::google::protobuf::uint8* ImageItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string alt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alt().data(), static_cast<int>(this->alt().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.alt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alt(), target);
  }

  // optional uint32 declaredWidth = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->declaredwidth(), target);
  }

  // optional uint32 declaredHeight = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->declaredheight(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.ExplicitDescription descrs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->descrs(static_cast<int>(i)), deterministic, target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string urlkey = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urlkey().data(), static_cast<int>(this->urlkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageItem.urlkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->urlkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageItem)
  return target;
}

size_t ImageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated .ru.mail.go.webbase.blobs.ExplicitDescription descrs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->descrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descrs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 62u) {
    // optional string alt = 2;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alt());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string urlkey = 7;
    if (has_urlkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urlkey());
    }

    // optional uint32 declaredWidth = 3;
    if (has_declaredwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->declaredwidth());
    }

    // optional uint32 declaredHeight = 4;
    if (has_declaredheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->declaredheight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageItem)
    MergeFrom(*source);
  }
}

void ImageItem::MergeFrom(const ImageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descrs_.MergeFrom(from.descrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_alt();
      alt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alt_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_urlkey();
      urlkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.urlkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      declaredwidth_ = from.declaredwidth_;
    }
    if (cached_has_bits & 0x00000020u) {
      declaredheight_ = from.declaredheight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageItem::CopyFrom(const ImageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->descrs())) return false;
  return true;
}

void ImageItem::Swap(ImageItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageItem::InternalSwap(ImageItem* other) {
  using std::swap;
  descrs_.InternalSwap(&other->descrs_);
  url_.Swap(&other->url_);
  alt_.Swap(&other->alt_);
  title_.Swap(&other->title_);
  urlkey_.Swap(&other->urlkey_);
  swap(declaredwidth_, other->declaredwidth_);
  swap(declaredheight_, other->declaredheight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageItem

// required string url = 1;
bool ImageItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.url)
  return url_.GetNoArena();
}
void ImageItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.url)
}
#if LANG_CXX11
void ImageItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageItem.url)
}
#endif
void ImageItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageItem.url)
}
void ImageItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageItem.url)
}
::std::string* ImageItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageItem.url)
}

// optional string alt = 2;
bool ImageItem::has_alt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageItem::set_has_alt() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageItem::clear_has_alt() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageItem::clear_alt() {
  alt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alt();
}
const ::std::string& ImageItem::alt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.alt)
  return alt_.GetNoArena();
}
void ImageItem::set_alt(const ::std::string& value) {
  set_has_alt();
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.alt)
}
#if LANG_CXX11
void ImageItem::set_alt(::std::string&& value) {
  set_has_alt();
  alt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageItem.alt)
}
#endif
void ImageItem::set_alt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alt();
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageItem.alt)
}
void ImageItem::set_alt(const char* value, size_t size) {
  set_has_alt();
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageItem.alt)
}
::std::string* ImageItem::mutable_alt() {
  set_has_alt();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageItem.alt)
  return alt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageItem::release_alt() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageItem.alt)
  clear_has_alt();
  return alt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageItem::set_allocated_alt(::std::string* alt) {
  if (alt != NULL) {
    set_has_alt();
  } else {
    clear_has_alt();
  }
  alt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alt);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageItem.alt)
}

// optional uint32 declaredWidth = 3;
bool ImageItem::has_declaredwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageItem::set_has_declaredwidth() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageItem::clear_has_declaredwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageItem::clear_declaredwidth() {
  declaredwidth_ = 0u;
  clear_has_declaredwidth();
}
::google::protobuf::uint32 ImageItem::declaredwidth() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.declaredWidth)
  return declaredwidth_;
}
void ImageItem::set_declaredwidth(::google::protobuf::uint32 value) {
  set_has_declaredwidth();
  declaredwidth_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.declaredWidth)
}

// optional uint32 declaredHeight = 4;
bool ImageItem::has_declaredheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageItem::set_has_declaredheight() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageItem::clear_has_declaredheight() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageItem::clear_declaredheight() {
  declaredheight_ = 0u;
  clear_has_declaredheight();
}
::google::protobuf::uint32 ImageItem::declaredheight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.declaredHeight)
  return declaredheight_;
}
void ImageItem::set_declaredheight(::google::protobuf::uint32 value) {
  set_has_declaredheight();
  declaredheight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.declaredHeight)
}

// repeated .ru.mail.go.webbase.blobs.ExplicitDescription descrs = 5;
int ImageItem::descrs_size() const {
  return descrs_.size();
}
void ImageItem::clear_descrs() {
  descrs_.Clear();
}
const ::ru::mail::go::webbase::blobs::ExplicitDescription& ImageItem::descrs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.descrs)
  return descrs_.Get(index);
}
::ru::mail::go::webbase::blobs::ExplicitDescription* ImageItem::mutable_descrs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageItem.descrs)
  return descrs_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ExplicitDescription* ImageItem::add_descrs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageItem.descrs)
  return descrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ExplicitDescription >*
ImageItem::mutable_descrs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageItem.descrs)
  return &descrs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ExplicitDescription >&
ImageItem::descrs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageItem.descrs)
  return descrs_;
}

// optional string title = 6;
bool ImageItem::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageItem::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ImageItem::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.title)
  return title_.GetNoArena();
}
void ImageItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.title)
}
#if LANG_CXX11
void ImageItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageItem.title)
}
#endif
void ImageItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageItem.title)
}
void ImageItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageItem.title)
}
::std::string* ImageItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageItem::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageItem.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageItem.title)
}

// optional string urlkey = 7;
bool ImageItem::has_urlkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageItem::set_has_urlkey() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageItem::clear_has_urlkey() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageItem::clear_urlkey() {
  urlkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_urlkey();
}
const ::std::string& ImageItem::urlkey() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageItem.urlkey)
  return urlkey_.GetNoArena();
}
void ImageItem::set_urlkey(const ::std::string& value) {
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageItem.urlkey)
}
#if LANG_CXX11
void ImageItem::set_urlkey(::std::string&& value) {
  set_has_urlkey();
  urlkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageItem.urlkey)
}
#endif
void ImageItem::set_urlkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageItem.urlkey)
}
void ImageItem::set_urlkey(const char* value, size_t size) {
  set_has_urlkey();
  urlkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageItem.urlkey)
}
::std::string* ImageItem::mutable_urlkey() {
  set_has_urlkey();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageItem.urlkey)
  return urlkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageItem::release_urlkey() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageItem.urlkey)
  clear_has_urlkey();
  return urlkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageItem::set_allocated_urlkey(::std::string* urlkey) {
  if (urlkey != NULL) {
    set_has_urlkey();
  } else {
    clear_has_urlkey();
  }
  urlkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urlkey);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageItem.urlkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VarItem::kImgFieldNumber;
const int VarItem::kTxtFieldNumber;
const int VarItem::kChildrenFieldNumber;
const int VarItem::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VarItem::VarItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VarItem)
}
VarItem::VarItem(const VarItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_img()) {
    img_ = new ::ru::mail::go::webbase::blobs::ImageItem(*from.img_);
  } else {
    img_ = NULL;
  }
  if (from.has_txt()) {
    txt_ = new ::ru::mail::go::webbase::blobs::TextItem(*from.txt_);
  } else {
    txt_ = NULL;
  }
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VarItem)
}

void VarItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&img_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&img_)) + sizeof(tag_));
}

VarItem::~VarItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VarItem)
  SharedDtor();
}

void VarItem::SharedDtor() {
  if (this != internal_default_instance()) delete img_;
  if (this != internal_default_instance()) delete txt_;
}

void VarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VarItem& VarItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VarItem* VarItem::New(::google::protobuf::Arena* arena) const {
  VarItem* n = new VarItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VarItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(img_ != NULL);
      img_->::ru::mail::go::webbase::blobs::ImageItem::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(txt_ != NULL);
      txt_->::ru::mail::go::webbase::blobs::TextItem::Clear();
    }
  }
  tag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VarItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.ImageItem img = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.TextItem txt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VarItem children = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.Tag tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Tag_IsValid(value)) {
            set_tag(static_cast< ::ru::mail::go::webbase::blobs::Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VarItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VarItem)
  return false;
#undef DO_
}

void VarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.ImageItem img = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->img_, output);
  }

  // optional .ru.mail.go.webbase.blobs.TextItem txt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->txt_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.VarItem children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.Tag tag = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VarItem)
}

::google::protobuf::uint8* VarItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VarItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.ImageItem img = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->img_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.TextItem txt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->txt_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.VarItem children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->children(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.Tag tag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VarItem)
  return target;
}

size_t VarItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VarItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.VarItem children = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.webbase.blobs.ImageItem img = 1;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->img_);
    }

    // optional .ru.mail.go.webbase.blobs.TextItem txt = 2;
    if (has_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txt_);
    }

    // optional .ru.mail.go.webbase.blobs.Tag tag = 4;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VarItem)
  GOOGLE_DCHECK_NE(&from, this);
  const VarItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VarItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VarItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VarItem)
    MergeFrom(*source);
  }
}

void VarItem::MergeFrom(const VarItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VarItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_img()->::ru::mail::go::webbase::blobs::ImageItem::MergeFrom(from.img());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_txt()->::ru::mail::go::webbase::blobs::TextItem::MergeFrom(from.txt());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VarItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarItem::CopyFrom(const VarItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VarItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarItem::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->children())) return false;
  if (has_img()) {
    if (!this->img_->IsInitialized()) return false;
  }
  if (has_txt()) {
    if (!this->txt_->IsInitialized()) return false;
  }
  return true;
}

void VarItem::Swap(VarItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VarItem::InternalSwap(VarItem* other) {
  using std::swap;
  children_.InternalSwap(&other->children_);
  swap(img_, other->img_);
  swap(txt_, other->txt_);
  swap(tag_, other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VarItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VarItem

// optional .ru.mail.go.webbase.blobs.ImageItem img = 1;
bool VarItem::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VarItem::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
void VarItem::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
void VarItem::clear_img() {
  if (img_ != NULL) img_->::ru::mail::go::webbase::blobs::ImageItem::Clear();
  clear_has_img();
}
const ::ru::mail::go::webbase::blobs::ImageItem& VarItem::img() const {
  const ::ru::mail::go::webbase::blobs::ImageItem* p = img_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarItem.img)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageItem*>(
      &::ru::mail::go::webbase::blobs::_ImageItem_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageItem* VarItem::mutable_img() {
  set_has_img();
  if (img_ == NULL) {
    img_ = new ::ru::mail::go::webbase::blobs::ImageItem;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarItem.img)
  return img_;
}
::ru::mail::go::webbase::blobs::ImageItem* VarItem::release_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarItem.img)
  clear_has_img();
  ::ru::mail::go::webbase::blobs::ImageItem* temp = img_;
  img_ = NULL;
  return temp;
}
void VarItem::set_allocated_img(::ru::mail::go::webbase::blobs::ImageItem* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarItem.img)
}

// optional .ru.mail.go.webbase.blobs.TextItem txt = 2;
bool VarItem::has_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VarItem::set_has_txt() {
  _has_bits_[0] |= 0x00000002u;
}
void VarItem::clear_has_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
void VarItem::clear_txt() {
  if (txt_ != NULL) txt_->::ru::mail::go::webbase::blobs::TextItem::Clear();
  clear_has_txt();
}
const ::ru::mail::go::webbase::blobs::TextItem& VarItem::txt() const {
  const ::ru::mail::go::webbase::blobs::TextItem* p = txt_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarItem.txt)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::TextItem*>(
      &::ru::mail::go::webbase::blobs::_TextItem_default_instance_);
}
::ru::mail::go::webbase::blobs::TextItem* VarItem::mutable_txt() {
  set_has_txt();
  if (txt_ == NULL) {
    txt_ = new ::ru::mail::go::webbase::blobs::TextItem;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarItem.txt)
  return txt_;
}
::ru::mail::go::webbase::blobs::TextItem* VarItem::release_txt() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VarItem.txt)
  clear_has_txt();
  ::ru::mail::go::webbase::blobs::TextItem* temp = txt_;
  txt_ = NULL;
  return temp;
}
void VarItem::set_allocated_txt(::ru::mail::go::webbase::blobs::TextItem* txt) {
  delete txt_;
  txt_ = txt;
  if (txt) {
    set_has_txt();
  } else {
    clear_has_txt();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VarItem.txt)
}

// repeated .ru.mail.go.webbase.blobs.VarItem children = 3;
int VarItem::children_size() const {
  return children_.size();
}
void VarItem::clear_children() {
  children_.Clear();
}
const ::ru::mail::go::webbase::blobs::VarItem& VarItem::children(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarItem.children)
  return children_.Get(index);
}
::ru::mail::go::webbase::blobs::VarItem* VarItem::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VarItem.children)
  return children_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VarItem* VarItem::add_children() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.VarItem.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VarItem >*
VarItem::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.VarItem.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VarItem >&
VarItem::children() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.VarItem.children)
  return children_;
}

// optional .ru.mail.go.webbase.blobs.Tag tag = 4;
bool VarItem::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VarItem::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void VarItem::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void VarItem::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
::ru::mail::go::webbase::blobs::Tag VarItem::tag() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VarItem.tag)
  return static_cast< ::ru::mail::go::webbase::blobs::Tag >(tag_);
}
void VarItem::set_tag(::ru::mail::go::webbase::blobs::Tag value) {
  assert(::ru::mail::go::webbase::blobs::Tag_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VarItem.tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaAttr::kNameFieldNumber;
const int MetaAttr::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaAttr::MetaAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MetaAttr)
}
MetaAttr::MetaAttr(const MetaAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MetaAttr)
}

void MetaAttr::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MetaAttr::~MetaAttr() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MetaAttr)
  SharedDtor();
}

void MetaAttr::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetaAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaAttr::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaAttr& MetaAttr::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaAttr* MetaAttr::New(::google::protobuf::Arena* arena) const {
  MetaAttr* n = new MetaAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MetaAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetaAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MetaAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MetaAttr.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MetaAttr.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MetaAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MetaAttr)
  return false;
#undef DO_
}

void MetaAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MetaAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaAttr.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaAttr.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MetaAttr)
}

::google::protobuf::uint8* MetaAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MetaAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaAttr.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MetaAttr.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MetaAttr)
  return target;
}

size_t MetaAttr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.MetaAttr)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t MetaAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MetaAttr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MetaAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MetaAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MetaAttr)
    MergeFrom(*source);
  }
}

void MetaAttr::MergeFrom(const MetaAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MetaAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void MetaAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MetaAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaAttr::CopyFrom(const MetaAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MetaAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MetaAttr::Swap(MetaAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaAttr::InternalSwap(MetaAttr* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaAttr::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaAttr

// required string name = 1;
bool MetaAttr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaAttr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MetaAttr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetaAttr::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MetaAttr::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaAttr.name)
  return name_.GetNoArena();
}
void MetaAttr::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaAttr.name)
}
#if LANG_CXX11
void MetaAttr::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MetaAttr.name)
}
#endif
void MetaAttr::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MetaAttr.name)
}
void MetaAttr::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MetaAttr.name)
}
::std::string* MetaAttr::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaAttr.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaAttr::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MetaAttr.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaAttr::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MetaAttr.name)
}

// required string value = 2;
bool MetaAttr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaAttr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MetaAttr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetaAttr::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& MetaAttr::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaAttr.value)
  return value_.GetNoArena();
}
void MetaAttr::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MetaAttr.value)
}
#if LANG_CXX11
void MetaAttr::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MetaAttr.value)
}
#endif
void MetaAttr::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MetaAttr.value)
}
void MetaAttr::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MetaAttr.value)
}
::std::string* MetaAttr::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaAttr.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaAttr::release_value() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MetaAttr.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaAttr::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MetaAttr.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaItem::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaItem::MetaItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MetaItem)
}
MetaItem::MetaItem(const MetaItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MetaItem)
}

void MetaItem::SharedCtor() {
  _cached_size_ = 0;
}

MetaItem::~MetaItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MetaItem)
  SharedDtor();
}

void MetaItem::SharedDtor() {
}

void MetaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaItem& MetaItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaItem* MetaItem::New(::google::protobuf::Arena* arena) const {
  MetaItem* n = new MetaItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MetaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MetaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MetaItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.MetaAttr attrs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MetaItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MetaItem)
  return false;
#undef DO_
}

void MetaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MetaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.MetaAttr attrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MetaItem)
}

::google::protobuf::uint8* MetaItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MetaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.MetaAttr attrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->attrs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MetaItem)
  return target;
}

size_t MetaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MetaItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.MetaAttr attrs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->attrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MetaItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MetaItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MetaItem)
    MergeFrom(*source);
  }
}

void MetaItem::MergeFrom(const MetaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MetaItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
}

void MetaItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MetaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaItem::CopyFrom(const MetaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MetaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaItem::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void MetaItem::Swap(MetaItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaItem::InternalSwap(MetaItem* other) {
  using std::swap;
  attrs_.InternalSwap(&other->attrs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetaItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaItem

// repeated .ru.mail.go.webbase.blobs.MetaAttr attrs = 1;
int MetaItem::attrs_size() const {
  return attrs_.size();
}
void MetaItem::clear_attrs() {
  attrs_.Clear();
}
const ::ru::mail::go::webbase::blobs::MetaAttr& MetaItem::attrs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MetaItem.attrs)
  return attrs_.Get(index);
}
::ru::mail::go::webbase::blobs::MetaAttr* MetaItem::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MetaItem.attrs)
  return attrs_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MetaAttr* MetaItem::add_attrs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.MetaItem.attrs)
  return attrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MetaAttr >*
MetaItem::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.MetaItem.attrs)
  return &attrs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MetaAttr >&
MetaItem::attrs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.MetaItem.attrs)
  return attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomItem::kUrlFieldNumber;
const int CustomItem::kTextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomItem::CustomItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CustomItem)
}
CustomItem::CustomItem(const CustomItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      texts_(from.texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CustomItem)
}

void CustomItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomItem::~CustomItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CustomItem)
  SharedDtor();
}

void CustomItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomItem& CustomItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomItem* CustomItem::New(::google::protobuf::Arena* arena) const {
  CustomItem* n = new CustomItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CustomItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texts_.Clear();
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CustomItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string texts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_texts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texts(this->texts_size() - 1).data(),
            static_cast<int>(this->texts(this->texts_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CustomItem.texts");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CustomItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CustomItem)
  return false;
#undef DO_
}

void CustomItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CustomItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string texts = 2;
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texts(i).data(), static_cast<int>(this->texts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomItem.texts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->texts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CustomItem)
}

::google::protobuf::uint8* CustomItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CustomItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string texts = 2;
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texts(i).data(), static_cast<int>(this->texts(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CustomItem.texts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->texts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CustomItem)
  return target;
}

size_t CustomItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CustomItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated string texts = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->texts_size());
  for (int i = 0, n = this->texts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->texts(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CustomItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CustomItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CustomItem)
    MergeFrom(*source);
  }
}

void CustomItem::MergeFrom(const CustomItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CustomItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texts_.MergeFrom(from.texts_);
  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void CustomItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CustomItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomItem::CopyFrom(const CustomItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CustomItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CustomItem::Swap(CustomItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomItem::InternalSwap(CustomItem* other) {
  using std::swap;
  texts_.InternalSwap(&other->texts_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomItem

// required string url = 1;
bool CustomItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CustomItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomItem.url)
  return url_.GetNoArena();
}
void CustomItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomItem.url)
}
#if LANG_CXX11
void CustomItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CustomItem.url)
}
#endif
void CustomItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomItem.url)
}
void CustomItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomItem.url)
}
::std::string* CustomItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CustomItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CustomItem.url)
}

// repeated string texts = 2;
int CustomItem::texts_size() const {
  return texts_.size();
}
void CustomItem::clear_texts() {
  texts_.Clear();
}
const ::std::string& CustomItem::texts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CustomItem.texts)
  return texts_.Get(index);
}
::std::string* CustomItem::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CustomItem.texts)
  return texts_.Mutable(index);
}
void CustomItem::set_texts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomItem.texts)
  texts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CustomItem::set_texts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CustomItem.texts)
  texts_.Mutable(index)->assign(std::move(value));
}
#endif
void CustomItem::set_texts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  texts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CustomItem.texts)
}
void CustomItem::set_texts(int index, const char* value, size_t size) {
  texts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CustomItem.texts)
}
::std::string* CustomItem::add_texts() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.CustomItem.texts)
  return texts_.Add();
}
void CustomItem::add_texts(const ::std::string& value) {
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomItem.texts)
}
#if LANG_CXX11
void CustomItem::add_texts(::std::string&& value) {
  texts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CustomItem.texts)
}
#endif
void CustomItem::add_texts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  texts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.CustomItem.texts)
}
void CustomItem::add_texts(const char* value, size_t size) {
  texts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.CustomItem.texts)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CustomItem::texts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CustomItem.texts)
  return texts_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CustomItem::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CustomItem.texts)
  return &texts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GifestData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GifestData::GifestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.GifestData)
}
GifestData::GifestData(const GifestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.GifestData)
}

void GifestData::SharedCtor() {
  _cached_size_ = 0;
}

GifestData::~GifestData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.GifestData)
  SharedDtor();
}

void GifestData::SharedDtor() {
}

void GifestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GifestData::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GifestData& GifestData::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

GifestData* GifestData::New(::google::protobuf::Arena* arena) const {
  GifestData* n = new GifestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GifestData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.GifestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GifestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.GifestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.CustomItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.GifestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.GifestData)
  return false;
#undef DO_
}

void GifestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.GifestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.GifestData)
}

::google::protobuf::uint8* GifestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.GifestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CustomItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.GifestData)
  return target;
}

size_t GifestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.GifestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.CustomItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GifestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.GifestData)
  GOOGLE_DCHECK_NE(&from, this);
  const GifestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GifestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.GifestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.GifestData)
    MergeFrom(*source);
  }
}

void GifestData::MergeFrom(const GifestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.GifestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void GifestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.GifestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GifestData::CopyFrom(const GifestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.GifestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GifestData::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void GifestData::Swap(GifestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GifestData::InternalSwap(GifestData* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GifestData::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GifestData

// repeated .ru.mail.go.webbase.blobs.CustomItem items = 1;
int GifestData::items_size() const {
  return items_.size();
}
void GifestData::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::CustomItem& GifestData::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.GifestData.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::CustomItem* GifestData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.GifestData.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CustomItem* GifestData::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.GifestData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomItem >*
GifestData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.GifestData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CustomItem >&
GifestData::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.GifestData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HtmlPage::kPornFieldNumber;
const int HtmlPage::kItemsFieldNumber;
const int HtmlPage::kFeaturesListFieldNumber;
const int HtmlPage::kMetaItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HtmlPage::HtmlPage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.HtmlPage)
}
HtmlPage::HtmlPage(const HtmlPage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_),
      meta_items_(from.meta_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_features_list()) {
    features_list_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.features_list_);
  } else {
    features_list_ = NULL;
  }
  porn_ = from.porn_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.HtmlPage)
}

void HtmlPage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&features_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porn_) -
      reinterpret_cast<char*>(&features_list_)) + sizeof(porn_));
}

HtmlPage::~HtmlPage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.HtmlPage)
  SharedDtor();
}

void HtmlPage::SharedDtor() {
  if (this != internal_default_instance()) delete features_list_;
}

void HtmlPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtmlPage::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HtmlPage& HtmlPage::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

HtmlPage* HtmlPage::New(::google::protobuf::Arena* arena) const {
  HtmlPage* n = new HtmlPage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HtmlPage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.HtmlPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  meta_items_.Clear();
  if (has_features_list()) {
    GOOGLE_DCHECK(features_list_ != NULL);
    features_list_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  }
  porn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HtmlPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.HtmlPage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 porn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_porn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.VarItem items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList features_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.MetaItem meta_items = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meta_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.HtmlPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.HtmlPage)
  return false;
#undef DO_
}

void HtmlPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.HtmlPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 porn = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->porn(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.VarItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList features_list = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->features_list_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.MetaItem meta_items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->meta_items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.HtmlPage)
}

::google::protobuf::uint8* HtmlPage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.HtmlPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 porn = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->porn(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.VarItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList features_list = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->features_list_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.MetaItem meta_items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->meta_items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.HtmlPage)
  return target;
}

size_t HtmlPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.HtmlPage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 porn = 1;
  if (has_porn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->porn());
  }
  // repeated .ru.mail.go.webbase.blobs.VarItem items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.MetaItem meta_items = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta_items(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList features_list = 4;
  if (has_features_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->features_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlPage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.HtmlPage)
  GOOGLE_DCHECK_NE(&from, this);
  const HtmlPage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HtmlPage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.HtmlPage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.HtmlPage)
    MergeFrom(*source);
  }
}

void HtmlPage::MergeFrom(const HtmlPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.HtmlPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  meta_items_.MergeFrom(from.meta_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_features_list()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.features_list());
    }
    if (cached_has_bits & 0x00000002u) {
      porn_ = from.porn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HtmlPage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.HtmlPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtmlPage::CopyFrom(const HtmlPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.HtmlPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->meta_items())) return false;
  if (has_features_list()) {
    if (!this->features_list_->IsInitialized()) return false;
  }
  return true;
}

void HtmlPage::Swap(HtmlPage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HtmlPage::InternalSwap(HtmlPage* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  meta_items_.InternalSwap(&other->meta_items_);
  swap(features_list_, other->features_list_);
  swap(porn_, other->porn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HtmlPage::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HtmlPage

// required uint32 porn = 1;
bool HtmlPage::has_porn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HtmlPage::set_has_porn() {
  _has_bits_[0] |= 0x00000002u;
}
void HtmlPage::clear_has_porn() {
  _has_bits_[0] &= ~0x00000002u;
}
void HtmlPage::clear_porn() {
  porn_ = 0u;
  clear_has_porn();
}
::google::protobuf::uint32 HtmlPage::porn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HtmlPage.porn)
  return porn_;
}
void HtmlPage::set_porn(::google::protobuf::uint32 value) {
  set_has_porn();
  porn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HtmlPage.porn)
}

// repeated .ru.mail.go.webbase.blobs.VarItem items = 3;
int HtmlPage::items_size() const {
  return items_.size();
}
void HtmlPage::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::VarItem& HtmlPage::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HtmlPage.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::VarItem* HtmlPage::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HtmlPage.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::VarItem* HtmlPage::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.HtmlPage.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VarItem >*
HtmlPage::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.HtmlPage.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::VarItem >&
HtmlPage::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.HtmlPage.items)
  return items_;
}

// optional .ru.mail.go.webbase.blobs.FeatureList features_list = 4;
bool HtmlPage::has_features_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HtmlPage::set_has_features_list() {
  _has_bits_[0] |= 0x00000001u;
}
void HtmlPage::clear_has_features_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void HtmlPage::clear_features_list() {
  if (features_list_ != NULL) features_list_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_features_list();
}
const ::ru::mail::go::webbase::blobs::FeatureList& HtmlPage::features_list() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = features_list_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HtmlPage.features_list)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* HtmlPage::mutable_features_list() {
  set_has_features_list();
  if (features_list_ == NULL) {
    features_list_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HtmlPage.features_list)
  return features_list_;
}
::ru::mail::go::webbase::blobs::FeatureList* HtmlPage::release_features_list() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.HtmlPage.features_list)
  clear_has_features_list();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = features_list_;
  features_list_ = NULL;
  return temp;
}
void HtmlPage::set_allocated_features_list(::ru::mail::go::webbase::blobs::FeatureList* features_list) {
  delete features_list_;
  features_list_ = features_list;
  if (features_list) {
    set_has_features_list();
  } else {
    clear_has_features_list();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.HtmlPage.features_list)
}

// repeated .ru.mail.go.webbase.blobs.MetaItem meta_items = 5;
int HtmlPage::meta_items_size() const {
  return meta_items_.size();
}
void HtmlPage::clear_meta_items() {
  meta_items_.Clear();
}
const ::ru::mail::go::webbase::blobs::MetaItem& HtmlPage::meta_items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HtmlPage.meta_items)
  return meta_items_.Get(index);
}
::ru::mail::go::webbase::blobs::MetaItem* HtmlPage::mutable_meta_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HtmlPage.meta_items)
  return meta_items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::MetaItem* HtmlPage::add_meta_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.HtmlPage.meta_items)
  return meta_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MetaItem >*
HtmlPage::mutable_meta_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.HtmlPage.meta_items)
  return &meta_items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::MetaItem >&
HtmlPage::meta_items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.HtmlPage.meta_items)
  return meta_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParseHtmlInput::kUrlFieldNumber;
const int ParseHtmlInput::kContentFieldNumber;
const int ParseHtmlInput::kEncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParseHtmlInput::ParseHtmlInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ParseHtmlInput)
}
ParseHtmlInput::ParseHtmlInput(const ParseHtmlInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  enc_ = from.enc_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ParseHtmlInput)
}

void ParseHtmlInput::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_ = 0;
}

ParseHtmlInput::~ParseHtmlInput() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ParseHtmlInput)
  SharedDtor();
}

void ParseHtmlInput::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParseHtmlInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParseHtmlInput::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParseHtmlInput& ParseHtmlInput::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParseHtmlInput* ParseHtmlInput::New(::google::protobuf::Arena* arena) const {
  ParseHtmlInput* n = new ParseHtmlInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParseHtmlInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  enc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParseHtmlInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ParseHtmlInput.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Encoding_IsValid(value)) {
            set_enc(static_cast< ::ru::mail::go::webbase::blobs::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ParseHtmlInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ParseHtmlInput)
  return false;
#undef DO_
}

void ParseHtmlInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParseHtmlInput.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ParseHtmlInput)
}

::google::protobuf::uint8* ParseHtmlInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ParseHtmlInput.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ParseHtmlInput)
  return target;
}

size_t ParseHtmlInput::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_enc()) {
    // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enc());
  }

  return total_size;
}
size_t ParseHtmlInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required .ru.mail.go.webbase.blobs.Encoding enc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParseHtmlInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ParseHtmlInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParseHtmlInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ParseHtmlInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ParseHtmlInput)
    MergeFrom(*source);
  }
}

void ParseHtmlInput::MergeFrom(const ParseHtmlInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      enc_ = from.enc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParseHtmlInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParseHtmlInput::CopyFrom(const ParseHtmlInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ParseHtmlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseHtmlInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ParseHtmlInput::Swap(ParseHtmlInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParseHtmlInput::InternalSwap(ParseHtmlInput* other) {
  using std::swap;
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  swap(enc_, other->enc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParseHtmlInput::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParseHtmlInput

// required string url = 1;
bool ParseHtmlInput::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParseHtmlInput::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ParseHtmlInput::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParseHtmlInput::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ParseHtmlInput::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
  return url_.GetNoArena();
}
void ParseHtmlInput::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
}
#if LANG_CXX11
void ParseHtmlInput::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
}
#endif
void ParseHtmlInput::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
}
void ParseHtmlInput::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
}
::std::string* ParseHtmlInput::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParseHtmlInput::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParseHtmlInput::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParseHtmlInput.url)
}

// required bytes content = 2;
bool ParseHtmlInput::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParseHtmlInput::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void ParseHtmlInput::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParseHtmlInput::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ParseHtmlInput::content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
  return content_.GetNoArena();
}
void ParseHtmlInput::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
}
#if LANG_CXX11
void ParseHtmlInput::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
}
#endif
void ParseHtmlInput::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
}
void ParseHtmlInput::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
}
::std::string* ParseHtmlInput::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParseHtmlInput::release_content() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParseHtmlInput::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ParseHtmlInput.content)
}

// required .ru.mail.go.webbase.blobs.Encoding enc = 3;
bool ParseHtmlInput::has_enc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParseHtmlInput::set_has_enc() {
  _has_bits_[0] |= 0x00000004u;
}
void ParseHtmlInput::clear_has_enc() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParseHtmlInput::clear_enc() {
  enc_ = 0;
  clear_has_enc();
}
::ru::mail::go::webbase::blobs::Encoding ParseHtmlInput::enc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParseHtmlInput.enc)
  return static_cast< ::ru::mail::go::webbase::blobs::Encoding >(enc_);
}
void ParseHtmlInput::set_enc(::ru::mail::go::webbase::blobs::Encoding value) {
  assert(::ru::mail::go::webbase::blobs::Encoding_IsValid(value));
  set_has_enc();
  enc_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParseHtmlInput.enc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BOW::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BOW::BOW()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.BOW)
}
BOW::BOW(const BOW& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.BOW)
}

void BOW::SharedCtor() {
  _cached_size_ = 0;
}

BOW::~BOW() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.BOW)
  SharedDtor();
}

void BOW::SharedDtor() {
}

void BOW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOW::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BOW& BOW::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

BOW* BOW::New(::google::protobuf::Arena* arena) const {
  BOW* n = new BOW;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BOW::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.BOW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BOW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.BOW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 words = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_words())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_words())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.BOW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.BOW)
  return false;
#undef DO_
}

void BOW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.BOW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->words(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.BOW)
}

::google::protobuf::uint8* BOW::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.BOW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 words = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->words_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.BOW)
  return target;
}

size_t BOW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.BOW)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 words = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->words_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->words_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOW::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.BOW)
  GOOGLE_DCHECK_NE(&from, this);
  const BOW* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BOW>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.BOW)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.BOW)
    MergeFrom(*source);
  }
}

void BOW::MergeFrom(const BOW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.BOW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void BOW::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.BOW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOW::CopyFrom(const BOW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.BOW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOW::IsInitialized() const {
  return true;
}

void BOW::Swap(BOW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BOW::InternalSwap(BOW* other) {
  using std::swap;
  words_.InternalSwap(&other->words_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BOW::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BOW

// repeated uint32 words = 1;
int BOW::words_size() const {
  return words_.size();
}
void BOW::clear_words() {
  words_.Clear();
}
::google::protobuf::uint32 BOW::words(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BOW.words)
  return words_.Get(index);
}
void BOW::set_words(int index, ::google::protobuf::uint32 value) {
  words_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BOW.words)
}
void BOW::add_words(::google::protobuf::uint32 value) {
  words_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.BOW.words)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BOW::words() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.BOW.words)
  return words_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BOW::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.BOW.words)
  return &words_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DCT::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DCT::DCT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DCT)
}
DCT::DCT(const DCT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DCT)
}

void DCT::SharedCtor() {
  _cached_size_ = 0;
}

DCT::~DCT() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DCT)
  SharedDtor();
}

void DCT::SharedDtor() {
}

void DCT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCT::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DCT& DCT::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DCT* DCT::New(::google::protobuf::Arena* arena) const {
  DCT* n = new DCT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DCT::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DCT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DCT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DCT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DCT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DCT)
  return false;
#undef DO_
}

void DCT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DCT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DCT)
}

::google::protobuf::uint8* DCT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DCT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->values_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DCT)
  return target;
}

size_t DCT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DCT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DCT)
  GOOGLE_DCHECK_NE(&from, this);
  const DCT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DCT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DCT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DCT)
    MergeFrom(*source);
  }
}

void DCT::MergeFrom(const DCT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DCT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void DCT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DCT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCT::CopyFrom(const DCT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DCT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCT::IsInitialized() const {
  return true;
}

void DCT::Swap(DCT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DCT::InternalSwap(DCT* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DCT::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DCT

// repeated float values = 1;
int DCT::values_size() const {
  return values_.size();
}
void DCT::clear_values() {
  values_.Clear();
}
float DCT::values(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DCT.values)
  return values_.Get(index);
}
void DCT::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DCT.values)
}
void DCT::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DCT.values)
}
const ::google::protobuf::RepeatedField< float >&
DCT::values() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DCT.values)
  return values_;
}
::google::protobuf::RepeatedField< float >*
DCT::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DCT.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageProps::kWidthFieldNumber;
const int ImageProps::kHeightFieldNumber;
const int ImageProps::kFormatFieldNumber;
const int ImageProps::kHashFieldNumber;
const int ImageProps::kEnthropyFieldNumber;
const int ImageProps::kExifFieldNumber;
const int ImageProps::kSizeFieldNumber;
const int ImageProps::kSharpnessFieldNumber;
const int ImageProps::kBrightnessFieldNumber;
const int ImageProps::kContrastFieldNumber;
const int ImageProps::kColorsFieldNumber;
const int ImageProps::kTransparentFieldNumber;
const int ImageProps::kCvFeaturesFieldNumber;
const int ImageProps::kIsDemotivatorFieldNumber;
const int ImageProps::kShortHashFieldNumber;
const int ImageProps::kVisualWordsFieldNumber;
const int ImageProps::kBowFieldNumber;
const int ImageProps::kDctFieldNumber;
const int ImageProps::kCategoryFieldNumber;
const int ImageProps::kAnimatedFieldNumber;
const int ImageProps::kAnimationLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageProps::ImageProps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageProps)
}
ImageProps::ImageProps(const ImageProps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      visual_words_(from.visual_words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exif()) {
    exif_ = new ::ru::mail::go::webbase::parsing::img::Exif(*from.exif_);
  } else {
    exif_ = NULL;
  }
  if (from.has_cv_features()) {
    cv_features_ = new ::ru::mail::go::webbase::parsing::img::CvFeatures(*from.cv_features_);
  } else {
    cv_features_ = NULL;
  }
  if (from.has_bow()) {
    bow_ = new ::ru::mail::go::webbase::blobs::BOW(*from.bow_);
  } else {
    bow_ = NULL;
  }
  if (from.has_dct()) {
    dct_ = new ::ru::mail::go::webbase::blobs::DCT(*from.dct_);
  } else {
    dct_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&width_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageProps)
}

void ImageProps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&exif_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&exif_)) + sizeof(category_));
}

ImageProps::~ImageProps() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageProps)
  SharedDtor();
}

void ImageProps::SharedDtor() {
  if (this != internal_default_instance()) delete exif_;
  if (this != internal_default_instance()) delete cv_features_;
  if (this != internal_default_instance()) delete bow_;
  if (this != internal_default_instance()) delete dct_;
}

void ImageProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProps::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageProps& ImageProps::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageProps* ImageProps::New(::google::protobuf::Arena* arena) const {
  ImageProps* n = new ImageProps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageProps::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visual_words_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(exif_ != NULL);
      exif_->::ru::mail::go::webbase::parsing::img::Exif::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cv_features_ != NULL);
      cv_features_->::ru::mail::go::webbase::parsing::img::CvFeatures::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bow_ != NULL);
      bow_->::ru::mail::go::webbase::blobs::BOW::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dct_ != NULL);
      dct_->::ru::mail::go::webbase::blobs::DCT::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_) -
        reinterpret_cast<char*>(&width_)) + sizeof(format_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&enthropy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transparent_) -
        reinterpret_cast<char*>(&enthropy_)) + sizeof(transparent_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&is_demotivator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&is_demotivator_)) + sizeof(category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageProps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value)) {
            set_format(static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 enthropy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enthropy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enthropy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Exif exif = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exif()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sharpness = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_sharpness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharpness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 brightness = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_brightness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contrast = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_contrast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 colors = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_colors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transparent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_transparent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.CvFeatures cv_features = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cv_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_demotivator = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_is_demotivator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_demotivator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 short_hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_short_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &short_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 visual_words = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128u, input, this->mutable_visual_words())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_visual_words())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.BOW bow = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.DCT dct = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.ImageClass category = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::ImageClass_IsValid(value)) {
            set_category(static_cast< ::ru::mail::go::webbase::parsing::img::ImageClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool animated = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_animated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 animation_length = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_animation_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &animation_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageProps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageProps)
  return false;
#undef DO_
}

void ImageProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // required uint64 hash = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hash(), output);
  }

  // required uint32 enthropy = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->enthropy(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Exif exif = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->exif_, output);
  }

  // required uint32 size = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->size(), output);
  }

  // optional double sharpness = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sharpness(), output);
  }

  // optional uint32 brightness = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->brightness(), output);
  }

  // optional uint32 contrast = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->contrast(), output);
  }

  // optional uint32 colors = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->colors(), output);
  }

  // optional bool transparent = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->transparent(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.CvFeatures cv_features = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cv_features_, output);
  }

  // optional bool is_demotivator = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_demotivator(), output);
  }

  // optional uint32 short_hash = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->short_hash(), output);
  }

  // repeated uint32 visual_words = 16;
  for (int i = 0, n = this->visual_words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->visual_words(i), output);
  }

  // optional .ru.mail.go.webbase.blobs.BOW bow = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->bow_, output);
  }

  // optional .ru.mail.go.webbase.blobs.DCT dct = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->dct_, output);
  }

  // optional .ru.mail.go.webbase.parsing.img.ImageClass category = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->category(), output);
  }

  // optional bool animated = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->animated(), output);
  }

  // optional uint64 animation_length = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->animation_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageProps)
}

::google::protobuf::uint8* ImageProps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // required uint64 hash = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hash(), target);
  }

  // required uint32 enthropy = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->enthropy(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.Exif exif = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->exif_, deterministic, target);
  }

  // required uint32 size = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->size(), target);
  }

  // optional double sharpness = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sharpness(), target);
  }

  // optional uint32 brightness = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->brightness(), target);
  }

  // optional uint32 contrast = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->contrast(), target);
  }

  // optional uint32 colors = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->colors(), target);
  }

  // optional bool transparent = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->transparent(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.CvFeatures cv_features = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->cv_features_, deterministic, target);
  }

  // optional bool is_demotivator = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_demotivator(), target);
  }

  // optional uint32 short_hash = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->short_hash(), target);
  }

  // repeated uint32 visual_words = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(16, this->visual_words_, target);

  // optional .ru.mail.go.webbase.blobs.BOW bow = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->bow_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.DCT dct = 18;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->dct_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.parsing.img.ImageClass category = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->category(), target);
  }

  // optional bool animated = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->animated(), target);
  }

  // optional uint64 animation_length = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->animation_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageProps)
  return target;
}

size_t ImageProps::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageProps)
  size_t total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_hash()) {
    // required uint64 hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());
  }

  if (has_format()) {
    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  if (has_enthropy()) {
    // required uint32 enthropy = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enthropy());
  }

  if (has_size()) {
    // required uint32 size = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t ImageProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageProps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000005f0) ^ 0x000005f0) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint64 hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());

    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());

    // required uint32 enthropy = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enthropy());

    // required uint32 size = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 visual_words = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->visual_words_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->visual_words_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ru.mail.go.webbase.parsing.img.Exif exif = 6;
    if (has_exif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exif_);
    }

    // optional .ru.mail.go.webbase.parsing.img.CvFeatures cv_features = 13;
    if (has_cv_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cv_features_);
    }

    // optional .ru.mail.go.webbase.blobs.BOW bow = 17;
    if (has_bow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bow_);
    }

    // optional .ru.mail.go.webbase.blobs.DCT dct = 18;
    if (has_dct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dct_);
    }

  }
  // optional double sharpness = 8;
  if (has_sharpness()) {
    total_size += 1 + 8;
  }

  if (_has_bits_[8 / 32] & 63488u) {
    // optional uint32 brightness = 9;
    if (has_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brightness());
    }

    // optional uint32 contrast = 10;
    if (has_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrast());
    }

    // optional uint32 colors = 11;
    if (has_colors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colors());
    }

    // optional uint32 short_hash = 15;
    if (has_short_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->short_hash());
    }

    // optional bool transparent = 12;
    if (has_transparent()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool is_demotivator = 14;
    if (has_is_demotivator()) {
      total_size += 1 + 1;
    }

    // optional bool animated = 20;
    if (has_animated()) {
      total_size += 2 + 1;
    }

    // optional uint64 animation_length = 21;
    if (has_animation_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->animation_length());
    }

    // optional .ru.mail.go.webbase.parsing.img.ImageClass category = 19;
    if (has_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageProps)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageProps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageProps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageProps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageProps)
    MergeFrom(*source);
  }
}

void ImageProps::MergeFrom(const ImageProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visual_words_.MergeFrom(from.visual_words_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_exif()->::ru::mail::go::webbase::parsing::img::Exif::MergeFrom(from.exif());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cv_features()->::ru::mail::go::webbase::parsing::img::CvFeatures::MergeFrom(from.cv_features());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bow()->::ru::mail::go::webbase::blobs::BOW::MergeFrom(from.bow());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dct()->::ru::mail::go::webbase::blobs::DCT::MergeFrom(from.dct());
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      enthropy_ = from.enthropy_;
    }
    if (cached_has_bits & 0x00000200u) {
      sharpness_ = from.sharpness_;
    }
    if (cached_has_bits & 0x00000400u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000800u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00001000u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00002000u) {
      colors_ = from.colors_;
    }
    if (cached_has_bits & 0x00004000u) {
      short_hash_ = from.short_hash_;
    }
    if (cached_has_bits & 0x00008000u) {
      transparent_ = from.transparent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      is_demotivator_ = from.is_demotivator_;
    }
    if (cached_has_bits & 0x00020000u) {
      animated_ = from.animated_;
    }
    if (cached_has_bits & 0x00040000u) {
      animation_length_ = from.animation_length_;
    }
    if (cached_has_bits & 0x00080000u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageProps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProps::CopyFrom(const ImageProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProps::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005f0) != 0x000005f0) return false;
  if (has_cv_features()) {
    if (!this->cv_features_->IsInitialized()) return false;
  }
  return true;
}

void ImageProps::Swap(ImageProps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageProps::InternalSwap(ImageProps* other) {
  using std::swap;
  visual_words_.InternalSwap(&other->visual_words_);
  swap(exif_, other->exif_);
  swap(cv_features_, other->cv_features_);
  swap(bow_, other->bow_);
  swap(dct_, other->dct_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(hash_, other->hash_);
  swap(format_, other->format_);
  swap(enthropy_, other->enthropy_);
  swap(sharpness_, other->sharpness_);
  swap(size_, other->size_);
  swap(brightness_, other->brightness_);
  swap(contrast_, other->contrast_);
  swap(colors_, other->colors_);
  swap(short_hash_, other->short_hash_);
  swap(transparent_, other->transparent_);
  swap(is_demotivator_, other->is_demotivator_);
  swap(animated_, other->animated_);
  swap(animation_length_, other->animation_length_);
  swap(category_, other->category_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageProps::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageProps

// required uint32 width = 1;
bool ImageProps::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageProps::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageProps::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageProps::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ImageProps::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.width)
  return width_;
}
void ImageProps::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.width)
}

// required uint32 height = 2;
bool ImageProps::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageProps::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageProps::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageProps::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ImageProps::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.height)
  return height_;
}
void ImageProps::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.height)
}

// required .ru.mail.go.webbase.parsing.img.ImageFormat format = 3;
bool ImageProps::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageProps::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageProps::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageProps::clear_format() {
  format_ = 0;
  clear_has_format();
}
::ru::mail::go::webbase::parsing::img::ImageFormat ImageProps::format() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.format)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(format_);
}
void ImageProps::set_format(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.format)
}

// required uint64 hash = 4;
bool ImageProps::has_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageProps::set_has_hash() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageProps::clear_has_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageProps::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 ImageProps::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.hash)
  return hash_;
}
void ImageProps::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.hash)
}

// required uint32 enthropy = 5;
bool ImageProps::has_enthropy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageProps::set_has_enthropy() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageProps::clear_has_enthropy() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageProps::clear_enthropy() {
  enthropy_ = 0u;
  clear_has_enthropy();
}
::google::protobuf::uint32 ImageProps::enthropy() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.enthropy)
  return enthropy_;
}
void ImageProps::set_enthropy(::google::protobuf::uint32 value) {
  set_has_enthropy();
  enthropy_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.enthropy)
}

// optional .ru.mail.go.webbase.parsing.img.Exif exif = 6;
bool ImageProps::has_exif() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageProps::set_has_exif() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageProps::clear_has_exif() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageProps::clear_exif() {
  if (exif_ != NULL) exif_->::ru::mail::go::webbase::parsing::img::Exif::Clear();
  clear_has_exif();
}
const ::ru::mail::go::webbase::parsing::img::Exif& ImageProps::exif() const {
  const ::ru::mail::go::webbase::parsing::img::Exif* p = exif_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.exif)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Exif*>(
      &::ru::mail::go::webbase::parsing::img::_Exif_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Exif* ImageProps::mutable_exif() {
  set_has_exif();
  if (exif_ == NULL) {
    exif_ = new ::ru::mail::go::webbase::parsing::img::Exif;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageProps.exif)
  return exif_;
}
::ru::mail::go::webbase::parsing::img::Exif* ImageProps::release_exif() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageProps.exif)
  clear_has_exif();
  ::ru::mail::go::webbase::parsing::img::Exif* temp = exif_;
  exif_ = NULL;
  return temp;
}
void ImageProps::set_allocated_exif(::ru::mail::go::webbase::parsing::img::Exif* exif) {
  delete exif_;
  exif_ = exif;
  if (exif) {
    set_has_exif();
  } else {
    clear_has_exif();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageProps.exif)
}

// required uint32 size = 7;
bool ImageProps::has_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageProps::set_has_size() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageProps::clear_has_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageProps::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 ImageProps::size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.size)
  return size_;
}
void ImageProps::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.size)
}

// optional double sharpness = 8;
bool ImageProps::has_sharpness() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageProps::set_has_sharpness() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageProps::clear_has_sharpness() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageProps::clear_sharpness() {
  sharpness_ = 0;
  clear_has_sharpness();
}
double ImageProps::sharpness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.sharpness)
  return sharpness_;
}
void ImageProps::set_sharpness(double value) {
  set_has_sharpness();
  sharpness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.sharpness)
}

// optional uint32 brightness = 9;
bool ImageProps::has_brightness() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageProps::set_has_brightness() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageProps::clear_has_brightness() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageProps::clear_brightness() {
  brightness_ = 0u;
  clear_has_brightness();
}
::google::protobuf::uint32 ImageProps::brightness() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.brightness)
  return brightness_;
}
void ImageProps::set_brightness(::google::protobuf::uint32 value) {
  set_has_brightness();
  brightness_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.brightness)
}

// optional uint32 contrast = 10;
bool ImageProps::has_contrast() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImageProps::set_has_contrast() {
  _has_bits_[0] |= 0x00001000u;
}
void ImageProps::clear_has_contrast() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImageProps::clear_contrast() {
  contrast_ = 0u;
  clear_has_contrast();
}
::google::protobuf::uint32 ImageProps::contrast() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.contrast)
  return contrast_;
}
void ImageProps::set_contrast(::google::protobuf::uint32 value) {
  set_has_contrast();
  contrast_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.contrast)
}

// optional uint32 colors = 11;
bool ImageProps::has_colors() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImageProps::set_has_colors() {
  _has_bits_[0] |= 0x00002000u;
}
void ImageProps::clear_has_colors() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImageProps::clear_colors() {
  colors_ = 0u;
  clear_has_colors();
}
::google::protobuf::uint32 ImageProps::colors() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.colors)
  return colors_;
}
void ImageProps::set_colors(::google::protobuf::uint32 value) {
  set_has_colors();
  colors_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.colors)
}

// optional bool transparent = 12;
bool ImageProps::has_transparent() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImageProps::set_has_transparent() {
  _has_bits_[0] |= 0x00008000u;
}
void ImageProps::clear_has_transparent() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImageProps::clear_transparent() {
  transparent_ = false;
  clear_has_transparent();
}
bool ImageProps::transparent() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.transparent)
  return transparent_;
}
void ImageProps::set_transparent(bool value) {
  set_has_transparent();
  transparent_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.transparent)
}

// optional .ru.mail.go.webbase.parsing.img.CvFeatures cv_features = 13;
bool ImageProps::has_cv_features() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageProps::set_has_cv_features() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageProps::clear_has_cv_features() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageProps::clear_cv_features() {
  if (cv_features_ != NULL) cv_features_->::ru::mail::go::webbase::parsing::img::CvFeatures::Clear();
  clear_has_cv_features();
}
const ::ru::mail::go::webbase::parsing::img::CvFeatures& ImageProps::cv_features() const {
  const ::ru::mail::go::webbase::parsing::img::CvFeatures* p = cv_features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.cv_features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::CvFeatures*>(
      &::ru::mail::go::webbase::parsing::img::_CvFeatures_default_instance_);
}
::ru::mail::go::webbase::parsing::img::CvFeatures* ImageProps::mutable_cv_features() {
  set_has_cv_features();
  if (cv_features_ == NULL) {
    cv_features_ = new ::ru::mail::go::webbase::parsing::img::CvFeatures;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageProps.cv_features)
  return cv_features_;
}
::ru::mail::go::webbase::parsing::img::CvFeatures* ImageProps::release_cv_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageProps.cv_features)
  clear_has_cv_features();
  ::ru::mail::go::webbase::parsing::img::CvFeatures* temp = cv_features_;
  cv_features_ = NULL;
  return temp;
}
void ImageProps::set_allocated_cv_features(::ru::mail::go::webbase::parsing::img::CvFeatures* cv_features) {
  delete cv_features_;
  cv_features_ = cv_features;
  if (cv_features) {
    set_has_cv_features();
  } else {
    clear_has_cv_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageProps.cv_features)
}

// optional bool is_demotivator = 14;
bool ImageProps::has_is_demotivator() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImageProps::set_has_is_demotivator() {
  _has_bits_[0] |= 0x00010000u;
}
void ImageProps::clear_has_is_demotivator() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImageProps::clear_is_demotivator() {
  is_demotivator_ = false;
  clear_has_is_demotivator();
}
bool ImageProps::is_demotivator() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.is_demotivator)
  return is_demotivator_;
}
void ImageProps::set_is_demotivator(bool value) {
  set_has_is_demotivator();
  is_demotivator_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.is_demotivator)
}

// optional uint32 short_hash = 15;
bool ImageProps::has_short_hash() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImageProps::set_has_short_hash() {
  _has_bits_[0] |= 0x00004000u;
}
void ImageProps::clear_has_short_hash() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImageProps::clear_short_hash() {
  short_hash_ = 0u;
  clear_has_short_hash();
}
::google::protobuf::uint32 ImageProps::short_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.short_hash)
  return short_hash_;
}
void ImageProps::set_short_hash(::google::protobuf::uint32 value) {
  set_has_short_hash();
  short_hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.short_hash)
}

// repeated uint32 visual_words = 16;
int ImageProps::visual_words_size() const {
  return visual_words_.size();
}
void ImageProps::clear_visual_words() {
  visual_words_.Clear();
}
::google::protobuf::uint32 ImageProps::visual_words(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.visual_words)
  return visual_words_.Get(index);
}
void ImageProps::set_visual_words(int index, ::google::protobuf::uint32 value) {
  visual_words_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.visual_words)
}
void ImageProps::add_visual_words(::google::protobuf::uint32 value) {
  visual_words_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageProps.visual_words)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageProps::visual_words() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageProps.visual_words)
  return visual_words_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageProps::mutable_visual_words() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageProps.visual_words)
  return &visual_words_;
}

// optional .ru.mail.go.webbase.blobs.BOW bow = 17;
bool ImageProps::has_bow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageProps::set_has_bow() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageProps::clear_has_bow() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageProps::clear_bow() {
  if (bow_ != NULL) bow_->::ru::mail::go::webbase::blobs::BOW::Clear();
  clear_has_bow();
}
const ::ru::mail::go::webbase::blobs::BOW& ImageProps::bow() const {
  const ::ru::mail::go::webbase::blobs::BOW* p = bow_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.bow)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BOW*>(
      &::ru::mail::go::webbase::blobs::_BOW_default_instance_);
}
::ru::mail::go::webbase::blobs::BOW* ImageProps::mutable_bow() {
  set_has_bow();
  if (bow_ == NULL) {
    bow_ = new ::ru::mail::go::webbase::blobs::BOW;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageProps.bow)
  return bow_;
}
::ru::mail::go::webbase::blobs::BOW* ImageProps::release_bow() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageProps.bow)
  clear_has_bow();
  ::ru::mail::go::webbase::blobs::BOW* temp = bow_;
  bow_ = NULL;
  return temp;
}
void ImageProps::set_allocated_bow(::ru::mail::go::webbase::blobs::BOW* bow) {
  delete bow_;
  bow_ = bow;
  if (bow) {
    set_has_bow();
  } else {
    clear_has_bow();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageProps.bow)
}

// optional .ru.mail.go.webbase.blobs.DCT dct = 18;
bool ImageProps::has_dct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageProps::set_has_dct() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageProps::clear_has_dct() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageProps::clear_dct() {
  if (dct_ != NULL) dct_->::ru::mail::go::webbase::blobs::DCT::Clear();
  clear_has_dct();
}
const ::ru::mail::go::webbase::blobs::DCT& ImageProps::dct() const {
  const ::ru::mail::go::webbase::blobs::DCT* p = dct_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.dct)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DCT*>(
      &::ru::mail::go::webbase::blobs::_DCT_default_instance_);
}
::ru::mail::go::webbase::blobs::DCT* ImageProps::mutable_dct() {
  set_has_dct();
  if (dct_ == NULL) {
    dct_ = new ::ru::mail::go::webbase::blobs::DCT;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageProps.dct)
  return dct_;
}
::ru::mail::go::webbase::blobs::DCT* ImageProps::release_dct() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageProps.dct)
  clear_has_dct();
  ::ru::mail::go::webbase::blobs::DCT* temp = dct_;
  dct_ = NULL;
  return temp;
}
void ImageProps::set_allocated_dct(::ru::mail::go::webbase::blobs::DCT* dct) {
  delete dct_;
  dct_ = dct;
  if (dct) {
    set_has_dct();
  } else {
    clear_has_dct();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageProps.dct)
}

// optional .ru.mail.go.webbase.parsing.img.ImageClass category = 19;
bool ImageProps::has_category() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ImageProps::set_has_category() {
  _has_bits_[0] |= 0x00080000u;
}
void ImageProps::clear_has_category() {
  _has_bits_[0] &= ~0x00080000u;
}
void ImageProps::clear_category() {
  category_ = 0;
  clear_has_category();
}
::ru::mail::go::webbase::parsing::img::ImageClass ImageProps::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.category)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageClass >(category_);
}
void ImageProps::set_category(::ru::mail::go::webbase::parsing::img::ImageClass value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageClass_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.category)
}

// optional bool animated = 20;
bool ImageProps::has_animated() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ImageProps::set_has_animated() {
  _has_bits_[0] |= 0x00020000u;
}
void ImageProps::clear_has_animated() {
  _has_bits_[0] &= ~0x00020000u;
}
void ImageProps::clear_animated() {
  animated_ = false;
  clear_has_animated();
}
bool ImageProps::animated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.animated)
  return animated_;
}
void ImageProps::set_animated(bool value) {
  set_has_animated();
  animated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.animated)
}

// optional uint64 animation_length = 21;
bool ImageProps::has_animation_length() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ImageProps::set_has_animation_length() {
  _has_bits_[0] |= 0x00040000u;
}
void ImageProps::clear_has_animation_length() {
  _has_bits_[0] &= ~0x00040000u;
}
void ImageProps::clear_animation_length() {
  animation_length_ = GOOGLE_ULONGLONG(0);
  clear_has_animation_length();
}
::google::protobuf::uint64 ImageProps::animation_length() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageProps.animation_length)
  return animation_length_;
}
void ImageProps::set_animation_length(::google::protobuf::uint64 value) {
  set_has_animation_length();
  animation_length_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageProps.animation_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParserSignature::kImgFieldNumber;
const int ParserSignature::kPplFieldNumber;
const int ParserSignature::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParserSignature::ParserSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ParserSignature)
}
ParserSignature::ParserSignature(const ParserSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&ppl_) -
    reinterpret_cast<char*>(&time_)) + sizeof(ppl_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ParserSignature)
}

void ParserSignature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ppl_) -
      reinterpret_cast<char*>(&time_)) + sizeof(ppl_));
}

ParserSignature::~ParserSignature() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ParserSignature)
  SharedDtor();
}

void ParserSignature::SharedDtor() {
}

void ParserSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParserSignature::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParserSignature& ParserSignature::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParserSignature* ParserSignature::New(::google::protobuf::Arena* arena) const {
  ParserSignature* n = new ParserSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParserSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ParserSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ppl_) -
        reinterpret_cast<char*>(&time_)) + sizeof(ppl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParserSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ParserSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool img = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_img();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &img_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ppl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ppl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ppl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ParserSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ParserSignature)
  return false;
#undef DO_
}

void ParserSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ParserSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool img = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->img(), output);
  }

  // required bool ppl = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ppl(), output);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ParserSignature)
}

::google::protobuf::uint8* ParserSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ParserSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool img = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->img(), target);
  }

  // required bool ppl = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ppl(), target);
  }

  // required uint64 time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ParserSignature)
  return target;
}

size_t ParserSignature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ParserSignature)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_img()) {
    // required bool img = 1;
    total_size += 1 + 1;
  }

  if (has_ppl()) {
    // required bool ppl = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParserSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ParserSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required bool img = 1;
    total_size += 1 + 1;

    // required bool ppl = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParserSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ParserSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const ParserSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParserSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ParserSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ParserSignature)
    MergeFrom(*source);
  }
}

void ParserSignature::MergeFrom(const ParserSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ParserSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      img_ = from.img_;
    }
    if (cached_has_bits & 0x00000004u) {
      ppl_ = from.ppl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParserSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ParserSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParserSignature::CopyFrom(const ParserSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ParserSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParserSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ParserSignature::Swap(ParserSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParserSignature::InternalSwap(ParserSignature* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(img_, other->img_);
  swap(ppl_, other->ppl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParserSignature::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParserSignature

// required bool img = 1;
bool ParserSignature::has_img() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParserSignature::set_has_img() {
  _has_bits_[0] |= 0x00000002u;
}
void ParserSignature::clear_has_img() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParserSignature::clear_img() {
  img_ = false;
  clear_has_img();
}
bool ParserSignature::img() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParserSignature.img)
  return img_;
}
void ParserSignature::set_img(bool value) {
  set_has_img();
  img_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParserSignature.img)
}

// required bool ppl = 2;
bool ParserSignature::has_ppl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParserSignature::set_has_ppl() {
  _has_bits_[0] |= 0x00000004u;
}
void ParserSignature::clear_has_ppl() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParserSignature::clear_ppl() {
  ppl_ = false;
  clear_has_ppl();
}
bool ParserSignature::ppl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParserSignature.ppl)
  return ppl_;
}
void ParserSignature::set_ppl(bool value) {
  set_has_ppl();
  ppl_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParserSignature.ppl)
}

// required uint64 time = 3;
bool ParserSignature::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParserSignature::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ParserSignature::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParserSignature::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 ParserSignature::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ParserSignature.time)
  return time_;
}
void ParserSignature::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ParserSignature.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgParserBlob::kKeyFieldNumber;
const int ImgParserBlob::kPropsFieldNumber;
const int ImgParserBlob::kThumbFieldNumber;
const int ImgParserBlob::kVideoThumbFieldNumber;
const int ImgParserBlob::kSiftsFieldNumber;
const int ImgParserBlob::kThumbHidpiFieldNumber;
const int ImgParserBlob::kVideoThumbHidpiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgParserBlob::ImgParserBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImgParserBlob)
}
ImgParserBlob::ImgParserBlob(const ImgParserBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sifts_(from.sifts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_props()) {
    props_ = new ::ru::mail::go::webbase::blobs::ImageProps(*from.props_);
  } else {
    props_ = NULL;
  }
  if (from.has_thumb()) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.thumb_);
  } else {
    thumb_ = NULL;
  }
  if (from.has_video_thumb()) {
    video_thumb_ = new ::ru::mail::go::webbase::parsing::img::VideoClip(*from.video_thumb_);
  } else {
    video_thumb_ = NULL;
  }
  if (from.has_thumb_hidpi()) {
    thumb_hidpi_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.thumb_hidpi_);
  } else {
    thumb_hidpi_ = NULL;
  }
  if (from.has_video_thumb_hidpi()) {
    video_thumb_hidpi_ = new ::ru::mail::go::webbase::parsing::img::VideoClip(*from.video_thumb_hidpi_);
  } else {
    video_thumb_hidpi_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImgParserBlob)
}

void ImgParserBlob::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&props_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_thumb_hidpi_) -
      reinterpret_cast<char*>(&props_)) + sizeof(video_thumb_hidpi_));
}

ImgParserBlob::~ImgParserBlob() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImgParserBlob)
  SharedDtor();
}

void ImgParserBlob::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete props_;
  if (this != internal_default_instance()) delete thumb_;
  if (this != internal_default_instance()) delete video_thumb_;
  if (this != internal_default_instance()) delete thumb_hidpi_;
  if (this != internal_default_instance()) delete video_thumb_hidpi_;
}

void ImgParserBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgParserBlob::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgParserBlob& ImgParserBlob::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgParserBlob* ImgParserBlob::New(::google::protobuf::Arena* arena) const {
  ImgParserBlob* n = new ImgParserBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgParserBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sifts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(props_ != NULL);
      props_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(thumb_ != NULL);
      thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(video_thumb_ != NULL);
      video_thumb_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(thumb_hidpi_ != NULL);
      thumb_hidpi_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(video_thumb_hidpi_ != NULL);
      video_thumb_hidpi_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImgParserBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ImageProps props = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sifts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_sifts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sifts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Thumb thumb_hidpi = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb_hidpi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb_hidpi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_thumb_hidpi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImgParserBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImgParserBlob)
  return false;
#undef DO_
}

void ImgParserBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required .ru.mail.go.webbase.blobs.ImageProps props = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->props_, output);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->thumb_, output);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->video_thumb_, output);
  }

  // repeated float sifts = 5;
  for (int i = 0, n = this->sifts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->sifts(i), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb_hidpi = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->thumb_hidpi_, output);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb_hidpi = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->video_thumb_hidpi_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImgParserBlob)
}

::google::protobuf::uint8* ImgParserBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required .ru.mail.go.webbase.blobs.ImageProps props = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->props_, deterministic, target);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->thumb_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->video_thumb_, deterministic, target);
  }

  // repeated float sifts = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->sifts_, target);

  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb_hidpi = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->thumb_hidpi_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb_hidpi = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->video_thumb_hidpi_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImgParserBlob)
  return target;
}

size_t ImgParserBlob::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_props()) {
    // required .ru.mail.go.webbase.blobs.ImageProps props = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->props_);
  }

  if (has_thumb()) {
    // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);
  }

  return total_size;
}
size_t ImgParserBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required .ru.mail.go.webbase.blobs.ImageProps props = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->props_);

    // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float sifts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sifts_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sifts_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 4;
    if (has_video_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_thumb_);
    }

    // optional .ru.mail.go.webbase.parsing.img.Thumb thumb_hidpi = 6;
    if (has_thumb_hidpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thumb_hidpi_);
    }

    // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb_hidpi = 7;
    if (has_video_thumb_hidpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_thumb_hidpi_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgParserBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgParserBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgParserBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImgParserBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImgParserBlob)
    MergeFrom(*source);
  }
}

void ImgParserBlob::MergeFrom(const ImgParserBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sifts_.MergeFrom(from.sifts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_props()->::ru::mail::go::webbase::blobs::ImageProps::MergeFrom(from.props());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_thumb()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.thumb());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_video_thumb()->::ru::mail::go::webbase::parsing::img::VideoClip::MergeFrom(from.video_thumb());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_thumb_hidpi()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.thumb_hidpi());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_video_thumb_hidpi()->::ru::mail::go::webbase::parsing::img::VideoClip::MergeFrom(from.video_thumb_hidpi());
    }
  }
}

void ImgParserBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgParserBlob::CopyFrom(const ImgParserBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImgParserBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgParserBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_props()) {
    if (!this->props_->IsInitialized()) return false;
  }
  if (has_thumb()) {
    if (!this->thumb_->IsInitialized()) return false;
  }
  if (has_video_thumb()) {
    if (!this->video_thumb_->IsInitialized()) return false;
  }
  if (has_thumb_hidpi()) {
    if (!this->thumb_hidpi_->IsInitialized()) return false;
  }
  if (has_video_thumb_hidpi()) {
    if (!this->video_thumb_hidpi_->IsInitialized()) return false;
  }
  return true;
}

void ImgParserBlob::Swap(ImgParserBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgParserBlob::InternalSwap(ImgParserBlob* other) {
  using std::swap;
  sifts_.InternalSwap(&other->sifts_);
  key_.Swap(&other->key_);
  swap(props_, other->props_);
  swap(thumb_, other->thumb_);
  swap(video_thumb_, other->video_thumb_);
  swap(thumb_hidpi_, other->thumb_hidpi_);
  swap(video_thumb_hidpi_, other->video_thumb_hidpi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgParserBlob::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgParserBlob

// required bytes key = 1;
bool ImgParserBlob::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgParserBlob::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgParserBlob::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgParserBlob::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ImgParserBlob::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.key)
  return key_.GetNoArena();
}
void ImgParserBlob::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImgParserBlob.key)
}
#if LANG_CXX11
void ImgParserBlob::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImgParserBlob.key)
}
#endif
void ImgParserBlob::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImgParserBlob.key)
}
void ImgParserBlob::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImgParserBlob.key)
}
::std::string* ImgParserBlob::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgParserBlob::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgParserBlob::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.key)
}

// required .ru.mail.go.webbase.blobs.ImageProps props = 2;
bool ImgParserBlob::has_props() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImgParserBlob::set_has_props() {
  _has_bits_[0] |= 0x00000002u;
}
void ImgParserBlob::clear_has_props() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImgParserBlob::clear_props() {
  if (props_ != NULL) props_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
  clear_has_props();
}
const ::ru::mail::go::webbase::blobs::ImageProps& ImgParserBlob::props() const {
  const ::ru::mail::go::webbase::blobs::ImageProps* p = props_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.props)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageProps*>(
      &::ru::mail::go::webbase::blobs::_ImageProps_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageProps* ImgParserBlob::mutable_props() {
  set_has_props();
  if (props_ == NULL) {
    props_ = new ::ru::mail::go::webbase::blobs::ImageProps;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.props)
  return props_;
}
::ru::mail::go::webbase::blobs::ImageProps* ImgParserBlob::release_props() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.props)
  clear_has_props();
  ::ru::mail::go::webbase::blobs::ImageProps* temp = props_;
  props_ = NULL;
  return temp;
}
void ImgParserBlob::set_allocated_props(::ru::mail::go::webbase::blobs::ImageProps* props) {
  delete props_;
  props_ = props;
  if (props) {
    set_has_props();
  } else {
    clear_has_props();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.props)
}

// required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
bool ImgParserBlob::has_thumb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImgParserBlob::set_has_thumb() {
  _has_bits_[0] |= 0x00000004u;
}
void ImgParserBlob::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImgParserBlob::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ImgParserBlob::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* ImgParserBlob::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.thumb)
  return thumb_;
}
::ru::mail::go::webbase::parsing::img::Thumb* ImgParserBlob::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
void ImgParserBlob::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.thumb)
}

// optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 4;
bool ImgParserBlob::has_video_thumb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImgParserBlob::set_has_video_thumb() {
  _has_bits_[0] |= 0x00000008u;
}
void ImgParserBlob::clear_has_video_thumb() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImgParserBlob::clear_video_thumb() {
  if (video_thumb_ != NULL) video_thumb_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
  clear_has_video_thumb();
}
const ::ru::mail::go::webbase::parsing::img::VideoClip& ImgParserBlob::video_thumb() const {
  const ::ru::mail::go::webbase::parsing::img::VideoClip* p = video_thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      &::ru::mail::go::webbase::parsing::img::_VideoClip_default_instance_);
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImgParserBlob::mutable_video_thumb() {
  set_has_video_thumb();
  if (video_thumb_ == NULL) {
    video_thumb_ = new ::ru::mail::go::webbase::parsing::img::VideoClip;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb)
  return video_thumb_;
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImgParserBlob::release_video_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb)
  clear_has_video_thumb();
  ::ru::mail::go::webbase::parsing::img::VideoClip* temp = video_thumb_;
  video_thumb_ = NULL;
  return temp;
}
void ImgParserBlob::set_allocated_video_thumb(::ru::mail::go::webbase::parsing::img::VideoClip* video_thumb) {
  delete video_thumb_;
  video_thumb_ = video_thumb;
  if (video_thumb) {
    set_has_video_thumb();
  } else {
    clear_has_video_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb)
}

// repeated float sifts = 5;
int ImgParserBlob::sifts_size() const {
  return sifts_.size();
}
void ImgParserBlob::clear_sifts() {
  sifts_.Clear();
}
float ImgParserBlob::sifts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.sifts)
  return sifts_.Get(index);
}
void ImgParserBlob::set_sifts(int index, float value) {
  sifts_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImgParserBlob.sifts)
}
void ImgParserBlob::add_sifts(float value) {
  sifts_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImgParserBlob.sifts)
}
const ::google::protobuf::RepeatedField< float >&
ImgParserBlob::sifts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImgParserBlob.sifts)
  return sifts_;
}
::google::protobuf::RepeatedField< float >*
ImgParserBlob::mutable_sifts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImgParserBlob.sifts)
  return &sifts_;
}

// optional .ru.mail.go.webbase.parsing.img.Thumb thumb_hidpi = 6;
bool ImgParserBlob::has_thumb_hidpi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImgParserBlob::set_has_thumb_hidpi() {
  _has_bits_[0] |= 0x00000010u;
}
void ImgParserBlob::clear_has_thumb_hidpi() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImgParserBlob::clear_thumb_hidpi() {
  if (thumb_hidpi_ != NULL) thumb_hidpi_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb_hidpi();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ImgParserBlob::thumb_hidpi() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_hidpi_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.thumb_hidpi)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* ImgParserBlob::mutable_thumb_hidpi() {
  set_has_thumb_hidpi();
  if (thumb_hidpi_ == NULL) {
    thumb_hidpi_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.thumb_hidpi)
  return thumb_hidpi_;
}
::ru::mail::go::webbase::parsing::img::Thumb* ImgParserBlob::release_thumb_hidpi() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.thumb_hidpi)
  clear_has_thumb_hidpi();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_hidpi_;
  thumb_hidpi_ = NULL;
  return temp;
}
void ImgParserBlob::set_allocated_thumb_hidpi(::ru::mail::go::webbase::parsing::img::Thumb* thumb_hidpi) {
  delete thumb_hidpi_;
  thumb_hidpi_ = thumb_hidpi;
  if (thumb_hidpi) {
    set_has_thumb_hidpi();
  } else {
    clear_has_thumb_hidpi();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.thumb_hidpi)
}

// optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb_hidpi = 7;
bool ImgParserBlob::has_video_thumb_hidpi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImgParserBlob::set_has_video_thumb_hidpi() {
  _has_bits_[0] |= 0x00000020u;
}
void ImgParserBlob::clear_has_video_thumb_hidpi() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImgParserBlob::clear_video_thumb_hidpi() {
  if (video_thumb_hidpi_ != NULL) video_thumb_hidpi_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
  clear_has_video_thumb_hidpi();
}
const ::ru::mail::go::webbase::parsing::img::VideoClip& ImgParserBlob::video_thumb_hidpi() const {
  const ::ru::mail::go::webbase::parsing::img::VideoClip* p = video_thumb_hidpi_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb_hidpi)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      &::ru::mail::go::webbase::parsing::img::_VideoClip_default_instance_);
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImgParserBlob::mutable_video_thumb_hidpi() {
  set_has_video_thumb_hidpi();
  if (video_thumb_hidpi_ == NULL) {
    video_thumb_hidpi_ = new ::ru::mail::go::webbase::parsing::img::VideoClip;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb_hidpi)
  return video_thumb_hidpi_;
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImgParserBlob::release_video_thumb_hidpi() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb_hidpi)
  clear_has_video_thumb_hidpi();
  ::ru::mail::go::webbase::parsing::img::VideoClip* temp = video_thumb_hidpi_;
  video_thumb_hidpi_ = NULL;
  return temp;
}
void ImgParserBlob::set_allocated_video_thumb_hidpi(::ru::mail::go::webbase::parsing::img::VideoClip* video_thumb_hidpi) {
  delete video_thumb_hidpi_;
  video_thumb_hidpi_ = video_thumb_hidpi;
  if (video_thumb_hidpi) {
    set_has_video_thumb_hidpi();
  } else {
    clear_has_video_thumb_hidpi();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImgParserBlob.video_thumb_hidpi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgParserBlobList::kNumFieldNumber;
const int ImgParserBlobList::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgParserBlobList::ImgParserBlobList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImgParserBlobList)
}
ImgParserBlobList::ImgParserBlobList(const ImgParserBlobList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImgParserBlobList)
}

void ImgParserBlobList::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
}

ImgParserBlobList::~ImgParserBlobList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImgParserBlobList)
  SharedDtor();
}

void ImgParserBlobList::SharedDtor() {
}

void ImgParserBlobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgParserBlobList::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgParserBlobList& ImgParserBlobList::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgParserBlobList* ImgParserBlobList::New(::google::protobuf::Arena* arena) const {
  ImgParserBlobList* n = new ImgParserBlobList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgParserBlobList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImgParserBlobList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ImgParserBlob images = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImgParserBlobList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImgParserBlobList)
  return false;
#undef DO_
}

void ImgParserBlobList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.ImgParserBlob images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->images(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImgParserBlobList)
}

::google::protobuf::uint8* ImgParserBlobList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.ImgParserBlob images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->images(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImgParserBlobList)
  return target;
}

size_t ImgParserBlobList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 num = 1;
  if (has_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }
  // repeated .ru.mail.go.webbase.blobs.ImgParserBlob images = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgParserBlobList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgParserBlobList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgParserBlobList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImgParserBlobList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImgParserBlobList)
    MergeFrom(*source);
  }
}

void ImgParserBlobList::MergeFrom(const ImgParserBlobList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.has_num()) {
    set_num(from.num());
  }
}

void ImgParserBlobList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgParserBlobList::CopyFrom(const ImgParserBlobList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImgParserBlobList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgParserBlobList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  return true;
}

void ImgParserBlobList::Swap(ImgParserBlobList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgParserBlobList::InternalSwap(ImgParserBlobList* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgParserBlobList::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgParserBlobList

// required uint32 num = 1;
bool ImgParserBlobList::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgParserBlobList::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgParserBlobList::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgParserBlobList::clear_num() {
  num_ = 0u;
  clear_has_num();
}
::google::protobuf::uint32 ImgParserBlobList::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlobList.num)
  return num_;
}
void ImgParserBlobList::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImgParserBlobList.num)
}

// repeated .ru.mail.go.webbase.blobs.ImgParserBlob images = 2;
int ImgParserBlobList::images_size() const {
  return images_.size();
}
void ImgParserBlobList::clear_images() {
  images_.Clear();
}
const ::ru::mail::go::webbase::blobs::ImgParserBlob& ImgParserBlobList::images(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImgParserBlobList.images)
  return images_.Get(index);
}
::ru::mail::go::webbase::blobs::ImgParserBlob* ImgParserBlobList::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImgParserBlobList.images)
  return images_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ImgParserBlob* ImgParserBlobList::add_images() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImgParserBlobList.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImgParserBlob >*
ImgParserBlobList::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImgParserBlobList.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImgParserBlob >&
ImgParserBlobList::images() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImgParserBlobList.images)
  return images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomainStruct::kKeyDomainFieldNumber;
const int DomainStruct::kFullDomainFieldNumber;
const int DomainStruct::kIcFieldNumber;
const int DomainStruct::kTrustedIcFieldNumber;
const int DomainStruct::kCloakingFieldNumber;
const int DomainStruct::kNbrsq2FieldNumber;
const int DomainStruct::kWotInfoFieldNumber;
const int DomainStruct::kDomainExtraInfoFieldNumber;
const int DomainStruct::kSpamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomainStruct::DomainStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DomainStruct)
}
DomainStruct::DomainStruct(const DomainStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      domain_extra_info_(from.domain_extra_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keydomain()) {
    keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
  }
  fulldomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fulldomain()) {
    fulldomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fulldomain_);
  }
  if (from.has_wot_info()) {
    wot_info_ = new ::ru::mail::go::webbase::blobs::WOTInfo(*from.wot_info_);
  } else {
    wot_info_ = NULL;
  }
  ::memcpy(&ic_, &from.ic_,
    static_cast<size_t>(reinterpret_cast<char*>(&spam_) -
    reinterpret_cast<char*>(&ic_)) + sizeof(spam_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DomainStruct)
}

void DomainStruct::SharedCtor() {
  _cached_size_ = 0;
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fulldomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wot_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spam_) -
      reinterpret_cast<char*>(&wot_info_)) + sizeof(spam_));
}

DomainStruct::~DomainStruct() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DomainStruct)
  SharedDtor();
}

void DomainStruct::SharedDtor() {
  keydomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fulldomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wot_info_;
}

void DomainStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DomainStruct::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DomainStruct& DomainStruct::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DomainStruct* DomainStruct::New(::google::protobuf::Arena* arena) const {
  DomainStruct* n = new DomainStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DomainStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DomainStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_extra_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keydomain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keydomain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fulldomain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fulldomain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wot_info_ != NULL);
      wot_info_->::ru::mail::go::webbase::blobs::WOTInfo::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spam_) -
        reinterpret_cast<char*>(&ic_)) + sizeof(spam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DomainStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DomainStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyDomain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keydomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keydomain().data(), static_cast<int>(this->keydomain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.DomainStruct.keyDomain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fullDomain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fulldomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fulldomain().data(), static_cast<int>(this->fulldomain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.DomainStruct.fullDomain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trusted_ic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trusted_ic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trusted_ic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cloaking = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cloaking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cloaking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nbrsq2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nbrsq2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbrsq2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.WOTInfo wot_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wot_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.extra_info domain_extra_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domain_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_spam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DomainStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DomainStruct)
  return false;
#undef DO_
}

void DomainStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DomainStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyDomain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DomainStruct.keyDomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keydomain(), output);
  }

  // required string fullDomain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fulldomain().data(), static_cast<int>(this->fulldomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DomainStruct.fullDomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fulldomain(), output);
  }

  // optional uint32 ic = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ic(), output);
  }

  // optional uint32 trusted_ic = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->trusted_ic(), output);
  }

  // optional bool cloaking = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cloaking(), output);
  }

  // optional uint32 nbrsq2 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nbrsq2(), output);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo wot_info = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->wot_info_, output);
  }

  // repeated .gogo.storage.extra_info domain_extra_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domain_extra_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->domain_extra_info(static_cast<int>(i)), output);
  }

  // optional uint32 spam = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->spam(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DomainStruct)
}

::google::protobuf::uint8* DomainStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DomainStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyDomain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DomainStruct.keyDomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keydomain(), target);
  }

  // required string fullDomain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fulldomain().data(), static_cast<int>(this->fulldomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DomainStruct.fullDomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fulldomain(), target);
  }

  // optional uint32 ic = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ic(), target);
  }

  // optional uint32 trusted_ic = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->trusted_ic(), target);
  }

  // optional bool cloaking = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cloaking(), target);
  }

  // optional uint32 nbrsq2 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nbrsq2(), target);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo wot_info = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->wot_info_, deterministic, target);
  }

  // repeated .gogo.storage.extra_info domain_extra_info = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domain_extra_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->domain_extra_info(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 spam = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->spam(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DomainStruct)
  return target;
}

size_t DomainStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.DomainStruct)
  size_t total_size = 0;

  if (has_keydomain()) {
    // required string keyDomain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keydomain());
  }

  if (has_fulldomain()) {
    // required string fullDomain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fulldomain());
  }

  return total_size;
}
size_t DomainStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DomainStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string keyDomain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keydomain());

    // required string fullDomain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fulldomain());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.storage.extra_info domain_extra_info = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->domain_extra_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domain_extra_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional .ru.mail.go.webbase.blobs.WOTInfo wot_info = 7;
    if (has_wot_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wot_info_);
    }

    // optional uint32 ic = 3;
    if (has_ic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ic());
    }

    // optional uint32 trusted_ic = 4;
    if (has_trusted_ic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trusted_ic());
    }

    // optional bool cloaking = 5;
    if (has_cloaking()) {
      total_size += 1 + 1;
    }

    // optional uint32 nbrsq2 = 6;
    if (has_nbrsq2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nbrsq2());
    }

    // optional uint32 spam = 9;
    if (has_spam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spam());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomainStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DomainStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DomainStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DomainStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DomainStruct)
    MergeFrom(*source);
  }
}

void DomainStruct::MergeFrom(const DomainStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DomainStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domain_extra_info_.MergeFrom(from.domain_extra_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keydomain();
      keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fulldomain();
      fulldomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fulldomain_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wot_info()->::ru::mail::go::webbase::blobs::WOTInfo::MergeFrom(from.wot_info());
    }
    if (cached_has_bits & 0x00000008u) {
      ic_ = from.ic_;
    }
    if (cached_has_bits & 0x00000010u) {
      trusted_ic_ = from.trusted_ic_;
    }
    if (cached_has_bits & 0x00000020u) {
      cloaking_ = from.cloaking_;
    }
    if (cached_has_bits & 0x00000040u) {
      nbrsq2_ = from.nbrsq2_;
    }
    if (cached_has_bits & 0x00000080u) {
      spam_ = from.spam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DomainStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DomainStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainStruct::CopyFrom(const DomainStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DomainStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->domain_extra_info())) return false;
  if (has_wot_info()) {
    if (!this->wot_info_->IsInitialized()) return false;
  }
  return true;
}

void DomainStruct::Swap(DomainStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomainStruct::InternalSwap(DomainStruct* other) {
  using std::swap;
  domain_extra_info_.InternalSwap(&other->domain_extra_info_);
  keydomain_.Swap(&other->keydomain_);
  fulldomain_.Swap(&other->fulldomain_);
  swap(wot_info_, other->wot_info_);
  swap(ic_, other->ic_);
  swap(trusted_ic_, other->trusted_ic_);
  swap(cloaking_, other->cloaking_);
  swap(nbrsq2_, other->nbrsq2_);
  swap(spam_, other->spam_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DomainStruct::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DomainStruct

// required string keyDomain = 1;
bool DomainStruct::has_keydomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DomainStruct::set_has_keydomain() {
  _has_bits_[0] |= 0x00000001u;
}
void DomainStruct::clear_has_keydomain() {
  _has_bits_[0] &= ~0x00000001u;
}
void DomainStruct::clear_keydomain() {
  keydomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keydomain();
}
const ::std::string& DomainStruct::keydomain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
  return keydomain_.GetNoArena();
}
void DomainStruct::set_keydomain(const ::std::string& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
}
#if LANG_CXX11
void DomainStruct::set_keydomain(::std::string&& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
}
#endif
void DomainStruct::set_keydomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
}
void DomainStruct::set_keydomain(const char* value, size_t size) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
}
::std::string* DomainStruct::mutable_keydomain() {
  set_has_keydomain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
  return keydomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomainStruct::release_keydomain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
  clear_has_keydomain();
  return keydomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomainStruct::set_allocated_keydomain(::std::string* keydomain) {
  if (keydomain != NULL) {
    set_has_keydomain();
  } else {
    clear_has_keydomain();
  }
  keydomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keydomain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DomainStruct.keyDomain)
}

// required string fullDomain = 2;
bool DomainStruct::has_fulldomain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DomainStruct::set_has_fulldomain() {
  _has_bits_[0] |= 0x00000002u;
}
void DomainStruct::clear_has_fulldomain() {
  _has_bits_[0] &= ~0x00000002u;
}
void DomainStruct::clear_fulldomain() {
  fulldomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fulldomain();
}
const ::std::string& DomainStruct::fulldomain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
  return fulldomain_.GetNoArena();
}
void DomainStruct::set_fulldomain(const ::std::string& value) {
  set_has_fulldomain();
  fulldomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
}
#if LANG_CXX11
void DomainStruct::set_fulldomain(::std::string&& value) {
  set_has_fulldomain();
  fulldomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
}
#endif
void DomainStruct::set_fulldomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fulldomain();
  fulldomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
}
void DomainStruct::set_fulldomain(const char* value, size_t size) {
  set_has_fulldomain();
  fulldomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
}
::std::string* DomainStruct::mutable_fulldomain() {
  set_has_fulldomain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
  return fulldomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DomainStruct::release_fulldomain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
  clear_has_fulldomain();
  return fulldomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DomainStruct::set_allocated_fulldomain(::std::string* fulldomain) {
  if (fulldomain != NULL) {
    set_has_fulldomain();
  } else {
    clear_has_fulldomain();
  }
  fulldomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fulldomain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DomainStruct.fullDomain)
}

// optional uint32 ic = 3;
bool DomainStruct::has_ic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DomainStruct::set_has_ic() {
  _has_bits_[0] |= 0x00000008u;
}
void DomainStruct::clear_has_ic() {
  _has_bits_[0] &= ~0x00000008u;
}
void DomainStruct::clear_ic() {
  ic_ = 0u;
  clear_has_ic();
}
::google::protobuf::uint32 DomainStruct::ic() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.ic)
  return ic_;
}
void DomainStruct::set_ic(::google::protobuf::uint32 value) {
  set_has_ic();
  ic_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.ic)
}

// optional uint32 trusted_ic = 4;
bool DomainStruct::has_trusted_ic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DomainStruct::set_has_trusted_ic() {
  _has_bits_[0] |= 0x00000010u;
}
void DomainStruct::clear_has_trusted_ic() {
  _has_bits_[0] &= ~0x00000010u;
}
void DomainStruct::clear_trusted_ic() {
  trusted_ic_ = 0u;
  clear_has_trusted_ic();
}
::google::protobuf::uint32 DomainStruct::trusted_ic() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.trusted_ic)
  return trusted_ic_;
}
void DomainStruct::set_trusted_ic(::google::protobuf::uint32 value) {
  set_has_trusted_ic();
  trusted_ic_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.trusted_ic)
}

// optional bool cloaking = 5;
bool DomainStruct::has_cloaking() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DomainStruct::set_has_cloaking() {
  _has_bits_[0] |= 0x00000020u;
}
void DomainStruct::clear_has_cloaking() {
  _has_bits_[0] &= ~0x00000020u;
}
void DomainStruct::clear_cloaking() {
  cloaking_ = false;
  clear_has_cloaking();
}
bool DomainStruct::cloaking() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.cloaking)
  return cloaking_;
}
void DomainStruct::set_cloaking(bool value) {
  set_has_cloaking();
  cloaking_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.cloaking)
}

// optional uint32 nbrsq2 = 6;
bool DomainStruct::has_nbrsq2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DomainStruct::set_has_nbrsq2() {
  _has_bits_[0] |= 0x00000040u;
}
void DomainStruct::clear_has_nbrsq2() {
  _has_bits_[0] &= ~0x00000040u;
}
void DomainStruct::clear_nbrsq2() {
  nbrsq2_ = 0u;
  clear_has_nbrsq2();
}
::google::protobuf::uint32 DomainStruct::nbrsq2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.nbrsq2)
  return nbrsq2_;
}
void DomainStruct::set_nbrsq2(::google::protobuf::uint32 value) {
  set_has_nbrsq2();
  nbrsq2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.nbrsq2)
}

// optional .ru.mail.go.webbase.blobs.WOTInfo wot_info = 7;
bool DomainStruct::has_wot_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DomainStruct::set_has_wot_info() {
  _has_bits_[0] |= 0x00000004u;
}
void DomainStruct::clear_has_wot_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void DomainStruct::clear_wot_info() {
  if (wot_info_ != NULL) wot_info_->::ru::mail::go::webbase::blobs::WOTInfo::Clear();
  clear_has_wot_info();
}
const ::ru::mail::go::webbase::blobs::WOTInfo& DomainStruct::wot_info() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo* p = wot_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.wot_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo* DomainStruct::mutable_wot_info() {
  set_has_wot_info();
  if (wot_info_ == NULL) {
    wot_info_ = new ::ru::mail::go::webbase::blobs::WOTInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DomainStruct.wot_info)
  return wot_info_;
}
::ru::mail::go::webbase::blobs::WOTInfo* DomainStruct::release_wot_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DomainStruct.wot_info)
  clear_has_wot_info();
  ::ru::mail::go::webbase::blobs::WOTInfo* temp = wot_info_;
  wot_info_ = NULL;
  return temp;
}
void DomainStruct::set_allocated_wot_info(::ru::mail::go::webbase::blobs::WOTInfo* wot_info) {
  delete wot_info_;
  wot_info_ = wot_info;
  if (wot_info) {
    set_has_wot_info();
  } else {
    clear_has_wot_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DomainStruct.wot_info)
}

// repeated .gogo.storage.extra_info domain_extra_info = 8;
int DomainStruct::domain_extra_info_size() const {
  return domain_extra_info_.size();
}
void DomainStruct::clear_domain_extra_info() {
  domain_extra_info_.Clear();
}
const ::gogo::storage::extra_info& DomainStruct::domain_extra_info(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.domain_extra_info)
  return domain_extra_info_.Get(index);
}
::gogo::storage::extra_info* DomainStruct::mutable_domain_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DomainStruct.domain_extra_info)
  return domain_extra_info_.Mutable(index);
}
::gogo::storage::extra_info* DomainStruct::add_domain_extra_info() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DomainStruct.domain_extra_info)
  return domain_extra_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
DomainStruct::mutable_domain_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DomainStruct.domain_extra_info)
  return &domain_extra_info_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
DomainStruct::domain_extra_info() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DomainStruct.domain_extra_info)
  return domain_extra_info_;
}

// optional uint32 spam = 9;
bool DomainStruct::has_spam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DomainStruct::set_has_spam() {
  _has_bits_[0] |= 0x00000080u;
}
void DomainStruct::clear_has_spam() {
  _has_bits_[0] &= ~0x00000080u;
}
void DomainStruct::clear_spam() {
  spam_ = 0u;
  clear_has_spam();
}
::google::protobuf::uint32 DomainStruct::spam() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DomainStruct.spam)
  return spam_;
}
void DomainStruct::set_spam(::google::protobuf::uint32 value) {
  set_has_spam();
  spam_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DomainStruct.spam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageStruct_AdditionalProps::kPornProbFieldNumber;
const int ImageStruct_AdditionalProps::kPornProbV2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageStruct_AdditionalProps::ImageStruct_AdditionalProps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
}
ImageStruct_AdditionalProps::ImageStruct_AdditionalProps(const ImageStruct_AdditionalProps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&porn_prob_, &from.porn_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&porn_prob_v2_) -
    reinterpret_cast<char*>(&porn_prob_)) + sizeof(porn_prob_v2_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
}

void ImageStruct_AdditionalProps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&porn_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porn_prob_v2_) -
      reinterpret_cast<char*>(&porn_prob_)) + sizeof(porn_prob_v2_));
}

ImageStruct_AdditionalProps::~ImageStruct_AdditionalProps() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  SharedDtor();
}

void ImageStruct_AdditionalProps::SharedDtor() {
}

void ImageStruct_AdditionalProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageStruct_AdditionalProps::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageStruct_AdditionalProps& ImageStruct_AdditionalProps::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageStruct_AdditionalProps* ImageStruct_AdditionalProps::New(::google::protobuf::Arena* arena) const {
  ImageStruct_AdditionalProps* n = new ImageStruct_AdditionalProps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageStruct_AdditionalProps::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&porn_prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porn_prob_v2_) -
        reinterpret_cast<char*>(&porn_prob_)) + sizeof(porn_prob_v2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageStruct_AdditionalProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float porn_prob = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_porn_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_prob_v2 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_porn_prob_v2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_prob_v2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  return false;
#undef DO_
}

void ImageStruct_AdditionalProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float porn_prob = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->porn_prob(), output);
  }

  // optional float porn_prob_v2 = 23;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->porn_prob_v2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
}

::google::protobuf::uint8* ImageStruct_AdditionalProps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float porn_prob = 22;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->porn_prob(), target);
  }

  // optional float porn_prob_v2 = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->porn_prob_v2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  return target;
}

size_t ImageStruct_AdditionalProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float porn_prob = 22;
    if (has_porn_prob()) {
      total_size += 2 + 4;
    }

    // optional float porn_prob_v2 = 23;
    if (has_porn_prob_v2()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageStruct_AdditionalProps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStruct_AdditionalProps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageStruct_AdditionalProps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
    MergeFrom(*source);
  }
}

void ImageStruct_AdditionalProps::MergeFrom(const ImageStruct_AdditionalProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      porn_prob_ = from.porn_prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      porn_prob_v2_ = from.porn_prob_v2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageStruct_AdditionalProps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStruct_AdditionalProps::CopyFrom(const ImageStruct_AdditionalProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStruct_AdditionalProps::IsInitialized() const {
  return true;
}

void ImageStruct_AdditionalProps::Swap(ImageStruct_AdditionalProps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageStruct_AdditionalProps::InternalSwap(ImageStruct_AdditionalProps* other) {
  using std::swap;
  swap(porn_prob_, other->porn_prob_);
  swap(porn_prob_v2_, other->porn_prob_v2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageStruct_AdditionalProps::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageStruct_AdditionalProps

// optional float porn_prob = 22;
bool ImageStruct_AdditionalProps::has_porn_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageStruct_AdditionalProps::set_has_porn_prob() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageStruct_AdditionalProps::clear_has_porn_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageStruct_AdditionalProps::clear_porn_prob() {
  porn_prob_ = 0;
  clear_has_porn_prob();
}
float ImageStruct_AdditionalProps::porn_prob() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps.porn_prob)
  return porn_prob_;
}
void ImageStruct_AdditionalProps::set_porn_prob(float value) {
  set_has_porn_prob();
  porn_prob_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps.porn_prob)
}

// optional float porn_prob_v2 = 23;
bool ImageStruct_AdditionalProps::has_porn_prob_v2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageStruct_AdditionalProps::set_has_porn_prob_v2() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageStruct_AdditionalProps::clear_has_porn_prob_v2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageStruct_AdditionalProps::clear_porn_prob_v2() {
  porn_prob_v2_ = 0;
  clear_has_porn_prob_v2();
}
float ImageStruct_AdditionalProps::porn_prob_v2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps.porn_prob_v2)
  return porn_prob_v2_;
}
void ImageStruct_AdditionalProps::set_porn_prob_v2(float value) {
  set_has_porn_prob_v2();
  porn_prob_v2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps.porn_prob_v2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageStruct::kKeyUrlFieldNumber;
const int ImageStruct::kFullUrlFieldNumber;
const int ImageStruct::kThumbFieldNumber;
const int ImageStruct::kPropsFieldNumber;
const int ImageStruct::kBrokenFieldNumber;
const int ImageStruct::kImageExtraTextsFieldNumber;
const int ImageStruct::kPreviewDbFieldNumber;
const int ImageStruct::kVideoThumbFieldNumber;
const int ImageStruct::kYGVisitInfoFieldNumber;
const int ImageStruct::kAdditionalPropsFieldNumber;
const int ImageStruct::kCnnEmbeddingFieldNumber;
const int ImageStruct::kCnnSerpEmbeddingFieldNumber;
const int ImageStruct::kVitSerpEmbeddingFieldNumber;
const int ImageStruct::kRequiredForAssessorFieldNumber;
const int ImageStruct::kAwsProbabilityFieldNumber;
const int ImageStruct::kImgMatchEmbeddingFieldNumber;
const int ImageStruct::kPreviousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageStruct::ImageStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageStruct)
}
ImageStruct::ImageStruct(const ImageStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyurl()) {
    keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
  }
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullurl()) {
    fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from.has_thumb()) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.thumb_);
  } else {
    thumb_ = NULL;
  }
  if (from.has_props()) {
    props_ = new ::ru::mail::go::webbase::blobs::ImageProps(*from.props_);
  } else {
    props_ = NULL;
  }
  if (from.has_imageextratexts()) {
    imageextratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray(*from.imageextratexts_);
  } else {
    imageextratexts_ = NULL;
  }
  if (from.has_video_thumb()) {
    video_thumb_ = new ::ru::mail::go::webbase::parsing::img::VideoClip(*from.video_thumb_);
  } else {
    video_thumb_ = NULL;
  }
  if (from.has_ygvisitinfo()) {
    ygvisitinfo_ = new ::ru::mail::go::webbase::blobs::VisitInfo(*from.ygvisitinfo_);
  } else {
    ygvisitinfo_ = NULL;
  }
  if (from.has_additional_props()) {
    additional_props_ = new ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps(*from.additional_props_);
  } else {
    additional_props_ = NULL;
  }
  if (from.has_cnn_embedding()) {
    cnn_embedding_ = new ::qembedder::pb::Embedding(*from.cnn_embedding_);
  } else {
    cnn_embedding_ = NULL;
  }
  if (from.has_cnn_serp_embedding()) {
    cnn_serp_embedding_ = new ::qembedder::pb::Embedding(*from.cnn_serp_embedding_);
  } else {
    cnn_serp_embedding_ = NULL;
  }
  if (from.has_vit_serp_embedding()) {
    vit_serp_embedding_ = new ::qembedder::pb::Embedding(*from.vit_serp_embedding_);
  } else {
    vit_serp_embedding_ = NULL;
  }
  if (from.has_img_match_embedding()) {
    img_match_embedding_ = new ::qembedder::pb::Embedding(*from.img_match_embedding_);
  } else {
    img_match_embedding_ = NULL;
  }
  ::memcpy(&broken_, &from.broken_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_) -
    reinterpret_cast<char*>(&broken_)) + sizeof(previous_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageStruct)
}

void ImageStruct::SharedCtor() {
  _cached_size_ = 0;
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_) -
      reinterpret_cast<char*>(&thumb_)) + sizeof(previous_));
}

ImageStruct::~ImageStruct() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageStruct)
  SharedDtor();
}

void ImageStruct::SharedDtor() {
  keyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thumb_;
  if (this != internal_default_instance()) delete props_;
  if (this != internal_default_instance()) delete imageextratexts_;
  if (this != internal_default_instance()) delete video_thumb_;
  if (this != internal_default_instance()) delete ygvisitinfo_;
  if (this != internal_default_instance()) delete additional_props_;
  if (this != internal_default_instance()) delete cnn_embedding_;
  if (this != internal_default_instance()) delete cnn_serp_embedding_;
  if (this != internal_default_instance()) delete vit_serp_embedding_;
  if (this != internal_default_instance()) delete img_match_embedding_;
}

void ImageStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageStruct::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageStruct& ImageStruct::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageStruct* ImageStruct::New(::google::protobuf::Arena* arena) const {
  ImageStruct* n = new ImageStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keyurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(thumb_ != NULL);
      thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(props_ != NULL);
      props_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(imageextratexts_ != NULL);
      imageextratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(video_thumb_ != NULL);
      video_thumb_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ygvisitinfo_ != NULL);
      ygvisitinfo_->::ru::mail::go::webbase::blobs::VisitInfo::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(additional_props_ != NULL);
      additional_props_->::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps::Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cnn_embedding_ != NULL);
      cnn_embedding_->::qembedder::pb::Embedding::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(cnn_serp_embedding_ != NULL);
      cnn_serp_embedding_->::qembedder::pb::Embedding::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(vit_serp_embedding_ != NULL);
      vit_serp_embedding_->::qembedder::pb::Embedding::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(img_match_embedding_ != NULL);
      img_match_embedding_->::qembedder::pb::Embedding::Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&broken_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_for_assessor_) -
        reinterpret_cast<char*>(&broken_)) + sizeof(required_for_assessor_));
  }
  previous_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyurl().data(), static_cast<int>(this->keyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageStruct.keyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fullUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullurl().data(), static_cast<int>(this->fullurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageStruct.fullUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ImageProps props = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 broken = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_broken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageextratexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preview_db = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_preview_db();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_db_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.VisitInfo YGVisitInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ygvisitinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps additional_props = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_additional_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qembedder.pb.Embedding cnn_embedding = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cnn_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qembedder.pb.Embedding cnn_serp_embedding = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cnn_serp_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool required_for_assessor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_required_for_assessor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_for_assessor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qembedder.pb.Embedding vit_serp_embedding = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vit_serp_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float aws_probability = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_aws_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aws_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qembedder.pb.Embedding img_match_embedding = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_match_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool previous = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_previous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageStruct)
  return false;
#undef DO_
}

void ImageStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStruct.keyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyurl(), output);
  }

  // required string fullUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStruct.fullUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullurl(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->thumb_, output);
  }

  // required .ru.mail.go.webbase.blobs.ImageProps props = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->props_, output);
  }

  // optional uint32 broken = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->broken(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imageextratexts_, output);
  }

  // optional uint32 preview_db = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preview_db(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->video_thumb_, output);
  }

  // optional .ru.mail.go.webbase.blobs.VisitInfo YGVisitInfo = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ygvisitinfo_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps additional_props = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->additional_props_, output);
  }

  // optional .qembedder.pb.Embedding cnn_embedding = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->cnn_embedding_, output);
  }

  // optional .qembedder.pb.Embedding cnn_serp_embedding = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->cnn_serp_embedding_, output);
  }

  // optional bool required_for_assessor = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->required_for_assessor(), output);
  }

  // optional .qembedder.pb.Embedding vit_serp_embedding = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->vit_serp_embedding_, output);
  }

  // optional float aws_probability = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->aws_probability(), output);
  }

  // optional .qembedder.pb.Embedding img_match_embedding = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->img_match_embedding_, output);
  }

  // optional bool previous = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->previous(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageStruct)
}

::google::protobuf::uint8* ImageStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStruct.keyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyurl(), target);
  }

  // required string fullUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStruct.fullUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullurl(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->thumb_, deterministic, target);
  }

  // required .ru.mail.go.webbase.blobs.ImageProps props = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->props_, deterministic, target);
  }

  // optional uint32 broken = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->broken(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imageextratexts_, deterministic, target);
  }

  // optional uint32 preview_db = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preview_db(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->video_thumb_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.VisitInfo YGVisitInfo = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ygvisitinfo_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps additional_props = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->additional_props_, deterministic, target);
  }

  // optional .qembedder.pb.Embedding cnn_embedding = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->cnn_embedding_, deterministic, target);
  }

  // optional .qembedder.pb.Embedding cnn_serp_embedding = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->cnn_serp_embedding_, deterministic, target);
  }

  // optional bool required_for_assessor = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->required_for_assessor(), target);
  }

  // optional .qembedder.pb.Embedding vit_serp_embedding = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->vit_serp_embedding_, deterministic, target);
  }

  // optional float aws_probability = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->aws_probability(), target);
  }

  // optional .qembedder.pb.Embedding img_match_embedding = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->img_match_embedding_, deterministic, target);
  }

  // optional bool previous = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->previous(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageStruct)
  return target;
}

size_t ImageStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageStruct)
  size_t total_size = 0;

  if (has_keyurl()) {
    // required string keyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());
  }

  if (has_fullurl()) {
    // required string fullUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());
  }

  if (has_props()) {
    // required .ru.mail.go.webbase.blobs.ImageProps props = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->props_);
  }

  return total_size;
}
size_t ImageStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string keyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());

    // required string fullUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());

    // required .ru.mail.go.webbase.blobs.ImageProps props = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->props_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (has_thumb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 6;
    if (has_imageextratexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imageextratexts_);
    }

    // optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 8;
    if (has_video_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_thumb_);
    }

    // optional .ru.mail.go.webbase.blobs.VisitInfo YGVisitInfo = 9;
    if (has_ygvisitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ygvisitinfo_);
    }

    // optional .ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps additional_props = 10;
    if (has_additional_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->additional_props_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .qembedder.pb.Embedding cnn_embedding = 11;
    if (has_cnn_embedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cnn_embedding_);
    }

    // optional .qembedder.pb.Embedding cnn_serp_embedding = 12;
    if (has_cnn_serp_embedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cnn_serp_embedding_);
    }

    // optional .qembedder.pb.Embedding vit_serp_embedding = 14;
    if (has_vit_serp_embedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vit_serp_embedding_);
    }

    // optional .qembedder.pb.Embedding img_match_embedding = 16;
    if (has_img_match_embedding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->img_match_embedding_);
    }

    // optional uint32 broken = 5;
    if (has_broken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broken());
    }

    // optional uint32 preview_db = 7;
    if (has_preview_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_db());
    }

    // optional float aws_probability = 15;
    if (has_aws_probability()) {
      total_size += 1 + 4;
    }

    // optional bool required_for_assessor = 13;
    if (has_required_for_assessor()) {
      total_size += 1 + 1;
    }

  }
  // optional bool previous = 17;
  if (has_previous()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageStruct)
    MergeFrom(*source);
  }
}

void ImageStruct::MergeFrom(const ImageStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keyurl();
      keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fullurl();
      fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_thumb()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.thumb());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_props()->::ru::mail::go::webbase::blobs::ImageProps::MergeFrom(from.props());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_imageextratexts()->::ru::mail::go::webbase::blobs::ExtraTextArray::MergeFrom(from.imageextratexts());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_video_thumb()->::ru::mail::go::webbase::parsing::img::VideoClip::MergeFrom(from.video_thumb());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ygvisitinfo()->::ru::mail::go::webbase::blobs::VisitInfo::MergeFrom(from.ygvisitinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_additional_props()->::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps::MergeFrom(from.additional_props());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_cnn_embedding()->::qembedder::pb::Embedding::MergeFrom(from.cnn_embedding());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_cnn_serp_embedding()->::qembedder::pb::Embedding::MergeFrom(from.cnn_serp_embedding());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_vit_serp_embedding()->::qembedder::pb::Embedding::MergeFrom(from.vit_serp_embedding());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_img_match_embedding()->::qembedder::pb::Embedding::MergeFrom(from.img_match_embedding());
    }
    if (cached_has_bits & 0x00001000u) {
      broken_ = from.broken_;
    }
    if (cached_has_bits & 0x00002000u) {
      preview_db_ = from.preview_db_;
    }
    if (cached_has_bits & 0x00004000u) {
      aws_probability_ = from.aws_probability_;
    }
    if (cached_has_bits & 0x00008000u) {
      required_for_assessor_ = from.required_for_assessor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_previous(from.previous());
  }
}

void ImageStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStruct::CopyFrom(const ImageStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_thumb()) {
    if (!this->thumb_->IsInitialized()) return false;
  }
  if (has_props()) {
    if (!this->props_->IsInitialized()) return false;
  }
  if (has_imageextratexts()) {
    if (!this->imageextratexts_->IsInitialized()) return false;
  }
  if (has_video_thumb()) {
    if (!this->video_thumb_->IsInitialized()) return false;
  }
  if (has_ygvisitinfo()) {
    if (!this->ygvisitinfo_->IsInitialized()) return false;
  }
  if (has_cnn_embedding()) {
    if (!this->cnn_embedding_->IsInitialized()) return false;
  }
  if (has_cnn_serp_embedding()) {
    if (!this->cnn_serp_embedding_->IsInitialized()) return false;
  }
  if (has_vit_serp_embedding()) {
    if (!this->vit_serp_embedding_->IsInitialized()) return false;
  }
  if (has_img_match_embedding()) {
    if (!this->img_match_embedding_->IsInitialized()) return false;
  }
  return true;
}

void ImageStruct::Swap(ImageStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageStruct::InternalSwap(ImageStruct* other) {
  using std::swap;
  keyurl_.Swap(&other->keyurl_);
  fullurl_.Swap(&other->fullurl_);
  swap(thumb_, other->thumb_);
  swap(props_, other->props_);
  swap(imageextratexts_, other->imageextratexts_);
  swap(video_thumb_, other->video_thumb_);
  swap(ygvisitinfo_, other->ygvisitinfo_);
  swap(additional_props_, other->additional_props_);
  swap(cnn_embedding_, other->cnn_embedding_);
  swap(cnn_serp_embedding_, other->cnn_serp_embedding_);
  swap(vit_serp_embedding_, other->vit_serp_embedding_);
  swap(img_match_embedding_, other->img_match_embedding_);
  swap(broken_, other->broken_);
  swap(preview_db_, other->preview_db_);
  swap(aws_probability_, other->aws_probability_);
  swap(required_for_assessor_, other->required_for_assessor_);
  swap(previous_, other->previous_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageStruct::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageStruct

// required string keyUrl = 1;
bool ImageStruct::has_keyurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageStruct::set_has_keyurl() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageStruct::clear_has_keyurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageStruct::clear_keyurl() {
  keyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyurl();
}
const ::std::string& ImageStruct::keyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
  return keyurl_.GetNoArena();
}
void ImageStruct::set_keyurl(const ::std::string& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
}
#if LANG_CXX11
void ImageStruct::set_keyurl(::std::string&& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
}
#endif
void ImageStruct::set_keyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
}
void ImageStruct::set_keyurl(const char* value, size_t size) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
}
::std::string* ImageStruct::mutable_keyurl() {
  set_has_keyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
  return keyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStruct::release_keyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
  clear_has_keyurl();
  return keyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStruct::set_allocated_keyurl(::std::string* keyurl) {
  if (keyurl != NULL) {
    set_has_keyurl();
  } else {
    clear_has_keyurl();
  }
  keyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.keyUrl)
}

// required string fullUrl = 2;
bool ImageStruct::has_fullurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageStruct::set_has_fullurl() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageStruct::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageStruct::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
const ::std::string& ImageStruct::fullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
  return fullurl_.GetNoArena();
}
void ImageStruct::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
}
#if LANG_CXX11
void ImageStruct::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
}
#endif
void ImageStruct::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
}
void ImageStruct::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
}
::std::string* ImageStruct::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStruct::release_fullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStruct::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.fullUrl)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
bool ImageStruct::has_thumb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageStruct::set_has_thumb() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageStruct::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageStruct::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ImageStruct::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* ImageStruct::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.thumb)
  return thumb_;
}
::ru::mail::go::webbase::parsing::img::Thumb* ImageStruct::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.thumb)
}

// required .ru.mail.go.webbase.blobs.ImageProps props = 4;
bool ImageStruct::has_props() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageStruct::set_has_props() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageStruct::clear_has_props() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageStruct::clear_props() {
  if (props_ != NULL) props_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
  clear_has_props();
}
const ::ru::mail::go::webbase::blobs::ImageProps& ImageStruct::props() const {
  const ::ru::mail::go::webbase::blobs::ImageProps* p = props_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.props)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageProps*>(
      &::ru::mail::go::webbase::blobs::_ImageProps_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageProps* ImageStruct::mutable_props() {
  set_has_props();
  if (props_ == NULL) {
    props_ = new ::ru::mail::go::webbase::blobs::ImageProps;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.props)
  return props_;
}
::ru::mail::go::webbase::blobs::ImageProps* ImageStruct::release_props() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.props)
  clear_has_props();
  ::ru::mail::go::webbase::blobs::ImageProps* temp = props_;
  props_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_props(::ru::mail::go::webbase::blobs::ImageProps* props) {
  delete props_;
  props_ = props;
  if (props) {
    set_has_props();
  } else {
    clear_has_props();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.props)
}

// optional uint32 broken = 5;
bool ImageStruct::has_broken() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImageStruct::set_has_broken() {
  _has_bits_[0] |= 0x00001000u;
}
void ImageStruct::clear_has_broken() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImageStruct::clear_broken() {
  broken_ = 0u;
  clear_has_broken();
}
::google::protobuf::uint32 ImageStruct::broken() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.broken)
  return broken_;
}
void ImageStruct::set_broken(::google::protobuf::uint32 value) {
  set_has_broken();
  broken_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.broken)
}

// optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 6;
bool ImageStruct::has_imageextratexts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageStruct::set_has_imageextratexts() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageStruct::clear_has_imageextratexts() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageStruct::clear_imageextratexts() {
  if (imageextratexts_ != NULL) imageextratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
  clear_has_imageextratexts();
}
const ::ru::mail::go::webbase::blobs::ExtraTextArray& ImageStruct::imageextratexts() const {
  const ::ru::mail::go::webbase::blobs::ExtraTextArray* p = imageextratexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.imageExtraTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      &::ru::mail::go::webbase::blobs::_ExtraTextArray_default_instance_);
}
::ru::mail::go::webbase::blobs::ExtraTextArray* ImageStruct::mutable_imageextratexts() {
  set_has_imageextratexts();
  if (imageextratexts_ == NULL) {
    imageextratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.imageExtraTexts)
  return imageextratexts_;
}
::ru::mail::go::webbase::blobs::ExtraTextArray* ImageStruct::release_imageextratexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.imageExtraTexts)
  clear_has_imageextratexts();
  ::ru::mail::go::webbase::blobs::ExtraTextArray* temp = imageextratexts_;
  imageextratexts_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_imageextratexts(::ru::mail::go::webbase::blobs::ExtraTextArray* imageextratexts) {
  delete imageextratexts_;
  imageextratexts_ = imageextratexts;
  if (imageextratexts) {
    set_has_imageextratexts();
  } else {
    clear_has_imageextratexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.imageExtraTexts)
}

// optional uint32 preview_db = 7;
bool ImageStruct::has_preview_db() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImageStruct::set_has_preview_db() {
  _has_bits_[0] |= 0x00002000u;
}
void ImageStruct::clear_has_preview_db() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImageStruct::clear_preview_db() {
  preview_db_ = 0u;
  clear_has_preview_db();
}
::google::protobuf::uint32 ImageStruct::preview_db() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.preview_db)
  return preview_db_;
}
void ImageStruct::set_preview_db(::google::protobuf::uint32 value) {
  set_has_preview_db();
  preview_db_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.preview_db)
}

// optional .ru.mail.go.webbase.parsing.img.VideoClip video_thumb = 8;
bool ImageStruct::has_video_thumb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageStruct::set_has_video_thumb() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageStruct::clear_has_video_thumb() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageStruct::clear_video_thumb() {
  if (video_thumb_ != NULL) video_thumb_->::ru::mail::go::webbase::parsing::img::VideoClip::Clear();
  clear_has_video_thumb();
}
const ::ru::mail::go::webbase::parsing::img::VideoClip& ImageStruct::video_thumb() const {
  const ::ru::mail::go::webbase::parsing::img::VideoClip* p = video_thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.video_thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::VideoClip*>(
      &::ru::mail::go::webbase::parsing::img::_VideoClip_default_instance_);
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImageStruct::mutable_video_thumb() {
  set_has_video_thumb();
  if (video_thumb_ == NULL) {
    video_thumb_ = new ::ru::mail::go::webbase::parsing::img::VideoClip;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.video_thumb)
  return video_thumb_;
}
::ru::mail::go::webbase::parsing::img::VideoClip* ImageStruct::release_video_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.video_thumb)
  clear_has_video_thumb();
  ::ru::mail::go::webbase::parsing::img::VideoClip* temp = video_thumb_;
  video_thumb_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_video_thumb(::ru::mail::go::webbase::parsing::img::VideoClip* video_thumb) {
  delete video_thumb_;
  video_thumb_ = video_thumb;
  if (video_thumb) {
    set_has_video_thumb();
  } else {
    clear_has_video_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.video_thumb)
}

// optional .ru.mail.go.webbase.blobs.VisitInfo YGVisitInfo = 9;
bool ImageStruct::has_ygvisitinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageStruct::set_has_ygvisitinfo() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageStruct::clear_has_ygvisitinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageStruct::clear_ygvisitinfo() {
  if (ygvisitinfo_ != NULL) ygvisitinfo_->::ru::mail::go::webbase::blobs::VisitInfo::Clear();
  clear_has_ygvisitinfo();
}
const ::ru::mail::go::webbase::blobs::VisitInfo& ImageStruct::ygvisitinfo() const {
  const ::ru::mail::go::webbase::blobs::VisitInfo* p = ygvisitinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.YGVisitInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::VisitInfo*>(
      &::ru::mail::go::webbase::blobs::_VisitInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::VisitInfo* ImageStruct::mutable_ygvisitinfo() {
  set_has_ygvisitinfo();
  if (ygvisitinfo_ == NULL) {
    ygvisitinfo_ = new ::ru::mail::go::webbase::blobs::VisitInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.YGVisitInfo)
  return ygvisitinfo_;
}
::ru::mail::go::webbase::blobs::VisitInfo* ImageStruct::release_ygvisitinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.YGVisitInfo)
  clear_has_ygvisitinfo();
  ::ru::mail::go::webbase::blobs::VisitInfo* temp = ygvisitinfo_;
  ygvisitinfo_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_ygvisitinfo(::ru::mail::go::webbase::blobs::VisitInfo* ygvisitinfo) {
  delete ygvisitinfo_;
  ygvisitinfo_ = ygvisitinfo;
  if (ygvisitinfo) {
    set_has_ygvisitinfo();
  } else {
    clear_has_ygvisitinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.YGVisitInfo)
}

// optional .ru.mail.go.webbase.blobs.ImageStruct.AdditionalProps additional_props = 10;
bool ImageStruct::has_additional_props() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageStruct::set_has_additional_props() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageStruct::clear_has_additional_props() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageStruct::clear_additional_props() {
  if (additional_props_ != NULL) additional_props_->::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps::Clear();
  clear_has_additional_props();
}
const ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps& ImageStruct::additional_props() const {
  const ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps* p = additional_props_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.additional_props)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps*>(
      &::ru::mail::go::webbase::blobs::_ImageStruct_AdditionalProps_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps* ImageStruct::mutable_additional_props() {
  set_has_additional_props();
  if (additional_props_ == NULL) {
    additional_props_ = new ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.additional_props)
  return additional_props_;
}
::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps* ImageStruct::release_additional_props() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.additional_props)
  clear_has_additional_props();
  ::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps* temp = additional_props_;
  additional_props_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_additional_props(::ru::mail::go::webbase::blobs::ImageStruct_AdditionalProps* additional_props) {
  delete additional_props_;
  additional_props_ = additional_props;
  if (additional_props) {
    set_has_additional_props();
  } else {
    clear_has_additional_props();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.additional_props)
}

// optional .qembedder.pb.Embedding cnn_embedding = 11;
bool ImageStruct::has_cnn_embedding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageStruct::set_has_cnn_embedding() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageStruct::clear_has_cnn_embedding() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageStruct::clear_cnn_embedding() {
  if (cnn_embedding_ != NULL) cnn_embedding_->::qembedder::pb::Embedding::Clear();
  clear_has_cnn_embedding();
}
const ::qembedder::pb::Embedding& ImageStruct::cnn_embedding() const {
  const ::qembedder::pb::Embedding* p = cnn_embedding_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.cnn_embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* ImageStruct::mutable_cnn_embedding() {
  set_has_cnn_embedding();
  if (cnn_embedding_ == NULL) {
    cnn_embedding_ = new ::qembedder::pb::Embedding;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.cnn_embedding)
  return cnn_embedding_;
}
::qembedder::pb::Embedding* ImageStruct::release_cnn_embedding() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.cnn_embedding)
  clear_has_cnn_embedding();
  ::qembedder::pb::Embedding* temp = cnn_embedding_;
  cnn_embedding_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_cnn_embedding(::qembedder::pb::Embedding* cnn_embedding) {
  delete cnn_embedding_;
  cnn_embedding_ = cnn_embedding;
  if (cnn_embedding) {
    set_has_cnn_embedding();
  } else {
    clear_has_cnn_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.cnn_embedding)
}

// optional .qembedder.pb.Embedding cnn_serp_embedding = 12;
bool ImageStruct::has_cnn_serp_embedding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageStruct::set_has_cnn_serp_embedding() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageStruct::clear_has_cnn_serp_embedding() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageStruct::clear_cnn_serp_embedding() {
  if (cnn_serp_embedding_ != NULL) cnn_serp_embedding_->::qembedder::pb::Embedding::Clear();
  clear_has_cnn_serp_embedding();
}
const ::qembedder::pb::Embedding& ImageStruct::cnn_serp_embedding() const {
  const ::qembedder::pb::Embedding* p = cnn_serp_embedding_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.cnn_serp_embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* ImageStruct::mutable_cnn_serp_embedding() {
  set_has_cnn_serp_embedding();
  if (cnn_serp_embedding_ == NULL) {
    cnn_serp_embedding_ = new ::qembedder::pb::Embedding;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.cnn_serp_embedding)
  return cnn_serp_embedding_;
}
::qembedder::pb::Embedding* ImageStruct::release_cnn_serp_embedding() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.cnn_serp_embedding)
  clear_has_cnn_serp_embedding();
  ::qembedder::pb::Embedding* temp = cnn_serp_embedding_;
  cnn_serp_embedding_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_cnn_serp_embedding(::qembedder::pb::Embedding* cnn_serp_embedding) {
  delete cnn_serp_embedding_;
  cnn_serp_embedding_ = cnn_serp_embedding;
  if (cnn_serp_embedding) {
    set_has_cnn_serp_embedding();
  } else {
    clear_has_cnn_serp_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.cnn_serp_embedding)
}

// optional .qembedder.pb.Embedding vit_serp_embedding = 14;
bool ImageStruct::has_vit_serp_embedding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageStruct::set_has_vit_serp_embedding() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageStruct::clear_has_vit_serp_embedding() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageStruct::clear_vit_serp_embedding() {
  if (vit_serp_embedding_ != NULL) vit_serp_embedding_->::qembedder::pb::Embedding::Clear();
  clear_has_vit_serp_embedding();
}
const ::qembedder::pb::Embedding& ImageStruct::vit_serp_embedding() const {
  const ::qembedder::pb::Embedding* p = vit_serp_embedding_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.vit_serp_embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* ImageStruct::mutable_vit_serp_embedding() {
  set_has_vit_serp_embedding();
  if (vit_serp_embedding_ == NULL) {
    vit_serp_embedding_ = new ::qembedder::pb::Embedding;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.vit_serp_embedding)
  return vit_serp_embedding_;
}
::qembedder::pb::Embedding* ImageStruct::release_vit_serp_embedding() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.vit_serp_embedding)
  clear_has_vit_serp_embedding();
  ::qembedder::pb::Embedding* temp = vit_serp_embedding_;
  vit_serp_embedding_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_vit_serp_embedding(::qembedder::pb::Embedding* vit_serp_embedding) {
  delete vit_serp_embedding_;
  vit_serp_embedding_ = vit_serp_embedding;
  if (vit_serp_embedding) {
    set_has_vit_serp_embedding();
  } else {
    clear_has_vit_serp_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.vit_serp_embedding)
}

// optional bool required_for_assessor = 13;
bool ImageStruct::has_required_for_assessor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImageStruct::set_has_required_for_assessor() {
  _has_bits_[0] |= 0x00008000u;
}
void ImageStruct::clear_has_required_for_assessor() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImageStruct::clear_required_for_assessor() {
  required_for_assessor_ = false;
  clear_has_required_for_assessor();
}
bool ImageStruct::required_for_assessor() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.required_for_assessor)
  return required_for_assessor_;
}
void ImageStruct::set_required_for_assessor(bool value) {
  set_has_required_for_assessor();
  required_for_assessor_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.required_for_assessor)
}

// optional float aws_probability = 15;
bool ImageStruct::has_aws_probability() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImageStruct::set_has_aws_probability() {
  _has_bits_[0] |= 0x00004000u;
}
void ImageStruct::clear_has_aws_probability() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImageStruct::clear_aws_probability() {
  aws_probability_ = 0;
  clear_has_aws_probability();
}
float ImageStruct::aws_probability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.aws_probability)
  return aws_probability_;
}
void ImageStruct::set_aws_probability(float value) {
  set_has_aws_probability();
  aws_probability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.aws_probability)
}

// optional .qembedder.pb.Embedding img_match_embedding = 16;
bool ImageStruct::has_img_match_embedding() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageStruct::set_has_img_match_embedding() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageStruct::clear_has_img_match_embedding() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageStruct::clear_img_match_embedding() {
  if (img_match_embedding_ != NULL) img_match_embedding_->::qembedder::pb::Embedding::Clear();
  clear_has_img_match_embedding();
}
const ::qembedder::pb::Embedding& ImageStruct::img_match_embedding() const {
  const ::qembedder::pb::Embedding* p = img_match_embedding_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.img_match_embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* ImageStruct::mutable_img_match_embedding() {
  set_has_img_match_embedding();
  if (img_match_embedding_ == NULL) {
    img_match_embedding_ = new ::qembedder::pb::Embedding;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStruct.img_match_embedding)
  return img_match_embedding_;
}
::qembedder::pb::Embedding* ImageStruct::release_img_match_embedding() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStruct.img_match_embedding)
  clear_has_img_match_embedding();
  ::qembedder::pb::Embedding* temp = img_match_embedding_;
  img_match_embedding_ = NULL;
  return temp;
}
void ImageStruct::set_allocated_img_match_embedding(::qembedder::pb::Embedding* img_match_embedding) {
  delete img_match_embedding_;
  img_match_embedding_ = img_match_embedding;
  if (img_match_embedding) {
    set_has_img_match_embedding();
  } else {
    clear_has_img_match_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStruct.img_match_embedding)
}

// optional bool previous = 17;
bool ImageStruct::has_previous() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImageStruct::set_has_previous() {
  _has_bits_[0] |= 0x00010000u;
}
void ImageStruct::clear_has_previous() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImageStruct::clear_previous() {
  previous_ = false;
  clear_has_previous();
}
bool ImageStruct::previous() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStruct.previous)
  return previous_;
}
void ImageStruct::set_previous(bool value) {
  set_has_previous();
  previous_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStruct.previous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PageStruct::kKeyUrlFieldNumber;
const int PageStruct::kFullUrlFieldNumber;
const int PageStruct::kPageFieldNumber;
const int PageStruct::kExtraTextsFieldNumber;
const int PageStruct::kImageExtraTextsFieldNumber;
const int PageStruct::kPageExtraInfoFieldNumber;
const int PageStruct::kSpamFieldNumber;
const int PageStruct::kLimiterRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PageStruct::PageStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.PageStruct)
}
PageStruct::PageStruct(const PageStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      page_extra_info_(from.page_extra_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyurl()) {
    keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
  }
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fullurl()) {
    fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from.has_page()) {
    page_ = new ::ru::mail::go::webbase::blobs::HtmlPage(*from.page_);
  } else {
    page_ = NULL;
  }
  if (from.has_extratexts()) {
    extratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray(*from.extratexts_);
  } else {
    extratexts_ = NULL;
  }
  if (from.has_imageextratexts()) {
    imageextratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray(*from.imageextratexts_);
  } else {
    imageextratexts_ = NULL;
  }
  ::memcpy(&spam_, &from.spam_,
    static_cast<size_t>(reinterpret_cast<char*>(&limiterrank_) -
    reinterpret_cast<char*>(&spam_)) + sizeof(limiterrank_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.PageStruct)
}

void PageStruct::SharedCtor() {
  _cached_size_ = 0;
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limiterrank_) -
      reinterpret_cast<char*>(&page_)) + sizeof(limiterrank_));
}

PageStruct::~PageStruct() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.PageStruct)
  SharedDtor();
}

void PageStruct::SharedDtor() {
  keyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete page_;
  if (this != internal_default_instance()) delete extratexts_;
  if (this != internal_default_instance()) delete imageextratexts_;
}

void PageStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PageStruct::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PageStruct& PageStruct::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

PageStruct* PageStruct::New(::google::protobuf::Arena* arena) const {
  PageStruct* n = new PageStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PageStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.PageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_extra_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keyurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fullurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(page_ != NULL);
      page_->::ru::mail::go::webbase::blobs::HtmlPage::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(extratexts_ != NULL);
      extratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(imageextratexts_ != NULL);
      imageextratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&spam_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limiterrank_) -
        reinterpret_cast<char*>(&spam_)) + sizeof(limiterrank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PageStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.PageStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyurl().data(), static_cast<int>(this->keyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PageStruct.keyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fullUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fullurl().data(), static_cast<int>(this->fullurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.PageStruct.fullUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extratexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageextratexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.extra_info page_extra_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_spam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float limiterRank = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_limiterrank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limiterrank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.PageStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.PageStruct)
  return false;
#undef DO_
}

void PageStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.PageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PageStruct.keyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyurl(), output);
  }

  // required string fullUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PageStruct.fullUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullurl(), output);
  }

  // required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->page_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->extratexts_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->imageextratexts_, output);
  }

  // repeated .gogo.storage.extra_info page_extra_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_extra_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->page_extra_info(static_cast<int>(i)), output);
  }

  // optional uint32 spam = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->spam(), output);
  }

  // required float limiterRank = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->limiterrank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.PageStruct)
}

::google::protobuf::uint8* PageStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.PageStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PageStruct.keyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyurl(), target);
  }

  // required string fullUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fullurl().data(), static_cast<int>(this->fullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.PageStruct.fullUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullurl(), target);
  }

  // required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->page_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->extratexts_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->imageextratexts_, deterministic, target);
  }

  // repeated .gogo.storage.extra_info page_extra_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_extra_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->page_extra_info(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 spam = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->spam(), target);
  }

  // required float limiterRank = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->limiterrank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.PageStruct)
  return target;
}

size_t PageStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.PageStruct)
  size_t total_size = 0;

  if (has_keyurl()) {
    // required string keyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());
  }

  if (has_fullurl()) {
    // required string fullUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());
  }

  if (has_page()) {
    // required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);
  }

  if (has_limiterrank()) {
    // required float limiterRank = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PageStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.PageStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000047) ^ 0x00000047) == 0) {  // All required fields are present.
    // required string keyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());

    // required string fullUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullurl());

    // required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);

    // required float limiterRank = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.storage.extra_info page_extra_info = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->page_extra_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_extra_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 4;
    if (has_extratexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extratexts_);
    }

    // optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 5;
    if (has_imageextratexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imageextratexts_);
    }

    // optional uint32 spam = 7;
    if (has_spam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spam());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.PageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const PageStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PageStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.PageStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.PageStruct)
    MergeFrom(*source);
  }
}

void PageStruct::MergeFrom(const PageStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.PageStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_extra_info_.MergeFrom(from.page_extra_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keyurl();
      keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fullurl();
      fullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_page()->::ru::mail::go::webbase::blobs::HtmlPage::MergeFrom(from.page());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_extratexts()->::ru::mail::go::webbase::blobs::ExtraTextArray::MergeFrom(from.extratexts());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_imageextratexts()->::ru::mail::go::webbase::blobs::ExtraTextArray::MergeFrom(from.imageextratexts());
    }
    if (cached_has_bits & 0x00000020u) {
      spam_ = from.spam_;
    }
    if (cached_has_bits & 0x00000040u) {
      limiterrank_ = from.limiterrank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PageStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.PageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageStruct::CopyFrom(const PageStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.PageStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->page_extra_info())) return false;
  if (has_page()) {
    if (!this->page_->IsInitialized()) return false;
  }
  if (has_extratexts()) {
    if (!this->extratexts_->IsInitialized()) return false;
  }
  if (has_imageextratexts()) {
    if (!this->imageextratexts_->IsInitialized()) return false;
  }
  return true;
}

void PageStruct::Swap(PageStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PageStruct::InternalSwap(PageStruct* other) {
  using std::swap;
  page_extra_info_.InternalSwap(&other->page_extra_info_);
  keyurl_.Swap(&other->keyurl_);
  fullurl_.Swap(&other->fullurl_);
  swap(page_, other->page_);
  swap(extratexts_, other->extratexts_);
  swap(imageextratexts_, other->imageextratexts_);
  swap(spam_, other->spam_);
  swap(limiterrank_, other->limiterrank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PageStruct::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PageStruct

// required string keyUrl = 1;
bool PageStruct::has_keyurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PageStruct::set_has_keyurl() {
  _has_bits_[0] |= 0x00000001u;
}
void PageStruct::clear_has_keyurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void PageStruct::clear_keyurl() {
  keyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyurl();
}
const ::std::string& PageStruct::keyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
  return keyurl_.GetNoArena();
}
void PageStruct::set_keyurl(const ::std::string& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
}
#if LANG_CXX11
void PageStruct::set_keyurl(::std::string&& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
}
#endif
void PageStruct::set_keyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
}
void PageStruct::set_keyurl(const char* value, size_t size) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
}
::std::string* PageStruct::mutable_keyurl() {
  set_has_keyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
  return keyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageStruct::release_keyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
  clear_has_keyurl();
  return keyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageStruct::set_allocated_keyurl(::std::string* keyurl) {
  if (keyurl != NULL) {
    set_has_keyurl();
  } else {
    clear_has_keyurl();
  }
  keyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PageStruct.keyUrl)
}

// required string fullUrl = 2;
bool PageStruct::has_fullurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PageStruct::set_has_fullurl() {
  _has_bits_[0] |= 0x00000002u;
}
void PageStruct::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void PageStruct::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
const ::std::string& PageStruct::fullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
  return fullurl_.GetNoArena();
}
void PageStruct::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
}
#if LANG_CXX11
void PageStruct::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
}
#endif
void PageStruct::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
}
void PageStruct::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
}
::std::string* PageStruct::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PageStruct::release_fullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PageStruct::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PageStruct.fullUrl)
}

// required .ru.mail.go.webbase.blobs.HtmlPage page = 3;
bool PageStruct::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PageStruct::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
void PageStruct::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void PageStruct::clear_page() {
  if (page_ != NULL) page_->::ru::mail::go::webbase::blobs::HtmlPage::Clear();
  clear_has_page();
}
const ::ru::mail::go::webbase::blobs::HtmlPage& PageStruct::page() const {
  const ::ru::mail::go::webbase::blobs::HtmlPage* p = page_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.page)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::HtmlPage*>(
      &::ru::mail::go::webbase::blobs::_HtmlPage_default_instance_);
}
::ru::mail::go::webbase::blobs::HtmlPage* PageStruct::mutable_page() {
  set_has_page();
  if (page_ == NULL) {
    page_ = new ::ru::mail::go::webbase::blobs::HtmlPage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.page)
  return page_;
}
::ru::mail::go::webbase::blobs::HtmlPage* PageStruct::release_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PageStruct.page)
  clear_has_page();
  ::ru::mail::go::webbase::blobs::HtmlPage* temp = page_;
  page_ = NULL;
  return temp;
}
void PageStruct::set_allocated_page(::ru::mail::go::webbase::blobs::HtmlPage* page) {
  delete page_;
  page_ = page;
  if (page) {
    set_has_page();
  } else {
    clear_has_page();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PageStruct.page)
}

// optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 4;
bool PageStruct::has_extratexts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PageStruct::set_has_extratexts() {
  _has_bits_[0] |= 0x00000008u;
}
void PageStruct::clear_has_extratexts() {
  _has_bits_[0] &= ~0x00000008u;
}
void PageStruct::clear_extratexts() {
  if (extratexts_ != NULL) extratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
  clear_has_extratexts();
}
const ::ru::mail::go::webbase::blobs::ExtraTextArray& PageStruct::extratexts() const {
  const ::ru::mail::go::webbase::blobs::ExtraTextArray* p = extratexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.extraTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      &::ru::mail::go::webbase::blobs::_ExtraTextArray_default_instance_);
}
::ru::mail::go::webbase::blobs::ExtraTextArray* PageStruct::mutable_extratexts() {
  set_has_extratexts();
  if (extratexts_ == NULL) {
    extratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.extraTexts)
  return extratexts_;
}
::ru::mail::go::webbase::blobs::ExtraTextArray* PageStruct::release_extratexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PageStruct.extraTexts)
  clear_has_extratexts();
  ::ru::mail::go::webbase::blobs::ExtraTextArray* temp = extratexts_;
  extratexts_ = NULL;
  return temp;
}
void PageStruct::set_allocated_extratexts(::ru::mail::go::webbase::blobs::ExtraTextArray* extratexts) {
  delete extratexts_;
  extratexts_ = extratexts;
  if (extratexts) {
    set_has_extratexts();
  } else {
    clear_has_extratexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PageStruct.extraTexts)
}

// optional .ru.mail.go.webbase.blobs.ExtraTextArray imageExtraTexts = 5;
bool PageStruct::has_imageextratexts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PageStruct::set_has_imageextratexts() {
  _has_bits_[0] |= 0x00000010u;
}
void PageStruct::clear_has_imageextratexts() {
  _has_bits_[0] &= ~0x00000010u;
}
void PageStruct::clear_imageextratexts() {
  if (imageextratexts_ != NULL) imageextratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
  clear_has_imageextratexts();
}
const ::ru::mail::go::webbase::blobs::ExtraTextArray& PageStruct::imageextratexts() const {
  const ::ru::mail::go::webbase::blobs::ExtraTextArray* p = imageextratexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.imageExtraTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      &::ru::mail::go::webbase::blobs::_ExtraTextArray_default_instance_);
}
::ru::mail::go::webbase::blobs::ExtraTextArray* PageStruct::mutable_imageextratexts() {
  set_has_imageextratexts();
  if (imageextratexts_ == NULL) {
    imageextratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.imageExtraTexts)
  return imageextratexts_;
}
::ru::mail::go::webbase::blobs::ExtraTextArray* PageStruct::release_imageextratexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.PageStruct.imageExtraTexts)
  clear_has_imageextratexts();
  ::ru::mail::go::webbase::blobs::ExtraTextArray* temp = imageextratexts_;
  imageextratexts_ = NULL;
  return temp;
}
void PageStruct::set_allocated_imageextratexts(::ru::mail::go::webbase::blobs::ExtraTextArray* imageextratexts) {
  delete imageextratexts_;
  imageextratexts_ = imageextratexts;
  if (imageextratexts) {
    set_has_imageextratexts();
  } else {
    clear_has_imageextratexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.PageStruct.imageExtraTexts)
}

// repeated .gogo.storage.extra_info page_extra_info = 6;
int PageStruct::page_extra_info_size() const {
  return page_extra_info_.size();
}
void PageStruct::clear_page_extra_info() {
  page_extra_info_.Clear();
}
const ::gogo::storage::extra_info& PageStruct::page_extra_info(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.page_extra_info)
  return page_extra_info_.Get(index);
}
::gogo::storage::extra_info* PageStruct::mutable_page_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.PageStruct.page_extra_info)
  return page_extra_info_.Mutable(index);
}
::gogo::storage::extra_info* PageStruct::add_page_extra_info() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.PageStruct.page_extra_info)
  return page_extra_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
PageStruct::mutable_page_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.PageStruct.page_extra_info)
  return &page_extra_info_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
PageStruct::page_extra_info() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.PageStruct.page_extra_info)
  return page_extra_info_;
}

// optional uint32 spam = 7;
bool PageStruct::has_spam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PageStruct::set_has_spam() {
  _has_bits_[0] |= 0x00000020u;
}
void PageStruct::clear_has_spam() {
  _has_bits_[0] &= ~0x00000020u;
}
void PageStruct::clear_spam() {
  spam_ = 0u;
  clear_has_spam();
}
::google::protobuf::uint32 PageStruct::spam() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.spam)
  return spam_;
}
void PageStruct::set_spam(::google::protobuf::uint32 value) {
  set_has_spam();
  spam_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PageStruct.spam)
}

// required float limiterRank = 8;
bool PageStruct::has_limiterrank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PageStruct::set_has_limiterrank() {
  _has_bits_[0] |= 0x00000040u;
}
void PageStruct::clear_has_limiterrank() {
  _has_bits_[0] &= ~0x00000040u;
}
void PageStruct::clear_limiterrank() {
  limiterrank_ = 0;
  clear_has_limiterrank();
}
float PageStruct::limiterrank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.PageStruct.limiterRank)
  return limiterrank_;
}
void PageStruct::set_limiterrank(float value) {
  set_has_limiterrank();
  limiterrank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.PageStruct.limiterRank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryStruct::kQueryFieldNumber;
const int QueryStruct::kKeyUrlFieldNumber;
const int QueryStruct::kCtrFieldNumber;
const int QueryStruct::kImpsFieldNumber;
const int QueryStruct::kGyimpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryStruct::QueryStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QueryStruct)
}
QueryStruct::QueryStruct(const QueryStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyurl()) {
    keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
  }
  ::memcpy(&ctr_, &from.ctr_,
    static_cast<size_t>(reinterpret_cast<char*>(&gyimps_) -
    reinterpret_cast<char*>(&ctr_)) + sizeof(gyimps_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QueryStruct)
}

void QueryStruct::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyimps_) -
      reinterpret_cast<char*>(&ctr_)) + sizeof(gyimps_));
}

QueryStruct::~QueryStruct() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QueryStruct)
  SharedDtor();
}

void QueryStruct::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStruct::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryStruct& QueryStruct::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryStruct* QueryStruct::New(::google::protobuf::Arena* arena) const {
  QueryStruct* n = new QueryStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QueryStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!keyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keyurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&ctr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gyimps_) -
        reinterpret_cast<char*>(&ctr_)) + sizeof(gyimps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QueryStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.QueryStruct.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string keyUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyurl().data(), static_cast<int>(this->keyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.QueryStruct.keyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ctr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ctr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ctr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 imps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_imps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 gyimps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gyimps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gyimps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QueryStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QueryStruct)
  return false;
#undef DO_
}

void QueryStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QueryStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryStruct.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required string keyUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryStruct.keyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keyurl(), output);
  }

  // required double ctr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ctr(), output);
  }

  // required uint32 imps = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imps(), output);
  }

  // required uint32 gyimps = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gyimps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QueryStruct)
}

::google::protobuf::uint8* QueryStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QueryStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryStruct.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required string keyUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyurl().data(), static_cast<int>(this->keyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.QueryStruct.keyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keyurl(), target);
  }

  // required double ctr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ctr(), target);
  }

  // required uint32 imps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imps(), target);
  }

  // required uint32 gyimps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gyimps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QueryStruct)
  return target;
}

size_t QueryStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.QueryStruct)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_keyurl()) {
    // required string keyUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());
  }

  if (has_ctr()) {
    // required double ctr = 3;
    total_size += 1 + 8;
  }

  if (has_imps()) {
    // required uint32 imps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imps());
  }

  if (has_gyimps()) {
    // required uint32 gyimps = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gyimps());
  }

  return total_size;
}
size_t QueryStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QueryStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required string keyUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyurl());

    // required double ctr = 3;
    total_size += 1 + 8;

    // required uint32 imps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imps());

    // required uint32 gyimps = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gyimps());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QueryStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QueryStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QueryStruct)
    MergeFrom(*source);
  }
}

void QueryStruct::MergeFrom(const QueryStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QueryStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_keyurl();
      keyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      ctr_ = from.ctr_;
    }
    if (cached_has_bits & 0x00000008u) {
      imps_ = from.imps_;
    }
    if (cached_has_bits & 0x00000010u) {
      gyimps_ = from.gyimps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QueryStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStruct::CopyFrom(const QueryStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QueryStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void QueryStruct::Swap(QueryStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryStruct::InternalSwap(QueryStruct* other) {
  using std::swap;
  query_.Swap(&other->query_);
  keyurl_.Swap(&other->keyurl_);
  swap(ctr_, other->ctr_);
  swap(imps_, other->imps_);
  swap(gyimps_, other->gyimps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryStruct::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryStruct

// required string query = 1;
bool QueryStruct::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryStruct::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryStruct::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryStruct::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& QueryStruct::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryStruct.query)
  return query_.GetNoArena();
}
void QueryStruct::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryStruct.query)
}
#if LANG_CXX11
void QueryStruct::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.QueryStruct.query)
}
#endif
void QueryStruct::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.QueryStruct.query)
}
void QueryStruct::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.QueryStruct.query)
}
::std::string* QueryStruct::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryStruct.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryStruct::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.QueryStruct.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryStruct::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.QueryStruct.query)
}

// required string keyUrl = 2;
bool QueryStruct::has_keyurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryStruct::set_has_keyurl() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryStruct::clear_has_keyurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryStruct::clear_keyurl() {
  keyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyurl();
}
const ::std::string& QueryStruct::keyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
  return keyurl_.GetNoArena();
}
void QueryStruct::set_keyurl(const ::std::string& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
}
#if LANG_CXX11
void QueryStruct::set_keyurl(::std::string&& value) {
  set_has_keyurl();
  keyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
}
#endif
void QueryStruct::set_keyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
}
void QueryStruct::set_keyurl(const char* value, size_t size) {
  set_has_keyurl();
  keyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
}
::std::string* QueryStruct::mutable_keyurl() {
  set_has_keyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
  return keyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryStruct::release_keyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
  clear_has_keyurl();
  return keyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryStruct::set_allocated_keyurl(::std::string* keyurl) {
  if (keyurl != NULL) {
    set_has_keyurl();
  } else {
    clear_has_keyurl();
  }
  keyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.QueryStruct.keyUrl)
}

// required double ctr = 3;
bool QueryStruct::has_ctr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryStruct::set_has_ctr() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryStruct::clear_has_ctr() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryStruct::clear_ctr() {
  ctr_ = 0;
  clear_has_ctr();
}
double QueryStruct::ctr() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryStruct.ctr)
  return ctr_;
}
void QueryStruct::set_ctr(double value) {
  set_has_ctr();
  ctr_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryStruct.ctr)
}

// required uint32 imps = 4;
bool QueryStruct::has_imps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryStruct::set_has_imps() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryStruct::clear_has_imps() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryStruct::clear_imps() {
  imps_ = 0u;
  clear_has_imps();
}
::google::protobuf::uint32 QueryStruct::imps() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryStruct.imps)
  return imps_;
}
void QueryStruct::set_imps(::google::protobuf::uint32 value) {
  set_has_imps();
  imps_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryStruct.imps)
}

// required uint32 gyimps = 5;
bool QueryStruct::has_gyimps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryStruct::set_has_gyimps() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryStruct::clear_has_gyimps() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryStruct::clear_gyimps() {
  gyimps_ = 0u;
  clear_has_gyimps();
}
::google::protobuf::uint32 QueryStruct::gyimps() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QueryStruct.gyimps)
  return gyimps_;
}
void QueryStruct::set_gyimps(::google::protobuf::uint32 value) {
  set_has_gyimps();
  gyimps_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QueryStruct.gyimps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullPage::kPageFieldNumber;
const int FullPage::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullPage::FullPage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FullPage)
}
FullPage::FullPage(const FullPage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      image_(from.image_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_page()) {
    page_ = new ::ru::mail::go::webbase::blobs::PageStruct(*from.page_);
  } else {
    page_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FullPage)
}

void FullPage::SharedCtor() {
  _cached_size_ = 0;
  page_ = NULL;
}

FullPage::~FullPage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FullPage)
  SharedDtor();
}

void FullPage::SharedDtor() {
  if (this != internal_default_instance()) delete page_;
}

void FullPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullPage::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FullPage& FullPage::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullPage* FullPage::New(::google::protobuf::Arena* arena) const {
  FullPage* n = new FullPage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullPage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FullPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  if (has_page()) {
    GOOGLE_DCHECK(page_ != NULL);
    page_->::ru::mail::go::webbase::blobs::PageStruct::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FullPage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.PageStruct page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ImageStruct image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FullPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FullPage)
  return false;
#undef DO_
}

void FullPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FullPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PageStruct page = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.ImageStruct image = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FullPage)
}

::google::protobuf::uint8* FullPage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FullPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.PageStruct page = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->page_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.ImageStruct image = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->image(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FullPage)
  return target;
}

size_t FullPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FullPage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.PageStruct page = 2;
  if (has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->page_);
  }
  // repeated .ru.mail.go.webbase.blobs.ImageStruct image = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullPage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FullPage)
  GOOGLE_DCHECK_NE(&from, this);
  const FullPage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FullPage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FullPage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FullPage)
    MergeFrom(*source);
  }
}

void FullPage::MergeFrom(const FullPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FullPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  if (from.has_page()) {
    mutable_page()->::ru::mail::go::webbase::blobs::PageStruct::MergeFrom(from.page());
  }
}

void FullPage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FullPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullPage::CopyFrom(const FullPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FullPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (has_page()) {
    if (!this->page_->IsInitialized()) return false;
  }
  return true;
}

void FullPage::Swap(FullPage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullPage::InternalSwap(FullPage* other) {
  using std::swap;
  image_.InternalSwap(&other->image_);
  swap(page_, other->page_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FullPage::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullPage

// required .ru.mail.go.webbase.blobs.PageStruct page = 2;
bool FullPage::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullPage::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
void FullPage::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullPage::clear_page() {
  if (page_ != NULL) page_->::ru::mail::go::webbase::blobs::PageStruct::Clear();
  clear_has_page();
}
const ::ru::mail::go::webbase::blobs::PageStruct& FullPage::page() const {
  const ::ru::mail::go::webbase::blobs::PageStruct* p = page_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FullPage.page)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PageStruct*>(
      &::ru::mail::go::webbase::blobs::_PageStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::PageStruct* FullPage::mutable_page() {
  set_has_page();
  if (page_ == NULL) {
    page_ = new ::ru::mail::go::webbase::blobs::PageStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FullPage.page)
  return page_;
}
::ru::mail::go::webbase::blobs::PageStruct* FullPage::release_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FullPage.page)
  clear_has_page();
  ::ru::mail::go::webbase::blobs::PageStruct* temp = page_;
  page_ = NULL;
  return temp;
}
void FullPage::set_allocated_page(::ru::mail::go::webbase::blobs::PageStruct* page) {
  delete page_;
  page_ = page;
  if (page) {
    set_has_page();
  } else {
    clear_has_page();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FullPage.page)
}

// repeated .ru.mail.go.webbase.blobs.ImageStruct image = 3;
int FullPage::image_size() const {
  return image_.size();
}
void FullPage::clear_image() {
  image_.Clear();
}
const ::ru::mail::go::webbase::blobs::ImageStruct& FullPage::image(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FullPage.image)
  return image_.Get(index);
}
::ru::mail::go::webbase::blobs::ImageStruct* FullPage::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FullPage.image)
  return image_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ImageStruct* FullPage::add_image() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.FullPage.image)
  return image_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageStruct >*
FullPage::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.FullPage.image)
  return &image_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageStruct >&
FullPage::image() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.FullPage.image)
  return image_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitingInfo::kImageKeyUrlFieldNumber;
const int LimitingInfo::kPageUrlFieldNumber;
const int LimitingInfo::kLimiterRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitingInfo::LimitingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.LimitingInfo)
}
LimitingInfo::LimitingInfo(const LimitingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imagekeyurl()) {
    imagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagekeyurl_);
  }
  pageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pageurl()) {
    pageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pageurl_);
  }
  limiterrank_ = from.limiterrank_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.LimitingInfo)
}

void LimitingInfo::SharedCtor() {
  _cached_size_ = 0;
  imagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limiterrank_ = 0;
}

LimitingInfo::~LimitingInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.LimitingInfo)
  SharedDtor();
}

void LimitingInfo::SharedDtor() {
  imagekeyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LimitingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitingInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LimitingInfo& LimitingInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

LimitingInfo* LimitingInfo::New(::google::protobuf::Arena* arena) const {
  LimitingInfo* n = new LimitingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LimitingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.LimitingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!imagekeyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imagekeyurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pageurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pageurl_.UnsafeRawStringPointer())->clear();
    }
  }
  limiterrank_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LimitingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.LimitingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string imageKeyUrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagekeyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagekeyurl().data(), static_cast<int>(this->imagekeyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pageUrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pageurl().data(), static_cast<int>(this->pageurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.LimitingInfo.pageUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float limiterRank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_limiterrank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limiterrank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.LimitingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.LimitingInfo)
  return false;
#undef DO_
}

void LimitingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.LimitingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imageKeyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagekeyurl().data(), static_cast<int>(this->imagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imagekeyurl(), output);
  }

  // required string pageUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), static_cast<int>(this->pageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.LimitingInfo.pageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pageurl(), output);
  }

  // required float limiterRank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->limiterrank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.LimitingInfo)
}

::google::protobuf::uint8* LimitingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.LimitingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imageKeyUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagekeyurl().data(), static_cast<int>(this->imagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imagekeyurl(), target);
  }

  // required string pageUrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pageurl().data(), static_cast<int>(this->pageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.LimitingInfo.pageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pageurl(), target);
  }

  // required float limiterRank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->limiterrank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.LimitingInfo)
  return target;
}

size_t LimitingInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.LimitingInfo)
  size_t total_size = 0;

  if (has_imagekeyurl()) {
    // required string imageKeyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imagekeyurl());
  }

  if (has_pageurl()) {
    // required string pageUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pageurl());
  }

  if (has_limiterrank()) {
    // required float limiterRank = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LimitingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.LimitingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string imageKeyUrl = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imagekeyurl());

    // required string pageUrl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pageurl());

    // required float limiterRank = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.LimitingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LimitingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.LimitingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.LimitingInfo)
    MergeFrom(*source);
  }
}

void LimitingInfo::MergeFrom(const LimitingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.LimitingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imagekeyurl();
      imagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagekeyurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pageurl();
      pageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pageurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      limiterrank_ = from.limiterrank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LimitingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.LimitingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitingInfo::CopyFrom(const LimitingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.LimitingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LimitingInfo::Swap(LimitingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitingInfo::InternalSwap(LimitingInfo* other) {
  using std::swap;
  imagekeyurl_.Swap(&other->imagekeyurl_);
  pageurl_.Swap(&other->pageurl_);
  swap(limiterrank_, other->limiterrank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LimitingInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LimitingInfo

// required string imageKeyUrl = 1;
bool LimitingInfo::has_imagekeyurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LimitingInfo::set_has_imagekeyurl() {
  _has_bits_[0] |= 0x00000001u;
}
void LimitingInfo::clear_has_imagekeyurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void LimitingInfo::clear_imagekeyurl() {
  imagekeyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagekeyurl();
}
const ::std::string& LimitingInfo::imagekeyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
  return imagekeyurl_.GetNoArena();
}
void LimitingInfo::set_imagekeyurl(const ::std::string& value) {
  set_has_imagekeyurl();
  imagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
}
#if LANG_CXX11
void LimitingInfo::set_imagekeyurl(::std::string&& value) {
  set_has_imagekeyurl();
  imagekeyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
}
#endif
void LimitingInfo::set_imagekeyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imagekeyurl();
  imagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
}
void LimitingInfo::set_imagekeyurl(const char* value, size_t size) {
  set_has_imagekeyurl();
  imagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
}
::std::string* LimitingInfo::mutable_imagekeyurl() {
  set_has_imagekeyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
  return imagekeyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LimitingInfo::release_imagekeyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
  clear_has_imagekeyurl();
  return imagekeyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LimitingInfo::set_allocated_imagekeyurl(::std::string* imagekeyurl) {
  if (imagekeyurl != NULL) {
    set_has_imagekeyurl();
  } else {
    clear_has_imagekeyurl();
  }
  imagekeyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagekeyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.LimitingInfo.imageKeyUrl)
}

// required string pageUrl = 2;
bool LimitingInfo::has_pageurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LimitingInfo::set_has_pageurl() {
  _has_bits_[0] |= 0x00000002u;
}
void LimitingInfo::clear_has_pageurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void LimitingInfo::clear_pageurl() {
  pageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pageurl();
}
const ::std::string& LimitingInfo::pageurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
  return pageurl_.GetNoArena();
}
void LimitingInfo::set_pageurl(const ::std::string& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
}
#if LANG_CXX11
void LimitingInfo::set_pageurl(::std::string&& value) {
  set_has_pageurl();
  pageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
}
#endif
void LimitingInfo::set_pageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
}
void LimitingInfo::set_pageurl(const char* value, size_t size) {
  set_has_pageurl();
  pageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
}
::std::string* LimitingInfo::mutable_pageurl() {
  set_has_pageurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
  return pageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LimitingInfo::release_pageurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
  clear_has_pageurl();
  return pageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LimitingInfo::set_allocated_pageurl(::std::string* pageurl) {
  if (pageurl != NULL) {
    set_has_pageurl();
  } else {
    clear_has_pageurl();
  }
  pageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pageurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.LimitingInfo.pageUrl)
}

// required float limiterRank = 3;
bool LimitingInfo::has_limiterrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LimitingInfo::set_has_limiterrank() {
  _has_bits_[0] |= 0x00000004u;
}
void LimitingInfo::clear_has_limiterrank() {
  _has_bits_[0] &= ~0x00000004u;
}
void LimitingInfo::clear_limiterrank() {
  limiterrank_ = 0;
  clear_has_limiterrank();
}
float LimitingInfo::limiterrank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.LimitingInfo.limiterRank)
  return limiterrank_;
}
void LimitingInfo::set_limiterrank(float value) {
  set_has_limiterrank();
  limiterrank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.LimitingInfo.limiterRank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundImage::kImageFieldNumber;
const int BoundImage::kPageDomainFieldNumber;
const int BoundImage::kPageKeyUrlFieldNumber;
const int BoundImage::kPageFullUrlFieldNumber;
const int BoundImage::kBlockFieldNumber;
const int BoundImage::kExtraTextsFieldNumber;
const int BoundImage::kQueryFieldNumber;
const int BoundImage::kImagesMediumFieldNumber;
const int BoundImage::kImagesLargeFieldNumber;
const int BoundImage::kImagesDupsFieldNumber;
const int BoundImage::kPornFieldNumber;
const int BoundImage::kPreviewDbFieldNumber;
const int BoundImage::kTimeFieldNumber;
const int BoundImage::kMaxPornFieldNumber;
const int BoundImage::kFeaturesListFieldNumber;
const int BoundImage::kClusteringResultFieldNumber;
const int BoundImage::kPageExtraInfoFieldNumber;
const int BoundImage::kImageCopiesFieldNumber;
const int BoundImage::kNumPagesFieldNumber;
const int BoundImage::kPornStatFieldNumber;
const int BoundImage::kSpamFieldNumber;
const int BoundImage::kAltlenFieldNumber;
const int BoundImage::kClusterIdFieldNumber;
const int BoundImage::kNumTextBlocksFieldNumber;
const int BoundImage::kLimiterRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundImage::BoundImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.BoundImage)
}
BoundImage::BoundImage(const BoundImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      block_(from.block_),
      query_(from.query_),
      page_extra_info_(from.page_extra_info_),
      pornstat_(from.pornstat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagekeyurl()) {
    pagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagekeyurl_);
  }
  pagefullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagefullurl()) {
    pagefullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagefullurl_);
  }
  if (from.has_image()) {
    image_ = new ::ru::mail::go::webbase::blobs::ImageStruct(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_pagedomain()) {
    pagedomain_ = new ::ru::mail::go::webbase::blobs::DomainStruct(*from.pagedomain_);
  } else {
    pagedomain_ = NULL;
  }
  if (from.has_extratexts()) {
    extratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray(*from.extratexts_);
  } else {
    extratexts_ = NULL;
  }
  if (from.has_featureslist()) {
    featureslist_ = new ::ru::mail::go::webbase::blobs::FeatureList(*from.featureslist_);
  } else {
    featureslist_ = NULL;
  }
  if (from.has_clusteringresult()) {
    clusteringresult_ = new ::ru::mail::go::webbase::blobs::ClusteringResult(*from.clusteringresult_);
  } else {
    clusteringresult_ = NULL;
  }
  ::memcpy(&imagesmedium_, &from.imagesmedium_,
    static_cast<size_t>(reinterpret_cast<char*>(&numtextblocks_) -
    reinterpret_cast<char*>(&imagesmedium_)) + sizeof(numtextblocks_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.BoundImage)
}

void BoundImage::SharedCtor() {
  _cached_size_ = 0;
  pagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagefullurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numtextblocks_) -
      reinterpret_cast<char*>(&image_)) + sizeof(numtextblocks_));
}

BoundImage::~BoundImage() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.BoundImage)
  SharedDtor();
}

void BoundImage::SharedDtor() {
  pagekeyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagefullurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete pagedomain_;
  if (this != internal_default_instance()) delete extratexts_;
  if (this != internal_default_instance()) delete featureslist_;
  if (this != internal_default_instance()) delete clusteringresult_;
}

void BoundImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundImage::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundImage& BoundImage::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoundImage* BoundImage::New(::google::protobuf::Arena* arena) const {
  BoundImage* n = new BoundImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.BoundImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  query_.Clear();
  page_extra_info_.Clear();
  pornstat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pagekeyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagekeyurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pagefullurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagefullurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::ru::mail::go::webbase::blobs::ImageStruct::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pagedomain_ != NULL);
      pagedomain_->::ru::mail::go::webbase::blobs::DomainStruct::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(extratexts_ != NULL);
      extratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(featureslist_ != NULL);
      featureslist_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(clusteringresult_ != NULL);
      clusteringresult_->::ru::mail::go::webbase::blobs::ClusteringResult::Clear();
    }
  }
  imagesmedium_ = 0u;
  if (cached_has_bits & 65280u) {
    ::memset(&imageslarge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numpages_) -
        reinterpret_cast<char*>(&imageslarge_)) + sizeof(numpages_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&spam_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numtextblocks_) -
        reinterpret_cast<char*>(&spam_)) + sizeof(numtextblocks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.BoundImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.DomainStruct pageDomain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pagedomain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pageKeyUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagekeyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pageFullUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagefullurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagefullurl().data(), static_cast<int>(this->pagefullurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.BoundImage.pageFullUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.TextBlock block = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extratexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.QueryStruct query = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 imagesMedium = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_imagesmedium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagesmedium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 imagesLarge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_imageslarge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageslarge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 imagesDups = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_imagesdups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagesdups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 porn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_porn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preview_db = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_preview_db();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_db_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxPorn = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_maxporn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxporn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FeatureList featuresList = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_featureslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ClusteringResult clusteringResult = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clusteringresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.extra_info page_extra_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 imageCopies = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_imagecopies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagecopies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numPages = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_numpages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numpages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pornStat = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192u, input, this->mutable_pornstat())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pornstat())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_spam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 altlen = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_altlen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &altlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cluster_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numTextBlocks = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_numtextblocks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtextblocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float limiterRank = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {
          set_has_limiterrank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limiterrank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.BoundImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.BoundImage)
  return false;
#undef DO_
}

void BoundImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.BoundImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // optional .ru.mail.go.webbase.blobs.DomainStruct pageDomain = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pagedomain_, output);
  }

  // required string pageKeyUrl = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pagekeyurl(), output);
  }

  // required string pageFullUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagefullurl().data(), static_cast<int>(this->pagefullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BoundImage.pageFullUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pagefullurl(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.TextBlock block = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->block(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->extratexts_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.QueryStruct query = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->query(static_cast<int>(i)), output);
  }

  // required uint32 imagesMedium = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->imagesmedium(), output);
  }

  // required uint32 imagesLarge = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->imageslarge(), output);
  }

  // optional uint32 imagesDups = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->imagesdups(), output);
  }

  // required uint32 porn = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->porn(), output);
  }

  // optional uint32 preview_db = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->preview_db(), output);
  }

  // optional uint32 time = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->time(), output);
  }

  // optional uint32 maxPorn = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->maxporn(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList featuresList = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->featureslist_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ClusteringResult clusteringResult = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->clusteringresult_, output);
  }

  // repeated .gogo.storage.extra_info page_extra_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_extra_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->page_extra_info(static_cast<int>(i)), output);
  }

  // optional uint32 imageCopies = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->imagecopies(), output);
  }

  // optional uint32 numPages = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->numpages(), output);
  }

  // repeated uint32 pornStat = 24;
  for (int i = 0, n = this->pornstat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->pornstat(i), output);
  }

  // optional uint32 spam = 25;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->spam(), output);
  }

  // optional uint32 altlen = 26;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->altlen(), output);
  }

  // optional uint64 cluster_id = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->cluster_id(), output);
  }

  // optional uint32 numTextBlocks = 28;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->numtextblocks(), output);
  }

  // optional float limiterRank = 29;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->limiterrank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.BoundImage)
}

::google::protobuf::uint8* BoundImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.BoundImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.DomainStruct pageDomain = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pagedomain_, deterministic, target);
  }

  // required string pageKeyUrl = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pagekeyurl(), target);
  }

  // required string pageFullUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagefullurl().data(), static_cast<int>(this->pagefullurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.BoundImage.pageFullUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pagefullurl(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.TextBlock block = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->block(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->extratexts_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.QueryStruct query = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->query(static_cast<int>(i)), deterministic, target);
  }

  // required uint32 imagesMedium = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->imagesmedium(), target);
  }

  // required uint32 imagesLarge = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->imageslarge(), target);
  }

  // optional uint32 imagesDups = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->imagesdups(), target);
  }

  // required uint32 porn = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->porn(), target);
  }

  // optional uint32 preview_db = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->preview_db(), target);
  }

  // optional uint32 time = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->time(), target);
  }

  // optional uint32 maxPorn = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->maxporn(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FeatureList featuresList = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->featureslist_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ClusteringResult clusteringResult = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->clusteringresult_, deterministic, target);
  }

  // repeated .gogo.storage.extra_info page_extra_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_extra_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->page_extra_info(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 imageCopies = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->imagecopies(), target);
  }

  // optional uint32 numPages = 23;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->numpages(), target);
  }

  // repeated uint32 pornStat = 24;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(24, this->pornstat_, target);

  // optional uint32 spam = 25;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->spam(), target);
  }

  // optional uint32 altlen = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->altlen(), target);
  }

  // optional uint64 cluster_id = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->cluster_id(), target);
  }

  // optional uint32 numTextBlocks = 28;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->numtextblocks(), target);
  }

  // optional float limiterRank = 29;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->limiterrank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.BoundImage)
  return target;
}

size_t BoundImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.BoundImage)
  size_t total_size = 0;

  if (has_pagekeyurl()) {
    // required string pageKeyUrl = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagekeyurl());
  }

  if (has_pagefullurl()) {
    // required string pageFullUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagefullurl());
  }

  if (has_image()) {
    // required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  if (has_imagesmedium()) {
    // required uint32 imagesMedium = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagesmedium());
  }

  if (has_imageslarge()) {
    // required uint32 imagesLarge = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imageslarge());
  }

  if (has_porn()) {
    // required uint32 porn = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->porn());
  }

  return total_size;
}
size_t BoundImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.BoundImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000587) ^ 0x00000587) == 0) {  // All required fields are present.
    // required string pageKeyUrl = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagekeyurl());

    // required string pageFullUrl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagefullurl());

    // required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);

    // required uint32 imagesMedium = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagesmedium());

    // required uint32 imagesLarge = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imageslarge());

    // required uint32 porn = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->porn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.TextBlock block = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->block_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.QueryStruct query = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->query_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query(static_cast<int>(i)));
    }
  }

  // repeated .gogo.storage.extra_info page_extra_info = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->page_extra_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_extra_info(static_cast<int>(i)));
    }
  }

  // repeated uint32 pornStat = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pornstat_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->pornstat_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 120u) {
    // optional .ru.mail.go.webbase.blobs.DomainStruct pageDomain = 3;
    if (has_pagedomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pagedomain_);
    }

    // optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 7;
    if (has_extratexts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extratexts_);
    }

    // optional .ru.mail.go.webbase.blobs.FeatureList featuresList = 17;
    if (has_featureslist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->featureslist_);
    }

    // optional .ru.mail.go.webbase.blobs.ClusteringResult clusteringResult = 18;
    if (has_clusteringresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clusteringresult_);
    }

  }
  // optional uint32 imagesDups = 12;
  if (has_imagesdups()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imagesdups());
  }

  if (_has_bits_[8 / 32] & 63488u) {
    // optional uint32 preview_db = 14;
    if (has_preview_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_db());
    }

    // optional uint32 time = 15 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 maxPorn = 16;
    if (has_maxporn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxporn());
    }

    // optional uint32 imageCopies = 22;
    if (has_imagecopies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagecopies());
    }

    // optional uint32 numPages = 23;
    if (has_numpages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numpages());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 spam = 25;
    if (has_spam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spam());
    }

    // optional float limiterRank = 29;
    if (has_limiterrank()) {
      total_size += 2 + 4;
    }

    // optional uint64 cluster_id = 27;
    if (has_cluster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

    // optional uint32 altlen = 26;
    if (has_altlen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->altlen());
    }

    // optional uint32 numTextBlocks = 28;
    if (has_numtextblocks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtextblocks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.BoundImage)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.BoundImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.BoundImage)
    MergeFrom(*source);
  }
}

void BoundImage::MergeFrom(const BoundImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.BoundImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
  query_.MergeFrom(from.query_);
  page_extra_info_.MergeFrom(from.page_extra_info_);
  pornstat_.MergeFrom(from.pornstat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pagekeyurl();
      pagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagekeyurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pagefullurl();
      pagefullurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagefullurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image()->::ru::mail::go::webbase::blobs::ImageStruct::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pagedomain()->::ru::mail::go::webbase::blobs::DomainStruct::MergeFrom(from.pagedomain());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_extratexts()->::ru::mail::go::webbase::blobs::ExtraTextArray::MergeFrom(from.extratexts());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_featureslist()->::ru::mail::go::webbase::blobs::FeatureList::MergeFrom(from.featureslist());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_clusteringresult()->::ru::mail::go::webbase::blobs::ClusteringResult::MergeFrom(from.clusteringresult());
    }
    if (cached_has_bits & 0x00000080u) {
      imagesmedium_ = from.imagesmedium_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      imageslarge_ = from.imageslarge_;
    }
    if (cached_has_bits & 0x00000200u) {
      imagesdups_ = from.imagesdups_;
    }
    if (cached_has_bits & 0x00000400u) {
      porn_ = from.porn_;
    }
    if (cached_has_bits & 0x00000800u) {
      preview_db_ = from.preview_db_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00002000u) {
      maxporn_ = from.maxporn_;
    }
    if (cached_has_bits & 0x00004000u) {
      imagecopies_ = from.imagecopies_;
    }
    if (cached_has_bits & 0x00008000u) {
      numpages_ = from.numpages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      spam_ = from.spam_;
    }
    if (cached_has_bits & 0x00020000u) {
      limiterrank_ = from.limiterrank_;
    }
    if (cached_has_bits & 0x00040000u) {
      cluster_id_ = from.cluster_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      altlen_ = from.altlen_;
    }
    if (cached_has_bits & 0x00100000u) {
      numtextblocks_ = from.numtextblocks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.BoundImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundImage::CopyFrom(const BoundImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.BoundImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000587) != 0x00000587) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->block())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->query())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->page_extra_info())) return false;
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  if (has_pagedomain()) {
    if (!this->pagedomain_->IsInitialized()) return false;
  }
  if (has_extratexts()) {
    if (!this->extratexts_->IsInitialized()) return false;
  }
  if (has_featureslist()) {
    if (!this->featureslist_->IsInitialized()) return false;
  }
  return true;
}

void BoundImage::Swap(BoundImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundImage::InternalSwap(BoundImage* other) {
  using std::swap;
  block_.InternalSwap(&other->block_);
  query_.InternalSwap(&other->query_);
  page_extra_info_.InternalSwap(&other->page_extra_info_);
  pornstat_.InternalSwap(&other->pornstat_);
  pagekeyurl_.Swap(&other->pagekeyurl_);
  pagefullurl_.Swap(&other->pagefullurl_);
  swap(image_, other->image_);
  swap(pagedomain_, other->pagedomain_);
  swap(extratexts_, other->extratexts_);
  swap(featureslist_, other->featureslist_);
  swap(clusteringresult_, other->clusteringresult_);
  swap(imagesmedium_, other->imagesmedium_);
  swap(imageslarge_, other->imageslarge_);
  swap(imagesdups_, other->imagesdups_);
  swap(porn_, other->porn_);
  swap(preview_db_, other->preview_db_);
  swap(time_, other->time_);
  swap(maxporn_, other->maxporn_);
  swap(imagecopies_, other->imagecopies_);
  swap(numpages_, other->numpages_);
  swap(spam_, other->spam_);
  swap(limiterrank_, other->limiterrank_);
  swap(cluster_id_, other->cluster_id_);
  swap(altlen_, other->altlen_);
  swap(numtextblocks_, other->numtextblocks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundImage::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundImage

// required .ru.mail.go.webbase.blobs.ImageStruct image = 1;
bool BoundImage::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BoundImage::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
void BoundImage::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void BoundImage::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::ImageStruct::Clear();
  clear_has_image();
}
const ::ru::mail::go::webbase::blobs::ImageStruct& BoundImage::image() const {
  const ::ru::mail::go::webbase::blobs::ImageStruct* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageStruct*>(
      &::ru::mail::go::webbase::blobs::_ImageStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageStruct* BoundImage::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::ImageStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.image)
  return image_;
}
::ru::mail::go::webbase::blobs::ImageStruct* BoundImage::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::ImageStruct* temp = image_;
  image_ = NULL;
  return temp;
}
void BoundImage::set_allocated_image(::ru::mail::go::webbase::blobs::ImageStruct* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.image)
}

// optional .ru.mail.go.webbase.blobs.DomainStruct pageDomain = 3;
bool BoundImage::has_pagedomain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BoundImage::set_has_pagedomain() {
  _has_bits_[0] |= 0x00000008u;
}
void BoundImage::clear_has_pagedomain() {
  _has_bits_[0] &= ~0x00000008u;
}
void BoundImage::clear_pagedomain() {
  if (pagedomain_ != NULL) pagedomain_->::ru::mail::go::webbase::blobs::DomainStruct::Clear();
  clear_has_pagedomain();
}
const ::ru::mail::go::webbase::blobs::DomainStruct& BoundImage::pagedomain() const {
  const ::ru::mail::go::webbase::blobs::DomainStruct* p = pagedomain_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.pageDomain)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DomainStruct*>(
      &::ru::mail::go::webbase::blobs::_DomainStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::DomainStruct* BoundImage::mutable_pagedomain() {
  set_has_pagedomain();
  if (pagedomain_ == NULL) {
    pagedomain_ = new ::ru::mail::go::webbase::blobs::DomainStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.pageDomain)
  return pagedomain_;
}
::ru::mail::go::webbase::blobs::DomainStruct* BoundImage::release_pagedomain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.pageDomain)
  clear_has_pagedomain();
  ::ru::mail::go::webbase::blobs::DomainStruct* temp = pagedomain_;
  pagedomain_ = NULL;
  return temp;
}
void BoundImage::set_allocated_pagedomain(::ru::mail::go::webbase::blobs::DomainStruct* pagedomain) {
  delete pagedomain_;
  pagedomain_ = pagedomain;
  if (pagedomain) {
    set_has_pagedomain();
  } else {
    clear_has_pagedomain();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.pageDomain)
}

// required string pageKeyUrl = 4;
bool BoundImage::has_pagekeyurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundImage::set_has_pagekeyurl() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundImage::clear_has_pagekeyurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundImage::clear_pagekeyurl() {
  pagekeyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagekeyurl();
}
const ::std::string& BoundImage::pagekeyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
  return pagekeyurl_.GetNoArena();
}
void BoundImage::set_pagekeyurl(const ::std::string& value) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
}
#if LANG_CXX11
void BoundImage::set_pagekeyurl(::std::string&& value) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
}
#endif
void BoundImage::set_pagekeyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
}
void BoundImage::set_pagekeyurl(const char* value, size_t size) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
}
::std::string* BoundImage::mutable_pagekeyurl() {
  set_has_pagekeyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
  return pagekeyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BoundImage::release_pagekeyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
  clear_has_pagekeyurl();
  return pagekeyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BoundImage::set_allocated_pagekeyurl(::std::string* pagekeyurl) {
  if (pagekeyurl != NULL) {
    set_has_pagekeyurl();
  } else {
    clear_has_pagekeyurl();
  }
  pagekeyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagekeyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.pageKeyUrl)
}

// required string pageFullUrl = 5;
bool BoundImage::has_pagefullurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundImage::set_has_pagefullurl() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundImage::clear_has_pagefullurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundImage::clear_pagefullurl() {
  pagefullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagefullurl();
}
const ::std::string& BoundImage::pagefullurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
  return pagefullurl_.GetNoArena();
}
void BoundImage::set_pagefullurl(const ::std::string& value) {
  set_has_pagefullurl();
  pagefullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
}
#if LANG_CXX11
void BoundImage::set_pagefullurl(::std::string&& value) {
  set_has_pagefullurl();
  pagefullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
}
#endif
void BoundImage::set_pagefullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagefullurl();
  pagefullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
}
void BoundImage::set_pagefullurl(const char* value, size_t size) {
  set_has_pagefullurl();
  pagefullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
}
::std::string* BoundImage::mutable_pagefullurl() {
  set_has_pagefullurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
  return pagefullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BoundImage::release_pagefullurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
  clear_has_pagefullurl();
  return pagefullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BoundImage::set_allocated_pagefullurl(::std::string* pagefullurl) {
  if (pagefullurl != NULL) {
    set_has_pagefullurl();
  } else {
    clear_has_pagefullurl();
  }
  pagefullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagefullurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.pageFullUrl)
}

// repeated .ru.mail.go.webbase.blobs.TextBlock block = 6;
int BoundImage::block_size() const {
  return block_.size();
}
void BoundImage::clear_block() {
  block_.Clear();
}
const ::ru::mail::go::webbase::blobs::TextBlock& BoundImage::block(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.block)
  return block_.Get(index);
}
::ru::mail::go::webbase::blobs::TextBlock* BoundImage::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.block)
  return block_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TextBlock* BoundImage::add_block() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.BoundImage.block)
  return block_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TextBlock >*
BoundImage::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.BoundImage.block)
  return &block_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TextBlock >&
BoundImage::block() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.BoundImage.block)
  return block_;
}

// optional .ru.mail.go.webbase.blobs.ExtraTextArray extraTexts = 7;
bool BoundImage::has_extratexts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BoundImage::set_has_extratexts() {
  _has_bits_[0] |= 0x00000010u;
}
void BoundImage::clear_has_extratexts() {
  _has_bits_[0] &= ~0x00000010u;
}
void BoundImage::clear_extratexts() {
  if (extratexts_ != NULL) extratexts_->::ru::mail::go::webbase::blobs::ExtraTextArray::Clear();
  clear_has_extratexts();
}
const ::ru::mail::go::webbase::blobs::ExtraTextArray& BoundImage::extratexts() const {
  const ::ru::mail::go::webbase::blobs::ExtraTextArray* p = extratexts_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.extraTexts)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ExtraTextArray*>(
      &::ru::mail::go::webbase::blobs::_ExtraTextArray_default_instance_);
}
::ru::mail::go::webbase::blobs::ExtraTextArray* BoundImage::mutable_extratexts() {
  set_has_extratexts();
  if (extratexts_ == NULL) {
    extratexts_ = new ::ru::mail::go::webbase::blobs::ExtraTextArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.extraTexts)
  return extratexts_;
}
::ru::mail::go::webbase::blobs::ExtraTextArray* BoundImage::release_extratexts() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.extraTexts)
  clear_has_extratexts();
  ::ru::mail::go::webbase::blobs::ExtraTextArray* temp = extratexts_;
  extratexts_ = NULL;
  return temp;
}
void BoundImage::set_allocated_extratexts(::ru::mail::go::webbase::blobs::ExtraTextArray* extratexts) {
  delete extratexts_;
  extratexts_ = extratexts;
  if (extratexts) {
    set_has_extratexts();
  } else {
    clear_has_extratexts();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.extraTexts)
}

// repeated .ru.mail.go.webbase.blobs.QueryStruct query = 8;
int BoundImage::query_size() const {
  return query_.size();
}
void BoundImage::clear_query() {
  query_.Clear();
}
const ::ru::mail::go::webbase::blobs::QueryStruct& BoundImage::query(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.query)
  return query_.Get(index);
}
::ru::mail::go::webbase::blobs::QueryStruct* BoundImage::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.query)
  return query_.Mutable(index);
}
::ru::mail::go::webbase::blobs::QueryStruct* BoundImage::add_query() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.BoundImage.query)
  return query_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryStruct >*
BoundImage::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.BoundImage.query)
  return &query_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QueryStruct >&
BoundImage::query() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.BoundImage.query)
  return query_;
}

// required uint32 imagesMedium = 10;
bool BoundImage::has_imagesmedium() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BoundImage::set_has_imagesmedium() {
  _has_bits_[0] |= 0x00000080u;
}
void BoundImage::clear_has_imagesmedium() {
  _has_bits_[0] &= ~0x00000080u;
}
void BoundImage::clear_imagesmedium() {
  imagesmedium_ = 0u;
  clear_has_imagesmedium();
}
::google::protobuf::uint32 BoundImage::imagesmedium() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.imagesMedium)
  return imagesmedium_;
}
void BoundImage::set_imagesmedium(::google::protobuf::uint32 value) {
  set_has_imagesmedium();
  imagesmedium_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.imagesMedium)
}

// required uint32 imagesLarge = 11;
bool BoundImage::has_imageslarge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BoundImage::set_has_imageslarge() {
  _has_bits_[0] |= 0x00000100u;
}
void BoundImage::clear_has_imageslarge() {
  _has_bits_[0] &= ~0x00000100u;
}
void BoundImage::clear_imageslarge() {
  imageslarge_ = 0u;
  clear_has_imageslarge();
}
::google::protobuf::uint32 BoundImage::imageslarge() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.imagesLarge)
  return imageslarge_;
}
void BoundImage::set_imageslarge(::google::protobuf::uint32 value) {
  set_has_imageslarge();
  imageslarge_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.imagesLarge)
}

// optional uint32 imagesDups = 12;
bool BoundImage::has_imagesdups() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BoundImage::set_has_imagesdups() {
  _has_bits_[0] |= 0x00000200u;
}
void BoundImage::clear_has_imagesdups() {
  _has_bits_[0] &= ~0x00000200u;
}
void BoundImage::clear_imagesdups() {
  imagesdups_ = 0u;
  clear_has_imagesdups();
}
::google::protobuf::uint32 BoundImage::imagesdups() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.imagesDups)
  return imagesdups_;
}
void BoundImage::set_imagesdups(::google::protobuf::uint32 value) {
  set_has_imagesdups();
  imagesdups_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.imagesDups)
}

// required uint32 porn = 13;
bool BoundImage::has_porn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BoundImage::set_has_porn() {
  _has_bits_[0] |= 0x00000400u;
}
void BoundImage::clear_has_porn() {
  _has_bits_[0] &= ~0x00000400u;
}
void BoundImage::clear_porn() {
  porn_ = 0u;
  clear_has_porn();
}
::google::protobuf::uint32 BoundImage::porn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.porn)
  return porn_;
}
void BoundImage::set_porn(::google::protobuf::uint32 value) {
  set_has_porn();
  porn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.porn)
}

// optional uint32 preview_db = 14;
bool BoundImage::has_preview_db() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BoundImage::set_has_preview_db() {
  _has_bits_[0] |= 0x00000800u;
}
void BoundImage::clear_has_preview_db() {
  _has_bits_[0] &= ~0x00000800u;
}
void BoundImage::clear_preview_db() {
  preview_db_ = 0u;
  clear_has_preview_db();
}
::google::protobuf::uint32 BoundImage::preview_db() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.preview_db)
  return preview_db_;
}
void BoundImage::set_preview_db(::google::protobuf::uint32 value) {
  set_has_preview_db();
  preview_db_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.preview_db)
}

// optional uint32 time = 15 [default = 0];
bool BoundImage::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BoundImage::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
void BoundImage::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
void BoundImage::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 BoundImage::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.time)
  return time_;
}
void BoundImage::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.time)
}

// optional uint32 maxPorn = 16;
bool BoundImage::has_maxporn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BoundImage::set_has_maxporn() {
  _has_bits_[0] |= 0x00002000u;
}
void BoundImage::clear_has_maxporn() {
  _has_bits_[0] &= ~0x00002000u;
}
void BoundImage::clear_maxporn() {
  maxporn_ = 0u;
  clear_has_maxporn();
}
::google::protobuf::uint32 BoundImage::maxporn() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.maxPorn)
  return maxporn_;
}
void BoundImage::set_maxporn(::google::protobuf::uint32 value) {
  set_has_maxporn();
  maxporn_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.maxPorn)
}

// optional .ru.mail.go.webbase.blobs.FeatureList featuresList = 17;
bool BoundImage::has_featureslist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BoundImage::set_has_featureslist() {
  _has_bits_[0] |= 0x00000020u;
}
void BoundImage::clear_has_featureslist() {
  _has_bits_[0] &= ~0x00000020u;
}
void BoundImage::clear_featureslist() {
  if (featureslist_ != NULL) featureslist_->::ru::mail::go::webbase::blobs::FeatureList::Clear();
  clear_has_featureslist();
}
const ::ru::mail::go::webbase::blobs::FeatureList& BoundImage::featureslist() const {
  const ::ru::mail::go::webbase::blobs::FeatureList* p = featureslist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.featuresList)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FeatureList*>(
      &::ru::mail::go::webbase::blobs::_FeatureList_default_instance_);
}
::ru::mail::go::webbase::blobs::FeatureList* BoundImage::mutable_featureslist() {
  set_has_featureslist();
  if (featureslist_ == NULL) {
    featureslist_ = new ::ru::mail::go::webbase::blobs::FeatureList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.featuresList)
  return featureslist_;
}
::ru::mail::go::webbase::blobs::FeatureList* BoundImage::release_featureslist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.featuresList)
  clear_has_featureslist();
  ::ru::mail::go::webbase::blobs::FeatureList* temp = featureslist_;
  featureslist_ = NULL;
  return temp;
}
void BoundImage::set_allocated_featureslist(::ru::mail::go::webbase::blobs::FeatureList* featureslist) {
  delete featureslist_;
  featureslist_ = featureslist;
  if (featureslist) {
    set_has_featureslist();
  } else {
    clear_has_featureslist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.featuresList)
}

// optional .ru.mail.go.webbase.blobs.ClusteringResult clusteringResult = 18;
bool BoundImage::has_clusteringresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BoundImage::set_has_clusteringresult() {
  _has_bits_[0] |= 0x00000040u;
}
void BoundImage::clear_has_clusteringresult() {
  _has_bits_[0] &= ~0x00000040u;
}
void BoundImage::clear_clusteringresult() {
  if (clusteringresult_ != NULL) clusteringresult_->::ru::mail::go::webbase::blobs::ClusteringResult::Clear();
  clear_has_clusteringresult();
}
const ::ru::mail::go::webbase::blobs::ClusteringResult& BoundImage::clusteringresult() const {
  const ::ru::mail::go::webbase::blobs::ClusteringResult* p = clusteringresult_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.clusteringResult)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ClusteringResult*>(
      &::ru::mail::go::webbase::blobs::_ClusteringResult_default_instance_);
}
::ru::mail::go::webbase::blobs::ClusteringResult* BoundImage::mutable_clusteringresult() {
  set_has_clusteringresult();
  if (clusteringresult_ == NULL) {
    clusteringresult_ = new ::ru::mail::go::webbase::blobs::ClusteringResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.clusteringResult)
  return clusteringresult_;
}
::ru::mail::go::webbase::blobs::ClusteringResult* BoundImage::release_clusteringresult() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.BoundImage.clusteringResult)
  clear_has_clusteringresult();
  ::ru::mail::go::webbase::blobs::ClusteringResult* temp = clusteringresult_;
  clusteringresult_ = NULL;
  return temp;
}
void BoundImage::set_allocated_clusteringresult(::ru::mail::go::webbase::blobs::ClusteringResult* clusteringresult) {
  delete clusteringresult_;
  clusteringresult_ = clusteringresult;
  if (clusteringresult) {
    set_has_clusteringresult();
  } else {
    clear_has_clusteringresult();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.BoundImage.clusteringResult)
}

// repeated .gogo.storage.extra_info page_extra_info = 21;
int BoundImage::page_extra_info_size() const {
  return page_extra_info_.size();
}
void BoundImage::clear_page_extra_info() {
  page_extra_info_.Clear();
}
const ::gogo::storage::extra_info& BoundImage::page_extra_info(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.page_extra_info)
  return page_extra_info_.Get(index);
}
::gogo::storage::extra_info* BoundImage::mutable_page_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.BoundImage.page_extra_info)
  return page_extra_info_.Mutable(index);
}
::gogo::storage::extra_info* BoundImage::add_page_extra_info() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.BoundImage.page_extra_info)
  return page_extra_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
BoundImage::mutable_page_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.BoundImage.page_extra_info)
  return &page_extra_info_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
BoundImage::page_extra_info() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.BoundImage.page_extra_info)
  return page_extra_info_;
}

// optional uint32 imageCopies = 22;
bool BoundImage::has_imagecopies() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BoundImage::set_has_imagecopies() {
  _has_bits_[0] |= 0x00004000u;
}
void BoundImage::clear_has_imagecopies() {
  _has_bits_[0] &= ~0x00004000u;
}
void BoundImage::clear_imagecopies() {
  imagecopies_ = 0u;
  clear_has_imagecopies();
}
::google::protobuf::uint32 BoundImage::imagecopies() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.imageCopies)
  return imagecopies_;
}
void BoundImage::set_imagecopies(::google::protobuf::uint32 value) {
  set_has_imagecopies();
  imagecopies_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.imageCopies)
}

// optional uint32 numPages = 23;
bool BoundImage::has_numpages() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BoundImage::set_has_numpages() {
  _has_bits_[0] |= 0x00008000u;
}
void BoundImage::clear_has_numpages() {
  _has_bits_[0] &= ~0x00008000u;
}
void BoundImage::clear_numpages() {
  numpages_ = 0u;
  clear_has_numpages();
}
::google::protobuf::uint32 BoundImage::numpages() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.numPages)
  return numpages_;
}
void BoundImage::set_numpages(::google::protobuf::uint32 value) {
  set_has_numpages();
  numpages_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.numPages)
}

// repeated uint32 pornStat = 24;
int BoundImage::pornstat_size() const {
  return pornstat_.size();
}
void BoundImage::clear_pornstat() {
  pornstat_.Clear();
}
::google::protobuf::uint32 BoundImage::pornstat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.pornStat)
  return pornstat_.Get(index);
}
void BoundImage::set_pornstat(int index, ::google::protobuf::uint32 value) {
  pornstat_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.pornStat)
}
void BoundImage::add_pornstat(::google::protobuf::uint32 value) {
  pornstat_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.BoundImage.pornStat)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BoundImage::pornstat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.BoundImage.pornStat)
  return pornstat_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BoundImage::mutable_pornstat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.BoundImage.pornStat)
  return &pornstat_;
}

// optional uint32 spam = 25;
bool BoundImage::has_spam() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BoundImage::set_has_spam() {
  _has_bits_[0] |= 0x00010000u;
}
void BoundImage::clear_has_spam() {
  _has_bits_[0] &= ~0x00010000u;
}
void BoundImage::clear_spam() {
  spam_ = 0u;
  clear_has_spam();
}
::google::protobuf::uint32 BoundImage::spam() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.spam)
  return spam_;
}
void BoundImage::set_spam(::google::protobuf::uint32 value) {
  set_has_spam();
  spam_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.spam)
}

// optional uint32 altlen = 26;
bool BoundImage::has_altlen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BoundImage::set_has_altlen() {
  _has_bits_[0] |= 0x00080000u;
}
void BoundImage::clear_has_altlen() {
  _has_bits_[0] &= ~0x00080000u;
}
void BoundImage::clear_altlen() {
  altlen_ = 0u;
  clear_has_altlen();
}
::google::protobuf::uint32 BoundImage::altlen() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.altlen)
  return altlen_;
}
void BoundImage::set_altlen(::google::protobuf::uint32 value) {
  set_has_altlen();
  altlen_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.altlen)
}

// optional uint64 cluster_id = 27;
bool BoundImage::has_cluster_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BoundImage::set_has_cluster_id() {
  _has_bits_[0] |= 0x00040000u;
}
void BoundImage::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void BoundImage::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_id();
}
::google::protobuf::uint64 BoundImage::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.cluster_id)
  return cluster_id_;
}
void BoundImage::set_cluster_id(::google::protobuf::uint64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.cluster_id)
}

// optional uint32 numTextBlocks = 28;
bool BoundImage::has_numtextblocks() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BoundImage::set_has_numtextblocks() {
  _has_bits_[0] |= 0x00100000u;
}
void BoundImage::clear_has_numtextblocks() {
  _has_bits_[0] &= ~0x00100000u;
}
void BoundImage::clear_numtextblocks() {
  numtextblocks_ = 0u;
  clear_has_numtextblocks();
}
::google::protobuf::uint32 BoundImage::numtextblocks() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.numTextBlocks)
  return numtextblocks_;
}
void BoundImage::set_numtextblocks(::google::protobuf::uint32 value) {
  set_has_numtextblocks();
  numtextblocks_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.numTextBlocks)
}

// optional float limiterRank = 29;
bool BoundImage::has_limiterrank() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BoundImage::set_has_limiterrank() {
  _has_bits_[0] |= 0x00020000u;
}
void BoundImage::clear_has_limiterrank() {
  _has_bits_[0] &= ~0x00020000u;
}
void BoundImage::clear_limiterrank() {
  limiterrank_ = 0;
  clear_has_limiterrank();
}
float BoundImage::limiterrank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.BoundImage.limiterRank)
  return limiterrank_;
}
void BoundImage::set_limiterrank(float value) {
  set_has_limiterrank();
  limiterrank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.BoundImage.limiterRank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextBlock::kTextFieldNumber;
const int TextBlock::kZnameFieldNumber;
const int TextBlock::kDistFieldNumber;
const int TextBlock::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextBlock::TextBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TextBlock)
}
TextBlock::TextBlock(const TextBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&dist_, &from.dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&zname_) -
    reinterpret_cast<char*>(&dist_)) + sizeof(zname_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TextBlock)
}

void TextBlock::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dist_ = 0u;
  zname_ = 1;
}

TextBlock::~TextBlock() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TextBlock)
  SharedDtor();
}

void TextBlock::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextBlock::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextBlock& TextBlock::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextBlock* TextBlock::New(::google::protobuf::Arena* arena) const {
  TextBlock* n = new TextBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TextBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    dist_ = 0u;
    zname_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TextBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextBlock.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ZoneName_IsValid(value)) {
            set_zname(static_cast< ::ru::mail::go::webbase::blobs::ZoneName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.Tag tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::Tag_IsValid(value)) {
            add_tags(static_cast< ::ru::mail::go::webbase::blobs::Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::ru::mail::go::webbase::blobs::Tag_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TextBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TextBlock)
  return false;
#undef DO_
}

void TextBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TextBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextBlock.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->zname(), output);
  }

  // optional uint32 dist = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dist(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.Tag tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TextBlock)
}

::google::protobuf::uint8* TextBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TextBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextBlock.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->zname(), target);
  }

  // optional uint32 dist = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dist(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.Tag tags = 4;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    4, this->tags_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TextBlock)
  return target;
}

size_t TextBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.TextBlock)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_zname()) {
    // required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zname());
  }

  return total_size;
}
size_t TextBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TextBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.Tag tags = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->tags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional uint32 dist = 3;
  if (has_dist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TextBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const TextBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TextBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TextBlock)
    MergeFrom(*source);
  }
}

void TextBlock::MergeFrom(const TextBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TextBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      dist_ = from.dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      zname_ = from.zname_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TextBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextBlock::CopyFrom(const TextBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TextBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void TextBlock::Swap(TextBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextBlock::InternalSwap(TextBlock* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  text_.Swap(&other->text_);
  swap(dist_, other->dist_);
  swap(zname_, other->zname_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextBlock::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextBlock

// required string text = 1;
bool TextBlock::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextBlock::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void TextBlock::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextBlock::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& TextBlock::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextBlock.text)
  return text_.GetNoArena();
}
void TextBlock::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextBlock.text)
}
#if LANG_CXX11
void TextBlock::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextBlock.text)
}
#endif
void TextBlock::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextBlock.text)
}
void TextBlock::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextBlock.text)
}
::std::string* TextBlock::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextBlock.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextBlock::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextBlock.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextBlock::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextBlock.text)
}

// required .ru.mail.go.webbase.blobs.ZoneName zname = 2;
bool TextBlock::has_zname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TextBlock::set_has_zname() {
  _has_bits_[0] |= 0x00000004u;
}
void TextBlock::clear_has_zname() {
  _has_bits_[0] &= ~0x00000004u;
}
void TextBlock::clear_zname() {
  zname_ = 1;
  clear_has_zname();
}
::ru::mail::go::webbase::blobs::ZoneName TextBlock::zname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextBlock.zname)
  return static_cast< ::ru::mail::go::webbase::blobs::ZoneName >(zname_);
}
void TextBlock::set_zname(::ru::mail::go::webbase::blobs::ZoneName value) {
  assert(::ru::mail::go::webbase::blobs::ZoneName_IsValid(value));
  set_has_zname();
  zname_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextBlock.zname)
}

// optional uint32 dist = 3;
bool TextBlock::has_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TextBlock::set_has_dist() {
  _has_bits_[0] |= 0x00000002u;
}
void TextBlock::clear_has_dist() {
  _has_bits_[0] &= ~0x00000002u;
}
void TextBlock::clear_dist() {
  dist_ = 0u;
  clear_has_dist();
}
::google::protobuf::uint32 TextBlock::dist() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextBlock.dist)
  return dist_;
}
void TextBlock::set_dist(::google::protobuf::uint32 value) {
  set_has_dist();
  dist_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextBlock.dist)
}

// repeated .ru.mail.go.webbase.blobs.Tag tags = 4;
int TextBlock::tags_size() const {
  return tags_.size();
}
void TextBlock::clear_tags() {
  tags_.Clear();
}
::ru::mail::go::webbase::blobs::Tag TextBlock::tags(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextBlock.tags)
  return static_cast< ::ru::mail::go::webbase::blobs::Tag >(tags_.Get(index));
}
void TextBlock::set_tags(int index, ::ru::mail::go::webbase::blobs::Tag value) {
  assert(::ru::mail::go::webbase::blobs::Tag_IsValid(value));
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextBlock.tags)
}
void TextBlock::add_tags(::ru::mail::go::webbase::blobs::Tag value) {
  assert(::ru::mail::go::webbase::blobs::Tag_IsValid(value));
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.TextBlock.tags)
}
const ::google::protobuf::RepeatedField<int>&
TextBlock::tags() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.TextBlock.tags)
  return tags_;
}
::google::protobuf::RepeatedField<int>*
TextBlock::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.TextBlock.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisitInfo::kLastYVisitFieldNumber;
const int VisitInfo::kLastGVisitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisitInfo::VisitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VisitInfo)
}
VisitInfo::VisitInfo(const VisitInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lastyvisit_, &from.lastyvisit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastgvisit_) -
    reinterpret_cast<char*>(&lastyvisit_)) + sizeof(lastgvisit_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VisitInfo)
}

void VisitInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lastyvisit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastgvisit_) -
      reinterpret_cast<char*>(&lastyvisit_)) + sizeof(lastgvisit_));
}

VisitInfo::~VisitInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VisitInfo)
  SharedDtor();
}

void VisitInfo::SharedDtor() {
}

void VisitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisitInfo& VisitInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VisitInfo* VisitInfo::New(::google::protobuf::Arena* arena) const {
  VisitInfo* n = new VisitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VisitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&lastyvisit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastgvisit_) -
        reinterpret_cast<char*>(&lastyvisit_)) + sizeof(lastgvisit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VisitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VisitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lastYVisit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lastyvisit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastyvisit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lastGVisit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lastgvisit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastgvisit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VisitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VisitInfo)
  return false;
#undef DO_
}

void VisitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VisitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lastYVisit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lastyvisit(), output);
  }

  // required int64 lastGVisit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lastgvisit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VisitInfo)
}

::google::protobuf::uint8* VisitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VisitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lastYVisit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lastyvisit(), target);
  }

  // required int64 lastGVisit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lastgvisit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VisitInfo)
  return target;
}

size_t VisitInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.VisitInfo)
  size_t total_size = 0;

  if (has_lastyvisit()) {
    // required int64 lastYVisit = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastyvisit());
  }

  if (has_lastgvisit()) {
    // required int64 lastGVisit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastgvisit());
  }

  return total_size;
}
size_t VisitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VisitInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lastYVisit = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastyvisit());

    // required int64 lastGVisit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastgvisit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VisitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VisitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VisitInfo)
    MergeFrom(*source);
  }
}

void VisitInfo::MergeFrom(const VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lastyvisit_ = from.lastyvisit_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastgvisit_ = from.lastgvisit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitInfo::CopyFrom(const VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void VisitInfo::Swap(VisitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisitInfo::InternalSwap(VisitInfo* other) {
  using std::swap;
  swap(lastyvisit_, other->lastyvisit_);
  swap(lastgvisit_, other->lastgvisit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisitInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisitInfo

// required int64 lastYVisit = 1;
bool VisitInfo::has_lastyvisit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VisitInfo::set_has_lastyvisit() {
  _has_bits_[0] |= 0x00000001u;
}
void VisitInfo::clear_has_lastyvisit() {
  _has_bits_[0] &= ~0x00000001u;
}
void VisitInfo::clear_lastyvisit() {
  lastyvisit_ = GOOGLE_LONGLONG(0);
  clear_has_lastyvisit();
}
::google::protobuf::int64 VisitInfo::lastyvisit() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VisitInfo.lastYVisit)
  return lastyvisit_;
}
void VisitInfo::set_lastyvisit(::google::protobuf::int64 value) {
  set_has_lastyvisit();
  lastyvisit_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VisitInfo.lastYVisit)
}

// required int64 lastGVisit = 2;
bool VisitInfo::has_lastgvisit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VisitInfo::set_has_lastgvisit() {
  _has_bits_[0] |= 0x00000002u;
}
void VisitInfo::clear_has_lastgvisit() {
  _has_bits_[0] &= ~0x00000002u;
}
void VisitInfo::clear_lastgvisit() {
  lastgvisit_ = GOOGLE_LONGLONG(0);
  clear_has_lastgvisit();
}
::google::protobuf::int64 VisitInfo::lastgvisit() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VisitInfo.lastGVisit)
  return lastgvisit_;
}
void VisitInfo::set_lastgvisit(::google::protobuf::int64 value) {
  set_has_lastgvisit();
  lastgvisit_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.VisitInfo.lastGVisit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlPair::kImageFieldNumber;
const int UrlPair::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlPair::UrlPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlPair)
}
UrlPair::UrlPair(const UrlPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page()) {
    page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlPair)
}

void UrlPair::SharedCtor() {
  _cached_size_ = 0;
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UrlPair::~UrlPair() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlPair)
  SharedDtor();
}

void UrlPair::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlPair::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlPair& UrlPair::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlPair* UrlPair::New(::google::protobuf::Arena* arena) const {
  UrlPair* n = new UrlPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlPair::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!page_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlPair.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), static_cast<int>(this->page().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlPair.page");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlPair)
  return false;
#undef DO_
}

void UrlPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlPair.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // required string page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), static_cast<int>(this->page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlPair.page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlPair)
}

::google::protobuf::uint8* UrlPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlPair.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // required string page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), static_cast<int>(this->page().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlPair.page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlPair)
  return target;
}

size_t UrlPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.UrlPair)
  size_t total_size = 0;

  if (has_image()) {
    // required string image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  if (has_page()) {
    // required string page = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page());
  }

  return total_size;
}
size_t UrlPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());

    // required string page = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlPair)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlPair)
    MergeFrom(*source);
  }
}

void UrlPair::MergeFrom(const UrlPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_page();
      page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
  }
}

void UrlPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlPair::CopyFrom(const UrlPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UrlPair::Swap(UrlPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlPair::InternalSwap(UrlPair* other) {
  using std::swap;
  image_.Swap(&other->image_);
  page_.Swap(&other->page_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlPair::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlPair

// required string image = 1;
bool UrlPair::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlPair::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlPair::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlPair::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& UrlPair::image() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlPair.image)
  return image_.GetNoArena();
}
void UrlPair::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlPair.image)
}
#if LANG_CXX11
void UrlPair::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlPair.image)
}
#endif
void UrlPair::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlPair.image)
}
void UrlPair::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlPair.image)
}
::std::string* UrlPair::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlPair.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlPair::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlPair.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlPair::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlPair.image)
}

// required string page = 2;
bool UrlPair::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlPair::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlPair::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlPair::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page();
}
const ::std::string& UrlPair::page() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlPair.page)
  return page_.GetNoArena();
}
void UrlPair::set_page(const ::std::string& value) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlPair.page)
}
#if LANG_CXX11
void UrlPair::set_page(::std::string&& value) {
  set_has_page();
  page_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlPair.page)
}
#endif
void UrlPair::set_page(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlPair.page)
}
void UrlPair::set_page(const char* value, size_t size) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlPair.page)
}
::std::string* UrlPair::mutable_page() {
  set_has_page();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlPair.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlPair::release_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlPair.page)
  clear_has_page();
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlPair::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    set_has_page();
  } else {
    clear_has_page();
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlPair.page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Any::kDomainFieldNumber;
const int Any::kImageFieldNumber;
const int Any::kPageFieldNumber;
const int Any::kKeyDomainFieldNumber;
const int Any::kPageKeyUrlFieldNumber;
const int Any::kFullPageFieldNumber;
const int Any::kBoundImageFieldNumber;
const int Any::kLimitingInfoFieldNumber;
const int Any::kClusterIdFieldNumber;
const int Any::kSekiteiFieldNumber;
const int Any::kDuplicatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Any::Any()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Any)
}
Any::Any(const Any& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      duplicates_(from.duplicates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keydomain()) {
    keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
  }
  pagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagekeyurl()) {
    pagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagekeyurl_);
  }
  if (from.has_domain()) {
    domain_ = new ::ru::mail::go::webbase::blobs::DomainStruct(*from.domain_);
  } else {
    domain_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::ru::mail::go::webbase::blobs::ImageStruct(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_page()) {
    page_ = new ::ru::mail::go::webbase::blobs::PageStruct(*from.page_);
  } else {
    page_ = NULL;
  }
  if (from.has_fullpage()) {
    fullpage_ = new ::ru::mail::go::webbase::blobs::FullPage(*from.fullpage_);
  } else {
    fullpage_ = NULL;
  }
  if (from.has_boundimage()) {
    boundimage_ = new ::ru::mail::go::webbase::blobs::BoundImage(*from.boundimage_);
  } else {
    boundimage_ = NULL;
  }
  if (from.has_limitinginfo()) {
    limitinginfo_ = new ::ru::mail::go::webbase::blobs::LimitingInfo(*from.limitinginfo_);
  } else {
    limitinginfo_ = NULL;
  }
  if (from.has_sekitei()) {
    sekitei_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m(*from.sekitei_);
  } else {
    sekitei_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Any)
}

void Any::SharedCtor() {
  _cached_size_ = 0;
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagekeyurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&domain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&domain_)) + sizeof(cluster_id_));
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  keydomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagekeyurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete domain_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete page_;
  if (this != internal_default_instance()) delete fullpage_;
  if (this != internal_default_instance()) delete boundimage_;
  if (this != internal_default_instance()) delete limitinginfo_;
  if (this != internal_default_instance()) delete sekitei_;
}

void Any::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Any::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Any& Any::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Any* Any::New(::google::protobuf::Arena* arena) const {
  Any* n = new Any;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Any)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duplicates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keydomain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keydomain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pagekeyurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pagekeyurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(domain_ != NULL);
      domain_->::ru::mail::go::webbase::blobs::DomainStruct::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::ru::mail::go::webbase::blobs::ImageStruct::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(page_ != NULL);
      page_->::ru::mail::go::webbase::blobs::PageStruct::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(fullpage_ != NULL);
      fullpage_->::ru::mail::go::webbase::blobs::FullPage::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(boundimage_ != NULL);
      boundimage_->::ru::mail::go::webbase::blobs::BoundImage::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(limitinginfo_ != NULL);
      limitinginfo_->::ru::mail::go::webbase::blobs::LimitingInfo::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(sekitei_ != NULL);
    sekitei_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
  }
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Any)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.DomainStruct domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ImageStruct image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.PageStruct page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string keyDomain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keydomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keydomain().data(), static_cast<int>(this->keydomain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Any.keyDomain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageKeyUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagekeyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Any.pageKeyUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.FullPage fullPage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fullpage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.BoundImage boundImage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.LimitingInfo limitingInfo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limitinginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cluster_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sekitei()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.UrlPair duplicates = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Any)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Any)
  return false;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Any)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.DomainStruct domain = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->domain_, output);
  }

  // optional .ru.mail.go.webbase.blobs.ImageStruct image = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional .ru.mail.go.webbase.blobs.PageStruct page = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->page_, output);
  }

  // optional string keyDomain = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Any.keyDomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->keydomain(), output);
  }

  // optional string pageKeyUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Any.pageKeyUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pagekeyurl(), output);
  }

  // optional .ru.mail.go.webbase.blobs.FullPage fullPage = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->fullpage_, output);
  }

  // optional .ru.mail.go.webbase.blobs.BoundImage boundImage = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->boundimage_, output);
  }

  // optional .ru.mail.go.webbase.blobs.LimitingInfo limitingInfo = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->limitinginfo_, output);
  }

  // optional uint64 cluster_id = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cluster_id(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->sekitei_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.UrlPair duplicates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->duplicates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->duplicates(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Any)
}

::google::protobuf::uint8* Any::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Any)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.DomainStruct domain = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->domain_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.ImageStruct image = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->image_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.PageStruct page = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->page_, deterministic, target);
  }

  // optional string keyDomain = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Any.keyDomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keydomain(), target);
  }

  // optional string pageKeyUrl = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagekeyurl().data(), static_cast<int>(this->pagekeyurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Any.pageKeyUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pagekeyurl(), target);
  }

  // optional .ru.mail.go.webbase.blobs.FullPage fullPage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->fullpage_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.BoundImage boundImage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->boundimage_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.LimitingInfo limitingInfo = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->limitinginfo_, deterministic, target);
  }

  // optional uint64 cluster_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cluster_id(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->sekitei_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.UrlPair duplicates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->duplicates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->duplicates(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Any)
  return target;
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Any)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.UrlPair duplicates = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->duplicates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duplicates(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string keyDomain = 4;
    if (has_keydomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keydomain());
    }

    // optional string pageKeyUrl = 5;
    if (has_pagekeyurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagekeyurl());
    }

    // optional .ru.mail.go.webbase.blobs.DomainStruct domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->domain_);
    }

    // optional .ru.mail.go.webbase.blobs.ImageStruct image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .ru.mail.go.webbase.blobs.PageStruct page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->page_);
    }

    // optional .ru.mail.go.webbase.blobs.FullPage fullPage = 6;
    if (has_fullpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fullpage_);
    }

    // optional .ru.mail.go.webbase.blobs.BoundImage boundImage = 7;
    if (has_boundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundimage_);
    }

    // optional .ru.mail.go.webbase.blobs.LimitingInfo limitingInfo = 8;
    if (has_limitinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->limitinginfo_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 10;
    if (has_sekitei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sekitei_);
    }

    // optional uint64 cluster_id = 9;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Any)
  GOOGLE_DCHECK_NE(&from, this);
  const Any* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Any>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Any)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Any)
    MergeFrom(*source);
  }
}

void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Any)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  duplicates_.MergeFrom(from.duplicates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keydomain();
      keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pagekeyurl();
      pagekeyurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagekeyurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_domain()->::ru::mail::go::webbase::blobs::DomainStruct::MergeFrom(from.domain());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_image()->::ru::mail::go::webbase::blobs::ImageStruct::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_page()->::ru::mail::go::webbase::blobs::PageStruct::MergeFrom(from.page());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_fullpage()->::ru::mail::go::webbase::blobs::FullPage::MergeFrom(from.fullpage());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_boundimage()->::ru::mail::go::webbase::blobs::BoundImage::MergeFrom(from.boundimage());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_limitinginfo()->::ru::mail::go::webbase::blobs::LimitingInfo::MergeFrom(from.limitinginfo());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_sekitei()->::ru::mail::go::webbase::sekitei::Sekitei_m::MergeFrom(from.sekitei());
    }
    if (cached_has_bits & 0x00000200u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Any::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->duplicates())) return false;
  if (has_domain()) {
    if (!this->domain_->IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image_->IsInitialized()) return false;
  }
  if (has_page()) {
    if (!this->page_->IsInitialized()) return false;
  }
  if (has_fullpage()) {
    if (!this->fullpage_->IsInitialized()) return false;
  }
  if (has_boundimage()) {
    if (!this->boundimage_->IsInitialized()) return false;
  }
  if (has_limitinginfo()) {
    if (!this->limitinginfo_->IsInitialized()) return false;
  }
  if (has_sekitei()) {
    if (!this->sekitei_->IsInitialized()) return false;
  }
  return true;
}

void Any::Swap(Any* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Any::InternalSwap(Any* other) {
  using std::swap;
  duplicates_.InternalSwap(&other->duplicates_);
  keydomain_.Swap(&other->keydomain_);
  pagekeyurl_.Swap(&other->pagekeyurl_);
  swap(domain_, other->domain_);
  swap(image_, other->image_);
  swap(page_, other->page_);
  swap(fullpage_, other->fullpage_);
  swap(boundimage_, other->boundimage_);
  swap(limitinginfo_, other->limitinginfo_);
  swap(sekitei_, other->sekitei_);
  swap(cluster_id_, other->cluster_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Any::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Any

// optional .ru.mail.go.webbase.blobs.DomainStruct domain = 1;
bool Any::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Any::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void Any::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void Any::clear_domain() {
  if (domain_ != NULL) domain_->::ru::mail::go::webbase::blobs::DomainStruct::Clear();
  clear_has_domain();
}
const ::ru::mail::go::webbase::blobs::DomainStruct& Any::domain() const {
  const ::ru::mail::go::webbase::blobs::DomainStruct* p = domain_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.domain)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::DomainStruct*>(
      &::ru::mail::go::webbase::blobs::_DomainStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::DomainStruct* Any::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    domain_ = new ::ru::mail::go::webbase::blobs::DomainStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.domain)
  return domain_;
}
::ru::mail::go::webbase::blobs::DomainStruct* Any::release_domain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.domain)
  clear_has_domain();
  ::ru::mail::go::webbase::blobs::DomainStruct* temp = domain_;
  domain_ = NULL;
  return temp;
}
void Any::set_allocated_domain(::ru::mail::go::webbase::blobs::DomainStruct* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.domain)
}

// optional .ru.mail.go.webbase.blobs.ImageStruct image = 2;
bool Any::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Any::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
void Any::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
void Any::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::ImageStruct::Clear();
  clear_has_image();
}
const ::ru::mail::go::webbase::blobs::ImageStruct& Any::image() const {
  const ::ru::mail::go::webbase::blobs::ImageStruct* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageStruct*>(
      &::ru::mail::go::webbase::blobs::_ImageStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageStruct* Any::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::ImageStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.image)
  return image_;
}
::ru::mail::go::webbase::blobs::ImageStruct* Any::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::ImageStruct* temp = image_;
  image_ = NULL;
  return temp;
}
void Any::set_allocated_image(::ru::mail::go::webbase::blobs::ImageStruct* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.image)
}

// optional .ru.mail.go.webbase.blobs.PageStruct page = 3;
bool Any::has_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Any::set_has_page() {
  _has_bits_[0] |= 0x00000010u;
}
void Any::clear_has_page() {
  _has_bits_[0] &= ~0x00000010u;
}
void Any::clear_page() {
  if (page_ != NULL) page_->::ru::mail::go::webbase::blobs::PageStruct::Clear();
  clear_has_page();
}
const ::ru::mail::go::webbase::blobs::PageStruct& Any::page() const {
  const ::ru::mail::go::webbase::blobs::PageStruct* p = page_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.page)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::PageStruct*>(
      &::ru::mail::go::webbase::blobs::_PageStruct_default_instance_);
}
::ru::mail::go::webbase::blobs::PageStruct* Any::mutable_page() {
  set_has_page();
  if (page_ == NULL) {
    page_ = new ::ru::mail::go::webbase::blobs::PageStruct;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.page)
  return page_;
}
::ru::mail::go::webbase::blobs::PageStruct* Any::release_page() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.page)
  clear_has_page();
  ::ru::mail::go::webbase::blobs::PageStruct* temp = page_;
  page_ = NULL;
  return temp;
}
void Any::set_allocated_page(::ru::mail::go::webbase::blobs::PageStruct* page) {
  delete page_;
  page_ = page;
  if (page) {
    set_has_page();
  } else {
    clear_has_page();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.page)
}

// optional string keyDomain = 4;
bool Any::has_keydomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Any::set_has_keydomain() {
  _has_bits_[0] |= 0x00000001u;
}
void Any::clear_has_keydomain() {
  _has_bits_[0] &= ~0x00000001u;
}
void Any::clear_keydomain() {
  keydomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keydomain();
}
const ::std::string& Any::keydomain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.keyDomain)
  return keydomain_.GetNoArena();
}
void Any::set_keydomain(const ::std::string& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Any.keyDomain)
}
#if LANG_CXX11
void Any::set_keydomain(::std::string&& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Any.keyDomain)
}
#endif
void Any::set_keydomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Any.keyDomain)
}
void Any::set_keydomain(const char* value, size_t size) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Any.keyDomain)
}
::std::string* Any::mutable_keydomain() {
  set_has_keydomain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.keyDomain)
  return keydomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Any::release_keydomain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.keyDomain)
  clear_has_keydomain();
  return keydomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Any::set_allocated_keydomain(::std::string* keydomain) {
  if (keydomain != NULL) {
    set_has_keydomain();
  } else {
    clear_has_keydomain();
  }
  keydomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keydomain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.keyDomain)
}

// optional string pageKeyUrl = 5;
bool Any::has_pagekeyurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Any::set_has_pagekeyurl() {
  _has_bits_[0] |= 0x00000002u;
}
void Any::clear_has_pagekeyurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Any::clear_pagekeyurl() {
  pagekeyurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pagekeyurl();
}
const ::std::string& Any::pagekeyurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
  return pagekeyurl_.GetNoArena();
}
void Any::set_pagekeyurl(const ::std::string& value) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
}
#if LANG_CXX11
void Any::set_pagekeyurl(::std::string&& value) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
}
#endif
void Any::set_pagekeyurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
}
void Any::set_pagekeyurl(const char* value, size_t size) {
  set_has_pagekeyurl();
  pagekeyurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
}
::std::string* Any::mutable_pagekeyurl() {
  set_has_pagekeyurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
  return pagekeyurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Any::release_pagekeyurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
  clear_has_pagekeyurl();
  return pagekeyurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Any::set_allocated_pagekeyurl(::std::string* pagekeyurl) {
  if (pagekeyurl != NULL) {
    set_has_pagekeyurl();
  } else {
    clear_has_pagekeyurl();
  }
  pagekeyurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pagekeyurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.pageKeyUrl)
}

// optional .ru.mail.go.webbase.blobs.FullPage fullPage = 6;
bool Any::has_fullpage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Any::set_has_fullpage() {
  _has_bits_[0] |= 0x00000020u;
}
void Any::clear_has_fullpage() {
  _has_bits_[0] &= ~0x00000020u;
}
void Any::clear_fullpage() {
  if (fullpage_ != NULL) fullpage_->::ru::mail::go::webbase::blobs::FullPage::Clear();
  clear_has_fullpage();
}
const ::ru::mail::go::webbase::blobs::FullPage& Any::fullpage() const {
  const ::ru::mail::go::webbase::blobs::FullPage* p = fullpage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.fullPage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::FullPage*>(
      &::ru::mail::go::webbase::blobs::_FullPage_default_instance_);
}
::ru::mail::go::webbase::blobs::FullPage* Any::mutable_fullpage() {
  set_has_fullpage();
  if (fullpage_ == NULL) {
    fullpage_ = new ::ru::mail::go::webbase::blobs::FullPage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.fullPage)
  return fullpage_;
}
::ru::mail::go::webbase::blobs::FullPage* Any::release_fullpage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.fullPage)
  clear_has_fullpage();
  ::ru::mail::go::webbase::blobs::FullPage* temp = fullpage_;
  fullpage_ = NULL;
  return temp;
}
void Any::set_allocated_fullpage(::ru::mail::go::webbase::blobs::FullPage* fullpage) {
  delete fullpage_;
  fullpage_ = fullpage;
  if (fullpage) {
    set_has_fullpage();
  } else {
    clear_has_fullpage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.fullPage)
}

// optional .ru.mail.go.webbase.blobs.BoundImage boundImage = 7;
bool Any::has_boundimage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Any::set_has_boundimage() {
  _has_bits_[0] |= 0x00000040u;
}
void Any::clear_has_boundimage() {
  _has_bits_[0] &= ~0x00000040u;
}
void Any::clear_boundimage() {
  if (boundimage_ != NULL) boundimage_->::ru::mail::go::webbase::blobs::BoundImage::Clear();
  clear_has_boundimage();
}
const ::ru::mail::go::webbase::blobs::BoundImage& Any::boundimage() const {
  const ::ru::mail::go::webbase::blobs::BoundImage* p = boundimage_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.boundImage)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::BoundImage*>(
      &::ru::mail::go::webbase::blobs::_BoundImage_default_instance_);
}
::ru::mail::go::webbase::blobs::BoundImage* Any::mutable_boundimage() {
  set_has_boundimage();
  if (boundimage_ == NULL) {
    boundimage_ = new ::ru::mail::go::webbase::blobs::BoundImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.boundImage)
  return boundimage_;
}
::ru::mail::go::webbase::blobs::BoundImage* Any::release_boundimage() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.boundImage)
  clear_has_boundimage();
  ::ru::mail::go::webbase::blobs::BoundImage* temp = boundimage_;
  boundimage_ = NULL;
  return temp;
}
void Any::set_allocated_boundimage(::ru::mail::go::webbase::blobs::BoundImage* boundimage) {
  delete boundimage_;
  boundimage_ = boundimage;
  if (boundimage) {
    set_has_boundimage();
  } else {
    clear_has_boundimage();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.boundImage)
}

// optional .ru.mail.go.webbase.blobs.LimitingInfo limitingInfo = 8;
bool Any::has_limitinginfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Any::set_has_limitinginfo() {
  _has_bits_[0] |= 0x00000080u;
}
void Any::clear_has_limitinginfo() {
  _has_bits_[0] &= ~0x00000080u;
}
void Any::clear_limitinginfo() {
  if (limitinginfo_ != NULL) limitinginfo_->::ru::mail::go::webbase::blobs::LimitingInfo::Clear();
  clear_has_limitinginfo();
}
const ::ru::mail::go::webbase::blobs::LimitingInfo& Any::limitinginfo() const {
  const ::ru::mail::go::webbase::blobs::LimitingInfo* p = limitinginfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.limitingInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::LimitingInfo*>(
      &::ru::mail::go::webbase::blobs::_LimitingInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::LimitingInfo* Any::mutable_limitinginfo() {
  set_has_limitinginfo();
  if (limitinginfo_ == NULL) {
    limitinginfo_ = new ::ru::mail::go::webbase::blobs::LimitingInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.limitingInfo)
  return limitinginfo_;
}
::ru::mail::go::webbase::blobs::LimitingInfo* Any::release_limitinginfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.limitingInfo)
  clear_has_limitinginfo();
  ::ru::mail::go::webbase::blobs::LimitingInfo* temp = limitinginfo_;
  limitinginfo_ = NULL;
  return temp;
}
void Any::set_allocated_limitinginfo(::ru::mail::go::webbase::blobs::LimitingInfo* limitinginfo) {
  delete limitinginfo_;
  limitinginfo_ = limitinginfo;
  if (limitinginfo) {
    set_has_limitinginfo();
  } else {
    clear_has_limitinginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.limitingInfo)
}

// optional uint64 cluster_id = 9;
bool Any::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Any::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000200u;
}
void Any::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void Any::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_id();
}
::google::protobuf::uint64 Any::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.cluster_id)
  return cluster_id_;
}
void Any::set_cluster_id(::google::protobuf::uint64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Any.cluster_id)
}

// optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 10;
bool Any::has_sekitei() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Any::set_has_sekitei() {
  _has_bits_[0] |= 0x00000100u;
}
void Any::clear_has_sekitei() {
  _has_bits_[0] &= ~0x00000100u;
}
void Any::clear_sekitei() {
  if (sekitei_ != NULL) sekitei_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
  clear_has_sekitei();
}
const ::ru::mail::go::webbase::sekitei::Sekitei_m& Any::sekitei() const {
  const ::ru::mail::go::webbase::sekitei::Sekitei_m* p = sekitei_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.sekitei)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      &::ru::mail::go::webbase::sekitei::_Sekitei_m_default_instance_);
}
::ru::mail::go::webbase::sekitei::Sekitei_m* Any::mutable_sekitei() {
  set_has_sekitei();
  if (sekitei_ == NULL) {
    sekitei_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.sekitei)
  return sekitei_;
}
::ru::mail::go::webbase::sekitei::Sekitei_m* Any::release_sekitei() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Any.sekitei)
  clear_has_sekitei();
  ::ru::mail::go::webbase::sekitei::Sekitei_m* temp = sekitei_;
  sekitei_ = NULL;
  return temp;
}
void Any::set_allocated_sekitei(::ru::mail::go::webbase::sekitei::Sekitei_m* sekitei) {
  delete sekitei_;
  sekitei_ = sekitei;
  if (sekitei) {
    set_has_sekitei();
  } else {
    clear_has_sekitei();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Any.sekitei)
}

// repeated .ru.mail.go.webbase.blobs.UrlPair duplicates = 11;
int Any::duplicates_size() const {
  return duplicates_.size();
}
void Any::clear_duplicates() {
  duplicates_.Clear();
}
const ::ru::mail::go::webbase::blobs::UrlPair& Any::duplicates(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Any.duplicates)
  return duplicates_.Get(index);
}
::ru::mail::go::webbase::blobs::UrlPair* Any::mutable_duplicates(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Any.duplicates)
  return duplicates_.Mutable(index);
}
::ru::mail::go::webbase::blobs::UrlPair* Any::add_duplicates() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Any.duplicates)
  return duplicates_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::UrlPair >*
Any::mutable_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Any.duplicates)
  return &duplicates_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::UrlPair >&
Any::duplicates() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Any.duplicates)
  return duplicates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageMarkerUrlTrace::kStageFieldNumber;
const int ImageMarkerUrlTrace::kLimiterPosFieldNumber;
const int ImageMarkerUrlTrace::kMainDupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageMarkerUrlTrace::ImageMarkerUrlTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
}
ImageMarkerUrlTrace::ImageMarkerUrlTrace(const ImageMarkerUrlTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maindup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_maindup()) {
    maindup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maindup_);
  }
  ::memcpy(&limiterpos_, &from.limiterpos_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&limiterpos_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
}

void ImageMarkerUrlTrace::SharedCtor() {
  _cached_size_ = 0;
  maindup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limiterpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&limiterpos_)) + sizeof(stage_));
}

ImageMarkerUrlTrace::~ImageMarkerUrlTrace() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  SharedDtor();
}

void ImageMarkerUrlTrace::SharedDtor() {
  maindup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageMarkerUrlTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMarkerUrlTrace::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageMarkerUrlTrace& ImageMarkerUrlTrace::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageMarkerUrlTrace* ImageMarkerUrlTrace::New(::google::protobuf::Arena* arena) const {
  ImageMarkerUrlTrace* n = new ImageMarkerUrlTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageMarkerUrlTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_maindup()) {
    GOOGLE_DCHECK(!maindup_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*maindup_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&limiterpos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stage_) -
        reinterpret_cast<char*>(&limiterpos_)) + sizeof(stage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageMarkerUrlTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.StageInfo stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo_IsValid(value)) {
            set_stage(static_cast< ::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 limiterPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_limiterpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limiterpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mainDup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maindup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maindup().data(), static_cast<int>(this->maindup().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  return false;
#undef DO_
}

void ImageMarkerUrlTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.StageInfo stage = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage(), output);
  }

  // optional int64 limiterPos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->limiterpos(), output);
  }

  // optional string mainDup = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maindup().data(), static_cast<int>(this->maindup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->maindup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
}

::google::protobuf::uint8* ImageMarkerUrlTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.StageInfo stage = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage(), target);
  }

  // optional int64 limiterPos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->limiterpos(), target);
  }

  // optional string mainDup = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maindup().data(), static_cast<int>(this->maindup().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->maindup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  return target;
}

size_t ImageMarkerUrlTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.StageInfo stage = 1;
  if (has_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string mainDup = 3;
    if (has_maindup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maindup());
    }

    // optional int64 limiterPos = 2;
    if (has_limiterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limiterpos());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMarkerUrlTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMarkerUrlTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageMarkerUrlTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
    MergeFrom(*source);
  }
}

void ImageMarkerUrlTrace::MergeFrom(const ImageMarkerUrlTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_maindup();
      maindup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maindup_);
    }
    if (cached_has_bits & 0x00000002u) {
      limiterpos_ = from.limiterpos_;
    }
    if (cached_has_bits & 0x00000004u) {
      stage_ = from.stage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageMarkerUrlTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMarkerUrlTrace::CopyFrom(const ImageMarkerUrlTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMarkerUrlTrace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ImageMarkerUrlTrace::Swap(ImageMarkerUrlTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageMarkerUrlTrace::InternalSwap(ImageMarkerUrlTrace* other) {
  using std::swap;
  maindup_.Swap(&other->maindup_);
  swap(limiterpos_, other->limiterpos_);
  swap(stage_, other->stage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageMarkerUrlTrace::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageMarkerUrlTrace

// required .ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.StageInfo stage = 1;
bool ImageMarkerUrlTrace::has_stage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageMarkerUrlTrace::set_has_stage() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageMarkerUrlTrace::clear_has_stage() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageMarkerUrlTrace::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo ImageMarkerUrlTrace::stage() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.stage)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo >(stage_);
}
void ImageMarkerUrlTrace::set_stage(::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo value) {
  assert(::ru::mail::go::webbase::blobs::ImageMarkerUrlTrace_StageInfo_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.stage)
}

// optional int64 limiterPos = 2;
bool ImageMarkerUrlTrace::has_limiterpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageMarkerUrlTrace::set_has_limiterpos() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageMarkerUrlTrace::clear_has_limiterpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageMarkerUrlTrace::clear_limiterpos() {
  limiterpos_ = GOOGLE_LONGLONG(0);
  clear_has_limiterpos();
}
::google::protobuf::int64 ImageMarkerUrlTrace::limiterpos() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.limiterPos)
  return limiterpos_;
}
void ImageMarkerUrlTrace::set_limiterpos(::google::protobuf::int64 value) {
  set_has_limiterpos();
  limiterpos_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.limiterPos)
}

// optional string mainDup = 3;
bool ImageMarkerUrlTrace::has_maindup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageMarkerUrlTrace::set_has_maindup() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageMarkerUrlTrace::clear_has_maindup() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageMarkerUrlTrace::clear_maindup() {
  maindup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maindup();
}
const ::std::string& ImageMarkerUrlTrace::maindup() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
  return maindup_.GetNoArena();
}
void ImageMarkerUrlTrace::set_maindup(const ::std::string& value) {
  set_has_maindup();
  maindup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
}
#if LANG_CXX11
void ImageMarkerUrlTrace::set_maindup(::std::string&& value) {
  set_has_maindup();
  maindup_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
}
#endif
void ImageMarkerUrlTrace::set_maindup(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_maindup();
  maindup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
}
void ImageMarkerUrlTrace::set_maindup(const char* value, size_t size) {
  set_has_maindup();
  maindup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
}
::std::string* ImageMarkerUrlTrace::mutable_maindup() {
  set_has_maindup();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
  return maindup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageMarkerUrlTrace::release_maindup() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
  clear_has_maindup();
  return maindup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageMarkerUrlTrace::set_allocated_maindup(::std::string* maindup) {
  if (maindup != NULL) {
    set_has_maindup();
  } else {
    clear_has_maindup();
  }
  maindup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maindup);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageMarkerUrlTrace.mainDup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageTexts_PageTexts::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageTexts_PageTexts::ImageTexts_PageTexts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
}
ImageTexts_PageTexts::ImageTexts_PageTexts(const ImageTexts_PageTexts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      text_(from.text_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
}

void ImageTexts_PageTexts::SharedCtor() {
  _cached_size_ = 0;
}

ImageTexts_PageTexts::~ImageTexts_PageTexts() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  SharedDtor();
}

void ImageTexts_PageTexts::SharedDtor() {
}

void ImageTexts_PageTexts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageTexts_PageTexts::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageTexts_PageTexts& ImageTexts_PageTexts::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageTexts_PageTexts* ImageTexts_PageTexts::New(::google::protobuf::Arena* arena) const {
  ImageTexts_PageTexts* n = new ImageTexts_PageTexts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageTexts_PageTexts::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageTexts_PageTexts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.TextBlock text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  return false;
#undef DO_
}

void ImageTexts_PageTexts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TextBlock text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
}

::google::protobuf::uint8* ImageTexts_PageTexts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.TextBlock text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->text(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  return target;
}

size_t ImageTexts_PageTexts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.TextBlock text = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->text_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageTexts_PageTexts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTexts_PageTexts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageTexts_PageTexts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
    MergeFrom(*source);
  }
}

void ImageTexts_PageTexts::MergeFrom(const ImageTexts_PageTexts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
}

void ImageTexts_PageTexts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTexts_PageTexts::CopyFrom(const ImageTexts_PageTexts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageTexts.PageTexts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTexts_PageTexts::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->text())) return false;
  return true;
}

void ImageTexts_PageTexts::Swap(ImageTexts_PageTexts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageTexts_PageTexts::InternalSwap(ImageTexts_PageTexts* other) {
  using std::swap;
  text_.InternalSwap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageTexts_PageTexts::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageTexts_PageTexts

// repeated .ru.mail.go.webbase.blobs.TextBlock text = 1;
int ImageTexts_PageTexts::text_size() const {
  return text_.size();
}
void ImageTexts_PageTexts::clear_text() {
  text_.Clear();
}
const ::ru::mail::go::webbase::blobs::TextBlock& ImageTexts_PageTexts::text(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageTexts.PageTexts.text)
  return text_.Get(index);
}
::ru::mail::go::webbase::blobs::TextBlock* ImageTexts_PageTexts::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageTexts.PageTexts.text)
  return text_.Mutable(index);
}
::ru::mail::go::webbase::blobs::TextBlock* ImageTexts_PageTexts::add_text() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageTexts.PageTexts.text)
  return text_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TextBlock >*
ImageTexts_PageTexts::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageTexts.PageTexts.text)
  return &text_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::TextBlock >&
ImageTexts_PageTexts::text() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageTexts.PageTexts.text)
  return text_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageTexts::kTextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageTexts::ImageTexts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageTexts)
}
ImageTexts::ImageTexts(const ImageTexts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      texts_(from.texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageTexts)
}

void ImageTexts::SharedCtor() {
  _cached_size_ = 0;
}

ImageTexts::~ImageTexts() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageTexts)
  SharedDtor();
}

void ImageTexts::SharedDtor() {
}

void ImageTexts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageTexts::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageTexts& ImageTexts::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageTexts* ImageTexts::New(::google::protobuf::Arena* arena) const {
  ImageTexts* n = new ImageTexts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageTexts::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageTexts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageTexts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.ImageTexts.PageTexts texts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_texts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageTexts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageTexts)
  return false;
#undef DO_
}

void ImageTexts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageTexts.PageTexts texts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->texts(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageTexts)
}

::google::protobuf::uint8* ImageTexts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageTexts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.ImageTexts.PageTexts texts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->texts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageTexts)
  return target;
}

size_t ImageTexts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageTexts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.ImageTexts.PageTexts texts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->texts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageTexts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageTexts)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageTexts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageTexts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageTexts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageTexts)
    MergeFrom(*source);
  }
}

void ImageTexts::MergeFrom(const ImageTexts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageTexts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texts_.MergeFrom(from.texts_);
}

void ImageTexts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageTexts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageTexts::CopyFrom(const ImageTexts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageTexts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageTexts::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->texts())) return false;
  return true;
}

void ImageTexts::Swap(ImageTexts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageTexts::InternalSwap(ImageTexts* other) {
  using std::swap;
  texts_.InternalSwap(&other->texts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageTexts::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageTexts

// repeated .ru.mail.go.webbase.blobs.ImageTexts.PageTexts texts = 1;
int ImageTexts::texts_size() const {
  return texts_.size();
}
void ImageTexts::clear_texts() {
  texts_.Clear();
}
const ::ru::mail::go::webbase::blobs::ImageTexts_PageTexts& ImageTexts::texts(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageTexts.texts)
  return texts_.Get(index);
}
::ru::mail::go::webbase::blobs::ImageTexts_PageTexts* ImageTexts::mutable_texts(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageTexts.texts)
  return texts_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ImageTexts_PageTexts* ImageTexts::add_texts() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageTexts.texts)
  return texts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageTexts_PageTexts >*
ImageTexts::mutable_texts() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageTexts.texts)
  return &texts_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ImageTexts_PageTexts >&
ImageTexts::texts() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageTexts.texts)
  return texts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusteringResult::kPagesWeightsFieldNumber;
const int ClusteringResult::kKeywordsFieldNumber;
const int ClusteringResult::kKWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusteringResult::ClusteringResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ClusteringResult)
}
ClusteringResult::ClusteringResult(const ClusteringResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pagesweights_(from.pagesweights_),
      keywords_(from.keywords_),
      kweights_(from.kweights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ClusteringResult)
}

void ClusteringResult::SharedCtor() {
  _cached_size_ = 0;
}

ClusteringResult::~ClusteringResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ClusteringResult)
  SharedDtor();
}

void ClusteringResult::SharedDtor() {
}

void ClusteringResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusteringResult::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusteringResult& ClusteringResult::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusteringResult* ClusteringResult::New(::google::protobuf::Arena* arena) const {
  ClusteringResult* n = new ClusteringResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusteringResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ClusteringResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagesweights_.Clear();
  keywords_.Clear();
  kweights_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClusteringResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ClusteringResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float pagesWeights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_pagesweights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pagesweights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keywords = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            static_cast<int>(this->keywords(this->keywords_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ClusteringResult.keywords");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kWeights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_kweights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kweights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ClusteringResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ClusteringResult)
  return false;
#undef DO_
}

void ClusteringResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ClusteringResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float pagesWeights = 1;
  for (int i = 0, n = this->pagesweights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->pagesweights(i), output);
  }

  // repeated string keywords = 2;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClusteringResult.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keywords(i), output);
  }

  // repeated float kWeights = 3;
  for (int i = 0, n = this->kweights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->kweights(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ClusteringResult)
}

::google::protobuf::uint8* ClusteringResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ClusteringResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float pagesWeights = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->pagesweights_, target);

  // repeated string keywords = 2;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ClusteringResult.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->keywords(i), target);
  }

  // repeated float kWeights = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->kweights_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ClusteringResult)
  return target;
}

size_t ClusteringResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ClusteringResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float pagesWeights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pagesweights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pagesweights_size());
    total_size += data_size;
  }

  // repeated string keywords = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keywords_size());
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  // repeated float kWeights = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kweights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kweights_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusteringResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ClusteringResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusteringResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusteringResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ClusteringResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ClusteringResult)
    MergeFrom(*source);
  }
}

void ClusteringResult::MergeFrom(const ClusteringResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ClusteringResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pagesweights_.MergeFrom(from.pagesweights_);
  keywords_.MergeFrom(from.keywords_);
  kweights_.MergeFrom(from.kweights_);
}

void ClusteringResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ClusteringResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusteringResult::CopyFrom(const ClusteringResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ClusteringResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusteringResult::IsInitialized() const {
  return true;
}

void ClusteringResult::Swap(ClusteringResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusteringResult::InternalSwap(ClusteringResult* other) {
  using std::swap;
  pagesweights_.InternalSwap(&other->pagesweights_);
  keywords_.InternalSwap(&other->keywords_);
  kweights_.InternalSwap(&other->kweights_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusteringResult::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusteringResult

// repeated float pagesWeights = 1;
int ClusteringResult::pagesweights_size() const {
  return pagesweights_.size();
}
void ClusteringResult::clear_pagesweights() {
  pagesweights_.Clear();
}
float ClusteringResult::pagesweights(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClusteringResult.pagesWeights)
  return pagesweights_.Get(index);
}
void ClusteringResult::set_pagesweights(int index, float value) {
  pagesweights_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClusteringResult.pagesWeights)
}
void ClusteringResult::add_pagesweights(float value) {
  pagesweights_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ClusteringResult.pagesWeights)
}
const ::google::protobuf::RepeatedField< float >&
ClusteringResult::pagesweights() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ClusteringResult.pagesWeights)
  return pagesweights_;
}
::google::protobuf::RepeatedField< float >*
ClusteringResult::mutable_pagesweights() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ClusteringResult.pagesWeights)
  return &pagesweights_;
}

// repeated string keywords = 2;
int ClusteringResult::keywords_size() const {
  return keywords_.size();
}
void ClusteringResult::clear_keywords() {
  keywords_.Clear();
}
const ::std::string& ClusteringResult::keywords(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  return keywords_.Get(index);
}
::std::string* ClusteringResult::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  return keywords_.Mutable(index);
}
void ClusteringResult::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ClusteringResult::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
void ClusteringResult::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
void ClusteringResult::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
::std::string* ClusteringResult::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  return keywords_.Add();
}
void ClusteringResult::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
#if LANG_CXX11
void ClusteringResult::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
#endif
void ClusteringResult::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
void ClusteringResult::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClusteringResult::keywords() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  return keywords_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ClusteringResult::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ClusteringResult.keywords)
  return &keywords_;
}

// repeated float kWeights = 3;
int ClusteringResult::kweights_size() const {
  return kweights_.size();
}
void ClusteringResult::clear_kweights() {
  kweights_.Clear();
}
float ClusteringResult::kweights(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ClusteringResult.kWeights)
  return kweights_.Get(index);
}
void ClusteringResult::set_kweights(int index, float value) {
  kweights_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ClusteringResult.kWeights)
}
void ClusteringResult::add_kweights(float value) {
  kweights_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ClusteringResult.kWeights)
}
const ::google::protobuf::RepeatedField< float >&
ClusteringResult::kweights() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ClusteringResult.kWeights)
  return kweights_;
}
::google::protobuf::RepeatedField< float >*
ClusteringResult::mutable_kweights() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ClusteringResult.kWeights)
  return &kweights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostWithImgUrls::kHostFieldNumber;
const int HostWithImgUrls::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostWithImgUrls::HostWithImgUrls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.HostWithImgUrls)
}
HostWithImgUrls::HostWithImgUrls(const HostWithImgUrls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_(from.url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.HostWithImgUrls)
}

void HostWithImgUrls::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HostWithImgUrls::~HostWithImgUrls() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.HostWithImgUrls)
  SharedDtor();
}

void HostWithImgUrls::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostWithImgUrls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostWithImgUrls::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostWithImgUrls& HostWithImgUrls::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostWithImgUrls* HostWithImgUrls::New(::google::protobuf::Arena* arena) const {
  HostWithImgUrls* n = new HostWithImgUrls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostWithImgUrls::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  if (has_host()) {
    GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*host_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HostWithImgUrls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.HostWithImgUrls.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.HostWithImgUrls.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.HostWithImgUrls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.HostWithImgUrls)
  return false;
#undef DO_
}

void HostWithImgUrls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.HostWithImgUrls.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.HostWithImgUrls.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.HostWithImgUrls)
}

::google::protobuf::uint8* HostWithImgUrls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.HostWithImgUrls.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.HostWithImgUrls.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->url(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.HostWithImgUrls)
  return target;
}

size_t HostWithImgUrls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string url = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  // optional string host = 1;
  if (has_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostWithImgUrls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  GOOGLE_DCHECK_NE(&from, this);
  const HostWithImgUrls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostWithImgUrls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.HostWithImgUrls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.HostWithImgUrls)
    MergeFrom(*source);
  }
}

void HostWithImgUrls::MergeFrom(const HostWithImgUrls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  if (from.has_host()) {
    set_has_host();
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void HostWithImgUrls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostWithImgUrls::CopyFrom(const HostWithImgUrls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.HostWithImgUrls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostWithImgUrls::IsInitialized() const {
  return true;
}

void HostWithImgUrls::Swap(HostWithImgUrls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostWithImgUrls::InternalSwap(HostWithImgUrls* other) {
  using std::swap;
  url_.InternalSwap(&other->url_);
  host_.Swap(&other->host_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostWithImgUrls::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostWithImgUrls

// optional string host = 1;
bool HostWithImgUrls::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HostWithImgUrls::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void HostWithImgUrls::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void HostWithImgUrls::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& HostWithImgUrls::host() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
  return host_.GetNoArena();
}
void HostWithImgUrls::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
}
#if LANG_CXX11
void HostWithImgUrls::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
}
#endif
void HostWithImgUrls::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
}
void HostWithImgUrls::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
}
::std::string* HostWithImgUrls::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostWithImgUrls::release_host() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostWithImgUrls::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.HostWithImgUrls.host)
}

// repeated string url = 2;
int HostWithImgUrls::url_size() const {
  return url_.size();
}
void HostWithImgUrls::clear_url() {
  url_.Clear();
}
const ::std::string& HostWithImgUrls::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  return url_.Get(index);
}
::std::string* HostWithImgUrls::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  return url_.Mutable(index);
}
void HostWithImgUrls::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void HostWithImgUrls::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void HostWithImgUrls::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
void HostWithImgUrls::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
::std::string* HostWithImgUrls::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  return url_.Add();
}
void HostWithImgUrls::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
#if LANG_CXX11
void HostWithImgUrls::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
#endif
void HostWithImgUrls::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
void HostWithImgUrls::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HostWithImgUrls::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HostWithImgUrls::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.HostWithImgUrls.url)
  return &url_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbList::kThumbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbList::ThumbList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ThumbList)
}
ThumbList::ThumbList(const ThumbList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      thumb_(from.thumb_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ThumbList)
}

void ThumbList::SharedCtor() {
  _cached_size_ = 0;
}

ThumbList::~ThumbList() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ThumbList)
  SharedDtor();
}

void ThumbList::SharedDtor() {
}

void ThumbList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbList::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThumbList& ThumbList::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThumbList* ThumbList::New(::google::protobuf::Arena* arena) const {
  ThumbList* n = new ThumbList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThumbList::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ThumbList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumb_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThumbList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ThumbList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ThumbList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ThumbList)
  return false;
#undef DO_
}

void ThumbList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ThumbList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumb_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thumb(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ThumbList)
}

::google::protobuf::uint8* ThumbList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ThumbList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumb_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->thumb(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ThumbList)
  return target;
}

size_t ThumbList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ThumbList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->thumb_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumb(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ThumbList)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThumbList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ThumbList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ThumbList)
    MergeFrom(*source);
  }
}

void ThumbList::MergeFrom(const ThumbList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ThumbList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumb_.MergeFrom(from.thumb_);
}

void ThumbList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ThumbList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbList::CopyFrom(const ThumbList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ThumbList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->thumb())) return false;
  return true;
}

void ThumbList::Swap(ThumbList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThumbList::InternalSwap(ThumbList* other) {
  using std::swap;
  thumb_.InternalSwap(&other->thumb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThumbList::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThumbList

// repeated .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
int ThumbList::thumb_size() const {
  return thumb_.size();
}
void ThumbList::clear_thumb() {
  thumb_.Clear();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ThumbList::thumb(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbList.thumb)
  return thumb_.Get(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbList::mutable_thumb(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ThumbList.thumb)
  return thumb_.Mutable(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbList::add_thumb() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ThumbList.thumb)
  return thumb_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >*
ThumbList::mutable_thumb() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ThumbList.thumb)
  return &thumb_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >&
ThumbList::thumb() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ThumbList.thumb)
  return thumb_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbDoc::kUrlFieldNumber;
const int ThumbDoc::kThumblistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbDoc::ThumbDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ThumbDoc)
}
ThumbDoc::ThumbDoc(const ThumbDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_thumblist()) {
    thumblist_ = new ::ru::mail::go::webbase::blobs::ThumbList(*from.thumblist_);
  } else {
    thumblist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ThumbDoc)
}

void ThumbDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumblist_ = NULL;
}

ThumbDoc::~ThumbDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ThumbDoc)
  SharedDtor();
}

void ThumbDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thumblist_;
}

void ThumbDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbDoc::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThumbDoc& ThumbDoc::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThumbDoc* ThumbDoc::New(::google::protobuf::Arena* arena) const {
  ThumbDoc* n = new ThumbDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThumbDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ThumbDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(thumblist_ != NULL);
      thumblist_->::ru::mail::go::webbase::blobs::ThumbList::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThumbDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ThumbDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ThumbDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumblist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ThumbDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ThumbDoc)
  return false;
#undef DO_
}

void ThumbDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ThumbDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ThumbDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->thumblist_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ThumbDoc)
}

::google::protobuf::uint8* ThumbDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ThumbDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ThumbDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->thumblist_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ThumbDoc)
  return target;
}

size_t ThumbDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ThumbDoc)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_thumblist()) {
    // required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumblist_);
  }

  return total_size;
}
size_t ThumbDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ThumbDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumblist_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ThumbDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThumbDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ThumbDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ThumbDoc)
    MergeFrom(*source);
  }
}

void ThumbDoc::MergeFrom(const ThumbDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ThumbDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_thumblist()->::ru::mail::go::webbase::blobs::ThumbList::MergeFrom(from.thumblist());
    }
  }
}

void ThumbDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ThumbDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbDoc::CopyFrom(const ThumbDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ThumbDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_thumblist()) {
    if (!this->thumblist_->IsInitialized()) return false;
  }
  return true;
}

void ThumbDoc::Swap(ThumbDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThumbDoc::InternalSwap(ThumbDoc* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(thumblist_, other->thumblist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThumbDoc::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThumbDoc

// required string url = 1;
bool ThumbDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThumbDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ThumbDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThumbDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ThumbDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbDoc.url)
  return url_.GetNoArena();
}
void ThumbDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ThumbDoc.url)
}
#if LANG_CXX11
void ThumbDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ThumbDoc.url)
}
#endif
void ThumbDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ThumbDoc.url)
}
void ThumbDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ThumbDoc.url)
}
::std::string* ThumbDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ThumbDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThumbDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ThumbDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThumbDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ThumbDoc.url)
}

// required .ru.mail.go.webbase.blobs.ThumbList thumblist = 2;
bool ThumbDoc::has_thumblist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ThumbDoc::set_has_thumblist() {
  _has_bits_[0] |= 0x00000002u;
}
void ThumbDoc::clear_has_thumblist() {
  _has_bits_[0] &= ~0x00000002u;
}
void ThumbDoc::clear_thumblist() {
  if (thumblist_ != NULL) thumblist_->::ru::mail::go::webbase::blobs::ThumbList::Clear();
  clear_has_thumblist();
}
const ::ru::mail::go::webbase::blobs::ThumbList& ThumbDoc::thumblist() const {
  const ::ru::mail::go::webbase::blobs::ThumbList* p = thumblist_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbDoc.thumblist)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ThumbList*>(
      &::ru::mail::go::webbase::blobs::_ThumbList_default_instance_);
}
::ru::mail::go::webbase::blobs::ThumbList* ThumbDoc::mutable_thumblist() {
  set_has_thumblist();
  if (thumblist_ == NULL) {
    thumblist_ = new ::ru::mail::go::webbase::blobs::ThumbList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ThumbDoc.thumblist)
  return thumblist_;
}
::ru::mail::go::webbase::blobs::ThumbList* ThumbDoc::release_thumblist() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ThumbDoc.thumblist)
  clear_has_thumblist();
  ::ru::mail::go::webbase::blobs::ThumbList* temp = thumblist_;
  thumblist_ = NULL;
  return temp;
}
void ThumbDoc::set_allocated_thumblist(::ru::mail::go::webbase::blobs::ThumbList* thumblist) {
  delete thumblist_;
  thumblist_ = thumblist;
  if (thumblist) {
    set_has_thumblist();
  } else {
    clear_has_thumblist();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ThumbDoc.thumblist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RatioStats::kQueryFieldNumber;
const int RatioStats::kTimeFieldNumber;
const int RatioStats::kKindFieldNumber;
const int RatioStats::kMrcuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RatioStats::RatioStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.RatioStats)
}
RatioStats::RatioStats(const RatioStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mrcu()) {
    mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.RatioStats)
}

void RatioStats::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&time_)) + sizeof(kind_));
}

RatioStats::~RatioStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.RatioStats)
  SharedDtor();
}

void RatioStats::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mrcu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RatioStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RatioStats::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RatioStats& RatioStats::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

RatioStats* RatioStats::New(::google::protobuf::Arena* arena) const {
  RatioStats* n = new RatioStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RatioStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.RatioStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mrcu_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mrcu_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kind_) -
        reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RatioStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.RatioStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.RatioStats.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::RatioStats_Kind_IsValid(value)) {
            set_kind(static_cast< ::ru::mail::go::webbase::blobs::RatioStats_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string mrcu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mrcu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mrcu().data(), static_cast<int>(this->mrcu().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.RatioStats.mrcu");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.RatioStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.RatioStats)
  return false;
#undef DO_
}

void RatioStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.RatioStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RatioStats.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  // required string mrcu = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RatioStats.mrcu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mrcu(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.RatioStats)
}

::google::protobuf::uint8* RatioStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.RatioStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RatioStats.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  // required string mrcu = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mrcu().data(), static_cast<int>(this->mrcu().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.RatioStats.mrcu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mrcu(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.RatioStats)
  return target;
}

size_t RatioStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.RatioStats)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_mrcu()) {
    // required string mrcu = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_kind()) {
    // required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  return total_size;
}
size_t RatioStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.RatioStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string query = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required string mrcu = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mrcu());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RatioStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.RatioStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RatioStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RatioStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.RatioStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.RatioStats)
    MergeFrom(*source);
  }
}

void RatioStats::MergeFrom(const RatioStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.RatioStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mrcu();
      mrcu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mrcu_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RatioStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.RatioStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RatioStats::CopyFrom(const RatioStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.RatioStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatioStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RatioStats::Swap(RatioStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RatioStats::InternalSwap(RatioStats* other) {
  using std::swap;
  query_.Swap(&other->query_);
  mrcu_.Swap(&other->mrcu_);
  swap(time_, other->time_);
  swap(kind_, other->kind_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RatioStats::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RatioStats

// required string query = 1;
bool RatioStats::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RatioStats::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void RatioStats::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void RatioStats::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& RatioStats::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RatioStats.query)
  return query_.GetNoArena();
}
void RatioStats::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RatioStats.query)
}
#if LANG_CXX11
void RatioStats::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RatioStats.query)
}
#endif
void RatioStats::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RatioStats.query)
}
void RatioStats::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RatioStats.query)
}
::std::string* RatioStats::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RatioStats.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RatioStats::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RatioStats.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RatioStats::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RatioStats.query)
}

// required uint64 time = 2;
bool RatioStats::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RatioStats::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void RatioStats::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void RatioStats::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 RatioStats::time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RatioStats.time)
  return time_;
}
void RatioStats::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RatioStats.time)
}

// required .ru.mail.go.webbase.blobs.RatioStats.Kind kind = 3;
bool RatioStats::has_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RatioStats::set_has_kind() {
  _has_bits_[0] |= 0x00000008u;
}
void RatioStats::clear_has_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
void RatioStats::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
::ru::mail::go::webbase::blobs::RatioStats_Kind RatioStats::kind() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RatioStats.kind)
  return static_cast< ::ru::mail::go::webbase::blobs::RatioStats_Kind >(kind_);
}
void RatioStats::set_kind(::ru::mail::go::webbase::blobs::RatioStats_Kind value) {
  assert(::ru::mail::go::webbase::blobs::RatioStats_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RatioStats.kind)
}

// required string mrcu = 4;
bool RatioStats::has_mrcu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RatioStats::set_has_mrcu() {
  _has_bits_[0] |= 0x00000002u;
}
void RatioStats::clear_has_mrcu() {
  _has_bits_[0] &= ~0x00000002u;
}
void RatioStats::clear_mrcu() {
  mrcu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mrcu();
}
const ::std::string& RatioStats::mrcu() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.RatioStats.mrcu)
  return mrcu_.GetNoArena();
}
void RatioStats::set_mrcu(const ::std::string& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.RatioStats.mrcu)
}
#if LANG_CXX11
void RatioStats::set_mrcu(::std::string&& value) {
  set_has_mrcu();
  mrcu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.RatioStats.mrcu)
}
#endif
void RatioStats::set_mrcu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.RatioStats.mrcu)
}
void RatioStats::set_mrcu(const char* value, size_t size) {
  set_has_mrcu();
  mrcu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.RatioStats.mrcu)
}
::std::string* RatioStats::mutable_mrcu() {
  set_has_mrcu();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.RatioStats.mrcu)
  return mrcu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RatioStats::release_mrcu() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.RatioStats.mrcu)
  clear_has_mrcu();
  return mrcu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RatioStats::set_allocated_mrcu(::std::string* mrcu) {
  if (mrcu != NULL) {
    set_has_mrcu();
  } else {
    clear_has_mrcu();
  }
  mrcu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrcu);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.RatioStats.mrcu)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaviconObj::kSiteURLFieldNumber;
const int FaviconObj::kFaviconURLFieldNumber;
const int FaviconObj::kFaviconFieldNumber;
const int FaviconObj::kFaviconURLHighResFieldNumber;
const int FaviconObj::kFaviconHighResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaviconObj::FaviconObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.FaviconObj)
}
FaviconObj::FaviconObj(const FaviconObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  siteurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_siteurl()) {
    siteurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.siteurl_);
  }
  faviconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_faviconurl()) {
    faviconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.faviconurl_);
  }
  faviconurl_high_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_faviconurl_high_res()) {
    faviconurl_high_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.faviconurl_high_res_);
  }
  if (from.has_favicon()) {
    favicon_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.favicon_);
  } else {
    favicon_ = NULL;
  }
  if (from.has_favicon_high_res()) {
    favicon_high_res_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.favicon_high_res_);
  } else {
    favicon_high_res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.FaviconObj)
}

void FaviconObj::SharedCtor() {
  _cached_size_ = 0;
  siteurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faviconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faviconurl_high_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&favicon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favicon_high_res_) -
      reinterpret_cast<char*>(&favicon_)) + sizeof(favicon_high_res_));
}

FaviconObj::~FaviconObj() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.FaviconObj)
  SharedDtor();
}

void FaviconObj::SharedDtor() {
  siteurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faviconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faviconurl_high_res_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete favicon_;
  if (this != internal_default_instance()) delete favicon_high_res_;
}

void FaviconObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaviconObj::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaviconObj& FaviconObj::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaviconObj* FaviconObj::New(::google::protobuf::Arena* arena) const {
  FaviconObj* n = new FaviconObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaviconObj::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.FaviconObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!siteurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*siteurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!faviconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*faviconurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!faviconurl_high_res_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*faviconurl_high_res_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(favicon_ != NULL);
      favicon_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(favicon_high_res_ != NULL);
      favicon_high_res_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FaviconObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.FaviconObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string siteURL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siteurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->siteurl().data(), static_cast<int>(this->siteurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FaviconObj.siteURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string faviconURL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faviconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->faviconurl().data(), static_cast<int>(this->faviconurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FaviconObj.faviconURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string faviconURL_high_res = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faviconurl_high_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->faviconurl_high_res().data(), static_cast<int>(this->faviconurl_high_res().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Thumb favicon_high_res = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_high_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.FaviconObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.FaviconObj)
  return false;
#undef DO_
}

void FaviconObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.FaviconObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string siteURL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->siteurl().data(), static_cast<int>(this->siteurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.siteURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->siteurl(), output);
  }

  // required string faviconURL = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faviconurl().data(), static_cast<int>(this->faviconurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.faviconURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->faviconurl(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->favicon_, output);
  }

  // optional string faviconURL_high_res = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faviconurl_high_res().data(), static_cast<int>(this->faviconurl_high_res().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->faviconurl_high_res(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb favicon_high_res = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->favicon_high_res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.FaviconObj)
}

::google::protobuf::uint8* FaviconObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.FaviconObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string siteURL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->siteurl().data(), static_cast<int>(this->siteurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.siteURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->siteurl(), target);
  }

  // required string faviconURL = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faviconurl().data(), static_cast<int>(this->faviconurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.faviconURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->faviconurl(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->favicon_, deterministic, target);
  }

  // optional string faviconURL_high_res = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faviconurl_high_res().data(), static_cast<int>(this->faviconurl_high_res().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->faviconurl_high_res(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb favicon_high_res = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->favicon_high_res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.FaviconObj)
  return target;
}

size_t FaviconObj::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.FaviconObj)
  size_t total_size = 0;

  if (has_siteurl()) {
    // required string siteURL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->siteurl());
  }

  if (has_faviconurl()) {
    // required string faviconURL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->faviconurl());
  }

  if (has_favicon()) {
    // required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->favicon_);
  }

  return total_size;
}
size_t FaviconObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.FaviconObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string siteURL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->siteurl());

    // required string faviconURL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->faviconurl());

    // required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->favicon_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string faviconURL_high_res = 4;
  if (has_faviconurl_high_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->faviconurl_high_res());
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb favicon_high_res = 5;
  if (has_favicon_high_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->favicon_high_res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaviconObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.FaviconObj)
  GOOGLE_DCHECK_NE(&from, this);
  const FaviconObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaviconObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.FaviconObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.FaviconObj)
    MergeFrom(*source);
  }
}

void FaviconObj::MergeFrom(const FaviconObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.FaviconObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_siteurl();
      siteurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.siteurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_faviconurl();
      faviconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.faviconurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_faviconurl_high_res();
      faviconurl_high_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.faviconurl_high_res_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_favicon()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.favicon());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_favicon_high_res()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.favicon_high_res());
    }
  }
}

void FaviconObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.FaviconObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaviconObj::CopyFrom(const FaviconObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.FaviconObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_favicon()) {
    if (!this->favicon_->IsInitialized()) return false;
  }
  if (has_favicon_high_res()) {
    if (!this->favicon_high_res_->IsInitialized()) return false;
  }
  return true;
}

void FaviconObj::Swap(FaviconObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaviconObj::InternalSwap(FaviconObj* other) {
  using std::swap;
  siteurl_.Swap(&other->siteurl_);
  faviconurl_.Swap(&other->faviconurl_);
  faviconurl_high_res_.Swap(&other->faviconurl_high_res_);
  swap(favicon_, other->favicon_);
  swap(favicon_high_res_, other->favicon_high_res_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaviconObj::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaviconObj

// required string siteURL = 1;
bool FaviconObj::has_siteurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaviconObj::set_has_siteurl() {
  _has_bits_[0] |= 0x00000001u;
}
void FaviconObj::clear_has_siteurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void FaviconObj::clear_siteurl() {
  siteurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_siteurl();
}
const ::std::string& FaviconObj::siteurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
  return siteurl_.GetNoArena();
}
void FaviconObj::set_siteurl(const ::std::string& value) {
  set_has_siteurl();
  siteurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
}
#if LANG_CXX11
void FaviconObj::set_siteurl(::std::string&& value) {
  set_has_siteurl();
  siteurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
}
#endif
void FaviconObj::set_siteurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_siteurl();
  siteurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
}
void FaviconObj::set_siteurl(const char* value, size_t size) {
  set_has_siteurl();
  siteurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
}
::std::string* FaviconObj::mutable_siteurl() {
  set_has_siteurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
  return siteurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaviconObj::release_siteurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
  clear_has_siteurl();
  return siteurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconObj::set_allocated_siteurl(::std::string* siteurl) {
  if (siteurl != NULL) {
    set_has_siteurl();
  } else {
    clear_has_siteurl();
  }
  siteurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), siteurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FaviconObj.siteURL)
}

// required string faviconURL = 2;
bool FaviconObj::has_faviconurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaviconObj::set_has_faviconurl() {
  _has_bits_[0] |= 0x00000002u;
}
void FaviconObj::clear_has_faviconurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void FaviconObj::clear_faviconurl() {
  faviconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_faviconurl();
}
const ::std::string& FaviconObj::faviconurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
  return faviconurl_.GetNoArena();
}
void FaviconObj::set_faviconurl(const ::std::string& value) {
  set_has_faviconurl();
  faviconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
}
#if LANG_CXX11
void FaviconObj::set_faviconurl(::std::string&& value) {
  set_has_faviconurl();
  faviconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
}
#endif
void FaviconObj::set_faviconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_faviconurl();
  faviconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
}
void FaviconObj::set_faviconurl(const char* value, size_t size) {
  set_has_faviconurl();
  faviconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
}
::std::string* FaviconObj::mutable_faviconurl() {
  set_has_faviconurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
  return faviconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaviconObj::release_faviconurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
  clear_has_faviconurl();
  return faviconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconObj::set_allocated_faviconurl(::std::string* faviconurl) {
  if (faviconurl != NULL) {
    set_has_faviconurl();
  } else {
    clear_has_faviconurl();
  }
  faviconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faviconurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FaviconObj.faviconURL)
}

// required .ru.mail.go.webbase.parsing.img.Thumb favicon = 3;
bool FaviconObj::has_favicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FaviconObj::set_has_favicon() {
  _has_bits_[0] |= 0x00000008u;
}
void FaviconObj::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000008u;
}
void FaviconObj::clear_favicon() {
  if (favicon_ != NULL) favicon_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_favicon();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& FaviconObj::favicon() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = favicon_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FaviconObj.favicon)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* FaviconObj::mutable_favicon() {
  set_has_favicon();
  if (favicon_ == NULL) {
    favicon_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FaviconObj.favicon)
  return favicon_;
}
::ru::mail::go::webbase::parsing::img::Thumb* FaviconObj::release_favicon() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FaviconObj.favicon)
  clear_has_favicon();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = favicon_;
  favicon_ = NULL;
  return temp;
}
void FaviconObj::set_allocated_favicon(::ru::mail::go::webbase::parsing::img::Thumb* favicon) {
  delete favicon_;
  favicon_ = favicon;
  if (favicon) {
    set_has_favicon();
  } else {
    clear_has_favicon();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FaviconObj.favicon)
}

// optional string faviconURL_high_res = 4;
bool FaviconObj::has_faviconurl_high_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaviconObj::set_has_faviconurl_high_res() {
  _has_bits_[0] |= 0x00000004u;
}
void FaviconObj::clear_has_faviconurl_high_res() {
  _has_bits_[0] &= ~0x00000004u;
}
void FaviconObj::clear_faviconurl_high_res() {
  faviconurl_high_res_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_faviconurl_high_res();
}
const ::std::string& FaviconObj::faviconurl_high_res() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
  return faviconurl_high_res_.GetNoArena();
}
void FaviconObj::set_faviconurl_high_res(const ::std::string& value) {
  set_has_faviconurl_high_res();
  faviconurl_high_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
}
#if LANG_CXX11
void FaviconObj::set_faviconurl_high_res(::std::string&& value) {
  set_has_faviconurl_high_res();
  faviconurl_high_res_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
}
#endif
void FaviconObj::set_faviconurl_high_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_faviconurl_high_res();
  faviconurl_high_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
}
void FaviconObj::set_faviconurl_high_res(const char* value, size_t size) {
  set_has_faviconurl_high_res();
  faviconurl_high_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
}
::std::string* FaviconObj::mutable_faviconurl_high_res() {
  set_has_faviconurl_high_res();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
  return faviconurl_high_res_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaviconObj::release_faviconurl_high_res() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
  clear_has_faviconurl_high_res();
  return faviconurl_high_res_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconObj::set_allocated_faviconurl_high_res(::std::string* faviconurl_high_res) {
  if (faviconurl_high_res != NULL) {
    set_has_faviconurl_high_res();
  } else {
    clear_has_faviconurl_high_res();
  }
  faviconurl_high_res_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faviconurl_high_res);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FaviconObj.faviconURL_high_res)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb favicon_high_res = 5;
bool FaviconObj::has_favicon_high_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FaviconObj::set_has_favicon_high_res() {
  _has_bits_[0] |= 0x00000010u;
}
void FaviconObj::clear_has_favicon_high_res() {
  _has_bits_[0] &= ~0x00000010u;
}
void FaviconObj::clear_favicon_high_res() {
  if (favicon_high_res_ != NULL) favicon_high_res_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_favicon_high_res();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& FaviconObj::favicon_high_res() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = favicon_high_res_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.FaviconObj.favicon_high_res)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* FaviconObj::mutable_favicon_high_res() {
  set_has_favicon_high_res();
  if (favicon_high_res_ == NULL) {
    favicon_high_res_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.FaviconObj.favicon_high_res)
  return favicon_high_res_;
}
::ru::mail::go::webbase::parsing::img::Thumb* FaviconObj::release_favicon_high_res() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.FaviconObj.favicon_high_res)
  clear_has_favicon_high_res();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = favicon_high_res_;
  favicon_high_res_ = NULL;
  return temp;
}
void FaviconObj::set_allocated_favicon_high_res(::ru::mail::go::webbase::parsing::img::Thumb* favicon_high_res) {
  delete favicon_high_res_;
  favicon_high_res_ = favicon_high_res;
  if (favicon_high_res) {
    set_has_favicon_high_res();
  } else {
    clear_has_favicon_high_res();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.FaviconObj.favicon_high_res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageStructInfo::kSourceFieldNumber;
const int ImageStructInfo::kPageFullURLFieldNumber;
const int ImageStructInfo::kTitleFieldNumber;
const int ImageStructInfo::kTextFieldNumber;
const int ImageStructInfo::kImageTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageStructInfo::ImageStructInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageStructInfo)
}
ImageStructInfo::ImageStructInfo(const ImageStructInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_page_full_url()) {
    page_full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_full_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&image_time_, &from.image_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&image_time_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageStructInfo)
}

void ImageStructInfo::SharedCtor() {
  _cached_size_ = 0;
  page_full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&image_time_)) + sizeof(source_));
}

ImageStructInfo::~ImageStructInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageStructInfo)
  SharedDtor();
}

void ImageStructInfo::SharedDtor() {
  page_full_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageStructInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageStructInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageStructInfo& ImageStructInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageStructInfo* ImageStructInfo::New(::google::protobuf::Arena* arena) const {
  ImageStructInfo* n = new ImageStructInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageStructInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!page_full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*page_full_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&image_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&image_time_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageStructInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string page_full_URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_full_url().data(), static_cast<int>(this->page_full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageStructInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageStructInfo.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 image_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_image_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageStructInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageStructInfo)
  return false;
#undef DO_
}

void ImageStructInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // required string page_full_URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_full_url().data(), static_cast<int>(this->page_full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_full_url(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional int64 image_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->image_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageStructInfo)
}

::google::protobuf::uint8* ImageStructInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // required string page_full_URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_full_url().data(), static_cast<int>(this->page_full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_full_url(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageStructInfo.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional int64 image_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->image_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageStructInfo)
  return target;
}

size_t ImageStructInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  size_t total_size = 0;

  if (has_page_full_url()) {
    // required string page_full_URL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_full_url());
  }

  if (has_source()) {
    // required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  return total_size;
}
size_t ImageStructInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string page_full_URL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_full_url());

    // required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int64 image_time = 5;
    if (has_image_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->image_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageStructInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageStructInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageStructInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageStructInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageStructInfo)
    MergeFrom(*source);
  }
}

void ImageStructInfo::MergeFrom(const ImageStructInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_page_full_url();
      page_full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_full_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000008u) {
      image_time_ = from.image_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageStructInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageStructInfo::CopyFrom(const ImageStructInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageStructInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStructInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  return true;
}

void ImageStructInfo::Swap(ImageStructInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageStructInfo::InternalSwap(ImageStructInfo* other) {
  using std::swap;
  page_full_url_.Swap(&other->page_full_url_);
  title_.Swap(&other->title_);
  text_.Swap(&other->text_);
  swap(image_time_, other->image_time_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageStructInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageStructInfo

// required .ru.mail.go.webbase.blobs.ImageStructInfo.ImageSource source = 1;
bool ImageStructInfo::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageStructInfo::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageStructInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageStructInfo::clear_source() {
  source_ = 0;
  clear_has_source();
}
::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource ImageStructInfo::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStructInfo.source)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource >(source_);
}
void ImageStructInfo::set_source(::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource value) {
  assert(::ru::mail::go::webbase::blobs::ImageStructInfo_ImageSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStructInfo.source)
}

// required string page_full_URL = 2;
bool ImageStructInfo::has_page_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageStructInfo::set_has_page_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageStructInfo::clear_has_page_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageStructInfo::clear_page_full_url() {
  page_full_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_full_url();
}
const ::std::string& ImageStructInfo::page_full_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
  return page_full_url_.GetNoArena();
}
void ImageStructInfo::set_page_full_url(const ::std::string& value) {
  set_has_page_full_url();
  page_full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
}
#if LANG_CXX11
void ImageStructInfo::set_page_full_url(::std::string&& value) {
  set_has_page_full_url();
  page_full_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
}
#endif
void ImageStructInfo::set_page_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_page_full_url();
  page_full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
}
void ImageStructInfo::set_page_full_url(const char* value, size_t size) {
  set_has_page_full_url();
  page_full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
}
::std::string* ImageStructInfo::mutable_page_full_url() {
  set_has_page_full_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
  return page_full_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStructInfo::release_page_full_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
  clear_has_page_full_url();
  return page_full_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStructInfo::set_allocated_page_full_url(::std::string* page_full_url) {
  if (page_full_url != NULL) {
    set_has_page_full_url();
  } else {
    clear_has_page_full_url();
  }
  page_full_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_full_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStructInfo.page_full_URL)
}

// optional string title = 3;
bool ImageStructInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageStructInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageStructInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageStructInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ImageStructInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStructInfo.title)
  return title_.GetNoArena();
}
void ImageStructInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStructInfo.title)
}
#if LANG_CXX11
void ImageStructInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageStructInfo.title)
}
#endif
void ImageStructInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageStructInfo.title)
}
void ImageStructInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageStructInfo.title)
}
::std::string* ImageStructInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStructInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStructInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStructInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStructInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStructInfo.title)
}

// optional string text = 4;
bool ImageStructInfo::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageStructInfo::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageStructInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageStructInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& ImageStructInfo::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStructInfo.text)
  return text_.GetNoArena();
}
void ImageStructInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStructInfo.text)
}
#if LANG_CXX11
void ImageStructInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageStructInfo.text)
}
#endif
void ImageStructInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageStructInfo.text)
}
void ImageStructInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageStructInfo.text)
}
::std::string* ImageStructInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageStructInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageStructInfo::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageStructInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageStructInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageStructInfo.text)
}

// optional int64 image_time = 5;
bool ImageStructInfo::has_image_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageStructInfo::set_has_image_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageStructInfo::clear_has_image_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageStructInfo::clear_image_time() {
  image_time_ = GOOGLE_LONGLONG(0);
  clear_has_image_time();
}
::google::protobuf::int64 ImageStructInfo::image_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageStructInfo.image_time)
  return image_time_;
}
void ImageStructInfo::set_image_time(::google::protobuf::int64 value) {
  set_has_image_time();
  image_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageStructInfo.image_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewsImageInfo::kNewsIdFieldNumber;
const int NewsImageInfo::kNewsImgHashFieldNumber;
const int NewsImageInfo::kSrcIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewsImageInfo::NewsImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.NewsImageInfo)
}
NewsImageInfo::NewsImageInfo(const NewsImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  news_img_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_news_img_hash()) {
    news_img_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.news_img_hash_);
  }
  ::memcpy(&news_id_, &from.news_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_id_) -
    reinterpret_cast<char*>(&news_id_)) + sizeof(src_id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.NewsImageInfo)
}

void NewsImageInfo::SharedCtor() {
  _cached_size_ = 0;
  news_img_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&news_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_id_) -
      reinterpret_cast<char*>(&news_id_)) + sizeof(src_id_));
}

NewsImageInfo::~NewsImageInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.NewsImageInfo)
  SharedDtor();
}

void NewsImageInfo::SharedDtor() {
  news_img_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewsImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsImageInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewsImageInfo& NewsImageInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewsImageInfo* NewsImageInfo::New(::google::protobuf::Arena* arena) const {
  NewsImageInfo* n = new NewsImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewsImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_news_img_hash()) {
    GOOGLE_DCHECK(!news_img_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*news_img_hash_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&news_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_id_) -
        reinterpret_cast<char*>(&news_id_)) + sizeof(src_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewsImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 news_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_news_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &news_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string news_img_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_news_img_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->news_img_hash().data(), static_cast<int>(this->news_img_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 src_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_src_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.NewsImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.NewsImageInfo)
  return false;
#undef DO_
}

void NewsImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 news_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->news_id(), output);
  }

  // required string news_img_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->news_img_hash().data(), static_cast<int>(this->news_img_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->news_img_hash(), output);
  }

  // required int32 src_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->src_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.NewsImageInfo)
}

::google::protobuf::uint8* NewsImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 news_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->news_id(), target);
  }

  // required string news_img_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->news_img_hash().data(), static_cast<int>(this->news_img_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->news_img_hash(), target);
  }

  // required int32 src_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->src_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.NewsImageInfo)
  return target;
}

size_t NewsImageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  size_t total_size = 0;

  if (has_news_img_hash()) {
    // required string news_img_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->news_img_hash());
  }

  if (has_news_id()) {
    // required int64 news_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->news_id());
  }

  if (has_src_id()) {
    // required int32 src_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_id());
  }

  return total_size;
}
size_t NewsImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string news_img_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->news_img_hash());

    // required int64 news_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->news_id());

    // required int32 src_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NewsImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewsImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.NewsImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.NewsImageInfo)
    MergeFrom(*source);
  }
}

void NewsImageInfo::MergeFrom(const NewsImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_news_img_hash();
      news_img_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.news_img_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      news_id_ = from.news_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_id_ = from.src_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewsImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsImageInfo::CopyFrom(const NewsImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.NewsImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void NewsImageInfo::Swap(NewsImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewsImageInfo::InternalSwap(NewsImageInfo* other) {
  using std::swap;
  news_img_hash_.Swap(&other->news_img_hash_);
  swap(news_id_, other->news_id_);
  swap(src_id_, other->src_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewsImageInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewsImageInfo

// required int64 news_id = 1;
bool NewsImageInfo::has_news_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewsImageInfo::set_has_news_id() {
  _has_bits_[0] |= 0x00000002u;
}
void NewsImageInfo::clear_has_news_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewsImageInfo::clear_news_id() {
  news_id_ = GOOGLE_LONGLONG(0);
  clear_has_news_id();
}
::google::protobuf::int64 NewsImageInfo::news_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.NewsImageInfo.news_id)
  return news_id_;
}
void NewsImageInfo::set_news_id(::google::protobuf::int64 value) {
  set_has_news_id();
  news_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.NewsImageInfo.news_id)
}

// required string news_img_hash = 2;
bool NewsImageInfo::has_news_img_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewsImageInfo::set_has_news_img_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void NewsImageInfo::clear_has_news_img_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewsImageInfo::clear_news_img_hash() {
  news_img_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_news_img_hash();
}
const ::std::string& NewsImageInfo::news_img_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
  return news_img_hash_.GetNoArena();
}
void NewsImageInfo::set_news_img_hash(const ::std::string& value) {
  set_has_news_img_hash();
  news_img_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
}
#if LANG_CXX11
void NewsImageInfo::set_news_img_hash(::std::string&& value) {
  set_has_news_img_hash();
  news_img_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
}
#endif
void NewsImageInfo::set_news_img_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_news_img_hash();
  news_img_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
}
void NewsImageInfo::set_news_img_hash(const char* value, size_t size) {
  set_has_news_img_hash();
  news_img_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
}
::std::string* NewsImageInfo::mutable_news_img_hash() {
  set_has_news_img_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
  return news_img_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewsImageInfo::release_news_img_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
  clear_has_news_img_hash();
  return news_img_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewsImageInfo::set_allocated_news_img_hash(::std::string* news_img_hash) {
  if (news_img_hash != NULL) {
    set_has_news_img_hash();
  } else {
    clear_has_news_img_hash();
  }
  news_img_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), news_img_hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.NewsImageInfo.news_img_hash)
}

// required int32 src_id = 3;
bool NewsImageInfo::has_src_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewsImageInfo::set_has_src_id() {
  _has_bits_[0] |= 0x00000004u;
}
void NewsImageInfo::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewsImageInfo::clear_src_id() {
  src_id_ = 0;
  clear_has_src_id();
}
::google::protobuf::int32 NewsImageInfo::src_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.NewsImageInfo.src_id)
  return src_id_;
}
void NewsImageInfo::set_src_id(::google::protobuf::int32 value) {
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.NewsImageInfo.src_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageKeywords::kKeywordsFieldNumber;
const int ImageKeywords::kWeightsFieldNumber;
const int ImageKeywords::kClusterSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageKeywords::ImageKeywords()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageKeywords)
}
ImageKeywords::ImageKeywords(const ImageKeywords& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keywords_(from.keywords_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_size_ = from.cluster_size_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageKeywords)
}

void ImageKeywords::SharedCtor() {
  _cached_size_ = 0;
  cluster_size_ = 0;
}

ImageKeywords::~ImageKeywords() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageKeywords)
  SharedDtor();
}

void ImageKeywords::SharedDtor() {
}

void ImageKeywords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageKeywords::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageKeywords& ImageKeywords::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageKeywords* ImageKeywords::New(::google::protobuf::Arena* arena) const {
  ImageKeywords* n = new ImageKeywords;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageKeywords::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  weights_.Clear();
  cluster_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageKeywords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageKeywords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keywords = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            static_cast<int>(this->keywords(this->keywords_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageKeywords.keywords");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cluster_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cluster_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageKeywords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageKeywords)
  return false;
#undef DO_
}

void ImageKeywords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keywords = 1;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageKeywords.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keywords(i), output);
  }

  // repeated float weights = 2;
  for (int i = 0, n = this->weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->weights(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 cluster_size = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cluster_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageKeywords)
}

::google::protobuf::uint8* ImageKeywords::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keywords = 1;
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), static_cast<int>(this->keywords(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageKeywords.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keywords(i), target);
  }

  // repeated float weights = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->weights_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 cluster_size = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cluster_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageKeywords)
  return target;
}

size_t ImageKeywords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageKeywords)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string keywords = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keywords_size());
  for (int i = 0, n = this->keywords_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  // repeated float weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->weights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weights_size());
    total_size += data_size;
  }

  // optional int32 cluster_size = 3;
  if (has_cluster_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cluster_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageKeywords::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageKeywords* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageKeywords>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageKeywords)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageKeywords)
    MergeFrom(*source);
  }
}

void ImageKeywords::MergeFrom(const ImageKeywords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  weights_.MergeFrom(from.weights_);
  if (from.has_cluster_size()) {
    set_cluster_size(from.cluster_size());
  }
}

void ImageKeywords::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageKeywords::CopyFrom(const ImageKeywords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageKeywords::IsInitialized() const {
  return true;
}

void ImageKeywords::Swap(ImageKeywords* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageKeywords::InternalSwap(ImageKeywords* other) {
  using std::swap;
  keywords_.InternalSwap(&other->keywords_);
  weights_.InternalSwap(&other->weights_);
  swap(cluster_size_, other->cluster_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageKeywords::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageKeywords

// repeated string keywords = 1;
int ImageKeywords::keywords_size() const {
  return keywords_.size();
}
void ImageKeywords::clear_keywords() {
  keywords_.Clear();
}
const ::std::string& ImageKeywords::keywords(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  return keywords_.Get(index);
}
::std::string* ImageKeywords::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  return keywords_.Mutable(index);
}
void ImageKeywords::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ImageKeywords::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
void ImageKeywords::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
void ImageKeywords::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
::std::string* ImageKeywords::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  return keywords_.Add();
}
void ImageKeywords::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
#if LANG_CXX11
void ImageKeywords::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
#endif
void ImageKeywords::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
void ImageKeywords::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageKeywords::keywords() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  return keywords_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImageKeywords::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageKeywords.keywords)
  return &keywords_;
}

// repeated float weights = 2;
int ImageKeywords::weights_size() const {
  return weights_.size();
}
void ImageKeywords::clear_weights() {
  weights_.Clear();
}
float ImageKeywords::weights(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageKeywords.weights)
  return weights_.Get(index);
}
void ImageKeywords::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageKeywords.weights)
}
void ImageKeywords::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.ImageKeywords.weights)
}
const ::google::protobuf::RepeatedField< float >&
ImageKeywords::weights() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.ImageKeywords.weights)
  return weights_;
}
::google::protobuf::RepeatedField< float >*
ImageKeywords::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.ImageKeywords.weights)
  return &weights_;
}

// optional int32 cluster_size = 3;
bool ImageKeywords::has_cluster_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageKeywords::set_has_cluster_size() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageKeywords::clear_has_cluster_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageKeywords::clear_cluster_size() {
  cluster_size_ = 0;
  clear_has_cluster_size();
}
::google::protobuf::int32 ImageKeywords::cluster_size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageKeywords.cluster_size)
  return cluster_size_;
}
void ImageKeywords::set_cluster_size(::google::protobuf::int32 value) {
  set_has_cluster_size();
  cluster_size_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageKeywords.cluster_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageObj::kImageURLFieldNumber;
const int ImageObj::kResultCodeFieldNumber;
const int ImageObj::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageObj::ImageObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageObj)
}
ImageObj::ImageObj(const ImageObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imageurl()) {
    imageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imageurl_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageObj)
}

void ImageObj::SharedCtor() {
  _cached_size_ = 0;
  imageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0;
}

ImageObj::~ImageObj() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageObj)
  SharedDtor();
}

void ImageObj::SharedDtor() {
  imageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageObj::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageObj& ImageObj::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageObj* ImageObj::New(::google::protobuf::Arena* arena) const {
  ImageObj* n = new ImageObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageObj::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!imageurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imageurl_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
  }
  result_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string imageURL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imageurl().data(), static_cast<int>(this->imageurl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageObj.imageURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageObj)
  return false;
#undef DO_
}

void ImageObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imageURL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imageurl().data(), static_cast<int>(this->imageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageObj.imageURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imageurl(), output);
  }

  // required int32 result_code = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_code(), output);
  }

  // optional bytes image = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageObj)
}

::google::protobuf::uint8* ImageObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imageURL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imageurl().data(), static_cast<int>(this->imageurl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageObj.imageURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imageurl(), target);
  }

  // required int32 result_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_code(), target);
  }

  // optional bytes image = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageObj)
  return target;
}

size_t ImageObj::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageObj)
  size_t total_size = 0;

  if (has_imageurl()) {
    // required string imageURL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imageurl());
  }

  if (has_result_code()) {
    // required int32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_code());
  }

  return total_size;
}
size_t ImageObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string imageURL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imageurl());

    // required int32 result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes image = 3;
  if (has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageObj)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageObj)
    MergeFrom(*source);
  }
}

void ImageObj::MergeFrom(const ImageObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imageurl();
      imageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imageurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_code_ = from.result_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageObj::CopyFrom(const ImageObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ImageObj::Swap(ImageObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageObj::InternalSwap(ImageObj* other) {
  using std::swap;
  imageurl_.Swap(&other->imageurl_);
  image_.Swap(&other->image_);
  swap(result_code_, other->result_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageObj::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageObj

// required string imageURL = 1;
bool ImageObj::has_imageurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageObj::set_has_imageurl() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageObj::clear_has_imageurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageObj::clear_imageurl() {
  imageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imageurl();
}
const ::std::string& ImageObj::imageurl() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageObj.imageURL)
  return imageurl_.GetNoArena();
}
void ImageObj::set_imageurl(const ::std::string& value) {
  set_has_imageurl();
  imageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageObj.imageURL)
}
#if LANG_CXX11
void ImageObj::set_imageurl(::std::string&& value) {
  set_has_imageurl();
  imageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageObj.imageURL)
}
#endif
void ImageObj::set_imageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imageurl();
  imageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageObj.imageURL)
}
void ImageObj::set_imageurl(const char* value, size_t size) {
  set_has_imageurl();
  imageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageObj.imageURL)
}
::std::string* ImageObj::mutable_imageurl() {
  set_has_imageurl();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageObj.imageURL)
  return imageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageObj::release_imageurl() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageObj.imageURL)
  clear_has_imageurl();
  return imageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageObj::set_allocated_imageurl(::std::string* imageurl) {
  if (imageurl != NULL) {
    set_has_imageurl();
  } else {
    clear_has_imageurl();
  }
  imageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imageurl);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageObj.imageURL)
}

// required int32 result_code = 2;
bool ImageObj::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageObj::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageObj::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageObj::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
::google::protobuf::int32 ImageObj::result_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageObj.result_code)
  return result_code_;
}
void ImageObj::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageObj.result_code)
}

// optional bytes image = 3;
bool ImageObj::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageObj::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageObj::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageObj::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& ImageObj::image() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageObj.image)
  return image_.GetNoArena();
}
void ImageObj::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageObj.image)
}
#if LANG_CXX11
void ImageObj::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageObj.image)
}
#endif
void ImageObj::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageObj.image)
}
void ImageObj::set_image(const void* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageObj.image)
}
::std::string* ImageObj::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageObj.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageObj::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageObj.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageObj::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageObj.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageIndexObj::kThumbFieldNumber;
const int ImageIndexObj::kXmlDocFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageIndexObj::ImageIndexObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageIndexObj)
}
ImageIndexObj::ImageIndexObj(const ImageIndexObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xml_doc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_xml_doc()) {
    xml_doc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xml_doc_);
  }
  if (from.has_thumb()) {
    thumb_ = new ::ru::mail::go::webbase::blobs::ThumbDoc(*from.thumb_);
  } else {
    thumb_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageIndexObj)
}

void ImageIndexObj::SharedCtor() {
  _cached_size_ = 0;
  xml_doc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_ = NULL;
}

ImageIndexObj::~ImageIndexObj() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageIndexObj)
  SharedDtor();
}

void ImageIndexObj::SharedDtor() {
  xml_doc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thumb_;
}

void ImageIndexObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageIndexObj::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageIndexObj& ImageIndexObj::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageIndexObj* ImageIndexObj::New(::google::protobuf::Arena* arena) const {
  ImageIndexObj* n = new ImageIndexObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageIndexObj::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!xml_doc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*xml_doc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(thumb_ != NULL);
      thumb_->::ru::mail::go::webbase::blobs::ThumbDoc::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageIndexObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string xml_doc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml_doc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xml_doc().data(), static_cast<int>(this->xml_doc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageIndexObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageIndexObj)
  return false;
#undef DO_
}

void ImageIndexObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->thumb_, output);
  }

  // required string xml_doc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml_doc().data(), static_cast<int>(this->xml_doc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xml_doc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageIndexObj)
}

::google::protobuf::uint8* ImageIndexObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->thumb_, deterministic, target);
  }

  // required string xml_doc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml_doc().data(), static_cast<int>(this->xml_doc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xml_doc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageIndexObj)
  return target;
}

size_t ImageIndexObj::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  size_t total_size = 0;

  if (has_xml_doc()) {
    // required string xml_doc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xml_doc());
  }

  if (has_thumb()) {
    // required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);
  }

  return total_size;
}
size_t ImageIndexObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string xml_doc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xml_doc());

    // required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageIndexObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageIndexObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageIndexObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageIndexObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageIndexObj)
    MergeFrom(*source);
  }
}

void ImageIndexObj::MergeFrom(const ImageIndexObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_xml_doc();
      xml_doc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xml_doc_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_thumb()->::ru::mail::go::webbase::blobs::ThumbDoc::MergeFrom(from.thumb());
    }
  }
}

void ImageIndexObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageIndexObj::CopyFrom(const ImageIndexObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageIndexObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageIndexObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_thumb()) {
    if (!this->thumb_->IsInitialized()) return false;
  }
  return true;
}

void ImageIndexObj::Swap(ImageIndexObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageIndexObj::InternalSwap(ImageIndexObj* other) {
  using std::swap;
  xml_doc_.Swap(&other->xml_doc_);
  swap(thumb_, other->thumb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageIndexObj::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageIndexObj

// required .ru.mail.go.webbase.blobs.ThumbDoc thumb = 1;
bool ImageIndexObj::has_thumb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageIndexObj::set_has_thumb() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageIndexObj::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageIndexObj::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::blobs::ThumbDoc::Clear();
  clear_has_thumb();
}
const ::ru::mail::go::webbase::blobs::ThumbDoc& ImageIndexObj::thumb() const {
  const ::ru::mail::go::webbase::blobs::ThumbDoc* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageIndexObj.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ThumbDoc*>(
      &::ru::mail::go::webbase::blobs::_ThumbDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::ThumbDoc* ImageIndexObj::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::blobs::ThumbDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageIndexObj.thumb)
  return thumb_;
}
::ru::mail::go::webbase::blobs::ThumbDoc* ImageIndexObj::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageIndexObj.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::blobs::ThumbDoc* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
void ImageIndexObj::set_allocated_thumb(::ru::mail::go::webbase::blobs::ThumbDoc* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageIndexObj.thumb)
}

// required string xml_doc = 2;
bool ImageIndexObj::has_xml_doc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageIndexObj::set_has_xml_doc() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageIndexObj::clear_has_xml_doc() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageIndexObj::clear_xml_doc() {
  xml_doc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_doc();
}
const ::std::string& ImageIndexObj::xml_doc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
  return xml_doc_.GetNoArena();
}
void ImageIndexObj::set_xml_doc(const ::std::string& value) {
  set_has_xml_doc();
  xml_doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
}
#if LANG_CXX11
void ImageIndexObj::set_xml_doc(::std::string&& value) {
  set_has_xml_doc();
  xml_doc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
}
#endif
void ImageIndexObj::set_xml_doc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xml_doc();
  xml_doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
}
void ImageIndexObj::set_xml_doc(const char* value, size_t size) {
  set_has_xml_doc();
  xml_doc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
}
::std::string* ImageIndexObj::mutable_xml_doc() {
  set_has_xml_doc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
  return xml_doc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageIndexObj::release_xml_doc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
  clear_has_xml_doc();
  return xml_doc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageIndexObj::set_allocated_xml_doc(::std::string* xml_doc) {
  if (xml_doc != NULL) {
    set_has_xml_doc();
  } else {
    clear_has_xml_doc();
  }
  xml_doc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_doc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageIndexObj.xml_doc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WOTInfo_WOTElement::kConfidenceFieldNumber;
const int WOTInfo_WOTElement::kReputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WOTInfo_WOTElement::WOTInfo_WOTElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
}
WOTInfo_WOTElement::WOTInfo_WOTElement(const WOTInfo_WOTElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&reputation_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(reputation_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
}

void WOTInfo_WOTElement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reputation_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(reputation_));
}

WOTInfo_WOTElement::~WOTInfo_WOTElement() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  SharedDtor();
}

void WOTInfo_WOTElement::SharedDtor() {
}

void WOTInfo_WOTElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WOTInfo_WOTElement::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WOTInfo_WOTElement& WOTInfo_WOTElement::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

WOTInfo_WOTElement* WOTInfo_WOTElement::New(::google::protobuf::Arena* arena) const {
  WOTInfo_WOTElement* n = new WOTInfo_WOTElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WOTInfo_WOTElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reputation_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(reputation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WOTInfo_WOTElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 reputation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reputation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  return false;
#undef DO_
}

void WOTInfo_WOTElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confidence(), output);
  }

  // required int32 reputation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reputation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
}

::google::protobuf::uint8* WOTInfo_WOTElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confidence(), target);
  }

  // required int32 reputation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reputation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  return target;
}

size_t WOTInfo_WOTElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  size_t total_size = 0;

  if (has_confidence()) {
    // required int32 confidence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence());
  }

  if (has_reputation()) {
    // required int32 reputation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reputation());
  }

  return total_size;
}
size_t WOTInfo_WOTElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 confidence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence());

    // required int32 reputation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reputation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WOTInfo_WOTElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  GOOGLE_DCHECK_NE(&from, this);
  const WOTInfo_WOTElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WOTInfo_WOTElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
    MergeFrom(*source);
  }
}

void WOTInfo_WOTElement::MergeFrom(const WOTInfo_WOTElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      reputation_ = from.reputation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WOTInfo_WOTElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WOTInfo_WOTElement::CopyFrom(const WOTInfo_WOTElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOTInfo_WOTElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WOTInfo_WOTElement::Swap(WOTInfo_WOTElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WOTInfo_WOTElement::InternalSwap(WOTInfo_WOTElement* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(reputation_, other->reputation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WOTInfo_WOTElement::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WOTInfo_WOTElement

// required int32 confidence = 1;
bool WOTInfo_WOTElement::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WOTInfo_WOTElement::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
void WOTInfo_WOTElement::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
void WOTInfo_WOTElement::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
::google::protobuf::int32 WOTInfo_WOTElement::confidence() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.WOTElement.confidence)
  return confidence_;
}
void WOTInfo_WOTElement::set_confidence(::google::protobuf::int32 value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.WOTInfo.WOTElement.confidence)
}

// required int32 reputation = 2;
bool WOTInfo_WOTElement::has_reputation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WOTInfo_WOTElement::set_has_reputation() {
  _has_bits_[0] |= 0x00000002u;
}
void WOTInfo_WOTElement::clear_has_reputation() {
  _has_bits_[0] &= ~0x00000002u;
}
void WOTInfo_WOTElement::clear_reputation() {
  reputation_ = 0;
  clear_has_reputation();
}
::google::protobuf::int32 WOTInfo_WOTElement::reputation() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.WOTElement.reputation)
  return reputation_;
}
void WOTInfo_WOTElement::set_reputation(::google::protobuf::int32 value) {
  set_has_reputation();
  reputation_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.WOTInfo.WOTElement.reputation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WOTInfo_WOTCategory::kCategoryFieldNumber;
const int WOTInfo_WOTCategory::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WOTInfo_WOTCategory::WOTInfo_WOTCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
}
WOTInfo_WOTCategory::WOTInfo_WOTCategory(const WOTInfo_WOTCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&category_, &from.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&category_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
}

void WOTInfo_WOTCategory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&category_)) + sizeof(value_));
}

WOTInfo_WOTCategory::~WOTInfo_WOTCategory() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  SharedDtor();
}

void WOTInfo_WOTCategory::SharedDtor() {
}

void WOTInfo_WOTCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WOTInfo_WOTCategory::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WOTInfo_WOTCategory& WOTInfo_WOTCategory::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

WOTInfo_WOTCategory* WOTInfo_WOTCategory::New(::google::protobuf::Arena* arena) const {
  WOTInfo_WOTCategory* n = new WOTInfo_WOTCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WOTInfo_WOTCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&category_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WOTInfo_WOTCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  return false;
#undef DO_
}

void WOTInfo_WOTCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
}

::google::protobuf::uint8* WOTInfo_WOTCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  return target;
}

size_t WOTInfo_WOTCategory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  size_t total_size = 0;

  if (has_category()) {
    // required int32 category = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t WOTInfo_WOTCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 category = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WOTInfo_WOTCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const WOTInfo_WOTCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WOTInfo_WOTCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
    MergeFrom(*source);
  }
}

void WOTInfo_WOTCategory::MergeFrom(const WOTInfo_WOTCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WOTInfo_WOTCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WOTInfo_WOTCategory::CopyFrom(const WOTInfo_WOTCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOTInfo_WOTCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WOTInfo_WOTCategory::Swap(WOTInfo_WOTCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WOTInfo_WOTCategory::InternalSwap(WOTInfo_WOTCategory* other) {
  using std::swap;
  swap(category_, other->category_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WOTInfo_WOTCategory::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WOTInfo_WOTCategory

// required int32 category = 1;
bool WOTInfo_WOTCategory::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WOTInfo_WOTCategory::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void WOTInfo_WOTCategory::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void WOTInfo_WOTCategory::clear_category() {
  category_ = 0;
  clear_has_category();
}
::google::protobuf::int32 WOTInfo_WOTCategory::category() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory.category)
  return category_;
}
void WOTInfo_WOTCategory::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory.category)
}

// required int32 value = 2;
bool WOTInfo_WOTCategory::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WOTInfo_WOTCategory::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void WOTInfo_WOTCategory::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void WOTInfo_WOTCategory::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 WOTInfo_WOTCategory::value() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory.value)
  return value_;
}
void WOTInfo_WOTCategory::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.WOTInfo.WOTCategory.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WOTInfo::kTrustWorthinessFieldNumber;
const int WOTInfo::kVendorReliabilityFieldNumber;
const int WOTInfo::kPrivacyFieldNumber;
const int WOTInfo::kChildSafetyFieldNumber;
const int WOTInfo::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WOTInfo::WOTInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.WOTInfo)
}
WOTInfo::WOTInfo(const WOTInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trust_worthiness()) {
    trust_worthiness_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement(*from.trust_worthiness_);
  } else {
    trust_worthiness_ = NULL;
  }
  if (from.has_vendor_reliability()) {
    vendor_reliability_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement(*from.vendor_reliability_);
  } else {
    vendor_reliability_ = NULL;
  }
  if (from.has_privacy()) {
    privacy_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement(*from.privacy_);
  } else {
    privacy_ = NULL;
  }
  if (from.has_child_safety()) {
    child_safety_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement(*from.child_safety_);
  } else {
    child_safety_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.WOTInfo)
}

void WOTInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trust_worthiness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_safety_) -
      reinterpret_cast<char*>(&trust_worthiness_)) + sizeof(child_safety_));
}

WOTInfo::~WOTInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.WOTInfo)
  SharedDtor();
}

void WOTInfo::SharedDtor() {
  if (this != internal_default_instance()) delete trust_worthiness_;
  if (this != internal_default_instance()) delete vendor_reliability_;
  if (this != internal_default_instance()) delete privacy_;
  if (this != internal_default_instance()) delete child_safety_;
}

void WOTInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WOTInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WOTInfo& WOTInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

WOTInfo* WOTInfo::New(::google::protobuf::Arena* arena) const {
  WOTInfo* n = new WOTInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WOTInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.WOTInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trust_worthiness_ != NULL);
      trust_worthiness_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vendor_reliability_ != NULL);
      vendor_reliability_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(privacy_ != NULL);
      privacy_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(child_safety_ != NULL);
      child_safety_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WOTInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.WOTInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement trust_worthiness = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trust_worthiness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement vendor_reliability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vendor_reliability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement privacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement child_safety = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child_safety()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.WOTInfo.WOTCategory category = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.WOTInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.WOTInfo)
  return false;
#undef DO_
}

void WOTInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.WOTInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement trust_worthiness = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trust_worthiness_, output);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement vendor_reliability = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vendor_reliability_, output);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement privacy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->privacy_, output);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement child_safety = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->child_safety_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.WOTInfo.WOTCategory category = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->category(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.WOTInfo)
}

::google::protobuf::uint8* WOTInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.WOTInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement trust_worthiness = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trust_worthiness_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement vendor_reliability = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vendor_reliability_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement privacy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->privacy_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement child_safety = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->child_safety_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.WOTInfo.WOTCategory category = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->category(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.WOTInfo)
  return target;
}

size_t WOTInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.WOTInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.WOTInfo.WOTCategory category = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->category_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement trust_worthiness = 1;
    if (has_trust_worthiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trust_worthiness_);
    }

    // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement vendor_reliability = 2;
    if (has_vendor_reliability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vendor_reliability_);
    }

    // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement privacy = 3;
    if (has_privacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->privacy_);
    }

    // optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement child_safety = 4;
    if (has_child_safety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->child_safety_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WOTInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WOTInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WOTInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.WOTInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.WOTInfo)
    MergeFrom(*source);
  }
}

void WOTInfo::MergeFrom(const WOTInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.WOTInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trust_worthiness()->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::MergeFrom(from.trust_worthiness());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vendor_reliability()->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::MergeFrom(from.vendor_reliability());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_privacy()->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::MergeFrom(from.privacy());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_child_safety()->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::MergeFrom(from.child_safety());
    }
  }
}

void WOTInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WOTInfo::CopyFrom(const WOTInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.WOTInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOTInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->category())) return false;
  if (has_trust_worthiness()) {
    if (!this->trust_worthiness_->IsInitialized()) return false;
  }
  if (has_vendor_reliability()) {
    if (!this->vendor_reliability_->IsInitialized()) return false;
  }
  if (has_privacy()) {
    if (!this->privacy_->IsInitialized()) return false;
  }
  if (has_child_safety()) {
    if (!this->child_safety_->IsInitialized()) return false;
  }
  return true;
}

void WOTInfo::Swap(WOTInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WOTInfo::InternalSwap(WOTInfo* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  swap(trust_worthiness_, other->trust_worthiness_);
  swap(vendor_reliability_, other->vendor_reliability_);
  swap(privacy_, other->privacy_);
  swap(child_safety_, other->child_safety_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WOTInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WOTInfo

// optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement trust_worthiness = 1;
bool WOTInfo::has_trust_worthiness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WOTInfo::set_has_trust_worthiness() {
  _has_bits_[0] |= 0x00000001u;
}
void WOTInfo::clear_has_trust_worthiness() {
  _has_bits_[0] &= ~0x00000001u;
}
void WOTInfo::clear_trust_worthiness() {
  if (trust_worthiness_ != NULL) trust_worthiness_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
  clear_has_trust_worthiness();
}
const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement& WOTInfo::trust_worthiness() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* p = trust_worthiness_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.trust_worthiness)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_WOTElement_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::mutable_trust_worthiness() {
  set_has_trust_worthiness();
  if (trust_worthiness_ == NULL) {
    trust_worthiness_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfo.trust_worthiness)
  return trust_worthiness_;
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::release_trust_worthiness() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfo.trust_worthiness)
  clear_has_trust_worthiness();
  ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* temp = trust_worthiness_;
  trust_worthiness_ = NULL;
  return temp;
}
void WOTInfo::set_allocated_trust_worthiness(::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* trust_worthiness) {
  delete trust_worthiness_;
  trust_worthiness_ = trust_worthiness;
  if (trust_worthiness) {
    set_has_trust_worthiness();
  } else {
    clear_has_trust_worthiness();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfo.trust_worthiness)
}

// optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement vendor_reliability = 2;
bool WOTInfo::has_vendor_reliability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WOTInfo::set_has_vendor_reliability() {
  _has_bits_[0] |= 0x00000002u;
}
void WOTInfo::clear_has_vendor_reliability() {
  _has_bits_[0] &= ~0x00000002u;
}
void WOTInfo::clear_vendor_reliability() {
  if (vendor_reliability_ != NULL) vendor_reliability_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
  clear_has_vendor_reliability();
}
const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement& WOTInfo::vendor_reliability() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* p = vendor_reliability_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.vendor_reliability)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_WOTElement_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::mutable_vendor_reliability() {
  set_has_vendor_reliability();
  if (vendor_reliability_ == NULL) {
    vendor_reliability_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfo.vendor_reliability)
  return vendor_reliability_;
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::release_vendor_reliability() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfo.vendor_reliability)
  clear_has_vendor_reliability();
  ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* temp = vendor_reliability_;
  vendor_reliability_ = NULL;
  return temp;
}
void WOTInfo::set_allocated_vendor_reliability(::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* vendor_reliability) {
  delete vendor_reliability_;
  vendor_reliability_ = vendor_reliability;
  if (vendor_reliability) {
    set_has_vendor_reliability();
  } else {
    clear_has_vendor_reliability();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfo.vendor_reliability)
}

// optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement privacy = 3;
bool WOTInfo::has_privacy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WOTInfo::set_has_privacy() {
  _has_bits_[0] |= 0x00000004u;
}
void WOTInfo::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000004u;
}
void WOTInfo::clear_privacy() {
  if (privacy_ != NULL) privacy_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
  clear_has_privacy();
}
const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement& WOTInfo::privacy() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* p = privacy_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.privacy)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_WOTElement_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::mutable_privacy() {
  set_has_privacy();
  if (privacy_ == NULL) {
    privacy_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfo.privacy)
  return privacy_;
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::release_privacy() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfo.privacy)
  clear_has_privacy();
  ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* temp = privacy_;
  privacy_ = NULL;
  return temp;
}
void WOTInfo::set_allocated_privacy(::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* privacy) {
  delete privacy_;
  privacy_ = privacy;
  if (privacy) {
    set_has_privacy();
  } else {
    clear_has_privacy();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfo.privacy)
}

// optional .ru.mail.go.webbase.blobs.WOTInfo.WOTElement child_safety = 4;
bool WOTInfo::has_child_safety() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WOTInfo::set_has_child_safety() {
  _has_bits_[0] |= 0x00000008u;
}
void WOTInfo::clear_has_child_safety() {
  _has_bits_[0] &= ~0x00000008u;
}
void WOTInfo::clear_child_safety() {
  if (child_safety_ != NULL) child_safety_->::ru::mail::go::webbase::blobs::WOTInfo_WOTElement::Clear();
  clear_has_child_safety();
}
const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement& WOTInfo::child_safety() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* p = child_safety_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.child_safety)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_WOTElement_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::mutable_child_safety() {
  set_has_child_safety();
  if (child_safety_ == NULL) {
    child_safety_ = new ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfo.child_safety)
  return child_safety_;
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* WOTInfo::release_child_safety() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfo.child_safety)
  clear_has_child_safety();
  ::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* temp = child_safety_;
  child_safety_ = NULL;
  return temp;
}
void WOTInfo::set_allocated_child_safety(::ru::mail::go::webbase::blobs::WOTInfo_WOTElement* child_safety) {
  delete child_safety_;
  child_safety_ = child_safety;
  if (child_safety) {
    set_has_child_safety();
  } else {
    clear_has_child_safety();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfo.child_safety)
}

// repeated .ru.mail.go.webbase.blobs.WOTInfo.WOTCategory category = 5;
int WOTInfo::category_size() const {
  return category_.size();
}
void WOTInfo::clear_category() {
  category_.Clear();
}
const ::ru::mail::go::webbase::blobs::WOTInfo_WOTCategory& WOTInfo::category(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfo.category)
  return category_.Get(index);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTCategory* WOTInfo::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfo.category)
  return category_.Mutable(index);
}
::ru::mail::go::webbase::blobs::WOTInfo_WOTCategory* WOTInfo::add_category() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.WOTInfo.category)
  return category_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::WOTInfo_WOTCategory >*
WOTInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.WOTInfo.category)
  return &category_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::WOTInfo_WOTCategory >&
WOTInfo::category() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.WOTInfo.category)
  return category_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WOTInfoObj::kHostFieldNumber;
const int WOTInfoObj::kWotInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WOTInfoObj::WOTInfoObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.WOTInfoObj)
}
WOTInfoObj::WOTInfoObj(const WOTInfoObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.has_wot_info()) {
    wot_info_ = new ::ru::mail::go::webbase::blobs::WOTInfo(*from.wot_info_);
  } else {
    wot_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.WOTInfoObj)
}

void WOTInfoObj::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wot_info_ = NULL;
}

WOTInfoObj::~WOTInfoObj() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.WOTInfoObj)
  SharedDtor();
}

void WOTInfoObj::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wot_info_;
}

void WOTInfoObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WOTInfoObj::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WOTInfoObj& WOTInfoObj::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

WOTInfoObj* WOTInfoObj::New(::google::protobuf::Arena* arena) const {
  WOTInfoObj* n = new WOTInfoObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WOTInfoObj::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wot_info_ != NULL);
      wot_info_->::ru::mail::go::webbase::blobs::WOTInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WOTInfoObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.WOTInfoObj.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wot_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.WOTInfoObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.WOTInfoObj)
  return false;
#undef DO_
}

void WOTInfoObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.WOTInfoObj.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->wot_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.WOTInfoObj)
}

::google::protobuf::uint8* WOTInfoObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.WOTInfoObj.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->wot_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.WOTInfoObj)
  return target;
}

size_t WOTInfoObj::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_wot_info()) {
    // required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wot_info_);
  }

  return total_size;
}
size_t WOTInfoObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wot_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WOTInfoObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  GOOGLE_DCHECK_NE(&from, this);
  const WOTInfoObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WOTInfoObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.WOTInfoObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.WOTInfoObj)
    MergeFrom(*source);
  }
}

void WOTInfoObj::MergeFrom(const WOTInfoObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wot_info()->::ru::mail::go::webbase::blobs::WOTInfo::MergeFrom(from.wot_info());
    }
  }
}

void WOTInfoObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WOTInfoObj::CopyFrom(const WOTInfoObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.WOTInfoObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WOTInfoObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_wot_info()) {
    if (!this->wot_info_->IsInitialized()) return false;
  }
  return true;
}

void WOTInfoObj::Swap(WOTInfoObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WOTInfoObj::InternalSwap(WOTInfoObj* other) {
  using std::swap;
  host_.Swap(&other->host_);
  swap(wot_info_, other->wot_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WOTInfoObj::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WOTInfoObj

// required string host = 1;
bool WOTInfoObj::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WOTInfoObj::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void WOTInfoObj::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void WOTInfoObj::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& WOTInfoObj::host() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfoObj.host)
  return host_.GetNoArena();
}
void WOTInfoObj::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.WOTInfoObj.host)
}
#if LANG_CXX11
void WOTInfoObj::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.WOTInfoObj.host)
}
#endif
void WOTInfoObj::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.WOTInfoObj.host)
}
void WOTInfoObj::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.WOTInfoObj.host)
}
::std::string* WOTInfoObj::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfoObj.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WOTInfoObj::release_host() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfoObj.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WOTInfoObj::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfoObj.host)
}

// required .ru.mail.go.webbase.blobs.WOTInfo wot_info = 2;
bool WOTInfoObj::has_wot_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WOTInfoObj::set_has_wot_info() {
  _has_bits_[0] |= 0x00000002u;
}
void WOTInfoObj::clear_has_wot_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void WOTInfoObj::clear_wot_info() {
  if (wot_info_ != NULL) wot_info_->::ru::mail::go::webbase::blobs::WOTInfo::Clear();
  clear_has_wot_info();
}
const ::ru::mail::go::webbase::blobs::WOTInfo& WOTInfoObj::wot_info() const {
  const ::ru::mail::go::webbase::blobs::WOTInfo* p = wot_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.WOTInfoObj.wot_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::WOTInfo*>(
      &::ru::mail::go::webbase::blobs::_WOTInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::WOTInfo* WOTInfoObj::mutable_wot_info() {
  set_has_wot_info();
  if (wot_info_ == NULL) {
    wot_info_ = new ::ru::mail::go::webbase::blobs::WOTInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.WOTInfoObj.wot_info)
  return wot_info_;
}
::ru::mail::go::webbase::blobs::WOTInfo* WOTInfoObj::release_wot_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.WOTInfoObj.wot_info)
  clear_has_wot_info();
  ::ru::mail::go::webbase::blobs::WOTInfo* temp = wot_info_;
  wot_info_ = NULL;
  return temp;
}
void WOTInfoObj::set_allocated_wot_info(::ru::mail::go::webbase::blobs::WOTInfo* wot_info) {
  delete wot_info_;
  wot_info_ = wot_info;
  if (wot_info) {
    set_has_wot_info();
  } else {
    clear_has_wot_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.WOTInfoObj.wot_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlRankInfo::kRankNameFieldNumber;
const int UrlRankInfo::kKvRecordsFieldNumber;
const int UrlRankInfo::kQueryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlRankInfo::UrlRankInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlRankInfo)
}
UrlRankInfo::UrlRankInfo(const UrlRankInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      kvrecords_(from.kvrecords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rank_name()) {
    rank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_name_);
  }
  if (from.has_query_info()) {
    query_info_ = new ::ru::mail::go::webbase::ComputedValues(*from.query_info_);
  } else {
    query_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlRankInfo)
}

void UrlRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_info_ = NULL;
}

UrlRankInfo::~UrlRankInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlRankInfo)
  SharedDtor();
}

void UrlRankInfo::SharedDtor() {
  rank_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_info_;
}

void UrlRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlRankInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlRankInfo& UrlRankInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlRankInfo* UrlRankInfo::New(::google::protobuf::Arena* arena) const {
  UrlRankInfo* n = new UrlRankInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvrecords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!rank_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rank_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(query_info_ != NULL);
      query_info_->::ru::mail::go::webbase::ComputedValues::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rank_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rank_name().data(), static_cast<int>(this->rank_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlRankInfo.rank_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.ComputedValues.Record kvRecords = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvrecords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ComputedValues query_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlRankInfo)
  return false;
#undef DO_
}

void UrlRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string rank_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_name().data(), static_cast<int>(this->rank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlRankInfo.rank_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rank_name(), output);
  }

  // repeated .ru.mail.go.webbase.ComputedValues.Record kvRecords = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvrecords_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvrecords(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.ComputedValues query_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->query_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlRankInfo)
}

::google::protobuf::uint8* UrlRankInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string rank_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_name().data(), static_cast<int>(this->rank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlRankInfo.rank_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rank_name(), target);
  }

  // repeated .ru.mail.go.webbase.ComputedValues.Record kvRecords = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvrecords_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvrecords(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.ComputedValues query_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->query_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlRankInfo)
  return target;
}

size_t UrlRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string rank_name = 1;
  if (has_rank_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rank_name());
  }
  // repeated .ru.mail.go.webbase.ComputedValues.Record kvRecords = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kvrecords_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvrecords(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.ComputedValues query_info = 3;
  if (has_query_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlRankInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlRankInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlRankInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlRankInfo)
    MergeFrom(*source);
  }
}

void UrlRankInfo::MergeFrom(const UrlRankInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvrecords_.MergeFrom(from.kvrecords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rank_name();
      rank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_query_info()->::ru::mail::go::webbase::ComputedValues::MergeFrom(from.query_info());
    }
  }
}

void UrlRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlRankInfo::CopyFrom(const UrlRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->kvrecords())) return false;
  if (has_query_info()) {
    if (!this->query_info_->IsInitialized()) return false;
  }
  return true;
}

void UrlRankInfo::Swap(UrlRankInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlRankInfo::InternalSwap(UrlRankInfo* other) {
  using std::swap;
  kvrecords_.InternalSwap(&other->kvrecords_);
  rank_name_.Swap(&other->rank_name_);
  swap(query_info_, other->query_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlRankInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlRankInfo

// required string rank_name = 1;
bool UrlRankInfo::has_rank_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlRankInfo::set_has_rank_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlRankInfo::clear_has_rank_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlRankInfo::clear_rank_name() {
  rank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_name();
}
const ::std::string& UrlRankInfo::rank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
  return rank_name_.GetNoArena();
}
void UrlRankInfo::set_rank_name(const ::std::string& value) {
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
}
#if LANG_CXX11
void UrlRankInfo::set_rank_name(::std::string&& value) {
  set_has_rank_name();
  rank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
}
#endif
void UrlRankInfo::set_rank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
}
void UrlRankInfo::set_rank_name(const char* value, size_t size) {
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
}
::std::string* UrlRankInfo::mutable_rank_name() {
  set_has_rank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
  return rank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlRankInfo::release_rank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
  clear_has_rank_name();
  return rank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlRankInfo::set_allocated_rank_name(::std::string* rank_name) {
  if (rank_name != NULL) {
    set_has_rank_name();
  } else {
    clear_has_rank_name();
  }
  rank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlRankInfo.rank_name)
}

// repeated .ru.mail.go.webbase.ComputedValues.Record kvRecords = 2;
int UrlRankInfo::kvrecords_size() const {
  return kvrecords_.size();
}
void UrlRankInfo::clear_kvrecords() {
  kvrecords_.Clear();
}
const ::ru::mail::go::webbase::ComputedValues_Record& UrlRankInfo::kvrecords(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlRankInfo.kvRecords)
  return kvrecords_.Get(index);
}
::ru::mail::go::webbase::ComputedValues_Record* UrlRankInfo::mutable_kvrecords(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlRankInfo.kvRecords)
  return kvrecords_.Mutable(index);
}
::ru::mail::go::webbase::ComputedValues_Record* UrlRankInfo::add_kvrecords() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlRankInfo.kvRecords)
  return kvrecords_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::ComputedValues_Record >*
UrlRankInfo::mutable_kvrecords() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UrlRankInfo.kvRecords)
  return &kvrecords_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::ComputedValues_Record >&
UrlRankInfo::kvrecords() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UrlRankInfo.kvRecords)
  return kvrecords_;
}

// optional .ru.mail.go.webbase.ComputedValues query_info = 3;
bool UrlRankInfo::has_query_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlRankInfo::set_has_query_info() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlRankInfo::clear_has_query_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlRankInfo::clear_query_info() {
  if (query_info_ != NULL) query_info_->::ru::mail::go::webbase::ComputedValues::Clear();
  clear_has_query_info();
}
const ::ru::mail::go::webbase::ComputedValues& UrlRankInfo::query_info() const {
  const ::ru::mail::go::webbase::ComputedValues* p = query_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlRankInfo.query_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ComputedValues*>(
      &::ru::mail::go::webbase::_ComputedValues_default_instance_);
}
::ru::mail::go::webbase::ComputedValues* UrlRankInfo::mutable_query_info() {
  set_has_query_info();
  if (query_info_ == NULL) {
    query_info_ = new ::ru::mail::go::webbase::ComputedValues;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlRankInfo.query_info)
  return query_info_;
}
::ru::mail::go::webbase::ComputedValues* UrlRankInfo::release_query_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlRankInfo.query_info)
  clear_has_query_info();
  ::ru::mail::go::webbase::ComputedValues* temp = query_info_;
  query_info_ = NULL;
  return temp;
}
void UrlRankInfo::set_allocated_query_info(::ru::mail::go::webbase::ComputedValues* query_info) {
  delete query_info_;
  query_info_ = query_info;
  if (query_info) {
    set_has_query_info();
  } else {
    clear_has_query_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlRankInfo.query_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlQueryInfo::kUrlFieldNumber;
const int UrlQueryInfo::kMbNumberFieldNumber;
const int UrlQueryInfo::kQueryFieldNumber;
const int UrlQueryInfo::kHashFieldNumber;
const int UrlQueryInfo::kMainUrlFieldNumber;
const int UrlQueryInfo::kClusterIdFieldNumber;
const int UrlQueryInfo::kRanksFieldNumber;
const int UrlQueryInfo::kVkMusicHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlQueryInfo::UrlQueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlQueryInfo)
}
UrlQueryInfo::UrlQueryInfo(const UrlQueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranks_(from.ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  main_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_main_url()) {
    main_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_url_);
  }
  vk_music_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vk_music_hash()) {
    vk_music_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_music_hash_);
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&mb_number_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(mb_number_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlQueryInfo)
}

void UrlQueryInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_music_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mb_number_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(mb_number_));
}

UrlQueryInfo::~UrlQueryInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlQueryInfo)
  SharedDtor();
}

void UrlQueryInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_music_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlQueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlQueryInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlQueryInfo& UrlQueryInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlQueryInfo* UrlQueryInfo::New(::google::protobuf::Arena* arena) const {
  UrlQueryInfo* n = new UrlQueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlQueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!main_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*main_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!vk_music_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vk_music_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mb_number_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(mb_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlQueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mb_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mb_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mb_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfo.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string main_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->main_url().data(), static_cast<int>(this->main_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfo.main_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cluster_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.UrlRankInfo ranks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vk_music_hash = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vk_music_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vk_music_hash().data(), static_cast<int>(this->vk_music_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlQueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlQueryInfo)
  return false;
#undef DO_
}

void UrlQueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 mb_number = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mb_number(), output);
  }

  // optional string query = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // optional uint64 hash = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hash(), output);
  }

  // optional string main_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_url().data(), static_cast<int>(this->main_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.main_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->main_url(), output);
  }

  // optional uint64 cluster_id = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cluster_id(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.UrlRankInfo ranks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ranks(static_cast<int>(i)), output);
  }

  // optional string vk_music_hash = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk_music_hash().data(), static_cast<int>(this->vk_music_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->vk_music_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlQueryInfo)
}

::google::protobuf::uint8* UrlQueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 mb_number = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mb_number(), target);
  }

  // optional string query = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // optional uint64 hash = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hash(), target);
  }

  // optional string main_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_url().data(), static_cast<int>(this->main_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.main_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->main_url(), target);
  }

  // optional uint64 cluster_id = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cluster_id(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.UrlRankInfo ranks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->ranks(static_cast<int>(i)), deterministic, target);
  }

  // optional string vk_music_hash = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk_music_hash().data(), static_cast<int>(this->vk_music_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->vk_music_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlQueryInfo)
  return target;
}

size_t UrlQueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.UrlRankInfo ranks = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->ranks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string query = 3;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string main_url = 6;
    if (has_main_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_url());
    }

    // optional string vk_music_hash = 11;
    if (has_vk_music_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vk_music_hash());
    }

    // optional uint64 hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional uint64 cluster_id = 9;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_id());
    }

    // optional int32 mb_number = 2;
    if (has_mb_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mb_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlQueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlQueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlQueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlQueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlQueryInfo)
    MergeFrom(*source);
  }
}

void UrlQueryInfo::MergeFrom(const UrlQueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranks_.MergeFrom(from.ranks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_main_url();
      main_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_vk_music_hash();
      vk_music_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_music_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      cluster_id_ = from.cluster_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      mb_number_ = from.mb_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UrlQueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlQueryInfo::CopyFrom(const UrlQueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlQueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlQueryInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void UrlQueryInfo::Swap(UrlQueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlQueryInfo::InternalSwap(UrlQueryInfo* other) {
  using std::swap;
  ranks_.InternalSwap(&other->ranks_);
  url_.Swap(&other->url_);
  query_.Swap(&other->query_);
  main_url_.Swap(&other->main_url_);
  vk_music_hash_.Swap(&other->vk_music_hash_);
  swap(hash_, other->hash_);
  swap(cluster_id_, other->cluster_id_);
  swap(mb_number_, other->mb_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlQueryInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlQueryInfo

// optional string url = 1;
bool UrlQueryInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlQueryInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlQueryInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlQueryInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& UrlQueryInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
  return url_.GetNoArena();
}
void UrlQueryInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
}
#if LANG_CXX11
void UrlQueryInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
}
#endif
void UrlQueryInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
}
void UrlQueryInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
}
::std::string* UrlQueryInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfo.url)
}

// optional int32 mb_number = 2;
bool UrlQueryInfo::has_mb_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UrlQueryInfo::set_has_mb_number() {
  _has_bits_[0] |= 0x00000040u;
}
void UrlQueryInfo::clear_has_mb_number() {
  _has_bits_[0] &= ~0x00000040u;
}
void UrlQueryInfo::clear_mb_number() {
  mb_number_ = 0;
  clear_has_mb_number();
}
::google::protobuf::int32 UrlQueryInfo::mb_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.mb_number)
  return mb_number_;
}
void UrlQueryInfo::set_mb_number(::google::protobuf::int32 value) {
  set_has_mb_number();
  mb_number_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.mb_number)
}

// optional string query = 3;
bool UrlQueryInfo::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlQueryInfo::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlQueryInfo::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlQueryInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& UrlQueryInfo::query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
  return query_.GetNoArena();
}
void UrlQueryInfo::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
}
#if LANG_CXX11
void UrlQueryInfo::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
}
#endif
void UrlQueryInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
}
void UrlQueryInfo::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
}
::std::string* UrlQueryInfo::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfo::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfo.query)
}

// optional uint64 hash = 5;
bool UrlQueryInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UrlQueryInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void UrlQueryInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void UrlQueryInfo::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 UrlQueryInfo::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.hash)
  return hash_;
}
void UrlQueryInfo::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.hash)
}

// optional string main_url = 6;
bool UrlQueryInfo::has_main_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UrlQueryInfo::set_has_main_url() {
  _has_bits_[0] |= 0x00000004u;
}
void UrlQueryInfo::clear_has_main_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void UrlQueryInfo::clear_main_url() {
  main_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_url();
}
const ::std::string& UrlQueryInfo::main_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
  return main_url_.GetNoArena();
}
void UrlQueryInfo::set_main_url(const ::std::string& value) {
  set_has_main_url();
  main_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
}
#if LANG_CXX11
void UrlQueryInfo::set_main_url(::std::string&& value) {
  set_has_main_url();
  main_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
}
#endif
void UrlQueryInfo::set_main_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_main_url();
  main_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
}
void UrlQueryInfo::set_main_url(const char* value, size_t size) {
  set_has_main_url();
  main_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
}
::std::string* UrlQueryInfo::mutable_main_url() {
  set_has_main_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
  return main_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfo::release_main_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
  clear_has_main_url();
  return main_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfo::set_allocated_main_url(::std::string* main_url) {
  if (main_url != NULL) {
    set_has_main_url();
  } else {
    clear_has_main_url();
  }
  main_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfo.main_url)
}

// optional uint64 cluster_id = 9;
bool UrlQueryInfo::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UrlQueryInfo::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000020u;
}
void UrlQueryInfo::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void UrlQueryInfo::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_id();
}
::google::protobuf::uint64 UrlQueryInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.cluster_id)
  return cluster_id_;
}
void UrlQueryInfo::set_cluster_id(::google::protobuf::uint64 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.cluster_id)
}

// repeated .ru.mail.go.webbase.blobs.UrlRankInfo ranks = 10;
int UrlQueryInfo::ranks_size() const {
  return ranks_.size();
}
void UrlQueryInfo::clear_ranks() {
  ranks_.Clear();
}
const ::ru::mail::go::webbase::blobs::UrlRankInfo& UrlQueryInfo::ranks(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.ranks)
  return ranks_.Get(index);
}
::ru::mail::go::webbase::blobs::UrlRankInfo* UrlQueryInfo::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfo.ranks)
  return ranks_.Mutable(index);
}
::ru::mail::go::webbase::blobs::UrlRankInfo* UrlQueryInfo::add_ranks() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.UrlQueryInfo.ranks)
  return ranks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::UrlRankInfo >*
UrlQueryInfo::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.UrlQueryInfo.ranks)
  return &ranks_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::UrlRankInfo >&
UrlQueryInfo::ranks() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.UrlQueryInfo.ranks)
  return ranks_;
}

// optional string vk_music_hash = 11;
bool UrlQueryInfo::has_vk_music_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UrlQueryInfo::set_has_vk_music_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void UrlQueryInfo::clear_has_vk_music_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void UrlQueryInfo::clear_vk_music_hash() {
  vk_music_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vk_music_hash();
}
const ::std::string& UrlQueryInfo::vk_music_hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
  return vk_music_hash_.GetNoArena();
}
void UrlQueryInfo::set_vk_music_hash(const ::std::string& value) {
  set_has_vk_music_hash();
  vk_music_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
}
#if LANG_CXX11
void UrlQueryInfo::set_vk_music_hash(::std::string&& value) {
  set_has_vk_music_hash();
  vk_music_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
}
#endif
void UrlQueryInfo::set_vk_music_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk_music_hash();
  vk_music_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
}
void UrlQueryInfo::set_vk_music_hash(const char* value, size_t size) {
  set_has_vk_music_hash();
  vk_music_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
}
::std::string* UrlQueryInfo::mutable_vk_music_hash() {
  set_has_vk_music_hash();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
  return vk_music_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfo::release_vk_music_hash() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
  clear_has_vk_music_hash();
  return vk_music_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfo::set_allocated_vk_music_hash(::std::string* vk_music_hash) {
  if (vk_music_hash != NULL) {
    set_has_vk_music_hash();
  } else {
    clear_has_vk_music_hash();
  }
  vk_music_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk_music_hash);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfo.vk_music_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlQueryInfoKey::kFullUrlFieldNumber;
const int UrlQueryInfoKey::kRankNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlQueryInfoKey::UrlQueryInfoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
}
UrlQueryInfoKey::UrlQueryInfoKey(const UrlQueryInfoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
  }
  rank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rank_name()) {
    rank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
}

void UrlQueryInfoKey::SharedCtor() {
  _cached_size_ = 0;
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UrlQueryInfoKey::~UrlQueryInfoKey() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  SharedDtor();
}

void UrlQueryInfoKey::SharedDtor() {
  full_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlQueryInfoKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlQueryInfoKey::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlQueryInfoKey& UrlQueryInfoKey::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlQueryInfoKey* UrlQueryInfoKey::New(::google::protobuf::Arena* arena) const {
  UrlQueryInfoKey* n = new UrlQueryInfoKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlQueryInfoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*full_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rank_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rank_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlQueryInfoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string rank_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rank_name().data(), static_cast<int>(this->rank_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  return false;
#undef DO_
}

void UrlQueryInfoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_url(), output);
  }

  // required string rank_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_name().data(), static_cast<int>(this->rank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rank_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
}

::google::protobuf::uint8* UrlQueryInfoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_url(), target);
  }

  // required string rank_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rank_name().data(), static_cast<int>(this->rank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rank_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  return target;
}

size_t UrlQueryInfoKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  size_t total_size = 0;

  if (has_full_url()) {
    // required string full_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_url());
  }

  if (has_rank_name()) {
    // required string rank_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rank_name());
  }

  return total_size;
}
size_t UrlQueryInfoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string full_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_url());

    // required string rank_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rank_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlQueryInfoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlQueryInfoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlQueryInfoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
    MergeFrom(*source);
  }
}

void UrlQueryInfoKey::MergeFrom(const UrlQueryInfoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_url();
      full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rank_name();
      rank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rank_name_);
    }
  }
}

void UrlQueryInfoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlQueryInfoKey::CopyFrom(const UrlQueryInfoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.UrlQueryInfoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlQueryInfoKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UrlQueryInfoKey::Swap(UrlQueryInfoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlQueryInfoKey::InternalSwap(UrlQueryInfoKey* other) {
  using std::swap;
  full_url_.Swap(&other->full_url_);
  rank_name_.Swap(&other->rank_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlQueryInfoKey::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlQueryInfoKey

// required string full_url = 1;
bool UrlQueryInfoKey::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UrlQueryInfoKey::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
void UrlQueryInfoKey::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void UrlQueryInfoKey::clear_full_url() {
  full_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_url();
}
const ::std::string& UrlQueryInfoKey::full_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
  return full_url_.GetNoArena();
}
void UrlQueryInfoKey::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
}
#if LANG_CXX11
void UrlQueryInfoKey::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
}
#endif
void UrlQueryInfoKey::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
}
void UrlQueryInfoKey::set_full_url(const char* value, size_t size) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
}
::std::string* UrlQueryInfoKey::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
  return full_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfoKey::release_full_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
  clear_has_full_url();
  return full_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfoKey::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfoKey.full_url)
}

// required string rank_name = 2;
bool UrlQueryInfoKey::has_rank_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UrlQueryInfoKey::set_has_rank_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UrlQueryInfoKey::clear_has_rank_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UrlQueryInfoKey::clear_rank_name() {
  rank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_name();
}
const ::std::string& UrlQueryInfoKey::rank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
  return rank_name_.GetNoArena();
}
void UrlQueryInfoKey::set_rank_name(const ::std::string& value) {
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
}
#if LANG_CXX11
void UrlQueryInfoKey::set_rank_name(::std::string&& value) {
  set_has_rank_name();
  rank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
}
#endif
void UrlQueryInfoKey::set_rank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
}
void UrlQueryInfoKey::set_rank_name(const char* value, size_t size) {
  set_has_rank_name();
  rank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
}
::std::string* UrlQueryInfoKey::mutable_rank_name() {
  set_has_rank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
  return rank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlQueryInfoKey::release_rank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
  clear_has_rank_name();
  return rank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlQueryInfoKey::set_allocated_rank_name(::std::string* rank_name) {
  if (rank_name != NULL) {
    set_has_rank_name();
  } else {
    clear_has_rank_name();
  }
  rank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.UrlQueryInfoKey.rank_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbIndexKey::kFullUrlFieldNumber;
const int ThumbIndexKey::kPriorityFieldNumber;
const int ThumbIndexKey::kPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbIndexKey::ThumbIndexKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ThumbIndexKey)
}
ThumbIndexKey::ThumbIndexKey(const ThumbIndexKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&partition_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(partition_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ThumbIndexKey)
}

void ThumbIndexKey::SharedCtor() {
  _cached_size_ = 0;
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partition_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(partition_));
}

ThumbIndexKey::~ThumbIndexKey() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ThumbIndexKey)
  SharedDtor();
}

void ThumbIndexKey::SharedDtor() {
  full_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ThumbIndexKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbIndexKey::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThumbIndexKey& ThumbIndexKey::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThumbIndexKey* ThumbIndexKey::New(::google::protobuf::Arena* arena) const {
  ThumbIndexKey* n = new ThumbIndexKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThumbIndexKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_full_url()) {
    GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*full_url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partition_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(partition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThumbIndexKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ThumbIndexKey.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 partition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ThumbIndexKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ThumbIndexKey)
  return false;
#undef DO_
}

void ThumbIndexKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ThumbIndexKey.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_url(), output);
  }

  // required uint32 priority = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  // required uint32 partition = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->partition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ThumbIndexKey)
}

::google::protobuf::uint8* ThumbIndexKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ThumbIndexKey.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_url(), target);
  }

  // required uint32 priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->priority(), target);
  }

  // required uint32 partition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->partition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ThumbIndexKey)
  return target;
}

size_t ThumbIndexKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  size_t total_size = 0;

  if (has_full_url()) {
    // required string full_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_url());
  }

  if (has_priority()) {
    // required uint32 priority = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  if (has_partition()) {
    // required uint32 partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->partition());
  }

  return total_size;
}
size_t ThumbIndexKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string full_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_url());

    // required uint32 priority = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());

    // required uint32 partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->partition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbIndexKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbIndexKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThumbIndexKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ThumbIndexKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ThumbIndexKey)
    MergeFrom(*source);
  }
}

void ThumbIndexKey::MergeFrom(const ThumbIndexKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_url();
      full_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      partition_ = from.partition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThumbIndexKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbIndexKey::CopyFrom(const ThumbIndexKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ThumbIndexKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbIndexKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ThumbIndexKey::Swap(ThumbIndexKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThumbIndexKey::InternalSwap(ThumbIndexKey* other) {
  using std::swap;
  full_url_.Swap(&other->full_url_);
  swap(priority_, other->priority_);
  swap(partition_, other->partition_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThumbIndexKey::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThumbIndexKey

// required string full_url = 1;
bool ThumbIndexKey::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThumbIndexKey::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ThumbIndexKey::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThumbIndexKey::clear_full_url() {
  full_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_url();
}
const ::std::string& ThumbIndexKey::full_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
  return full_url_.GetNoArena();
}
void ThumbIndexKey::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
}
#if LANG_CXX11
void ThumbIndexKey::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
}
#endif
void ThumbIndexKey::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
}
void ThumbIndexKey::set_full_url(const char* value, size_t size) {
  set_has_full_url();
  full_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
}
::std::string* ThumbIndexKey::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
  return full_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThumbIndexKey::release_full_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
  clear_has_full_url();
  return full_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThumbIndexKey::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ThumbIndexKey.full_url)
}

// required uint32 priority = 2;
bool ThumbIndexKey::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ThumbIndexKey::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void ThumbIndexKey::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void ThumbIndexKey::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
::google::protobuf::uint32 ThumbIndexKey::priority() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbIndexKey.priority)
  return priority_;
}
void ThumbIndexKey::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ThumbIndexKey.priority)
}

// required uint32 partition = 3;
bool ThumbIndexKey::has_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ThumbIndexKey::set_has_partition() {
  _has_bits_[0] |= 0x00000004u;
}
void ThumbIndexKey::clear_has_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
void ThumbIndexKey::clear_partition() {
  partition_ = 0u;
  clear_has_partition();
}
::google::protobuf::uint32 ThumbIndexKey::partition() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ThumbIndexKey.partition)
  return partition_;
}
void ThumbIndexKey::set_partition(::google::protobuf::uint32 value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ThumbIndexKey.partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextIndexKey::kPartitionFieldNumber;
const int TextIndexKey::kKeyDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextIndexKey::TextIndexKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TextIndexKey)
}
TextIndexKey::TextIndexKey(const TextIndexKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keydomain()) {
    keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
  }
  partition_ = from.partition_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TextIndexKey)
}

void TextIndexKey::SharedCtor() {
  _cached_size_ = 0;
  keydomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_ = 0u;
}

TextIndexKey::~TextIndexKey() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TextIndexKey)
  SharedDtor();
}

void TextIndexKey::SharedDtor() {
  keydomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextIndexKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextIndexKey::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextIndexKey& TextIndexKey::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextIndexKey* TextIndexKey::New(::google::protobuf::Arena* arena) const {
  TextIndexKey* n = new TextIndexKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextIndexKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TextIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_keydomain()) {
    GOOGLE_DCHECK(!keydomain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*keydomain_.UnsafeRawStringPointer())->clear();
  }
  partition_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextIndexKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TextIndexKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 partition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string keyDomain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keydomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keydomain().data(), static_cast<int>(this->keydomain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TextIndexKey.keyDomain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TextIndexKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TextIndexKey)
  return false;
#undef DO_
}

void TextIndexKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TextIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 partition = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partition(), output);
  }

  // required string keyDomain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextIndexKey.keyDomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keydomain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TextIndexKey)
}

::google::protobuf::uint8* TextIndexKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TextIndexKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 partition = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partition(), target);
  }

  // required string keyDomain = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keydomain().data(), static_cast<int>(this->keydomain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TextIndexKey.keyDomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keydomain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TextIndexKey)
  return target;
}

size_t TextIndexKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.TextIndexKey)
  size_t total_size = 0;

  if (has_keydomain()) {
    // required string keyDomain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keydomain());
  }

  if (has_partition()) {
    // required uint32 partition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->partition());
  }

  return total_size;
}
size_t TextIndexKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TextIndexKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string keyDomain = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keydomain());

    // required uint32 partition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->partition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextIndexKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TextIndexKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TextIndexKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextIndexKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TextIndexKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TextIndexKey)
    MergeFrom(*source);
  }
}

void TextIndexKey::MergeFrom(const TextIndexKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TextIndexKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keydomain();
      keydomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keydomain_);
    }
    if (cached_has_bits & 0x00000002u) {
      partition_ = from.partition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextIndexKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TextIndexKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextIndexKey::CopyFrom(const TextIndexKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TextIndexKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextIndexKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TextIndexKey::Swap(TextIndexKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextIndexKey::InternalSwap(TextIndexKey* other) {
  using std::swap;
  keydomain_.Swap(&other->keydomain_);
  swap(partition_, other->partition_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextIndexKey::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextIndexKey

// required uint32 partition = 1;
bool TextIndexKey::has_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TextIndexKey::set_has_partition() {
  _has_bits_[0] |= 0x00000002u;
}
void TextIndexKey::clear_has_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
void TextIndexKey::clear_partition() {
  partition_ = 0u;
  clear_has_partition();
}
::google::protobuf::uint32 TextIndexKey::partition() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextIndexKey.partition)
  return partition_;
}
void TextIndexKey::set_partition(::google::protobuf::uint32 value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextIndexKey.partition)
}

// required string keyDomain = 2;
bool TextIndexKey::has_keydomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextIndexKey::set_has_keydomain() {
  _has_bits_[0] |= 0x00000001u;
}
void TextIndexKey::clear_has_keydomain() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextIndexKey::clear_keydomain() {
  keydomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keydomain();
}
const ::std::string& TextIndexKey::keydomain() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
  return keydomain_.GetNoArena();
}
void TextIndexKey::set_keydomain(const ::std::string& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
}
#if LANG_CXX11
void TextIndexKey::set_keydomain(::std::string&& value) {
  set_has_keydomain();
  keydomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
}
#endif
void TextIndexKey::set_keydomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
}
void TextIndexKey::set_keydomain(const char* value, size_t size) {
  set_has_keydomain();
  keydomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
}
::std::string* TextIndexKey::mutable_keydomain() {
  set_has_keydomain();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
  return keydomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextIndexKey::release_keydomain() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
  clear_has_keydomain();
  return keydomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextIndexKey::set_allocated_keydomain(::std::string* keydomain) {
  if (keydomain != NULL) {
    set_has_keydomain();
  } else {
    clear_has_keydomain();
  }
  keydomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keydomain);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TextIndexKey.keyDomain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkersInfo_PageInfo::kUrlFieldNumber;
const int MarkersInfo_PageInfo::kWebMarkersCntFieldNumber;
const int MarkersInfo_PageInfo::kImgMarkersCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkersInfo_PageInfo::MarkersInfo_PageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
}
MarkersInfo_PageInfo::MarkersInfo_PageInfo(const MarkersInfo_PageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&webmarkerscnt_, &from.webmarkerscnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&imgmarkerscnt_) -
    reinterpret_cast<char*>(&webmarkerscnt_)) + sizeof(imgmarkerscnt_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
}

void MarkersInfo_PageInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&webmarkerscnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imgmarkerscnt_) -
      reinterpret_cast<char*>(&webmarkerscnt_)) + sizeof(imgmarkerscnt_));
}

MarkersInfo_PageInfo::~MarkersInfo_PageInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  SharedDtor();
}

void MarkersInfo_PageInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarkersInfo_PageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkersInfo_PageInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkersInfo_PageInfo& MarkersInfo_PageInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkersInfo_PageInfo* MarkersInfo_PageInfo::New(::google::protobuf::Arena* arena) const {
  MarkersInfo_PageInfo* n = new MarkersInfo_PageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkersInfo_PageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&webmarkerscnt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imgmarkerscnt_) -
        reinterpret_cast<char*>(&webmarkerscnt_)) + sizeof(imgmarkerscnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkersInfo_PageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 webMarkersCnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_webmarkerscnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webmarkerscnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgMarkersCnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_imgmarkerscnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgmarkerscnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  return false;
#undef DO_
}

void MarkersInfo_PageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 webMarkersCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webmarkerscnt(), output);
  }

  // required uint32 ImgMarkersCnt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imgmarkerscnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
}

::google::protobuf::uint8* MarkersInfo_PageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 webMarkersCnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webmarkerscnt(), target);
  }

  // required uint32 ImgMarkersCnt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imgmarkerscnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  return target;
}

size_t MarkersInfo_PageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_webmarkerscnt()) {
    // required uint32 webMarkersCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->webmarkerscnt());
  }

  if (has_imgmarkerscnt()) {
    // required uint32 ImgMarkersCnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgmarkerscnt());
  }

  return total_size;
}
size_t MarkersInfo_PageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 webMarkersCnt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->webmarkerscnt());

    // required uint32 ImgMarkersCnt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgmarkerscnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkersInfo_PageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkersInfo_PageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkersInfo_PageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
    MergeFrom(*source);
  }
}

void MarkersInfo_PageInfo::MergeFrom(const MarkersInfo_PageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      webmarkerscnt_ = from.webmarkerscnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      imgmarkerscnt_ = from.imgmarkerscnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkersInfo_PageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkersInfo_PageInfo::CopyFrom(const MarkersInfo_PageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkersInfo_PageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MarkersInfo_PageInfo::Swap(MarkersInfo_PageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkersInfo_PageInfo::InternalSwap(MarkersInfo_PageInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(webmarkerscnt_, other->webmarkerscnt_);
  swap(imgmarkerscnt_, other->imgmarkerscnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkersInfo_PageInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkersInfo_PageInfo

// required string url = 1;
bool MarkersInfo_PageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkersInfo_PageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkersInfo_PageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkersInfo_PageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MarkersInfo_PageInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
  return url_.GetNoArena();
}
void MarkersInfo_PageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
}
#if LANG_CXX11
void MarkersInfo_PageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
}
#endif
void MarkersInfo_PageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
}
void MarkersInfo_PageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
}
::std::string* MarkersInfo_PageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarkersInfo_PageInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarkersInfo_PageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.url)
}

// required uint32 webMarkersCnt = 2;
bool MarkersInfo_PageInfo::has_webmarkerscnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkersInfo_PageInfo::set_has_webmarkerscnt() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkersInfo_PageInfo::clear_has_webmarkerscnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkersInfo_PageInfo::clear_webmarkerscnt() {
  webmarkerscnt_ = 0u;
  clear_has_webmarkerscnt();
}
::google::protobuf::uint32 MarkersInfo_PageInfo::webmarkerscnt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.webMarkersCnt)
  return webmarkerscnt_;
}
void MarkersInfo_PageInfo::set_webmarkerscnt(::google::protobuf::uint32 value) {
  set_has_webmarkerscnt();
  webmarkerscnt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.webMarkersCnt)
}

// required uint32 ImgMarkersCnt = 3;
bool MarkersInfo_PageInfo::has_imgmarkerscnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkersInfo_PageInfo::set_has_imgmarkerscnt() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkersInfo_PageInfo::clear_has_imgmarkerscnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkersInfo_PageInfo::clear_imgmarkerscnt() {
  imgmarkerscnt_ = 0u;
  clear_has_imgmarkerscnt();
}
::google::protobuf::uint32 MarkersInfo_PageInfo::imgmarkerscnt() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.ImgMarkersCnt)
  return imgmarkerscnt_;
}
void MarkersInfo_PageInfo::set_imgmarkerscnt(::google::protobuf::uint32 value) {
  set_has_imgmarkerscnt();
  imgmarkerscnt_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkersInfo.PageInfo.ImgMarkersCnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkersInfo::kTypeFieldNumber;
const int MarkersInfo::kPageinfoFieldNumber;
const int MarkersInfo::kSekiteiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkersInfo::MarkersInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.MarkersInfo)
}
MarkersInfo::MarkersInfo(const MarkersInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pageinfo()) {
    pageinfo_ = new ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo(*from.pageinfo_);
  } else {
    pageinfo_ = NULL;
  }
  if (from.has_sekitei()) {
    sekitei_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m(*from.sekitei_);
  } else {
    sekitei_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.MarkersInfo)
}

void MarkersInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pageinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pageinfo_)) + sizeof(type_));
}

MarkersInfo::~MarkersInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.MarkersInfo)
  SharedDtor();
}

void MarkersInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pageinfo_;
  if (this != internal_default_instance()) delete sekitei_;
}

void MarkersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkersInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkersInfo& MarkersInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarkersInfo* MarkersInfo::New(::google::protobuf::Arena* arena) const {
  MarkersInfo* n = new MarkersInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarkersInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.MarkersInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pageinfo_ != NULL);
      pageinfo_->::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sekitei_ != NULL);
      sekitei_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.MarkersInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.MarkersInfo.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::MarkersInfo_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::MarkersInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.MarkersInfo.PageInfo pageinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sekitei()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.MarkersInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.MarkersInfo)
  return false;
#undef DO_
}

void MarkersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.MarkersInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.MarkersInfo.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.MarkersInfo.PageInfo pageinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pageinfo_, output);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sekitei_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.MarkersInfo)
}

::google::protobuf::uint8* MarkersInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.MarkersInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.MarkersInfo.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.MarkersInfo.PageInfo pageinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pageinfo_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sekitei_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.MarkersInfo)
  return target;
}

size_t MarkersInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.MarkersInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.MarkersInfo.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ru.mail.go.webbase.blobs.MarkersInfo.PageInfo pageinfo = 2;
    if (has_pageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pageinfo_);
    }

    // optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 3;
    if (has_sekitei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sekitei_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkersInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.MarkersInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkersInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkersInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.MarkersInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.MarkersInfo)
    MergeFrom(*source);
  }
}

void MarkersInfo::MergeFrom(const MarkersInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.MarkersInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pageinfo()->::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo::MergeFrom(from.pageinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sekitei()->::ru::mail::go::webbase::sekitei::Sekitei_m::MergeFrom(from.sekitei());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkersInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.MarkersInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkersInfo::CopyFrom(const MarkersInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.MarkersInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkersInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_pageinfo()) {
    if (!this->pageinfo_->IsInitialized()) return false;
  }
  if (has_sekitei()) {
    if (!this->sekitei_->IsInitialized()) return false;
  }
  return true;
}

void MarkersInfo::Swap(MarkersInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkersInfo::InternalSwap(MarkersInfo* other) {
  using std::swap;
  swap(pageinfo_, other->pageinfo_);
  swap(sekitei_, other->sekitei_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkersInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkersInfo

// required .ru.mail.go.webbase.blobs.MarkersInfo.Type type = 1;
bool MarkersInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarkersInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MarkersInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarkersInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::MarkersInfo_Type MarkersInfo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.type)
  return static_cast< ::ru::mail::go::webbase::blobs::MarkersInfo_Type >(type_);
}
void MarkersInfo::set_type(::ru::mail::go::webbase::blobs::MarkersInfo_Type value) {
  assert(::ru::mail::go::webbase::blobs::MarkersInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.MarkersInfo.type)
}

// optional .ru.mail.go.webbase.blobs.MarkersInfo.PageInfo pageinfo = 2;
bool MarkersInfo::has_pageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarkersInfo::set_has_pageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void MarkersInfo::clear_has_pageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarkersInfo::clear_pageinfo() {
  if (pageinfo_ != NULL) pageinfo_->::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo::Clear();
  clear_has_pageinfo();
}
const ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo& MarkersInfo::pageinfo() const {
  const ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo* p = pageinfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.pageinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo*>(
      &::ru::mail::go::webbase::blobs::_MarkersInfo_PageInfo_default_instance_);
}
::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo* MarkersInfo::mutable_pageinfo() {
  set_has_pageinfo();
  if (pageinfo_ == NULL) {
    pageinfo_ = new ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkersInfo.pageinfo)
  return pageinfo_;
}
::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo* MarkersInfo::release_pageinfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkersInfo.pageinfo)
  clear_has_pageinfo();
  ::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo* temp = pageinfo_;
  pageinfo_ = NULL;
  return temp;
}
void MarkersInfo::set_allocated_pageinfo(::ru::mail::go::webbase::blobs::MarkersInfo_PageInfo* pageinfo) {
  delete pageinfo_;
  pageinfo_ = pageinfo;
  if (pageinfo) {
    set_has_pageinfo();
  } else {
    clear_has_pageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkersInfo.pageinfo)
}

// optional .ru.mail.go.webbase.sekitei.Sekitei_m sekitei = 3;
bool MarkersInfo::has_sekitei() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarkersInfo::set_has_sekitei() {
  _has_bits_[0] |= 0x00000002u;
}
void MarkersInfo::clear_has_sekitei() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarkersInfo::clear_sekitei() {
  if (sekitei_ != NULL) sekitei_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
  clear_has_sekitei();
}
const ::ru::mail::go::webbase::sekitei::Sekitei_m& MarkersInfo::sekitei() const {
  const ::ru::mail::go::webbase::sekitei::Sekitei_m* p = sekitei_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.MarkersInfo.sekitei)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      &::ru::mail::go::webbase::sekitei::_Sekitei_m_default_instance_);
}
::ru::mail::go::webbase::sekitei::Sekitei_m* MarkersInfo::mutable_sekitei() {
  set_has_sekitei();
  if (sekitei_ == NULL) {
    sekitei_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.MarkersInfo.sekitei)
  return sekitei_;
}
::ru::mail::go::webbase::sekitei::Sekitei_m* MarkersInfo::release_sekitei() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.MarkersInfo.sekitei)
  clear_has_sekitei();
  ::ru::mail::go::webbase::sekitei::Sekitei_m* temp = sekitei_;
  sekitei_ = NULL;
  return temp;
}
void MarkersInfo::set_allocated_sekitei(::ru::mail::go::webbase::sekitei::Sekitei_m* sekitei) {
  delete sekitei_;
  sekitei_ = sekitei;
  if (sekitei) {
    set_has_sekitei();
  } else {
    clear_has_sekitei();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.MarkersInfo.sekitei)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResClustInfo::kIdFieldNumber;
const int ResClustInfo::kResPart1FieldNumber;
const int ResClustInfo::kResPart2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResClustInfo::ResClustInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ResClustInfo)
}
ResClustInfo::ResClustInfo(const ResClustInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_part1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_part1()) {
    res_part1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_part1_);
  }
  res_part2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_part2()) {
    res_part2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_part2_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ResClustInfo)
}

void ResClustInfo::SharedCtor() {
  _cached_size_ = 0;
  res_part1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_part2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

ResClustInfo::~ResClustInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ResClustInfo)
  SharedDtor();
}

void ResClustInfo::SharedDtor() {
  res_part1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_part2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResClustInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClustInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResClustInfo& ResClustInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResClustInfo* ResClustInfo::New(::google::protobuf::Arena* arena) const {
  ResClustInfo* n = new ResClustInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResClustInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ResClustInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!res_part1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*res_part1_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!res_part2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*res_part2_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResClustInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ResClustInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_part1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_part1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_part1().data(), static_cast<int>(this->res_part1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ResClustInfo.res_part1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_part2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_part2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_part2().data(), static_cast<int>(this->res_part2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ResClustInfo.res_part2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ResClustInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ResClustInfo)
  return false;
#undef DO_
}

void ResClustInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ResClustInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string res_part1 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_part1().data(), static_cast<int>(this->res_part1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ResClustInfo.res_part1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->res_part1(), output);
  }

  // optional string res_part2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_part2().data(), static_cast<int>(this->res_part2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ResClustInfo.res_part2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->res_part2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ResClustInfo)
}

::google::protobuf::uint8* ResClustInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ResClustInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string res_part1 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_part1().data(), static_cast<int>(this->res_part1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ResClustInfo.res_part1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res_part1(), target);
  }

  // optional string res_part2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_part2().data(), static_cast<int>(this->res_part2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ResClustInfo.res_part2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->res_part2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ResClustInfo)
  return target;
}

size_t ResClustInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ResClustInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string res_part1 = 2;
    if (has_res_part1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_part1());
    }

    // optional string res_part2 = 3;
    if (has_res_part2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_part2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClustInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ResClustInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResClustInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResClustInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ResClustInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ResClustInfo)
    MergeFrom(*source);
  }
}

void ResClustInfo::MergeFrom(const ResClustInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ResClustInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_res_part1();
      res_part1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_part1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_res_part2();
      res_part2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_part2_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResClustInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ResClustInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClustInfo::CopyFrom(const ResClustInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ResClustInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClustInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ResClustInfo::Swap(ResClustInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResClustInfo::InternalSwap(ResClustInfo* other) {
  using std::swap;
  res_part1_.Swap(&other->res_part1_);
  res_part2_.Swap(&other->res_part2_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResClustInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResClustInfo

// required int64 id = 1;
bool ResClustInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResClustInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ResClustInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResClustInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 ResClustInfo::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ResClustInfo.id)
  return id_;
}
void ResClustInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ResClustInfo.id)
}

// optional string res_part1 = 2;
bool ResClustInfo::has_res_part1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResClustInfo::set_has_res_part1() {
  _has_bits_[0] |= 0x00000001u;
}
void ResClustInfo::clear_has_res_part1() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResClustInfo::clear_res_part1() {
  res_part1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_res_part1();
}
const ::std::string& ResClustInfo::res_part1() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
  return res_part1_.GetNoArena();
}
void ResClustInfo::set_res_part1(const ::std::string& value) {
  set_has_res_part1();
  res_part1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
}
#if LANG_CXX11
void ResClustInfo::set_res_part1(::std::string&& value) {
  set_has_res_part1();
  res_part1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
}
#endif
void ResClustInfo::set_res_part1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_res_part1();
  res_part1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
}
void ResClustInfo::set_res_part1(const char* value, size_t size) {
  set_has_res_part1();
  res_part1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
}
::std::string* ResClustInfo::mutable_res_part1() {
  set_has_res_part1();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
  return res_part1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResClustInfo::release_res_part1() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
  clear_has_res_part1();
  return res_part1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResClustInfo::set_allocated_res_part1(::std::string* res_part1) {
  if (res_part1 != NULL) {
    set_has_res_part1();
  } else {
    clear_has_res_part1();
  }
  res_part1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_part1);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ResClustInfo.res_part1)
}

// optional string res_part2 = 3;
bool ResClustInfo::has_res_part2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResClustInfo::set_has_res_part2() {
  _has_bits_[0] |= 0x00000002u;
}
void ResClustInfo::clear_has_res_part2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResClustInfo::clear_res_part2() {
  res_part2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_res_part2();
}
const ::std::string& ResClustInfo::res_part2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
  return res_part2_.GetNoArena();
}
void ResClustInfo::set_res_part2(const ::std::string& value) {
  set_has_res_part2();
  res_part2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
}
#if LANG_CXX11
void ResClustInfo::set_res_part2(::std::string&& value) {
  set_has_res_part2();
  res_part2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
}
#endif
void ResClustInfo::set_res_part2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_res_part2();
  res_part2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
}
void ResClustInfo::set_res_part2(const char* value, size_t size) {
  set_has_res_part2();
  res_part2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
}
::std::string* ResClustInfo::mutable_res_part2() {
  set_has_res_part2();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
  return res_part2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResClustInfo::release_res_part2() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
  clear_has_res_part2();
  return res_part2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResClustInfo::set_allocated_res_part2(::std::string* res_part2) {
  if (res_part2 != NULL) {
    set_has_res_part2();
  } else {
    clear_has_res_part2();
  }
  res_part2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_part2);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ResClustInfo.res_part2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscoveryVisitUrlInfo::kSourceFieldNumber;
const int DiscoveryVisitUrlInfo::kTsFieldNumber;
const int DiscoveryVisitUrlInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscoveryVisitUrlInfo::DiscoveryVisitUrlInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
}
DiscoveryVisitUrlInfo::DiscoveryVisitUrlInfo(const DiscoveryVisitUrlInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
}

void DiscoveryVisitUrlInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(source_));
}

DiscoveryVisitUrlInfo::~DiscoveryVisitUrlInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  SharedDtor();
}

void DiscoveryVisitUrlInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DiscoveryVisitUrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryVisitUrlInfo::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiscoveryVisitUrlInfo& DiscoveryVisitUrlInfo::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiscoveryVisitUrlInfo* DiscoveryVisitUrlInfo::New(::google::protobuf::Arena* arena) const {
  DiscoveryVisitUrlInfo* n = new DiscoveryVisitUrlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscoveryVisitUrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DiscoveryVisitUrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source_IsValid(value)) {
            set_source(static_cast< ::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  return false;
#undef DO_
}

void DiscoveryVisitUrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
}

::google::protobuf::uint8* DiscoveryVisitUrlInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // required uint64 ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  return target;
}

size_t DiscoveryVisitUrlInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_ts()) {
    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  if (has_source()) {
    // required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  return total_size;
}
size_t DiscoveryVisitUrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

    // required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryVisitUrlInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveryVisitUrlInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscoveryVisitUrlInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
    MergeFrom(*source);
  }
}

void DiscoveryVisitUrlInfo::MergeFrom(const DiscoveryVisitUrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiscoveryVisitUrlInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryVisitUrlInfo::CopyFrom(const DiscoveryVisitUrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryVisitUrlInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DiscoveryVisitUrlInfo::Swap(DiscoveryVisitUrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscoveryVisitUrlInfo::InternalSwap(DiscoveryVisitUrlInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(ts_, other->ts_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscoveryVisitUrlInfo::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiscoveryVisitUrlInfo

// required .ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.Source source = 1;
bool DiscoveryVisitUrlInfo::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DiscoveryVisitUrlInfo::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void DiscoveryVisitUrlInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void DiscoveryVisitUrlInfo::clear_source() {
  source_ = 0;
  clear_has_source();
}
::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source DiscoveryVisitUrlInfo::source() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.source)
  return static_cast< ::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source >(source_);
}
void DiscoveryVisitUrlInfo::set_source(::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source value) {
  assert(::ru::mail::go::webbase::blobs::DiscoveryVisitUrlInfo_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.source)
}

// required uint64 ts = 2;
bool DiscoveryVisitUrlInfo::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DiscoveryVisitUrlInfo::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void DiscoveryVisitUrlInfo::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void DiscoveryVisitUrlInfo::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 DiscoveryVisitUrlInfo::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.ts)
  return ts_;
}
void DiscoveryVisitUrlInfo::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.ts)
}

// required string url = 3;
bool DiscoveryVisitUrlInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DiscoveryVisitUrlInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DiscoveryVisitUrlInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DiscoveryVisitUrlInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DiscoveryVisitUrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
  return url_.GetNoArena();
}
void DiscoveryVisitUrlInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
}
#if LANG_CXX11
void DiscoveryVisitUrlInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
}
#endif
void DiscoveryVisitUrlInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
}
void DiscoveryVisitUrlInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
}
::std::string* DiscoveryVisitUrlInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiscoveryVisitUrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiscoveryVisitUrlInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DiscoveryVisitUrlInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DarkImageLinks::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DarkImageLinks::DarkImageLinks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DarkImageLinks)
}
DarkImageLinks::DarkImageLinks(const DarkImageLinks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DarkImageLinks)
}

void DarkImageLinks::SharedCtor() {
  _cached_size_ = 0;
}

DarkImageLinks::~DarkImageLinks() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DarkImageLinks)
  SharedDtor();
}

void DarkImageLinks::SharedDtor() {
}

void DarkImageLinks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DarkImageLinks::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DarkImageLinks& DarkImageLinks::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DarkImageLinks* DarkImageLinks::New(::google::protobuf::Arena* arena) const {
  DarkImageLinks* n = new DarkImageLinks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DarkImageLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DarkImageLinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.DarkImageLinksItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DarkImageLinks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DarkImageLinks)
  return false;
#undef DO_
}

void DarkImageLinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.DarkImageLinksItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DarkImageLinks)
}

::google::protobuf::uint8* DarkImageLinks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.DarkImageLinksItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DarkImageLinks)
  return target;
}

size_t DarkImageLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.DarkImageLinksItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DarkImageLinks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  GOOGLE_DCHECK_NE(&from, this);
  const DarkImageLinks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DarkImageLinks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DarkImageLinks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DarkImageLinks)
    MergeFrom(*source);
  }
}

void DarkImageLinks::MergeFrom(const DarkImageLinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void DarkImageLinks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DarkImageLinks::CopyFrom(const DarkImageLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DarkImageLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DarkImageLinks::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void DarkImageLinks::Swap(DarkImageLinks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DarkImageLinks::InternalSwap(DarkImageLinks* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DarkImageLinks::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DarkImageLinks

// repeated .ru.mail.go.webbase.blobs.DarkImageLinksItem items = 1;
int DarkImageLinks::items_size() const {
  return items_.size();
}
void DarkImageLinks::clear_items() {
  items_.Clear();
}
const ::ru::mail::go::webbase::blobs::DarkImageLinksItem& DarkImageLinks::items(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinks.items)
  return items_.Get(index);
}
::ru::mail::go::webbase::blobs::DarkImageLinksItem* DarkImageLinks::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DarkImageLinks.items)
  return items_.Mutable(index);
}
::ru::mail::go::webbase::blobs::DarkImageLinksItem* DarkImageLinks::add_items() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.DarkImageLinks.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::DarkImageLinksItem >*
DarkImageLinks::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.DarkImageLinks.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::DarkImageLinksItem >&
DarkImageLinks::items() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.DarkImageLinks.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DarkImageLinksItem::kUrlFieldNumber;
const int DarkImageLinksItem::kHttpStatusFieldNumber;
const int DarkImageLinksItem::kWidthFieldNumber;
const int DarkImageLinksItem::kHeightFieldNumber;
const int DarkImageLinksItem::kLeftFieldNumber;
const int DarkImageLinksItem::kTopFieldNumber;
const int DarkImageLinksItem::kZindexFieldNumber;
const int DarkImageLinksItem::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DarkImageLinksItem::DarkImageLinksItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.DarkImageLinksItem)
}
DarkImageLinksItem::DarkImageLinksItem(const DarkImageLinksItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meta()) {
    meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
  }
  ::memcpy(&httpstatus_, &from.httpstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&zindex_) -
    reinterpret_cast<char*>(&httpstatus_)) + sizeof(zindex_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.DarkImageLinksItem)
}

void DarkImageLinksItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&httpstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zindex_) -
      reinterpret_cast<char*>(&httpstatus_)) + sizeof(zindex_));
}

DarkImageLinksItem::~DarkImageLinksItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  SharedDtor();
}

void DarkImageLinksItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DarkImageLinksItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DarkImageLinksItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DarkImageLinksItem& DarkImageLinksItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DarkImageLinksItem* DarkImageLinksItem::New(::google::protobuf::Arena* arena) const {
  DarkImageLinksItem* n = new DarkImageLinksItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DarkImageLinksItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!meta_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meta_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&httpstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zindex_) -
        reinterpret_cast<char*>(&httpstatus_)) + sizeof(zindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DarkImageLinksItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.DarkImageLinksItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 httpStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_httpstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &httpstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zindex = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_zindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meta().data(), static_cast<int>(this->meta().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.DarkImageLinksItem.meta");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  return false;
#undef DO_
}

void DarkImageLinksItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DarkImageLinksItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint32 httpStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->httpstatus(), output);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional int32 left = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left(), output);
  }

  // optional int32 top = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->top(), output);
  }

  // optional int32 zindex = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zindex(), output);
  }

  // optional string meta = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DarkImageLinksItem.meta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->meta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.DarkImageLinksItem)
}

::google::protobuf::uint8* DarkImageLinksItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DarkImageLinksItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint32 httpStatus = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->httpstatus(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional int32 left = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left(), target);
  }

  // optional int32 top = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->top(), target);
  }

  // optional int32 zindex = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zindex(), target);
  }

  // optional string meta = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta().data(), static_cast<int>(this->meta().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.DarkImageLinksItem.meta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->meta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  return target;
}

size_t DarkImageLinksItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_httpstatus()) {
    // required uint32 httpStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->httpstatus());
  }

  return total_size;
}
size_t DarkImageLinksItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 httpStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->httpstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string meta = 8;
  if (has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->meta());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional int32 left = 5;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 6;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 zindex = 7;
    if (has_zindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DarkImageLinksItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DarkImageLinksItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DarkImageLinksItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.DarkImageLinksItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.DarkImageLinksItem)
    MergeFrom(*source);
  }
}

void DarkImageLinksItem::MergeFrom(const DarkImageLinksItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_meta();
      meta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_);
    }
    if (cached_has_bits & 0x00000004u) {
      httpstatus_ = from.httpstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000040u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000080u) {
      zindex_ = from.zindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DarkImageLinksItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DarkImageLinksItem::CopyFrom(const DarkImageLinksItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.DarkImageLinksItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DarkImageLinksItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void DarkImageLinksItem::Swap(DarkImageLinksItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DarkImageLinksItem::InternalSwap(DarkImageLinksItem* other) {
  using std::swap;
  url_.Swap(&other->url_);
  meta_.Swap(&other->meta_);
  swap(httpstatus_, other->httpstatus_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(zindex_, other->zindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DarkImageLinksItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DarkImageLinksItem

// required string url = 1;
bool DarkImageLinksItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DarkImageLinksItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DarkImageLinksItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DarkImageLinksItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DarkImageLinksItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
  return url_.GetNoArena();
}
void DarkImageLinksItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
}
#if LANG_CXX11
void DarkImageLinksItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
}
#endif
void DarkImageLinksItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
}
void DarkImageLinksItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
}
::std::string* DarkImageLinksItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DarkImageLinksItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DarkImageLinksItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DarkImageLinksItem.url)
}

// required uint32 httpStatus = 2;
bool DarkImageLinksItem::has_httpstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DarkImageLinksItem::set_has_httpstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void DarkImageLinksItem::clear_has_httpstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void DarkImageLinksItem::clear_httpstatus() {
  httpstatus_ = 0u;
  clear_has_httpstatus();
}
::google::protobuf::uint32 DarkImageLinksItem::httpstatus() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.httpStatus)
  return httpstatus_;
}
void DarkImageLinksItem::set_httpstatus(::google::protobuf::uint32 value) {
  set_has_httpstatus();
  httpstatus_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.httpStatus)
}

// optional uint32 width = 3;
bool DarkImageLinksItem::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DarkImageLinksItem::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void DarkImageLinksItem::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void DarkImageLinksItem::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 DarkImageLinksItem::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.width)
  return width_;
}
void DarkImageLinksItem::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.width)
}

// optional uint32 height = 4;
bool DarkImageLinksItem::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DarkImageLinksItem::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void DarkImageLinksItem::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void DarkImageLinksItem::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 DarkImageLinksItem::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.height)
  return height_;
}
void DarkImageLinksItem::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.height)
}

// optional int32 left = 5;
bool DarkImageLinksItem::has_left() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DarkImageLinksItem::set_has_left() {
  _has_bits_[0] |= 0x00000020u;
}
void DarkImageLinksItem::clear_has_left() {
  _has_bits_[0] &= ~0x00000020u;
}
void DarkImageLinksItem::clear_left() {
  left_ = 0;
  clear_has_left();
}
::google::protobuf::int32 DarkImageLinksItem::left() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.left)
  return left_;
}
void DarkImageLinksItem::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.left)
}

// optional int32 top = 6;
bool DarkImageLinksItem::has_top() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DarkImageLinksItem::set_has_top() {
  _has_bits_[0] |= 0x00000040u;
}
void DarkImageLinksItem::clear_has_top() {
  _has_bits_[0] &= ~0x00000040u;
}
void DarkImageLinksItem::clear_top() {
  top_ = 0;
  clear_has_top();
}
::google::protobuf::int32 DarkImageLinksItem::top() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.top)
  return top_;
}
void DarkImageLinksItem::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.top)
}

// optional int32 zindex = 7;
bool DarkImageLinksItem::has_zindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DarkImageLinksItem::set_has_zindex() {
  _has_bits_[0] |= 0x00000080u;
}
void DarkImageLinksItem::clear_has_zindex() {
  _has_bits_[0] &= ~0x00000080u;
}
void DarkImageLinksItem::clear_zindex() {
  zindex_ = 0;
  clear_has_zindex();
}
::google::protobuf::int32 DarkImageLinksItem::zindex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.zindex)
  return zindex_;
}
void DarkImageLinksItem::set_zindex(::google::protobuf::int32 value) {
  set_has_zindex();
  zindex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.zindex)
}

// optional string meta = 8;
bool DarkImageLinksItem::has_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DarkImageLinksItem::set_has_meta() {
  _has_bits_[0] |= 0x00000002u;
}
void DarkImageLinksItem::clear_has_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
void DarkImageLinksItem::clear_meta() {
  meta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meta();
}
const ::std::string& DarkImageLinksItem::meta() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
  return meta_.GetNoArena();
}
void DarkImageLinksItem::set_meta(const ::std::string& value) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
}
#if LANG_CXX11
void DarkImageLinksItem::set_meta(::std::string&& value) {
  set_has_meta();
  meta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
}
#endif
void DarkImageLinksItem::set_meta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
}
void DarkImageLinksItem::set_meta(const char* value, size_t size) {
  set_has_meta();
  meta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
}
::std::string* DarkImageLinksItem::mutable_meta() {
  set_has_meta();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
  return meta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DarkImageLinksItem::release_meta() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
  clear_has_meta();
  return meta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DarkImageLinksItem::set_allocated_meta(::std::string* meta) {
  if (meta != NULL) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
  meta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.DarkImageLinksItem.meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingData::kUrlFieldNumber;
const int EmbeddingData::kEmbeddingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingData::EmbeddingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.EmbeddingData)
}
EmbeddingData::EmbeddingData(const EmbeddingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_embedding()) {
    embedding_ = new ::qembedder::pb::Embedding(*from.embedding_);
  } else {
    embedding_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.EmbeddingData)
}

void EmbeddingData::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  embedding_ = NULL;
}

EmbeddingData::~EmbeddingData() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.EmbeddingData)
  SharedDtor();
}

void EmbeddingData::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete embedding_;
}

void EmbeddingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbeddingData::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbeddingData& EmbeddingData::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbeddingData* EmbeddingData::New(::google::protobuf::Arena* arena) const {
  EmbeddingData* n = new EmbeddingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbeddingData::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.EmbeddingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(embedding_ != NULL);
      embedding_->::qembedder::pb::Embedding::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbeddingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.EmbeddingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.EmbeddingData.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qembedder.pb.Embedding embedding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embedding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.EmbeddingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.EmbeddingData)
  return false;
#undef DO_
}

void EmbeddingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.EmbeddingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EmbeddingData.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .qembedder.pb.Embedding embedding = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->embedding_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.EmbeddingData)
}

::google::protobuf::uint8* EmbeddingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.EmbeddingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.EmbeddingData.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .qembedder.pb.Embedding embedding = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->embedding_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.EmbeddingData)
  return target;
}

size_t EmbeddingData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.EmbeddingData)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_embedding()) {
    // required .qembedder.pb.Embedding embedding = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->embedding_);
  }

  return total_size;
}
size_t EmbeddingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.EmbeddingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required .qembedder.pb.Embedding embedding = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->embedding_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbeddingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.EmbeddingData)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbeddingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbeddingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.EmbeddingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.EmbeddingData)
    MergeFrom(*source);
  }
}

void EmbeddingData::MergeFrom(const EmbeddingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.EmbeddingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_embedding()->::qembedder::pb::Embedding::MergeFrom(from.embedding());
    }
  }
}

void EmbeddingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.EmbeddingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingData::CopyFrom(const EmbeddingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.EmbeddingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_embedding()) {
    if (!this->embedding_->IsInitialized()) return false;
  }
  return true;
}

void EmbeddingData::Swap(EmbeddingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingData::InternalSwap(EmbeddingData* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(embedding_, other->embedding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbeddingData::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbeddingData

// required string url = 1;
bool EmbeddingData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbeddingData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbeddingData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbeddingData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& EmbeddingData::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EmbeddingData.url)
  return url_.GetNoArena();
}
void EmbeddingData::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.EmbeddingData.url)
}
#if LANG_CXX11
void EmbeddingData::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.EmbeddingData.url)
}
#endif
void EmbeddingData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.EmbeddingData.url)
}
void EmbeddingData::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.EmbeddingData.url)
}
::std::string* EmbeddingData::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EmbeddingData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmbeddingData::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EmbeddingData.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmbeddingData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EmbeddingData.url)
}

// required .qembedder.pb.Embedding embedding = 2;
bool EmbeddingData::has_embedding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbeddingData::set_has_embedding() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbeddingData::clear_has_embedding() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbeddingData::clear_embedding() {
  if (embedding_ != NULL) embedding_->::qembedder::pb::Embedding::Clear();
  clear_has_embedding();
}
const ::qembedder::pb::Embedding& EmbeddingData::embedding() const {
  const ::qembedder::pb::Embedding* p = embedding_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.EmbeddingData.embedding)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* EmbeddingData::mutable_embedding() {
  set_has_embedding();
  if (embedding_ == NULL) {
    embedding_ = new ::qembedder::pb::Embedding;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.EmbeddingData.embedding)
  return embedding_;
}
::qembedder::pb::Embedding* EmbeddingData::release_embedding() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.EmbeddingData.embedding)
  clear_has_embedding();
  ::qembedder::pb::Embedding* temp = embedding_;
  embedding_ = NULL;
  return temp;
}
void EmbeddingData::set_allocated_embedding(::qembedder::pb::Embedding* embedding) {
  delete embedding_;
  embedding_ = embedding;
  if (embedding) {
    set_has_embedding();
  } else {
    clear_has_embedding();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.EmbeddingData.embedding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageHashItem::kUrlFieldNumber;
const int ImageHashItem::kSouceFieldNumber;
const int ImageHashItem::kWidthFieldNumber;
const int ImageHashItem::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageHashItem::ImageHashItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.ImageHashItem)
}
ImageHashItem::ImageHashItem(const ImageHashItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&souce_) -
    reinterpret_cast<char*>(&width_)) + sizeof(souce_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.ImageHashItem)
}

void ImageHashItem::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  souce_ = 1;
}

ImageHashItem::~ImageHashItem() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.ImageHashItem)
  SharedDtor();
}

void ImageHashItem::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageHashItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageHashItem::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageHashItem& ImageHashItem::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageHashItem* ImageHashItem::New(::google::protobuf::Arena* arena) const {
  ImageHashItem* n = new ImageHashItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageHashItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.ImageHashItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
    souce_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageHashItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.ImageHashItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.ImageHashItem.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::ImageHashItem_Source_IsValid(value)) {
            set_souce(static_cast< ::ru::mail::go::webbase::blobs::ImageHashItem_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.ImageHashItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.ImageHashItem)
  return false;
#undef DO_
}

void ImageHashItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.ImageHashItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageHashItem.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->souce(), output);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.ImageHashItem)
}

::google::protobuf::uint8* ImageHashItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.ImageHashItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.ImageHashItem.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->souce(), target);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.ImageHashItem)
  return target;
}

size_t ImageHashItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.ImageHashItem)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_width()) {
    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_souce()) {
    // required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->souce());
  }

  return total_size;
}
size_t ImageHashItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.ImageHashItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->souce());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageHashItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.ImageHashItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageHashItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageHashItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.ImageHashItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.ImageHashItem)
    MergeFrom(*source);
  }
}

void ImageHashItem::MergeFrom(const ImageHashItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.ImageHashItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      souce_ = from.souce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageHashItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.ImageHashItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageHashItem::CopyFrom(const ImageHashItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.ImageHashItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageHashItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ImageHashItem::Swap(ImageHashItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageHashItem::InternalSwap(ImageHashItem* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(souce_, other->souce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageHashItem::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageHashItem

// required string url = 1;
bool ImageHashItem::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageHashItem::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageHashItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageHashItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageHashItem::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageHashItem.url)
  return url_.GetNoArena();
}
void ImageHashItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageHashItem.url)
}
#if LANG_CXX11
void ImageHashItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.ImageHashItem.url)
}
#endif
void ImageHashItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.ImageHashItem.url)
}
void ImageHashItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.ImageHashItem.url)
}
::std::string* ImageHashItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.ImageHashItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageHashItem::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.ImageHashItem.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageHashItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.ImageHashItem.url)
}

// required .ru.mail.go.webbase.blobs.ImageHashItem.Source souce = 2;
bool ImageHashItem::has_souce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageHashItem::set_has_souce() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageHashItem::clear_has_souce() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageHashItem::clear_souce() {
  souce_ = 1;
  clear_has_souce();
}
::ru::mail::go::webbase::blobs::ImageHashItem_Source ImageHashItem::souce() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageHashItem.souce)
  return static_cast< ::ru::mail::go::webbase::blobs::ImageHashItem_Source >(souce_);
}
void ImageHashItem::set_souce(::ru::mail::go::webbase::blobs::ImageHashItem_Source value) {
  assert(::ru::mail::go::webbase::blobs::ImageHashItem_Source_IsValid(value));
  set_has_souce();
  souce_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageHashItem.souce)
}

// required uint32 width = 3;
bool ImageHashItem::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageHashItem::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageHashItem::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageHashItem::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ImageHashItem::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageHashItem.width)
  return width_;
}
void ImageHashItem::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageHashItem.width)
}

// required uint32 height = 4;
bool ImageHashItem::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageHashItem::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageHashItem::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageHashItem::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ImageHashItem::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.ImageHashItem.height)
  return height_;
}
void ImageHashItem::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.ImageHashItem.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoFrames::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoFrames::VideoFrames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.VideoFrames)
}
VideoFrames::VideoFrames(const VideoFrames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frames()) {
    frames_ = new ::ru::mail::go::webbase::blobs::ThumbDoc(*from.frames_);
  } else {
    frames_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.VideoFrames)
}

void VideoFrames::SharedCtor() {
  _cached_size_ = 0;
  frames_ = NULL;
}

VideoFrames::~VideoFrames() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.VideoFrames)
  SharedDtor();
}

void VideoFrames::SharedDtor() {
  if (this != internal_default_instance()) delete frames_;
}

void VideoFrames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFrames::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoFrames& VideoFrames::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoFrames* VideoFrames::New(::google::protobuf::Arena* arena) const {
  VideoFrames* n = new VideoFrames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoFrames::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.VideoFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_frames()) {
    GOOGLE_DCHECK(frames_ != NULL);
    frames_->::ru::mail::go::webbase::blobs::ThumbDoc::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoFrames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.VideoFrames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.ThumbDoc frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.VideoFrames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.VideoFrames)
  return false;
#undef DO_
}

void VideoFrames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.VideoFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ThumbDoc frames = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->frames_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.VideoFrames)
}

::google::protobuf::uint8* VideoFrames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.VideoFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.ThumbDoc frames = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->frames_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.VideoFrames)
  return target;
}

size_t VideoFrames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.VideoFrames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.ThumbDoc frames = 1;
  if (has_frames()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frames_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFrames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.VideoFrames)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoFrames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.VideoFrames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.VideoFrames)
    MergeFrom(*source);
  }
}

void VideoFrames::MergeFrom(const VideoFrames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.VideoFrames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frames()) {
    mutable_frames()->::ru::mail::go::webbase::blobs::ThumbDoc::MergeFrom(from.frames());
  }
}

void VideoFrames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.VideoFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrames::CopyFrom(const VideoFrames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.VideoFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrames::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_frames()) {
    if (!this->frames_->IsInitialized()) return false;
  }
  return true;
}

void VideoFrames::Swap(VideoFrames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoFrames::InternalSwap(VideoFrames* other) {
  using std::swap;
  swap(frames_, other->frames_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoFrames::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoFrames

// required .ru.mail.go.webbase.blobs.ThumbDoc frames = 1;
bool VideoFrames::has_frames() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoFrames::set_has_frames() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoFrames::clear_has_frames() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoFrames::clear_frames() {
  if (frames_ != NULL) frames_->::ru::mail::go::webbase::blobs::ThumbDoc::Clear();
  clear_has_frames();
}
const ::ru::mail::go::webbase::blobs::ThumbDoc& VideoFrames::frames() const {
  const ::ru::mail::go::webbase::blobs::ThumbDoc* p = frames_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.VideoFrames.frames)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ThumbDoc*>(
      &::ru::mail::go::webbase::blobs::_ThumbDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::ThumbDoc* VideoFrames::mutable_frames() {
  set_has_frames();
  if (frames_ == NULL) {
    frames_ = new ::ru::mail::go::webbase::blobs::ThumbDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.VideoFrames.frames)
  return frames_;
}
::ru::mail::go::webbase::blobs::ThumbDoc* VideoFrames::release_frames() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.VideoFrames.frames)
  clear_has_frames();
  ::ru::mail::go::webbase::blobs::ThumbDoc* temp = frames_;
  frames_ = NULL;
  return temp;
}
void VideoFrames::set_allocated_frames(::ru::mail::go::webbase::blobs::ThumbDoc* frames) {
  delete frames_;
  frames_ = frames;
  if (frames) {
    set_has_frames();
  } else {
    clear_has_frames();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.VideoFrames.frames)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCRSentence::kTextFieldNumber;
const int OCRSentence::kScoreFieldNumber;
const int OCRSentence::kXFieldNumber;
const int OCRSentence::kYFieldNumber;
const int OCRSentence::kWFieldNumber;
const int OCRSentence::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCRSentence::OCRSentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.OCRSentence)
}
OCRSentence::OCRSentence(const OCRSentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&score_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.OCRSentence)
}

void OCRSentence::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&score_)) + sizeof(h_));
}

OCRSentence::~OCRSentence() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.OCRSentence)
  SharedDtor();
}

void OCRSentence::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OCRSentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCRSentence::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OCRSentence& OCRSentence::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

OCRSentence* OCRSentence::New(::google::protobuf::Arena* arena) const {
  OCRSentence* n = new OCRSentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCRSentence::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.OCRSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&score_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OCRSentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.OCRSentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.OCRSentence.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 w = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 h = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.OCRSentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.OCRSentence)
  return false;
#undef DO_
}

void OCRSentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.OCRSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OCRSentence.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // required float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // required int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // required int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // required int32 w = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->w(), output);
  }

  // required int32 h = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->h(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.OCRSentence)
}

::google::protobuf::uint8* OCRSentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.OCRSentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.OCRSentence.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // required int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // required int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // required int32 w = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->w(), target);
  }

  // required int32 h = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->h(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.OCRSentence)
  return target;
}

size_t OCRSentence::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.OCRSentence)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_score()) {
    // required float score = 2;
    total_size += 1 + 4;
  }

  if (has_x()) {
    // required int32 x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_w()) {
    // required int32 w = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  if (has_h()) {
    // required int32 h = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());
  }

  return total_size;
}
size_t OCRSentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.OCRSentence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string text = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required float score = 2;
    total_size += 1 + 4;

    // required int32 x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 w = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());

    // required int32 h = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCRSentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.OCRSentence)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRSentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OCRSentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.OCRSentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.OCRSentence)
    MergeFrom(*source);
  }
}

void OCRSentence::MergeFrom(const OCRSentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.OCRSentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000020u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OCRSentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.OCRSentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRSentence::CopyFrom(const OCRSentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.OCRSentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRSentence::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void OCRSentence::Swap(OCRSentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCRSentence::InternalSwap(OCRSentence* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(score_, other->score_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCRSentence::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCRSentence

// required string text = 1;
bool OCRSentence::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OCRSentence::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void OCRSentence::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void OCRSentence::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& OCRSentence::text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.text)
  return text_.GetNoArena();
}
void OCRSentence::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.text)
}
#if LANG_CXX11
void OCRSentence::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.OCRSentence.text)
}
#endif
void OCRSentence::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.OCRSentence.text)
}
void OCRSentence::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.OCRSentence.text)
}
::std::string* OCRSentence::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OCRSentence.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OCRSentence::release_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.OCRSentence.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OCRSentence::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.OCRSentence.text)
}

// required float score = 2;
bool OCRSentence::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OCRSentence::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void OCRSentence::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void OCRSentence::clear_score() {
  score_ = 0;
  clear_has_score();
}
float OCRSentence::score() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.score)
  return score_;
}
void OCRSentence::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.score)
}

// required int32 x = 3;
bool OCRSentence::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OCRSentence::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void OCRSentence::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void OCRSentence::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 OCRSentence::x() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.x)
  return x_;
}
void OCRSentence::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.x)
}

// required int32 y = 4;
bool OCRSentence::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OCRSentence::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void OCRSentence::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void OCRSentence::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 OCRSentence::y() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.y)
  return y_;
}
void OCRSentence::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.y)
}

// required int32 w = 5;
bool OCRSentence::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OCRSentence::set_has_w() {
  _has_bits_[0] |= 0x00000010u;
}
void OCRSentence::clear_has_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void OCRSentence::clear_w() {
  w_ = 0;
  clear_has_w();
}
::google::protobuf::int32 OCRSentence::w() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.w)
  return w_;
}
void OCRSentence::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.w)
}

// required int32 h = 6;
bool OCRSentence::has_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OCRSentence::set_has_h() {
  _has_bits_[0] |= 0x00000020u;
}
void OCRSentence::clear_has_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void OCRSentence::clear_h() {
  h_ = 0;
  clear_has_h();
}
::google::protobuf::int32 OCRSentence::h() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRSentence.h)
  return h_;
}
void OCRSentence::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.OCRSentence.h)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OCRResult::kSentencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OCRResult::OCRResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.OCRResult)
}
OCRResult::OCRResult(const OCRResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sentences_(from.sentences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.OCRResult)
}

void OCRResult::SharedCtor() {
  _cached_size_ = 0;
}

OCRResult::~OCRResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.OCRResult)
  SharedDtor();
}

void OCRResult::SharedDtor() {
}

void OCRResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OCRResult::descriptor() {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OCRResult& OCRResult::default_instance() {
  protobuf_image_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

OCRResult* OCRResult::New(::google::protobuf::Arena* arena) const {
  OCRResult* n = new OCRResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OCRResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.OCRResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sentences_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OCRResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.OCRResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.OCRSentence sentences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.OCRResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.OCRResult)
  return false;
#undef DO_
}

void OCRResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.OCRResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.OCRSentence sentences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentences(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.OCRResult)
}

::google::protobuf::uint8* OCRResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.OCRResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.OCRSentence sentences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sentences(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.OCRResult)
  return target;
}

size_t OCRResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.OCRResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.OCRSentence sentences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sentences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OCRResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.OCRResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OCRResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.OCRResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.OCRResult)
    MergeFrom(*source);
  }
}

void OCRResult::MergeFrom(const OCRResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.OCRResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
}

void OCRResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.OCRResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRResult::CopyFrom(const OCRResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.OCRResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRResult::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sentences())) return false;
  return true;
}

void OCRResult::Swap(OCRResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OCRResult::InternalSwap(OCRResult* other) {
  using std::swap;
  sentences_.InternalSwap(&other->sentences_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OCRResult::GetMetadata() const {
  protobuf_image_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OCRResult

// repeated .ru.mail.go.webbase.blobs.OCRSentence sentences = 1;
int OCRResult::sentences_size() const {
  return sentences_.size();
}
void OCRResult::clear_sentences() {
  sentences_.Clear();
}
const ::ru::mail::go::webbase::blobs::OCRSentence& OCRResult::sentences(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.OCRResult.sentences)
  return sentences_.Get(index);
}
::ru::mail::go::webbase::blobs::OCRSentence* OCRResult::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.OCRResult.sentences)
  return sentences_.Mutable(index);
}
::ru::mail::go::webbase::blobs::OCRSentence* OCRResult::add_sentences() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.OCRResult.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::OCRSentence >*
OCRResult::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.OCRResult.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::OCRSentence >&
OCRResult::sentences() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.OCRResult.sentences)
  return sentences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
