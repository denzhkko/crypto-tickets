// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_defs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image_defs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace parsing {
namespace img {
class ExifDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Exif>
     _instance;
} _Exif_default_instance_;
class ColorsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Colors>
     _instance;
} _Colors_default_instance_;
class RectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Rect>
     _instance;
} _Rect_default_instance_;
class RectArrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RectArray>
     _instance;
} _RectArray_default_instance_;
class CvFeaturesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CvFeatures>
     _instance;
} _CvFeatures_default_instance_;
class ThumbDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Thumb>
     _instance;
} _Thumb_default_instance_;
class ThumbWithQueriesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThumbWithQueries>
     _instance;
} _ThumbWithQueries_default_instance_;
class VideoClipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoClip>
     _instance;
} _VideoClip_default_instance_;
class ClusterSeedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusterSeed>
     _instance;
} _ClusterSeed_default_instance_;
class ClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Cluster>
     _instance;
} _Cluster_default_instance_;
class HashIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HashId>
     _instance;
} _HashId_default_instance_;
class IdOrRowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdOrRow>
     _instance;
} _IdOrRow_default_instance_;
class RowClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RowCluster>
     _instance;
} _RowCluster_default_instance_;
class DuplicateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Duplicate>
     _instance;
} _Duplicate_default_instance_;
class SerpSimilarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerpSimilar>
     _instance;
} _SerpSimilar_default_instance_;

namespace protobuf_image_5fdefs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exif, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exif, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exif, lattitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exif, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_multi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_bw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_orange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_blue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_cyan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_purple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_black_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_white_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colors, clr_sepia_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, height_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArray, rect_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, faces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, entropy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvFeatures, textboxes_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, pic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, animated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, originalwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumb, originalheight_),
  0,
  3,
  4,
  5,
  1,
  2,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbWithQueries, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbWithQueries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbWithQueries, thumb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbWithQueries, queries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, container_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoClip, url_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterSeed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterSeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterSeed, hash_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, hash_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashId, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashId, id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdOrRow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdOrRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdOrRow, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdOrRow, row_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowCluster, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowCluster, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowCluster, row_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate, thumb_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSimilar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSimilar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSimilar, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSimilar, serp_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Exif)},
  { 11, 28, sizeof(Colors)},
  { 40, 49, sizeof(Rect)},
  { 53, 59, sizeof(RectArray)},
  { 60, 69, sizeof(CvFeatures)},
  { 73, 87, sizeof(Thumb)},
  { 96, 103, sizeof(ThumbWithQueries)},
  { 105, 117, sizeof(VideoClip)},
  { 124, 130, sizeof(ClusterSeed)},
  { 131, 138, sizeof(Cluster)},
  { 140, 147, sizeof(HashId)},
  { 149, 156, sizeof(IdOrRow)},
  { 158, 165, sizeof(RowCluster)},
  { 167, 175, sizeof(Duplicate)},
  { 178, 185, sizeof(SerpSimilar)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Exif_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Colors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RectArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CvFeatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Thumb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThumbWithQueries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoClip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterSeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HashId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdOrRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RowCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Duplicate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerpSimilar_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image_defs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Exif_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Exif_default_instance_);_Colors_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Colors_default_instance_);_Rect_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Rect_default_instance_);_RectArray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RectArray_default_instance_);_CvFeatures_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CvFeatures_default_instance_);_Thumb_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Thumb_default_instance_);_ThumbWithQueries_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThumbWithQueries_default_instance_);_VideoClip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoClip_default_instance_);_ClusterSeed_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusterSeed_default_instance_);_Cluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Cluster_default_instance_);_HashId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HashId_default_instance_);_IdOrRow_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdOrRow_default_instance_);_RowCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RowCluster_default_instance_);_Duplicate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Duplicate_default_instance_);_SerpSimilar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerpSimilar_default_instance_);_CvFeatures_default_instance_._instance.get_mutable()->faces_ = const_cast< ::ru::mail::go::webbase::parsing::img::RectArray*>(
      ::ru::mail::go::webbase::parsing::img::RectArray::internal_default_instance());
  _CvFeatures_default_instance_._instance.get_mutable()->textboxes_ = const_cast< ::ru::mail::go::webbase::parsing::img::RectArray*>(
      ::ru::mail::go::webbase::parsing::img::RectArray::internal_default_instance());
  _Thumb_default_instance_._instance.get_mutable()->features_ = const_cast< ::ru::mail::go::webbase::parsing::img::CvFeatures*>(
      ::ru::mail::go::webbase::parsing::img::CvFeatures::internal_default_instance());
  _ThumbWithQueries_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _Duplicate_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _SerpSimilar_default_instance_._instance.get_mutable()->query_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020image_defs.proto\022\036ru.mail.go.webbase.p"
      "arsing.img\"\?\n\004Exif\022\021\n\tlongitude\030\001 \001(\001\022\021\n"
      "\tlattitude\030\002 \001(\001\022\021\n\ttimestamp\030\003 \001(\004\"\233\002\n\006"
      "Colors\022\024\n\tCLR_MULTI\030\001 \001(\r:\0011\022\021\n\006CLR_BW\030\002"
      " \001(\r:\0012\022\022\n\007CLR_RED\030\003 \001(\r:\0014\022\025\n\nCLR_ORANG"
      "E\030\004 \001(\r:\0018\022\026\n\nCLR_YELLOW\030\005 \001(\r:\00216\022\025\n\tCL"
      "R_GREEN\030\006 \001(\r:\00232\022\024\n\010CLR_BLUE\030\007 \001(\r:\00264\022"
      "\025\n\010CLR_CYAN\030\010 \001(\r:\003128\022\027\n\nCLR_PURPLE\030\t \001"
      "(\r:\003256\022\026\n\tCLR_BLACK\030\n \001(\r:\003512\022\027\n\tCLR_W"
      "HITE\030\013 \001(\r:\0041024\022\027\n\tCLR_SEPIA\030\014 \001(\r:\004204"
      "8\";\n\004Rect\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\022\r\n\005width"
      "\030\003 \002(\r\022\016\n\006height\030\004 \002(\r\"\?\n\tRectArray\0222\n\004r"
      "ect\030\001 \003(\0132$.ru.mail.go.webbase.parsing.i"
      "mg.Rect\"\246\001\n\nCvFeatures\0228\n\005faces\030\001 \001(\0132)."
      "ru.mail.go.webbase.parsing.img.RectArray"
      "\022\017\n\007quality\030\002 \001(\001\022\017\n\007entropy\030\003 \001(\001\022<\n\tte"
      "xtboxes\030\004 \001(\0132).ru.mail.go.webbase.parsi"
      "ng.img.RectArray\"\374\001\n\005Thumb\022\013\n\003pic\030\001 \002(\014\022"
      "\r\n\005width\030\002 \002(\r\022\016\n\006height\030\003 \002(\r\022;\n\006format"
      "\030\004 \002(\0162+.ru.mail.go.webbase.parsing.img."
      "ImageFormat\022\013\n\003url\030\006 \001(\t\022<\n\010features\030\007 \001"
      "(\0132*.ru.mail.go.webbase.parsing.img.CvFe"
      "atures\022\020\n\010animated\030\010 \001(\010\022\025\n\roriginalWidt"
      "h\030\t \001(\r\022\026\n\016originalHeight\030\n \001(\r\"Y\n\020Thumb"
      "WithQueries\0224\n\005thumb\030\001 \001(\0132%.ru.mail.go."
      "webbase.parsing.img.Thumb\022\017\n\007queries\030\002 \003"
      "(\t\"\302\002\n\tVideoClip\022\014\n\004clip\030\001 \002(\014\022\r\n\005width\030"
      "\002 \002(\r\022\016\n\006height\030\003 \002(\r\022\016\n\006length\030\004 \002(\r\022C\n"
      "\005codec\030\005 \002(\01624.ru.mail.go.webbase.parsin"
      "g.img.VideoClip.VideoCodec\022K\n\tcontainer\030"
      "\006 \002(\01628.ru.mail.go.webbase.parsing.img.V"
      "ideoClip.VideoContainer\022\013\n\003url\030\007 \001(\t\"*\n\n"
      "VideoCodec\022\013\n\007VE_H264\020\000\022\017\n\nVE_UNKNOWN\020\377\001"
      "\"-\n\016VideoContainer\022\n\n\006VC_MP4\020\000\022\017\n\nVC_UNK"
      "NOWN\020\377\001\"\033\n\013ClusterSeed\022\014\n\004hash\030\001 \003(\004\"#\n\007"
      "Cluster\022\n\n\002id\030\001 \002(\004\022\014\n\004hash\030\002 \003(\004\"\"\n\006Has"
      "hId\022\014\n\004hash\030\001 \002(\004\022\n\n\002id\030\002 \002(\004\"\"\n\007IdOrRow"
      "\022\n\n\002id\030\001 \001(\004\022\013\n\003row\030\002 \001(\014\"%\n\nRowCluster\022"
      "\n\n\002id\030\001 \002(\004\022\013\n\003row\030\002 \003(\014\"Z\n\tDuplicate\022\n\n"
      "\002id\030\001 \002(\004\022\013\n\003row\030\002 \002(\t\0224\n\005thumb\030\003 \002(\0132%."
      "ru.mail.go.webbase.parsing.img.Thumb\"x\n\013"
      "SerpSimilar\0224\n\005query\030\001 \002(\0132%.ru.mail.go."
      "webbase.parsing.img.Thumb\0223\n\004serp\030\002 \003(\0132"
      "%.ru.mail.go.webbase.parsing.img.Thumb*s"
      "\n\013ImageFormat\022\013\n\007IF_JPEG\020\000\022\n\n\006IF_PNG\020\001\022\n"
      "\n\006IF_GIF\020\002\022\016\n\nIF_UNKNOWN\020\003\022\n\n\006IF_ICO\020\004\022\n"
      "\n\006IF_BMP\020\005\022\013\n\007IF_WEBP\020\006\022\n\n\006IF_SVG\020\007*J\n\nI"
      "mageClass\022\016\n\nIC_UNKNOWN\020\000\022\014\n\010IC_PHOTO\020\002\022"
      "\016\n\nIC_CLIPART\020\003\022\016\n\nIC_LINEART\020\004*\?\n\rInter"
      "polation\022\017\n\013ITP_NEAREST\020\001\022\016\n\nITP_LINEAR\020"
      "\002\022\r\n\tITP_CUBIC\020\003*p\n\nBorderType\022\r\n\tREPLIC"
      "ATE\020\001\022\014\n\010CONSTANT\020\002\022\013\n\007REFLECT\020\003\022\010\n\004WRAP"
      "\020\004\022\017\n\013REFLECT_101\020\005\022\017\n\013TRANSPARENT\020\006\022\014\n\010"
      "ISOLATED\020\007B\013B\tImageDefs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image_defs.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_image_5fdefs_2eproto

const ::google::protobuf::EnumDescriptor* VideoClip_VideoCodec_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[0];
}
bool VideoClip_VideoCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoClip_VideoCodec VideoClip::VE_H264;
const VideoClip_VideoCodec VideoClip::VE_UNKNOWN;
const VideoClip_VideoCodec VideoClip::VideoCodec_MIN;
const VideoClip_VideoCodec VideoClip::VideoCodec_MAX;
const int VideoClip::VideoCodec_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VideoClip_VideoContainer_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[1];
}
bool VideoClip_VideoContainer_IsValid(int value) {
  switch (value) {
    case 0:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoClip_VideoContainer VideoClip::VC_MP4;
const VideoClip_VideoContainer VideoClip::VC_UNKNOWN;
const VideoClip_VideoContainer VideoClip::VideoContainer_MIN;
const VideoClip_VideoContainer VideoClip::VideoContainer_MAX;
const int VideoClip::VideoContainer_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[2];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageClass_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[3];
}
bool ImageClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Interpolation_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[4];
}
bool Interpolation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BorderType_descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_enum_descriptors[5];
}
bool BorderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Exif::kLongitudeFieldNumber;
const int Exif::kLattitudeFieldNumber;
const int Exif::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Exif::Exif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Exif)
}
Exif::Exif(const Exif& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Exif)
}

void Exif::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(timestamp_));
}

Exif::~Exif() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Exif)
  SharedDtor();
}

void Exif::SharedDtor() {
}

void Exif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exif::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Exif& Exif::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Exif* Exif::New(::google::protobuf::Arena* arena) const {
  Exif* n = new Exif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Exif::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Exif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Exif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Exif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lattitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lattitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lattitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Exif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Exif)
  return false;
#undef DO_
}

void Exif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Exif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double lattitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lattitude(), output);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Exif)
}

::google::protobuf::uint8* Exif::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Exif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // optional double lattitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lattitude(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Exif)
  return target;
}

size_t Exif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Exif)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double lattitude = 2;
    if (has_lattitude()) {
      total_size += 1 + 8;
    }

    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exif::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Exif)
  GOOGLE_DCHECK_NE(&from, this);
  const Exif* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Exif>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Exif)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Exif)
    MergeFrom(*source);
  }
}

void Exif::MergeFrom(const Exif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Exif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      lattitude_ = from.lattitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Exif::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Exif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exif::CopyFrom(const Exif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Exif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exif::IsInitialized() const {
  return true;
}

void Exif::Swap(Exif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Exif::InternalSwap(Exif* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(lattitude_, other->lattitude_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Exif::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Exif

// optional double longitude = 1;
bool Exif::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Exif::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void Exif::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void Exif::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double Exif::longitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Exif.longitude)
  return longitude_;
}
void Exif::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Exif.longitude)
}

// optional double lattitude = 2;
bool Exif::has_lattitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Exif::set_has_lattitude() {
  _has_bits_[0] |= 0x00000002u;
}
void Exif::clear_has_lattitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Exif::clear_lattitude() {
  lattitude_ = 0;
  clear_has_lattitude();
}
double Exif::lattitude() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Exif.lattitude)
  return lattitude_;
}
void Exif::set_lattitude(double value) {
  set_has_lattitude();
  lattitude_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Exif.lattitude)
}

// optional uint64 timestamp = 3;
bool Exif::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Exif::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void Exif::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Exif::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Exif::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Exif.timestamp)
  return timestamp_;
}
void Exif::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Exif.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Colors::kCLRMULTIFieldNumber;
const int Colors::kCLRBWFieldNumber;
const int Colors::kCLRREDFieldNumber;
const int Colors::kCLRORANGEFieldNumber;
const int Colors::kCLRYELLOWFieldNumber;
const int Colors::kCLRGREENFieldNumber;
const int Colors::kCLRBLUEFieldNumber;
const int Colors::kCLRCYANFieldNumber;
const int Colors::kCLRPURPLEFieldNumber;
const int Colors::kCLRBLACKFieldNumber;
const int Colors::kCLRWHITEFieldNumber;
const int Colors::kCLRSEPIAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Colors::Colors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Colors)
}
Colors::Colors(const Colors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clr_multi_, &from.clr_multi_,
    static_cast<size_t>(reinterpret_cast<char*>(&clr_sepia_) -
    reinterpret_cast<char*>(&clr_multi_)) + sizeof(clr_sepia_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Colors)
}

void Colors::SharedCtor() {
  _cached_size_ = 0;
  clr_multi_ = 1u;
  clr_bw_ = 2u;
  clr_red_ = 4u;
  clr_orange_ = 8u;
  clr_yellow_ = 16u;
  clr_green_ = 32u;
  clr_blue_ = 64u;
  clr_cyan_ = 128u;
  clr_purple_ = 256u;
  clr_black_ = 512u;
  clr_white_ = 1024u;
  clr_sepia_ = 2048u;
}

Colors::~Colors() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Colors)
  SharedDtor();
}

void Colors::SharedDtor() {
}

void Colors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Colors::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Colors& Colors::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Colors* Colors::New(::google::protobuf::Arena* arena) const {
  Colors* n = new Colors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Colors::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Colors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    clr_multi_ = 1u;
    clr_bw_ = 2u;
    clr_red_ = 4u;
    clr_orange_ = 8u;
    clr_yellow_ = 16u;
    clr_green_ = 32u;
    clr_blue_ = 64u;
    clr_cyan_ = 128u;
  }
  if (cached_has_bits & 3840u) {
    clr_purple_ = 256u;
    clr_black_ = 512u;
    clr_white_ = 1024u;
    clr_sepia_ = 2048u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Colors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Colors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CLR_MULTI = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_clr_multi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_multi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_BW = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clr_bw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_bw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_RED = 3 [default = 4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clr_red();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_ORANGE = 4 [default = 8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_clr_orange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_orange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_YELLOW = 5 [default = 16];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_clr_yellow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_yellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_GREEN = 6 [default = 32];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_clr_green();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_BLUE = 7 [default = 64];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_clr_blue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_CYAN = 8 [default = 128];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clr_cyan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_cyan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_PURPLE = 9 [default = 256];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_clr_purple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_purple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_BLACK = 10 [default = 512];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_clr_black();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_black_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_WHITE = 11 [default = 1024];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_clr_white();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_white_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CLR_SEPIA = 12 [default = 2048];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_clr_sepia();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clr_sepia_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Colors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Colors)
  return false;
#undef DO_
}

void Colors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Colors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 CLR_MULTI = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clr_multi(), output);
  }

  // optional uint32 CLR_BW = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clr_bw(), output);
  }

  // optional uint32 CLR_RED = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clr_red(), output);
  }

  // optional uint32 CLR_ORANGE = 4 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clr_orange(), output);
  }

  // optional uint32 CLR_YELLOW = 5 [default = 16];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clr_yellow(), output);
  }

  // optional uint32 CLR_GREEN = 6 [default = 32];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->clr_green(), output);
  }

  // optional uint32 CLR_BLUE = 7 [default = 64];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->clr_blue(), output);
  }

  // optional uint32 CLR_CYAN = 8 [default = 128];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->clr_cyan(), output);
  }

  // optional uint32 CLR_PURPLE = 9 [default = 256];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clr_purple(), output);
  }

  // optional uint32 CLR_BLACK = 10 [default = 512];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->clr_black(), output);
  }

  // optional uint32 CLR_WHITE = 11 [default = 1024];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->clr_white(), output);
  }

  // optional uint32 CLR_SEPIA = 12 [default = 2048];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->clr_sepia(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Colors)
}

::google::protobuf::uint8* Colors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Colors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 CLR_MULTI = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clr_multi(), target);
  }

  // optional uint32 CLR_BW = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clr_bw(), target);
  }

  // optional uint32 CLR_RED = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clr_red(), target);
  }

  // optional uint32 CLR_ORANGE = 4 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clr_orange(), target);
  }

  // optional uint32 CLR_YELLOW = 5 [default = 16];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clr_yellow(), target);
  }

  // optional uint32 CLR_GREEN = 6 [default = 32];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->clr_green(), target);
  }

  // optional uint32 CLR_BLUE = 7 [default = 64];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->clr_blue(), target);
  }

  // optional uint32 CLR_CYAN = 8 [default = 128];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->clr_cyan(), target);
  }

  // optional uint32 CLR_PURPLE = 9 [default = 256];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clr_purple(), target);
  }

  // optional uint32 CLR_BLACK = 10 [default = 512];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->clr_black(), target);
  }

  // optional uint32 CLR_WHITE = 11 [default = 1024];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->clr_white(), target);
  }

  // optional uint32 CLR_SEPIA = 12 [default = 2048];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->clr_sepia(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Colors)
  return target;
}

size_t Colors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Colors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 CLR_MULTI = 1 [default = 1];
    if (has_clr_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_multi());
    }

    // optional uint32 CLR_BW = 2 [default = 2];
    if (has_clr_bw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_bw());
    }

    // optional uint32 CLR_RED = 3 [default = 4];
    if (has_clr_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_red());
    }

    // optional uint32 CLR_ORANGE = 4 [default = 8];
    if (has_clr_orange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_orange());
    }

    // optional uint32 CLR_YELLOW = 5 [default = 16];
    if (has_clr_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_yellow());
    }

    // optional uint32 CLR_GREEN = 6 [default = 32];
    if (has_clr_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_green());
    }

    // optional uint32 CLR_BLUE = 7 [default = 64];
    if (has_clr_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_blue());
    }

    // optional uint32 CLR_CYAN = 8 [default = 128];
    if (has_clr_cyan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_cyan());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 CLR_PURPLE = 9 [default = 256];
    if (has_clr_purple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_purple());
    }

    // optional uint32 CLR_BLACK = 10 [default = 512];
    if (has_clr_black()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_black());
    }

    // optional uint32 CLR_WHITE = 11 [default = 1024];
    if (has_clr_white()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_white());
    }

    // optional uint32 CLR_SEPIA = 12 [default = 2048];
    if (has_clr_sepia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clr_sepia());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Colors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Colors)
  GOOGLE_DCHECK_NE(&from, this);
  const Colors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Colors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Colors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Colors)
    MergeFrom(*source);
  }
}

void Colors::MergeFrom(const Colors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Colors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      clr_multi_ = from.clr_multi_;
    }
    if (cached_has_bits & 0x00000002u) {
      clr_bw_ = from.clr_bw_;
    }
    if (cached_has_bits & 0x00000004u) {
      clr_red_ = from.clr_red_;
    }
    if (cached_has_bits & 0x00000008u) {
      clr_orange_ = from.clr_orange_;
    }
    if (cached_has_bits & 0x00000010u) {
      clr_yellow_ = from.clr_yellow_;
    }
    if (cached_has_bits & 0x00000020u) {
      clr_green_ = from.clr_green_;
    }
    if (cached_has_bits & 0x00000040u) {
      clr_blue_ = from.clr_blue_;
    }
    if (cached_has_bits & 0x00000080u) {
      clr_cyan_ = from.clr_cyan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      clr_purple_ = from.clr_purple_;
    }
    if (cached_has_bits & 0x00000200u) {
      clr_black_ = from.clr_black_;
    }
    if (cached_has_bits & 0x00000400u) {
      clr_white_ = from.clr_white_;
    }
    if (cached_has_bits & 0x00000800u) {
      clr_sepia_ = from.clr_sepia_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Colors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Colors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Colors::CopyFrom(const Colors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Colors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Colors::IsInitialized() const {
  return true;
}

void Colors::Swap(Colors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Colors::InternalSwap(Colors* other) {
  using std::swap;
  swap(clr_multi_, other->clr_multi_);
  swap(clr_bw_, other->clr_bw_);
  swap(clr_red_, other->clr_red_);
  swap(clr_orange_, other->clr_orange_);
  swap(clr_yellow_, other->clr_yellow_);
  swap(clr_green_, other->clr_green_);
  swap(clr_blue_, other->clr_blue_);
  swap(clr_cyan_, other->clr_cyan_);
  swap(clr_purple_, other->clr_purple_);
  swap(clr_black_, other->clr_black_);
  swap(clr_white_, other->clr_white_);
  swap(clr_sepia_, other->clr_sepia_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Colors::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Colors

// optional uint32 CLR_MULTI = 1 [default = 1];
bool Colors::has_clr_multi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Colors::set_has_clr_multi() {
  _has_bits_[0] |= 0x00000001u;
}
void Colors::clear_has_clr_multi() {
  _has_bits_[0] &= ~0x00000001u;
}
void Colors::clear_clr_multi() {
  clr_multi_ = 1u;
  clear_has_clr_multi();
}
::google::protobuf::uint32 Colors::clr_multi() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_MULTI)
  return clr_multi_;
}
void Colors::set_clr_multi(::google::protobuf::uint32 value) {
  set_has_clr_multi();
  clr_multi_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_MULTI)
}

// optional uint32 CLR_BW = 2 [default = 2];
bool Colors::has_clr_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Colors::set_has_clr_bw() {
  _has_bits_[0] |= 0x00000002u;
}
void Colors::clear_has_clr_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
void Colors::clear_clr_bw() {
  clr_bw_ = 2u;
  clear_has_clr_bw();
}
::google::protobuf::uint32 Colors::clr_bw() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_BW)
  return clr_bw_;
}
void Colors::set_clr_bw(::google::protobuf::uint32 value) {
  set_has_clr_bw();
  clr_bw_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_BW)
}

// optional uint32 CLR_RED = 3 [default = 4];
bool Colors::has_clr_red() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Colors::set_has_clr_red() {
  _has_bits_[0] |= 0x00000004u;
}
void Colors::clear_has_clr_red() {
  _has_bits_[0] &= ~0x00000004u;
}
void Colors::clear_clr_red() {
  clr_red_ = 4u;
  clear_has_clr_red();
}
::google::protobuf::uint32 Colors::clr_red() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_RED)
  return clr_red_;
}
void Colors::set_clr_red(::google::protobuf::uint32 value) {
  set_has_clr_red();
  clr_red_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_RED)
}

// optional uint32 CLR_ORANGE = 4 [default = 8];
bool Colors::has_clr_orange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Colors::set_has_clr_orange() {
  _has_bits_[0] |= 0x00000008u;
}
void Colors::clear_has_clr_orange() {
  _has_bits_[0] &= ~0x00000008u;
}
void Colors::clear_clr_orange() {
  clr_orange_ = 8u;
  clear_has_clr_orange();
}
::google::protobuf::uint32 Colors::clr_orange() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_ORANGE)
  return clr_orange_;
}
void Colors::set_clr_orange(::google::protobuf::uint32 value) {
  set_has_clr_orange();
  clr_orange_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_ORANGE)
}

// optional uint32 CLR_YELLOW = 5 [default = 16];
bool Colors::has_clr_yellow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Colors::set_has_clr_yellow() {
  _has_bits_[0] |= 0x00000010u;
}
void Colors::clear_has_clr_yellow() {
  _has_bits_[0] &= ~0x00000010u;
}
void Colors::clear_clr_yellow() {
  clr_yellow_ = 16u;
  clear_has_clr_yellow();
}
::google::protobuf::uint32 Colors::clr_yellow() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_YELLOW)
  return clr_yellow_;
}
void Colors::set_clr_yellow(::google::protobuf::uint32 value) {
  set_has_clr_yellow();
  clr_yellow_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_YELLOW)
}

// optional uint32 CLR_GREEN = 6 [default = 32];
bool Colors::has_clr_green() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Colors::set_has_clr_green() {
  _has_bits_[0] |= 0x00000020u;
}
void Colors::clear_has_clr_green() {
  _has_bits_[0] &= ~0x00000020u;
}
void Colors::clear_clr_green() {
  clr_green_ = 32u;
  clear_has_clr_green();
}
::google::protobuf::uint32 Colors::clr_green() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_GREEN)
  return clr_green_;
}
void Colors::set_clr_green(::google::protobuf::uint32 value) {
  set_has_clr_green();
  clr_green_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_GREEN)
}

// optional uint32 CLR_BLUE = 7 [default = 64];
bool Colors::has_clr_blue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Colors::set_has_clr_blue() {
  _has_bits_[0] |= 0x00000040u;
}
void Colors::clear_has_clr_blue() {
  _has_bits_[0] &= ~0x00000040u;
}
void Colors::clear_clr_blue() {
  clr_blue_ = 64u;
  clear_has_clr_blue();
}
::google::protobuf::uint32 Colors::clr_blue() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_BLUE)
  return clr_blue_;
}
void Colors::set_clr_blue(::google::protobuf::uint32 value) {
  set_has_clr_blue();
  clr_blue_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_BLUE)
}

// optional uint32 CLR_CYAN = 8 [default = 128];
bool Colors::has_clr_cyan() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Colors::set_has_clr_cyan() {
  _has_bits_[0] |= 0x00000080u;
}
void Colors::clear_has_clr_cyan() {
  _has_bits_[0] &= ~0x00000080u;
}
void Colors::clear_clr_cyan() {
  clr_cyan_ = 128u;
  clear_has_clr_cyan();
}
::google::protobuf::uint32 Colors::clr_cyan() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_CYAN)
  return clr_cyan_;
}
void Colors::set_clr_cyan(::google::protobuf::uint32 value) {
  set_has_clr_cyan();
  clr_cyan_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_CYAN)
}

// optional uint32 CLR_PURPLE = 9 [default = 256];
bool Colors::has_clr_purple() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Colors::set_has_clr_purple() {
  _has_bits_[0] |= 0x00000100u;
}
void Colors::clear_has_clr_purple() {
  _has_bits_[0] &= ~0x00000100u;
}
void Colors::clear_clr_purple() {
  clr_purple_ = 256u;
  clear_has_clr_purple();
}
::google::protobuf::uint32 Colors::clr_purple() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_PURPLE)
  return clr_purple_;
}
void Colors::set_clr_purple(::google::protobuf::uint32 value) {
  set_has_clr_purple();
  clr_purple_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_PURPLE)
}

// optional uint32 CLR_BLACK = 10 [default = 512];
bool Colors::has_clr_black() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Colors::set_has_clr_black() {
  _has_bits_[0] |= 0x00000200u;
}
void Colors::clear_has_clr_black() {
  _has_bits_[0] &= ~0x00000200u;
}
void Colors::clear_clr_black() {
  clr_black_ = 512u;
  clear_has_clr_black();
}
::google::protobuf::uint32 Colors::clr_black() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_BLACK)
  return clr_black_;
}
void Colors::set_clr_black(::google::protobuf::uint32 value) {
  set_has_clr_black();
  clr_black_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_BLACK)
}

// optional uint32 CLR_WHITE = 11 [default = 1024];
bool Colors::has_clr_white() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Colors::set_has_clr_white() {
  _has_bits_[0] |= 0x00000400u;
}
void Colors::clear_has_clr_white() {
  _has_bits_[0] &= ~0x00000400u;
}
void Colors::clear_clr_white() {
  clr_white_ = 1024u;
  clear_has_clr_white();
}
::google::protobuf::uint32 Colors::clr_white() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_WHITE)
  return clr_white_;
}
void Colors::set_clr_white(::google::protobuf::uint32 value) {
  set_has_clr_white();
  clr_white_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_WHITE)
}

// optional uint32 CLR_SEPIA = 12 [default = 2048];
bool Colors::has_clr_sepia() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Colors::set_has_clr_sepia() {
  _has_bits_[0] |= 0x00000800u;
}
void Colors::clear_has_clr_sepia() {
  _has_bits_[0] &= ~0x00000800u;
}
void Colors::clear_clr_sepia() {
  clr_sepia_ = 2048u;
  clear_has_clr_sepia();
}
::google::protobuf::uint32 Colors::clr_sepia() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Colors.CLR_SEPIA)
  return clr_sepia_;
}
void Colors::set_clr_sepia(::google::protobuf::uint32 value) {
  set_has_clr_sepia();
  clr_sepia_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Colors.CLR_SEPIA)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // required uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.parsing.img.Rect)
  size_t total_size = 0;

  if (has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  if (has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  if (has_width()) {
    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Rect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());

    // required uint32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());

    // required uint32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// required uint32 x = 1;
bool Rect::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rect::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Rect::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rect::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 Rect::x() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Rect.x)
  return x_;
}
void Rect::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Rect.x)
}

// required uint32 y = 2;
bool Rect::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rect::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Rect::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rect::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 Rect::y() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Rect.y)
  return y_;
}
void Rect::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Rect.y)
}

// required uint32 width = 3;
bool Rect::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rect::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Rect::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rect::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Rect::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Rect.width)
  return width_;
}
void Rect::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Rect.width)
}

// required uint32 height = 4;
bool Rect::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Rect::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void Rect::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void Rect::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Rect::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Rect.height)
  return height_;
}
void Rect::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Rect.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectArray::kRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectArray::RectArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.RectArray)
}
RectArray::RectArray(const RectArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rect_(from.rect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.RectArray)
}

void RectArray::SharedCtor() {
  _cached_size_ = 0;
}

RectArray::~RectArray() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.RectArray)
  SharedDtor();
}

void RectArray::SharedDtor() {
}

void RectArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectArray::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RectArray& RectArray::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

RectArray* RectArray::New(::google::protobuf::Arena* arena) const {
  RectArray* n = new RectArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RectArray::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.RectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rect_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RectArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.RectArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.parsing.img.Rect rect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.RectArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.RectArray)
  return false;
#undef DO_
}

void RectArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.RectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Rect rect = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rect_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rect(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.RectArray)
}

::google::protobuf::uint8* RectArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.RectArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.parsing.img.Rect rect = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rect_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rect(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.RectArray)
  return target;
}

size_t RectArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.RectArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.parsing.img.Rect rect = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rect_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.RectArray)
  GOOGLE_DCHECK_NE(&from, this);
  const RectArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.RectArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.RectArray)
    MergeFrom(*source);
  }
}

void RectArray::MergeFrom(const RectArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.RectArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rect_.MergeFrom(from.rect_);
}

void RectArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.RectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectArray::CopyFrom(const RectArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.RectArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectArray::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rect())) return false;
  return true;
}

void RectArray::Swap(RectArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectArray::InternalSwap(RectArray* other) {
  using std::swap;
  rect_.InternalSwap(&other->rect_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RectArray::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RectArray

// repeated .ru.mail.go.webbase.parsing.img.Rect rect = 1;
int RectArray::rect_size() const {
  return rect_.size();
}
void RectArray::clear_rect() {
  rect_.Clear();
}
const ::ru::mail::go::webbase::parsing::img::Rect& RectArray::rect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.RectArray.rect)
  return rect_.Get(index);
}
::ru::mail::go::webbase::parsing::img::Rect* RectArray::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.RectArray.rect)
  return rect_.Mutable(index);
}
::ru::mail::go::webbase::parsing::img::Rect* RectArray::add_rect() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.RectArray.rect)
  return rect_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Rect >*
RectArray::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.RectArray.rect)
  return &rect_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Rect >&
RectArray::rect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.RectArray.rect)
  return rect_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CvFeatures::kFacesFieldNumber;
const int CvFeatures::kQualityFieldNumber;
const int CvFeatures::kEntropyFieldNumber;
const int CvFeatures::kTextboxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CvFeatures::CvFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.CvFeatures)
}
CvFeatures::CvFeatures(const CvFeatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_faces()) {
    faces_ = new ::ru::mail::go::webbase::parsing::img::RectArray(*from.faces_);
  } else {
    faces_ = NULL;
  }
  if (from.has_textboxes()) {
    textboxes_ = new ::ru::mail::go::webbase::parsing::img::RectArray(*from.textboxes_);
  } else {
    textboxes_ = NULL;
  }
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&entropy_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(entropy_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.CvFeatures)
}

void CvFeatures::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&faces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entropy_) -
      reinterpret_cast<char*>(&faces_)) + sizeof(entropy_));
}

CvFeatures::~CvFeatures() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.CvFeatures)
  SharedDtor();
}

void CvFeatures::SharedDtor() {
  if (this != internal_default_instance()) delete faces_;
  if (this != internal_default_instance()) delete textboxes_;
}

void CvFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CvFeatures::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CvFeatures& CvFeatures::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CvFeatures* CvFeatures::New(::google::protobuf::Arena* arena) const {
  CvFeatures* n = new CvFeatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CvFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(faces_ != NULL);
      faces_->::ru::mail::go::webbase::parsing::img::RectArray::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(textboxes_ != NULL);
      textboxes_->::ru::mail::go::webbase::parsing::img::RectArray::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entropy_) -
        reinterpret_cast<char*>(&quality_)) + sizeof(entropy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CvFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.parsing.img.RectArray faces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double entropy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_entropy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &entropy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.RectArray textboxes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textboxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.CvFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.CvFeatures)
  return false;
#undef DO_
}

void CvFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.parsing.img.RectArray faces = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->faces_, output);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // optional double entropy = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->entropy(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.RectArray textboxes = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->textboxes_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.CvFeatures)
}

::google::protobuf::uint8* CvFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.parsing.img.RectArray faces = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->faces_, deterministic, target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // optional double entropy = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->entropy(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.RectArray textboxes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->textboxes_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.CvFeatures)
  return target;
}

size_t CvFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .ru.mail.go.webbase.parsing.img.RectArray faces = 1;
    if (has_faces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->faces_);
    }

    // optional .ru.mail.go.webbase.parsing.img.RectArray textboxes = 4;
    if (has_textboxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->textboxes_);
    }

    // optional double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // optional double entropy = 3;
    if (has_entropy()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CvFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const CvFeatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CvFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.CvFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.CvFeatures)
    MergeFrom(*source);
  }
}

void CvFeatures::MergeFrom(const CvFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_faces()->::ru::mail::go::webbase::parsing::img::RectArray::MergeFrom(from.faces());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_textboxes()->::ru::mail::go::webbase::parsing::img::RectArray::MergeFrom(from.textboxes());
    }
    if (cached_has_bits & 0x00000004u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      entropy_ = from.entropy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CvFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvFeatures::CopyFrom(const CvFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.CvFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvFeatures::IsInitialized() const {
  if (has_faces()) {
    if (!this->faces_->IsInitialized()) return false;
  }
  if (has_textboxes()) {
    if (!this->textboxes_->IsInitialized()) return false;
  }
  return true;
}

void CvFeatures::Swap(CvFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CvFeatures::InternalSwap(CvFeatures* other) {
  using std::swap;
  swap(faces_, other->faces_);
  swap(textboxes_, other->textboxes_);
  swap(quality_, other->quality_);
  swap(entropy_, other->entropy_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CvFeatures::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CvFeatures

// optional .ru.mail.go.webbase.parsing.img.RectArray faces = 1;
bool CvFeatures::has_faces() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CvFeatures::set_has_faces() {
  _has_bits_[0] |= 0x00000001u;
}
void CvFeatures::clear_has_faces() {
  _has_bits_[0] &= ~0x00000001u;
}
void CvFeatures::clear_faces() {
  if (faces_ != NULL) faces_->::ru::mail::go::webbase::parsing::img::RectArray::Clear();
  clear_has_faces();
}
const ::ru::mail::go::webbase::parsing::img::RectArray& CvFeatures::faces() const {
  const ::ru::mail::go::webbase::parsing::img::RectArray* p = faces_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.CvFeatures.faces)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::RectArray*>(
      &::ru::mail::go::webbase::parsing::img::_RectArray_default_instance_);
}
::ru::mail::go::webbase::parsing::img::RectArray* CvFeatures::mutable_faces() {
  set_has_faces();
  if (faces_ == NULL) {
    faces_ = new ::ru::mail::go::webbase::parsing::img::RectArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.CvFeatures.faces)
  return faces_;
}
::ru::mail::go::webbase::parsing::img::RectArray* CvFeatures::release_faces() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.CvFeatures.faces)
  clear_has_faces();
  ::ru::mail::go::webbase::parsing::img::RectArray* temp = faces_;
  faces_ = NULL;
  return temp;
}
void CvFeatures::set_allocated_faces(::ru::mail::go::webbase::parsing::img::RectArray* faces) {
  delete faces_;
  faces_ = faces;
  if (faces) {
    set_has_faces();
  } else {
    clear_has_faces();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.CvFeatures.faces)
}

// optional double quality = 2;
bool CvFeatures::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CvFeatures::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
void CvFeatures::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
void CvFeatures::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
double CvFeatures::quality() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.CvFeatures.quality)
  return quality_;
}
void CvFeatures::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.CvFeatures.quality)
}

// optional double entropy = 3;
bool CvFeatures::has_entropy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CvFeatures::set_has_entropy() {
  _has_bits_[0] |= 0x00000008u;
}
void CvFeatures::clear_has_entropy() {
  _has_bits_[0] &= ~0x00000008u;
}
void CvFeatures::clear_entropy() {
  entropy_ = 0;
  clear_has_entropy();
}
double CvFeatures::entropy() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.CvFeatures.entropy)
  return entropy_;
}
void CvFeatures::set_entropy(double value) {
  set_has_entropy();
  entropy_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.CvFeatures.entropy)
}

// optional .ru.mail.go.webbase.parsing.img.RectArray textboxes = 4;
bool CvFeatures::has_textboxes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CvFeatures::set_has_textboxes() {
  _has_bits_[0] |= 0x00000002u;
}
void CvFeatures::clear_has_textboxes() {
  _has_bits_[0] &= ~0x00000002u;
}
void CvFeatures::clear_textboxes() {
  if (textboxes_ != NULL) textboxes_->::ru::mail::go::webbase::parsing::img::RectArray::Clear();
  clear_has_textboxes();
}
const ::ru::mail::go::webbase::parsing::img::RectArray& CvFeatures::textboxes() const {
  const ::ru::mail::go::webbase::parsing::img::RectArray* p = textboxes_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.CvFeatures.textboxes)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::RectArray*>(
      &::ru::mail::go::webbase::parsing::img::_RectArray_default_instance_);
}
::ru::mail::go::webbase::parsing::img::RectArray* CvFeatures::mutable_textboxes() {
  set_has_textboxes();
  if (textboxes_ == NULL) {
    textboxes_ = new ::ru::mail::go::webbase::parsing::img::RectArray;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.CvFeatures.textboxes)
  return textboxes_;
}
::ru::mail::go::webbase::parsing::img::RectArray* CvFeatures::release_textboxes() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.CvFeatures.textboxes)
  clear_has_textboxes();
  ::ru::mail::go::webbase::parsing::img::RectArray* temp = textboxes_;
  textboxes_ = NULL;
  return temp;
}
void CvFeatures::set_allocated_textboxes(::ru::mail::go::webbase::parsing::img::RectArray* textboxes) {
  delete textboxes_;
  textboxes_ = textboxes;
  if (textboxes) {
    set_has_textboxes();
  } else {
    clear_has_textboxes();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.CvFeatures.textboxes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Thumb::kPicFieldNumber;
const int Thumb::kWidthFieldNumber;
const int Thumb::kHeightFieldNumber;
const int Thumb::kFormatFieldNumber;
const int Thumb::kUrlFieldNumber;
const int Thumb::kFeaturesFieldNumber;
const int Thumb::kAnimatedFieldNumber;
const int Thumb::kOriginalWidthFieldNumber;
const int Thumb::kOriginalHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Thumb::Thumb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Thumb)
}
Thumb::Thumb(const Thumb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pic()) {
    pic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_features()) {
    features_ = new ::ru::mail::go::webbase::parsing::img::CvFeatures(*from.features_);
  } else {
    features_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&originalheight_) -
    reinterpret_cast<char*>(&width_)) + sizeof(originalheight_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Thumb)
}

void Thumb::SharedCtor() {
  _cached_size_ = 0;
  pic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originalheight_) -
      reinterpret_cast<char*>(&features_)) + sizeof(originalheight_));
}

Thumb::~Thumb() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Thumb)
  SharedDtor();
}

void Thumb::SharedDtor() {
  pic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
}

void Thumb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thumb::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Thumb& Thumb::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Thumb* Thumb::New(::google::protobuf::Arena* arena) const {
  Thumb* n = new Thumb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Thumb::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Thumb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pic_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(features_ != NULL);
      features_->::ru::mail::go::webbase::parsing::img::CvFeatures::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&originalwidth_) -
        reinterpret_cast<char*>(&width_)) + sizeof(originalwidth_));
  }
  originalheight_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Thumb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Thumb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value)) {
            set_format(static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.parsing.img.Thumb.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.CvFeatures features = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool animated = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_animated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 originalWidth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_originalwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 originalHeight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_originalheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Thumb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Thumb)
  return false;
#undef DO_
}

void Thumb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Thumb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes pic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pic(), output);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.Thumb.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional .ru.mail.go.webbase.parsing.img.CvFeatures features = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->features_, output);
  }

  // optional bool animated = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->animated(), output);
  }

  // optional uint32 originalWidth = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->originalwidth(), output);
  }

  // optional uint32 originalHeight = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->originalheight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Thumb)
}

::google::protobuf::uint8* Thumb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Thumb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes pic = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pic(), target);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.Thumb.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional .ru.mail.go.webbase.parsing.img.CvFeatures features = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->features_, deterministic, target);
  }

  // optional bool animated = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->animated(), target);
  }

  // optional uint32 originalWidth = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->originalwidth(), target);
  }

  // optional uint32 originalHeight = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->originalheight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Thumb)
  return target;
}

size_t Thumb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.parsing.img.Thumb)
  size_t total_size = 0;

  if (has_pic()) {
    // required bytes pic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pic());
  }

  if (has_width()) {
    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_format()) {
    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  return total_size;
}
size_t Thumb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Thumb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required bytes pic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pic());

    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .ru.mail.go.webbase.parsing.img.CvFeatures features = 7;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->features_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool animated = 8;
    if (has_animated()) {
      total_size += 1 + 1;
    }

    // optional uint32 originalWidth = 9;
    if (has_originalwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originalwidth());
    }

  }
  // optional uint32 originalHeight = 10;
  if (has_originalheight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->originalheight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thumb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Thumb)
  GOOGLE_DCHECK_NE(&from, this);
  const Thumb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Thumb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Thumb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Thumb)
    MergeFrom(*source);
  }
}

void Thumb::MergeFrom(const Thumb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Thumb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pic();
      pic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_features()->::ru::mail::go::webbase::parsing::img::CvFeatures::MergeFrom(from.features());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000040u) {
      animated_ = from.animated_;
    }
    if (cached_has_bits & 0x00000080u) {
      originalwidth_ = from.originalwidth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_originalheight(from.originalheight());
  }
}

void Thumb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Thumb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thumb::CopyFrom(const Thumb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Thumb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thumb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;
  if (has_features()) {
    if (!this->features_->IsInitialized()) return false;
  }
  return true;
}

void Thumb::Swap(Thumb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Thumb::InternalSwap(Thumb* other) {
  using std::swap;
  pic_.Swap(&other->pic_);
  url_.Swap(&other->url_);
  swap(features_, other->features_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  swap(animated_, other->animated_);
  swap(originalwidth_, other->originalwidth_);
  swap(originalheight_, other->originalheight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Thumb::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Thumb

// required bytes pic = 1;
bool Thumb::has_pic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Thumb::set_has_pic() {
  _has_bits_[0] |= 0x00000001u;
}
void Thumb::clear_has_pic() {
  _has_bits_[0] &= ~0x00000001u;
}
void Thumb::clear_pic() {
  pic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pic();
}
const ::std::string& Thumb::pic() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.pic)
  return pic_.GetNoArena();
}
void Thumb::set_pic(const ::std::string& value) {
  set_has_pic();
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.pic)
}
#if LANG_CXX11
void Thumb::set_pic(::std::string&& value) {
  set_has_pic();
  pic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.Thumb.pic)
}
#endif
void Thumb::set_pic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pic();
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.Thumb.pic)
}
void Thumb::set_pic(const void* value, size_t size) {
  set_has_pic();
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.Thumb.pic)
}
::std::string* Thumb::mutable_pic() {
  set_has_pic();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.Thumb.pic)
  return pic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Thumb::release_pic() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.Thumb.pic)
  clear_has_pic();
  return pic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Thumb::set_allocated_pic(::std::string* pic) {
  if (pic != NULL) {
    set_has_pic();
  } else {
    clear_has_pic();
  }
  pic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.Thumb.pic)
}

// required uint32 width = 2;
bool Thumb::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Thumb::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Thumb::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Thumb::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Thumb::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.width)
  return width_;
}
void Thumb::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.width)
}

// required uint32 height = 3;
bool Thumb::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Thumb::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void Thumb::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void Thumb::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Thumb::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.height)
  return height_;
}
void Thumb::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.height)
}

// required .ru.mail.go.webbase.parsing.img.ImageFormat format = 4;
bool Thumb::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Thumb::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
void Thumb::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
void Thumb::clear_format() {
  format_ = 0;
  clear_has_format();
}
::ru::mail::go::webbase::parsing::img::ImageFormat Thumb::format() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.format)
  return static_cast< ::ru::mail::go::webbase::parsing::img::ImageFormat >(format_);
}
void Thumb::set_format(::ru::mail::go::webbase::parsing::img::ImageFormat value) {
  assert(::ru::mail::go::webbase::parsing::img::ImageFormat_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.format)
}

// optional string url = 6;
bool Thumb::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Thumb::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Thumb::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Thumb::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Thumb::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.url)
  return url_.GetNoArena();
}
void Thumb::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.url)
}
#if LANG_CXX11
void Thumb::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.Thumb.url)
}
#endif
void Thumb::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.Thumb.url)
}
void Thumb::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.Thumb.url)
}
::std::string* Thumb::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.Thumb.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Thumb::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.Thumb.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Thumb::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.Thumb.url)
}

// optional .ru.mail.go.webbase.parsing.img.CvFeatures features = 7;
bool Thumb::has_features() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Thumb::set_has_features() {
  _has_bits_[0] |= 0x00000004u;
}
void Thumb::clear_has_features() {
  _has_bits_[0] &= ~0x00000004u;
}
void Thumb::clear_features() {
  if (features_ != NULL) features_->::ru::mail::go::webbase::parsing::img::CvFeatures::Clear();
  clear_has_features();
}
const ::ru::mail::go::webbase::parsing::img::CvFeatures& Thumb::features() const {
  const ::ru::mail::go::webbase::parsing::img::CvFeatures* p = features_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.features)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::CvFeatures*>(
      &::ru::mail::go::webbase::parsing::img::_CvFeatures_default_instance_);
}
::ru::mail::go::webbase::parsing::img::CvFeatures* Thumb::mutable_features() {
  set_has_features();
  if (features_ == NULL) {
    features_ = new ::ru::mail::go::webbase::parsing::img::CvFeatures;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.Thumb.features)
  return features_;
}
::ru::mail::go::webbase::parsing::img::CvFeatures* Thumb::release_features() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.Thumb.features)
  clear_has_features();
  ::ru::mail::go::webbase::parsing::img::CvFeatures* temp = features_;
  features_ = NULL;
  return temp;
}
void Thumb::set_allocated_features(::ru::mail::go::webbase::parsing::img::CvFeatures* features) {
  delete features_;
  features_ = features;
  if (features) {
    set_has_features();
  } else {
    clear_has_features();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.Thumb.features)
}

// optional bool animated = 8;
bool Thumb::has_animated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Thumb::set_has_animated() {
  _has_bits_[0] |= 0x00000040u;
}
void Thumb::clear_has_animated() {
  _has_bits_[0] &= ~0x00000040u;
}
void Thumb::clear_animated() {
  animated_ = false;
  clear_has_animated();
}
bool Thumb::animated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.animated)
  return animated_;
}
void Thumb::set_animated(bool value) {
  set_has_animated();
  animated_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.animated)
}

// optional uint32 originalWidth = 9;
bool Thumb::has_originalwidth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Thumb::set_has_originalwidth() {
  _has_bits_[0] |= 0x00000080u;
}
void Thumb::clear_has_originalwidth() {
  _has_bits_[0] &= ~0x00000080u;
}
void Thumb::clear_originalwidth() {
  originalwidth_ = 0u;
  clear_has_originalwidth();
}
::google::protobuf::uint32 Thumb::originalwidth() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.originalWidth)
  return originalwidth_;
}
void Thumb::set_originalwidth(::google::protobuf::uint32 value) {
  set_has_originalwidth();
  originalwidth_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.originalWidth)
}

// optional uint32 originalHeight = 10;
bool Thumb::has_originalheight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Thumb::set_has_originalheight() {
  _has_bits_[0] |= 0x00000100u;
}
void Thumb::clear_has_originalheight() {
  _has_bits_[0] &= ~0x00000100u;
}
void Thumb::clear_originalheight() {
  originalheight_ = 0u;
  clear_has_originalheight();
}
::google::protobuf::uint32 Thumb::originalheight() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Thumb.originalHeight)
  return originalheight_;
}
void Thumb::set_originalheight(::google::protobuf::uint32 value) {
  set_has_originalheight();
  originalheight_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Thumb.originalHeight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbWithQueries::kThumbFieldNumber;
const int ThumbWithQueries::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbWithQueries::ThumbWithQueries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
}
ThumbWithQueries::ThumbWithQueries(const ThumbWithQueries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_thumb()) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.thumb_);
  } else {
    thumb_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
}

void ThumbWithQueries::SharedCtor() {
  _cached_size_ = 0;
  thumb_ = NULL;
}

ThumbWithQueries::~ThumbWithQueries() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  SharedDtor();
}

void ThumbWithQueries::SharedDtor() {
  if (this != internal_default_instance()) delete thumb_;
}

void ThumbWithQueries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbWithQueries::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThumbWithQueries& ThumbWithQueries::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThumbWithQueries* ThumbWithQueries::New(::google::protobuf::Arena* arena) const {
  ThumbWithQueries* n = new ThumbWithQueries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThumbWithQueries::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  if (has_thumb()) {
    GOOGLE_DCHECK(thumb_ != NULL);
    thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThumbWithQueries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string queries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_queries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queries(this->queries_size() - 1).data(),
            static_cast<int>(this->queries(this->queries_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  return false;
#undef DO_
}

void ThumbWithQueries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->thumb_, output);
  }

  // repeated string queries = 2;
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->queries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
}

::google::protobuf::uint8* ThumbWithQueries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->thumb_, deterministic, target);
  }

  // repeated string queries = 2;
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->queries(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  return target;
}

size_t ThumbWithQueries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string queries = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queries_size());
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->queries(i));
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  if (has_thumb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbWithQueries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbWithQueries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThumbWithQueries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
    MergeFrom(*source);
  }
}

void ThumbWithQueries::MergeFrom(const ThumbWithQueries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  if (from.has_thumb()) {
    mutable_thumb()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.thumb());
  }
}

void ThumbWithQueries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbWithQueries::CopyFrom(const ThumbWithQueries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.ThumbWithQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbWithQueries::IsInitialized() const {
  if (has_thumb()) {
    if (!this->thumb_->IsInitialized()) return false;
  }
  return true;
}

void ThumbWithQueries::Swap(ThumbWithQueries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThumbWithQueries::InternalSwap(ThumbWithQueries* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  swap(thumb_, other->thumb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThumbWithQueries::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThumbWithQueries

// optional .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
bool ThumbWithQueries::has_thumb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThumbWithQueries::set_has_thumb() {
  _has_bits_[0] |= 0x00000001u;
}
void ThumbWithQueries::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThumbWithQueries::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& ThumbWithQueries::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.ThumbWithQueries.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbWithQueries::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.ThumbWithQueries.thumb)
  return thumb_;
}
::ru::mail::go::webbase::parsing::img::Thumb* ThumbWithQueries::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.ThumbWithQueries.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
void ThumbWithQueries::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.ThumbWithQueries.thumb)
}

// repeated string queries = 2;
int ThumbWithQueries::queries_size() const {
  return queries_.size();
}
void ThumbWithQueries::clear_queries() {
  queries_.Clear();
}
const ::std::string& ThumbWithQueries::queries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  return queries_.Get(index);
}
::std::string* ThumbWithQueries::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  return queries_.Mutable(index);
}
void ThumbWithQueries::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ThumbWithQueries::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
void ThumbWithQueries::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
void ThumbWithQueries::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
::std::string* ThumbWithQueries::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  return queries_.Add();
}
void ThumbWithQueries::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
#if LANG_CXX11
void ThumbWithQueries::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
#endif
void ThumbWithQueries::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
void ThumbWithQueries::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThumbWithQueries::queries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  return queries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ThumbWithQueries::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.ThumbWithQueries.queries)
  return &queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoClip::kClipFieldNumber;
const int VideoClip::kWidthFieldNumber;
const int VideoClip::kHeightFieldNumber;
const int VideoClip::kLengthFieldNumber;
const int VideoClip::kCodecFieldNumber;
const int VideoClip::kContainerFieldNumber;
const int VideoClip::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoClip::VideoClip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.VideoClip)
}
VideoClip::VideoClip(const VideoClip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clip()) {
    clip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clip_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&container_) -
    reinterpret_cast<char*>(&width_)) + sizeof(container_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.VideoClip)
}

void VideoClip::SharedCtor() {
  _cached_size_ = 0;
  clip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_) -
      reinterpret_cast<char*>(&width_)) + sizeof(container_));
}

VideoClip::~VideoClip() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.VideoClip)
  SharedDtor();
}

void VideoClip::SharedDtor() {
  clip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoClip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoClip::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoClip& VideoClip::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoClip* VideoClip::New(::google::protobuf::Arena* arena) const {
  VideoClip* n = new VideoClip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoClip::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.VideoClip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!clip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&container_) -
        reinterpret_cast<char*>(&width_)) + sizeof(container_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoClip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.VideoClip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes clip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec_IsValid(value)) {
            set_codec(static_cast< ::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer_IsValid(value)) {
            set_container(static_cast< ::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.parsing.img.VideoClip.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.VideoClip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.VideoClip)
  return false;
#undef DO_
}

void VideoClip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.VideoClip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes clip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->clip(), output);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // required uint32 length = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->codec(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->container(), output);
  }

  // optional string url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.VideoClip.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.VideoClip)
}

::google::protobuf::uint8* VideoClip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.VideoClip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes clip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->clip(), target);
  }

  // required uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // required uint32 length = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->length(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->codec(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->container(), target);
  }

  // optional string url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.VideoClip.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.VideoClip)
  return target;
}

size_t VideoClip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.parsing.img.VideoClip)
  size_t total_size = 0;

  if (has_clip()) {
    // required bytes clip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clip());
  }

  if (has_width()) {
    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_length()) {
    // required uint32 length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  if (has_codec()) {
    // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec());
  }

  if (has_container()) {
    // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container());
  }

  return total_size;
}
size_t VideoClip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.VideoClip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007d) ^ 0x0000007d) == 0) {  // All required fields are present.
    // required bytes clip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clip());

    // required uint32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 length = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

    // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec());

    // required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->container());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string url = 7;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoClip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.VideoClip)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoClip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoClip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.VideoClip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.VideoClip)
    MergeFrom(*source);
  }
}

void VideoClip::MergeFrom(const VideoClip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.VideoClip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clip();
      clip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00000040u) {
      container_ = from.container_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoClip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.VideoClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoClip::CopyFrom(const VideoClip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.VideoClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoClip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;
  return true;
}

void VideoClip::Swap(VideoClip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoClip::InternalSwap(VideoClip* other) {
  using std::swap;
  clip_.Swap(&other->clip_);
  url_.Swap(&other->url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(length_, other->length_);
  swap(codec_, other->codec_);
  swap(container_, other->container_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoClip::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoClip

// required bytes clip = 1;
bool VideoClip::has_clip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoClip::set_has_clip() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoClip::clear_has_clip() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoClip::clear_clip() {
  clip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clip();
}
const ::std::string& VideoClip::clip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.clip)
  return clip_.GetNoArena();
}
void VideoClip::set_clip(const ::std::string& value) {
  set_has_clip();
  clip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.clip)
}
#if LANG_CXX11
void VideoClip::set_clip(::std::string&& value) {
  set_has_clip();
  clip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.VideoClip.clip)
}
#endif
void VideoClip::set_clip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clip();
  clip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.VideoClip.clip)
}
void VideoClip::set_clip(const void* value, size_t size) {
  set_has_clip();
  clip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.VideoClip.clip)
}
::std::string* VideoClip::mutable_clip() {
  set_has_clip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.VideoClip.clip)
  return clip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoClip::release_clip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.VideoClip.clip)
  clear_has_clip();
  return clip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoClip::set_allocated_clip(::std::string* clip) {
  if (clip != NULL) {
    set_has_clip();
  } else {
    clear_has_clip();
  }
  clip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.VideoClip.clip)
}

// required uint32 width = 2;
bool VideoClip::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoClip::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoClip::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoClip::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 VideoClip::width() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.width)
  return width_;
}
void VideoClip::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.width)
}

// required uint32 height = 3;
bool VideoClip::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoClip::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoClip::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoClip::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 VideoClip::height() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.height)
  return height_;
}
void VideoClip::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.height)
}

// required uint32 length = 4;
bool VideoClip::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoClip::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoClip::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoClip::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 VideoClip::length() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.length)
  return length_;
}
void VideoClip::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.length)
}

// required .ru.mail.go.webbase.parsing.img.VideoClip.VideoCodec codec = 5;
bool VideoClip::has_codec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoClip::set_has_codec() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoClip::clear_has_codec() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoClip::clear_codec() {
  codec_ = 0;
  clear_has_codec();
}
::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec VideoClip::codec() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.codec)
  return static_cast< ::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec >(codec_);
}
void VideoClip::set_codec(::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec value) {
  assert(::ru::mail::go::webbase::parsing::img::VideoClip_VideoCodec_IsValid(value));
  set_has_codec();
  codec_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.codec)
}

// required .ru.mail.go.webbase.parsing.img.VideoClip.VideoContainer container = 6;
bool VideoClip::has_container() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoClip::set_has_container() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoClip::clear_has_container() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoClip::clear_container() {
  container_ = 0;
  clear_has_container();
}
::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer VideoClip::container() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.container)
  return static_cast< ::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer >(container_);
}
void VideoClip::set_container(::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer value) {
  assert(::ru::mail::go::webbase::parsing::img::VideoClip_VideoContainer_IsValid(value));
  set_has_container();
  container_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.container)
}

// optional string url = 7;
bool VideoClip::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoClip::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoClip::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoClip::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& VideoClip::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.VideoClip.url)
  return url_.GetNoArena();
}
void VideoClip::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.VideoClip.url)
}
#if LANG_CXX11
void VideoClip::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.VideoClip.url)
}
#endif
void VideoClip::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.VideoClip.url)
}
void VideoClip::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.VideoClip.url)
}
::std::string* VideoClip::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.VideoClip.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoClip::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.VideoClip.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoClip::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.VideoClip.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterSeed::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterSeed::ClusterSeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.ClusterSeed)
}
ClusterSeed::ClusterSeed(const ClusterSeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hash_(from.hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.ClusterSeed)
}

void ClusterSeed::SharedCtor() {
  _cached_size_ = 0;
}

ClusterSeed::~ClusterSeed() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.ClusterSeed)
  SharedDtor();
}

void ClusterSeed::SharedDtor() {
}

void ClusterSeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterSeed::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterSeed& ClusterSeed::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterSeed* ClusterSeed::New(::google::protobuf::Arena* arena) const {
  ClusterSeed* n = new ClusterSeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterSeed::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClusterSeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.ClusterSeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.ClusterSeed)
  return false;
#undef DO_
}

void ClusterSeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 hash = 1;
  for (int i = 0, n = this->hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->hash(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.ClusterSeed)
}

::google::protobuf::uint8* ClusterSeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 hash = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->hash_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.ClusterSeed)
  return target;
}

size_t ClusterSeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 hash = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hash_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterSeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterSeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterSeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.ClusterSeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.ClusterSeed)
    MergeFrom(*source);
  }
}

void ClusterSeed::MergeFrom(const ClusterSeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_.MergeFrom(from.hash_);
}

void ClusterSeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterSeed::CopyFrom(const ClusterSeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.ClusterSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterSeed::IsInitialized() const {
  return true;
}

void ClusterSeed::Swap(ClusterSeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterSeed::InternalSwap(ClusterSeed* other) {
  using std::swap;
  hash_.InternalSwap(&other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterSeed::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterSeed

// repeated uint64 hash = 1;
int ClusterSeed::hash_size() const {
  return hash_.size();
}
void ClusterSeed::clear_hash() {
  hash_.Clear();
}
::google::protobuf::uint64 ClusterSeed::hash(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.ClusterSeed.hash)
  return hash_.Get(index);
}
void ClusterSeed::set_hash(int index, ::google::protobuf::uint64 value) {
  hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.ClusterSeed.hash)
}
void ClusterSeed::add_hash(::google::protobuf::uint64 value) {
  hash_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.ClusterSeed.hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ClusterSeed::hash() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.ClusterSeed.hash)
  return hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ClusterSeed::mutable_hash() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.ClusterSeed.hash)
  return &hash_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kIdFieldNumber;
const int Cluster::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hash_(from.hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Cluster)
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.Clear();
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint64 hash = 2;
  for (int i = 0, n = this->hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->hash(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint64 hash = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->hash_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Cluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  // repeated uint64 hash = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->hash_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_.MergeFrom(from.hash_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  hash_.InternalSwap(&other->hash_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// required uint64 id = 1;
bool Cluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Cluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cluster::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Cluster::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Cluster.id)
  return id_;
}
void Cluster::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Cluster.id)
}

// repeated uint64 hash = 2;
int Cluster::hash_size() const {
  return hash_.size();
}
void Cluster::clear_hash() {
  hash_.Clear();
}
::google::protobuf::uint64 Cluster::hash(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Cluster.hash)
  return hash_.Get(index);
}
void Cluster::set_hash(int index, ::google::protobuf::uint64 value) {
  hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Cluster.hash)
}
void Cluster::add_hash(::google::protobuf::uint64 value) {
  hash_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.Cluster.hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Cluster::hash() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.Cluster.hash)
  return hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Cluster::mutable_hash() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.Cluster.hash)
  return &hash_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashId::kHashFieldNumber;
const int HashId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashId::HashId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.HashId)
}
HashId::HashId(const HashId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.HashId)
}

void HashId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(id_));
}

HashId::~HashId() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.HashId)
  SharedDtor();
}

void HashId::SharedDtor() {
}

void HashId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashId::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HashId& HashId::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

HashId* HashId::New(::google::protobuf::Arena* arena) const {
  HashId* n = new HashId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashId::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.HashId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HashId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.HashId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.HashId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.HashId)
  return false;
#undef DO_
}

void HashId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.HashId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // required uint64 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.HashId)
}

::google::protobuf::uint8* HashId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.HashId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // required uint64 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.HashId)
  return target;
}

size_t HashId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.parsing.img.HashId)
  size_t total_size = 0;

  if (has_hash()) {
    // required uint64 hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());
  }

  if (has_id()) {
    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t HashId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.HashId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());

    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.HashId)
  GOOGLE_DCHECK_NE(&from, this);
  const HashId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HashId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.HashId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.HashId)
    MergeFrom(*source);
  }
}

void HashId::MergeFrom(const HashId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.HashId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HashId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.HashId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashId::CopyFrom(const HashId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.HashId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HashId::Swap(HashId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashId::InternalSwap(HashId* other) {
  using std::swap;
  swap(hash_, other->hash_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashId::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashId

// required uint64 hash = 1;
bool HashId::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HashId::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void HashId::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void HashId::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 HashId::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.HashId.hash)
  return hash_;
}
void HashId::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.HashId.hash)
}

// required uint64 id = 2;
bool HashId::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HashId::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HashId::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HashId::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 HashId::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.HashId.id)
  return id_;
}
void HashId::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.HashId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdOrRow::kIdFieldNumber;
const int IdOrRow::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdOrRow::IdOrRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.IdOrRow)
}
IdOrRow::IdOrRow(const IdOrRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.IdOrRow)
}

void IdOrRow::SharedCtor() {
  _cached_size_ = 0;
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

IdOrRow::~IdOrRow() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.IdOrRow)
  SharedDtor();
}

void IdOrRow::SharedDtor() {
  row_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdOrRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdOrRow::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdOrRow& IdOrRow::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdOrRow* IdOrRow::New(::google::protobuf::Arena* arena) const {
  IdOrRow* n = new IdOrRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdOrRow::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_row()) {
    GOOGLE_DCHECK(!row_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*row_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IdOrRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.IdOrRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.IdOrRow)
  return false;
#undef DO_
}

void IdOrRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes row = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.IdOrRow)
}

::google::protobuf::uint8* IdOrRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes row = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.IdOrRow)
  return target;
}

size_t IdOrRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdOrRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  GOOGLE_DCHECK_NE(&from, this);
  const IdOrRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdOrRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.IdOrRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.IdOrRow)
    MergeFrom(*source);
  }
}

void IdOrRow::MergeFrom(const IdOrRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_row();
      row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdOrRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdOrRow::CopyFrom(const IdOrRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.IdOrRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdOrRow::IsInitialized() const {
  return true;
}

void IdOrRow::Swap(IdOrRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdOrRow::InternalSwap(IdOrRow* other) {
  using std::swap;
  row_.Swap(&other->row_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdOrRow::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdOrRow

// optional uint64 id = 1;
bool IdOrRow::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IdOrRow::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void IdOrRow::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void IdOrRow::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 IdOrRow::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.IdOrRow.id)
  return id_;
}
void IdOrRow::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.IdOrRow.id)
}

// optional bytes row = 2;
bool IdOrRow::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IdOrRow::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void IdOrRow::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void IdOrRow::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_row();
}
const ::std::string& IdOrRow::row() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.IdOrRow.row)
  return row_.GetNoArena();
}
void IdOrRow::set_row(const ::std::string& value) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.IdOrRow.row)
}
#if LANG_CXX11
void IdOrRow::set_row(::std::string&& value) {
  set_has_row();
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.IdOrRow.row)
}
#endif
void IdOrRow::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.IdOrRow.row)
}
void IdOrRow::set_row(const void* value, size_t size) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.IdOrRow.row)
}
::std::string* IdOrRow::mutable_row() {
  set_has_row();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.IdOrRow.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IdOrRow::release_row() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.IdOrRow.row)
  clear_has_row();
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IdOrRow::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    set_has_row();
  } else {
    clear_has_row();
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.IdOrRow.row)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowCluster::kIdFieldNumber;
const int RowCluster::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowCluster::RowCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.RowCluster)
}
RowCluster::RowCluster(const RowCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      row_(from.row_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.RowCluster)
}

void RowCluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

RowCluster::~RowCluster() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.RowCluster)
  SharedDtor();
}

void RowCluster::SharedDtor() {
}

void RowCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowCluster::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowCluster& RowCluster::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

RowCluster* RowCluster::New(::google::protobuf::Arena* arena) const {
  RowCluster* n = new RowCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.RowCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RowCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.RowCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.RowCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.RowCluster)
  return false;
#undef DO_
}

void RowCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.RowCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated bytes row = 2;
  for (int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->row(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.RowCluster)
}

::google::protobuf::uint8* RowCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.RowCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated bytes row = 2;
  for (int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->row(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.RowCluster)
  return target;
}

size_t RowCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.RowCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  // repeated bytes row = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->row_size());
  for (int i = 0, n = this->row_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->row(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.RowCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const RowCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.RowCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.RowCluster)
    MergeFrom(*source);
  }
}

void RowCluster::MergeFrom(const RowCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.RowCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void RowCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.RowCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowCluster::CopyFrom(const RowCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.RowCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowCluster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RowCluster::Swap(RowCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowCluster::InternalSwap(RowCluster* other) {
  using std::swap;
  row_.InternalSwap(&other->row_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowCluster::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowCluster

// required uint64 id = 1;
bool RowCluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RowCluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RowCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RowCluster::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 RowCluster::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.RowCluster.id)
  return id_;
}
void RowCluster::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.RowCluster.id)
}

// repeated bytes row = 2;
int RowCluster::row_size() const {
  return row_.size();
}
void RowCluster::clear_row() {
  row_.Clear();
}
const ::std::string& RowCluster::row(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.RowCluster.row)
  return row_.Get(index);
}
::std::string* RowCluster::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.RowCluster.row)
  return row_.Mutable(index);
}
void RowCluster::set_row(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.RowCluster.row)
  row_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RowCluster::set_row(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.RowCluster.row)
  row_.Mutable(index)->assign(std::move(value));
}
#endif
void RowCluster::set_row(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
void RowCluster::set_row(int index, const void* value, size_t size) {
  row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
::std::string* RowCluster::add_row() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.parsing.img.RowCluster.row)
  return row_.Add();
}
void RowCluster::add_row(const ::std::string& value) {
  row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
#if LANG_CXX11
void RowCluster::add_row(::std::string&& value) {
  row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
#endif
void RowCluster::add_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
void RowCluster::add_row(const void* value, size_t size) {
  row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.parsing.img.RowCluster.row)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RowCluster::row() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.RowCluster.row)
  return row_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RowCluster::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.RowCluster.row)
  return &row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Duplicate::kIdFieldNumber;
const int Duplicate::kRowFieldNumber;
const int Duplicate::kThumbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Duplicate::Duplicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.Duplicate)
}
Duplicate::Duplicate(const Duplicate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.has_thumb()) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.thumb_);
  } else {
    thumb_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.Duplicate)
}

void Duplicate::SharedCtor() {
  _cached_size_ = 0;
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&thumb_)) + sizeof(id_));
}

Duplicate::~Duplicate() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.Duplicate)
  SharedDtor();
}

void Duplicate::SharedDtor() {
  row_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete thumb_;
}

void Duplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Duplicate& Duplicate::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Duplicate* Duplicate::New(::google::protobuf::Arena* arena) const {
  Duplicate* n = new Duplicate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Duplicate::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!row_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*row_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(thumb_ != NULL);
      thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Duplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.Duplicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_row()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->row().data(), static_cast<int>(this->row().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.parsing.img.Duplicate.row");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.Duplicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.Duplicate)
  return false;
#undef DO_
}

void Duplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string row = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->row().data(), static_cast<int>(this->row().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.Duplicate.row");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->row(), output);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->thumb_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.Duplicate)
}

::google::protobuf::uint8* Duplicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string row = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->row().data(), static_cast<int>(this->row().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.parsing.img.Duplicate.row");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->row(), target);
  }

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->thumb_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.Duplicate)
  return target;
}

size_t Duplicate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.parsing.img.Duplicate)
  size_t total_size = 0;

  if (has_row()) {
    // required string row = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->row());
  }

  if (has_thumb()) {
    // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t Duplicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.Duplicate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string row = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->row());

    // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thumb_);

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.Duplicate)
  GOOGLE_DCHECK_NE(&from, this);
  const Duplicate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Duplicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.Duplicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.Duplicate)
    MergeFrom(*source);
  }
}

void Duplicate::MergeFrom(const Duplicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.Duplicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_row();
      row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_thumb()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.thumb());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Duplicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.Duplicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate::CopyFrom(const Duplicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.Duplicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_thumb()) {
    if (!this->thumb_->IsInitialized()) return false;
  }
  return true;
}

void Duplicate::Swap(Duplicate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Duplicate::InternalSwap(Duplicate* other) {
  using std::swap;
  row_.Swap(&other->row_);
  swap(thumb_, other->thumb_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Duplicate::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Duplicate

// required uint64 id = 1;
bool Duplicate::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Duplicate::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Duplicate::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Duplicate::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Duplicate::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Duplicate.id)
  return id_;
}
void Duplicate::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Duplicate.id)
}

// required string row = 2;
bool Duplicate::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Duplicate::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void Duplicate::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void Duplicate::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_row();
}
const ::std::string& Duplicate::row() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Duplicate.row)
  return row_.GetNoArena();
}
void Duplicate::set_row(const ::std::string& value) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.parsing.img.Duplicate.row)
}
#if LANG_CXX11
void Duplicate::set_row(::std::string&& value) {
  set_has_row();
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.parsing.img.Duplicate.row)
}
#endif
void Duplicate::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.parsing.img.Duplicate.row)
}
void Duplicate::set_row(const char* value, size_t size) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.parsing.img.Duplicate.row)
}
::std::string* Duplicate::mutable_row() {
  set_has_row();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.Duplicate.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Duplicate::release_row() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.Duplicate.row)
  clear_has_row();
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Duplicate::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    set_has_row();
  } else {
    clear_has_row();
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.Duplicate.row)
}

// required .ru.mail.go.webbase.parsing.img.Thumb thumb = 3;
bool Duplicate::has_thumb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Duplicate::set_has_thumb() {
  _has_bits_[0] |= 0x00000002u;
}
void Duplicate::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000002u;
}
void Duplicate::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& Duplicate::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.Duplicate.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* Duplicate::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.Duplicate.thumb)
  return thumb_;
}
::ru::mail::go::webbase::parsing::img::Thumb* Duplicate::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.Duplicate.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
void Duplicate::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.Duplicate.thumb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerpSimilar::kQueryFieldNumber;
const int SerpSimilar::kSerpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerpSimilar::SerpSimilar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.parsing.img.SerpSimilar)
}
SerpSimilar::SerpSimilar(const SerpSimilar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      serp_(from.serp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.query_);
  } else {
    query_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.parsing.img.SerpSimilar)
}

void SerpSimilar::SharedCtor() {
  _cached_size_ = 0;
  query_ = NULL;
}

SerpSimilar::~SerpSimilar() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.parsing.img.SerpSimilar)
  SharedDtor();
}

void SerpSimilar::SharedDtor() {
  if (this != internal_default_instance()) delete query_;
}

void SerpSimilar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerpSimilar::descriptor() {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerpSimilar& SerpSimilar::default_instance() {
  protobuf_image_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerpSimilar* SerpSimilar::New(::google::protobuf::Arena* arena) const {
  SerpSimilar* n = new SerpSimilar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerpSimilar::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serp_.Clear();
  if (has_query()) {
    GOOGLE_DCHECK(query_ != NULL);
    query_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerpSimilar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.parsing.img.Thumb query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.parsing.img.Thumb serp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.parsing.img.SerpSimilar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.parsing.img.SerpSimilar)
  return false;
#undef DO_
}

void SerpSimilar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.parsing.img.Thumb query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->query_, output);
  }

  // repeated .ru.mail.go.webbase.parsing.img.Thumb serp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serp(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.parsing.img.SerpSimilar)
}

::google::protobuf::uint8* SerpSimilar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.parsing.img.Thumb query = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->query_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.parsing.img.Thumb serp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->serp(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.parsing.img.SerpSimilar)
  return target;
}

size_t SerpSimilar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.parsing.img.Thumb query = 1;
  if (has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }
  // repeated .ru.mail.go.webbase.parsing.img.Thumb serp = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->serp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serp(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerpSimilar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  GOOGLE_DCHECK_NE(&from, this);
  const SerpSimilar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerpSimilar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.parsing.img.SerpSimilar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.parsing.img.SerpSimilar)
    MergeFrom(*source);
  }
}

void SerpSimilar::MergeFrom(const SerpSimilar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serp_.MergeFrom(from.serp_);
  if (from.has_query()) {
    mutable_query()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.query());
  }
}

void SerpSimilar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerpSimilar::CopyFrom(const SerpSimilar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.parsing.img.SerpSimilar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerpSimilar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->serp())) return false;
  if (has_query()) {
    if (!this->query_->IsInitialized()) return false;
  }
  return true;
}

void SerpSimilar::Swap(SerpSimilar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerpSimilar::InternalSwap(SerpSimilar* other) {
  using std::swap;
  serp_.InternalSwap(&other->serp_);
  swap(query_, other->query_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerpSimilar::GetMetadata() const {
  protobuf_image_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerpSimilar

// required .ru.mail.go.webbase.parsing.img.Thumb query = 1;
bool SerpSimilar::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerpSimilar::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void SerpSimilar::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerpSimilar::clear_query() {
  if (query_ != NULL) query_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_query();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& SerpSimilar::query() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = query_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.SerpSimilar.query)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* SerpSimilar::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.SerpSimilar.query)
  return query_;
}
::ru::mail::go::webbase::parsing::img::Thumb* SerpSimilar::release_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.parsing.img.SerpSimilar.query)
  clear_has_query();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = query_;
  query_ = NULL;
  return temp;
}
void SerpSimilar::set_allocated_query(::ru::mail::go::webbase::parsing::img::Thumb* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.parsing.img.SerpSimilar.query)
}

// repeated .ru.mail.go.webbase.parsing.img.Thumb serp = 2;
int SerpSimilar::serp_size() const {
  return serp_.size();
}
void SerpSimilar::clear_serp() {
  serp_.Clear();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& SerpSimilar::serp(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.parsing.img.SerpSimilar.serp)
  return serp_.Get(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* SerpSimilar::mutable_serp(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.parsing.img.SerpSimilar.serp)
  return serp_.Mutable(index);
}
::ru::mail::go::webbase::parsing::img::Thumb* SerpSimilar::add_serp() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.parsing.img.SerpSimilar.serp)
  return serp_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >*
SerpSimilar::mutable_serp() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.parsing.img.SerpSimilar.serp)
  return &serp_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::parsing::img::Thumb >&
SerpSimilar::serp() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.parsing.img.SerpSimilar.serp)
  return serp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace img
}  // namespace parsing
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
