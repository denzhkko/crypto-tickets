// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_match_indexer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image_match_indexer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace image_match_indexer {
namespace pb {
class DumpItem_DuplicateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpItem_Duplicate>
     _instance;
} _DumpItem_Duplicate_default_instance_;
class DumpItem_PageReferenceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpItem_PageReference>
     _instance;
} _DumpItem_PageReference_default_instance_;
class DumpItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpItem>
     _instance;
} _DumpItem_default_instance_;
class PreviewInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PreviewInfo>
     _instance;
} _PreviewInfo_default_instance_;
class EmbedderOutDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbedderOut>
     _instance;
} _EmbedderOut_default_instance_;
class EmbeddingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Embedding>
     _instance;
} _Embedding_default_instance_;
class EmbedData_OriginalInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbedData_OriginalInfo>
     _instance;
} _EmbedData_OriginalInfo_default_instance_;
class EmbedData_AnnoyIndexMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbedData_AnnoyIndexMeta>
     _instance;
} _EmbedData_AnnoyIndexMeta_default_instance_;
class EmbedDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbedData>
     _instance;
} _EmbedData_default_instance_;

namespace protobuf_image_5fmatch_5findexer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_Duplicate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_Duplicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_Duplicate, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_Duplicate, porn_probability_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_PageReference, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_PageReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_PageReference, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem_PageReference, snippet_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, webpagesii_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, full_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, clicks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, impressions_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, image_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, image_thumbnail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, put_image_embeddings_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, image_embeddings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, porn_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, min_porn_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, max_porn_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, put_porn_probability_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, duplicates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpItem, ref_),
  0,
  1,
  5,
  6,
  2,
  3,
  9,
  4,
  7,
  8,
  11,
  10,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, preview_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, preview_db_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, preview_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreviewInfo, preview_width_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedderOut, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedderOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedderOut, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedderOut, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, preview_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Embedding, porn_probability_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_OriginalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_OriginalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_OriginalInfo, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_AnnoyIndexMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_AnnoyIndexMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_AnnoyIndexMeta, annoy_idx_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData_AnnoyIndexMeta, annoy_img_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, image_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, porn_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, original_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, annoy_index_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedData, preview_info_),
  3,
  4,
  5,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(DumpItem_Duplicate)},
  { 9, 16, sizeof(DumpItem_PageReference)},
  { 18, 37, sizeof(DumpItem)},
  { 51, 60, sizeof(PreviewInfo)},
  { 64, 71, sizeof(EmbedderOut)},
  { 73, 83, sizeof(Embedding)},
  { 88, 94, sizeof(EmbedData_OriginalInfo)},
  { 95, 102, sizeof(EmbedData_AnnoyIndexMeta)},
  { 104, 115, sizeof(EmbedData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpItem_Duplicate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpItem_PageReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreviewInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedderOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Embedding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedData_OriginalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedData_AnnoyIndexMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image_match_indexer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_image_5fblobs_2eproto::InitDefaults();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::InitDefaults();
  ::qembedder::pb::protobuf_qembedder_2eproto::InitDefaults();
  _DumpItem_Duplicate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpItem_Duplicate_default_instance_);_DumpItem_PageReference_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpItem_PageReference_default_instance_);_DumpItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpItem_default_instance_);_PreviewInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PreviewInfo_default_instance_);_EmbedderOut_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbedderOut_default_instance_);_Embedding_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Embedding_default_instance_);_EmbedData_OriginalInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbedData_OriginalInfo_default_instance_);_EmbedData_AnnoyIndexMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbedData_AnnoyIndexMeta_default_instance_);_EmbedData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbedData_default_instance_);_DumpItem_default_instance_._instance.get_mutable()->image_properties_ = const_cast< ::ru::mail::go::webbase::blobs::ImageProps*>(
      ::ru::mail::go::webbase::blobs::ImageProps::internal_default_instance());
  _DumpItem_default_instance_._instance.get_mutable()->image_thumbnail_ = const_cast< ::ru::mail::go::webbase::parsing::img::Thumb*>(
      ::ru::mail::go::webbase::parsing::img::Thumb::internal_default_instance());
  _DumpItem_default_instance_._instance.get_mutable()->image_embeddings_ = const_cast< ::qembedder::pb::Embedding*>(
      ::qembedder::pb::Embedding::internal_default_instance());
  _Embedding_default_instance_._instance.get_mutable()->preview_info_ = const_cast< ::image_match_indexer::pb::PreviewInfo*>(
      ::image_match_indexer::pb::PreviewInfo::internal_default_instance());
  _EmbedData_default_instance_._instance.get_mutable()->original_info_ = const_cast< ::image_match_indexer::pb::EmbedData_OriginalInfo*>(
      ::image_match_indexer::pb::EmbedData_OriginalInfo::internal_default_instance());
  _EmbedData_default_instance_._instance.get_mutable()->annoy_index_meta_ = const_cast< ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta*>(
      ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta::internal_default_instance());
  _EmbedData_default_instance_._instance.get_mutable()->preview_info_ = const_cast< ::image_match_indexer::pb::PreviewInfo*>(
      ::image_match_indexer::pb::PreviewInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031image_match_indexer.proto\022\026image_match"
      "_indexer.pb\032\021image_blobs.proto\032\020image_de"
      "fs.proto\032\017qembedder.proto\"\246\005\n\010DumpItem\022\026"
      "\n\016webpagesII_key\030\001 \001(\014\022\020\n\010full_url\030\010 \001(\t"
      "\022\024\n\014clicks_count\030\002 \001(\r\022\031\n\021impressions_co"
      "unt\030\003 \001(\r\022>\n\020image_properties\030\004 \001(\0132$.ru"
      ".mail.go.webbase.blobs.ImageProps\022>\n\017ima"
      "ge_thumbnail\030\007 \001(\0132%.ru.mail.go.webbase."
      "parsing.img.Thumb\022%\n\035put_image_embedding"
      "s_required\030\n \001(\010\0221\n\020image_embeddings\030\t \001"
      "(\0132\027.qembedder.pb.Embedding\022\030\n\020porn_prob"
      "ability\030\013 \001(\002\022\034\n\024min_porn_probability\030\014 "
      "\001(\002\022\034\n\024max_porn_probability\030\r \001(\002\022%\n\035put"
      "_porn_probability_required\030\017 \001(\010\022>\n\ndupl"
      "icates\030\016 \003(\0132*.image_match_indexer.pb.Du"
      "mpItem.Duplicate\022;\n\003ref\030\020 \003(\0132..image_ma"
      "tch_indexer.pb.DumpItem.PageReference\0327\n"
      "\tDuplicate\022\020\n\010full_url\030\001 \001(\t\022\030\n\020porn_pro"
      "bability\030\002 \001(\002\0322\n\rPageReference\022\020\n\010full_"
      "url\030\001 \002(\t\022\017\n\007snippet\030\002 \001(\t\"i\n\013PreviewInf"
      "o\022\023\n\013preview_key\030\001 \002(\t\022\026\n\016preview_db_num"
      "\030\002 \002(\t\022\026\n\016preview_height\030\003 \001(\007\022\025\n\rprevie"
      "w_width\030\004 \001(\007\"(\n\013EmbedderOut\022\014\n\004data\030\001 \002"
      "(\014\022\013\n\003url\030\002 \002(\t\"\211\001\n\tEmbedding\022\014\n\004data\030\001 "
      "\002(\014\022\013\n\003url\030\002 \002(\t\022\014\n\004hash\030\003 \001(\020\0229\n\014previe"
      "w_info\030\004 \001(\0132#.image_match_indexer.pb.Pr"
      "eviewInfo\022\030\n\020porn_probability\030\005 \001(\002\"\356\002\n\t"
      "EmbedData\022\020\n\010image_id\030\001 \002(\020\022\014\n\004hash\030\002 \001("
      "\020\022\030\n\020porn_probability\030\006 \001(\002\022E\n\roriginal_"
      "info\030\003 \001(\0132..image_match_indexer.pb.Embe"
      "dData.OriginalInfo\022J\n\020annoy_index_meta\030\004"
      " \001(\01320.image_match_indexer.pb.EmbedData."
      "AnnoyIndexMeta\0229\n\014preview_info\030\005 \001(\0132#.i"
      "mage_match_indexer.pb.PreviewInfo\032\033\n\014Ori"
      "ginalInfo\022\013\n\003url\030\001 \002(\t\032<\n\016AnnoyIndexMeta"
      "\022\024\n\014annoy_idx_id\030\001 \002(\r\022\024\n\014annoy_img_id\030\002"
      " \002(\rB\027B\022ImageMatchMetaData\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image_match_indexer.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_image_5fblobs_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::parsing::img::protobuf_image_5fdefs_2eproto::AddDescriptors();
  ::qembedder::pb::protobuf_qembedder_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_image_5fmatch_5findexer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpItem_Duplicate::kFullUrlFieldNumber;
const int DumpItem_Duplicate::kPornProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpItem_Duplicate::DumpItem_Duplicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.DumpItem.Duplicate)
}
DumpItem_Duplicate::DumpItem_Duplicate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.DumpItem.Duplicate)
}
DumpItem_Duplicate::DumpItem_Duplicate(const DumpItem_Duplicate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url(),
      GetArenaNoVirtual());
  }
  porn_probability_ = from.porn_probability_;
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.DumpItem.Duplicate)
}

void DumpItem_Duplicate::SharedCtor() {
  _cached_size_ = 0;
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porn_probability_ = 0;
}

DumpItem_Duplicate::~DumpItem_Duplicate() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.DumpItem.Duplicate)
  SharedDtor();
}

void DumpItem_Duplicate::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  full_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DumpItem_Duplicate::ArenaDtor(void* object) {
  DumpItem_Duplicate* _this = reinterpret_cast< DumpItem_Duplicate* >(object);
  (void)_this;
}
void DumpItem_Duplicate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DumpItem_Duplicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpItem_Duplicate::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpItem_Duplicate& DumpItem_Duplicate::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpItem_Duplicate* DumpItem_Duplicate::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DumpItem_Duplicate>(arena);
}

void DumpItem_Duplicate::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.DumpItem.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_full_url()) {
    GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  porn_probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpItem_Duplicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.DumpItem.Duplicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string full_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.DumpItem.Duplicate.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.DumpItem.Duplicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.DumpItem.Duplicate)
  return false;
#undef DO_
}

void DumpItem_Duplicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.DumpItem.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.Duplicate.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_url(), output);
  }

  // optional float porn_probability = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->porn_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.DumpItem.Duplicate)
}

::google::protobuf::uint8* DumpItem_Duplicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.DumpItem.Duplicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.Duplicate.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_url(), target);
  }

  // optional float porn_probability = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->porn_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.DumpItem.Duplicate)
  return target;
}

size_t DumpItem_Duplicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.DumpItem.Duplicate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string full_url = 1;
    if (has_full_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_url());
    }

    // optional float porn_probability = 2;
    if (has_porn_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpItem_Duplicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.DumpItem.Duplicate)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpItem_Duplicate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpItem_Duplicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.DumpItem.Duplicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.DumpItem.Duplicate)
    MergeFrom(*source);
  }
}

void DumpItem_Duplicate::MergeFrom(const DumpItem_Duplicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.DumpItem.Duplicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_full_url(from.full_url());
    }
    if (cached_has_bits & 0x00000002u) {
      porn_probability_ = from.porn_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpItem_Duplicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.DumpItem.Duplicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpItem_Duplicate::CopyFrom(const DumpItem_Duplicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.DumpItem.Duplicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpItem_Duplicate::IsInitialized() const {
  return true;
}

void DumpItem_Duplicate::Swap(DumpItem_Duplicate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DumpItem_Duplicate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DumpItem_Duplicate::UnsafeArenaSwap(DumpItem_Duplicate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DumpItem_Duplicate::InternalSwap(DumpItem_Duplicate* other) {
  using std::swap;
  full_url_.Swap(&other->full_url_);
  swap(porn_probability_, other->porn_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpItem_Duplicate::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpItem_Duplicate

// optional string full_url = 1;
bool DumpItem_Duplicate::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpItem_Duplicate::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpItem_Duplicate::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpItem_Duplicate::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
const ::std::string& DumpItem_Duplicate::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  return full_url_.Get();
}
void DumpItem_Duplicate::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
#if LANG_CXX11
void DumpItem_Duplicate::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
#endif
void DumpItem_Duplicate::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
void DumpItem_Duplicate::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
::std::string* DumpItem_Duplicate::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_Duplicate::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_Duplicate::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DumpItem_Duplicate::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
void DumpItem_Duplicate::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}

// optional float porn_probability = 2;
bool DumpItem_Duplicate::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpItem_Duplicate::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpItem_Duplicate::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpItem_Duplicate::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
float DumpItem_Duplicate::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.Duplicate.porn_probability)
  return porn_probability_;
}
void DumpItem_Duplicate::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.Duplicate.porn_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpItem_PageReference::kFullUrlFieldNumber;
const int DumpItem_PageReference::kSnippetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpItem_PageReference::DumpItem_PageReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.DumpItem.PageReference)
}
DumpItem_PageReference::DumpItem_PageReference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.DumpItem.PageReference)
}
DumpItem_PageReference::DumpItem_PageReference(const DumpItem_PageReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url(),
      GetArenaNoVirtual());
  }
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.DumpItem.PageReference)
}

void DumpItem_PageReference::SharedCtor() {
  _cached_size_ = 0;
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DumpItem_PageReference::~DumpItem_PageReference() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.DumpItem.PageReference)
  SharedDtor();
}

void DumpItem_PageReference::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  full_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  snippet_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DumpItem_PageReference::ArenaDtor(void* object) {
  DumpItem_PageReference* _this = reinterpret_cast< DumpItem_PageReference* >(object);
  (void)_this;
}
void DumpItem_PageReference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DumpItem_PageReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpItem_PageReference::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpItem_PageReference& DumpItem_PageReference::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpItem_PageReference* DumpItem_PageReference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DumpItem_PageReference>(arena);
}

void DumpItem_PageReference::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.DumpItem.PageReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      snippet_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpItem_PageReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.DumpItem.PageReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.DumpItem.PageReference.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.DumpItem.PageReference.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.DumpItem.PageReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.DumpItem.PageReference)
  return false;
#undef DO_
}

void DumpItem_PageReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.DumpItem.PageReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.PageReference.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_url(), output);
  }

  // optional string snippet = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.PageReference.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snippet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.DumpItem.PageReference)
}

::google::protobuf::uint8* DumpItem_PageReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.DumpItem.PageReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string full_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.PageReference.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_url(), target);
  }

  // optional string snippet = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.PageReference.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snippet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.DumpItem.PageReference)
  return target;
}

size_t DumpItem_PageReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.DumpItem.PageReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string full_url = 1;
  if (has_full_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_url());
  }
  // optional string snippet = 2;
  if (has_snippet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpItem_PageReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.DumpItem.PageReference)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpItem_PageReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpItem_PageReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.DumpItem.PageReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.DumpItem.PageReference)
    MergeFrom(*source);
  }
}

void DumpItem_PageReference::MergeFrom(const DumpItem_PageReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.DumpItem.PageReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_full_url(from.full_url());
    }
    if (cached_has_bits & 0x00000002u) {
      set_snippet(from.snippet());
    }
  }
}

void DumpItem_PageReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.DumpItem.PageReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpItem_PageReference::CopyFrom(const DumpItem_PageReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.DumpItem.PageReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpItem_PageReference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DumpItem_PageReference::Swap(DumpItem_PageReference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DumpItem_PageReference* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DumpItem_PageReference::UnsafeArenaSwap(DumpItem_PageReference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DumpItem_PageReference::InternalSwap(DumpItem_PageReference* other) {
  using std::swap;
  full_url_.Swap(&other->full_url_);
  snippet_.Swap(&other->snippet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpItem_PageReference::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpItem_PageReference

// required string full_url = 1;
bool DumpItem_PageReference::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpItem_PageReference::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpItem_PageReference::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpItem_PageReference::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
const ::std::string& DumpItem_PageReference::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.PageReference.full_url)
  return full_url_.Get();
}
void DumpItem_PageReference::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
#if LANG_CXX11
void DumpItem_PageReference::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
#endif
void DumpItem_PageReference::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
void DumpItem_PageReference::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
::std::string* DumpItem_PageReference::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.PageReference.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_PageReference::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.PageReference.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_PageReference::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.PageReference.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DumpItem_PageReference::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
void DumpItem_PageReference::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.PageReference.full_url)
}

// optional string snippet = 2;
bool DumpItem_PageReference::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpItem_PageReference::set_has_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpItem_PageReference::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpItem_PageReference::clear_snippet() {
  snippet_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_snippet();
}
const ::std::string& DumpItem_PageReference::snippet() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.PageReference.snippet)
  return snippet_.Get();
}
void DumpItem_PageReference::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
#if LANG_CXX11
void DumpItem_PageReference::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
#endif
void DumpItem_PageReference::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
void DumpItem_PageReference::set_snippet(const char* value,
    size_t size) {
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
::std::string* DumpItem_PageReference::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.PageReference.snippet)
  return snippet_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_PageReference::release_snippet() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.PageReference.snippet)
  clear_has_snippet();
  return snippet_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem_PageReference::unsafe_arena_release_snippet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.PageReference.snippet)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_snippet();
  return snippet_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DumpItem_PageReference::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
void DumpItem_PageReference::unsafe_arena_set_allocated_snippet(
    ::std::string* snippet) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snippet, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.PageReference.snippet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DumpItem::_slow_mutable_image_properties() {
  image_properties_ = ::google::protobuf::Arena::Create< ::ru::mail::go::webbase::blobs::ImageProps >(
      GetArenaNoVirtual());
}
::ru::mail::go::webbase::blobs::ImageProps* DumpItem::_slow_release_image_properties() {
  if (image_properties_ == NULL) {
    return NULL;
  } else {
    ::ru::mail::go::webbase::blobs::ImageProps* temp = new ::ru::mail::go::webbase::blobs::ImageProps(*image_properties_);
    image_properties_ = NULL;
    return temp;
  }
}
::ru::mail::go::webbase::blobs::ImageProps* DumpItem::unsafe_arena_release_image_properties() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.image_properties)
  clear_has_image_properties();
  ::ru::mail::go::webbase::blobs::ImageProps* temp = image_properties_;
  image_properties_ = NULL;
  return temp;
}
void DumpItem::unsafe_arena_set_allocated_image_properties(
    ::ru::mail::go::webbase::blobs::ImageProps* image_properties) {
  if (GetArenaNoVirtual() == NULL) {
    delete image_properties_;
  }
  image_properties_ = image_properties;
  if (image_properties) {
    set_has_image_properties();
  } else {
    clear_has_image_properties();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.image_properties)
}
void DumpItem::_slow_mutable_image_thumbnail() {
  image_thumbnail_ = ::google::protobuf::Arena::Create< ::ru::mail::go::webbase::parsing::img::Thumb >(
      GetArenaNoVirtual());
}
::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::_slow_release_image_thumbnail() {
  if (image_thumbnail_ == NULL) {
    return NULL;
  } else {
    ::ru::mail::go::webbase::parsing::img::Thumb* temp = new ::ru::mail::go::webbase::parsing::img::Thumb(*image_thumbnail_);
    image_thumbnail_ = NULL;
    return temp;
  }
}
::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::unsafe_arena_release_image_thumbnail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.image_thumbnail)
  clear_has_image_thumbnail();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = image_thumbnail_;
  image_thumbnail_ = NULL;
  return temp;
}
void DumpItem::unsafe_arena_set_allocated_image_thumbnail(
    ::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail) {
  if (GetArenaNoVirtual() == NULL) {
    delete image_thumbnail_;
  }
  image_thumbnail_ = image_thumbnail;
  if (image_thumbnail) {
    set_has_image_thumbnail();
  } else {
    clear_has_image_thumbnail();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.image_thumbnail)
}
void DumpItem::_slow_mutable_image_embeddings() {
  image_embeddings_ = ::google::protobuf::Arena::Create< ::qembedder::pb::Embedding >(
      GetArenaNoVirtual());
}
::qembedder::pb::Embedding* DumpItem::_slow_release_image_embeddings() {
  if (image_embeddings_ == NULL) {
    return NULL;
  } else {
    ::qembedder::pb::Embedding* temp = new ::qembedder::pb::Embedding(*image_embeddings_);
    image_embeddings_ = NULL;
    return temp;
  }
}
::qembedder::pb::Embedding* DumpItem::unsafe_arena_release_image_embeddings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.image_embeddings)
  clear_has_image_embeddings();
  ::qembedder::pb::Embedding* temp = image_embeddings_;
  image_embeddings_ = NULL;
  return temp;
}
void DumpItem::unsafe_arena_set_allocated_image_embeddings(
    ::qembedder::pb::Embedding* image_embeddings) {
  if (GetArenaNoVirtual() == NULL) {
    delete image_embeddings_;
  }
  image_embeddings_ = image_embeddings;
  if (image_embeddings) {
    set_has_image_embeddings();
  } else {
    clear_has_image_embeddings();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.image_embeddings)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpItem::kWebpagesIIKeyFieldNumber;
const int DumpItem::kFullUrlFieldNumber;
const int DumpItem::kClicksCountFieldNumber;
const int DumpItem::kImpressionsCountFieldNumber;
const int DumpItem::kImagePropertiesFieldNumber;
const int DumpItem::kImageThumbnailFieldNumber;
const int DumpItem::kPutImageEmbeddingsRequiredFieldNumber;
const int DumpItem::kImageEmbeddingsFieldNumber;
const int DumpItem::kPornProbabilityFieldNumber;
const int DumpItem::kMinPornProbabilityFieldNumber;
const int DumpItem::kMaxPornProbabilityFieldNumber;
const int DumpItem::kPutPornProbabilityRequiredFieldNumber;
const int DumpItem::kDuplicatesFieldNumber;
const int DumpItem::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpItem::DumpItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.DumpItem)
}
DumpItem::DumpItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  duplicates_(arena),
  ref_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.DumpItem)
}
DumpItem::DumpItem(const DumpItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      duplicates_(from.duplicates_),
      ref_(from.ref_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webpagesii_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webpagesii_key()) {
    webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webpagesii_key(),
      GetArenaNoVirtual());
  }
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_url()) {
    full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_url(),
      GetArenaNoVirtual());
  }
  if (from.has_image_properties()) {
    image_properties_ = new ::ru::mail::go::webbase::blobs::ImageProps(*from.image_properties_);
  } else {
    image_properties_ = NULL;
  }
  if (from.has_image_thumbnail()) {
    image_thumbnail_ = new ::ru::mail::go::webbase::parsing::img::Thumb(*from.image_thumbnail_);
  } else {
    image_thumbnail_ = NULL;
  }
  if (from.has_image_embeddings()) {
    image_embeddings_ = new ::qembedder::pb::Embedding(*from.image_embeddings_);
  } else {
    image_embeddings_ = NULL;
  }
  ::memcpy(&clicks_count_, &from.clicks_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_porn_probability_) -
    reinterpret_cast<char*>(&clicks_count_)) + sizeof(max_porn_probability_));
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.DumpItem)
}

void DumpItem::SharedCtor() {
  _cached_size_ = 0;
  webpagesii_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_porn_probability_) -
      reinterpret_cast<char*>(&image_properties_)) + sizeof(max_porn_probability_));
}

DumpItem::~DumpItem() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.DumpItem)
  SharedDtor();
}

void DumpItem::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  webpagesii_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  full_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete image_properties_;
  if (this != internal_default_instance()) delete image_thumbnail_;
  if (this != internal_default_instance()) delete image_embeddings_;
}

void DumpItem::ArenaDtor(void* object) {
  DumpItem* _this = reinterpret_cast< DumpItem* >(object);
  (void)_this;
}
void DumpItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DumpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpItem::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpItem& DumpItem::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpItem* DumpItem::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DumpItem>(arena);
}

void DumpItem::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.DumpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duplicates_.Clear();
  ref_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!webpagesii_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      webpagesii_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!full_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_properties_ != NULL);
      image_properties_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(image_thumbnail_ != NULL);
      image_thumbnail_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(image_embeddings_ != NULL);
      image_embeddings_->::qembedder::pb::Embedding::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&clicks_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porn_probability_) -
        reinterpret_cast<char*>(&clicks_count_)) + sizeof(porn_probability_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&min_porn_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_porn_probability_) -
        reinterpret_cast<char*>(&min_porn_probability_)) + sizeof(max_porn_probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.DumpItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes webpagesII_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_webpagesii_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clicks_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clicks_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clicks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 impressions_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_impressions_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &impressions_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_thumbnail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string full_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_url().data(), static_cast<int>(this->full_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.DumpItem.full_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qembedder.pb.Embedding image_embeddings = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_embeddings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool put_image_embeddings_required = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_put_image_embeddings_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_image_embeddings_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_probability = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_porn_probability = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_min_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_porn_probability = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_max_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool put_porn_probability_required = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_put_porn_probability_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &put_porn_probability_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.DumpItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.DumpItem)
  return false;
#undef DO_
}

void DumpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.DumpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes webpagesII_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->webpagesii_key(), output);
  }

  // optional uint32 clicks_count = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clicks_count(), output);
  }

  // optional uint32 impressions_count = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->impressions_count(), output);
  }

  // optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->image_properties_, output);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->image_thumbnail_, output);
  }

  // optional string full_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.full_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->full_url(), output);
  }

  // optional .qembedder.pb.Embedding image_embeddings = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->image_embeddings_, output);
  }

  // optional bool put_image_embeddings_required = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->put_image_embeddings_required(), output);
  }

  // optional float porn_probability = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->porn_probability(), output);
  }

  // optional float min_porn_probability = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->min_porn_probability(), output);
  }

  // optional float max_porn_probability = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->max_porn_probability(), output);
  }

  // repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->duplicates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->duplicates(static_cast<int>(i)), output);
  }

  // optional bool put_porn_probability_required = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->put_porn_probability_required(), output);
  }

  // repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ref_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->ref(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.DumpItem)
}

::google::protobuf::uint8* DumpItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.DumpItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes webpagesII_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->webpagesii_key(), target);
  }

  // optional uint32 clicks_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clicks_count(), target);
  }

  // optional uint32 impressions_count = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->impressions_count(), target);
  }

  // optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->image_properties_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->image_thumbnail_, deterministic, target);
  }

  // optional string full_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_url().data(), static_cast<int>(this->full_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.DumpItem.full_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->full_url(), target);
  }

  // optional .qembedder.pb.Embedding image_embeddings = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->image_embeddings_, deterministic, target);
  }

  // optional bool put_image_embeddings_required = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->put_image_embeddings_required(), target);
  }

  // optional float porn_probability = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->porn_probability(), target);
  }

  // optional float min_porn_probability = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->min_porn_probability(), target);
  }

  // optional float max_porn_probability = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->max_porn_probability(), target);
  }

  // repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->duplicates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->duplicates(static_cast<int>(i)), deterministic, target);
  }

  // optional bool put_porn_probability_required = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->put_porn_probability_required(), target);
  }

  // repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ref_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->ref(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.DumpItem)
  return target;
}

size_t DumpItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.DumpItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->duplicates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duplicates(static_cast<int>(i)));
    }
  }

  // repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->ref_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes webpagesII_key = 1;
    if (has_webpagesii_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->webpagesii_key());
    }

    // optional string full_url = 8;
    if (has_full_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_url());
    }

    // optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
    if (has_image_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_properties_);
    }

    // optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
    if (has_image_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_thumbnail_);
    }

    // optional .qembedder.pb.Embedding image_embeddings = 9;
    if (has_image_embeddings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_embeddings_);
    }

    // optional uint32 clicks_count = 2;
    if (has_clicks_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clicks_count());
    }

    // optional uint32 impressions_count = 3;
    if (has_impressions_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->impressions_count());
    }

    // optional float porn_probability = 11;
    if (has_porn_probability()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float min_porn_probability = 12;
    if (has_min_porn_probability()) {
      total_size += 1 + 4;
    }

    // optional bool put_image_embeddings_required = 10;
    if (has_put_image_embeddings_required()) {
      total_size += 1 + 1;
    }

    // optional bool put_porn_probability_required = 15;
    if (has_put_porn_probability_required()) {
      total_size += 1 + 1;
    }

    // optional float max_porn_probability = 13;
    if (has_max_porn_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.DumpItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.DumpItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.DumpItem)
    MergeFrom(*source);
  }
}

void DumpItem::MergeFrom(const DumpItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.DumpItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  duplicates_.MergeFrom(from.duplicates_);
  ref_.MergeFrom(from.ref_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_webpagesii_key(from.webpagesii_key());
    }
    if (cached_has_bits & 0x00000002u) {
      set_full_url(from.full_url());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image_properties()->::ru::mail::go::webbase::blobs::ImageProps::MergeFrom(from.image_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_image_thumbnail()->::ru::mail::go::webbase::parsing::img::Thumb::MergeFrom(from.image_thumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_image_embeddings()->::qembedder::pb::Embedding::MergeFrom(from.image_embeddings());
    }
    if (cached_has_bits & 0x00000020u) {
      clicks_count_ = from.clicks_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      impressions_count_ = from.impressions_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      porn_probability_ = from.porn_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      min_porn_probability_ = from.min_porn_probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      put_image_embeddings_required_ = from.put_image_embeddings_required_;
    }
    if (cached_has_bits & 0x00000400u) {
      put_porn_probability_required_ = from.put_porn_probability_required_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_porn_probability_ = from.max_porn_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.DumpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpItem::CopyFrom(const DumpItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.DumpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpItem::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->ref())) return false;
  if (has_image_properties()) {
    if (!this->image_properties_->IsInitialized()) return false;
  }
  if (has_image_thumbnail()) {
    if (!this->image_thumbnail_->IsInitialized()) return false;
  }
  if (has_image_embeddings()) {
    if (!this->image_embeddings_->IsInitialized()) return false;
  }
  return true;
}

void DumpItem::Swap(DumpItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DumpItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DumpItem::UnsafeArenaSwap(DumpItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DumpItem::InternalSwap(DumpItem* other) {
  using std::swap;
  duplicates_.InternalSwap(&other->duplicates_);
  ref_.InternalSwap(&other->ref_);
  webpagesii_key_.Swap(&other->webpagesii_key_);
  full_url_.Swap(&other->full_url_);
  swap(image_properties_, other->image_properties_);
  swap(image_thumbnail_, other->image_thumbnail_);
  swap(image_embeddings_, other->image_embeddings_);
  swap(clicks_count_, other->clicks_count_);
  swap(impressions_count_, other->impressions_count_);
  swap(porn_probability_, other->porn_probability_);
  swap(min_porn_probability_, other->min_porn_probability_);
  swap(put_image_embeddings_required_, other->put_image_embeddings_required_);
  swap(put_porn_probability_required_, other->put_porn_probability_required_);
  swap(max_porn_probability_, other->max_porn_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpItem::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpItem

// optional bytes webpagesII_key = 1;
bool DumpItem::has_webpagesii_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpItem::set_has_webpagesii_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpItem::clear_has_webpagesii_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpItem::clear_webpagesii_key() {
  webpagesii_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_webpagesii_key();
}
const ::std::string& DumpItem::webpagesii_key() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.webpagesII_key)
  return webpagesii_key_.Get();
}
void DumpItem::set_webpagesii_key(const ::std::string& value) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.webpagesII_key)
}
#if LANG_CXX11
void DumpItem::set_webpagesii_key(::std::string&& value) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.webpagesII_key)
}
#endif
void DumpItem::set_webpagesii_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.webpagesII_key)
}
void DumpItem::set_webpagesii_key(const void* value,
    size_t size) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.webpagesII_key)
}
::std::string* DumpItem::mutable_webpagesii_key() {
  set_has_webpagesii_key();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.webpagesII_key)
  return webpagesii_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem::release_webpagesii_key() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.webpagesII_key)
  clear_has_webpagesii_key();
  return webpagesii_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem::unsafe_arena_release_webpagesii_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.webpagesII_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_webpagesii_key();
  return webpagesii_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DumpItem::set_allocated_webpagesii_key(::std::string* webpagesii_key) {
  if (webpagesii_key != NULL) {
    set_has_webpagesii_key();
  } else {
    clear_has_webpagesii_key();
  }
  webpagesii_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webpagesii_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.webpagesII_key)
}
void DumpItem::unsafe_arena_set_allocated_webpagesii_key(
    ::std::string* webpagesii_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (webpagesii_key != NULL) {
    set_has_webpagesii_key();
  } else {
    clear_has_webpagesii_key();
  }
  webpagesii_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      webpagesii_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.webpagesII_key)
}

// optional string full_url = 8;
bool DumpItem::has_full_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpItem::set_has_full_url() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpItem::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpItem::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
const ::std::string& DumpItem::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.full_url)
  return full_url_.Get();
}
void DumpItem::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.full_url)
}
#if LANG_CXX11
void DumpItem::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.full_url)
}
#endif
void DumpItem::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.full_url)
}
void DumpItem::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.full_url)
}
::std::string* DumpItem::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DumpItem::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DumpItem::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.full_url)
}
void DumpItem::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.full_url)
}

// optional uint32 clicks_count = 2;
bool DumpItem::has_clicks_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DumpItem::set_has_clicks_count() {
  _has_bits_[0] |= 0x00000020u;
}
void DumpItem::clear_has_clicks_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void DumpItem::clear_clicks_count() {
  clicks_count_ = 0u;
  clear_has_clicks_count();
}
::google::protobuf::uint32 DumpItem::clicks_count() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.clicks_count)
  return clicks_count_;
}
void DumpItem::set_clicks_count(::google::protobuf::uint32 value) {
  set_has_clicks_count();
  clicks_count_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.clicks_count)
}

// optional uint32 impressions_count = 3;
bool DumpItem::has_impressions_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DumpItem::set_has_impressions_count() {
  _has_bits_[0] |= 0x00000040u;
}
void DumpItem::clear_has_impressions_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void DumpItem::clear_impressions_count() {
  impressions_count_ = 0u;
  clear_has_impressions_count();
}
::google::protobuf::uint32 DumpItem::impressions_count() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.impressions_count)
  return impressions_count_;
}
void DumpItem::set_impressions_count(::google::protobuf::uint32 value) {
  set_has_impressions_count();
  impressions_count_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.impressions_count)
}

// optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
bool DumpItem::has_image_properties() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DumpItem::set_has_image_properties() {
  _has_bits_[0] |= 0x00000004u;
}
void DumpItem::clear_has_image_properties() {
  _has_bits_[0] &= ~0x00000004u;
}
void DumpItem::clear_image_properties() {
  if (image_properties_ != NULL) image_properties_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
  clear_has_image_properties();
}
const ::ru::mail::go::webbase::blobs::ImageProps& DumpItem::image_properties() const {
  const ::ru::mail::go::webbase::blobs::ImageProps* p = image_properties_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_properties)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageProps*>(
      &::ru::mail::go::webbase::blobs::_ImageProps_default_instance_);
}
::ru::mail::go::webbase::blobs::ImageProps* DumpItem::mutable_image_properties() {
  set_has_image_properties();
  if (image_properties_ == NULL) {
    _slow_mutable_image_properties();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_properties)
  return image_properties_;
}
::ru::mail::go::webbase::blobs::ImageProps* DumpItem::release_image_properties() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_properties)
  clear_has_image_properties();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_properties();
  } else {
    ::ru::mail::go::webbase::blobs::ImageProps* temp = image_properties_;
    image_properties_ = NULL;
    return temp;
  }
}
 void DumpItem::set_allocated_image_properties(::ru::mail::go::webbase::blobs::ImageProps* image_properties) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_properties_;
  }
  if (image_properties != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_properties);
    }
  }
  image_properties_ = image_properties;
  if (image_properties) {
    set_has_image_properties();
  } else {
    clear_has_image_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_properties)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
bool DumpItem::has_image_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DumpItem::set_has_image_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
}
void DumpItem::clear_has_image_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
}
void DumpItem::clear_image_thumbnail() {
  if (image_thumbnail_ != NULL) image_thumbnail_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_image_thumbnail();
}
const ::ru::mail::go::webbase::parsing::img::Thumb& DumpItem::image_thumbnail() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = image_thumbnail_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_thumbnail)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::mutable_image_thumbnail() {
  set_has_image_thumbnail();
  if (image_thumbnail_ == NULL) {
    _slow_mutable_image_thumbnail();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_thumbnail)
  return image_thumbnail_;
}
::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::release_image_thumbnail() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_thumbnail)
  clear_has_image_thumbnail();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_thumbnail();
  } else {
    ::ru::mail::go::webbase::parsing::img::Thumb* temp = image_thumbnail_;
    image_thumbnail_ = NULL;
    return temp;
  }
}
 void DumpItem::set_allocated_image_thumbnail(::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_thumbnail_;
  }
  if (image_thumbnail != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_thumbnail);
    }
  }
  image_thumbnail_ = image_thumbnail;
  if (image_thumbnail) {
    set_has_image_thumbnail();
  } else {
    clear_has_image_thumbnail();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_thumbnail)
}

// optional bool put_image_embeddings_required = 10;
bool DumpItem::has_put_image_embeddings_required() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DumpItem::set_has_put_image_embeddings_required() {
  _has_bits_[0] |= 0x00000200u;
}
void DumpItem::clear_has_put_image_embeddings_required() {
  _has_bits_[0] &= ~0x00000200u;
}
void DumpItem::clear_put_image_embeddings_required() {
  put_image_embeddings_required_ = false;
  clear_has_put_image_embeddings_required();
}
bool DumpItem::put_image_embeddings_required() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.put_image_embeddings_required)
  return put_image_embeddings_required_;
}
void DumpItem::set_put_image_embeddings_required(bool value) {
  set_has_put_image_embeddings_required();
  put_image_embeddings_required_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.put_image_embeddings_required)
}

// optional .qembedder.pb.Embedding image_embeddings = 9;
bool DumpItem::has_image_embeddings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DumpItem::set_has_image_embeddings() {
  _has_bits_[0] |= 0x00000010u;
}
void DumpItem::clear_has_image_embeddings() {
  _has_bits_[0] &= ~0x00000010u;
}
void DumpItem::clear_image_embeddings() {
  if (image_embeddings_ != NULL) image_embeddings_->::qembedder::pb::Embedding::Clear();
  clear_has_image_embeddings();
}
const ::qembedder::pb::Embedding& DumpItem::image_embeddings() const {
  const ::qembedder::pb::Embedding* p = image_embeddings_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_embeddings)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
::qembedder::pb::Embedding* DumpItem::mutable_image_embeddings() {
  set_has_image_embeddings();
  if (image_embeddings_ == NULL) {
    _slow_mutable_image_embeddings();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_embeddings)
  return image_embeddings_;
}
::qembedder::pb::Embedding* DumpItem::release_image_embeddings() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_embeddings)
  clear_has_image_embeddings();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_embeddings();
  } else {
    ::qembedder::pb::Embedding* temp = image_embeddings_;
    image_embeddings_ = NULL;
    return temp;
  }
}
 void DumpItem::set_allocated_image_embeddings(::qembedder::pb::Embedding* image_embeddings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_embeddings_;
  }
  if (image_embeddings != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_embeddings);
    }
  }
  image_embeddings_ = image_embeddings;
  if (image_embeddings) {
    set_has_image_embeddings();
  } else {
    clear_has_image_embeddings();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_embeddings)
}

// optional float porn_probability = 11;
bool DumpItem::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DumpItem::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000080u;
}
void DumpItem::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
void DumpItem::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
float DumpItem::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.porn_probability)
  return porn_probability_;
}
void DumpItem::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.porn_probability)
}

// optional float min_porn_probability = 12;
bool DumpItem::has_min_porn_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DumpItem::set_has_min_porn_probability() {
  _has_bits_[0] |= 0x00000100u;
}
void DumpItem::clear_has_min_porn_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
void DumpItem::clear_min_porn_probability() {
  min_porn_probability_ = 0;
  clear_has_min_porn_probability();
}
float DumpItem::min_porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.min_porn_probability)
  return min_porn_probability_;
}
void DumpItem::set_min_porn_probability(float value) {
  set_has_min_porn_probability();
  min_porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.min_porn_probability)
}

// optional float max_porn_probability = 13;
bool DumpItem::has_max_porn_probability() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DumpItem::set_has_max_porn_probability() {
  _has_bits_[0] |= 0x00000800u;
}
void DumpItem::clear_has_max_porn_probability() {
  _has_bits_[0] &= ~0x00000800u;
}
void DumpItem::clear_max_porn_probability() {
  max_porn_probability_ = 0;
  clear_has_max_porn_probability();
}
float DumpItem::max_porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.max_porn_probability)
  return max_porn_probability_;
}
void DumpItem::set_max_porn_probability(float value) {
  set_has_max_porn_probability();
  max_porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.max_porn_probability)
}

// optional bool put_porn_probability_required = 15;
bool DumpItem::has_put_porn_probability_required() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DumpItem::set_has_put_porn_probability_required() {
  _has_bits_[0] |= 0x00000400u;
}
void DumpItem::clear_has_put_porn_probability_required() {
  _has_bits_[0] &= ~0x00000400u;
}
void DumpItem::clear_put_porn_probability_required() {
  put_porn_probability_required_ = false;
  clear_has_put_porn_probability_required();
}
bool DumpItem::put_porn_probability_required() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.put_porn_probability_required)
  return put_porn_probability_required_;
}
void DumpItem::set_put_porn_probability_required(bool value) {
  set_has_put_porn_probability_required();
  put_porn_probability_required_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.put_porn_probability_required)
}

// repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
int DumpItem::duplicates_size() const {
  return duplicates_.size();
}
void DumpItem::clear_duplicates() {
  duplicates_.Clear();
}
const ::image_match_indexer::pb::DumpItem_Duplicate& DumpItem::duplicates(int index) const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Get(index);
}
::image_match_indexer::pb::DumpItem_Duplicate* DumpItem::mutable_duplicates(int index) {
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Mutable(index);
}
::image_match_indexer::pb::DumpItem_Duplicate* DumpItem::add_duplicates() {
  // @@protoc_insertion_point(field_add:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Add();
}
::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >*
DumpItem::mutable_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:image_match_indexer.pb.DumpItem.duplicates)
  return &duplicates_;
}
const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >&
DumpItem::duplicates() const {
  // @@protoc_insertion_point(field_list:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_;
}

// repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
int DumpItem::ref_size() const {
  return ref_.size();
}
void DumpItem::clear_ref() {
  ref_.Clear();
}
const ::image_match_indexer::pb::DumpItem_PageReference& DumpItem::ref(int index) const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.ref)
  return ref_.Get(index);
}
::image_match_indexer::pb::DumpItem_PageReference* DumpItem::mutable_ref(int index) {
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.ref)
  return ref_.Mutable(index);
}
::image_match_indexer::pb::DumpItem_PageReference* DumpItem::add_ref() {
  // @@protoc_insertion_point(field_add:image_match_indexer.pb.DumpItem.ref)
  return ref_.Add();
}
::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >*
DumpItem::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:image_match_indexer.pb.DumpItem.ref)
  return &ref_;
}
const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >&
DumpItem::ref() const {
  // @@protoc_insertion_point(field_list:image_match_indexer.pb.DumpItem.ref)
  return ref_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreviewInfo::kPreviewKeyFieldNumber;
const int PreviewInfo::kPreviewDbNumFieldNumber;
const int PreviewInfo::kPreviewHeightFieldNumber;
const int PreviewInfo::kPreviewWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreviewInfo::PreviewInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.PreviewInfo)
}
PreviewInfo::PreviewInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.PreviewInfo)
}
PreviewInfo::PreviewInfo(const PreviewInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preview_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_key()) {
    preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_key(),
      GetArenaNoVirtual());
  }
  preview_db_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_db_num()) {
    preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_db_num(),
      GetArenaNoVirtual());
  }
  ::memcpy(&preview_height_, &from.preview_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_width_) -
    reinterpret_cast<char*>(&preview_height_)) + sizeof(preview_width_));
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.PreviewInfo)
}

void PreviewInfo::SharedCtor() {
  _cached_size_ = 0;
  preview_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_db_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preview_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_width_) -
      reinterpret_cast<char*>(&preview_height_)) + sizeof(preview_width_));
}

PreviewInfo::~PreviewInfo() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.PreviewInfo)
  SharedDtor();
}

void PreviewInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  preview_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  preview_db_num_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PreviewInfo::ArenaDtor(void* object) {
  PreviewInfo* _this = reinterpret_cast< PreviewInfo* >(object);
  (void)_this;
}
void PreviewInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PreviewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreviewInfo::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreviewInfo& PreviewInfo::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreviewInfo* PreviewInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PreviewInfo>(arena);
}

void PreviewInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.PreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!preview_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      preview_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!preview_db_num_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      preview_db_num_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&preview_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_width_) -
        reinterpret_cast<char*>(&preview_height_)) + sizeof(preview_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreviewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.PreviewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string preview_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_key().data(), static_cast<int>(this->preview_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.PreviewInfo.preview_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string preview_db_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_db_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_db_num().data(), static_cast<int>(this->preview_db_num().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.PreviewInfo.preview_db_num");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 preview_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_preview_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &preview_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 preview_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_preview_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &preview_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.PreviewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.PreviewInfo)
  return false;
#undef DO_
}

void PreviewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.PreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string preview_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_key().data(), static_cast<int>(this->preview_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.PreviewInfo.preview_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->preview_key(), output);
  }

  // required string preview_db_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_db_num().data(), static_cast<int>(this->preview_db_num().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.PreviewInfo.preview_db_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->preview_db_num(), output);
  }

  // optional fixed32 preview_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->preview_height(), output);
  }

  // optional fixed32 preview_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->preview_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.PreviewInfo)
}

::google::protobuf::uint8* PreviewInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.PreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string preview_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_key().data(), static_cast<int>(this->preview_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.PreviewInfo.preview_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preview_key(), target);
  }

  // required string preview_db_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_db_num().data(), static_cast<int>(this->preview_db_num().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.PreviewInfo.preview_db_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->preview_db_num(), target);
  }

  // optional fixed32 preview_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->preview_height(), target);
  }

  // optional fixed32 preview_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->preview_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.PreviewInfo)
  return target;
}

size_t PreviewInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:image_match_indexer.pb.PreviewInfo)
  size_t total_size = 0;

  if (has_preview_key()) {
    // required string preview_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview_key());
  }

  if (has_preview_db_num()) {
    // required string preview_db_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview_db_num());
  }

  return total_size;
}
size_t PreviewInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.PreviewInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string preview_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview_key());

    // required string preview_db_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->preview_db_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional fixed32 preview_height = 3;
    if (has_preview_height()) {
      total_size += 1 + 4;
    }

    // optional fixed32 preview_width = 4;
    if (has_preview_width()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreviewInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.PreviewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreviewInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.PreviewInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.PreviewInfo)
    MergeFrom(*source);
  }
}

void PreviewInfo::MergeFrom(const PreviewInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.PreviewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_preview_key(from.preview_key());
    }
    if (cached_has_bits & 0x00000002u) {
      set_preview_db_num(from.preview_db_num());
    }
    if (cached_has_bits & 0x00000004u) {
      preview_height_ = from.preview_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_width_ = from.preview_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PreviewInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.PreviewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewInfo::CopyFrom(const PreviewInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.PreviewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PreviewInfo::Swap(PreviewInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PreviewInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PreviewInfo::UnsafeArenaSwap(PreviewInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PreviewInfo::InternalSwap(PreviewInfo* other) {
  using std::swap;
  preview_key_.Swap(&other->preview_key_);
  preview_db_num_.Swap(&other->preview_db_num_);
  swap(preview_height_, other->preview_height_);
  swap(preview_width_, other->preview_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreviewInfo::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreviewInfo

// required string preview_key = 1;
bool PreviewInfo::has_preview_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PreviewInfo::set_has_preview_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PreviewInfo::clear_has_preview_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PreviewInfo::clear_preview_key() {
  preview_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_preview_key();
}
const ::std::string& PreviewInfo::preview_key() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_key)
  return preview_key_.Get();
}
void PreviewInfo::set_preview_key(const ::std::string& value) {
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_key)
}
#if LANG_CXX11
void PreviewInfo::set_preview_key(::std::string&& value) {
  set_has_preview_key();
  preview_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.PreviewInfo.preview_key)
}
#endif
void PreviewInfo::set_preview_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.PreviewInfo.preview_key)
}
void PreviewInfo::set_preview_key(const char* value,
    size_t size) {
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.PreviewInfo.preview_key)
}
::std::string* PreviewInfo::mutable_preview_key() {
  set_has_preview_key();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.PreviewInfo.preview_key)
  return preview_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PreviewInfo::release_preview_key() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.PreviewInfo.preview_key)
  clear_has_preview_key();
  return preview_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PreviewInfo::unsafe_arena_release_preview_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.PreviewInfo.preview_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_preview_key();
  return preview_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PreviewInfo::set_allocated_preview_key(::std::string* preview_key) {
  if (preview_key != NULL) {
    set_has_preview_key();
  } else {
    clear_has_preview_key();
  }
  preview_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.PreviewInfo.preview_key)
}
void PreviewInfo::unsafe_arena_set_allocated_preview_key(
    ::std::string* preview_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (preview_key != NULL) {
    set_has_preview_key();
  } else {
    clear_has_preview_key();
  }
  preview_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      preview_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.PreviewInfo.preview_key)
}

// required string preview_db_num = 2;
bool PreviewInfo::has_preview_db_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PreviewInfo::set_has_preview_db_num() {
  _has_bits_[0] |= 0x00000002u;
}
void PreviewInfo::clear_has_preview_db_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void PreviewInfo::clear_preview_db_num() {
  preview_db_num_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_preview_db_num();
}
const ::std::string& PreviewInfo::preview_db_num() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_db_num)
  return preview_db_num_.Get();
}
void PreviewInfo::set_preview_db_num(const ::std::string& value) {
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
#if LANG_CXX11
void PreviewInfo::set_preview_db_num(::std::string&& value) {
  set_has_preview_db_num();
  preview_db_num_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
#endif
void PreviewInfo::set_preview_db_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
void PreviewInfo::set_preview_db_num(const char* value,
    size_t size) {
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
::std::string* PreviewInfo::mutable_preview_db_num() {
  set_has_preview_db_num();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.PreviewInfo.preview_db_num)
  return preview_db_num_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PreviewInfo::release_preview_db_num() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.PreviewInfo.preview_db_num)
  clear_has_preview_db_num();
  return preview_db_num_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PreviewInfo::unsafe_arena_release_preview_db_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.PreviewInfo.preview_db_num)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_preview_db_num();
  return preview_db_num_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PreviewInfo::set_allocated_preview_db_num(::std::string* preview_db_num) {
  if (preview_db_num != NULL) {
    set_has_preview_db_num();
  } else {
    clear_has_preview_db_num();
  }
  preview_db_num_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_db_num,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
void PreviewInfo::unsafe_arena_set_allocated_preview_db_num(
    ::std::string* preview_db_num) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (preview_db_num != NULL) {
    set_has_preview_db_num();
  } else {
    clear_has_preview_db_num();
  }
  preview_db_num_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      preview_db_num, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.PreviewInfo.preview_db_num)
}

// optional fixed32 preview_height = 3;
bool PreviewInfo::has_preview_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PreviewInfo::set_has_preview_height() {
  _has_bits_[0] |= 0x00000004u;
}
void PreviewInfo::clear_has_preview_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void PreviewInfo::clear_preview_height() {
  preview_height_ = 0u;
  clear_has_preview_height();
}
::google::protobuf::uint32 PreviewInfo::preview_height() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_height)
  return preview_height_;
}
void PreviewInfo::set_preview_height(::google::protobuf::uint32 value) {
  set_has_preview_height();
  preview_height_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_height)
}

// optional fixed32 preview_width = 4;
bool PreviewInfo::has_preview_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PreviewInfo::set_has_preview_width() {
  _has_bits_[0] |= 0x00000008u;
}
void PreviewInfo::clear_has_preview_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void PreviewInfo::clear_preview_width() {
  preview_width_ = 0u;
  clear_has_preview_width();
}
::google::protobuf::uint32 PreviewInfo::preview_width() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_width)
  return preview_width_;
}
void PreviewInfo::set_preview_width(::google::protobuf::uint32 value) {
  set_has_preview_width();
  preview_width_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedderOut::kDataFieldNumber;
const int EmbedderOut::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedderOut::EmbedderOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.EmbedderOut)
}
EmbedderOut::EmbedderOut(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.EmbedderOut)
}
EmbedderOut::EmbedderOut(const EmbedderOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.EmbedderOut)
}

void EmbedderOut::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmbedderOut::~EmbedderOut() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.EmbedderOut)
  SharedDtor();
}

void EmbedderOut::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void EmbedderOut::ArenaDtor(void* object) {
  EmbedderOut* _this = reinterpret_cast< EmbedderOut* >(object);
  (void)_this;
}
void EmbedderOut::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EmbedderOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedderOut::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedderOut& EmbedderOut::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedderOut* EmbedderOut::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EmbedderOut>(arena);
}

void EmbedderOut::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.EmbedderOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedderOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.EmbedderOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.EmbedderOut.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.EmbedderOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.EmbedderOut)
  return false;
#undef DO_
}

void EmbedderOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.EmbedderOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.EmbedderOut.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.EmbedderOut)
}

::google::protobuf::uint8* EmbedderOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.EmbedderOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.EmbedderOut.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.EmbedderOut)
  return target;
}

size_t EmbedderOut::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:image_match_indexer.pb.EmbedderOut)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  return total_size;
}
size_t EmbedderOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.EmbedderOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedderOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.EmbedderOut)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedderOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedderOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.EmbedderOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.EmbedderOut)
    MergeFrom(*source);
  }
}

void EmbedderOut::MergeFrom(const EmbedderOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.EmbedderOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      set_url(from.url());
    }
  }
}

void EmbedderOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.EmbedderOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedderOut::CopyFrom(const EmbedderOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.EmbedderOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedderOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EmbedderOut::Swap(EmbedderOut* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EmbedderOut* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EmbedderOut::UnsafeArenaSwap(EmbedderOut* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EmbedderOut::InternalSwap(EmbedderOut* other) {
  using std::swap;
  data_.Swap(&other->data_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedderOut::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedderOut

// required bytes data = 1;
bool EmbedderOut::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedderOut::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedderOut::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedderOut::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
const ::std::string& EmbedderOut::data() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedderOut.data)
  return data_.Get();
}
void EmbedderOut::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedderOut.data)
}
#if LANG_CXX11
void EmbedderOut::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedderOut.data)
}
#endif
void EmbedderOut::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedderOut.data)
}
void EmbedderOut::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedderOut.data)
}
::std::string* EmbedderOut::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedderOut.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedderOut::release_data() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedderOut.data)
  clear_has_data();
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedderOut::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedderOut.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void EmbedderOut::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedderOut.data)
}
void EmbedderOut::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedderOut.data)
}

// required string url = 2;
bool EmbedderOut::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedderOut::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedderOut::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedderOut::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
const ::std::string& EmbedderOut::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedderOut.url)
  return url_.Get();
}
void EmbedderOut::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedderOut.url)
}
#if LANG_CXX11
void EmbedderOut::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedderOut.url)
}
#endif
void EmbedderOut::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedderOut.url)
}
void EmbedderOut::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedderOut.url)
}
::std::string* EmbedderOut::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedderOut.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedderOut::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedderOut.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedderOut::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedderOut.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void EmbedderOut::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedderOut.url)
}
void EmbedderOut::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedderOut.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Embedding::_slow_mutable_preview_info() {
  preview_info_ = ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::PreviewInfo >(
      GetArenaNoVirtual());
}
::image_match_indexer::pb::PreviewInfo* Embedding::_slow_release_preview_info() {
  if (preview_info_ == NULL) {
    return NULL;
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = new ::image_match_indexer::pb::PreviewInfo(*preview_info_);
    preview_info_ = NULL;
    return temp;
  }
}
::image_match_indexer::pb::PreviewInfo* Embedding::unsafe_arena_release_preview_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.Embedding.preview_info)
  clear_has_preview_info();
  ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
  preview_info_ = NULL;
  return temp;
}
void Embedding::_slow_set_allocated_preview_info(
    ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::PreviewInfo** preview_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*preview_info) == NULL) {
      message_arena->Own(*preview_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*preview_info)) {
      ::image_match_indexer::pb::PreviewInfo* new_preview_info = 
            ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::PreviewInfo >(
            message_arena);
      new_preview_info->CopyFrom(**preview_info);
      *preview_info = new_preview_info;
    }
}
void Embedding::unsafe_arena_set_allocated_preview_info(
    ::image_match_indexer::pb::PreviewInfo* preview_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete preview_info_;
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.Embedding.preview_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Embedding::kDataFieldNumber;
const int Embedding::kUrlFieldNumber;
const int Embedding::kHashFieldNumber;
const int Embedding::kPreviewInfoFieldNumber;
const int Embedding::kPornProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Embedding::Embedding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.Embedding)
}
Embedding::Embedding(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.Embedding)
}
Embedding::Embedding(const Embedding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url(),
      GetArenaNoVirtual());
  }
  if (from.has_preview_info()) {
    preview_info_ = new ::image_match_indexer::pb::PreviewInfo(*from.preview_info_);
  } else {
    preview_info_ = NULL;
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&porn_probability_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(porn_probability_));
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.Embedding)
}

void Embedding::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preview_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porn_probability_) -
      reinterpret_cast<char*>(&preview_info_)) + sizeof(porn_probability_));
}

Embedding::~Embedding() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.Embedding)
  SharedDtor();
}

void Embedding::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete preview_info_;
}

void Embedding::ArenaDtor(void* object) {
  Embedding* _this = reinterpret_cast< Embedding* >(object);
  (void)_this;
}
void Embedding::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Embedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Embedding::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Embedding& Embedding::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Embedding* Embedding::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Embedding>(arena);
}

void Embedding::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.Embedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preview_info_ != NULL);
      preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porn_probability_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(porn_probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Embedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.Embedding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.Embedding.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_probability = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.Embedding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.Embedding)
  return false;
#undef DO_
}

void Embedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.Embedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.Embedding.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional sfixed64 hash = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->hash(), output);
  }

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->preview_info_, output);
  }

  // optional float porn_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->porn_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.Embedding)
}

::google::protobuf::uint8* Embedding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.Embedding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.Embedding.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional sfixed64 hash = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->hash(), target);
  }

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->preview_info_, deterministic, target);
  }

  // optional float porn_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->porn_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.Embedding)
  return target;
}

size_t Embedding::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:image_match_indexer.pb.Embedding)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  return total_size;
}
size_t Embedding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.Embedding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required string url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
    if (has_preview_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preview_info_);
    }

    // optional sfixed64 hash = 3;
    if (has_hash()) {
      total_size += 1 + 8;
    }

    // optional float porn_probability = 5;
    if (has_porn_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Embedding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  const Embedding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Embedding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.Embedding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.Embedding)
    MergeFrom(*source);
  }
}

void Embedding::MergeFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.Embedding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_data(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      set_url(from.url());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_preview_info()->::image_match_indexer::pb::PreviewInfo::MergeFrom(from.preview_info());
    }
    if (cached_has_bits & 0x00000008u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      porn_probability_ = from.porn_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Embedding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Embedding::CopyFrom(const Embedding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.Embedding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_preview_info()) {
    if (!this->preview_info_->IsInitialized()) return false;
  }
  return true;
}

void Embedding::Swap(Embedding* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Embedding* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Embedding::UnsafeArenaSwap(Embedding* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Embedding::InternalSwap(Embedding* other) {
  using std::swap;
  data_.Swap(&other->data_);
  url_.Swap(&other->url_);
  swap(preview_info_, other->preview_info_);
  swap(hash_, other->hash_);
  swap(porn_probability_, other->porn_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Embedding::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Embedding

// required bytes data = 1;
bool Embedding::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Embedding::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Embedding::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Embedding::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
const ::std::string& Embedding::data() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.data)
  return data_.Get();
}
void Embedding::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.data)
}
#if LANG_CXX11
void Embedding::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.Embedding.data)
}
#endif
void Embedding::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.Embedding.data)
}
void Embedding::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.Embedding.data)
}
::std::string* Embedding::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Embedding::release_data() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.data)
  clear_has_data();
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Embedding::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.Embedding.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Embedding::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.data)
}
void Embedding::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.Embedding.data)
}

// required string url = 2;
bool Embedding::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Embedding::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Embedding::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Embedding::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
const ::std::string& Embedding::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.url)
  return url_.Get();
}
void Embedding::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.url)
}
#if LANG_CXX11
void Embedding::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.Embedding.url)
}
#endif
void Embedding::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.Embedding.url)
}
void Embedding::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.Embedding.url)
}
::std::string* Embedding::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Embedding::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Embedding::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.Embedding.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Embedding::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.url)
}
void Embedding::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.Embedding.url)
}

// optional sfixed64 hash = 3;
bool Embedding::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Embedding::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void Embedding::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void Embedding::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
::google::protobuf::int64 Embedding::hash() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.hash)
  return hash_;
}
void Embedding::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.hash)
}

// optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
bool Embedding::has_preview_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Embedding::set_has_preview_info() {
  _has_bits_[0] |= 0x00000004u;
}
void Embedding::clear_has_preview_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void Embedding::clear_preview_info() {
  if (preview_info_ != NULL) preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
  clear_has_preview_info();
}
const ::image_match_indexer::pb::PreviewInfo& Embedding::preview_info() const {
  const ::image_match_indexer::pb::PreviewInfo* p = preview_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::PreviewInfo*>(
      &::image_match_indexer::pb::_PreviewInfo_default_instance_);
}
::image_match_indexer::pb::PreviewInfo* Embedding::mutable_preview_info() {
  set_has_preview_info();
  if (preview_info_ == NULL) {
    _slow_mutable_preview_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.preview_info)
  return preview_info_;
}
::image_match_indexer::pb::PreviewInfo* Embedding::release_preview_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.preview_info)
  clear_has_preview_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_preview_info();
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
    preview_info_ = NULL;
    return temp;
  }
}
 void Embedding::set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete preview_info_;
  }
  if (preview_info != NULL) {
    _slow_set_allocated_preview_info(message_arena, &preview_info);
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.preview_info)
}

// optional float porn_probability = 5;
bool Embedding::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Embedding::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000010u;
}
void Embedding::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000010u;
}
void Embedding::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
float Embedding::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.porn_probability)
  return porn_probability_;
}
void Embedding::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.porn_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedData_OriginalInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedData_OriginalInfo::EmbedData_OriginalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.EmbedData.OriginalInfo)
}
EmbedData_OriginalInfo::EmbedData_OriginalInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.EmbedData.OriginalInfo)
}
EmbedData_OriginalInfo::EmbedData_OriginalInfo(const EmbedData_OriginalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.EmbedData.OriginalInfo)
}

void EmbedData_OriginalInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmbedData_OriginalInfo::~EmbedData_OriginalInfo() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.EmbedData.OriginalInfo)
  SharedDtor();
}

void EmbedData_OriginalInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void EmbedData_OriginalInfo::ArenaDtor(void* object) {
  EmbedData_OriginalInfo* _this = reinterpret_cast< EmbedData_OriginalInfo* >(object);
  (void)_this;
}
void EmbedData_OriginalInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EmbedData_OriginalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedData_OriginalInfo::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedData_OriginalInfo& EmbedData_OriginalInfo::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedData_OriginalInfo* EmbedData_OriginalInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EmbedData_OriginalInfo>(arena);
}

void EmbedData_OriginalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedData_OriginalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_match_indexer.pb.EmbedData.OriginalInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.EmbedData.OriginalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.EmbedData.OriginalInfo)
  return false;
#undef DO_
}

void EmbedData_OriginalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.EmbedData.OriginalInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.EmbedData.OriginalInfo)
}

::google::protobuf::uint8* EmbedData_OriginalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_match_indexer.pb.EmbedData.OriginalInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.EmbedData.OriginalInfo)
  return target;
}

size_t EmbedData_OriginalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedData_OriginalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedData_OriginalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedData_OriginalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.EmbedData.OriginalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.EmbedData.OriginalInfo)
    MergeFrom(*source);
  }
}

void EmbedData_OriginalInfo::MergeFrom(const EmbedData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_url(from.url());
  }
}

void EmbedData_OriginalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedData_OriginalInfo::CopyFrom(const EmbedData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.EmbedData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedData_OriginalInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EmbedData_OriginalInfo::Swap(EmbedData_OriginalInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EmbedData_OriginalInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EmbedData_OriginalInfo::UnsafeArenaSwap(EmbedData_OriginalInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EmbedData_OriginalInfo::InternalSwap(EmbedData_OriginalInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedData_OriginalInfo::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedData_OriginalInfo

// required string url = 1;
bool EmbedData_OriginalInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedData_OriginalInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedData_OriginalInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedData_OriginalInfo::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
const ::std::string& EmbedData_OriginalInfo::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  return url_.Get();
}
void EmbedData_OriginalInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
#if LANG_CXX11
void EmbedData_OriginalInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
#endif
void EmbedData_OriginalInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
void EmbedData_OriginalInfo::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
::std::string* EmbedData_OriginalInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedData_OriginalInfo::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EmbedData_OriginalInfo::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void EmbedData_OriginalInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
void EmbedData_OriginalInfo::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedData_AnnoyIndexMeta::kAnnoyIdxIdFieldNumber;
const int EmbedData_AnnoyIndexMeta::kAnnoyImgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedData_AnnoyIndexMeta::EmbedData_AnnoyIndexMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
}
EmbedData_AnnoyIndexMeta::EmbedData_AnnoyIndexMeta(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
}
EmbedData_AnnoyIndexMeta::EmbedData_AnnoyIndexMeta(const EmbedData_AnnoyIndexMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&annoy_idx_id_, &from.annoy_idx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&annoy_img_id_) -
    reinterpret_cast<char*>(&annoy_idx_id_)) + sizeof(annoy_img_id_));
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
}

void EmbedData_AnnoyIndexMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&annoy_idx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annoy_img_id_) -
      reinterpret_cast<char*>(&annoy_idx_id_)) + sizeof(annoy_img_id_));
}

EmbedData_AnnoyIndexMeta::~EmbedData_AnnoyIndexMeta() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  SharedDtor();
}

void EmbedData_AnnoyIndexMeta::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void EmbedData_AnnoyIndexMeta::ArenaDtor(void* object) {
  EmbedData_AnnoyIndexMeta* _this = reinterpret_cast< EmbedData_AnnoyIndexMeta* >(object);
  (void)_this;
}
void EmbedData_AnnoyIndexMeta::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EmbedData_AnnoyIndexMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedData_AnnoyIndexMeta::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedData_AnnoyIndexMeta& EmbedData_AnnoyIndexMeta::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedData_AnnoyIndexMeta* EmbedData_AnnoyIndexMeta::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EmbedData_AnnoyIndexMeta>(arena);
}

void EmbedData_AnnoyIndexMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&annoy_idx_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&annoy_img_id_) -
        reinterpret_cast<char*>(&annoy_idx_id_)) + sizeof(annoy_img_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedData_AnnoyIndexMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 annoy_idx_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_annoy_idx_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &annoy_idx_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 annoy_img_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_annoy_img_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &annoy_img_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  return false;
#undef DO_
}

void EmbedData_AnnoyIndexMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 annoy_idx_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->annoy_idx_id(), output);
  }

  // required uint32 annoy_img_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->annoy_img_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
}

::google::protobuf::uint8* EmbedData_AnnoyIndexMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 annoy_idx_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->annoy_idx_id(), target);
  }

  // required uint32 annoy_img_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->annoy_img_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  return target;
}

size_t EmbedData_AnnoyIndexMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  size_t total_size = 0;

  if (has_annoy_idx_id()) {
    // required uint32 annoy_idx_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->annoy_idx_id());
  }

  if (has_annoy_img_id()) {
    // required uint32 annoy_img_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->annoy_img_id());
  }

  return total_size;
}
size_t EmbedData_AnnoyIndexMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 annoy_idx_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->annoy_idx_id());

    // required uint32 annoy_img_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->annoy_img_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedData_AnnoyIndexMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedData_AnnoyIndexMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedData_AnnoyIndexMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
    MergeFrom(*source);
  }
}

void EmbedData_AnnoyIndexMeta::MergeFrom(const EmbedData_AnnoyIndexMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      annoy_idx_id_ = from.annoy_idx_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      annoy_img_id_ = from.annoy_img_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmbedData_AnnoyIndexMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedData_AnnoyIndexMeta::CopyFrom(const EmbedData_AnnoyIndexMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedData_AnnoyIndexMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EmbedData_AnnoyIndexMeta::Swap(EmbedData_AnnoyIndexMeta* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EmbedData_AnnoyIndexMeta* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EmbedData_AnnoyIndexMeta::UnsafeArenaSwap(EmbedData_AnnoyIndexMeta* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EmbedData_AnnoyIndexMeta::InternalSwap(EmbedData_AnnoyIndexMeta* other) {
  using std::swap;
  swap(annoy_idx_id_, other->annoy_idx_id_);
  swap(annoy_img_id_, other->annoy_img_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedData_AnnoyIndexMeta::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedData_AnnoyIndexMeta

// required uint32 annoy_idx_id = 1;
bool EmbedData_AnnoyIndexMeta::has_annoy_idx_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedData_AnnoyIndexMeta::set_has_annoy_idx_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedData_AnnoyIndexMeta::clear_has_annoy_idx_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedData_AnnoyIndexMeta::clear_annoy_idx_id() {
  annoy_idx_id_ = 0u;
  clear_has_annoy_idx_id();
}
::google::protobuf::uint32 EmbedData_AnnoyIndexMeta::annoy_idx_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_idx_id)
  return annoy_idx_id_;
}
void EmbedData_AnnoyIndexMeta::set_annoy_idx_id(::google::protobuf::uint32 value) {
  set_has_annoy_idx_id();
  annoy_idx_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_idx_id)
}

// required uint32 annoy_img_id = 2;
bool EmbedData_AnnoyIndexMeta::has_annoy_img_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedData_AnnoyIndexMeta::set_has_annoy_img_id() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedData_AnnoyIndexMeta::clear_has_annoy_img_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedData_AnnoyIndexMeta::clear_annoy_img_id() {
  annoy_img_id_ = 0u;
  clear_has_annoy_img_id();
}
::google::protobuf::uint32 EmbedData_AnnoyIndexMeta::annoy_img_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_img_id)
  return annoy_img_id_;
}
void EmbedData_AnnoyIndexMeta::set_annoy_img_id(::google::protobuf::uint32 value) {
  set_has_annoy_img_id();
  annoy_img_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_img_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void EmbedData::_slow_mutable_original_info() {
  original_info_ = ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::EmbedData_OriginalInfo >(
      GetArenaNoVirtual());
}
::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::_slow_release_original_info() {
  if (original_info_ == NULL) {
    return NULL;
  } else {
    ::image_match_indexer::pb::EmbedData_OriginalInfo* temp = new ::image_match_indexer::pb::EmbedData_OriginalInfo(*original_info_);
    original_info_ = NULL;
    return temp;
  }
}
::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::unsafe_arena_release_original_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedData.original_info)
  clear_has_original_info();
  ::image_match_indexer::pb::EmbedData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
void EmbedData::_slow_set_allocated_original_info(
    ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::EmbedData_OriginalInfo** original_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_info) == NULL) {
      message_arena->Own(*original_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_info)) {
      ::image_match_indexer::pb::EmbedData_OriginalInfo* new_original_info = 
            ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::EmbedData_OriginalInfo >(
            message_arena);
      new_original_info->CopyFrom(**original_info);
      *original_info = new_original_info;
    }
}
void EmbedData::unsafe_arena_set_allocated_original_info(
    ::image_match_indexer::pb::EmbedData_OriginalInfo* original_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_info_;
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedData.original_info)
}
void EmbedData::_slow_mutable_annoy_index_meta() {
  annoy_index_meta_ = ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta >(
      GetArenaNoVirtual());
}
::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::_slow_release_annoy_index_meta() {
  if (annoy_index_meta_ == NULL) {
    return NULL;
  } else {
    ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* temp = new ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta(*annoy_index_meta_);
    annoy_index_meta_ = NULL;
    return temp;
  }
}
::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::unsafe_arena_release_annoy_index_meta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedData.annoy_index_meta)
  clear_has_annoy_index_meta();
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* temp = annoy_index_meta_;
  annoy_index_meta_ = NULL;
  return temp;
}
void EmbedData::_slow_set_allocated_annoy_index_meta(
    ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta** annoy_index_meta) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*annoy_index_meta) == NULL) {
      message_arena->Own(*annoy_index_meta);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*annoy_index_meta)) {
      ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* new_annoy_index_meta = 
            ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta >(
            message_arena);
      new_annoy_index_meta->CopyFrom(**annoy_index_meta);
      *annoy_index_meta = new_annoy_index_meta;
    }
}
void EmbedData::unsafe_arena_set_allocated_annoy_index_meta(
    ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta) {
  if (GetArenaNoVirtual() == NULL) {
    delete annoy_index_meta_;
  }
  annoy_index_meta_ = annoy_index_meta;
  if (annoy_index_meta) {
    set_has_annoy_index_meta();
  } else {
    clear_has_annoy_index_meta();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedData.annoy_index_meta)
}
void EmbedData::_slow_mutable_preview_info() {
  preview_info_ = ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::PreviewInfo >(
      GetArenaNoVirtual());
}
::image_match_indexer::pb::PreviewInfo* EmbedData::_slow_release_preview_info() {
  if (preview_info_ == NULL) {
    return NULL;
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = new ::image_match_indexer::pb::PreviewInfo(*preview_info_);
    preview_info_ = NULL;
    return temp;
  }
}
::image_match_indexer::pb::PreviewInfo* EmbedData::unsafe_arena_release_preview_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedData.preview_info)
  clear_has_preview_info();
  ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
  preview_info_ = NULL;
  return temp;
}
void EmbedData::_slow_set_allocated_preview_info(
    ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::PreviewInfo** preview_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*preview_info) == NULL) {
      message_arena->Own(*preview_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*preview_info)) {
      ::image_match_indexer::pb::PreviewInfo* new_preview_info = 
            ::google::protobuf::Arena::CreateMessage< ::image_match_indexer::pb::PreviewInfo >(
            message_arena);
      new_preview_info->CopyFrom(**preview_info);
      *preview_info = new_preview_info;
    }
}
void EmbedData::unsafe_arena_set_allocated_preview_info(
    ::image_match_indexer::pb::PreviewInfo* preview_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete preview_info_;
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedData.preview_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedData::kImageIdFieldNumber;
const int EmbedData::kHashFieldNumber;
const int EmbedData::kPornProbabilityFieldNumber;
const int EmbedData::kOriginalInfoFieldNumber;
const int EmbedData::kAnnoyIndexMetaFieldNumber;
const int EmbedData::kPreviewInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedData::EmbedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:image_match_indexer.pb.EmbedData)
}
EmbedData::EmbedData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:image_match_indexer.pb.EmbedData)
}
EmbedData::EmbedData(const EmbedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_original_info()) {
    original_info_ = new ::image_match_indexer::pb::EmbedData_OriginalInfo(*from.original_info_);
  } else {
    original_info_ = NULL;
  }
  if (from.has_annoy_index_meta()) {
    annoy_index_meta_ = new ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta(*from.annoy_index_meta_);
  } else {
    annoy_index_meta_ = NULL;
  }
  if (from.has_preview_info()) {
    preview_info_ = new ::image_match_indexer::pb::PreviewInfo(*from.preview_info_);
  } else {
    preview_info_ = NULL;
  }
  ::memcpy(&image_id_, &from.image_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&porn_probability_) -
    reinterpret_cast<char*>(&image_id_)) + sizeof(porn_probability_));
  // @@protoc_insertion_point(copy_constructor:image_match_indexer.pb.EmbedData)
}

void EmbedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&original_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&porn_probability_) -
      reinterpret_cast<char*>(&original_info_)) + sizeof(porn_probability_));
}

EmbedData::~EmbedData() {
  // @@protoc_insertion_point(destructor:image_match_indexer.pb.EmbedData)
  SharedDtor();
}

void EmbedData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete original_info_;
  if (this != internal_default_instance()) delete annoy_index_meta_;
  if (this != internal_default_instance()) delete preview_info_;
}

void EmbedData::ArenaDtor(void* object) {
  EmbedData* _this = reinterpret_cast< EmbedData* >(object);
  (void)_this;
}
void EmbedData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EmbedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedData::descriptor() {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedData& EmbedData::default_instance() {
  protobuf_image_5fmatch_5findexer_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedData* EmbedData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EmbedData>(arena);
}

void EmbedData::Clear() {
// @@protoc_insertion_point(message_clear_start:image_match_indexer.pb.EmbedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(original_info_ != NULL);
      original_info_->::image_match_indexer::pb::EmbedData_OriginalInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(annoy_index_meta_ != NULL);
      annoy_index_meta_->::image_match_indexer::pb::EmbedData_AnnoyIndexMeta::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preview_info_ != NULL);
      preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&image_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&porn_probability_) -
        reinterpret_cast<char*>(&image_id_)) + sizeof(porn_probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:image_match_indexer.pb.EmbedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 image_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_image_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &image_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annoy_index_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_probability = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_porn_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:image_match_indexer.pb.EmbedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:image_match_indexer.pb.EmbedData)
  return false;
#undef DO_
}

void EmbedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:image_match_indexer.pb.EmbedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 image_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->image_id(), output);
  }

  // optional sfixed64 hash = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->hash(), output);
  }

  // optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->original_info_, output);
  }

  // optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->annoy_index_meta_, output);
  }

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->preview_info_, output);
  }

  // optional float porn_probability = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->porn_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:image_match_indexer.pb.EmbedData)
}

::google::protobuf::uint8* EmbedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:image_match_indexer.pb.EmbedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 image_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->image_id(), target);
  }

  // optional sfixed64 hash = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->hash(), target);
  }

  // optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->original_info_, deterministic, target);
  }

  // optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->annoy_index_meta_, deterministic, target);
  }

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->preview_info_, deterministic, target);
  }

  // optional float porn_probability = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->porn_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:image_match_indexer.pb.EmbedData)
  return target;
}

size_t EmbedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:image_match_indexer.pb.EmbedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sfixed64 image_id = 1;
  if (has_image_id()) {
    total_size += 1 + 8;
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
    if (has_original_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->original_info_);
    }

    // optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
    if (has_annoy_index_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->annoy_index_meta_);
    }

    // optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
    if (has_preview_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preview_info_);
    }

  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional sfixed64 hash = 2;
    if (has_hash()) {
      total_size += 1 + 8;
    }

    // optional float porn_probability = 6;
    if (has_porn_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:image_match_indexer.pb.EmbedData)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:image_match_indexer.pb.EmbedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:image_match_indexer.pb.EmbedData)
    MergeFrom(*source);
  }
}

void EmbedData::MergeFrom(const EmbedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:image_match_indexer.pb.EmbedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_original_info()->::image_match_indexer::pb::EmbedData_OriginalInfo::MergeFrom(from.original_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_annoy_index_meta()->::image_match_indexer::pb::EmbedData_AnnoyIndexMeta::MergeFrom(from.annoy_index_meta());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_preview_info()->::image_match_indexer::pb::PreviewInfo::MergeFrom(from.preview_info());
    }
    if (cached_has_bits & 0x00000008u) {
      image_id_ = from.image_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      porn_probability_ = from.porn_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmbedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:image_match_indexer.pb.EmbedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedData::CopyFrom(const EmbedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:image_match_indexer.pb.EmbedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_original_info()) {
    if (!this->original_info_->IsInitialized()) return false;
  }
  if (has_annoy_index_meta()) {
    if (!this->annoy_index_meta_->IsInitialized()) return false;
  }
  if (has_preview_info()) {
    if (!this->preview_info_->IsInitialized()) return false;
  }
  return true;
}

void EmbedData::Swap(EmbedData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EmbedData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EmbedData::UnsafeArenaSwap(EmbedData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EmbedData::InternalSwap(EmbedData* other) {
  using std::swap;
  swap(original_info_, other->original_info_);
  swap(annoy_index_meta_, other->annoy_index_meta_);
  swap(preview_info_, other->preview_info_);
  swap(image_id_, other->image_id_);
  swap(hash_, other->hash_);
  swap(porn_probability_, other->porn_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedData::GetMetadata() const {
  protobuf_image_5fmatch_5findexer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_5fmatch_5findexer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedData

// required sfixed64 image_id = 1;
bool EmbedData::has_image_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmbedData::set_has_image_id() {
  _has_bits_[0] |= 0x00000008u;
}
void EmbedData::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmbedData::clear_image_id() {
  image_id_ = GOOGLE_LONGLONG(0);
  clear_has_image_id();
}
::google::protobuf::int64 EmbedData::image_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.image_id)
  return image_id_;
}
void EmbedData::set_image_id(::google::protobuf::int64 value) {
  set_has_image_id();
  image_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.image_id)
}

// optional sfixed64 hash = 2;
bool EmbedData::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmbedData::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void EmbedData::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmbedData::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
::google::protobuf::int64 EmbedData::hash() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.hash)
  return hash_;
}
void EmbedData::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.hash)
}

// optional float porn_probability = 6;
bool EmbedData::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EmbedData::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000020u;
}
void EmbedData::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000020u;
}
void EmbedData::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
float EmbedData::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.porn_probability)
  return porn_probability_;
}
void EmbedData::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.porn_probability)
}

// optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
bool EmbedData::has_original_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedData::set_has_original_info() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::image_match_indexer::pb::EmbedData_OriginalInfo::Clear();
  clear_has_original_info();
}
const ::image_match_indexer::pb::EmbedData_OriginalInfo& EmbedData::original_info() const {
  const ::image_match_indexer::pb::EmbedData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::EmbedData_OriginalInfo*>(
      &::image_match_indexer::pb::_EmbedData_OriginalInfo_default_instance_);
}
::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.original_info)
  return original_info_;
}
::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::release_original_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::image_match_indexer::pb::EmbedData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
 void EmbedData::set_allocated_original_info(::image_match_indexer::pb::EmbedData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.original_info)
}

// optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
bool EmbedData::has_annoy_index_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedData::set_has_annoy_index_meta() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedData::clear_has_annoy_index_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedData::clear_annoy_index_meta() {
  if (annoy_index_meta_ != NULL) annoy_index_meta_->::image_match_indexer::pb::EmbedData_AnnoyIndexMeta::Clear();
  clear_has_annoy_index_meta();
}
const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta& EmbedData::annoy_index_meta() const {
  const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* p = annoy_index_meta_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.annoy_index_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta*>(
      &::image_match_indexer::pb::_EmbedData_AnnoyIndexMeta_default_instance_);
}
::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::mutable_annoy_index_meta() {
  set_has_annoy_index_meta();
  if (annoy_index_meta_ == NULL) {
    _slow_mutable_annoy_index_meta();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.annoy_index_meta)
  return annoy_index_meta_;
}
::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::release_annoy_index_meta() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.annoy_index_meta)
  clear_has_annoy_index_meta();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annoy_index_meta();
  } else {
    ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* temp = annoy_index_meta_;
    annoy_index_meta_ = NULL;
    return temp;
  }
}
 void EmbedData::set_allocated_annoy_index_meta(::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annoy_index_meta_;
  }
  if (annoy_index_meta != NULL) {
    _slow_set_allocated_annoy_index_meta(message_arena, &annoy_index_meta);
  }
  annoy_index_meta_ = annoy_index_meta;
  if (annoy_index_meta) {
    set_has_annoy_index_meta();
  } else {
    clear_has_annoy_index_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.annoy_index_meta)
}

// optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
bool EmbedData::has_preview_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmbedData::set_has_preview_info() {
  _has_bits_[0] |= 0x00000004u;
}
void EmbedData::clear_has_preview_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmbedData::clear_preview_info() {
  if (preview_info_ != NULL) preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
  clear_has_preview_info();
}
const ::image_match_indexer::pb::PreviewInfo& EmbedData::preview_info() const {
  const ::image_match_indexer::pb::PreviewInfo* p = preview_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::PreviewInfo*>(
      &::image_match_indexer::pb::_PreviewInfo_default_instance_);
}
::image_match_indexer::pb::PreviewInfo* EmbedData::mutable_preview_info() {
  set_has_preview_info();
  if (preview_info_ == NULL) {
    _slow_mutable_preview_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.preview_info)
  return preview_info_;
}
::image_match_indexer::pb::PreviewInfo* EmbedData::release_preview_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.preview_info)
  clear_has_preview_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_preview_info();
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
    preview_info_ = NULL;
    return temp;
  }
}
 void EmbedData::set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete preview_info_;
  }
  if (preview_info != NULL) {
    _slow_set_allocated_preview_info(message_arena, &preview_info);
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.preview_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace image_match_indexer

// @@protoc_insertion_point(global_scope)
