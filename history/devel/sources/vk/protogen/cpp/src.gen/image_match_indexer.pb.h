// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_match_indexer.proto

#ifndef PROTOBUF_image_5fmatch_5findexer_2eproto__INCLUDED
#define PROTOBUF_image_5fmatch_5findexer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "image_blobs.pb.h"
#include "image_defs.pb.h"
#include "qembedder.pb.h"
// @@protoc_insertion_point(includes)
namespace image_match_indexer {
namespace pb {
class DumpItem;
class DumpItemDefaultTypeInternal;
extern DumpItemDefaultTypeInternal _DumpItem_default_instance_;
class DumpItem_Duplicate;
class DumpItem_DuplicateDefaultTypeInternal;
extern DumpItem_DuplicateDefaultTypeInternal _DumpItem_Duplicate_default_instance_;
class DumpItem_PageReference;
class DumpItem_PageReferenceDefaultTypeInternal;
extern DumpItem_PageReferenceDefaultTypeInternal _DumpItem_PageReference_default_instance_;
class EmbedData;
class EmbedDataDefaultTypeInternal;
extern EmbedDataDefaultTypeInternal _EmbedData_default_instance_;
class EmbedData_AnnoyIndexMeta;
class EmbedData_AnnoyIndexMetaDefaultTypeInternal;
extern EmbedData_AnnoyIndexMetaDefaultTypeInternal _EmbedData_AnnoyIndexMeta_default_instance_;
class EmbedData_OriginalInfo;
class EmbedData_OriginalInfoDefaultTypeInternal;
extern EmbedData_OriginalInfoDefaultTypeInternal _EmbedData_OriginalInfo_default_instance_;
class EmbedderOut;
class EmbedderOutDefaultTypeInternal;
extern EmbedderOutDefaultTypeInternal _EmbedderOut_default_instance_;
class Embedding;
class EmbeddingDefaultTypeInternal;
extern EmbeddingDefaultTypeInternal _Embedding_default_instance_;
class PreviewInfo;
class PreviewInfoDefaultTypeInternal;
extern PreviewInfoDefaultTypeInternal _PreviewInfo_default_instance_;
}  // namespace pb
}  // namespace image_match_indexer

namespace image_match_indexer {
namespace pb {

namespace protobuf_image_5fmatch_5findexer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_image_5fmatch_5findexer_2eproto

// ===================================================================

class DumpItem_Duplicate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.DumpItem.Duplicate) */ {
 public:
  DumpItem_Duplicate();
  virtual ~DumpItem_Duplicate();

  DumpItem_Duplicate(const DumpItem_Duplicate& from);

  inline DumpItem_Duplicate& operator=(const DumpItem_Duplicate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpItem_Duplicate(DumpItem_Duplicate&& from) noexcept
    : DumpItem_Duplicate() {
    *this = ::std::move(from);
  }

  inline DumpItem_Duplicate& operator=(DumpItem_Duplicate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpItem_Duplicate& default_instance();

  static inline const DumpItem_Duplicate* internal_default_instance() {
    return reinterpret_cast<const DumpItem_Duplicate*>(
               &_DumpItem_Duplicate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(DumpItem_Duplicate* other);
  void Swap(DumpItem_Duplicate* other);
  friend void swap(DumpItem_Duplicate& a, DumpItem_Duplicate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpItem_Duplicate* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpItem_Duplicate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpItem_Duplicate& from);
  void MergeFrom(const DumpItem_Duplicate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpItem_Duplicate* other);
  protected:
  explicit DumpItem_Duplicate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string full_url = 1;
  bool has_full_url() const;
  void clear_full_url();
  static const int kFullUrlFieldNumber = 1;
  const ::std::string& full_url() const;
  void set_full_url(const ::std::string& value);
  #if LANG_CXX11
  void set_full_url(::std::string&& value);
  #endif
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  ::std::string* mutable_full_url();
  ::std::string* release_full_url();
  void set_allocated_full_url(::std::string* full_url);
  ::std::string* unsafe_arena_release_full_url();
  void unsafe_arena_set_allocated_full_url(
      ::std::string* full_url);

  // optional float porn_probability = 2;
  bool has_porn_probability() const;
  void clear_porn_probability();
  static const int kPornProbabilityFieldNumber = 2;
  float porn_probability() const;
  void set_porn_probability(float value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.DumpItem.Duplicate)
 private:
  void set_has_full_url();
  void clear_has_full_url();
  void set_has_porn_probability();
  void clear_has_porn_probability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr full_url_;
  float porn_probability_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpItem_PageReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.DumpItem.PageReference) */ {
 public:
  DumpItem_PageReference();
  virtual ~DumpItem_PageReference();

  DumpItem_PageReference(const DumpItem_PageReference& from);

  inline DumpItem_PageReference& operator=(const DumpItem_PageReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpItem_PageReference(DumpItem_PageReference&& from) noexcept
    : DumpItem_PageReference() {
    *this = ::std::move(from);
  }

  inline DumpItem_PageReference& operator=(DumpItem_PageReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpItem_PageReference& default_instance();

  static inline const DumpItem_PageReference* internal_default_instance() {
    return reinterpret_cast<const DumpItem_PageReference*>(
               &_DumpItem_PageReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(DumpItem_PageReference* other);
  void Swap(DumpItem_PageReference* other);
  friend void swap(DumpItem_PageReference& a, DumpItem_PageReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpItem_PageReference* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpItem_PageReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpItem_PageReference& from);
  void MergeFrom(const DumpItem_PageReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpItem_PageReference* other);
  protected:
  explicit DumpItem_PageReference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string full_url = 1;
  bool has_full_url() const;
  void clear_full_url();
  static const int kFullUrlFieldNumber = 1;
  const ::std::string& full_url() const;
  void set_full_url(const ::std::string& value);
  #if LANG_CXX11
  void set_full_url(::std::string&& value);
  #endif
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  ::std::string* mutable_full_url();
  ::std::string* release_full_url();
  void set_allocated_full_url(::std::string* full_url);
  ::std::string* unsafe_arena_release_full_url();
  void unsafe_arena_set_allocated_full_url(
      ::std::string* full_url);

  // optional string snippet = 2;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 2;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);
  ::std::string* unsafe_arena_release_snippet();
  void unsafe_arena_set_allocated_snippet(
      ::std::string* snippet);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.DumpItem.PageReference)
 private:
  void set_has_full_url();
  void clear_has_full_url();
  void set_has_snippet();
  void clear_has_snippet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr full_url_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.DumpItem) */ {
 public:
  DumpItem();
  virtual ~DumpItem();

  DumpItem(const DumpItem& from);

  inline DumpItem& operator=(const DumpItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpItem(DumpItem&& from) noexcept
    : DumpItem() {
    *this = ::std::move(from);
  }

  inline DumpItem& operator=(DumpItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpItem& default_instance();

  static inline const DumpItem* internal_default_instance() {
    return reinterpret_cast<const DumpItem*>(
               &_DumpItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(DumpItem* other);
  void Swap(DumpItem* other);
  friend void swap(DumpItem& a, DumpItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpItem* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpItem& from);
  void MergeFrom(const DumpItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpItem* other);
  protected:
  explicit DumpItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DumpItem_Duplicate Duplicate;
  typedef DumpItem_PageReference PageReference;

  // accessors -------------------------------------------------------

  // repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
  int duplicates_size() const;
  void clear_duplicates();
  static const int kDuplicatesFieldNumber = 14;
  const ::image_match_indexer::pb::DumpItem_Duplicate& duplicates(int index) const;
  ::image_match_indexer::pb::DumpItem_Duplicate* mutable_duplicates(int index);
  ::image_match_indexer::pb::DumpItem_Duplicate* add_duplicates();
  ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >*
      mutable_duplicates();
  const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >&
      duplicates() const;

  // repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
  int ref_size() const;
  void clear_ref();
  static const int kRefFieldNumber = 16;
  const ::image_match_indexer::pb::DumpItem_PageReference& ref(int index) const;
  ::image_match_indexer::pb::DumpItem_PageReference* mutable_ref(int index);
  ::image_match_indexer::pb::DumpItem_PageReference* add_ref();
  ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >*
      mutable_ref();
  const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >&
      ref() const;

  // optional bytes webpagesII_key = 1;
  bool has_webpagesii_key() const;
  void clear_webpagesii_key();
  static const int kWebpagesIIKeyFieldNumber = 1;
  const ::std::string& webpagesii_key() const;
  void set_webpagesii_key(const ::std::string& value);
  #if LANG_CXX11
  void set_webpagesii_key(::std::string&& value);
  #endif
  void set_webpagesii_key(const char* value);
  void set_webpagesii_key(const void* value, size_t size);
  ::std::string* mutable_webpagesii_key();
  ::std::string* release_webpagesii_key();
  void set_allocated_webpagesii_key(::std::string* webpagesii_key);
  ::std::string* unsafe_arena_release_webpagesii_key();
  void unsafe_arena_set_allocated_webpagesii_key(
      ::std::string* webpagesii_key);

  // optional string full_url = 8;
  bool has_full_url() const;
  void clear_full_url();
  static const int kFullUrlFieldNumber = 8;
  const ::std::string& full_url() const;
  void set_full_url(const ::std::string& value);
  #if LANG_CXX11
  void set_full_url(::std::string&& value);
  #endif
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  ::std::string* mutable_full_url();
  ::std::string* release_full_url();
  void set_allocated_full_url(::std::string* full_url);
  ::std::string* unsafe_arena_release_full_url();
  void unsafe_arena_set_allocated_full_url(
      ::std::string* full_url);

  // optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
  bool has_image_properties() const;
  void clear_image_properties();
  static const int kImagePropertiesFieldNumber = 4;
  private:
  void _slow_mutable_image_properties();
  ::ru::mail::go::webbase::blobs::ImageProps* _slow_release_image_properties();
  public:
  const ::ru::mail::go::webbase::blobs::ImageProps& image_properties() const;
  ::ru::mail::go::webbase::blobs::ImageProps* mutable_image_properties();
  ::ru::mail::go::webbase::blobs::ImageProps* release_image_properties();
  void set_allocated_image_properties(::ru::mail::go::webbase::blobs::ImageProps* image_properties);
  ::ru::mail::go::webbase::blobs::ImageProps* unsafe_arena_release_image_properties();
  void unsafe_arena_set_allocated_image_properties(
      ::ru::mail::go::webbase::blobs::ImageProps* image_properties);

  // optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
  bool has_image_thumbnail() const;
  void clear_image_thumbnail();
  static const int kImageThumbnailFieldNumber = 7;
  private:
  void _slow_mutable_image_thumbnail();
  ::ru::mail::go::webbase::parsing::img::Thumb* _slow_release_image_thumbnail();
  public:
  const ::ru::mail::go::webbase::parsing::img::Thumb& image_thumbnail() const;
  ::ru::mail::go::webbase::parsing::img::Thumb* mutable_image_thumbnail();
  ::ru::mail::go::webbase::parsing::img::Thumb* release_image_thumbnail();
  void set_allocated_image_thumbnail(::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail);
  ::ru::mail::go::webbase::parsing::img::Thumb* unsafe_arena_release_image_thumbnail();
  void unsafe_arena_set_allocated_image_thumbnail(
      ::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail);

  // optional .qembedder.pb.Embedding image_embeddings = 9;
  bool has_image_embeddings() const;
  void clear_image_embeddings();
  static const int kImageEmbeddingsFieldNumber = 9;
  private:
  void _slow_mutable_image_embeddings();
  ::qembedder::pb::Embedding* _slow_release_image_embeddings();
  public:
  const ::qembedder::pb::Embedding& image_embeddings() const;
  ::qembedder::pb::Embedding* mutable_image_embeddings();
  ::qembedder::pb::Embedding* release_image_embeddings();
  void set_allocated_image_embeddings(::qembedder::pb::Embedding* image_embeddings);
  ::qembedder::pb::Embedding* unsafe_arena_release_image_embeddings();
  void unsafe_arena_set_allocated_image_embeddings(
      ::qembedder::pb::Embedding* image_embeddings);

  // optional uint32 clicks_count = 2;
  bool has_clicks_count() const;
  void clear_clicks_count();
  static const int kClicksCountFieldNumber = 2;
  ::google::protobuf::uint32 clicks_count() const;
  void set_clicks_count(::google::protobuf::uint32 value);

  // optional uint32 impressions_count = 3;
  bool has_impressions_count() const;
  void clear_impressions_count();
  static const int kImpressionsCountFieldNumber = 3;
  ::google::protobuf::uint32 impressions_count() const;
  void set_impressions_count(::google::protobuf::uint32 value);

  // optional float porn_probability = 11;
  bool has_porn_probability() const;
  void clear_porn_probability();
  static const int kPornProbabilityFieldNumber = 11;
  float porn_probability() const;
  void set_porn_probability(float value);

  // optional float min_porn_probability = 12;
  bool has_min_porn_probability() const;
  void clear_min_porn_probability();
  static const int kMinPornProbabilityFieldNumber = 12;
  float min_porn_probability() const;
  void set_min_porn_probability(float value);

  // optional bool put_image_embeddings_required = 10;
  bool has_put_image_embeddings_required() const;
  void clear_put_image_embeddings_required();
  static const int kPutImageEmbeddingsRequiredFieldNumber = 10;
  bool put_image_embeddings_required() const;
  void set_put_image_embeddings_required(bool value);

  // optional bool put_porn_probability_required = 15;
  bool has_put_porn_probability_required() const;
  void clear_put_porn_probability_required();
  static const int kPutPornProbabilityRequiredFieldNumber = 15;
  bool put_porn_probability_required() const;
  void set_put_porn_probability_required(bool value);

  // optional float max_porn_probability = 13;
  bool has_max_porn_probability() const;
  void clear_max_porn_probability();
  static const int kMaxPornProbabilityFieldNumber = 13;
  float max_porn_probability() const;
  void set_max_porn_probability(float value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.DumpItem)
 private:
  void set_has_webpagesii_key();
  void clear_has_webpagesii_key();
  void set_has_full_url();
  void clear_has_full_url();
  void set_has_clicks_count();
  void clear_has_clicks_count();
  void set_has_impressions_count();
  void clear_has_impressions_count();
  void set_has_image_properties();
  void clear_has_image_properties();
  void set_has_image_thumbnail();
  void clear_has_image_thumbnail();
  void set_has_put_image_embeddings_required();
  void clear_has_put_image_embeddings_required();
  void set_has_image_embeddings();
  void clear_has_image_embeddings();
  void set_has_porn_probability();
  void clear_has_porn_probability();
  void set_has_min_porn_probability();
  void clear_has_min_porn_probability();
  void set_has_max_porn_probability();
  void clear_has_max_porn_probability();
  void set_has_put_porn_probability_required();
  void clear_has_put_porn_probability_required();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate > duplicates_;
  ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference > ref_;
  ::google::protobuf::internal::ArenaStringPtr webpagesii_key_;
  ::google::protobuf::internal::ArenaStringPtr full_url_;
  ::ru::mail::go::webbase::blobs::ImageProps* image_properties_;
  ::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail_;
  ::qembedder::pb::Embedding* image_embeddings_;
  ::google::protobuf::uint32 clicks_count_;
  ::google::protobuf::uint32 impressions_count_;
  float porn_probability_;
  float min_porn_probability_;
  bool put_image_embeddings_required_;
  bool put_porn_probability_required_;
  float max_porn_probability_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreviewInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.PreviewInfo) */ {
 public:
  PreviewInfo();
  virtual ~PreviewInfo();

  PreviewInfo(const PreviewInfo& from);

  inline PreviewInfo& operator=(const PreviewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreviewInfo(PreviewInfo&& from) noexcept
    : PreviewInfo() {
    *this = ::std::move(from);
  }

  inline PreviewInfo& operator=(PreviewInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreviewInfo& default_instance();

  static inline const PreviewInfo* internal_default_instance() {
    return reinterpret_cast<const PreviewInfo*>(
               &_PreviewInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PreviewInfo* other);
  void Swap(PreviewInfo* other);
  friend void swap(PreviewInfo& a, PreviewInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreviewInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PreviewInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreviewInfo& from);
  void MergeFrom(const PreviewInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreviewInfo* other);
  protected:
  explicit PreviewInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string preview_key = 1;
  bool has_preview_key() const;
  void clear_preview_key();
  static const int kPreviewKeyFieldNumber = 1;
  const ::std::string& preview_key() const;
  void set_preview_key(const ::std::string& value);
  #if LANG_CXX11
  void set_preview_key(::std::string&& value);
  #endif
  void set_preview_key(const char* value);
  void set_preview_key(const char* value, size_t size);
  ::std::string* mutable_preview_key();
  ::std::string* release_preview_key();
  void set_allocated_preview_key(::std::string* preview_key);
  ::std::string* unsafe_arena_release_preview_key();
  void unsafe_arena_set_allocated_preview_key(
      ::std::string* preview_key);

  // required string preview_db_num = 2;
  bool has_preview_db_num() const;
  void clear_preview_db_num();
  static const int kPreviewDbNumFieldNumber = 2;
  const ::std::string& preview_db_num() const;
  void set_preview_db_num(const ::std::string& value);
  #if LANG_CXX11
  void set_preview_db_num(::std::string&& value);
  #endif
  void set_preview_db_num(const char* value);
  void set_preview_db_num(const char* value, size_t size);
  ::std::string* mutable_preview_db_num();
  ::std::string* release_preview_db_num();
  void set_allocated_preview_db_num(::std::string* preview_db_num);
  ::std::string* unsafe_arena_release_preview_db_num();
  void unsafe_arena_set_allocated_preview_db_num(
      ::std::string* preview_db_num);

  // optional fixed32 preview_height = 3;
  bool has_preview_height() const;
  void clear_preview_height();
  static const int kPreviewHeightFieldNumber = 3;
  ::google::protobuf::uint32 preview_height() const;
  void set_preview_height(::google::protobuf::uint32 value);

  // optional fixed32 preview_width = 4;
  bool has_preview_width() const;
  void clear_preview_width();
  static const int kPreviewWidthFieldNumber = 4;
  ::google::protobuf::uint32 preview_width() const;
  void set_preview_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.PreviewInfo)
 private:
  void set_has_preview_key();
  void clear_has_preview_key();
  void set_has_preview_db_num();
  void clear_has_preview_db_num();
  void set_has_preview_height();
  void clear_has_preview_height();
  void set_has_preview_width();
  void clear_has_preview_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr preview_key_;
  ::google::protobuf::internal::ArenaStringPtr preview_db_num_;
  ::google::protobuf::uint32 preview_height_;
  ::google::protobuf::uint32 preview_width_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmbedderOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.EmbedderOut) */ {
 public:
  EmbedderOut();
  virtual ~EmbedderOut();

  EmbedderOut(const EmbedderOut& from);

  inline EmbedderOut& operator=(const EmbedderOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmbedderOut(EmbedderOut&& from) noexcept
    : EmbedderOut() {
    *this = ::std::move(from);
  }

  inline EmbedderOut& operator=(EmbedderOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedderOut& default_instance();

  static inline const EmbedderOut* internal_default_instance() {
    return reinterpret_cast<const EmbedderOut*>(
               &_EmbedderOut_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(EmbedderOut* other);
  void Swap(EmbedderOut* other);
  friend void swap(EmbedderOut& a, EmbedderOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmbedderOut* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedderOut* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedderOut& from);
  void MergeFrom(const EmbedderOut& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedderOut* other);
  protected:
  explicit EmbedderOut(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);
  ::std::string* unsafe_arena_release_url();
  void unsafe_arena_set_allocated_url(
      ::std::string* url);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.EmbedderOut)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_url();
  void clear_has_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Embedding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.Embedding) */ {
 public:
  Embedding();
  virtual ~Embedding();

  Embedding(const Embedding& from);

  inline Embedding& operator=(const Embedding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Embedding(Embedding&& from) noexcept
    : Embedding() {
    *this = ::std::move(from);
  }

  inline Embedding& operator=(Embedding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Embedding& default_instance();

  static inline const Embedding* internal_default_instance() {
    return reinterpret_cast<const Embedding*>(
               &_Embedding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Embedding* other);
  void Swap(Embedding* other);
  friend void swap(Embedding& a, Embedding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Embedding* New() const PROTOBUF_FINAL { return New(NULL); }

  Embedding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Embedding& from);
  void MergeFrom(const Embedding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Embedding* other);
  protected:
  explicit Embedding(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);
  ::std::string* unsafe_arena_release_url();
  void unsafe_arena_set_allocated_url(
      ::std::string* url);

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
  bool has_preview_info() const;
  void clear_preview_info();
  static const int kPreviewInfoFieldNumber = 4;
  private:
  void _slow_mutable_preview_info();
  void _slow_set_allocated_preview_info(
      ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::PreviewInfo** preview_info);
  ::image_match_indexer::pb::PreviewInfo* _slow_release_preview_info();
  public:
  const ::image_match_indexer::pb::PreviewInfo& preview_info() const;
  ::image_match_indexer::pb::PreviewInfo* mutable_preview_info();
  ::image_match_indexer::pb::PreviewInfo* release_preview_info();
  void set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info);
  ::image_match_indexer::pb::PreviewInfo* unsafe_arena_release_preview_info();
  void unsafe_arena_set_allocated_preview_info(
      ::image_match_indexer::pb::PreviewInfo* preview_info);

  // optional sfixed64 hash = 3;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  ::google::protobuf::int64 hash() const;
  void set_hash(::google::protobuf::int64 value);

  // optional float porn_probability = 5;
  bool has_porn_probability() const;
  void clear_porn_probability();
  static const int kPornProbabilityFieldNumber = 5;
  float porn_probability() const;
  void set_porn_probability(float value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.Embedding)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_url();
  void clear_has_url();
  void set_has_hash();
  void clear_has_hash();
  void set_has_preview_info();
  void clear_has_preview_info();
  void set_has_porn_probability();
  void clear_has_porn_probability();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::image_match_indexer::pb::PreviewInfo* preview_info_;
  ::google::protobuf::int64 hash_;
  float porn_probability_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmbedData_OriginalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.EmbedData.OriginalInfo) */ {
 public:
  EmbedData_OriginalInfo();
  virtual ~EmbedData_OriginalInfo();

  EmbedData_OriginalInfo(const EmbedData_OriginalInfo& from);

  inline EmbedData_OriginalInfo& operator=(const EmbedData_OriginalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmbedData_OriginalInfo(EmbedData_OriginalInfo&& from) noexcept
    : EmbedData_OriginalInfo() {
    *this = ::std::move(from);
  }

  inline EmbedData_OriginalInfo& operator=(EmbedData_OriginalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedData_OriginalInfo& default_instance();

  static inline const EmbedData_OriginalInfo* internal_default_instance() {
    return reinterpret_cast<const EmbedData_OriginalInfo*>(
               &_EmbedData_OriginalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(EmbedData_OriginalInfo* other);
  void Swap(EmbedData_OriginalInfo* other);
  friend void swap(EmbedData_OriginalInfo& a, EmbedData_OriginalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmbedData_OriginalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedData_OriginalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedData_OriginalInfo& from);
  void MergeFrom(const EmbedData_OriginalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedData_OriginalInfo* other);
  protected:
  explicit EmbedData_OriginalInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);
  ::std::string* unsafe_arena_release_url();
  void unsafe_arena_set_allocated_url(
      ::std::string* url);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.EmbedData.OriginalInfo)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmbedData_AnnoyIndexMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.EmbedData.AnnoyIndexMeta) */ {
 public:
  EmbedData_AnnoyIndexMeta();
  virtual ~EmbedData_AnnoyIndexMeta();

  EmbedData_AnnoyIndexMeta(const EmbedData_AnnoyIndexMeta& from);

  inline EmbedData_AnnoyIndexMeta& operator=(const EmbedData_AnnoyIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmbedData_AnnoyIndexMeta(EmbedData_AnnoyIndexMeta&& from) noexcept
    : EmbedData_AnnoyIndexMeta() {
    *this = ::std::move(from);
  }

  inline EmbedData_AnnoyIndexMeta& operator=(EmbedData_AnnoyIndexMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedData_AnnoyIndexMeta& default_instance();

  static inline const EmbedData_AnnoyIndexMeta* internal_default_instance() {
    return reinterpret_cast<const EmbedData_AnnoyIndexMeta*>(
               &_EmbedData_AnnoyIndexMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(EmbedData_AnnoyIndexMeta* other);
  void Swap(EmbedData_AnnoyIndexMeta* other);
  friend void swap(EmbedData_AnnoyIndexMeta& a, EmbedData_AnnoyIndexMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmbedData_AnnoyIndexMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedData_AnnoyIndexMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedData_AnnoyIndexMeta& from);
  void MergeFrom(const EmbedData_AnnoyIndexMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedData_AnnoyIndexMeta* other);
  protected:
  explicit EmbedData_AnnoyIndexMeta(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 annoy_idx_id = 1;
  bool has_annoy_idx_id() const;
  void clear_annoy_idx_id();
  static const int kAnnoyIdxIdFieldNumber = 1;
  ::google::protobuf::uint32 annoy_idx_id() const;
  void set_annoy_idx_id(::google::protobuf::uint32 value);

  // required uint32 annoy_img_id = 2;
  bool has_annoy_img_id() const;
  void clear_annoy_img_id();
  static const int kAnnoyImgIdFieldNumber = 2;
  ::google::protobuf::uint32 annoy_img_id() const;
  void set_annoy_img_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.EmbedData.AnnoyIndexMeta)
 private:
  void set_has_annoy_idx_id();
  void clear_has_annoy_idx_id();
  void set_has_annoy_img_id();
  void clear_has_annoy_img_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 annoy_idx_id_;
  ::google::protobuf::uint32 annoy_img_id_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmbedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:image_match_indexer.pb.EmbedData) */ {
 public:
  EmbedData();
  virtual ~EmbedData();

  EmbedData(const EmbedData& from);

  inline EmbedData& operator=(const EmbedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmbedData(EmbedData&& from) noexcept
    : EmbedData() {
    *this = ::std::move(from);
  }

  inline EmbedData& operator=(EmbedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedData& default_instance();

  static inline const EmbedData* internal_default_instance() {
    return reinterpret_cast<const EmbedData*>(
               &_EmbedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(EmbedData* other);
  void Swap(EmbedData* other);
  friend void swap(EmbedData& a, EmbedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmbedData* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedData& from);
  void MergeFrom(const EmbedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedData* other);
  protected:
  explicit EmbedData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EmbedData_OriginalInfo OriginalInfo;
  typedef EmbedData_AnnoyIndexMeta AnnoyIndexMeta;

  // accessors -------------------------------------------------------

  // optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
  bool has_original_info() const;
  void clear_original_info();
  static const int kOriginalInfoFieldNumber = 3;
  private:
  void _slow_mutable_original_info();
  void _slow_set_allocated_original_info(
      ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::EmbedData_OriginalInfo** original_info);
  ::image_match_indexer::pb::EmbedData_OriginalInfo* _slow_release_original_info();
  public:
  const ::image_match_indexer::pb::EmbedData_OriginalInfo& original_info() const;
  ::image_match_indexer::pb::EmbedData_OriginalInfo* mutable_original_info();
  ::image_match_indexer::pb::EmbedData_OriginalInfo* release_original_info();
  void set_allocated_original_info(::image_match_indexer::pb::EmbedData_OriginalInfo* original_info);
  ::image_match_indexer::pb::EmbedData_OriginalInfo* unsafe_arena_release_original_info();
  void unsafe_arena_set_allocated_original_info(
      ::image_match_indexer::pb::EmbedData_OriginalInfo* original_info);

  // optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
  bool has_annoy_index_meta() const;
  void clear_annoy_index_meta();
  static const int kAnnoyIndexMetaFieldNumber = 4;
  private:
  void _slow_mutable_annoy_index_meta();
  void _slow_set_allocated_annoy_index_meta(
      ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta** annoy_index_meta);
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* _slow_release_annoy_index_meta();
  public:
  const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta& annoy_index_meta() const;
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* mutable_annoy_index_meta();
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* release_annoy_index_meta();
  void set_allocated_annoy_index_meta(::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta);
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* unsafe_arena_release_annoy_index_meta();
  void unsafe_arena_set_allocated_annoy_index_meta(
      ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta);

  // optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
  bool has_preview_info() const;
  void clear_preview_info();
  static const int kPreviewInfoFieldNumber = 5;
  private:
  void _slow_mutable_preview_info();
  void _slow_set_allocated_preview_info(
      ::google::protobuf::Arena* message_arena, ::image_match_indexer::pb::PreviewInfo** preview_info);
  ::image_match_indexer::pb::PreviewInfo* _slow_release_preview_info();
  public:
  const ::image_match_indexer::pb::PreviewInfo& preview_info() const;
  ::image_match_indexer::pb::PreviewInfo* mutable_preview_info();
  ::image_match_indexer::pb::PreviewInfo* release_preview_info();
  void set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info);
  ::image_match_indexer::pb::PreviewInfo* unsafe_arena_release_preview_info();
  void unsafe_arena_set_allocated_preview_info(
      ::image_match_indexer::pb::PreviewInfo* preview_info);

  // required sfixed64 image_id = 1;
  bool has_image_id() const;
  void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  ::google::protobuf::int64 image_id() const;
  void set_image_id(::google::protobuf::int64 value);

  // optional sfixed64 hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::int64 hash() const;
  void set_hash(::google::protobuf::int64 value);

  // optional float porn_probability = 6;
  bool has_porn_probability() const;
  void clear_porn_probability();
  static const int kPornProbabilityFieldNumber = 6;
  float porn_probability() const;
  void set_porn_probability(float value);

  // @@protoc_insertion_point(class_scope:image_match_indexer.pb.EmbedData)
 private:
  void set_has_image_id();
  void clear_has_image_id();
  void set_has_hash();
  void clear_has_hash();
  void set_has_porn_probability();
  void clear_has_porn_probability();
  void set_has_original_info();
  void clear_has_original_info();
  void set_has_annoy_index_meta();
  void clear_has_annoy_index_meta();
  void set_has_preview_info();
  void clear_has_preview_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::image_match_indexer::pb::EmbedData_OriginalInfo* original_info_;
  ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta_;
  ::image_match_indexer::pb::PreviewInfo* preview_info_;
  ::google::protobuf::int64 image_id_;
  ::google::protobuf::int64 hash_;
  float porn_probability_;
  friend struct protobuf_image_5fmatch_5findexer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DumpItem_Duplicate

// optional string full_url = 1;
inline bool DumpItem_Duplicate::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpItem_Duplicate::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpItem_Duplicate::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpItem_Duplicate::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
inline const ::std::string& DumpItem_Duplicate::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  return full_url_.Get();
}
inline void DumpItem_Duplicate::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
#if LANG_CXX11
inline void DumpItem_Duplicate::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
#endif
inline void DumpItem_Duplicate::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
inline void DumpItem_Duplicate::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
inline ::std::string* DumpItem_Duplicate::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_Duplicate::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_Duplicate::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.Duplicate.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DumpItem_Duplicate::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}
inline void DumpItem_Duplicate::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.Duplicate.full_url)
}

// optional float porn_probability = 2;
inline bool DumpItem_Duplicate::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpItem_Duplicate::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpItem_Duplicate::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpItem_Duplicate::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
inline float DumpItem_Duplicate::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.Duplicate.porn_probability)
  return porn_probability_;
}
inline void DumpItem_Duplicate::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.Duplicate.porn_probability)
}

// -------------------------------------------------------------------

// DumpItem_PageReference

// required string full_url = 1;
inline bool DumpItem_PageReference::has_full_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpItem_PageReference::set_has_full_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpItem_PageReference::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpItem_PageReference::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
inline const ::std::string& DumpItem_PageReference::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.PageReference.full_url)
  return full_url_.Get();
}
inline void DumpItem_PageReference::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
#if LANG_CXX11
inline void DumpItem_PageReference::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
#endif
inline void DumpItem_PageReference::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
inline void DumpItem_PageReference::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
inline ::std::string* DumpItem_PageReference::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.PageReference.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_PageReference::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.PageReference.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_PageReference::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.PageReference.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DumpItem_PageReference::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.PageReference.full_url)
}
inline void DumpItem_PageReference::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.PageReference.full_url)
}

// optional string snippet = 2;
inline bool DumpItem_PageReference::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpItem_PageReference::set_has_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpItem_PageReference::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpItem_PageReference::clear_snippet() {
  snippet_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_snippet();
}
inline const ::std::string& DumpItem_PageReference::snippet() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.PageReference.snippet)
  return snippet_.Get();
}
inline void DumpItem_PageReference::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
#if LANG_CXX11
inline void DumpItem_PageReference::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
#endif
inline void DumpItem_PageReference::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
inline void DumpItem_PageReference::set_snippet(const char* value,
    size_t size) {
  set_has_snippet();
  snippet_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
inline ::std::string* DumpItem_PageReference::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.PageReference.snippet)
  return snippet_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_PageReference::release_snippet() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.PageReference.snippet)
  clear_has_snippet();
  return snippet_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem_PageReference::unsafe_arena_release_snippet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.PageReference.snippet)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_snippet();
  return snippet_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DumpItem_PageReference::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.PageReference.snippet)
}
inline void DumpItem_PageReference::unsafe_arena_set_allocated_snippet(
    ::std::string* snippet) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snippet, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.PageReference.snippet)
}

// -------------------------------------------------------------------

// DumpItem

// optional bytes webpagesII_key = 1;
inline bool DumpItem::has_webpagesii_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpItem::set_has_webpagesii_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpItem::clear_has_webpagesii_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpItem::clear_webpagesii_key() {
  webpagesii_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_webpagesii_key();
}
inline const ::std::string& DumpItem::webpagesii_key() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.webpagesII_key)
  return webpagesii_key_.Get();
}
inline void DumpItem::set_webpagesii_key(const ::std::string& value) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.webpagesII_key)
}
#if LANG_CXX11
inline void DumpItem::set_webpagesii_key(::std::string&& value) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.webpagesII_key)
}
#endif
inline void DumpItem::set_webpagesii_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.webpagesII_key)
}
inline void DumpItem::set_webpagesii_key(const void* value,
    size_t size) {
  set_has_webpagesii_key();
  webpagesii_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.webpagesII_key)
}
inline ::std::string* DumpItem::mutable_webpagesii_key() {
  set_has_webpagesii_key();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.webpagesII_key)
  return webpagesii_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem::release_webpagesii_key() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.webpagesII_key)
  clear_has_webpagesii_key();
  return webpagesii_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem::unsafe_arena_release_webpagesii_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.webpagesII_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_webpagesii_key();
  return webpagesii_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DumpItem::set_allocated_webpagesii_key(::std::string* webpagesii_key) {
  if (webpagesii_key != NULL) {
    set_has_webpagesii_key();
  } else {
    clear_has_webpagesii_key();
  }
  webpagesii_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webpagesii_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.webpagesII_key)
}
inline void DumpItem::unsafe_arena_set_allocated_webpagesii_key(
    ::std::string* webpagesii_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (webpagesii_key != NULL) {
    set_has_webpagesii_key();
  } else {
    clear_has_webpagesii_key();
  }
  webpagesii_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      webpagesii_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.webpagesII_key)
}

// optional string full_url = 8;
inline bool DumpItem::has_full_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpItem::set_has_full_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpItem::clear_has_full_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpItem::clear_full_url() {
  full_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_full_url();
}
inline const ::std::string& DumpItem::full_url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.full_url)
  return full_url_.Get();
}
inline void DumpItem::set_full_url(const ::std::string& value) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.full_url)
}
#if LANG_CXX11
inline void DumpItem::set_full_url(::std::string&& value) {
  set_has_full_url();
  full_url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.DumpItem.full_url)
}
#endif
inline void DumpItem::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.DumpItem.full_url)
}
inline void DumpItem::set_full_url(const char* value,
    size_t size) {
  set_has_full_url();
  full_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.DumpItem.full_url)
}
inline ::std::string* DumpItem::mutable_full_url() {
  set_has_full_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.full_url)
  return full_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem::release_full_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.full_url)
  clear_has_full_url();
  return full_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DumpItem::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.DumpItem.full_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_full_url();
  return full_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DumpItem::set_allocated_full_url(::std::string* full_url) {
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.full_url)
}
inline void DumpItem::unsafe_arena_set_allocated_full_url(
    ::std::string* full_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_url != NULL) {
    set_has_full_url();
  } else {
    clear_has_full_url();
  }
  full_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.DumpItem.full_url)
}

// optional uint32 clicks_count = 2;
inline bool DumpItem::has_clicks_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DumpItem::set_has_clicks_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DumpItem::clear_has_clicks_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DumpItem::clear_clicks_count() {
  clicks_count_ = 0u;
  clear_has_clicks_count();
}
inline ::google::protobuf::uint32 DumpItem::clicks_count() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.clicks_count)
  return clicks_count_;
}
inline void DumpItem::set_clicks_count(::google::protobuf::uint32 value) {
  set_has_clicks_count();
  clicks_count_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.clicks_count)
}

// optional uint32 impressions_count = 3;
inline bool DumpItem::has_impressions_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DumpItem::set_has_impressions_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DumpItem::clear_has_impressions_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DumpItem::clear_impressions_count() {
  impressions_count_ = 0u;
  clear_has_impressions_count();
}
inline ::google::protobuf::uint32 DumpItem::impressions_count() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.impressions_count)
  return impressions_count_;
}
inline void DumpItem::set_impressions_count(::google::protobuf::uint32 value) {
  set_has_impressions_count();
  impressions_count_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.impressions_count)
}

// optional .ru.mail.go.webbase.blobs.ImageProps image_properties = 4;
inline bool DumpItem::has_image_properties() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DumpItem::set_has_image_properties() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DumpItem::clear_has_image_properties() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DumpItem::clear_image_properties() {
  if (image_properties_ != NULL) image_properties_->::ru::mail::go::webbase::blobs::ImageProps::Clear();
  clear_has_image_properties();
}
inline const ::ru::mail::go::webbase::blobs::ImageProps& DumpItem::image_properties() const {
  const ::ru::mail::go::webbase::blobs::ImageProps* p = image_properties_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_properties)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::ImageProps*>(
      &::ru::mail::go::webbase::blobs::_ImageProps_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::ImageProps* DumpItem::mutable_image_properties() {
  set_has_image_properties();
  if (image_properties_ == NULL) {
    _slow_mutable_image_properties();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_properties)
  return image_properties_;
}
inline ::ru::mail::go::webbase::blobs::ImageProps* DumpItem::release_image_properties() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_properties)
  clear_has_image_properties();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_properties();
  } else {
    ::ru::mail::go::webbase::blobs::ImageProps* temp = image_properties_;
    image_properties_ = NULL;
    return temp;
  }
}
inline  void DumpItem::set_allocated_image_properties(::ru::mail::go::webbase::blobs::ImageProps* image_properties) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_properties_;
  }
  if (image_properties != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_properties);
    }
  }
  image_properties_ = image_properties;
  if (image_properties) {
    set_has_image_properties();
  } else {
    clear_has_image_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_properties)
}

// optional .ru.mail.go.webbase.parsing.img.Thumb image_thumbnail = 7;
inline bool DumpItem::has_image_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DumpItem::set_has_image_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DumpItem::clear_has_image_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DumpItem::clear_image_thumbnail() {
  if (image_thumbnail_ != NULL) image_thumbnail_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_image_thumbnail();
}
inline const ::ru::mail::go::webbase::parsing::img::Thumb& DumpItem::image_thumbnail() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = image_thumbnail_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_thumbnail)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::mutable_image_thumbnail() {
  set_has_image_thumbnail();
  if (image_thumbnail_ == NULL) {
    _slow_mutable_image_thumbnail();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_thumbnail)
  return image_thumbnail_;
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* DumpItem::release_image_thumbnail() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_thumbnail)
  clear_has_image_thumbnail();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_thumbnail();
  } else {
    ::ru::mail::go::webbase::parsing::img::Thumb* temp = image_thumbnail_;
    image_thumbnail_ = NULL;
    return temp;
  }
}
inline  void DumpItem::set_allocated_image_thumbnail(::ru::mail::go::webbase::parsing::img::Thumb* image_thumbnail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_thumbnail_;
  }
  if (image_thumbnail != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_thumbnail);
    }
  }
  image_thumbnail_ = image_thumbnail;
  if (image_thumbnail) {
    set_has_image_thumbnail();
  } else {
    clear_has_image_thumbnail();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_thumbnail)
}

// optional bool put_image_embeddings_required = 10;
inline bool DumpItem::has_put_image_embeddings_required() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DumpItem::set_has_put_image_embeddings_required() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DumpItem::clear_has_put_image_embeddings_required() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DumpItem::clear_put_image_embeddings_required() {
  put_image_embeddings_required_ = false;
  clear_has_put_image_embeddings_required();
}
inline bool DumpItem::put_image_embeddings_required() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.put_image_embeddings_required)
  return put_image_embeddings_required_;
}
inline void DumpItem::set_put_image_embeddings_required(bool value) {
  set_has_put_image_embeddings_required();
  put_image_embeddings_required_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.put_image_embeddings_required)
}

// optional .qembedder.pb.Embedding image_embeddings = 9;
inline bool DumpItem::has_image_embeddings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DumpItem::set_has_image_embeddings() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DumpItem::clear_has_image_embeddings() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DumpItem::clear_image_embeddings() {
  if (image_embeddings_ != NULL) image_embeddings_->::qembedder::pb::Embedding::Clear();
  clear_has_image_embeddings();
}
inline const ::qembedder::pb::Embedding& DumpItem::image_embeddings() const {
  const ::qembedder::pb::Embedding* p = image_embeddings_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.image_embeddings)
  return p != NULL ? *p : *reinterpret_cast<const ::qembedder::pb::Embedding*>(
      &::qembedder::pb::_Embedding_default_instance_);
}
inline ::qembedder::pb::Embedding* DumpItem::mutable_image_embeddings() {
  set_has_image_embeddings();
  if (image_embeddings_ == NULL) {
    _slow_mutable_image_embeddings();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.image_embeddings)
  return image_embeddings_;
}
inline ::qembedder::pb::Embedding* DumpItem::release_image_embeddings() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.DumpItem.image_embeddings)
  clear_has_image_embeddings();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_embeddings();
  } else {
    ::qembedder::pb::Embedding* temp = image_embeddings_;
    image_embeddings_ = NULL;
    return temp;
  }
}
inline  void DumpItem::set_allocated_image_embeddings(::qembedder::pb::Embedding* image_embeddings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_embeddings_;
  }
  if (image_embeddings != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(image_embeddings);
    }
  }
  image_embeddings_ = image_embeddings;
  if (image_embeddings) {
    set_has_image_embeddings();
  } else {
    clear_has_image_embeddings();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.DumpItem.image_embeddings)
}

// optional float porn_probability = 11;
inline bool DumpItem::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DumpItem::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DumpItem::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DumpItem::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
inline float DumpItem::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.porn_probability)
  return porn_probability_;
}
inline void DumpItem::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.porn_probability)
}

// optional float min_porn_probability = 12;
inline bool DumpItem::has_min_porn_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DumpItem::set_has_min_porn_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DumpItem::clear_has_min_porn_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DumpItem::clear_min_porn_probability() {
  min_porn_probability_ = 0;
  clear_has_min_porn_probability();
}
inline float DumpItem::min_porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.min_porn_probability)
  return min_porn_probability_;
}
inline void DumpItem::set_min_porn_probability(float value) {
  set_has_min_porn_probability();
  min_porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.min_porn_probability)
}

// optional float max_porn_probability = 13;
inline bool DumpItem::has_max_porn_probability() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DumpItem::set_has_max_porn_probability() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DumpItem::clear_has_max_porn_probability() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DumpItem::clear_max_porn_probability() {
  max_porn_probability_ = 0;
  clear_has_max_porn_probability();
}
inline float DumpItem::max_porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.max_porn_probability)
  return max_porn_probability_;
}
inline void DumpItem::set_max_porn_probability(float value) {
  set_has_max_porn_probability();
  max_porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.max_porn_probability)
}

// optional bool put_porn_probability_required = 15;
inline bool DumpItem::has_put_porn_probability_required() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DumpItem::set_has_put_porn_probability_required() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DumpItem::clear_has_put_porn_probability_required() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DumpItem::clear_put_porn_probability_required() {
  put_porn_probability_required_ = false;
  clear_has_put_porn_probability_required();
}
inline bool DumpItem::put_porn_probability_required() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.put_porn_probability_required)
  return put_porn_probability_required_;
}
inline void DumpItem::set_put_porn_probability_required(bool value) {
  set_has_put_porn_probability_required();
  put_porn_probability_required_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.DumpItem.put_porn_probability_required)
}

// repeated .image_match_indexer.pb.DumpItem.Duplicate duplicates = 14;
inline int DumpItem::duplicates_size() const {
  return duplicates_.size();
}
inline void DumpItem::clear_duplicates() {
  duplicates_.Clear();
}
inline const ::image_match_indexer::pb::DumpItem_Duplicate& DumpItem::duplicates(int index) const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Get(index);
}
inline ::image_match_indexer::pb::DumpItem_Duplicate* DumpItem::mutable_duplicates(int index) {
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Mutable(index);
}
inline ::image_match_indexer::pb::DumpItem_Duplicate* DumpItem::add_duplicates() {
  // @@protoc_insertion_point(field_add:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >*
DumpItem::mutable_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:image_match_indexer.pb.DumpItem.duplicates)
  return &duplicates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_Duplicate >&
DumpItem::duplicates() const {
  // @@protoc_insertion_point(field_list:image_match_indexer.pb.DumpItem.duplicates)
  return duplicates_;
}

// repeated .image_match_indexer.pb.DumpItem.PageReference ref = 16;
inline int DumpItem::ref_size() const {
  return ref_.size();
}
inline void DumpItem::clear_ref() {
  ref_.Clear();
}
inline const ::image_match_indexer::pb::DumpItem_PageReference& DumpItem::ref(int index) const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.DumpItem.ref)
  return ref_.Get(index);
}
inline ::image_match_indexer::pb::DumpItem_PageReference* DumpItem::mutable_ref(int index) {
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.DumpItem.ref)
  return ref_.Mutable(index);
}
inline ::image_match_indexer::pb::DumpItem_PageReference* DumpItem::add_ref() {
  // @@protoc_insertion_point(field_add:image_match_indexer.pb.DumpItem.ref)
  return ref_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >*
DumpItem::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:image_match_indexer.pb.DumpItem.ref)
  return &ref_;
}
inline const ::google::protobuf::RepeatedPtrField< ::image_match_indexer::pb::DumpItem_PageReference >&
DumpItem::ref() const {
  // @@protoc_insertion_point(field_list:image_match_indexer.pb.DumpItem.ref)
  return ref_;
}

// -------------------------------------------------------------------

// PreviewInfo

// required string preview_key = 1;
inline bool PreviewInfo::has_preview_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreviewInfo::set_has_preview_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreviewInfo::clear_has_preview_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreviewInfo::clear_preview_key() {
  preview_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_preview_key();
}
inline const ::std::string& PreviewInfo::preview_key() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_key)
  return preview_key_.Get();
}
inline void PreviewInfo::set_preview_key(const ::std::string& value) {
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_key)
}
#if LANG_CXX11
inline void PreviewInfo::set_preview_key(::std::string&& value) {
  set_has_preview_key();
  preview_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.PreviewInfo.preview_key)
}
#endif
inline void PreviewInfo::set_preview_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.PreviewInfo.preview_key)
}
inline void PreviewInfo::set_preview_key(const char* value,
    size_t size) {
  set_has_preview_key();
  preview_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.PreviewInfo.preview_key)
}
inline ::std::string* PreviewInfo::mutable_preview_key() {
  set_has_preview_key();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.PreviewInfo.preview_key)
  return preview_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PreviewInfo::release_preview_key() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.PreviewInfo.preview_key)
  clear_has_preview_key();
  return preview_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PreviewInfo::unsafe_arena_release_preview_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.PreviewInfo.preview_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_preview_key();
  return preview_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PreviewInfo::set_allocated_preview_key(::std::string* preview_key) {
  if (preview_key != NULL) {
    set_has_preview_key();
  } else {
    clear_has_preview_key();
  }
  preview_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.PreviewInfo.preview_key)
}
inline void PreviewInfo::unsafe_arena_set_allocated_preview_key(
    ::std::string* preview_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (preview_key != NULL) {
    set_has_preview_key();
  } else {
    clear_has_preview_key();
  }
  preview_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      preview_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.PreviewInfo.preview_key)
}

// required string preview_db_num = 2;
inline bool PreviewInfo::has_preview_db_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreviewInfo::set_has_preview_db_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreviewInfo::clear_has_preview_db_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreviewInfo::clear_preview_db_num() {
  preview_db_num_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_preview_db_num();
}
inline const ::std::string& PreviewInfo::preview_db_num() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_db_num)
  return preview_db_num_.Get();
}
inline void PreviewInfo::set_preview_db_num(const ::std::string& value) {
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
#if LANG_CXX11
inline void PreviewInfo::set_preview_db_num(::std::string&& value) {
  set_has_preview_db_num();
  preview_db_num_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
#endif
inline void PreviewInfo::set_preview_db_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
inline void PreviewInfo::set_preview_db_num(const char* value,
    size_t size) {
  set_has_preview_db_num();
  preview_db_num_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
inline ::std::string* PreviewInfo::mutable_preview_db_num() {
  set_has_preview_db_num();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.PreviewInfo.preview_db_num)
  return preview_db_num_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PreviewInfo::release_preview_db_num() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.PreviewInfo.preview_db_num)
  clear_has_preview_db_num();
  return preview_db_num_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PreviewInfo::unsafe_arena_release_preview_db_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.PreviewInfo.preview_db_num)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_preview_db_num();
  return preview_db_num_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PreviewInfo::set_allocated_preview_db_num(::std::string* preview_db_num) {
  if (preview_db_num != NULL) {
    set_has_preview_db_num();
  } else {
    clear_has_preview_db_num();
  }
  preview_db_num_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_db_num,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.PreviewInfo.preview_db_num)
}
inline void PreviewInfo::unsafe_arena_set_allocated_preview_db_num(
    ::std::string* preview_db_num) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (preview_db_num != NULL) {
    set_has_preview_db_num();
  } else {
    clear_has_preview_db_num();
  }
  preview_db_num_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      preview_db_num, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.PreviewInfo.preview_db_num)
}

// optional fixed32 preview_height = 3;
inline bool PreviewInfo::has_preview_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PreviewInfo::set_has_preview_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PreviewInfo::clear_has_preview_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PreviewInfo::clear_preview_height() {
  preview_height_ = 0u;
  clear_has_preview_height();
}
inline ::google::protobuf::uint32 PreviewInfo::preview_height() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_height)
  return preview_height_;
}
inline void PreviewInfo::set_preview_height(::google::protobuf::uint32 value) {
  set_has_preview_height();
  preview_height_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_height)
}

// optional fixed32 preview_width = 4;
inline bool PreviewInfo::has_preview_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PreviewInfo::set_has_preview_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PreviewInfo::clear_has_preview_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PreviewInfo::clear_preview_width() {
  preview_width_ = 0u;
  clear_has_preview_width();
}
inline ::google::protobuf::uint32 PreviewInfo::preview_width() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.PreviewInfo.preview_width)
  return preview_width_;
}
inline void PreviewInfo::set_preview_width(::google::protobuf::uint32 value) {
  set_has_preview_width();
  preview_width_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.PreviewInfo.preview_width)
}

// -------------------------------------------------------------------

// EmbedderOut

// required bytes data = 1;
inline bool EmbedderOut::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedderOut::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedderOut::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedderOut::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& EmbedderOut::data() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedderOut.data)
  return data_.Get();
}
inline void EmbedderOut::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedderOut.data)
}
#if LANG_CXX11
inline void EmbedderOut::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedderOut.data)
}
#endif
inline void EmbedderOut::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedderOut.data)
}
inline void EmbedderOut::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedderOut.data)
}
inline ::std::string* EmbedderOut::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedderOut.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedderOut::release_data() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedderOut.data)
  clear_has_data();
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedderOut::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedderOut.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EmbedderOut::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedderOut.data)
}
inline void EmbedderOut::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedderOut.data)
}

// required string url = 2;
inline bool EmbedderOut::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedderOut::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedderOut::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedderOut::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
inline const ::std::string& EmbedderOut::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedderOut.url)
  return url_.Get();
}
inline void EmbedderOut::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedderOut.url)
}
#if LANG_CXX11
inline void EmbedderOut::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedderOut.url)
}
#endif
inline void EmbedderOut::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedderOut.url)
}
inline void EmbedderOut::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedderOut.url)
}
inline ::std::string* EmbedderOut::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedderOut.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedderOut::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedderOut.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedderOut::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedderOut.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EmbedderOut::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedderOut.url)
}
inline void EmbedderOut::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedderOut.url)
}

// -------------------------------------------------------------------

// Embedding

// required bytes data = 1;
inline bool Embedding::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Embedding::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Embedding::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Embedding::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_data();
}
inline const ::std::string& Embedding::data() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.data)
  return data_.Get();
}
inline void Embedding::set_data(const ::std::string& value) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.data)
}
#if LANG_CXX11
inline void Embedding::set_data(::std::string&& value) {
  set_has_data();
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.Embedding.data)
}
#endif
inline void Embedding::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.Embedding.data)
}
inline void Embedding::set_data(const void* value,
    size_t size) {
  set_has_data();
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.Embedding.data)
}
inline ::std::string* Embedding::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Embedding::release_data() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.data)
  clear_has_data();
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Embedding::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.Embedding.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_data();
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Embedding::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.data)
}
inline void Embedding::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.Embedding.data)
}

// required string url = 2;
inline bool Embedding::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Embedding::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Embedding::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Embedding::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
inline const ::std::string& Embedding::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.url)
  return url_.Get();
}
inline void Embedding::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.url)
}
#if LANG_CXX11
inline void Embedding::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.Embedding.url)
}
#endif
inline void Embedding::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.Embedding.url)
}
inline void Embedding::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.Embedding.url)
}
inline ::std::string* Embedding::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Embedding::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Embedding::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.Embedding.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Embedding::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.url)
}
inline void Embedding::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.Embedding.url)
}

// optional sfixed64 hash = 3;
inline bool Embedding::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Embedding::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Embedding::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Embedding::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::int64 Embedding::hash() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.hash)
  return hash_;
}
inline void Embedding::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.hash)
}

// optional .image_match_indexer.pb.PreviewInfo preview_info = 4;
inline bool Embedding::has_preview_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Embedding::set_has_preview_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Embedding::clear_has_preview_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Embedding::clear_preview_info() {
  if (preview_info_ != NULL) preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
  clear_has_preview_info();
}
inline const ::image_match_indexer::pb::PreviewInfo& Embedding::preview_info() const {
  const ::image_match_indexer::pb::PreviewInfo* p = preview_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::PreviewInfo*>(
      &::image_match_indexer::pb::_PreviewInfo_default_instance_);
}
inline ::image_match_indexer::pb::PreviewInfo* Embedding::mutable_preview_info() {
  set_has_preview_info();
  if (preview_info_ == NULL) {
    _slow_mutable_preview_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.Embedding.preview_info)
  return preview_info_;
}
inline ::image_match_indexer::pb::PreviewInfo* Embedding::release_preview_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.Embedding.preview_info)
  clear_has_preview_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_preview_info();
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
    preview_info_ = NULL;
    return temp;
  }
}
inline  void Embedding::set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete preview_info_;
  }
  if (preview_info != NULL) {
    _slow_set_allocated_preview_info(message_arena, &preview_info);
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.Embedding.preview_info)
}

// optional float porn_probability = 5;
inline bool Embedding::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Embedding::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Embedding::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Embedding::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
inline float Embedding::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.Embedding.porn_probability)
  return porn_probability_;
}
inline void Embedding::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.Embedding.porn_probability)
}

// -------------------------------------------------------------------

// EmbedData_OriginalInfo

// required string url = 1;
inline bool EmbedData_OriginalInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedData_OriginalInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedData_OriginalInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedData_OriginalInfo::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
inline const ::std::string& EmbedData_OriginalInfo::url() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  return url_.Get();
}
inline void EmbedData_OriginalInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
#if LANG_CXX11
inline void EmbedData_OriginalInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
#endif
inline void EmbedData_OriginalInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
inline void EmbedData_OriginalInfo::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
inline ::std::string* EmbedData_OriginalInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedData_OriginalInfo::release_url() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EmbedData_OriginalInfo::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:image_match_indexer.pb.EmbedData.OriginalInfo.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EmbedData_OriginalInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}
inline void EmbedData_OriginalInfo::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:image_match_indexer.pb.EmbedData.OriginalInfo.url)
}

// -------------------------------------------------------------------

// EmbedData_AnnoyIndexMeta

// required uint32 annoy_idx_id = 1;
inline bool EmbedData_AnnoyIndexMeta::has_annoy_idx_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedData_AnnoyIndexMeta::set_has_annoy_idx_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedData_AnnoyIndexMeta::clear_has_annoy_idx_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedData_AnnoyIndexMeta::clear_annoy_idx_id() {
  annoy_idx_id_ = 0u;
  clear_has_annoy_idx_id();
}
inline ::google::protobuf::uint32 EmbedData_AnnoyIndexMeta::annoy_idx_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_idx_id)
  return annoy_idx_id_;
}
inline void EmbedData_AnnoyIndexMeta::set_annoy_idx_id(::google::protobuf::uint32 value) {
  set_has_annoy_idx_id();
  annoy_idx_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_idx_id)
}

// required uint32 annoy_img_id = 2;
inline bool EmbedData_AnnoyIndexMeta::has_annoy_img_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedData_AnnoyIndexMeta::set_has_annoy_img_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedData_AnnoyIndexMeta::clear_has_annoy_img_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedData_AnnoyIndexMeta::clear_annoy_img_id() {
  annoy_img_id_ = 0u;
  clear_has_annoy_img_id();
}
inline ::google::protobuf::uint32 EmbedData_AnnoyIndexMeta::annoy_img_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_img_id)
  return annoy_img_id_;
}
inline void EmbedData_AnnoyIndexMeta::set_annoy_img_id(::google::protobuf::uint32 value) {
  set_has_annoy_img_id();
  annoy_img_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.AnnoyIndexMeta.annoy_img_id)
}

// -------------------------------------------------------------------

// EmbedData

// required sfixed64 image_id = 1;
inline bool EmbedData::has_image_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedData::set_has_image_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedData::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedData::clear_image_id() {
  image_id_ = GOOGLE_LONGLONG(0);
  clear_has_image_id();
}
inline ::google::protobuf::int64 EmbedData::image_id() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.image_id)
  return image_id_;
}
inline void EmbedData::set_image_id(::google::protobuf::int64 value) {
  set_has_image_id();
  image_id_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.image_id)
}

// optional sfixed64 hash = 2;
inline bool EmbedData::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedData::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedData::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedData::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::int64 EmbedData::hash() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.hash)
  return hash_;
}
inline void EmbedData::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.hash)
}

// optional float porn_probability = 6;
inline bool EmbedData::has_porn_probability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmbedData::set_has_porn_probability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmbedData::clear_has_porn_probability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmbedData::clear_porn_probability() {
  porn_probability_ = 0;
  clear_has_porn_probability();
}
inline float EmbedData::porn_probability() const {
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.porn_probability)
  return porn_probability_;
}
inline void EmbedData::set_porn_probability(float value) {
  set_has_porn_probability();
  porn_probability_ = value;
  // @@protoc_insertion_point(field_set:image_match_indexer.pb.EmbedData.porn_probability)
}

// optional .image_match_indexer.pb.EmbedData.OriginalInfo original_info = 3;
inline bool EmbedData::has_original_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedData::set_has_original_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::image_match_indexer::pb::EmbedData_OriginalInfo::Clear();
  clear_has_original_info();
}
inline const ::image_match_indexer::pb::EmbedData_OriginalInfo& EmbedData::original_info() const {
  const ::image_match_indexer::pb::EmbedData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::EmbedData_OriginalInfo*>(
      &::image_match_indexer::pb::_EmbedData_OriginalInfo_default_instance_);
}
inline ::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.original_info)
  return original_info_;
}
inline ::image_match_indexer::pb::EmbedData_OriginalInfo* EmbedData::release_original_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::image_match_indexer::pb::EmbedData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
inline  void EmbedData::set_allocated_original_info(::image_match_indexer::pb::EmbedData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.original_info)
}

// optional .image_match_indexer.pb.EmbedData.AnnoyIndexMeta annoy_index_meta = 4;
inline bool EmbedData::has_annoy_index_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedData::set_has_annoy_index_meta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedData::clear_has_annoy_index_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedData::clear_annoy_index_meta() {
  if (annoy_index_meta_ != NULL) annoy_index_meta_->::image_match_indexer::pb::EmbedData_AnnoyIndexMeta::Clear();
  clear_has_annoy_index_meta();
}
inline const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta& EmbedData::annoy_index_meta() const {
  const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* p = annoy_index_meta_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.annoy_index_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta*>(
      &::image_match_indexer::pb::_EmbedData_AnnoyIndexMeta_default_instance_);
}
inline ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::mutable_annoy_index_meta() {
  set_has_annoy_index_meta();
  if (annoy_index_meta_ == NULL) {
    _slow_mutable_annoy_index_meta();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.annoy_index_meta)
  return annoy_index_meta_;
}
inline ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* EmbedData::release_annoy_index_meta() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.annoy_index_meta)
  clear_has_annoy_index_meta();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_annoy_index_meta();
  } else {
    ::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* temp = annoy_index_meta_;
    annoy_index_meta_ = NULL;
    return temp;
  }
}
inline  void EmbedData::set_allocated_annoy_index_meta(::image_match_indexer::pb::EmbedData_AnnoyIndexMeta* annoy_index_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete annoy_index_meta_;
  }
  if (annoy_index_meta != NULL) {
    _slow_set_allocated_annoy_index_meta(message_arena, &annoy_index_meta);
  }
  annoy_index_meta_ = annoy_index_meta;
  if (annoy_index_meta) {
    set_has_annoy_index_meta();
  } else {
    clear_has_annoy_index_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.annoy_index_meta)
}

// optional .image_match_indexer.pb.PreviewInfo preview_info = 5;
inline bool EmbedData::has_preview_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedData::set_has_preview_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedData::clear_has_preview_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedData::clear_preview_info() {
  if (preview_info_ != NULL) preview_info_->::image_match_indexer::pb::PreviewInfo::Clear();
  clear_has_preview_info();
}
inline const ::image_match_indexer::pb::PreviewInfo& EmbedData::preview_info() const {
  const ::image_match_indexer::pb::PreviewInfo* p = preview_info_;
  // @@protoc_insertion_point(field_get:image_match_indexer.pb.EmbedData.preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::image_match_indexer::pb::PreviewInfo*>(
      &::image_match_indexer::pb::_PreviewInfo_default_instance_);
}
inline ::image_match_indexer::pb::PreviewInfo* EmbedData::mutable_preview_info() {
  set_has_preview_info();
  if (preview_info_ == NULL) {
    _slow_mutable_preview_info();
  }
  // @@protoc_insertion_point(field_mutable:image_match_indexer.pb.EmbedData.preview_info)
  return preview_info_;
}
inline ::image_match_indexer::pb::PreviewInfo* EmbedData::release_preview_info() {
  // @@protoc_insertion_point(field_release:image_match_indexer.pb.EmbedData.preview_info)
  clear_has_preview_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_preview_info();
  } else {
    ::image_match_indexer::pb::PreviewInfo* temp = preview_info_;
    preview_info_ = NULL;
    return temp;
  }
}
inline  void EmbedData::set_allocated_preview_info(::image_match_indexer::pb::PreviewInfo* preview_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete preview_info_;
  }
  if (preview_info != NULL) {
    _slow_set_allocated_preview_info(message_arena, &preview_info);
  }
  preview_info_ = preview_info;
  if (preview_info) {
    set_has_preview_info();
  } else {
    clear_has_preview_info();
  }
  // @@protoc_insertion_point(field_set_allocated:image_match_indexer.pb.EmbedData.preview_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace image_match_indexer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_5fmatch_5findexer_2eproto__INCLUDED
