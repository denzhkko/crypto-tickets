// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infholder_blobs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "infholder_blobs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class TransferDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransferDoc>
     _instance;
} _TransferDoc_default_instance_;
class NavigLinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NavigLink>
     _instance;
} _NavigLink_default_instance_;
class CleanDocDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CleanDoc>
     _instance;
} _CleanDoc_default_instance_;
class infholderBlobDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<infholderBlob>
     _instance;
} _infholderBlob_default_instance_;

namespace protobuf_infholder_5fblobs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, sdd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferDoc, sm_),
  3,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigLink, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, clean_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, navig_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanDoc, num_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infholderBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infholderBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infholderBlob, docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infholderBlob, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(infholderBlob, profiles_),
  ~0u,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(TransferDoc)},
  { 13, 19, sizeof(NavigLink)},
  { 20, 30, sizeof(CleanDoc)},
  { 35, 43, sizeof(infholderBlob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_infholderBlob_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "infholder_blobs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::sekitei::protobuf_sekitei_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::InitDefaults();
  _TransferDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransferDoc_default_instance_);_NavigLink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NavigLink_default_instance_);_CleanDoc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CleanDoc_default_instance_);_infholderBlob_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_infholderBlob_default_instance_);_TransferDoc_default_instance_._instance.get_mutable()->sdd_ = const_cast< ::ru::mail::go::webbase::blobs::OriginalDoc*>(
      ::ru::mail::go::webbase::blobs::OriginalDoc::internal_default_instance());
  _TransferDoc_default_instance_._instance.get_mutable()->sm_ = const_cast< ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      ::ru::mail::go::webbase::sekitei::Sekitei_m::internal_default_instance());
  _CleanDoc_default_instance_._instance.get_mutable()->data_ = const_cast< ::ru::mail::go::webbase::blobs::RegionBlob*>(
      ::ru::mail::go::webbase::blobs::RegionBlob::internal_default_instance());
  _CleanDoc_default_instance_._instance.get_mutable()->clean_data_ = const_cast< ::ru::mail::go::webbase::blobs::RegionBlob*>(
      ::ru::mail::go::webbase::blobs::RegionBlob::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025infholder_blobs.proto\022\030ru.mail.go.webb"
      "ase.blobs\032\rsekitei.proto\032\020doc_parser.pro"
      "to\"\350\001\n\013TransferDoc\022@\n\004type\030\001 \002(\01622.ru.ma"
      "il.go.webbase.blobs.TransferDoc.transfer"
      "Type\0222\n\003sdd\030\002 \001(\0132%.ru.mail.go.webbase.b"
      "lobs.OriginalDoc\022\014\n\004base\030\003 \001(\t\0221\n\002sm\030\004 \001"
      "(\0132%.ru.mail.go.webbase.sekitei.Sekitei_"
      "m\"\"\n\014transferType\022\010\n\004host\020\001\022\010\n\004page\020\002\"\030\n"
      "\tNavigLink\022\013\n\003url\030\001 \002(\t\"\313\001\n\010CleanDoc\022\013\n\003"
      "url\030\001 \002(\t\0222\n\004data\030\002 \001(\0132$.ru.mail.go.web"
      "base.blobs.RegionBlob\0228\n\nclean_data\030\003 \001("
      "\0132$.ru.mail.go.webbase.blobs.RegionBlob\022"
      "7\n\nnavig_urls\030\004 \003(\0132#.ru.mail.go.webbase"
      ".blobs.NavigLink\022\013\n\003num\030\005 \001(\005\"\363\001\n\rinfhol"
      "derBlob\0220\n\004docs\030\001 \003(\0132\".ru.mail.go.webba"
      "se.blobs.CleanDoc\022E\n\005state\030\002 \001(\01626.ru.ma"
      "il.go.webbase.blobs.infholderBlob.Infhol"
      "derState\0227\n\010profiles\030\003 \003(\0132%.ru.mail.go."
      "webbase.blobs.ProfileInfo\"0\n\016InfholderSt"
      "ate\022\006\n\002ok\020\001\022\013\n\007cut_all\020\002\022\t\n\005error\020\003B\020B\016I"
      "nfholderBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 813);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "infholder_blobs.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::sekitei::protobuf_sekitei_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_doc_5fparser_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_infholder_5fblobs_2eproto

const ::google::protobuf::EnumDescriptor* TransferDoc_transferType_descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_enum_descriptors[0];
}
bool TransferDoc_transferType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransferDoc_transferType TransferDoc::host;
const TransferDoc_transferType TransferDoc::page;
const TransferDoc_transferType TransferDoc::transferType_MIN;
const TransferDoc_transferType TransferDoc::transferType_MAX;
const int TransferDoc::transferType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* infholderBlob_InfholderState_descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_enum_descriptors[1];
}
bool infholderBlob_InfholderState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const infholderBlob_InfholderState infholderBlob::ok;
const infholderBlob_InfholderState infholderBlob::cut_all;
const infholderBlob_InfholderState infholderBlob::error;
const infholderBlob_InfholderState infholderBlob::InfholderState_MIN;
const infholderBlob_InfholderState infholderBlob::InfholderState_MAX;
const int infholderBlob::InfholderState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferDoc::kTypeFieldNumber;
const int TransferDoc::kSddFieldNumber;
const int TransferDoc::kBaseFieldNumber;
const int TransferDoc::kSmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferDoc::TransferDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_infholder_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.TransferDoc)
}
TransferDoc::TransferDoc(const TransferDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base()) {
    base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_);
  }
  if (from.has_sdd()) {
    sdd_ = new ::ru::mail::go::webbase::blobs::OriginalDoc(*from.sdd_);
  } else {
    sdd_ = NULL;
  }
  if (from.has_sm()) {
    sm_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m(*from.sm_);
  } else {
    sm_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.TransferDoc)
}

void TransferDoc::SharedCtor() {
  _cached_size_ = 0;
  base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sdd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sm_) -
      reinterpret_cast<char*>(&sdd_)) + sizeof(sm_));
  type_ = 1;
}

TransferDoc::~TransferDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.TransferDoc)
  SharedDtor();
}

void TransferDoc::SharedDtor() {
  base_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sdd_;
  if (this != internal_default_instance()) delete sm_;
}

void TransferDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferDoc::descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferDoc& TransferDoc::default_instance() {
  protobuf_infholder_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferDoc* TransferDoc::New(::google::protobuf::Arena* arena) const {
  TransferDoc* n = new TransferDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.TransferDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!base_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*base_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sdd_ != NULL);
      sdd_->::ru::mail::go::webbase::blobs::OriginalDoc::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sm_ != NULL);
      sm_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.TransferDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.TransferDoc.transferType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::TransferDoc_transferType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::TransferDoc_transferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.OriginalDoc sdd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sdd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base().data(), static_cast<int>(this->base().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.TransferDoc.base");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.sekitei.Sekitei_m sm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.TransferDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.TransferDoc)
  return false;
#undef DO_
}

void TransferDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.TransferDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.TransferDoc.transferType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.blobs.OriginalDoc sdd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sdd_, output);
  }

  // optional string base = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base().data(), static_cast<int>(this->base().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TransferDoc.base");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base(), output);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sm = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sm_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.TransferDoc)
}

::google::protobuf::uint8* TransferDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.TransferDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.TransferDoc.transferType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.blobs.OriginalDoc sdd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sdd_, deterministic, target);
  }

  // optional string base = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base().data(), static_cast<int>(this->base().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.TransferDoc.base");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->base(), target);
  }

  // optional .ru.mail.go.webbase.sekitei.Sekitei_m sm = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sm_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.TransferDoc)
  return target;
}

size_t TransferDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.TransferDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.TransferDoc.transferType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base());
    }

    // optional .ru.mail.go.webbase.blobs.OriginalDoc sdd = 2;
    if (has_sdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sdd_);
    }

    // optional .ru.mail.go.webbase.sekitei.Sekitei_m sm = 4;
    if (has_sm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sm_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.TransferDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.TransferDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.TransferDoc)
    MergeFrom(*source);
  }
}

void TransferDoc::MergeFrom(const TransferDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.TransferDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_base();
      base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sdd()->::ru::mail::go::webbase::blobs::OriginalDoc::MergeFrom(from.sdd());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sm()->::ru::mail::go::webbase::sekitei::Sekitei_m::MergeFrom(from.sm());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.TransferDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDoc::CopyFrom(const TransferDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.TransferDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_sdd()) {
    if (!this->sdd_->IsInitialized()) return false;
  }
  if (has_sm()) {
    if (!this->sm_->IsInitialized()) return false;
  }
  return true;
}

void TransferDoc::Swap(TransferDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferDoc::InternalSwap(TransferDoc* other) {
  using std::swap;
  base_.Swap(&other->base_);
  swap(sdd_, other->sdd_);
  swap(sm_, other->sm_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferDoc::GetMetadata() const {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferDoc

// required .ru.mail.go.webbase.blobs.TransferDoc.transferType type = 1;
bool TransferDoc::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransferDoc::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void TransferDoc::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransferDoc::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::TransferDoc_transferType TransferDoc::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TransferDoc.type)
  return static_cast< ::ru::mail::go::webbase::blobs::TransferDoc_transferType >(type_);
}
void TransferDoc::set_type(::ru::mail::go::webbase::blobs::TransferDoc_transferType value) {
  assert(::ru::mail::go::webbase::blobs::TransferDoc_transferType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TransferDoc.type)
}

// optional .ru.mail.go.webbase.blobs.OriginalDoc sdd = 2;
bool TransferDoc::has_sdd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransferDoc::set_has_sdd() {
  _has_bits_[0] |= 0x00000002u;
}
void TransferDoc::clear_has_sdd() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransferDoc::clear_sdd() {
  if (sdd_ != NULL) sdd_->::ru::mail::go::webbase::blobs::OriginalDoc::Clear();
  clear_has_sdd();
}
const ::ru::mail::go::webbase::blobs::OriginalDoc& TransferDoc::sdd() const {
  const ::ru::mail::go::webbase::blobs::OriginalDoc* p = sdd_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TransferDoc.sdd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::OriginalDoc*>(
      &::ru::mail::go::webbase::blobs::_OriginalDoc_default_instance_);
}
::ru::mail::go::webbase::blobs::OriginalDoc* TransferDoc::mutable_sdd() {
  set_has_sdd();
  if (sdd_ == NULL) {
    sdd_ = new ::ru::mail::go::webbase::blobs::OriginalDoc;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TransferDoc.sdd)
  return sdd_;
}
::ru::mail::go::webbase::blobs::OriginalDoc* TransferDoc::release_sdd() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TransferDoc.sdd)
  clear_has_sdd();
  ::ru::mail::go::webbase::blobs::OriginalDoc* temp = sdd_;
  sdd_ = NULL;
  return temp;
}
void TransferDoc::set_allocated_sdd(::ru::mail::go::webbase::blobs::OriginalDoc* sdd) {
  delete sdd_;
  sdd_ = sdd;
  if (sdd) {
    set_has_sdd();
  } else {
    clear_has_sdd();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TransferDoc.sdd)
}

// optional string base = 3;
bool TransferDoc::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransferDoc::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void TransferDoc::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransferDoc::clear_base() {
  base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base();
}
const ::std::string& TransferDoc::base() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TransferDoc.base)
  return base_.GetNoArena();
}
void TransferDoc::set_base(const ::std::string& value) {
  set_has_base();
  base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.TransferDoc.base)
}
#if LANG_CXX11
void TransferDoc::set_base(::std::string&& value) {
  set_has_base();
  base_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.TransferDoc.base)
}
#endif
void TransferDoc::set_base(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base();
  base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.TransferDoc.base)
}
void TransferDoc::set_base(const char* value, size_t size) {
  set_has_base();
  base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.TransferDoc.base)
}
::std::string* TransferDoc::mutable_base() {
  set_has_base();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TransferDoc.base)
  return base_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferDoc::release_base() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TransferDoc.base)
  clear_has_base();
  return base_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferDoc::set_allocated_base(::std::string* base) {
  if (base != NULL) {
    set_has_base();
  } else {
    clear_has_base();
  }
  base_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TransferDoc.base)
}

// optional .ru.mail.go.webbase.sekitei.Sekitei_m sm = 4;
bool TransferDoc::has_sm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransferDoc::set_has_sm() {
  _has_bits_[0] |= 0x00000004u;
}
void TransferDoc::clear_has_sm() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransferDoc::clear_sm() {
  if (sm_ != NULL) sm_->::ru::mail::go::webbase::sekitei::Sekitei_m::Clear();
  clear_has_sm();
}
const ::ru::mail::go::webbase::sekitei::Sekitei_m& TransferDoc::sm() const {
  const ::ru::mail::go::webbase::sekitei::Sekitei_m* p = sm_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.TransferDoc.sm)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::sekitei::Sekitei_m*>(
      &::ru::mail::go::webbase::sekitei::_Sekitei_m_default_instance_);
}
::ru::mail::go::webbase::sekitei::Sekitei_m* TransferDoc::mutable_sm() {
  set_has_sm();
  if (sm_ == NULL) {
    sm_ = new ::ru::mail::go::webbase::sekitei::Sekitei_m;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.TransferDoc.sm)
  return sm_;
}
::ru::mail::go::webbase::sekitei::Sekitei_m* TransferDoc::release_sm() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.TransferDoc.sm)
  clear_has_sm();
  ::ru::mail::go::webbase::sekitei::Sekitei_m* temp = sm_;
  sm_ = NULL;
  return temp;
}
void TransferDoc::set_allocated_sm(::ru::mail::go::webbase::sekitei::Sekitei_m* sm) {
  delete sm_;
  sm_ = sm;
  if (sm) {
    set_has_sm();
  } else {
    clear_has_sm();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.TransferDoc.sm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigLink::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigLink::NavigLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_infholder_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.NavigLink)
}
NavigLink::NavigLink(const NavigLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.NavigLink)
}

void NavigLink::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NavigLink::~NavigLink() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.NavigLink)
  SharedDtor();
}

void NavigLink::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NavigLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigLink::descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigLink& NavigLink::default_instance() {
  protobuf_infholder_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigLink* NavigLink::New(::google::protobuf::Arena* arena) const {
  NavigLink* n = new NavigLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigLink::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.NavigLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.NavigLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.NavigLink.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.NavigLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.NavigLink)
  return false;
#undef DO_
}

void NavigLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.NavigLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.NavigLink.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.NavigLink)
}

::google::protobuf::uint8* NavigLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.NavigLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.NavigLink.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.NavigLink)
  return target;
}

size_t NavigLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.NavigLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.NavigLink)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.NavigLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.NavigLink)
    MergeFrom(*source);
  }
}

void NavigLink::MergeFrom(const NavigLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.NavigLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void NavigLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.NavigLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigLink::CopyFrom(const NavigLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.NavigLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NavigLink::Swap(NavigLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigLink::InternalSwap(NavigLink* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigLink::GetMetadata() const {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigLink

// required string url = 1;
bool NavigLink::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigLink::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigLink::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigLink::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& NavigLink::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.NavigLink.url)
  return url_.GetNoArena();
}
void NavigLink::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.NavigLink.url)
}
#if LANG_CXX11
void NavigLink::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.NavigLink.url)
}
#endif
void NavigLink::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.NavigLink.url)
}
void NavigLink::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.NavigLink.url)
}
::std::string* NavigLink::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.NavigLink.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NavigLink::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.NavigLink.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NavigLink::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.NavigLink.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanDoc::kUrlFieldNumber;
const int CleanDoc::kDataFieldNumber;
const int CleanDoc::kCleanDataFieldNumber;
const int CleanDoc::kNavigUrlsFieldNumber;
const int CleanDoc::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanDoc::CleanDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_infholder_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CleanDoc)
}
CleanDoc::CleanDoc(const CleanDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      navig_urls_(from.navig_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_data()) {
    data_ = new ::ru::mail::go::webbase::blobs::RegionBlob(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_clean_data()) {
    clean_data_ = new ::ru::mail::go::webbase::blobs::RegionBlob(*from.clean_data_);
  } else {
    clean_data_ = NULL;
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CleanDoc)
}

void CleanDoc::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&data_)) + sizeof(num_));
}

CleanDoc::~CleanDoc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CleanDoc)
  SharedDtor();
}

void CleanDoc::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete clean_data_;
}

void CleanDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanDoc::descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CleanDoc& CleanDoc::default_instance() {
  protobuf_infholder_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanDoc* CleanDoc::New(::google::protobuf::Arena* arena) const {
  CleanDoc* n = new CleanDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CleanDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navig_urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(clean_data_ != NULL);
      clean_data_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
    }
  }
  num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CleanDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CleanDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.CleanDoc.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RegionBlob data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.RegionBlob clean_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clean_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.NavigLink navig_urls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navig_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CleanDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CleanDoc)
  return false;
#undef DO_
}

void CleanDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CleanDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CleanDoc.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob clean_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clean_data_, output);
  }

  // repeated .ru.mail.go.webbase.blobs.NavigLink navig_urls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navig_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->navig_urls(static_cast<int>(i)), output);
  }

  // optional int32 num = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CleanDoc)
}

::google::protobuf::uint8* CleanDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CleanDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.CleanDoc.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.RegionBlob clean_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clean_data_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.blobs.NavigLink navig_urls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navig_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->navig_urls(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 num = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CleanDoc)
  return target;
}

size_t CleanDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CleanDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }
  // repeated .ru.mail.go.webbase.blobs.NavigLink navig_urls = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->navig_urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navig_urls(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional .ru.mail.go.webbase.blobs.RegionBlob data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional .ru.mail.go.webbase.blobs.RegionBlob clean_data = 3;
    if (has_clean_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clean_data_);
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CleanDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanDoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CleanDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CleanDoc)
    MergeFrom(*source);
  }
}

void CleanDoc::MergeFrom(const CleanDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CleanDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navig_urls_.MergeFrom(from.navig_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::ru::mail::go::webbase::blobs::RegionBlob::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_clean_data()->::ru::mail::go::webbase::blobs::RegionBlob::MergeFrom(from.clean_data());
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CleanDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanDoc::CopyFrom(const CleanDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CleanDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->navig_urls())) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  if (has_clean_data()) {
    if (!this->clean_data_->IsInitialized()) return false;
  }
  return true;
}

void CleanDoc::Swap(CleanDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanDoc::InternalSwap(CleanDoc* other) {
  using std::swap;
  navig_urls_.InternalSwap(&other->navig_urls_);
  url_.Swap(&other->url_);
  swap(data_, other->data_);
  swap(clean_data_, other->clean_data_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanDoc::GetMetadata() const {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanDoc

// required string url = 1;
bool CleanDoc::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanDoc::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CleanDoc::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CleanDoc.url)
  return url_.GetNoArena();
}
void CleanDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CleanDoc.url)
}
#if LANG_CXX11
void CleanDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.CleanDoc.url)
}
#endif
void CleanDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.CleanDoc.url)
}
void CleanDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.CleanDoc.url)
}
::std::string* CleanDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CleanDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CleanDoc::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CleanDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CleanDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CleanDoc.url)
}

// optional .ru.mail.go.webbase.blobs.RegionBlob data = 2;
bool CleanDoc::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanDoc::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanDoc::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanDoc::clear_data() {
  if (data_ != NULL) data_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
  clear_has_data();
}
const ::ru::mail::go::webbase::blobs::RegionBlob& CleanDoc::data() const {
  const ::ru::mail::go::webbase::blobs::RegionBlob* p = data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CleanDoc.data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RegionBlob*>(
      &::ru::mail::go::webbase::blobs::_RegionBlob_default_instance_);
}
::ru::mail::go::webbase::blobs::RegionBlob* CleanDoc::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::ru::mail::go::webbase::blobs::RegionBlob;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CleanDoc.data)
  return data_;
}
::ru::mail::go::webbase::blobs::RegionBlob* CleanDoc::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CleanDoc.data)
  clear_has_data();
  ::ru::mail::go::webbase::blobs::RegionBlob* temp = data_;
  data_ = NULL;
  return temp;
}
void CleanDoc::set_allocated_data(::ru::mail::go::webbase::blobs::RegionBlob* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CleanDoc.data)
}

// optional .ru.mail.go.webbase.blobs.RegionBlob clean_data = 3;
bool CleanDoc::has_clean_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CleanDoc::set_has_clean_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CleanDoc::clear_has_clean_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CleanDoc::clear_clean_data() {
  if (clean_data_ != NULL) clean_data_->::ru::mail::go::webbase::blobs::RegionBlob::Clear();
  clear_has_clean_data();
}
const ::ru::mail::go::webbase::blobs::RegionBlob& CleanDoc::clean_data() const {
  const ::ru::mail::go::webbase::blobs::RegionBlob* p = clean_data_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CleanDoc.clean_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::RegionBlob*>(
      &::ru::mail::go::webbase::blobs::_RegionBlob_default_instance_);
}
::ru::mail::go::webbase::blobs::RegionBlob* CleanDoc::mutable_clean_data() {
  set_has_clean_data();
  if (clean_data_ == NULL) {
    clean_data_ = new ::ru::mail::go::webbase::blobs::RegionBlob;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CleanDoc.clean_data)
  return clean_data_;
}
::ru::mail::go::webbase::blobs::RegionBlob* CleanDoc::release_clean_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.CleanDoc.clean_data)
  clear_has_clean_data();
  ::ru::mail::go::webbase::blobs::RegionBlob* temp = clean_data_;
  clean_data_ = NULL;
  return temp;
}
void CleanDoc::set_allocated_clean_data(::ru::mail::go::webbase::blobs::RegionBlob* clean_data) {
  delete clean_data_;
  clean_data_ = clean_data;
  if (clean_data) {
    set_has_clean_data();
  } else {
    clear_has_clean_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.CleanDoc.clean_data)
}

// repeated .ru.mail.go.webbase.blobs.NavigLink navig_urls = 4;
int CleanDoc::navig_urls_size() const {
  return navig_urls_.size();
}
void CleanDoc::clear_navig_urls() {
  navig_urls_.Clear();
}
const ::ru::mail::go::webbase::blobs::NavigLink& CleanDoc::navig_urls(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CleanDoc.navig_urls)
  return navig_urls_.Get(index);
}
::ru::mail::go::webbase::blobs::NavigLink* CleanDoc::mutable_navig_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CleanDoc.navig_urls)
  return navig_urls_.Mutable(index);
}
::ru::mail::go::webbase::blobs::NavigLink* CleanDoc::add_navig_urls() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CleanDoc.navig_urls)
  return navig_urls_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::NavigLink >*
CleanDoc::mutable_navig_urls() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CleanDoc.navig_urls)
  return &navig_urls_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::NavigLink >&
CleanDoc::navig_urls() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CleanDoc.navig_urls)
  return navig_urls_;
}

// optional int32 num = 5;
bool CleanDoc::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CleanDoc::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
void CleanDoc::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void CleanDoc::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 CleanDoc::num() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CleanDoc.num)
  return num_;
}
void CleanDoc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CleanDoc.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int infholderBlob::kDocsFieldNumber;
const int infholderBlob::kStateFieldNumber;
const int infholderBlob::kProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

infholderBlob::infholderBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_infholder_5fblobs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.infholderBlob)
}
infholderBlob::infholderBlob(const infholderBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      docs_(from.docs_),
      profiles_(from.profiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.infholderBlob)
}

void infholderBlob::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
}

infholderBlob::~infholderBlob() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.infholderBlob)
  SharedDtor();
}

void infholderBlob::SharedDtor() {
}

void infholderBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* infholderBlob::descriptor() {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const infholderBlob& infholderBlob::default_instance() {
  protobuf_infholder_5fblobs_2eproto::InitDefaults();
  return *internal_default_instance();
}

infholderBlob* infholderBlob::New(::google::protobuf::Arena* arena) const {
  infholderBlob* n = new infholderBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void infholderBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.infholderBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  profiles_.Clear();
  state_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool infholderBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.infholderBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.CleanDoc docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.infholderBlob.InfholderState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::infholderBlob_InfholderState_IsValid(value)) {
            set_state(static_cast< ::ru::mail::go::webbase::blobs::infholderBlob_InfholderState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.infholderBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.infholderBlob)
  return false;
#undef DO_
}

void infholderBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.infholderBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CleanDoc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.infholderBlob.InfholderState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->profiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->profiles(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.infholderBlob)
}

::google::protobuf::uint8* infholderBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.infholderBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CleanDoc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.webbase.blobs.infholderBlob.InfholderState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->profiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->profiles(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.infholderBlob)
  return target;
}

size_t infholderBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.infholderBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.CleanDoc docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.webbase.blobs.ProfileInfo profiles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->profiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profiles(static_cast<int>(i)));
    }
  }

  // optional .ru.mail.go.webbase.blobs.infholderBlob.InfholderState state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void infholderBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.infholderBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const infholderBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const infholderBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.infholderBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.infholderBlob)
    MergeFrom(*source);
  }
}

void infholderBlob::MergeFrom(const infholderBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.infholderBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
  profiles_.MergeFrom(from.profiles_);
  if (from.has_state()) {
    set_state(from.state());
  }
}

void infholderBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.infholderBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infholderBlob::CopyFrom(const infholderBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.infholderBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infholderBlob::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->profiles())) return false;
  return true;
}

void infholderBlob::Swap(infholderBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void infholderBlob::InternalSwap(infholderBlob* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  profiles_.InternalSwap(&other->profiles_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata infholderBlob::GetMetadata() const {
  protobuf_infholder_5fblobs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_infholder_5fblobs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// infholderBlob

// repeated .ru.mail.go.webbase.blobs.CleanDoc docs = 1;
int infholderBlob::docs_size() const {
  return docs_.size();
}
void infholderBlob::clear_docs() {
  docs_.Clear();
}
const ::ru::mail::go::webbase::blobs::CleanDoc& infholderBlob::docs(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.infholderBlob.docs)
  return docs_.Get(index);
}
::ru::mail::go::webbase::blobs::CleanDoc* infholderBlob::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.infholderBlob.docs)
  return docs_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CleanDoc* infholderBlob::add_docs() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.infholderBlob.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CleanDoc >*
infholderBlob::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.infholderBlob.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CleanDoc >&
infholderBlob::docs() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.infholderBlob.docs)
  return docs_;
}

// optional .ru.mail.go.webbase.blobs.infholderBlob.InfholderState state = 2;
bool infholderBlob::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void infholderBlob::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void infholderBlob::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void infholderBlob::clear_state() {
  state_ = 1;
  clear_has_state();
}
::ru::mail::go::webbase::blobs::infholderBlob_InfholderState infholderBlob::state() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.infholderBlob.state)
  return static_cast< ::ru::mail::go::webbase::blobs::infholderBlob_InfholderState >(state_);
}
void infholderBlob::set_state(::ru::mail::go::webbase::blobs::infholderBlob_InfholderState value) {
  assert(::ru::mail::go::webbase::blobs::infholderBlob_InfholderState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.infholderBlob.state)
}

// repeated .ru.mail.go.webbase.blobs.ProfileInfo profiles = 3;
int infholderBlob::profiles_size() const {
  return profiles_.size();
}
void infholderBlob::clear_profiles() {
  profiles_.Clear();
}
const ::ru::mail::go::webbase::blobs::ProfileInfo& infholderBlob::profiles(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.infholderBlob.profiles)
  return profiles_.Get(index);
}
::ru::mail::go::webbase::blobs::ProfileInfo* infholderBlob::mutable_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.infholderBlob.profiles)
  return profiles_.Mutable(index);
}
::ru::mail::go::webbase::blobs::ProfileInfo* infholderBlob::add_profiles() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.infholderBlob.profiles)
  return profiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ProfileInfo >*
infholderBlob::mutable_profiles() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.infholderBlob.profiles)
  return &profiles_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::ProfileInfo >&
infholderBlob::profiles() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.infholderBlob.profiles)
  return profiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
