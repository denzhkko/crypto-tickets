// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_parser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_parser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace clickrank {
class RecordWrapperDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordWrapper>
     _instance;
} _RecordWrapper_default_instance_;
class SessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Session>
     _instance;
} _Session_default_instance_;

namespace protobuf_log_5fparser_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, bartertown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordWrapper, experimentd_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, click_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, quick_links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, click_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, sessioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, geospecific_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, persional_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, dbtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, aux_click_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, aux_click_time_),
  ~0u,
  ~0u,
  0,
  ~0u,
  5,
  ~0u,
  3,
  1,
  6,
  ~0u,
  2,
  4,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(RecordWrapper)},
  { 17, 36, sizeof(Session)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordWrapper_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Session_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log_parser.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::InitDefaults();
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::InitDefaults();
  _RecordWrapper_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordWrapper_default_instance_);_Session_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Session_default_instance_);_RecordWrapper_default_instance_._instance.get_mutable()->url_ = const_cast< ::ru::mail::go::webbase::ranking::UrlLogRecord*>(
      ::ru::mail::go::webbase::ranking::UrlLogRecord::internal_default_instance());
  _RecordWrapper_default_instance_._instance.get_mutable()->bartertown_ = const_cast< ::ru::mail::go::webbase::ranking::BartertownLogRecord*>(
      ::ru::mail::go::webbase::ranking::BartertownLogRecord::internal_default_instance());
  _RecordWrapper_default_instance_._instance.get_mutable()->access_ = const_cast< ::ru::mail::go::webbase::ranking::AccessLogRecord*>(
      ::ru::mail::go::webbase::ranking::AccessLogRecord::internal_default_instance());
  _RecordWrapper_default_instance_._instance.get_mutable()->serp_ = const_cast< ::ru::mail::go::webbase::ranking::SerpLogRecord*>(
      ::ru::mail::go::webbase::ranking::SerpLogRecord::internal_default_instance());
  _RecordWrapper_default_instance_._instance.get_mutable()->experimentd_ = const_cast< ::ru::mail::go::webbase::ranking::SerpLogRecord*>(
      ::ru::mail::go::webbase::ranking::SerpLogRecord::internal_default_instance());
  _Session_default_instance_._instance.get_mutable()->sessioninfo_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
  _Session_default_instance_._instance.get_mutable()->dbtype_ = const_cast< ::ru::mail::go::webbase::ranking::ParamList*>(
      ::ru::mail::go::webbase::ranking::ParamList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020log_parser.proto\022\034ru.mail.go.webbase.c"
      "lickrank\032\023urllog_record.proto\032\022sputnik_l"
      "ogs.proto\"\371\002\n\rRecordWrapper\0226\n\004type\030\001 \002("
      "\0162(.ru.mail.go.webbase.clickrank.RecordT"
      "ype\0225\n\003url\030\002 \001(\0132(.ru.mail.go.webbase.ra"
      "nking.UrlLogRecord\022C\n\nbartertown\030\003 \001(\0132/"
      ".ru.mail.go.webbase.ranking.BartertownLo"
      "gRecord\022;\n\006access\030\004 \001(\0132+.ru.mail.go.web"
      "base.ranking.AccessLogRecord\0227\n\004serp\030\005 \001"
      "(\0132).ru.mail.go.webbase.ranking.SerpLogR"
      "ecord\022>\n\013experimentd\030\006 \001(\0132).ru.mail.go."
      "webbase.ranking.SerpLogRecord\"\203\003\n\007Sessio"
      "n\022\013\n\003url\030\001 \003(\t\022\r\n\005click\030\002 \003(\005\022\016\n\006userId\030"
      "\003 \001(\t\022\023\n\013quick_links\030\004 \003(\t\022\021\n\ttimestamp\030"
      "\005 \001(\004\022\022\n\nclick_time\030\006 \003(\004\022:\n\013sessionInfo"
      "\030\t \001(\0132%.ru.mail.go.webbase.ranking.Para"
      "mList\022\023\n\013geoSpecific\030\007 \001(\t\022\021\n\tpersional\030"
      "\010 \001(\010\022<\n\010redirect\030\n \003(\0132*.ru.mail.go.web"
      "base.SputnikRanker.Redirect\022\014\n\004serp\030\013 \001("
      "\t\0225\n\006dbType\030\014 \001(\0132%.ru.mail.go.webbase.r"
      "anking.ParamList\022\021\n\taux_click\030\r \003(\005\022\026\n\016a"
      "ux_click_time\030\016 \003(\004*L\n\nRecordType\022\007\n\003URL"
      "\020\001\022\016\n\nBARTERTOWN\020\002\022\n\n\006ACCESS\020\003\022\010\n\004SERP\020\004"
      "\022\017\n\013EXPERIMENTD\020\005B\017B\rLogParserData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 954);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_parser.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::ranking::protobuf_urllog_5frecord_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_log_5fparser_2eproto

const ::google::protobuf::EnumDescriptor* RecordType_descriptor() {
  protobuf_log_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fparser_2eproto::file_level_enum_descriptors[0];
}
bool RecordType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordWrapper::kTypeFieldNumber;
const int RecordWrapper::kUrlFieldNumber;
const int RecordWrapper::kBartertownFieldNumber;
const int RecordWrapper::kAccessFieldNumber;
const int RecordWrapper::kSerpFieldNumber;
const int RecordWrapper::kExperimentdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordWrapper::RecordWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.clickrank.RecordWrapper)
}
RecordWrapper::RecordWrapper(const RecordWrapper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_url()) {
    url_ = new ::ru::mail::go::webbase::ranking::UrlLogRecord(*from.url_);
  } else {
    url_ = NULL;
  }
  if (from.has_bartertown()) {
    bartertown_ = new ::ru::mail::go::webbase::ranking::BartertownLogRecord(*from.bartertown_);
  } else {
    bartertown_ = NULL;
  }
  if (from.has_access()) {
    access_ = new ::ru::mail::go::webbase::ranking::AccessLogRecord(*from.access_);
  } else {
    access_ = NULL;
  }
  if (from.has_serp()) {
    serp_ = new ::ru::mail::go::webbase::ranking::SerpLogRecord(*from.serp_);
  } else {
    serp_ = NULL;
  }
  if (from.has_experimentd()) {
    experimentd_ = new ::ru::mail::go::webbase::ranking::SerpLogRecord(*from.experimentd_);
  } else {
    experimentd_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.clickrank.RecordWrapper)
}

void RecordWrapper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&experimentd_) -
      reinterpret_cast<char*>(&url_)) + sizeof(experimentd_));
  type_ = 1;
}

RecordWrapper::~RecordWrapper() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.clickrank.RecordWrapper)
  SharedDtor();
}

void RecordWrapper::SharedDtor() {
  if (this != internal_default_instance()) delete url_;
  if (this != internal_default_instance()) delete bartertown_;
  if (this != internal_default_instance()) delete access_;
  if (this != internal_default_instance()) delete serp_;
  if (this != internal_default_instance()) delete experimentd_;
}

void RecordWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordWrapper::descriptor() {
  protobuf_log_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordWrapper& RecordWrapper::default_instance() {
  protobuf_log_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordWrapper* RecordWrapper::New(::google::protobuf::Arena* arena) const {
  RecordWrapper* n = new RecordWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(url_ != NULL);
      url_->::ru::mail::go::webbase::ranking::UrlLogRecord::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bartertown_ != NULL);
      bartertown_->::ru::mail::go::webbase::ranking::BartertownLogRecord::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(access_ != NULL);
      access_->::ru::mail::go::webbase::ranking::AccessLogRecord::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(serp_ != NULL);
      serp_->::ru::mail::go::webbase::ranking::SerpLogRecord::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(experimentd_ != NULL);
      experimentd_->::ru::mail::go::webbase::ranking::SerpLogRecord::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.clickrank.RecordType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::clickrank::RecordType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::clickrank::RecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.UrlLogRecord url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.BartertownLogRecord bartertown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bartertown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.AccessLogRecord access = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.SerpLogRecord serp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.SerpLogRecord experimentd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimentd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.clickrank.RecordWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.clickrank.RecordWrapper)
  return false;
#undef DO_
}

void RecordWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.clickrank.RecordType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ru.mail.go.webbase.ranking.UrlLogRecord url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->url_, output);
  }

  // optional .ru.mail.go.webbase.ranking.BartertownLogRecord bartertown = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bartertown_, output);
  }

  // optional .ru.mail.go.webbase.ranking.AccessLogRecord access = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->access_, output);
  }

  // optional .ru.mail.go.webbase.ranking.SerpLogRecord serp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->serp_, output);
  }

  // optional .ru.mail.go.webbase.ranking.SerpLogRecord experimentd = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->experimentd_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.clickrank.RecordWrapper)
}

::google::protobuf::uint8* RecordWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.clickrank.RecordType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ru.mail.go.webbase.ranking.UrlLogRecord url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->url_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.BartertownLogRecord bartertown = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bartertown_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.AccessLogRecord access = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->access_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.SerpLogRecord serp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->serp_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.ranking.SerpLogRecord experimentd = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->experimentd_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.clickrank.RecordWrapper)
  return target;
}

size_t RecordWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.clickrank.RecordType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ru.mail.go.webbase.ranking.UrlLogRecord url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->url_);
    }

    // optional .ru.mail.go.webbase.ranking.BartertownLogRecord bartertown = 3;
    if (has_bartertown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bartertown_);
    }

    // optional .ru.mail.go.webbase.ranking.AccessLogRecord access = 4;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->access_);
    }

    // optional .ru.mail.go.webbase.ranking.SerpLogRecord serp = 5;
    if (has_serp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->serp_);
    }

    // optional .ru.mail.go.webbase.ranking.SerpLogRecord experimentd = 6;
    if (has_experimentd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->experimentd_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.clickrank.RecordWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.clickrank.RecordWrapper)
    MergeFrom(*source);
  }
}

void RecordWrapper::MergeFrom(const RecordWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_url()->::ru::mail::go::webbase::ranking::UrlLogRecord::MergeFrom(from.url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bartertown()->::ru::mail::go::webbase::ranking::BartertownLogRecord::MergeFrom(from.bartertown());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_access()->::ru::mail::go::webbase::ranking::AccessLogRecord::MergeFrom(from.access());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serp()->::ru::mail::go::webbase::ranking::SerpLogRecord::MergeFrom(from.serp());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_experimentd()->::ru::mail::go::webbase::ranking::SerpLogRecord::MergeFrom(from.experimentd());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordWrapper::CopyFrom(const RecordWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.clickrank.RecordWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_url()) {
    if (!this->url_->IsInitialized()) return false;
  }
  if (has_bartertown()) {
    if (!this->bartertown_->IsInitialized()) return false;
  }
  if (has_access()) {
    if (!this->access_->IsInitialized()) return false;
  }
  if (has_serp()) {
    if (!this->serp_->IsInitialized()) return false;
  }
  if (has_experimentd()) {
    if (!this->experimentd_->IsInitialized()) return false;
  }
  return true;
}

void RecordWrapper::Swap(RecordWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordWrapper::InternalSwap(RecordWrapper* other) {
  using std::swap;
  swap(url_, other->url_);
  swap(bartertown_, other->bartertown_);
  swap(access_, other->access_);
  swap(serp_, other->serp_);
  swap(experimentd_, other->experimentd_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordWrapper::GetMetadata() const {
  protobuf_log_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordWrapper

// required .ru.mail.go.webbase.clickrank.RecordType type = 1;
bool RecordWrapper::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RecordWrapper::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void RecordWrapper::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void RecordWrapper::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::clickrank::RecordType RecordWrapper::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.type)
  return static_cast< ::ru::mail::go::webbase::clickrank::RecordType >(type_);
}
void RecordWrapper::set_type(::ru::mail::go::webbase::clickrank::RecordType value) {
  assert(::ru::mail::go::webbase::clickrank::RecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.RecordWrapper.type)
}

// optional .ru.mail.go.webbase.ranking.UrlLogRecord url = 2;
bool RecordWrapper::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordWrapper::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordWrapper::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordWrapper::clear_url() {
  if (url_ != NULL) url_->::ru::mail::go::webbase::ranking::UrlLogRecord::Clear();
  clear_has_url();
}
const ::ru::mail::go::webbase::ranking::UrlLogRecord& RecordWrapper::url() const {
  const ::ru::mail::go::webbase::ranking::UrlLogRecord* p = url_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.url)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::UrlLogRecord*>(
      &::ru::mail::go::webbase::ranking::_UrlLogRecord_default_instance_);
}
::ru::mail::go::webbase::ranking::UrlLogRecord* RecordWrapper::mutable_url() {
  set_has_url();
  if (url_ == NULL) {
    url_ = new ::ru::mail::go::webbase::ranking::UrlLogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.RecordWrapper.url)
  return url_;
}
::ru::mail::go::webbase::ranking::UrlLogRecord* RecordWrapper::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.RecordWrapper.url)
  clear_has_url();
  ::ru::mail::go::webbase::ranking::UrlLogRecord* temp = url_;
  url_ = NULL;
  return temp;
}
void RecordWrapper::set_allocated_url(::ru::mail::go::webbase::ranking::UrlLogRecord* url) {
  delete url_;
  url_ = url;
  if (url) {
    set_has_url();
  } else {
    clear_has_url();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.RecordWrapper.url)
}

// optional .ru.mail.go.webbase.ranking.BartertownLogRecord bartertown = 3;
bool RecordWrapper::has_bartertown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordWrapper::set_has_bartertown() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordWrapper::clear_has_bartertown() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordWrapper::clear_bartertown() {
  if (bartertown_ != NULL) bartertown_->::ru::mail::go::webbase::ranking::BartertownLogRecord::Clear();
  clear_has_bartertown();
}
const ::ru::mail::go::webbase::ranking::BartertownLogRecord& RecordWrapper::bartertown() const {
  const ::ru::mail::go::webbase::ranking::BartertownLogRecord* p = bartertown_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.bartertown)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::BartertownLogRecord*>(
      &::ru::mail::go::webbase::ranking::_BartertownLogRecord_default_instance_);
}
::ru::mail::go::webbase::ranking::BartertownLogRecord* RecordWrapper::mutable_bartertown() {
  set_has_bartertown();
  if (bartertown_ == NULL) {
    bartertown_ = new ::ru::mail::go::webbase::ranking::BartertownLogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.RecordWrapper.bartertown)
  return bartertown_;
}
::ru::mail::go::webbase::ranking::BartertownLogRecord* RecordWrapper::release_bartertown() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.RecordWrapper.bartertown)
  clear_has_bartertown();
  ::ru::mail::go::webbase::ranking::BartertownLogRecord* temp = bartertown_;
  bartertown_ = NULL;
  return temp;
}
void RecordWrapper::set_allocated_bartertown(::ru::mail::go::webbase::ranking::BartertownLogRecord* bartertown) {
  delete bartertown_;
  bartertown_ = bartertown;
  if (bartertown) {
    set_has_bartertown();
  } else {
    clear_has_bartertown();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.RecordWrapper.bartertown)
}

// optional .ru.mail.go.webbase.ranking.AccessLogRecord access = 4;
bool RecordWrapper::has_access() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordWrapper::set_has_access() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordWrapper::clear_has_access() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordWrapper::clear_access() {
  if (access_ != NULL) access_->::ru::mail::go::webbase::ranking::AccessLogRecord::Clear();
  clear_has_access();
}
const ::ru::mail::go::webbase::ranking::AccessLogRecord& RecordWrapper::access() const {
  const ::ru::mail::go::webbase::ranking::AccessLogRecord* p = access_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.access)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::AccessLogRecord*>(
      &::ru::mail::go::webbase::ranking::_AccessLogRecord_default_instance_);
}
::ru::mail::go::webbase::ranking::AccessLogRecord* RecordWrapper::mutable_access() {
  set_has_access();
  if (access_ == NULL) {
    access_ = new ::ru::mail::go::webbase::ranking::AccessLogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.RecordWrapper.access)
  return access_;
}
::ru::mail::go::webbase::ranking::AccessLogRecord* RecordWrapper::release_access() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.RecordWrapper.access)
  clear_has_access();
  ::ru::mail::go::webbase::ranking::AccessLogRecord* temp = access_;
  access_ = NULL;
  return temp;
}
void RecordWrapper::set_allocated_access(::ru::mail::go::webbase::ranking::AccessLogRecord* access) {
  delete access_;
  access_ = access;
  if (access) {
    set_has_access();
  } else {
    clear_has_access();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.RecordWrapper.access)
}

// optional .ru.mail.go.webbase.ranking.SerpLogRecord serp = 5;
bool RecordWrapper::has_serp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecordWrapper::set_has_serp() {
  _has_bits_[0] |= 0x00000008u;
}
void RecordWrapper::clear_has_serp() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecordWrapper::clear_serp() {
  if (serp_ != NULL) serp_->::ru::mail::go::webbase::ranking::SerpLogRecord::Clear();
  clear_has_serp();
}
const ::ru::mail::go::webbase::ranking::SerpLogRecord& RecordWrapper::serp() const {
  const ::ru::mail::go::webbase::ranking::SerpLogRecord* p = serp_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.serp)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::SerpLogRecord*>(
      &::ru::mail::go::webbase::ranking::_SerpLogRecord_default_instance_);
}
::ru::mail::go::webbase::ranking::SerpLogRecord* RecordWrapper::mutable_serp() {
  set_has_serp();
  if (serp_ == NULL) {
    serp_ = new ::ru::mail::go::webbase::ranking::SerpLogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.RecordWrapper.serp)
  return serp_;
}
::ru::mail::go::webbase::ranking::SerpLogRecord* RecordWrapper::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.RecordWrapper.serp)
  clear_has_serp();
  ::ru::mail::go::webbase::ranking::SerpLogRecord* temp = serp_;
  serp_ = NULL;
  return temp;
}
void RecordWrapper::set_allocated_serp(::ru::mail::go::webbase::ranking::SerpLogRecord* serp) {
  delete serp_;
  serp_ = serp;
  if (serp) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.RecordWrapper.serp)
}

// optional .ru.mail.go.webbase.ranking.SerpLogRecord experimentd = 6;
bool RecordWrapper::has_experimentd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecordWrapper::set_has_experimentd() {
  _has_bits_[0] |= 0x00000010u;
}
void RecordWrapper::clear_has_experimentd() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecordWrapper::clear_experimentd() {
  if (experimentd_ != NULL) experimentd_->::ru::mail::go::webbase::ranking::SerpLogRecord::Clear();
  clear_has_experimentd();
}
const ::ru::mail::go::webbase::ranking::SerpLogRecord& RecordWrapper::experimentd() const {
  const ::ru::mail::go::webbase::ranking::SerpLogRecord* p = experimentd_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.RecordWrapper.experimentd)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::SerpLogRecord*>(
      &::ru::mail::go::webbase::ranking::_SerpLogRecord_default_instance_);
}
::ru::mail::go::webbase::ranking::SerpLogRecord* RecordWrapper::mutable_experimentd() {
  set_has_experimentd();
  if (experimentd_ == NULL) {
    experimentd_ = new ::ru::mail::go::webbase::ranking::SerpLogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.RecordWrapper.experimentd)
  return experimentd_;
}
::ru::mail::go::webbase::ranking::SerpLogRecord* RecordWrapper::release_experimentd() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.RecordWrapper.experimentd)
  clear_has_experimentd();
  ::ru::mail::go::webbase::ranking::SerpLogRecord* temp = experimentd_;
  experimentd_ = NULL;
  return temp;
}
void RecordWrapper::set_allocated_experimentd(::ru::mail::go::webbase::ranking::SerpLogRecord* experimentd) {
  delete experimentd_;
  experimentd_ = experimentd;
  if (experimentd) {
    set_has_experimentd();
  } else {
    clear_has_experimentd();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.RecordWrapper.experimentd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kUrlFieldNumber;
const int Session::kClickFieldNumber;
const int Session::kUserIdFieldNumber;
const int Session::kQuickLinksFieldNumber;
const int Session::kTimestampFieldNumber;
const int Session::kClickTimeFieldNumber;
const int Session::kSessionInfoFieldNumber;
const int Session::kGeoSpecificFieldNumber;
const int Session::kPersionalFieldNumber;
const int Session::kRedirectFieldNumber;
const int Session::kSerpFieldNumber;
const int Session::kDbTypeFieldNumber;
const int Session::kAuxClickFieldNumber;
const int Session::kAuxClickTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_log_5fparser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.clickrank.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      url_(from.url_),
      click_(from.click_),
      quick_links_(from.quick_links_),
      click_time_(from.click_time_),
      redirect_(from.redirect_),
      aux_click_(from.aux_click_),
      aux_click_time_(from.aux_click_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  geospecific_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geospecific()) {
    geospecific_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geospecific_);
  }
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serp()) {
    serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
  }
  if (from.has_sessioninfo()) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.sessioninfo_);
  } else {
    sessioninfo_ = NULL;
  }
  if (from.has_dbtype()) {
    dbtype_ = new ::ru::mail::go::webbase::ranking::ParamList(*from.dbtype_);
  } else {
    dbtype_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&persional_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(persional_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.clickrank.Session)
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geospecific_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessioninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persional_) -
      reinterpret_cast<char*>(&sessioninfo_)) + sizeof(persional_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.clickrank.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geospecific_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sessioninfo_;
  if (this != internal_default_instance()) delete dbtype_;
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_log_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fparser_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  protobuf_log_5fparser_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.Clear();
  click_.Clear();
  quick_links_.Clear();
  click_time_.Clear();
  redirect_.Clear();
  aux_click_.Clear();
  aux_click_time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!geospecific_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*geospecific_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!serp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serp_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sessioninfo_ != NULL);
      sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(dbtype_ != NULL);
      dbtype_->::ru::mail::go::webbase::ranking::ParamList::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&persional_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(persional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.clickrank.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url(this->url_size() - 1).data(),
            static_cast<int>(this->url(this->url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 click = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_click())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_click())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.userId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string quick_links = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_quick_links()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quick_links(this->quick_links_size() - 1).data(),
            static_cast<int>(this->quick_links(this->quick_links_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.quick_links");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 click_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_click_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_click_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string geoSpecific = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geospecific()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geospecific().data(), static_cast<int>(this->geospecific().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.geoSpecific");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persional = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_persional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serp().data(), static_cast<int>(this->serp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.clickrank.Session.serp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.ranking.ParamList dbType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dbtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 aux_click = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104u, input, this->mutable_aux_click())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_aux_click())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 aux_click_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112u, input, this->mutable_aux_click_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_aux_click_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.clickrank.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.clickrank.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string url = 1;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(i), output);
  }

  // repeated int32 click = 2;
  for (int i = 0, n = this->click_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->click(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string userId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated string quick_links = 4;
  for (int i = 0, n = this->quick_links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quick_links(i).data(), static_cast<int>(this->quick_links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.quick_links");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quick_links(i), output);
  }

  // optional uint64 timestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // repeated uint64 click_time = 6;
  for (int i = 0, n = this->click_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->click_time(i), output);
  }

  // optional string geoSpecific = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geospecific().data(), static_cast<int>(this->geospecific().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.geoSpecific");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->geospecific(), output);
  }

  // optional bool persional = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->persional(), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->sessioninfo_, output);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirect_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->redirect(static_cast<int>(i)), output);
  }

  // optional string serp = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.serp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->serp(), output);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList dbType = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dbtype_, output);
  }

  // repeated int32 aux_click = 13;
  for (int i = 0, n = this->aux_click_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->aux_click(i), output);
  }

  // repeated uint64 aux_click_time = 14;
  for (int i = 0, n = this->aux_click_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->aux_click_time(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.clickrank.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.clickrank.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string url = 1;
  for (int i = 0, n = this->url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url(i).data(), static_cast<int>(this->url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->url(i), target);
  }

  // repeated int32 click = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->click_, target);

  cached_has_bits = _has_bits_[0];
  // optional string userId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated string quick_links = 4;
  for (int i = 0, n = this->quick_links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quick_links(i).data(), static_cast<int>(this->quick_links(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.quick_links");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->quick_links(i), target);
  }

  // optional uint64 timestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // repeated uint64 click_time = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->click_time_, target);

  // optional string geoSpecific = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geospecific().data(), static_cast<int>(this->geospecific().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.geoSpecific");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->geospecific(), target);
  }

  // optional bool persional = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->persional(), target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->sessioninfo_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->redirect_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->redirect(static_cast<int>(i)), deterministic, target);
  }

  // optional string serp = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serp().data(), static_cast<int>(this->serp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.clickrank.Session.serp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->serp(), target);
  }

  // optional .ru.mail.go.webbase.ranking.ParamList dbType = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->dbtype_, deterministic, target);
  }

  // repeated int32 aux_click = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(13, this->aux_click_, target);

  // repeated uint64 aux_click_time = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(14, this->aux_click_time_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.clickrank.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.clickrank.Session)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string url = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_size());
  for (int i = 0, n = this->url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  // repeated int32 click = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->click_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->click_size());
    total_size += data_size;
  }

  // repeated string quick_links = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->quick_links_size());
  for (int i = 0, n = this->quick_links_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->quick_links(i));
  }

  // repeated uint64 click_time = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->click_time_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->click_time_size());
    total_size += data_size;
  }

  // repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->redirect_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redirect(static_cast<int>(i)));
    }
  }

  // repeated int32 aux_click = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->aux_click_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aux_click_size());
    total_size += data_size;
  }

  // repeated uint64 aux_click_time = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->aux_click_time_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aux_click_time_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional string geoSpecific = 7;
    if (has_geospecific()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geospecific());
    }

    // optional string serp = 11;
    if (has_serp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serp());
    }

    // optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
    if (has_sessioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sessioninfo_);
    }

    // optional .ru.mail.go.webbase.ranking.ParamList dbType = 12;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dbtype_);
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional bool persional = 8;
    if (has_persional()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.clickrank.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.clickrank.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.clickrank.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.clickrank.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_.MergeFrom(from.url_);
  click_.MergeFrom(from.click_);
  quick_links_.MergeFrom(from.quick_links_);
  click_time_.MergeFrom(from.click_time_);
  redirect_.MergeFrom(from.redirect_);
  aux_click_.MergeFrom(from.aux_click_);
  aux_click_time_.MergeFrom(from.aux_click_time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_geospecific();
      geospecific_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geospecific_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serp();
      serp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serp_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sessioninfo()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.sessioninfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_dbtype()->::ru::mail::go::webbase::ranking::ParamList::MergeFrom(from.dbtype());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      persional_ = from.persional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.clickrank.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.clickrank.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->redirect())) return false;
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  url_.InternalSwap(&other->url_);
  click_.InternalSwap(&other->click_);
  quick_links_.InternalSwap(&other->quick_links_);
  click_time_.InternalSwap(&other->click_time_);
  redirect_.InternalSwap(&other->redirect_);
  aux_click_.InternalSwap(&other->aux_click_);
  aux_click_time_.InternalSwap(&other->aux_click_time_);
  userid_.Swap(&other->userid_);
  geospecific_.Swap(&other->geospecific_);
  serp_.Swap(&other->serp_);
  swap(sessioninfo_, other->sessioninfo_);
  swap(dbtype_, other->dbtype_);
  swap(timestamp_, other->timestamp_);
  swap(persional_, other->persional_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_log_5fparser_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_5fparser_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// repeated string url = 1;
int Session::url_size() const {
  return url_.size();
}
void Session::clear_url() {
  url_.Clear();
}
const ::std::string& Session::url(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.url)
  return url_.Get(index);
}
::std::string* Session::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.url)
  return url_.Mutable(index);
}
void Session::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.url)
  url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Session::set_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.url)
  url_.Mutable(index)->assign(std::move(value));
}
#endif
void Session::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.url)
}
void Session::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.url)
}
::std::string* Session::add_url() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.clickrank.Session.url)
  return url_.Add();
}
void Session::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.url)
}
#if LANG_CXX11
void Session::add_url(::std::string&& value) {
  url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.url)
}
#endif
void Session::add_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.clickrank.Session.url)
}
void Session::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.clickrank.Session.url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::url() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.url)
  return url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.url)
  return &url_;
}

// repeated int32 click = 2;
int Session::click_size() const {
  return click_.size();
}
void Session::clear_click() {
  click_.Clear();
}
::google::protobuf::int32 Session::click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.click)
  return click_.Get(index);
}
void Session::set_click(int index, ::google::protobuf::int32 value) {
  click_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.click)
}
void Session::add_click(::google::protobuf::int32 value) {
  click_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.click)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Session::click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.click)
  return click_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Session::mutable_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.click)
  return &click_;
}

// optional string userId = 3;
bool Session::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Session::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void Session::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Session::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& Session::userid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.GetNoArena();
}
void Session::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.userId)
}
#if LANG_CXX11
void Session::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.userId)
}
#endif
void Session::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.userId)
}
void Session::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.userId)
}
::std::string* Session::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_userid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.userId)
}

// repeated string quick_links = 4;
int Session::quick_links_size() const {
  return quick_links_.size();
}
void Session::clear_quick_links() {
  quick_links_.Clear();
}
const ::std::string& Session::quick_links(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.quick_links)
  return quick_links_.Get(index);
}
::std::string* Session::mutable_quick_links(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.quick_links)
  return quick_links_.Mutable(index);
}
void Session::set_quick_links(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.quick_links)
  quick_links_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Session::set_quick_links(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.quick_links)
  quick_links_.Mutable(index)->assign(std::move(value));
}
#endif
void Session::set_quick_links(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  quick_links_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.quick_links)
}
void Session::set_quick_links(int index, const char* value, size_t size) {
  quick_links_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.quick_links)
}
::std::string* Session::add_quick_links() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.clickrank.Session.quick_links)
  return quick_links_.Add();
}
void Session::add_quick_links(const ::std::string& value) {
  quick_links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.quick_links)
}
#if LANG_CXX11
void Session::add_quick_links(::std::string&& value) {
  quick_links_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.quick_links)
}
#endif
void Session::add_quick_links(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  quick_links_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.clickrank.Session.quick_links)
}
void Session::add_quick_links(const char* value, size_t size) {
  quick_links_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.clickrank.Session.quick_links)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Session::quick_links() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.quick_links)
  return quick_links_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Session::mutable_quick_links() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.quick_links)
  return &quick_links_;
}

// optional uint64 timestamp = 5;
bool Session::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Session::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Session::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Session::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Session::timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.timestamp)
  return timestamp_;
}
void Session::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.timestamp)
}

// repeated uint64 click_time = 6;
int Session::click_time_size() const {
  return click_time_.size();
}
void Session::clear_click_time() {
  click_time_.Clear();
}
::google::protobuf::uint64 Session::click_time(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.click_time)
  return click_time_.Get(index);
}
void Session::set_click_time(int index, ::google::protobuf::uint64 value) {
  click_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.click_time)
}
void Session::add_click_time(::google::protobuf::uint64 value) {
  click_time_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.click_time)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::click_time() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.click_time)
  return click_time_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_click_time() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.click_time)
  return &click_time_;
}

// optional .ru.mail.go.webbase.ranking.ParamList sessionInfo = 9;
bool Session::has_sessioninfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Session::set_has_sessioninfo() {
  _has_bits_[0] |= 0x00000008u;
}
void Session::clear_has_sessioninfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void Session::clear_sessioninfo() {
  if (sessioninfo_ != NULL) sessioninfo_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_sessioninfo();
}
const ::ru::mail::go::webbase::ranking::ParamList& Session::sessioninfo() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = sessioninfo_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* Session::mutable_sessioninfo() {
  set_has_sessioninfo();
  if (sessioninfo_ == NULL) {
    sessioninfo_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  return sessioninfo_;
}
::ru::mail::go::webbase::ranking::ParamList* Session::release_sessioninfo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.sessionInfo)
  clear_has_sessioninfo();
  ::ru::mail::go::webbase::ranking::ParamList* temp = sessioninfo_;
  sessioninfo_ = NULL;
  return temp;
}
void Session::set_allocated_sessioninfo(::ru::mail::go::webbase::ranking::ParamList* sessioninfo) {
  delete sessioninfo_;
  sessioninfo_ = sessioninfo;
  if (sessioninfo) {
    set_has_sessioninfo();
  } else {
    clear_has_sessioninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.sessionInfo)
}

// optional string geoSpecific = 7;
bool Session::has_geospecific() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Session::set_has_geospecific() {
  _has_bits_[0] |= 0x00000002u;
}
void Session::clear_has_geospecific() {
  _has_bits_[0] &= ~0x00000002u;
}
void Session::clear_geospecific() {
  geospecific_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geospecific();
}
const ::std::string& Session::geospecific() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.geoSpecific)
  return geospecific_.GetNoArena();
}
void Session::set_geospecific(const ::std::string& value) {
  set_has_geospecific();
  geospecific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.geoSpecific)
}
#if LANG_CXX11
void Session::set_geospecific(::std::string&& value) {
  set_has_geospecific();
  geospecific_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.geoSpecific)
}
#endif
void Session::set_geospecific(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geospecific();
  geospecific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.geoSpecific)
}
void Session::set_geospecific(const char* value, size_t size) {
  set_has_geospecific();
  geospecific_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.geoSpecific)
}
::std::string* Session::mutable_geospecific() {
  set_has_geospecific();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.geoSpecific)
  return geospecific_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_geospecific() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.geoSpecific)
  clear_has_geospecific();
  return geospecific_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_geospecific(::std::string* geospecific) {
  if (geospecific != NULL) {
    set_has_geospecific();
  } else {
    clear_has_geospecific();
  }
  geospecific_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geospecific);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.geoSpecific)
}

// optional bool persional = 8;
bool Session::has_persional() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Session::set_has_persional() {
  _has_bits_[0] |= 0x00000040u;
}
void Session::clear_has_persional() {
  _has_bits_[0] &= ~0x00000040u;
}
void Session::clear_persional() {
  persional_ = false;
  clear_has_persional();
}
bool Session::persional() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.persional)
  return persional_;
}
void Session::set_persional(bool value) {
  set_has_persional();
  persional_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.persional)
}

// repeated .ru.mail.go.webbase.SputnikRanker.Redirect redirect = 10;
int Session::redirect_size() const {
  return redirect_.size();
}
void Session::clear_redirect() {
  redirect_.Clear();
}
const ::ru::mail::go::webbase::SputnikRanker::Redirect& Session::redirect(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.redirect)
  return redirect_.Get(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* Session::mutable_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.redirect)
  return redirect_.Mutable(index);
}
::ru::mail::go::webbase::SputnikRanker::Redirect* Session::add_redirect() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.redirect)
  return redirect_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >*
Session::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.redirect)
  return &redirect_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::SputnikRanker::Redirect >&
Session::redirect() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.redirect)
  return redirect_;
}

// optional string serp = 11;
bool Session::has_serp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Session::set_has_serp() {
  _has_bits_[0] |= 0x00000004u;
}
void Session::clear_has_serp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Session::clear_serp() {
  serp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serp();
}
const ::std::string& Session::serp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.serp)
  return serp_.GetNoArena();
}
void Session::set_serp(const ::std::string& value) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.serp)
}
#if LANG_CXX11
void Session::set_serp(::std::string&& value) {
  set_has_serp();
  serp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.clickrank.Session.serp)
}
#endif
void Session::set_serp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.clickrank.Session.serp)
}
void Session::set_serp(const char* value, size_t size) {
  set_has_serp();
  serp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.clickrank.Session.serp)
}
::std::string* Session::mutable_serp() {
  set_has_serp();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.serp)
  return serp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_serp() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.serp)
  clear_has_serp();
  return serp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_serp(::std::string* serp) {
  if (serp != NULL) {
    set_has_serp();
  } else {
    clear_has_serp();
  }
  serp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serp);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.serp)
}

// optional .ru.mail.go.webbase.ranking.ParamList dbType = 12;
bool Session::has_dbtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Session::set_has_dbtype() {
  _has_bits_[0] |= 0x00000010u;
}
void Session::clear_has_dbtype() {
  _has_bits_[0] &= ~0x00000010u;
}
void Session::clear_dbtype() {
  if (dbtype_ != NULL) dbtype_->::ru::mail::go::webbase::ranking::ParamList::Clear();
  clear_has_dbtype();
}
const ::ru::mail::go::webbase::ranking::ParamList& Session::dbtype() const {
  const ::ru::mail::go::webbase::ranking::ParamList* p = dbtype_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.dbType)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::ranking::ParamList*>(
      &::ru::mail::go::webbase::ranking::_ParamList_default_instance_);
}
::ru::mail::go::webbase::ranking::ParamList* Session::mutable_dbtype() {
  set_has_dbtype();
  if (dbtype_ == NULL) {
    dbtype_ = new ::ru::mail::go::webbase::ranking::ParamList;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.clickrank.Session.dbType)
  return dbtype_;
}
::ru::mail::go::webbase::ranking::ParamList* Session::release_dbtype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.clickrank.Session.dbType)
  clear_has_dbtype();
  ::ru::mail::go::webbase::ranking::ParamList* temp = dbtype_;
  dbtype_ = NULL;
  return temp;
}
void Session::set_allocated_dbtype(::ru::mail::go::webbase::ranking::ParamList* dbtype) {
  delete dbtype_;
  dbtype_ = dbtype;
  if (dbtype) {
    set_has_dbtype();
  } else {
    clear_has_dbtype();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.clickrank.Session.dbType)
}

// repeated int32 aux_click = 13;
int Session::aux_click_size() const {
  return aux_click_.size();
}
void Session::clear_aux_click() {
  aux_click_.Clear();
}
::google::protobuf::int32 Session::aux_click(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.aux_click)
  return aux_click_.Get(index);
}
void Session::set_aux_click(int index, ::google::protobuf::int32 value) {
  aux_click_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.aux_click)
}
void Session::add_aux_click(::google::protobuf::int32 value) {
  aux_click_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.aux_click)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Session::aux_click() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.aux_click)
  return aux_click_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Session::mutable_aux_click() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.aux_click)
  return &aux_click_;
}

// repeated uint64 aux_click_time = 14;
int Session::aux_click_time_size() const {
  return aux_click_time_.size();
}
void Session::clear_aux_click_time() {
  aux_click_time_.Clear();
}
::google::protobuf::uint64 Session::aux_click_time(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.clickrank.Session.aux_click_time)
  return aux_click_time_.Get(index);
}
void Session::set_aux_click_time(int index, ::google::protobuf::uint64 value) {
  aux_click_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.clickrank.Session.aux_click_time)
}
void Session::add_aux_click_time(::google::protobuf::uint64 value) {
  aux_click_time_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.clickrank.Session.aux_click_time)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Session::aux_click_time() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.clickrank.Session.aux_click_time)
  return aux_click_time_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Session::mutable_aux_click_time() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.clickrank.Session.aux_click_time)
  return &aux_click_time_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace clickrank
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
