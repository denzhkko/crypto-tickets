// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music-additive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music-additive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MusicTrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MusicTrack>
     _instance;
} _MusicTrack_default_instance_;
class MusicTrackListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MusicTrackList>
     _instance;
} _MusicTrackList_default_instance_;

namespace protobuf_music_2dadditive_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, mp3_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrack, track_name_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackList, tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackList, author_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(MusicTrack)},
  { 13, 20, sizeof(MusicTrackList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MusicTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MusicTrackList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music-additive.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MusicTrack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MusicTrack_default_instance_);_MusicTrackList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MusicTrackList_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024music-additive.proto\"S\n\nMusicTrack\022\017\n\007"
      "user_id\030\001 \001(\004\022\016\n\006mp3_id\030\002 \001(\t\022\020\n\010duratio"
      "n\030\003 \001(\r\022\022\n\ntrack_name\030\004 \001(\t\"=\n\016MusicTrac"
      "kList\022\033\n\006tracks\030\001 \003(\0132\013.MusicTrack\022\016\n\006au"
      "thor\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music-additive.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_2dadditive_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MusicTrack::kUserIdFieldNumber;
const int MusicTrack::kMp3IdFieldNumber;
const int MusicTrack::kDurationFieldNumber;
const int MusicTrack::kTrackNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MusicTrack::MusicTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2dadditive_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MusicTrack)
}
MusicTrack::MusicTrack(const MusicTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mp3_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mp3_id()) {
    mp3_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mp3_id_);
  }
  track_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_name()) {
    track_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:MusicTrack)
}

void MusicTrack::SharedCtor() {
  _cached_size_ = 0;
  mp3_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(duration_));
}

MusicTrack::~MusicTrack() {
  // @@protoc_insertion_point(destructor:MusicTrack)
  SharedDtor();
}

void MusicTrack::SharedDtor() {
  mp3_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MusicTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicTrack::descriptor() {
  protobuf_music_2dadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dadditive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MusicTrack& MusicTrack::default_instance() {
  protobuf_music_2dadditive_2eproto::InitDefaults();
  return *internal_default_instance();
}

MusicTrack* MusicTrack::New(::google::protobuf::Arena* arena) const {
  MusicTrack* n = new MusicTrack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MusicTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:MusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mp3_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mp3_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!track_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MusicTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MusicTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mp3_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mp3_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mp3_id().data(), static_cast<int>(this->mp3_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MusicTrack.mp3_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_name().data(), static_cast<int>(this->track_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MusicTrack.track_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MusicTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MusicTrack)
  return false;
#undef DO_
}

void MusicTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string mp3_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mp3_id().data(), static_cast<int>(this->mp3_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrack.mp3_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mp3_id(), output);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional string track_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_name().data(), static_cast<int>(this->track_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrack.track_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->track_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MusicTrack)
}

::google::protobuf::uint8* MusicTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string mp3_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mp3_id().data(), static_cast<int>(this->mp3_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrack.mp3_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mp3_id(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional string track_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_name().data(), static_cast<int>(this->track_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrack.track_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->track_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MusicTrack)
  return target;
}

size_t MusicTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MusicTrack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string mp3_id = 2;
    if (has_mp3_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mp3_id());
    }

    // optional string track_name = 4;
    if (has_track_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_name());
    }

    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MusicTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MusicTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MusicTrack)
    MergeFrom(*source);
  }
}

void MusicTrack::MergeFrom(const MusicTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mp3_id();
      mp3_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mp3_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track_name();
      track_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MusicTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicTrack::CopyFrom(const MusicTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicTrack::IsInitialized() const {
  return true;
}

void MusicTrack::Swap(MusicTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MusicTrack::InternalSwap(MusicTrack* other) {
  using std::swap;
  mp3_id_.Swap(&other->mp3_id_);
  track_name_.Swap(&other->track_name_);
  swap(user_id_, other->user_id_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MusicTrack::GetMetadata() const {
  protobuf_music_2dadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dadditive_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MusicTrack

// optional uint64 user_id = 1;
bool MusicTrack::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MusicTrack::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void MusicTrack::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void MusicTrack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 MusicTrack::user_id() const {
  // @@protoc_insertion_point(field_get:MusicTrack.user_id)
  return user_id_;
}
void MusicTrack::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:MusicTrack.user_id)
}

// optional string mp3_id = 2;
bool MusicTrack::has_mp3_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MusicTrack::set_has_mp3_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MusicTrack::clear_has_mp3_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MusicTrack::clear_mp3_id() {
  mp3_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mp3_id();
}
const ::std::string& MusicTrack::mp3_id() const {
  // @@protoc_insertion_point(field_get:MusicTrack.mp3_id)
  return mp3_id_.GetNoArena();
}
void MusicTrack::set_mp3_id(const ::std::string& value) {
  set_has_mp3_id();
  mp3_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicTrack.mp3_id)
}
#if LANG_CXX11
void MusicTrack::set_mp3_id(::std::string&& value) {
  set_has_mp3_id();
  mp3_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicTrack.mp3_id)
}
#endif
void MusicTrack::set_mp3_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mp3_id();
  mp3_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicTrack.mp3_id)
}
void MusicTrack::set_mp3_id(const char* value, size_t size) {
  set_has_mp3_id();
  mp3_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicTrack.mp3_id)
}
::std::string* MusicTrack::mutable_mp3_id() {
  set_has_mp3_id();
  // @@protoc_insertion_point(field_mutable:MusicTrack.mp3_id)
  return mp3_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MusicTrack::release_mp3_id() {
  // @@protoc_insertion_point(field_release:MusicTrack.mp3_id)
  clear_has_mp3_id();
  return mp3_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MusicTrack::set_allocated_mp3_id(::std::string* mp3_id) {
  if (mp3_id != NULL) {
    set_has_mp3_id();
  } else {
    clear_has_mp3_id();
  }
  mp3_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mp3_id);
  // @@protoc_insertion_point(field_set_allocated:MusicTrack.mp3_id)
}

// optional uint32 duration = 3;
bool MusicTrack::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MusicTrack::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void MusicTrack::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void MusicTrack::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 MusicTrack::duration() const {
  // @@protoc_insertion_point(field_get:MusicTrack.duration)
  return duration_;
}
void MusicTrack::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:MusicTrack.duration)
}

// optional string track_name = 4;
bool MusicTrack::has_track_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MusicTrack::set_has_track_name() {
  _has_bits_[0] |= 0x00000002u;
}
void MusicTrack::clear_has_track_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void MusicTrack::clear_track_name() {
  track_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_name();
}
const ::std::string& MusicTrack::track_name() const {
  // @@protoc_insertion_point(field_get:MusicTrack.track_name)
  return track_name_.GetNoArena();
}
void MusicTrack::set_track_name(const ::std::string& value) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicTrack.track_name)
}
#if LANG_CXX11
void MusicTrack::set_track_name(::std::string&& value) {
  set_has_track_name();
  track_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicTrack.track_name)
}
#endif
void MusicTrack::set_track_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicTrack.track_name)
}
void MusicTrack::set_track_name(const char* value, size_t size) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicTrack.track_name)
}
::std::string* MusicTrack::mutable_track_name() {
  set_has_track_name();
  // @@protoc_insertion_point(field_mutable:MusicTrack.track_name)
  return track_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MusicTrack::release_track_name() {
  // @@protoc_insertion_point(field_release:MusicTrack.track_name)
  clear_has_track_name();
  return track_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MusicTrack::set_allocated_track_name(::std::string* track_name) {
  if (track_name != NULL) {
    set_has_track_name();
  } else {
    clear_has_track_name();
  }
  track_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_name);
  // @@protoc_insertion_point(field_set_allocated:MusicTrack.track_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MusicTrackList::kTracksFieldNumber;
const int MusicTrackList::kAuthorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MusicTrackList::MusicTrackList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2dadditive_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MusicTrackList)
}
MusicTrackList::MusicTrackList(const MusicTrackList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author()) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  // @@protoc_insertion_point(copy_constructor:MusicTrackList)
}

void MusicTrackList::SharedCtor() {
  _cached_size_ = 0;
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MusicTrackList::~MusicTrackList() {
  // @@protoc_insertion_point(destructor:MusicTrackList)
  SharedDtor();
}

void MusicTrackList::SharedDtor() {
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MusicTrackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicTrackList::descriptor() {
  protobuf_music_2dadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dadditive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MusicTrackList& MusicTrackList::default_instance() {
  protobuf_music_2dadditive_2eproto::InitDefaults();
  return *internal_default_instance();
}

MusicTrackList* MusicTrackList::New(::google::protobuf::Arena* arena) const {
  MusicTrackList* n = new MusicTrackList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MusicTrackList::Clear() {
// @@protoc_insertion_point(message_clear_start:MusicTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  if (has_author()) {
    GOOGLE_DCHECK(!author_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*author_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MusicTrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MusicTrackList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MusicTrack tracks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string author = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), static_cast<int>(this->author().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MusicTrackList.author");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MusicTrackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MusicTrackList)
  return false;
#undef DO_
}

void MusicTrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MusicTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MusicTrack tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tracks(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string author = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrackList.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MusicTrackList)
}

::google::protobuf::uint8* MusicTrackList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MusicTrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MusicTrack tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tracks(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string author = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), static_cast<int>(this->author().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MusicTrackList.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MusicTrackList)
  return target;
}

size_t MusicTrackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MusicTrackList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MusicTrack tracks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks(static_cast<int>(i)));
    }
  }

  // optional string author = 2;
  if (has_author()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicTrackList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MusicTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicTrackList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MusicTrackList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MusicTrackList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MusicTrackList)
    MergeFrom(*source);
  }
}

void MusicTrackList::MergeFrom(const MusicTrackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MusicTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (from.has_author()) {
    set_has_author();
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
}

void MusicTrackList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MusicTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicTrackList::CopyFrom(const MusicTrackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MusicTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicTrackList::IsInitialized() const {
  return true;
}

void MusicTrackList::Swap(MusicTrackList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MusicTrackList::InternalSwap(MusicTrackList* other) {
  using std::swap;
  tracks_.InternalSwap(&other->tracks_);
  author_.Swap(&other->author_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MusicTrackList::GetMetadata() const {
  protobuf_music_2dadditive_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dadditive_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MusicTrackList

// repeated .MusicTrack tracks = 1;
int MusicTrackList::tracks_size() const {
  return tracks_.size();
}
void MusicTrackList::clear_tracks() {
  tracks_.Clear();
}
const ::MusicTrack& MusicTrackList::tracks(int index) const {
  // @@protoc_insertion_point(field_get:MusicTrackList.tracks)
  return tracks_.Get(index);
}
::MusicTrack* MusicTrackList::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:MusicTrackList.tracks)
  return tracks_.Mutable(index);
}
::MusicTrack* MusicTrackList::add_tracks() {
  // @@protoc_insertion_point(field_add:MusicTrackList.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::MusicTrack >*
MusicTrackList::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:MusicTrackList.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::MusicTrack >&
MusicTrackList::tracks() const {
  // @@protoc_insertion_point(field_list:MusicTrackList.tracks)
  return tracks_;
}

// optional string author = 2;
bool MusicTrackList::has_author() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MusicTrackList::set_has_author() {
  _has_bits_[0] |= 0x00000001u;
}
void MusicTrackList::clear_has_author() {
  _has_bits_[0] &= ~0x00000001u;
}
void MusicTrackList::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
const ::std::string& MusicTrackList::author() const {
  // @@protoc_insertion_point(field_get:MusicTrackList.author)
  return author_.GetNoArena();
}
void MusicTrackList::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MusicTrackList.author)
}
#if LANG_CXX11
void MusicTrackList::set_author(::std::string&& value) {
  set_has_author();
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MusicTrackList.author)
}
#endif
void MusicTrackList::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MusicTrackList.author)
}
void MusicTrackList::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MusicTrackList.author)
}
::std::string* MusicTrackList::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:MusicTrackList.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MusicTrackList::release_author() {
  // @@protoc_insertion_point(field_release:MusicTrackList.author)
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MusicTrackList::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:MusicTrackList.author)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
