// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music-albums.proto

#ifndef PROTOBUF_music_2dalbums_2eproto__INCLUDED
#define PROTOBUF_music_2dalbums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class AlbumTrack;
class AlbumTrackDefaultTypeInternal;
extern AlbumTrackDefaultTypeInternal _AlbumTrack_default_instance_;
class AlbumTrackList;
class AlbumTrackListDefaultTypeInternal;
extern AlbumTrackListDefaultTypeInternal _AlbumTrackList_default_instance_;

namespace protobuf_music_2dalbums_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_music_2dalbums_2eproto

// ===================================================================

class AlbumTrack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AlbumTrack) */ {
 public:
  AlbumTrack();
  virtual ~AlbumTrack();

  AlbumTrack(const AlbumTrack& from);

  inline AlbumTrack& operator=(const AlbumTrack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlbumTrack(AlbumTrack&& from) noexcept
    : AlbumTrack() {
    *this = ::std::move(from);
  }

  inline AlbumTrack& operator=(AlbumTrack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlbumTrack& default_instance();

  static inline const AlbumTrack* internal_default_instance() {
    return reinterpret_cast<const AlbumTrack*>(
               &_AlbumTrack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AlbumTrack* other);
  friend void swap(AlbumTrack& a, AlbumTrack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlbumTrack* New() const PROTOBUF_FINAL { return New(NULL); }

  AlbumTrack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlbumTrack& from);
  void MergeFrom(const AlbumTrack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlbumTrack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string track_id = 2;
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 2;
  const ::std::string& track_id() const;
  void set_track_id(const ::std::string& value);
  #if LANG_CXX11
  void set_track_id(::std::string&& value);
  #endif
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  ::std::string* mutable_track_id();
  ::std::string* release_track_id();
  void set_allocated_track_id(::std::string* track_id);

  // required string track_name = 4;
  bool has_track_name() const;
  void clear_track_name();
  static const int kTrackNameFieldNumber = 4;
  const ::std::string& track_name() const;
  void set_track_name(const ::std::string& value);
  #if LANG_CXX11
  void set_track_name(::std::string&& value);
  #endif
  void set_track_name(const char* value);
  void set_track_name(const char* value, size_t size);
  ::std::string* mutable_track_name();
  ::std::string* release_track_name();
  void set_allocated_track_name(::std::string* track_name);

  // required string author_name = 5;
  bool has_author_name() const;
  void clear_author_name();
  static const int kAuthorNameFieldNumber = 5;
  const ::std::string& author_name() const;
  void set_author_name(const ::std::string& value);
  #if LANG_CXX11
  void set_author_name(::std::string&& value);
  #endif
  void set_author_name(const char* value);
  void set_author_name(const char* value, size_t size);
  ::std::string* mutable_author_name();
  ::std::string* release_author_name();
  void set_allocated_author_name(::std::string* author_name);

  // optional int32 user_id_old = 1;
  bool has_user_id_old() const;
  void clear_user_id_old();
  static const int kUserIdOldFieldNumber = 1;
  ::google::protobuf::int32 user_id_old() const;
  void set_user_id_old(::google::protobuf::int32 value);

  // required uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint64 user_id = 6;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AlbumTrack)
 private:
  void set_has_user_id_old();
  void clear_has_user_id_old();
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_duration();
  void clear_has_duration();
  void set_has_track_name();
  void clear_has_track_name();
  void set_has_author_name();
  void clear_has_author_name();
  void set_has_user_id();
  void clear_has_user_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr track_id_;
  ::google::protobuf::internal::ArenaStringPtr track_name_;
  ::google::protobuf::internal::ArenaStringPtr author_name_;
  ::google::protobuf::int32 user_id_old_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_music_2dalbums_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlbumTrackList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AlbumTrackList) */ {
 public:
  AlbumTrackList();
  virtual ~AlbumTrackList();

  AlbumTrackList(const AlbumTrackList& from);

  inline AlbumTrackList& operator=(const AlbumTrackList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlbumTrackList(AlbumTrackList&& from) noexcept
    : AlbumTrackList() {
    *this = ::std::move(from);
  }

  inline AlbumTrackList& operator=(AlbumTrackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlbumTrackList& default_instance();

  static inline const AlbumTrackList* internal_default_instance() {
    return reinterpret_cast<const AlbumTrackList*>(
               &_AlbumTrackList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AlbumTrackList* other);
  friend void swap(AlbumTrackList& a, AlbumTrackList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlbumTrackList* New() const PROTOBUF_FINAL { return New(NULL); }

  AlbumTrackList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlbumTrackList& from);
  void MergeFrom(const AlbumTrackList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlbumTrackList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AlbumTrack tracks = 1;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 1;
  const ::AlbumTrack& tracks(int index) const;
  ::AlbumTrack* mutable_tracks(int index);
  ::AlbumTrack* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::AlbumTrack >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::AlbumTrack >&
      tracks() const;

  // required string listen_key = 2;
  bool has_listen_key() const;
  void clear_listen_key();
  static const int kListenKeyFieldNumber = 2;
  const ::std::string& listen_key() const;
  void set_listen_key(const ::std::string& value);
  #if LANG_CXX11
  void set_listen_key(::std::string&& value);
  #endif
  void set_listen_key(const char* value);
  void set_listen_key(const char* value, size_t size);
  ::std::string* mutable_listen_key();
  ::std::string* release_listen_key();
  void set_allocated_listen_key(::std::string* listen_key);

  // @@protoc_insertion_point(class_scope:AlbumTrackList)
 private:
  void set_has_listen_key();
  void clear_has_listen_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AlbumTrack > tracks_;
  ::google::protobuf::internal::ArenaStringPtr listen_key_;
  friend struct protobuf_music_2dalbums_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlbumTrack

// optional int32 user_id_old = 1;
inline bool AlbumTrack::has_user_id_old() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlbumTrack::set_has_user_id_old() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlbumTrack::clear_has_user_id_old() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlbumTrack::clear_user_id_old() {
  user_id_old_ = 0;
  clear_has_user_id_old();
}
inline ::google::protobuf::int32 AlbumTrack::user_id_old() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.user_id_old)
  return user_id_old_;
}
inline void AlbumTrack::set_user_id_old(::google::protobuf::int32 value) {
  set_has_user_id_old();
  user_id_old_ = value;
  // @@protoc_insertion_point(field_set:AlbumTrack.user_id_old)
}

// required string track_id = 2;
inline bool AlbumTrack::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlbumTrack::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlbumTrack::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlbumTrack::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
inline const ::std::string& AlbumTrack::track_id() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.track_id)
  return track_id_.GetNoArena();
}
inline void AlbumTrack::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlbumTrack.track_id)
}
#if LANG_CXX11
inline void AlbumTrack::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlbumTrack.track_id)
}
#endif
inline void AlbumTrack::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlbumTrack.track_id)
}
inline void AlbumTrack::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlbumTrack.track_id)
}
inline ::std::string* AlbumTrack::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:AlbumTrack.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumTrack::release_track_id() {
  // @@protoc_insertion_point(field_release:AlbumTrack.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumTrack::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:AlbumTrack.track_id)
}

// required uint32 duration = 3;
inline bool AlbumTrack::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlbumTrack::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlbumTrack::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlbumTrack::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 AlbumTrack::duration() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.duration)
  return duration_;
}
inline void AlbumTrack::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:AlbumTrack.duration)
}

// required string track_name = 4;
inline bool AlbumTrack::has_track_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlbumTrack::set_has_track_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlbumTrack::clear_has_track_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlbumTrack::clear_track_name() {
  track_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_name();
}
inline const ::std::string& AlbumTrack::track_name() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.track_name)
  return track_name_.GetNoArena();
}
inline void AlbumTrack::set_track_name(const ::std::string& value) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlbumTrack.track_name)
}
#if LANG_CXX11
inline void AlbumTrack::set_track_name(::std::string&& value) {
  set_has_track_name();
  track_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlbumTrack.track_name)
}
#endif
inline void AlbumTrack::set_track_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlbumTrack.track_name)
}
inline void AlbumTrack::set_track_name(const char* value, size_t size) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlbumTrack.track_name)
}
inline ::std::string* AlbumTrack::mutable_track_name() {
  set_has_track_name();
  // @@protoc_insertion_point(field_mutable:AlbumTrack.track_name)
  return track_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumTrack::release_track_name() {
  // @@protoc_insertion_point(field_release:AlbumTrack.track_name)
  clear_has_track_name();
  return track_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumTrack::set_allocated_track_name(::std::string* track_name) {
  if (track_name != NULL) {
    set_has_track_name();
  } else {
    clear_has_track_name();
  }
  track_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_name);
  // @@protoc_insertion_point(field_set_allocated:AlbumTrack.track_name)
}

// required string author_name = 5;
inline bool AlbumTrack::has_author_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlbumTrack::set_has_author_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlbumTrack::clear_has_author_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlbumTrack::clear_author_name() {
  author_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_name();
}
inline const ::std::string& AlbumTrack::author_name() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.author_name)
  return author_name_.GetNoArena();
}
inline void AlbumTrack::set_author_name(const ::std::string& value) {
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlbumTrack.author_name)
}
#if LANG_CXX11
inline void AlbumTrack::set_author_name(::std::string&& value) {
  set_has_author_name();
  author_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlbumTrack.author_name)
}
#endif
inline void AlbumTrack::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlbumTrack.author_name)
}
inline void AlbumTrack::set_author_name(const char* value, size_t size) {
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlbumTrack.author_name)
}
inline ::std::string* AlbumTrack::mutable_author_name() {
  set_has_author_name();
  // @@protoc_insertion_point(field_mutable:AlbumTrack.author_name)
  return author_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumTrack::release_author_name() {
  // @@protoc_insertion_point(field_release:AlbumTrack.author_name)
  clear_has_author_name();
  return author_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumTrack::set_allocated_author_name(::std::string* author_name) {
  if (author_name != NULL) {
    set_has_author_name();
  } else {
    clear_has_author_name();
  }
  author_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_name);
  // @@protoc_insertion_point(field_set_allocated:AlbumTrack.author_name)
}

// optional uint64 user_id = 6;
inline bool AlbumTrack::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlbumTrack::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlbumTrack::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlbumTrack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AlbumTrack::user_id() const {
  // @@protoc_insertion_point(field_get:AlbumTrack.user_id)
  return user_id_;
}
inline void AlbumTrack::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:AlbumTrack.user_id)
}

// -------------------------------------------------------------------

// AlbumTrackList

// repeated .AlbumTrack tracks = 1;
inline int AlbumTrackList::tracks_size() const {
  return tracks_.size();
}
inline void AlbumTrackList::clear_tracks() {
  tracks_.Clear();
}
inline const ::AlbumTrack& AlbumTrackList::tracks(int index) const {
  // @@protoc_insertion_point(field_get:AlbumTrackList.tracks)
  return tracks_.Get(index);
}
inline ::AlbumTrack* AlbumTrackList::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:AlbumTrackList.tracks)
  return tracks_.Mutable(index);
}
inline ::AlbumTrack* AlbumTrackList::add_tracks() {
  // @@protoc_insertion_point(field_add:AlbumTrackList.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AlbumTrack >*
AlbumTrackList::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:AlbumTrackList.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AlbumTrack >&
AlbumTrackList::tracks() const {
  // @@protoc_insertion_point(field_list:AlbumTrackList.tracks)
  return tracks_;
}

// required string listen_key = 2;
inline bool AlbumTrackList::has_listen_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlbumTrackList::set_has_listen_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlbumTrackList::clear_has_listen_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlbumTrackList::clear_listen_key() {
  listen_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listen_key();
}
inline const ::std::string& AlbumTrackList::listen_key() const {
  // @@protoc_insertion_point(field_get:AlbumTrackList.listen_key)
  return listen_key_.GetNoArena();
}
inline void AlbumTrackList::set_listen_key(const ::std::string& value) {
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AlbumTrackList.listen_key)
}
#if LANG_CXX11
inline void AlbumTrackList::set_listen_key(::std::string&& value) {
  set_has_listen_key();
  listen_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AlbumTrackList.listen_key)
}
#endif
inline void AlbumTrackList::set_listen_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AlbumTrackList.listen_key)
}
inline void AlbumTrackList::set_listen_key(const char* value, size_t size) {
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AlbumTrackList.listen_key)
}
inline ::std::string* AlbumTrackList::mutable_listen_key() {
  set_has_listen_key();
  // @@protoc_insertion_point(field_mutable:AlbumTrackList.listen_key)
  return listen_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumTrackList::release_listen_key() {
  // @@protoc_insertion_point(field_release:AlbumTrackList.listen_key)
  clear_has_listen_key();
  return listen_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumTrackList::set_allocated_listen_key(::std::string* listen_key) {
  if (listen_key != NULL) {
    set_has_listen_key();
  } else {
    clear_has_listen_key();
  }
  listen_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listen_key);
  // @@protoc_insertion_point(field_set_allocated:AlbumTrackList.listen_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_music_2dalbums_2eproto__INCLUDED
