// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music-playlists.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music-playlists.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Track>
     _instance;
} _Track_default_instance_;
class TrackListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrackList>
     _instance;
} _TrackList_default_instance_;

namespace protobuf_music_2dplaylists_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, user_id_old_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, track_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, author_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, user_id_),
  3,
  0,
  4,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackList, tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackList, listen_key_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(Track)},
  { 17, 24, sizeof(TrackList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Track_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrackList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music-playlists.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Track_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Track_default_instance_);_TrackList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrackList_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025music-playlists.proto\"z\n\005Track\022\023\n\013user"
      "_id_old\030\001 \001(\r\022\020\n\010track_id\030\002 \002(\t\022\020\n\010durat"
      "ion\030\003 \002(\r\022\022\n\ntrack_name\030\004 \002(\t\022\023\n\013author_"
      "name\030\005 \002(\t\022\017\n\007user_id\030\006 \001(\004\"7\n\tTrackList"
      "\022\026\n\006tracks\030\001 \003(\0132\006.Track\022\022\n\nlisten_key\030\002"
      " \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music-playlists.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_2dplaylists_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track::kUserIdOldFieldNumber;
const int Track::kTrackIdFieldNumber;
const int Track::kDurationFieldNumber;
const int Track::kTrackNameFieldNumber;
const int Track::kAuthorNameFieldNumber;
const int Track::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track::Track()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2dplaylists_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Track)
}
Track::Track(const Track& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_id()) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  track_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_name()) {
    track_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_name_);
  }
  author_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_author_name()) {
    author_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_name_);
  }
  ::memcpy(&user_id_old_, &from.user_id_old_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_id_old_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:Track)
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_old_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_id_old_)) + sizeof(user_id_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:Track)
  SharedDtor();
}

void Track::SharedDtor() {
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_music_2dplaylists_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dplaylists_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Track& Track::default_instance() {
  protobuf_music_2dplaylists_2eproto::InitDefaults();
  return *internal_default_instance();
}

Track* Track::New(::google::protobuf::Arena* arena) const {
  Track* n = new Track;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!track_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!track_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!author_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*author_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&user_id_old_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&user_id_old_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id_old = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id_old();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string track_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_id().data(), static_cast<int>(this->track_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Track.track_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string track_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_name().data(), static_cast<int>(this->track_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Track.track_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string author_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author_name().data(), static_cast<int>(this->author_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Track.author_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 user_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_id_old = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id_old(), output);
  }

  // required string track_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.track_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track_id(), output);
  }

  // required uint32 duration = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // required string track_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_name().data(), static_cast<int>(this->track_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.track_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->track_name(), output);
  }

  // required string author_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_name().data(), static_cast<int>(this->author_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.author_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->author_name(), output);
  }

  // optional uint64 user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Track)
}

::google::protobuf::uint8* Track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_id_old = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id_old(), target);
  }

  // required string track_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.track_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track_id(), target);
  }

  // required uint32 duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // required string track_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_name().data(), static_cast<int>(this->track_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.track_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->track_name(), target);
  }

  // required string author_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author_name().data(), static_cast<int>(this->author_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Track.author_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->author_name(), target);
  }

  // optional uint64 user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Track)
  return target;
}

size_t Track::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Track)
  size_t total_size = 0;

  if (has_track_id()) {
    // required string track_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_id());
  }

  if (has_track_name()) {
    // required string track_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_name());
  }

  if (has_author_name()) {
    // required string author_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_name());
  }

  if (has_duration()) {
    // required uint32 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  return total_size;
}
size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Track)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string track_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_id());

    // required string track_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_name());

    // required string author_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author_name());

    // required uint32 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 user_id_old = 1;
  if (has_user_id_old()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id_old());
  }

  // optional uint64 user_id = 6;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Track)
  GOOGLE_DCHECK_NE(&from, this);
  const Track* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Track>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Track)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Track)
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_track_id();
      track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track_name();
      track_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_author_name();
      author_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_old_ = from.user_id_old_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  return true;
}

void Track::Swap(Track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Track::InternalSwap(Track* other) {
  using std::swap;
  track_id_.Swap(&other->track_id_);
  track_name_.Swap(&other->track_name_);
  author_name_.Swap(&other->author_name_);
  swap(user_id_old_, other->user_id_old_);
  swap(duration_, other->duration_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_music_2dplaylists_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dplaylists_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Track

// optional uint32 user_id_old = 1;
bool Track::has_user_id_old() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Track::set_has_user_id_old() {
  _has_bits_[0] |= 0x00000008u;
}
void Track::clear_has_user_id_old() {
  _has_bits_[0] &= ~0x00000008u;
}
void Track::clear_user_id_old() {
  user_id_old_ = 0u;
  clear_has_user_id_old();
}
::google::protobuf::uint32 Track::user_id_old() const {
  // @@protoc_insertion_point(field_get:Track.user_id_old)
  return user_id_old_;
}
void Track::set_user_id_old(::google::protobuf::uint32 value) {
  set_has_user_id_old();
  user_id_old_ = value;
  // @@protoc_insertion_point(field_set:Track.user_id_old)
}

// required string track_id = 2;
bool Track::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Track::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Track::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Track::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_id();
}
const ::std::string& Track::track_id() const {
  // @@protoc_insertion_point(field_get:Track.track_id)
  return track_id_.GetNoArena();
}
void Track::set_track_id(const ::std::string& value) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Track.track_id)
}
#if LANG_CXX11
void Track::set_track_id(::std::string&& value) {
  set_has_track_id();
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Track.track_id)
}
#endif
void Track::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Track.track_id)
}
void Track::set_track_id(const char* value, size_t size) {
  set_has_track_id();
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Track.track_id)
}
::std::string* Track::mutable_track_id() {
  set_has_track_id();
  // @@protoc_insertion_point(field_mutable:Track.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_track_id() {
  // @@protoc_insertion_point(field_release:Track.track_id)
  clear_has_track_id();
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    set_has_track_id();
  } else {
    clear_has_track_id();
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:Track.track_id)
}

// required uint32 duration = 3;
bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Track::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Track::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 Track::duration() const {
  // @@protoc_insertion_point(field_get:Track.duration)
  return duration_;
}
void Track::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:Track.duration)
}

// required string track_name = 4;
bool Track::has_track_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Track::set_has_track_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Track::clear_has_track_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Track::clear_track_name() {
  track_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track_name();
}
const ::std::string& Track::track_name() const {
  // @@protoc_insertion_point(field_get:Track.track_name)
  return track_name_.GetNoArena();
}
void Track::set_track_name(const ::std::string& value) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Track.track_name)
}
#if LANG_CXX11
void Track::set_track_name(::std::string&& value) {
  set_has_track_name();
  track_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Track.track_name)
}
#endif
void Track::set_track_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Track.track_name)
}
void Track::set_track_name(const char* value, size_t size) {
  set_has_track_name();
  track_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Track.track_name)
}
::std::string* Track::mutable_track_name() {
  set_has_track_name();
  // @@protoc_insertion_point(field_mutable:Track.track_name)
  return track_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_track_name() {
  // @@protoc_insertion_point(field_release:Track.track_name)
  clear_has_track_name();
  return track_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_track_name(::std::string* track_name) {
  if (track_name != NULL) {
    set_has_track_name();
  } else {
    clear_has_track_name();
  }
  track_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_name);
  // @@protoc_insertion_point(field_set_allocated:Track.track_name)
}

// required string author_name = 5;
bool Track::has_author_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Track::set_has_author_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Track::clear_has_author_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Track::clear_author_name() {
  author_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author_name();
}
const ::std::string& Track::author_name() const {
  // @@protoc_insertion_point(field_get:Track.author_name)
  return author_name_.GetNoArena();
}
void Track::set_author_name(const ::std::string& value) {
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Track.author_name)
}
#if LANG_CXX11
void Track::set_author_name(::std::string&& value) {
  set_has_author_name();
  author_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Track.author_name)
}
#endif
void Track::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Track.author_name)
}
void Track::set_author_name(const char* value, size_t size) {
  set_has_author_name();
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Track.author_name)
}
::std::string* Track::mutable_author_name() {
  set_has_author_name();
  // @@protoc_insertion_point(field_mutable:Track.author_name)
  return author_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_author_name() {
  // @@protoc_insertion_point(field_release:Track.author_name)
  clear_has_author_name();
  return author_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_author_name(::std::string* author_name) {
  if (author_name != NULL) {
    set_has_author_name();
  } else {
    clear_has_author_name();
  }
  author_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_name);
  // @@protoc_insertion_point(field_set_allocated:Track.author_name)
}

// optional uint64 user_id = 6;
bool Track::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Track::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Track::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Track::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 Track::user_id() const {
  // @@protoc_insertion_point(field_get:Track.user_id)
  return user_id_;
}
void Track::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Track.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackList::kTracksFieldNumber;
const int TrackList::kListenKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackList::TrackList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2dplaylists_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrackList)
}
TrackList::TrackList(const TrackList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  listen_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_listen_key()) {
    listen_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listen_key_);
  }
  // @@protoc_insertion_point(copy_constructor:TrackList)
}

void TrackList::SharedCtor() {
  _cached_size_ = 0;
  listen_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TrackList::~TrackList() {
  // @@protoc_insertion_point(destructor:TrackList)
  SharedDtor();
}

void TrackList::SharedDtor() {
  listen_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackList::descriptor() {
  protobuf_music_2dplaylists_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dplaylists_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackList& TrackList::default_instance() {
  protobuf_music_2dplaylists_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrackList* TrackList::New(::google::protobuf::Arena* arena) const {
  TrackList* n = new TrackList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackList::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  if (has_listen_key()) {
    GOOGLE_DCHECK(!listen_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*listen_key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrackList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Track tracks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string listen_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listen_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listen_key().data(), static_cast<int>(this->listen_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrackList.listen_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrackList)
  return false;
#undef DO_
}

void TrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Track tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tracks(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string listen_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listen_key().data(), static_cast<int>(this->listen_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackList.listen_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->listen_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrackList)
}

::google::protobuf::uint8* TrackList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Track tracks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tracks(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required string listen_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listen_key().data(), static_cast<int>(this->listen_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackList.listen_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->listen_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackList)
  return target;
}

size_t TrackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string listen_key = 2;
  if (has_listen_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listen_key());
  }
  // repeated .Track tracks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackList)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackList)
    MergeFrom(*source);
  }
}

void TrackList::MergeFrom(const TrackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (from.has_listen_key()) {
    set_has_listen_key();
    listen_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listen_key_);
  }
}

void TrackList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackList::CopyFrom(const TrackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tracks())) return false;
  return true;
}

void TrackList::Swap(TrackList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackList::InternalSwap(TrackList* other) {
  using std::swap;
  tracks_.InternalSwap(&other->tracks_);
  listen_key_.Swap(&other->listen_key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackList::GetMetadata() const {
  protobuf_music_2dplaylists_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2dplaylists_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackList

// repeated .Track tracks = 1;
int TrackList::tracks_size() const {
  return tracks_.size();
}
void TrackList::clear_tracks() {
  tracks_.Clear();
}
const ::Track& TrackList::tracks(int index) const {
  // @@protoc_insertion_point(field_get:TrackList.tracks)
  return tracks_.Get(index);
}
::Track* TrackList::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:TrackList.tracks)
  return tracks_.Mutable(index);
}
::Track* TrackList::add_tracks() {
  // @@protoc_insertion_point(field_add:TrackList.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::Track >*
TrackList::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:TrackList.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::Track >&
TrackList::tracks() const {
  // @@protoc_insertion_point(field_list:TrackList.tracks)
  return tracks_;
}

// required string listen_key = 2;
bool TrackList::has_listen_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackList::set_has_listen_key() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackList::clear_has_listen_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackList::clear_listen_key() {
  listen_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listen_key();
}
const ::std::string& TrackList::listen_key() const {
  // @@protoc_insertion_point(field_get:TrackList.listen_key)
  return listen_key_.GetNoArena();
}
void TrackList::set_listen_key(const ::std::string& value) {
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrackList.listen_key)
}
#if LANG_CXX11
void TrackList::set_listen_key(::std::string&& value) {
  set_has_listen_key();
  listen_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrackList.listen_key)
}
#endif
void TrackList::set_listen_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrackList.listen_key)
}
void TrackList::set_listen_key(const char* value, size_t size) {
  set_has_listen_key();
  listen_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrackList.listen_key)
}
::std::string* TrackList::mutable_listen_key() {
  set_has_listen_key();
  // @@protoc_insertion_point(field_mutable:TrackList.listen_key)
  return listen_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackList::release_listen_key() {
  // @@protoc_insertion_point(field_release:TrackList.listen_key)
  clear_has_listen_key();
  return listen_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackList::set_allocated_listen_key(::std::string* listen_key) {
  if (listen_key != NULL) {
    set_has_listen_key();
  } else {
    clear_has_listen_key();
  }
  listen_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listen_key);
  // @@protoc_insertion_point(field_set_allocated:TrackList.listen_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
