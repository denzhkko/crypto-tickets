// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace srch {
namespace music {
class TrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Track>
     _instance;
} _Track_default_instance_;

namespace protobuf_music_5fmanager_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, duration_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(Track)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Track_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music_manager.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Track_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Track_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023music_manager.proto\022\rpb.srch.music\"Z\n\005"
      "Track\022\r\n\005track\030\001 \001(\t\022\016\n\006artist\030\002 \001(\t\022\017\n\007"
      "user_id\030\003 \001(\t\022\017\n\007file_id\030\004 \001(\t\022\020\n\010durati"
      "on\030\005 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music_manager.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_5fmanager_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track::kTrackFieldNumber;
const int Track::kArtistFieldNumber;
const int Track::kUserIdFieldNumber;
const int Track::kFileIdFieldNumber;
const int Track::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track::Track()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.Track)
}
Track::Track(const Track& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track()) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_id()) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.Track)
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0u;
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:pb.srch.music.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_music_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Track& Track::default_instance() {
  protobuf_music_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

Track* Track::New(::google::protobuf::Arena* arena) const {
  Track* n = new Track;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!track_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*track_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!artist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*artist_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!file_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_id_.UnsafeRawStringPointer())->clear();
    }
  }
  duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.music.Track.track");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.music.Track.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.music.Track.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.srch.music.Track.file_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->track(), output);
  }

  // optional string artist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // optional string file_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_id(), output);
  }

  // optional uint32 duration = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.Track)
}

::google::protobuf::uint8* Track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->track(), target);
  }

  // optional string artist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // optional string file_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.srch.music.Track.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_id(), target);
  }

  // optional uint32 duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.Track)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track());
    }

    // optional string artist = 2;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string file_id = 4;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional uint32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.Track)
  GOOGLE_DCHECK_NE(&from, this);
  const Track* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Track>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.Track)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.Track)
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_track();
      track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_artist();
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_file_id();
      file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::Swap(Track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Track::InternalSwap(Track* other) {
  using std::swap;
  track_.Swap(&other->track_);
  artist_.Swap(&other->artist_);
  user_id_.Swap(&other->user_id_);
  file_id_.Swap(&other->file_id_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_music_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Track

// optional string track = 1;
bool Track::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Track::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
void Track::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
void Track::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
const ::std::string& Track::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.track)
  return track_.GetNoArena();
}
void Track::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.track)
}
#if LANG_CXX11
void Track::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.track)
}
#endif
void Track::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.track)
}
void Track::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.track)
}
::std::string* Track::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.track)
}

// optional string artist = 2;
bool Track::has_artist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Track::set_has_artist() {
  _has_bits_[0] |= 0x00000002u;
}
void Track::clear_has_artist() {
  _has_bits_[0] &= ~0x00000002u;
}
void Track::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
const ::std::string& Track::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.artist)
  return artist_.GetNoArena();
}
void Track::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.artist)
}
#if LANG_CXX11
void Track::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.artist)
}
#endif
void Track::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.artist)
}
void Track::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.artist)
}
::std::string* Track::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.artist)
}

// optional string user_id = 3;
bool Track::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Track::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Track::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Track::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& Track::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.user_id)
  return user_id_.GetNoArena();
}
void Track::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.user_id)
}
#if LANG_CXX11
void Track::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.user_id)
}
#endif
void Track::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.user_id)
}
void Track::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.user_id)
}
::std::string* Track::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.user_id)
}

// optional string file_id = 4;
bool Track::has_file_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Track::set_has_file_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Track::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Track::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
const ::std::string& Track::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.file_id)
  return file_id_.GetNoArena();
}
void Track::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.file_id)
}
#if LANG_CXX11
void Track::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.file_id)
}
#endif
void Track::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.file_id)
}
void Track::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.file_id)
}
::std::string* Track::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Track::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Track::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.file_id)
}

// optional uint32 duration = 5;
bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Track::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Track::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 Track::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.duration)
  return duration_;
}
void Track::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace music
}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)
