// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_manager.proto

#ifndef PROTOBUF_music_5fmanager_2eproto__INCLUDED
#define PROTOBUF_music_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pb {
namespace srch {
namespace music {
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace music
}  // namespace srch
}  // namespace pb

namespace pb {
namespace srch {
namespace music {

namespace protobuf_music_5fmanager_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_music_5fmanager_2eproto

// ===================================================================

class Track : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Track* other);
  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const PROTOBUF_FINAL { return New(NULL); }

  Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string track = 1;
  bool has_track() const;
  void clear_track();
  static const int kTrackFieldNumber = 1;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // optional string artist = 2;
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 2;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string file_id = 4;
  bool has_file_id() const;
  void clear_file_id();
  static const int kFileIdFieldNumber = 4;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // optional uint32 duration = 5;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.Track)
 private:
  void set_has_track();
  void clear_has_track();
  void set_has_artist();
  void clear_has_artist();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_file_id();
  void clear_has_file_id();
  void set_has_duration();
  void clear_has_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::uint32 duration_;
  friend struct protobuf_music_5fmanager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Track

// optional string track = 1;
inline bool Track::has_track() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::set_has_track() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Track::clear_has_track() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Track::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_track();
}
inline const ::std::string& Track::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.track)
  return track_.GetNoArena();
}
inline void Track::set_track(const ::std::string& value) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.track)
}
#if LANG_CXX11
inline void Track::set_track(::std::string&& value) {
  set_has_track();
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.track)
}
#endif
inline void Track::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.track)
}
inline void Track::set_track(const char* value, size_t size) {
  set_has_track();
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.track)
}
inline ::std::string* Track::mutable_track() {
  set_has_track();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Track::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.track)
  clear_has_track();
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    set_has_track();
  } else {
    clear_has_track();
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.track)
}

// optional string artist = 2;
inline bool Track::has_artist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track::set_has_artist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Track::clear_has_artist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Track::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_artist();
}
inline const ::std::string& Track::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.artist)
  return artist_.GetNoArena();
}
inline void Track::set_artist(const ::std::string& value) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.artist)
}
#if LANG_CXX11
inline void Track::set_artist(::std::string&& value) {
  set_has_artist();
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.artist)
}
#endif
inline void Track::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.artist)
}
inline void Track::set_artist(const char* value, size_t size) {
  set_has_artist();
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.artist)
}
inline ::std::string* Track::mutable_artist() {
  set_has_artist();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Track::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.artist)
  clear_has_artist();
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    set_has_artist();
  } else {
    clear_has_artist();
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.artist)
}

// optional string user_id = 3;
inline bool Track::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Track::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Track::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Track::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& Track::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.user_id)
  return user_id_.GetNoArena();
}
inline void Track::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.user_id)
}
#if LANG_CXX11
inline void Track::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.user_id)
}
#endif
inline void Track::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.user_id)
}
inline void Track::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.user_id)
}
inline ::std::string* Track::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Track::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.user_id)
}

// optional string file_id = 4;
inline bool Track::has_file_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Track::set_has_file_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Track::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Track::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_id();
}
inline const ::std::string& Track::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.file_id)
  return file_id_.GetNoArena();
}
inline void Track::set_file_id(const ::std::string& value) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.file_id)
}
#if LANG_CXX11
inline void Track::set_file_id(::std::string&& value) {
  set_has_file_id();
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.Track.file_id)
}
#endif
inline void Track::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.Track.file_id)
}
inline void Track::set_file_id(const char* value, size_t size) {
  set_has_file_id();
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.Track.file_id)
}
inline ::std::string* Track::mutable_file_id() {
  set_has_file_id();
  // @@protoc_insertion_point(field_mutable:pb.srch.music.Track.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Track::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.Track.file_id)
  clear_has_file_id();
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    set_has_file_id();
  } else {
    clear_has_file_id();
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.Track.file_id)
}

// optional uint32 duration = 5;
inline bool Track::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Track::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Track::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Track::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 Track::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.Track.duration)
  return duration_;
}
inline void Track::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.Track.duration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace music
}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_music_5fmanager_2eproto__INCLUDED
