// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace srch {
namespace music {
class SearcherParamsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SearcherParams>
     _instance;
} _SearcherParams_default_instance_;
class UrlInfoParamsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UrlInfoParams>
     _instance;
} _UrlInfoParams_default_instance_;
class SerpSiteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerpSite>
     _instance;
} _SerpSite_default_instance_;
class ShardSiteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShardSite>
     _instance;
} _ShardSite_default_instance_;
class ManagerParamsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ManagerParams>
     _instance;
} _ManagerParams_default_instance_;

namespace protobuf_music_5frequest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, query_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, is_utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearcherParams, documents_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlInfoParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlInfoParams, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlInfoParams, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlInfoParams, url_hashes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSite, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSite, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSite, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerpSite, sq_model_rank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardSite, url_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardSite, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardSite, sq_model_rank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, query_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, is_voice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, is_album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, is_nails_disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, url_hashes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, supposed_artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, supposed_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, dict_artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, dict_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, use_titles_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerParams, lbcmd_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SearcherParams)},
  { 12, -1, sizeof(UrlInfoParams)},
  { 20, -1, sizeof(SerpSite)},
  { 29, -1, sizeof(ShardSite)},
  { 37, -1, sizeof(ManagerParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearcherParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UrlInfoParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerpSite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShardSite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManagerParams_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music_request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _SearcherParams_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SearcherParams_default_instance_);_UrlInfoParams_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UrlInfoParams_default_instance_);_SerpSite_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerpSite_default_instance_);_ShardSite_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShardSite_default_instance_);_ManagerParams_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ManagerParams_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023music_request.proto\022\rpb.srch.music\032\rop"
      "tions.proto\"\346\001\n\016SearcherParams\022\027\n\003qid\030\001 "
      "\001(\tB\n\212\265\030\006\n\004_qid\022#\n\tuser_type\030\002 \001(\tB\020\212\265\030\014"
      "\n\n_user_type\022\026\n\005query\030\003 \001(\tB\007\212\265\030\003\n\001q\022\036\n\n"
      "query_data\030\004 \001(\tB\n\212\265\030\006\n\004wqp2\022\036\n\007rb_code\030"
      "\005 \001(\tB\r\212\265\030\t\n\007rb_code\022\034\n\007is_utf8\030\006 \001(\010B\013\212"
      "\265\030\007\n\005_utf8\022 \n\017documents_count\030\007 \001(\004B\007\212\265\030"
      "\003\n\001n\"j\n\rUrlInfoParams\022\027\n\003qid\030\001 \001(\tB\n\212\265\030\006"
      "\n\004_qid\022#\n\tuser_type\030\002 \001(\tB\020\212\265\030\014\n\n_user_t"
      "ype\022\033\n\nurl_hashes\030\003 \003(\tB\007\212\265\030\003\n\001q\"O\n\010Serp"
      "Site\022\020\n\010position\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\r\n\005t"
      "itle\030\003 \001(\t\022\025\n\rsq_model_rank\030\004 \001(\002\"F\n\tSha"
      "rdSite\022\020\n\010url_hash\030\001 \001(\004\022\020\n\010position\030\003 \001"
      "(\r\022\025\n\rsq_model_rank\030\004 \001(\002\"\242\005\n\rManagerPar"
      "ams\022\027\n\003qid\030\001 \001(\tB\n\212\265\030\006\n\004_qid\022#\n\tuser_typ"
      "e\030\002 \001(\tB\020\212\265\030\014\n\n_user_type\022\026\n\005query\030\003 \001(\t"
      "B\007\212\265\030\003\n\001q\022\036\n\nquery_data\030\004 \001(\tB\n\212\265\030\006\n\004wqp"
      "2\022\036\n\007rb_code\030\005 \001(\tB\r\212\265\030\t\n\007rb_code\022\035\n\010is_"
      "voice\030\006 \001(\010B\013\212\265\030\007\n\005voice\022\036\n\010is_album\030\007 \001"
      "(\010B\014\212\265\030\010\n\006_album\0225\n\021is_nails_disabled\030\010 "
      "\001(\010B\032\212\265\030\026\n\024_music_disable_nails\022#\n\nurl_h"
      "ashes\030\t \003(\tB\017\212\265\030\013\n\turls_info\022.\n\017supposed"
      "_artist\030\n \001(\tB\025\212\265\030\021\n\017supposed_artist\022,\n\016"
      "supposed_track\030\013 \001(\tB\024\212\265\030\020\n\016supposed_tra"
      "ck\022&\n\013dict_artist\030\014 \001(\tB\021\212\265\030\r\n\013dict_arti"
      "st\022$\n\ndict_track\030\r \001(\tB\020\212\265\030\014\n\ndict_track"
      "\0221\n\004serp\030\016 \003(\0132\027.pb.srch.music.SerpSiteB"
      "\n\212\265\030\006\n\004serp\0224\n\005shard\030\017 \003(\0132\030.pb.srch.mus"
      "ic.ShardSiteB\013\212\265\030\007\n\005shard\022/\n\016use_titles_"
      "new\030\020 \001(\010B\027\212\265\030\023\n\021_music_titles_new\022\032\n\005lb"
      "cmd\030\021 \001(\tB\013\212\265\030\007\n\005LBcmdb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music_request.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_5frequest_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearcherParams::kQidFieldNumber;
const int SearcherParams::kUserTypeFieldNumber;
const int SearcherParams::kQueryFieldNumber;
const int SearcherParams::kQueryDataFieldNumber;
const int SearcherParams::kRbCodeFieldNumber;
const int SearcherParams::kIsUtf8FieldNumber;
const int SearcherParams::kDocumentsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearcherParams::SearcherParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.SearcherParams)
}
SearcherParams::SearcherParams(const SearcherParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_type().size() > 0) {
    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  query_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_data().size() > 0) {
    query_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_data_);
  }
  rb_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rb_code().size() > 0) {
    rb_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_code_);
  }
  ::memcpy(&documents_count_, &from.documents_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_utf8_) -
    reinterpret_cast<char*>(&documents_count_)) + sizeof(is_utf8_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.SearcherParams)
}

void SearcherParams::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&documents_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_utf8_) -
      reinterpret_cast<char*>(&documents_count_)) + sizeof(is_utf8_));
  _cached_size_ = 0;
}

SearcherParams::~SearcherParams() {
  // @@protoc_insertion_point(destructor:pb.srch.music.SearcherParams)
  SharedDtor();
}

void SearcherParams::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearcherParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearcherParams::descriptor() {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearcherParams& SearcherParams::default_instance() {
  protobuf_music_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearcherParams* SearcherParams::New(::google::protobuf::Arena* arena) const {
  SearcherParams* n = new SearcherParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearcherParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.SearcherParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&documents_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_utf8_) -
      reinterpret_cast<char*>(&documents_count_)) + sizeof(is_utf8_));
  _internal_metadata_.Clear();
}

bool SearcherParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.SearcherParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string qid = 1 [(.gogo.query) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SearcherParams.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_type = 2 [(.gogo.query) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_type().data(), static_cast<int>(this->user_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SearcherParams.user_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 3 [(.gogo.query) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SearcherParams.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query_data = 4 [(.gogo.query) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_data().data(), static_cast<int>(this->query_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SearcherParams.query_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rb_code = 5 [(.gogo.query) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rb_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rb_code().data(), static_cast<int>(this->rb_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SearcherParams.rb_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_utf8 = 6 [(.gogo.query) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_utf8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 documents_count = 7 [(.gogo.query) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &documents_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.SearcherParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.SearcherParams)
  return false;
#undef DO_
}

void SearcherParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.SearcherParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_data().data(), static_cast<int>(this->query_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.query_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->query_data(), output);
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rb_code().data(), static_cast<int>(this->rb_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.rb_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rb_code(), output);
  }

  // bool is_utf8 = 6 [(.gogo.query) = {
  if (this->is_utf8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_utf8(), output);
  }

  // uint64 documents_count = 7 [(.gogo.query) = {
  if (this->documents_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->documents_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.SearcherParams)
}

::google::protobuf::uint8* SearcherParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.SearcherParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_data().data(), static_cast<int>(this->query_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.query_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query_data(), target);
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rb_code().data(), static_cast<int>(this->rb_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SearcherParams.rb_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rb_code(), target);
  }

  // bool is_utf8 = 6 [(.gogo.query) = {
  if (this->is_utf8() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_utf8(), target);
  }

  // uint64 documents_count = 7 [(.gogo.query) = {
  if (this->documents_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->documents_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.SearcherParams)
  return target;
}

size_t SearcherParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.SearcherParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_data());
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rb_code());
  }

  // uint64 documents_count = 7 [(.gogo.query) = {
  if (this->documents_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->documents_count());
  }

  // bool is_utf8 = 6 [(.gogo.query) = {
  if (this->is_utf8() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearcherParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.SearcherParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SearcherParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearcherParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.SearcherParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.SearcherParams)
    MergeFrom(*source);
  }
}

void SearcherParams::MergeFrom(const SearcherParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.SearcherParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.user_type().size() > 0) {

    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.query_data().size() > 0) {

    query_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_data_);
  }
  if (from.rb_code().size() > 0) {

    rb_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_code_);
  }
  if (from.documents_count() != 0) {
    set_documents_count(from.documents_count());
  }
  if (from.is_utf8() != 0) {
    set_is_utf8(from.is_utf8());
  }
}

void SearcherParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.SearcherParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearcherParams::CopyFrom(const SearcherParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.SearcherParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearcherParams::IsInitialized() const {
  return true;
}

void SearcherParams::Swap(SearcherParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearcherParams::InternalSwap(SearcherParams* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  user_type_.Swap(&other->user_type_);
  query_.Swap(&other->query_);
  query_data_.Swap(&other->query_data_);
  rb_code_.Swap(&other->rb_code_);
  swap(documents_count_, other->documents_count_);
  swap(is_utf8_, other->is_utf8_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearcherParams::GetMetadata() const {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearcherParams

// string qid = 1 [(.gogo.query) = {
void SearcherParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearcherParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.qid)
  return qid_.GetNoArena();
}
void SearcherParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.qid)
}
#if LANG_CXX11
void SearcherParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.qid)
}
#endif
void SearcherParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.qid)
}
void SearcherParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.qid)
}
::std::string* SearcherParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearcherParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearcherParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
void SearcherParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearcherParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.user_type)
  return user_type_.GetNoArena();
}
void SearcherParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.user_type)
}
#if LANG_CXX11
void SearcherParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.user_type)
}
#endif
void SearcherParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.user_type)
}
void SearcherParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.user_type)
}
::std::string* SearcherParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearcherParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearcherParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.user_type)
}

// string query = 3 [(.gogo.query) = {
void SearcherParams::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearcherParams::query() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.query)
  return query_.GetNoArena();
}
void SearcherParams::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.query)
}
#if LANG_CXX11
void SearcherParams::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.query)
}
#endif
void SearcherParams::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.query)
}
void SearcherParams::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.query)
}
::std::string* SearcherParams::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearcherParams::release_query() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearcherParams::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.query)
}

// string query_data = 4 [(.gogo.query) = {
void SearcherParams::clear_query_data() {
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearcherParams::query_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.query_data)
  return query_data_.GetNoArena();
}
void SearcherParams::set_query_data(const ::std::string& value) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.query_data)
}
#if LANG_CXX11
void SearcherParams::set_query_data(::std::string&& value) {
  
  query_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.query_data)
}
#endif
void SearcherParams::set_query_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.query_data)
}
void SearcherParams::set_query_data(const char* value, size_t size) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.query_data)
}
::std::string* SearcherParams::mutable_query_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.query_data)
  return query_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearcherParams::release_query_data() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.query_data)
  
  return query_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearcherParams::set_allocated_query_data(::std::string* query_data) {
  if (query_data != NULL) {
    
  } else {
    
  }
  query_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.query_data)
}

// string rb_code = 5 [(.gogo.query) = {
void SearcherParams::clear_rb_code() {
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SearcherParams::rb_code() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.rb_code)
  return rb_code_.GetNoArena();
}
void SearcherParams::set_rb_code(const ::std::string& value) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.rb_code)
}
#if LANG_CXX11
void SearcherParams::set_rb_code(::std::string&& value) {
  
  rb_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.rb_code)
}
#endif
void SearcherParams::set_rb_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.rb_code)
}
void SearcherParams::set_rb_code(const char* value, size_t size) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.rb_code)
}
::std::string* SearcherParams::mutable_rb_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.rb_code)
  return rb_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearcherParams::release_rb_code() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.rb_code)
  
  return rb_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearcherParams::set_allocated_rb_code(::std::string* rb_code) {
  if (rb_code != NULL) {
    
  } else {
    
  }
  rb_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_code);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.rb_code)
}

// bool is_utf8 = 6 [(.gogo.query) = {
void SearcherParams::clear_is_utf8() {
  is_utf8_ = false;
}
bool SearcherParams::is_utf8() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.is_utf8)
  return is_utf8_;
}
void SearcherParams::set_is_utf8(bool value) {
  
  is_utf8_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.is_utf8)
}

// uint64 documents_count = 7 [(.gogo.query) = {
void SearcherParams::clear_documents_count() {
  documents_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SearcherParams::documents_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.documents_count)
  return documents_count_;
}
void SearcherParams::set_documents_count(::google::protobuf::uint64 value) {
  
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.documents_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlInfoParams::kQidFieldNumber;
const int UrlInfoParams::kUserTypeFieldNumber;
const int UrlInfoParams::kUrlHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlInfoParams::UrlInfoParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.UrlInfoParams)
}
UrlInfoParams::UrlInfoParams(const UrlInfoParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      url_hashes_(from.url_hashes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_type().size() > 0) {
    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.UrlInfoParams)
}

void UrlInfoParams::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UrlInfoParams::~UrlInfoParams() {
  // @@protoc_insertion_point(destructor:pb.srch.music.UrlInfoParams)
  SharedDtor();
}

void UrlInfoParams::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlInfoParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlInfoParams::descriptor() {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlInfoParams& UrlInfoParams::default_instance() {
  protobuf_music_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

UrlInfoParams* UrlInfoParams::New(::google::protobuf::Arena* arena) const {
  UrlInfoParams* n = new UrlInfoParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UrlInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.UrlInfoParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_hashes_.Clear();
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UrlInfoParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.UrlInfoParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string qid = 1 [(.gogo.query) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.UrlInfoParams.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_type = 2 [(.gogo.query) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_type().data(), static_cast<int>(this->user_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.UrlInfoParams.user_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url_hashes = 3 [(.gogo.query) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url_hashes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url_hashes(this->url_hashes_size() - 1).data(),
            static_cast<int>(this->url_hashes(this->url_hashes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.UrlInfoParams.url_hashes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.UrlInfoParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.UrlInfoParams)
  return false;
#undef DO_
}

void UrlInfoParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.UrlInfoParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // repeated string url_hashes = 3 [(.gogo.query) = {
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_hashes(i).data(), static_cast<int>(this->url_hashes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.url_hashes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url_hashes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.UrlInfoParams)
}

::google::protobuf::uint8* UrlInfoParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.UrlInfoParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // repeated string url_hashes = 3 [(.gogo.query) = {
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_hashes(i).data(), static_cast<int>(this->url_hashes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.UrlInfoParams.url_hashes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->url_hashes(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.UrlInfoParams)
  return target;
}

size_t UrlInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.UrlInfoParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string url_hashes = 3 [(.gogo.query) = {
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_hashes_size());
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url_hashes(i));
  }

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlInfoParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.UrlInfoParams)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlInfoParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlInfoParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.UrlInfoParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.UrlInfoParams)
    MergeFrom(*source);
  }
}

void UrlInfoParams::MergeFrom(const UrlInfoParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.UrlInfoParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_hashes_.MergeFrom(from.url_hashes_);
  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.user_type().size() > 0) {

    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
}

void UrlInfoParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.UrlInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlInfoParams::CopyFrom(const UrlInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.UrlInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlInfoParams::IsInitialized() const {
  return true;
}

void UrlInfoParams::Swap(UrlInfoParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlInfoParams::InternalSwap(UrlInfoParams* other) {
  using std::swap;
  url_hashes_.InternalSwap(&other->url_hashes_);
  qid_.Swap(&other->qid_);
  user_type_.Swap(&other->user_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UrlInfoParams::GetMetadata() const {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UrlInfoParams

// string qid = 1 [(.gogo.query) = {
void UrlInfoParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UrlInfoParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.qid)
  return qid_.GetNoArena();
}
void UrlInfoParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.qid)
}
#if LANG_CXX11
void UrlInfoParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.UrlInfoParams.qid)
}
#endif
void UrlInfoParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.qid)
}
void UrlInfoParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.qid)
}
::std::string* UrlInfoParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlInfoParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.UrlInfoParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlInfoParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.UrlInfoParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
void UrlInfoParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UrlInfoParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.user_type)
  return user_type_.GetNoArena();
}
void UrlInfoParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.user_type)
}
#if LANG_CXX11
void UrlInfoParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.UrlInfoParams.user_type)
}
#endif
void UrlInfoParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.user_type)
}
void UrlInfoParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.user_type)
}
::std::string* UrlInfoParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UrlInfoParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.UrlInfoParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UrlInfoParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.UrlInfoParams.user_type)
}

// repeated string url_hashes = 3 [(.gogo.query) = {
int UrlInfoParams::url_hashes_size() const {
  return url_hashes_.size();
}
void UrlInfoParams::clear_url_hashes() {
  url_hashes_.Clear();
}
const ::std::string& UrlInfoParams::url_hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Get(index);
}
::std::string* UrlInfoParams::mutable_url_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Mutable(index);
}
void UrlInfoParams::set_url_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.url_hashes)
  url_hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UrlInfoParams::set_url_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.url_hashes)
  url_hashes_.Mutable(index)->assign(std::move(value));
}
#endif
void UrlInfoParams::set_url_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.url_hashes)
}
void UrlInfoParams::set_url_hashes(int index, const char* value, size_t size) {
  url_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.url_hashes)
}
::std::string* UrlInfoParams::add_url_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Add();
}
void UrlInfoParams::add_url_hashes(const ::std::string& value) {
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.UrlInfoParams.url_hashes)
}
#if LANG_CXX11
void UrlInfoParams::add_url_hashes(::std::string&& value) {
  url_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.UrlInfoParams.url_hashes)
}
#endif
void UrlInfoParams::add_url_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.UrlInfoParams.url_hashes)
}
void UrlInfoParams::add_url_hashes(const char* value, size_t size) {
  url_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.UrlInfoParams.url_hashes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlInfoParams::url_hashes() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UrlInfoParams::mutable_url_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.UrlInfoParams.url_hashes)
  return &url_hashes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerpSite::kPositionFieldNumber;
const int SerpSite::kUrlFieldNumber;
const int SerpSite::kTitleFieldNumber;
const int SerpSite::kSqModelRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerpSite::SerpSite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.SerpSite)
}
SerpSite::SerpSite(const SerpSite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&sq_model_rank_) -
    reinterpret_cast<char*>(&position_)) + sizeof(sq_model_rank_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.SerpSite)
}

void SerpSite::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sq_model_rank_));
  _cached_size_ = 0;
}

SerpSite::~SerpSite() {
  // @@protoc_insertion_point(destructor:pb.srch.music.SerpSite)
  SharedDtor();
}

void SerpSite::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SerpSite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerpSite::descriptor() {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerpSite& SerpSite::default_instance() {
  protobuf_music_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerpSite* SerpSite::New(::google::protobuf::Arena* arena) const {
  SerpSite* n = new SerpSite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerpSite::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.SerpSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&position_)) + sizeof(sq_model_rank_));
  _internal_metadata_.Clear();
}

bool SerpSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.SerpSite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SerpSite.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.SerpSite.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sq_model_rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.SerpSite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.SerpSite)
  return false;
#undef DO_
}

void SerpSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.SerpSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SerpSite.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SerpSite.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sq_model_rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.SerpSite)
}

::google::protobuf::uint8* SerpSite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.SerpSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SerpSite.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.SerpSite.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sq_model_rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.SerpSite)
  return target;
}

size_t SerpSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.SerpSite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerpSite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.SerpSite)
  GOOGLE_DCHECK_NE(&from, this);
  const SerpSite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerpSite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.SerpSite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.SerpSite)
    MergeFrom(*source);
  }
}

void SerpSite::MergeFrom(const SerpSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.SerpSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.sq_model_rank() != 0) {
    set_sq_model_rank(from.sq_model_rank());
  }
}

void SerpSite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.SerpSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerpSite::CopyFrom(const SerpSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.SerpSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerpSite::IsInitialized() const {
  return true;
}

void SerpSite::Swap(SerpSite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerpSite::InternalSwap(SerpSite* other) {
  using std::swap;
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  swap(position_, other->position_);
  swap(sq_model_rank_, other->sq_model_rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerpSite::GetMetadata() const {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerpSite

// uint32 position = 1;
void SerpSite::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 SerpSite::position() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.position)
  return position_;
}
void SerpSite::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.position)
}

// string url = 2;
void SerpSite::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerpSite::url() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.url)
  return url_.GetNoArena();
}
void SerpSite::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.url)
}
#if LANG_CXX11
void SerpSite::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SerpSite.url)
}
#endif
void SerpSite::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SerpSite.url)
}
void SerpSite::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SerpSite.url)
}
::std::string* SerpSite::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SerpSite.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpSite::release_url() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SerpSite.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpSite::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SerpSite.url)
}

// string title = 3;
void SerpSite::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SerpSite::title() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.title)
  return title_.GetNoArena();
}
void SerpSite::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.title)
}
#if LANG_CXX11
void SerpSite::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SerpSite.title)
}
#endif
void SerpSite::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SerpSite.title)
}
void SerpSite::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SerpSite.title)
}
::std::string* SerpSite::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SerpSite.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SerpSite::release_title() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SerpSite.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SerpSite::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SerpSite.title)
}

// float sq_model_rank = 4;
void SerpSite::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
float SerpSite::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.sq_model_rank)
  return sq_model_rank_;
}
void SerpSite::set_sq_model_rank(float value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.sq_model_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardSite::kUrlHashFieldNumber;
const int ShardSite::kPositionFieldNumber;
const int ShardSite::kSqModelRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardSite::ShardSite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.ShardSite)
}
ShardSite::ShardSite(const ShardSite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&url_hash_, &from.url_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&sq_model_rank_) -
    reinterpret_cast<char*>(&url_hash_)) + sizeof(sq_model_rank_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.ShardSite)
}

void ShardSite::SharedCtor() {
  ::memset(&url_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&url_hash_)) + sizeof(sq_model_rank_));
  _cached_size_ = 0;
}

ShardSite::~ShardSite() {
  // @@protoc_insertion_point(destructor:pb.srch.music.ShardSite)
  SharedDtor();
}

void ShardSite::SharedDtor() {
}

void ShardSite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardSite::descriptor() {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShardSite& ShardSite::default_instance() {
  protobuf_music_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShardSite* ShardSite::New(::google::protobuf::Arena* arena) const {
  ShardSite* n = new ShardSite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardSite::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.ShardSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&url_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sq_model_rank_) -
      reinterpret_cast<char*>(&url_hash_)) + sizeof(sq_model_rank_));
  _internal_metadata_.Clear();
}

bool ShardSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.ShardSite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 url_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &url_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sq_model_rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.ShardSite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.ShardSite)
  return false;
#undef DO_
}

void ShardSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.ShardSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 url_hash = 1;
  if (this->url_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->url_hash(), output);
  }

  // uint32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sq_model_rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.ShardSite)
}

::google::protobuf::uint8* ShardSite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.ShardSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 url_hash = 1;
  if (this->url_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->url_hash(), target);
  }

  // uint32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sq_model_rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.ShardSite)
  return target;
}

size_t ShardSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.ShardSite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 url_hash = 1;
  if (this->url_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->url_hash());
  }

  // uint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // float sq_model_rank = 4;
  if (this->sq_model_rank() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardSite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.ShardSite)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardSite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardSite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.ShardSite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.ShardSite)
    MergeFrom(*source);
  }
}

void ShardSite::MergeFrom(const ShardSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.ShardSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url_hash() != 0) {
    set_url_hash(from.url_hash());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.sq_model_rank() != 0) {
    set_sq_model_rank(from.sq_model_rank());
  }
}

void ShardSite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.ShardSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardSite::CopyFrom(const ShardSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.ShardSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardSite::IsInitialized() const {
  return true;
}

void ShardSite::Swap(ShardSite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardSite::InternalSwap(ShardSite* other) {
  using std::swap;
  swap(url_hash_, other->url_hash_);
  swap(position_, other->position_);
  swap(sq_model_rank_, other->sq_model_rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardSite::GetMetadata() const {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShardSite

// uint64 url_hash = 1;
void ShardSite::clear_url_hash() {
  url_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ShardSite::url_hash() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.url_hash)
  return url_hash_;
}
void ShardSite::set_url_hash(::google::protobuf::uint64 value) {
  
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.url_hash)
}

// uint32 position = 3;
void ShardSite::clear_position() {
  position_ = 0u;
}
::google::protobuf::uint32 ShardSite::position() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.position)
  return position_;
}
void ShardSite::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.position)
}

// float sq_model_rank = 4;
void ShardSite::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
float ShardSite::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.sq_model_rank)
  return sq_model_rank_;
}
void ShardSite::set_sq_model_rank(float value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.sq_model_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerParams::kQidFieldNumber;
const int ManagerParams::kUserTypeFieldNumber;
const int ManagerParams::kQueryFieldNumber;
const int ManagerParams::kQueryDataFieldNumber;
const int ManagerParams::kRbCodeFieldNumber;
const int ManagerParams::kIsVoiceFieldNumber;
const int ManagerParams::kIsAlbumFieldNumber;
const int ManagerParams::kIsNailsDisabledFieldNumber;
const int ManagerParams::kUrlHashesFieldNumber;
const int ManagerParams::kSupposedArtistFieldNumber;
const int ManagerParams::kSupposedTrackFieldNumber;
const int ManagerParams::kDictArtistFieldNumber;
const int ManagerParams::kDictTrackFieldNumber;
const int ManagerParams::kSerpFieldNumber;
const int ManagerParams::kShardFieldNumber;
const int ManagerParams::kUseTitlesNewFieldNumber;
const int ManagerParams::kLbcmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerParams::ManagerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.ManagerParams)
}
ManagerParams::ManagerParams(const ManagerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      url_hashes_(from.url_hashes_),
      serp_(from.serp_),
      shard_(from.shard_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_type().size() > 0) {
    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  query_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_data().size() > 0) {
    query_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_data_);
  }
  rb_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rb_code().size() > 0) {
    rb_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_code_);
  }
  supposed_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.supposed_artist().size() > 0) {
    supposed_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supposed_artist_);
  }
  supposed_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.supposed_track().size() > 0) {
    supposed_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supposed_track_);
  }
  dict_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dict_artist().size() > 0) {
    dict_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dict_artist_);
  }
  dict_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dict_track().size() > 0) {
    dict_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dict_track_);
  }
  lbcmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lbcmd().size() > 0) {
    lbcmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lbcmd_);
  }
  ::memcpy(&is_voice_, &from.is_voice_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_titles_new_) -
    reinterpret_cast<char*>(&is_voice_)) + sizeof(use_titles_new_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.ManagerParams)
}

void ManagerParams::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lbcmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_voice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_titles_new_) -
      reinterpret_cast<char*>(&is_voice_)) + sizeof(use_titles_new_));
  _cached_size_ = 0;
}

ManagerParams::~ManagerParams() {
  // @@protoc_insertion_point(destructor:pb.srch.music.ManagerParams)
  SharedDtor();
}

void ManagerParams::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lbcmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagerParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerParams::descriptor() {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManagerParams& ManagerParams::default_instance() {
  protobuf_music_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManagerParams* ManagerParams::New(::google::protobuf::Arena* arena) const {
  ManagerParams* n = new ManagerParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.ManagerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_hashes_.Clear();
  serp_.Clear();
  shard_.Clear();
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supposed_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dict_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lbcmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_voice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_titles_new_) -
      reinterpret_cast<char*>(&is_voice_)) + sizeof(use_titles_new_));
  _internal_metadata_.Clear();
}

bool ManagerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.ManagerParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string qid = 1 [(.gogo.query) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_type = 2 [(.gogo.query) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_type().data(), static_cast<int>(this->user_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.user_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query = 3 [(.gogo.query) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query_data = 4 [(.gogo.query) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_data().data(), static_cast<int>(this->query_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.query_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rb_code = 5 [(.gogo.query) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rb_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rb_code().data(), static_cast<int>(this->rb_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.rb_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_voice = 6 [(.gogo.query) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_voice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_album = 7 [(.gogo.query) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_album_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_nails_disabled = 8 [(.gogo.query) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nails_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url_hashes = 9 [(.gogo.query) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url_hashes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url_hashes(this->url_hashes_size() - 1).data(),
            static_cast<int>(this->url_hashes(this->url_hashes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.url_hashes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string supposed_artist = 10 [(.gogo.query) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supposed_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supposed_artist().data(), static_cast<int>(this->supposed_artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.supposed_artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string supposed_track = 11 [(.gogo.query) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supposed_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supposed_track().data(), static_cast<int>(this->supposed_track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.supposed_track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dict_artist = 12 [(.gogo.query) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dict_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dict_artist().data(), static_cast<int>(this->dict_artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.dict_artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dict_track = 13 [(.gogo.query) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dict_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dict_track().data(), static_cast<int>(this->dict_track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.dict_track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_titles_new = 16 [(.gogo.query) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_titles_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lbcmd = 17 [(.gogo.query) = {
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lbcmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lbcmd().data(), static_cast<int>(this->lbcmd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerParams.lbcmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.ManagerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.ManagerParams)
  return false;
#undef DO_
}

void ManagerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.ManagerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->query(), output);
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_data().data(), static_cast<int>(this->query_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.query_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->query_data(), output);
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rb_code().data(), static_cast<int>(this->rb_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.rb_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rb_code(), output);
  }

  // bool is_voice = 6 [(.gogo.query) = {
  if (this->is_voice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_voice(), output);
  }

  // bool is_album = 7 [(.gogo.query) = {
  if (this->is_album() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_album(), output);
  }

  // bool is_nails_disabled = 8 [(.gogo.query) = {
  if (this->is_nails_disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_nails_disabled(), output);
  }

  // repeated string url_hashes = 9 [(.gogo.query) = {
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_hashes(i).data(), static_cast<int>(this->url_hashes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.url_hashes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->url_hashes(i), output);
  }

  // string supposed_artist = 10 [(.gogo.query) = {
  if (this->supposed_artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supposed_artist().data(), static_cast<int>(this->supposed_artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.supposed_artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->supposed_artist(), output);
  }

  // string supposed_track = 11 [(.gogo.query) = {
  if (this->supposed_track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supposed_track().data(), static_cast<int>(this->supposed_track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.supposed_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->supposed_track(), output);
  }

  // string dict_artist = 12 [(.gogo.query) = {
  if (this->dict_artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict_artist().data(), static_cast<int>(this->dict_artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.dict_artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->dict_artist(), output);
  }

  // string dict_track = 13 [(.gogo.query) = {
  if (this->dict_track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict_track().data(), static_cast<int>(this->dict_track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.dict_track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->dict_track(), output);
  }

  // repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->serp(static_cast<int>(i)), output);
  }

  // repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shard_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->shard(static_cast<int>(i)), output);
  }

  // bool use_titles_new = 16 [(.gogo.query) = {
  if (this->use_titles_new() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_titles_new(), output);
  }

  // string lbcmd = 17 [(.gogo.query) = {
  if (this->lbcmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lbcmd().data(), static_cast<int>(this->lbcmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.lbcmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->lbcmd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.ManagerParams)
}

::google::protobuf::uint8* ManagerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.ManagerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_type().data(), static_cast<int>(this->user_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->query(), target);
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_data().data(), static_cast<int>(this->query_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.query_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query_data(), target);
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rb_code().data(), static_cast<int>(this->rb_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.rb_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rb_code(), target);
  }

  // bool is_voice = 6 [(.gogo.query) = {
  if (this->is_voice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_voice(), target);
  }

  // bool is_album = 7 [(.gogo.query) = {
  if (this->is_album() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_album(), target);
  }

  // bool is_nails_disabled = 8 [(.gogo.query) = {
  if (this->is_nails_disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_nails_disabled(), target);
  }

  // repeated string url_hashes = 9 [(.gogo.query) = {
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url_hashes(i).data(), static_cast<int>(this->url_hashes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.url_hashes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->url_hashes(i), target);
  }

  // string supposed_artist = 10 [(.gogo.query) = {
  if (this->supposed_artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supposed_artist().data(), static_cast<int>(this->supposed_artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.supposed_artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->supposed_artist(), target);
  }

  // string supposed_track = 11 [(.gogo.query) = {
  if (this->supposed_track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supposed_track().data(), static_cast<int>(this->supposed_track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.supposed_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->supposed_track(), target);
  }

  // string dict_artist = 12 [(.gogo.query) = {
  if (this->dict_artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict_artist().data(), static_cast<int>(this->dict_artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.dict_artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->dict_artist(), target);
  }

  // string dict_track = 13 [(.gogo.query) = {
  if (this->dict_track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict_track().data(), static_cast<int>(this->dict_track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.dict_track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->dict_track(), target);
  }

  // repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->serp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->serp(static_cast<int>(i)), deterministic, target);
  }

  // repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shard_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->shard(static_cast<int>(i)), deterministic, target);
  }

  // bool use_titles_new = 16 [(.gogo.query) = {
  if (this->use_titles_new() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_titles_new(), target);
  }

  // string lbcmd = 17 [(.gogo.query) = {
  if (this->lbcmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lbcmd().data(), static_cast<int>(this->lbcmd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerParams.lbcmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->lbcmd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.ManagerParams)
  return target;
}

size_t ManagerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.ManagerParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string url_hashes = 9 [(.gogo.query) = {
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->url_hashes_size());
  for (int i = 0, n = this->url_hashes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url_hashes(i));
  }

  // repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
  {
    unsigned int count = static_cast<unsigned int>(this->serp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serp(static_cast<int>(i)));
    }
  }

  // repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
  {
    unsigned int count = static_cast<unsigned int>(this->shard_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shard(static_cast<int>(i)));
    }
  }

  // string qid = 1 [(.gogo.query) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // string user_type = 2 [(.gogo.query) = {
  if (this->user_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());
  }

  // string query = 3 [(.gogo.query) = {
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string query_data = 4 [(.gogo.query) = {
  if (this->query_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_data());
  }

  // string rb_code = 5 [(.gogo.query) = {
  if (this->rb_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rb_code());
  }

  // string supposed_artist = 10 [(.gogo.query) = {
  if (this->supposed_artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->supposed_artist());
  }

  // string supposed_track = 11 [(.gogo.query) = {
  if (this->supposed_track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->supposed_track());
  }

  // string dict_artist = 12 [(.gogo.query) = {
  if (this->dict_artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dict_artist());
  }

  // string dict_track = 13 [(.gogo.query) = {
  if (this->dict_track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dict_track());
  }

  // string lbcmd = 17 [(.gogo.query) = {
  if (this->lbcmd().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lbcmd());
  }

  // bool is_voice = 6 [(.gogo.query) = {
  if (this->is_voice() != 0) {
    total_size += 1 + 1;
  }

  // bool is_album = 7 [(.gogo.query) = {
  if (this->is_album() != 0) {
    total_size += 1 + 1;
  }

  // bool is_nails_disabled = 8 [(.gogo.query) = {
  if (this->is_nails_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool use_titles_new = 16 [(.gogo.query) = {
  if (this->use_titles_new() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.ManagerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagerParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.ManagerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.ManagerParams)
    MergeFrom(*source);
  }
}

void ManagerParams::MergeFrom(const ManagerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.ManagerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_hashes_.MergeFrom(from.url_hashes_);
  serp_.MergeFrom(from.serp_);
  shard_.MergeFrom(from.shard_);
  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.user_type().size() > 0) {

    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.query_data().size() > 0) {

    query_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_data_);
  }
  if (from.rb_code().size() > 0) {

    rb_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rb_code_);
  }
  if (from.supposed_artist().size() > 0) {

    supposed_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supposed_artist_);
  }
  if (from.supposed_track().size() > 0) {

    supposed_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supposed_track_);
  }
  if (from.dict_artist().size() > 0) {

    dict_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dict_artist_);
  }
  if (from.dict_track().size() > 0) {

    dict_track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dict_track_);
  }
  if (from.lbcmd().size() > 0) {

    lbcmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lbcmd_);
  }
  if (from.is_voice() != 0) {
    set_is_voice(from.is_voice());
  }
  if (from.is_album() != 0) {
    set_is_album(from.is_album());
  }
  if (from.is_nails_disabled() != 0) {
    set_is_nails_disabled(from.is_nails_disabled());
  }
  if (from.use_titles_new() != 0) {
    set_use_titles_new(from.use_titles_new());
  }
}

void ManagerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.ManagerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerParams::CopyFrom(const ManagerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.ManagerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerParams::IsInitialized() const {
  return true;
}

void ManagerParams::Swap(ManagerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerParams::InternalSwap(ManagerParams* other) {
  using std::swap;
  url_hashes_.InternalSwap(&other->url_hashes_);
  serp_.InternalSwap(&other->serp_);
  shard_.InternalSwap(&other->shard_);
  qid_.Swap(&other->qid_);
  user_type_.Swap(&other->user_type_);
  query_.Swap(&other->query_);
  query_data_.Swap(&other->query_data_);
  rb_code_.Swap(&other->rb_code_);
  supposed_artist_.Swap(&other->supposed_artist_);
  supposed_track_.Swap(&other->supposed_track_);
  dict_artist_.Swap(&other->dict_artist_);
  dict_track_.Swap(&other->dict_track_);
  lbcmd_.Swap(&other->lbcmd_);
  swap(is_voice_, other->is_voice_);
  swap(is_album_, other->is_album_);
  swap(is_nails_disabled_, other->is_nails_disabled_);
  swap(use_titles_new_, other->use_titles_new_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerParams::GetMetadata() const {
  protobuf_music_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerParams

// string qid = 1 [(.gogo.query) = {
void ManagerParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.qid)
  return qid_.GetNoArena();
}
void ManagerParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.qid)
}
#if LANG_CXX11
void ManagerParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.qid)
}
#endif
void ManagerParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.qid)
}
void ManagerParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.qid)
}
::std::string* ManagerParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
void ManagerParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.user_type)
  return user_type_.GetNoArena();
}
void ManagerParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.user_type)
}
#if LANG_CXX11
void ManagerParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.user_type)
}
#endif
void ManagerParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.user_type)
}
void ManagerParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.user_type)
}
::std::string* ManagerParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.user_type)
}

// string query = 3 [(.gogo.query) = {
void ManagerParams::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::query() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.query)
  return query_.GetNoArena();
}
void ManagerParams::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.query)
}
#if LANG_CXX11
void ManagerParams::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.query)
}
#endif
void ManagerParams::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.query)
}
void ManagerParams::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.query)
}
::std::string* ManagerParams::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_query() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.query)
}

// string query_data = 4 [(.gogo.query) = {
void ManagerParams::clear_query_data() {
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::query_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.query_data)
  return query_data_.GetNoArena();
}
void ManagerParams::set_query_data(const ::std::string& value) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.query_data)
}
#if LANG_CXX11
void ManagerParams::set_query_data(::std::string&& value) {
  
  query_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.query_data)
}
#endif
void ManagerParams::set_query_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.query_data)
}
void ManagerParams::set_query_data(const char* value, size_t size) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.query_data)
}
::std::string* ManagerParams::mutable_query_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.query_data)
  return query_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_query_data() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.query_data)
  
  return query_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_query_data(::std::string* query_data) {
  if (query_data != NULL) {
    
  } else {
    
  }
  query_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.query_data)
}

// string rb_code = 5 [(.gogo.query) = {
void ManagerParams::clear_rb_code() {
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::rb_code() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.rb_code)
  return rb_code_.GetNoArena();
}
void ManagerParams::set_rb_code(const ::std::string& value) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.rb_code)
}
#if LANG_CXX11
void ManagerParams::set_rb_code(::std::string&& value) {
  
  rb_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.rb_code)
}
#endif
void ManagerParams::set_rb_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.rb_code)
}
void ManagerParams::set_rb_code(const char* value, size_t size) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.rb_code)
}
::std::string* ManagerParams::mutable_rb_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.rb_code)
  return rb_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_rb_code() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.rb_code)
  
  return rb_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_rb_code(::std::string* rb_code) {
  if (rb_code != NULL) {
    
  } else {
    
  }
  rb_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_code);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.rb_code)
}

// bool is_voice = 6 [(.gogo.query) = {
void ManagerParams::clear_is_voice() {
  is_voice_ = false;
}
bool ManagerParams::is_voice() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_voice)
  return is_voice_;
}
void ManagerParams::set_is_voice(bool value) {
  
  is_voice_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_voice)
}

// bool is_album = 7 [(.gogo.query) = {
void ManagerParams::clear_is_album() {
  is_album_ = false;
}
bool ManagerParams::is_album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_album)
  return is_album_;
}
void ManagerParams::set_is_album(bool value) {
  
  is_album_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_album)
}

// bool is_nails_disabled = 8 [(.gogo.query) = {
void ManagerParams::clear_is_nails_disabled() {
  is_nails_disabled_ = false;
}
bool ManagerParams::is_nails_disabled() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_nails_disabled)
  return is_nails_disabled_;
}
void ManagerParams::set_is_nails_disabled(bool value) {
  
  is_nails_disabled_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_nails_disabled)
}

// repeated string url_hashes = 9 [(.gogo.query) = {
int ManagerParams::url_hashes_size() const {
  return url_hashes_.size();
}
void ManagerParams::clear_url_hashes() {
  url_hashes_.Clear();
}
const ::std::string& ManagerParams::url_hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Get(index);
}
::std::string* ManagerParams::mutable_url_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Mutable(index);
}
void ManagerParams::set_url_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.url_hashes)
  url_hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ManagerParams::set_url_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.url_hashes)
  url_hashes_.Mutable(index)->assign(std::move(value));
}
#endif
void ManagerParams::set_url_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.url_hashes)
}
void ManagerParams::set_url_hashes(int index, const char* value, size_t size) {
  url_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.url_hashes)
}
::std::string* ManagerParams::add_url_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Add();
}
void ManagerParams::add_url_hashes(const ::std::string& value) {
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.url_hashes)
}
#if LANG_CXX11
void ManagerParams::add_url_hashes(::std::string&& value) {
  url_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.url_hashes)
}
#endif
void ManagerParams::add_url_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.ManagerParams.url_hashes)
}
void ManagerParams::add_url_hashes(const char* value, size_t size) {
  url_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.ManagerParams.url_hashes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ManagerParams::url_hashes() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ManagerParams::mutable_url_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.url_hashes)
  return &url_hashes_;
}

// string supposed_artist = 10 [(.gogo.query) = {
void ManagerParams::clear_supposed_artist() {
  supposed_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::supposed_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.supposed_artist)
  return supposed_artist_.GetNoArena();
}
void ManagerParams::set_supposed_artist(const ::std::string& value) {
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.supposed_artist)
}
#if LANG_CXX11
void ManagerParams::set_supposed_artist(::std::string&& value) {
  
  supposed_artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.supposed_artist)
}
#endif
void ManagerParams::set_supposed_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.supposed_artist)
}
void ManagerParams::set_supposed_artist(const char* value, size_t size) {
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.supposed_artist)
}
::std::string* ManagerParams::mutable_supposed_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.supposed_artist)
  return supposed_artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_supposed_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.supposed_artist)
  
  return supposed_artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_supposed_artist(::std::string* supposed_artist) {
  if (supposed_artist != NULL) {
    
  } else {
    
  }
  supposed_artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supposed_artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.supposed_artist)
}

// string supposed_track = 11 [(.gogo.query) = {
void ManagerParams::clear_supposed_track() {
  supposed_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::supposed_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.supposed_track)
  return supposed_track_.GetNoArena();
}
void ManagerParams::set_supposed_track(const ::std::string& value) {
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.supposed_track)
}
#if LANG_CXX11
void ManagerParams::set_supposed_track(::std::string&& value) {
  
  supposed_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.supposed_track)
}
#endif
void ManagerParams::set_supposed_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.supposed_track)
}
void ManagerParams::set_supposed_track(const char* value, size_t size) {
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.supposed_track)
}
::std::string* ManagerParams::mutable_supposed_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.supposed_track)
  return supposed_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_supposed_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.supposed_track)
  
  return supposed_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_supposed_track(::std::string* supposed_track) {
  if (supposed_track != NULL) {
    
  } else {
    
  }
  supposed_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supposed_track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.supposed_track)
}

// string dict_artist = 12 [(.gogo.query) = {
void ManagerParams::clear_dict_artist() {
  dict_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::dict_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.dict_artist)
  return dict_artist_.GetNoArena();
}
void ManagerParams::set_dict_artist(const ::std::string& value) {
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.dict_artist)
}
#if LANG_CXX11
void ManagerParams::set_dict_artist(::std::string&& value) {
  
  dict_artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.dict_artist)
}
#endif
void ManagerParams::set_dict_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.dict_artist)
}
void ManagerParams::set_dict_artist(const char* value, size_t size) {
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.dict_artist)
}
::std::string* ManagerParams::mutable_dict_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.dict_artist)
  return dict_artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_dict_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.dict_artist)
  
  return dict_artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_dict_artist(::std::string* dict_artist) {
  if (dict_artist != NULL) {
    
  } else {
    
  }
  dict_artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.dict_artist)
}

// string dict_track = 13 [(.gogo.query) = {
void ManagerParams::clear_dict_track() {
  dict_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::dict_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.dict_track)
  return dict_track_.GetNoArena();
}
void ManagerParams::set_dict_track(const ::std::string& value) {
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.dict_track)
}
#if LANG_CXX11
void ManagerParams::set_dict_track(::std::string&& value) {
  
  dict_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.dict_track)
}
#endif
void ManagerParams::set_dict_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.dict_track)
}
void ManagerParams::set_dict_track(const char* value, size_t size) {
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.dict_track)
}
::std::string* ManagerParams::mutable_dict_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.dict_track)
  return dict_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_dict_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.dict_track)
  
  return dict_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_dict_track(::std::string* dict_track) {
  if (dict_track != NULL) {
    
  } else {
    
  }
  dict_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.dict_track)
}

// repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
int ManagerParams::serp_size() const {
  return serp_.size();
}
void ManagerParams::clear_serp() {
  serp_.Clear();
}
const ::pb::srch::music::SerpSite& ManagerParams::serp(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.serp)
  return serp_.Get(index);
}
::pb::srch::music::SerpSite* ManagerParams::mutable_serp(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.serp)
  return serp_.Mutable(index);
}
::pb::srch::music::SerpSite* ManagerParams::add_serp() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.serp)
  return serp_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >*
ManagerParams::mutable_serp() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.serp)
  return &serp_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >&
ManagerParams::serp() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.serp)
  return serp_;
}

// repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
int ManagerParams::shard_size() const {
  return shard_.size();
}
void ManagerParams::clear_shard() {
  shard_.Clear();
}
const ::pb::srch::music::ShardSite& ManagerParams::shard(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.shard)
  return shard_.Get(index);
}
::pb::srch::music::ShardSite* ManagerParams::mutable_shard(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.shard)
  return shard_.Mutable(index);
}
::pb::srch::music::ShardSite* ManagerParams::add_shard() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.shard)
  return shard_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >*
ManagerParams::mutable_shard() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.shard)
  return &shard_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >&
ManagerParams::shard() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.shard)
  return shard_;
}

// bool use_titles_new = 16 [(.gogo.query) = {
void ManagerParams::clear_use_titles_new() {
  use_titles_new_ = false;
}
bool ManagerParams::use_titles_new() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.use_titles_new)
  return use_titles_new_;
}
void ManagerParams::set_use_titles_new(bool value) {
  
  use_titles_new_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.use_titles_new)
}

// string lbcmd = 17 [(.gogo.query) = {
void ManagerParams::clear_lbcmd() {
  lbcmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerParams::lbcmd() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.lbcmd)
  return lbcmd_.GetNoArena();
}
void ManagerParams::set_lbcmd(const ::std::string& value) {
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.lbcmd)
}
#if LANG_CXX11
void ManagerParams::set_lbcmd(::std::string&& value) {
  
  lbcmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.lbcmd)
}
#endif
void ManagerParams::set_lbcmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.lbcmd)
}
void ManagerParams::set_lbcmd(const char* value, size_t size) {
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.lbcmd)
}
::std::string* ManagerParams::mutable_lbcmd() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.lbcmd)
  return lbcmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerParams::release_lbcmd() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.lbcmd)
  
  return lbcmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerParams::set_allocated_lbcmd(::std::string* lbcmd) {
  if (lbcmd != NULL) {
    
  } else {
    
  }
  lbcmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lbcmd);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.lbcmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace music
}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)
