// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_request.proto

#ifndef PROTOBUF_music_5frequest_2eproto__INCLUDED
#define PROTOBUF_music_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace srch {
namespace music {
class ManagerParams;
class ManagerParamsDefaultTypeInternal;
extern ManagerParamsDefaultTypeInternal _ManagerParams_default_instance_;
class SearcherParams;
class SearcherParamsDefaultTypeInternal;
extern SearcherParamsDefaultTypeInternal _SearcherParams_default_instance_;
class SerpSite;
class SerpSiteDefaultTypeInternal;
extern SerpSiteDefaultTypeInternal _SerpSite_default_instance_;
class ShardSite;
class ShardSiteDefaultTypeInternal;
extern ShardSiteDefaultTypeInternal _ShardSite_default_instance_;
class UrlInfoParams;
class UrlInfoParamsDefaultTypeInternal;
extern UrlInfoParamsDefaultTypeInternal _UrlInfoParams_default_instance_;
}  // namespace music
}  // namespace srch
}  // namespace pb

namespace pb {
namespace srch {
namespace music {

namespace protobuf_music_5frequest_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_music_5frequest_2eproto

// ===================================================================

class SearcherParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.SearcherParams) */ {
 public:
  SearcherParams();
  virtual ~SearcherParams();

  SearcherParams(const SearcherParams& from);

  inline SearcherParams& operator=(const SearcherParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearcherParams(SearcherParams&& from) noexcept
    : SearcherParams() {
    *this = ::std::move(from);
  }

  inline SearcherParams& operator=(SearcherParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearcherParams& default_instance();

  static inline const SearcherParams* internal_default_instance() {
    return reinterpret_cast<const SearcherParams*>(
               &_SearcherParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SearcherParams* other);
  friend void swap(SearcherParams& a, SearcherParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearcherParams* New() const PROTOBUF_FINAL { return New(NULL); }

  SearcherParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearcherParams& from);
  void MergeFrom(const SearcherParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearcherParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string qid = 1 [(.gogo.query) = {
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // string user_type = 2 [(.gogo.query) = {
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const ::std::string& user_type() const;
  void set_user_type(const ::std::string& value);
  #if LANG_CXX11
  void set_user_type(::std::string&& value);
  #endif
  void set_user_type(const char* value);
  void set_user_type(const char* value, size_t size);
  ::std::string* mutable_user_type();
  ::std::string* release_user_type();
  void set_allocated_user_type(::std::string* user_type);

  // string query = 3 [(.gogo.query) = {
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string query_data = 4 [(.gogo.query) = {
  void clear_query_data();
  static const int kQueryDataFieldNumber = 4;
  const ::std::string& query_data() const;
  void set_query_data(const ::std::string& value);
  #if LANG_CXX11
  void set_query_data(::std::string&& value);
  #endif
  void set_query_data(const char* value);
  void set_query_data(const char* value, size_t size);
  ::std::string* mutable_query_data();
  ::std::string* release_query_data();
  void set_allocated_query_data(::std::string* query_data);

  // string rb_code = 5 [(.gogo.query) = {
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 5;
  const ::std::string& rb_code() const;
  void set_rb_code(const ::std::string& value);
  #if LANG_CXX11
  void set_rb_code(::std::string&& value);
  #endif
  void set_rb_code(const char* value);
  void set_rb_code(const char* value, size_t size);
  ::std::string* mutable_rb_code();
  ::std::string* release_rb_code();
  void set_allocated_rb_code(::std::string* rb_code);

  // uint64 documents_count = 7 [(.gogo.query) = {
  void clear_documents_count();
  static const int kDocumentsCountFieldNumber = 7;
  ::google::protobuf::uint64 documents_count() const;
  void set_documents_count(::google::protobuf::uint64 value);

  // bool is_utf8 = 6 [(.gogo.query) = {
  void clear_is_utf8();
  static const int kIsUtf8FieldNumber = 6;
  bool is_utf8() const;
  void set_is_utf8(bool value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.SearcherParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr user_type_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr query_data_;
  ::google::protobuf::internal::ArenaStringPtr rb_code_;
  ::google::protobuf::uint64 documents_count_;
  bool is_utf8_;
  mutable int _cached_size_;
  friend struct protobuf_music_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UrlInfoParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.UrlInfoParams) */ {
 public:
  UrlInfoParams();
  virtual ~UrlInfoParams();

  UrlInfoParams(const UrlInfoParams& from);

  inline UrlInfoParams& operator=(const UrlInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlInfoParams(UrlInfoParams&& from) noexcept
    : UrlInfoParams() {
    *this = ::std::move(from);
  }

  inline UrlInfoParams& operator=(UrlInfoParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UrlInfoParams& default_instance();

  static inline const UrlInfoParams* internal_default_instance() {
    return reinterpret_cast<const UrlInfoParams*>(
               &_UrlInfoParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UrlInfoParams* other);
  friend void swap(UrlInfoParams& a, UrlInfoParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlInfoParams* New() const PROTOBUF_FINAL { return New(NULL); }

  UrlInfoParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UrlInfoParams& from);
  void MergeFrom(const UrlInfoParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UrlInfoParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string url_hashes = 3 [(.gogo.query) = {
  int url_hashes_size() const;
  void clear_url_hashes();
  static const int kUrlHashesFieldNumber = 3;
  const ::std::string& url_hashes(int index) const;
  ::std::string* mutable_url_hashes(int index);
  void set_url_hashes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url_hashes(int index, ::std::string&& value);
  #endif
  void set_url_hashes(int index, const char* value);
  void set_url_hashes(int index, const char* value, size_t size);
  ::std::string* add_url_hashes();
  void add_url_hashes(const ::std::string& value);
  #if LANG_CXX11
  void add_url_hashes(::std::string&& value);
  #endif
  void add_url_hashes(const char* value);
  void add_url_hashes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url_hashes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url_hashes();

  // string qid = 1 [(.gogo.query) = {
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // string user_type = 2 [(.gogo.query) = {
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const ::std::string& user_type() const;
  void set_user_type(const ::std::string& value);
  #if LANG_CXX11
  void set_user_type(::std::string&& value);
  #endif
  void set_user_type(const char* value);
  void set_user_type(const char* value, size_t size);
  ::std::string* mutable_user_type();
  ::std::string* release_user_type();
  void set_allocated_user_type(::std::string* user_type);

  // @@protoc_insertion_point(class_scope:pb.srch.music.UrlInfoParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_hashes_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr user_type_;
  mutable int _cached_size_;
  friend struct protobuf_music_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerpSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.SerpSite) */ {
 public:
  SerpSite();
  virtual ~SerpSite();

  SerpSite(const SerpSite& from);

  inline SerpSite& operator=(const SerpSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerpSite(SerpSite&& from) noexcept
    : SerpSite() {
    *this = ::std::move(from);
  }

  inline SerpSite& operator=(SerpSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerpSite& default_instance();

  static inline const SerpSite* internal_default_instance() {
    return reinterpret_cast<const SerpSite*>(
               &_SerpSite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SerpSite* other);
  friend void swap(SerpSite& a, SerpSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerpSite* New() const PROTOBUF_FINAL { return New(NULL); }

  SerpSite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerpSite& from);
  void MergeFrom(const SerpSite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerpSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // uint32 position = 1;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // float sq_model_rank = 4;
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 4;
  float sq_model_rank() const;
  void set_sq_model_rank(float value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.SerpSite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint32 position_;
  float sq_model_rank_;
  mutable int _cached_size_;
  friend struct protobuf_music_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShardSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.ShardSite) */ {
 public:
  ShardSite();
  virtual ~ShardSite();

  ShardSite(const ShardSite& from);

  inline ShardSite& operator=(const ShardSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShardSite(ShardSite&& from) noexcept
    : ShardSite() {
    *this = ::std::move(from);
  }

  inline ShardSite& operator=(ShardSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardSite& default_instance();

  static inline const ShardSite* internal_default_instance() {
    return reinterpret_cast<const ShardSite*>(
               &_ShardSite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ShardSite* other);
  friend void swap(ShardSite& a, ShardSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShardSite* New() const PROTOBUF_FINAL { return New(NULL); }

  ShardSite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShardSite& from);
  void MergeFrom(const ShardSite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShardSite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 url_hash = 1;
  void clear_url_hash();
  static const int kUrlHashFieldNumber = 1;
  ::google::protobuf::uint64 url_hash() const;
  void set_url_hash(::google::protobuf::uint64 value);

  // uint32 position = 3;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // float sq_model_rank = 4;
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 4;
  float sq_model_rank() const;
  void set_sq_model_rank(float value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.ShardSite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 url_hash_;
  ::google::protobuf::uint32 position_;
  float sq_model_rank_;
  mutable int _cached_size_;
  friend struct protobuf_music_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.ManagerParams) */ {
 public:
  ManagerParams();
  virtual ~ManagerParams();

  ManagerParams(const ManagerParams& from);

  inline ManagerParams& operator=(const ManagerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagerParams(ManagerParams&& from) noexcept
    : ManagerParams() {
    *this = ::std::move(from);
  }

  inline ManagerParams& operator=(ManagerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagerParams& default_instance();

  static inline const ManagerParams* internal_default_instance() {
    return reinterpret_cast<const ManagerParams*>(
               &_ManagerParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ManagerParams* other);
  friend void swap(ManagerParams& a, ManagerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagerParams* New() const PROTOBUF_FINAL { return New(NULL); }

  ManagerParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManagerParams& from);
  void MergeFrom(const ManagerParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManagerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string url_hashes = 9 [(.gogo.query) = {
  int url_hashes_size() const;
  void clear_url_hashes();
  static const int kUrlHashesFieldNumber = 9;
  const ::std::string& url_hashes(int index) const;
  ::std::string* mutable_url_hashes(int index);
  void set_url_hashes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_url_hashes(int index, ::std::string&& value);
  #endif
  void set_url_hashes(int index, const char* value);
  void set_url_hashes(int index, const char* value, size_t size);
  ::std::string* add_url_hashes();
  void add_url_hashes(const ::std::string& value);
  #if LANG_CXX11
  void add_url_hashes(::std::string&& value);
  #endif
  void add_url_hashes(const char* value);
  void add_url_hashes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& url_hashes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_url_hashes();

  // repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
  int serp_size() const;
  void clear_serp();
  static const int kSerpFieldNumber = 14;
  const ::pb::srch::music::SerpSite& serp(int index) const;
  ::pb::srch::music::SerpSite* mutable_serp(int index);
  ::pb::srch::music::SerpSite* add_serp();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >*
      mutable_serp();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >&
      serp() const;

  // repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
  int shard_size() const;
  void clear_shard();
  static const int kShardFieldNumber = 15;
  const ::pb::srch::music::ShardSite& shard(int index) const;
  ::pb::srch::music::ShardSite* mutable_shard(int index);
  ::pb::srch::music::ShardSite* add_shard();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >*
      mutable_shard();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >&
      shard() const;

  // string qid = 1 [(.gogo.query) = {
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // string user_type = 2 [(.gogo.query) = {
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const ::std::string& user_type() const;
  void set_user_type(const ::std::string& value);
  #if LANG_CXX11
  void set_user_type(::std::string&& value);
  #endif
  void set_user_type(const char* value);
  void set_user_type(const char* value, size_t size);
  ::std::string* mutable_user_type();
  ::std::string* release_user_type();
  void set_allocated_user_type(::std::string* user_type);

  // string query = 3 [(.gogo.query) = {
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string query_data = 4 [(.gogo.query) = {
  void clear_query_data();
  static const int kQueryDataFieldNumber = 4;
  const ::std::string& query_data() const;
  void set_query_data(const ::std::string& value);
  #if LANG_CXX11
  void set_query_data(::std::string&& value);
  #endif
  void set_query_data(const char* value);
  void set_query_data(const char* value, size_t size);
  ::std::string* mutable_query_data();
  ::std::string* release_query_data();
  void set_allocated_query_data(::std::string* query_data);

  // string rb_code = 5 [(.gogo.query) = {
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 5;
  const ::std::string& rb_code() const;
  void set_rb_code(const ::std::string& value);
  #if LANG_CXX11
  void set_rb_code(::std::string&& value);
  #endif
  void set_rb_code(const char* value);
  void set_rb_code(const char* value, size_t size);
  ::std::string* mutable_rb_code();
  ::std::string* release_rb_code();
  void set_allocated_rb_code(::std::string* rb_code);

  // string supposed_artist = 10 [(.gogo.query) = {
  void clear_supposed_artist();
  static const int kSupposedArtistFieldNumber = 10;
  const ::std::string& supposed_artist() const;
  void set_supposed_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_supposed_artist(::std::string&& value);
  #endif
  void set_supposed_artist(const char* value);
  void set_supposed_artist(const char* value, size_t size);
  ::std::string* mutable_supposed_artist();
  ::std::string* release_supposed_artist();
  void set_allocated_supposed_artist(::std::string* supposed_artist);

  // string supposed_track = 11 [(.gogo.query) = {
  void clear_supposed_track();
  static const int kSupposedTrackFieldNumber = 11;
  const ::std::string& supposed_track() const;
  void set_supposed_track(const ::std::string& value);
  #if LANG_CXX11
  void set_supposed_track(::std::string&& value);
  #endif
  void set_supposed_track(const char* value);
  void set_supposed_track(const char* value, size_t size);
  ::std::string* mutable_supposed_track();
  ::std::string* release_supposed_track();
  void set_allocated_supposed_track(::std::string* supposed_track);

  // string dict_artist = 12 [(.gogo.query) = {
  void clear_dict_artist();
  static const int kDictArtistFieldNumber = 12;
  const ::std::string& dict_artist() const;
  void set_dict_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_dict_artist(::std::string&& value);
  #endif
  void set_dict_artist(const char* value);
  void set_dict_artist(const char* value, size_t size);
  ::std::string* mutable_dict_artist();
  ::std::string* release_dict_artist();
  void set_allocated_dict_artist(::std::string* dict_artist);

  // string dict_track = 13 [(.gogo.query) = {
  void clear_dict_track();
  static const int kDictTrackFieldNumber = 13;
  const ::std::string& dict_track() const;
  void set_dict_track(const ::std::string& value);
  #if LANG_CXX11
  void set_dict_track(::std::string&& value);
  #endif
  void set_dict_track(const char* value);
  void set_dict_track(const char* value, size_t size);
  ::std::string* mutable_dict_track();
  ::std::string* release_dict_track();
  void set_allocated_dict_track(::std::string* dict_track);

  // string lbcmd = 17 [(.gogo.query) = {
  void clear_lbcmd();
  static const int kLbcmdFieldNumber = 17;
  const ::std::string& lbcmd() const;
  void set_lbcmd(const ::std::string& value);
  #if LANG_CXX11
  void set_lbcmd(::std::string&& value);
  #endif
  void set_lbcmd(const char* value);
  void set_lbcmd(const char* value, size_t size);
  ::std::string* mutable_lbcmd();
  ::std::string* release_lbcmd();
  void set_allocated_lbcmd(::std::string* lbcmd);

  // bool is_voice = 6 [(.gogo.query) = {
  void clear_is_voice();
  static const int kIsVoiceFieldNumber = 6;
  bool is_voice() const;
  void set_is_voice(bool value);

  // bool is_album = 7 [(.gogo.query) = {
  void clear_is_album();
  static const int kIsAlbumFieldNumber = 7;
  bool is_album() const;
  void set_is_album(bool value);

  // bool is_nails_disabled = 8 [(.gogo.query) = {
  void clear_is_nails_disabled();
  static const int kIsNailsDisabledFieldNumber = 8;
  bool is_nails_disabled() const;
  void set_is_nails_disabled(bool value);

  // bool use_titles_new = 16 [(.gogo.query) = {
  void clear_use_titles_new();
  static const int kUseTitlesNewFieldNumber = 16;
  bool use_titles_new() const;
  void set_use_titles_new(bool value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.ManagerParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> url_hashes_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite > serp_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite > shard_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr user_type_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr query_data_;
  ::google::protobuf::internal::ArenaStringPtr rb_code_;
  ::google::protobuf::internal::ArenaStringPtr supposed_artist_;
  ::google::protobuf::internal::ArenaStringPtr supposed_track_;
  ::google::protobuf::internal::ArenaStringPtr dict_artist_;
  ::google::protobuf::internal::ArenaStringPtr dict_track_;
  ::google::protobuf::internal::ArenaStringPtr lbcmd_;
  bool is_voice_;
  bool is_album_;
  bool is_nails_disabled_;
  bool use_titles_new_;
  mutable int _cached_size_;
  friend struct protobuf_music_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearcherParams

// string qid = 1 [(.gogo.query) = {
inline void SearcherParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearcherParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.qid)
  return qid_.GetNoArena();
}
inline void SearcherParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.qid)
}
#if LANG_CXX11
inline void SearcherParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.qid)
}
#endif
inline void SearcherParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.qid)
}
inline void SearcherParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.qid)
}
inline ::std::string* SearcherParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearcherParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearcherParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
inline void SearcherParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearcherParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.user_type)
  return user_type_.GetNoArena();
}
inline void SearcherParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.user_type)
}
#if LANG_CXX11
inline void SearcherParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.user_type)
}
#endif
inline void SearcherParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.user_type)
}
inline void SearcherParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.user_type)
}
inline ::std::string* SearcherParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearcherParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearcherParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.user_type)
}

// string query = 3 [(.gogo.query) = {
inline void SearcherParams::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearcherParams::query() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.query)
  return query_.GetNoArena();
}
inline void SearcherParams::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.query)
}
#if LANG_CXX11
inline void SearcherParams::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.query)
}
#endif
inline void SearcherParams::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.query)
}
inline void SearcherParams::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.query)
}
inline ::std::string* SearcherParams::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearcherParams::release_query() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearcherParams::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.query)
}

// string query_data = 4 [(.gogo.query) = {
inline void SearcherParams::clear_query_data() {
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearcherParams::query_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.query_data)
  return query_data_.GetNoArena();
}
inline void SearcherParams::set_query_data(const ::std::string& value) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.query_data)
}
#if LANG_CXX11
inline void SearcherParams::set_query_data(::std::string&& value) {
  
  query_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.query_data)
}
#endif
inline void SearcherParams::set_query_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.query_data)
}
inline void SearcherParams::set_query_data(const char* value, size_t size) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.query_data)
}
inline ::std::string* SearcherParams::mutable_query_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.query_data)
  return query_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearcherParams::release_query_data() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.query_data)
  
  return query_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearcherParams::set_allocated_query_data(::std::string* query_data) {
  if (query_data != NULL) {
    
  } else {
    
  }
  query_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.query_data)
}

// string rb_code = 5 [(.gogo.query) = {
inline void SearcherParams::clear_rb_code() {
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearcherParams::rb_code() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.rb_code)
  return rb_code_.GetNoArena();
}
inline void SearcherParams::set_rb_code(const ::std::string& value) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.rb_code)
}
#if LANG_CXX11
inline void SearcherParams::set_rb_code(::std::string&& value) {
  
  rb_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SearcherParams.rb_code)
}
#endif
inline void SearcherParams::set_rb_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SearcherParams.rb_code)
}
inline void SearcherParams::set_rb_code(const char* value, size_t size) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SearcherParams.rb_code)
}
inline ::std::string* SearcherParams::mutable_rb_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SearcherParams.rb_code)
  return rb_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearcherParams::release_rb_code() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SearcherParams.rb_code)
  
  return rb_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearcherParams::set_allocated_rb_code(::std::string* rb_code) {
  if (rb_code != NULL) {
    
  } else {
    
  }
  rb_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_code);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SearcherParams.rb_code)
}

// bool is_utf8 = 6 [(.gogo.query) = {
inline void SearcherParams::clear_is_utf8() {
  is_utf8_ = false;
}
inline bool SearcherParams::is_utf8() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.is_utf8)
  return is_utf8_;
}
inline void SearcherParams::set_is_utf8(bool value) {
  
  is_utf8_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.is_utf8)
}

// uint64 documents_count = 7 [(.gogo.query) = {
inline void SearcherParams::clear_documents_count() {
  documents_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearcherParams::documents_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SearcherParams.documents_count)
  return documents_count_;
}
inline void SearcherParams::set_documents_count(::google::protobuf::uint64 value) {
  
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SearcherParams.documents_count)
}

// -------------------------------------------------------------------

// UrlInfoParams

// string qid = 1 [(.gogo.query) = {
inline void UrlInfoParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UrlInfoParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.qid)
  return qid_.GetNoArena();
}
inline void UrlInfoParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.qid)
}
#if LANG_CXX11
inline void UrlInfoParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.UrlInfoParams.qid)
}
#endif
inline void UrlInfoParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.qid)
}
inline void UrlInfoParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.qid)
}
inline ::std::string* UrlInfoParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlInfoParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.UrlInfoParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlInfoParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.UrlInfoParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
inline void UrlInfoParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UrlInfoParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.user_type)
  return user_type_.GetNoArena();
}
inline void UrlInfoParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.user_type)
}
#if LANG_CXX11
inline void UrlInfoParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.UrlInfoParams.user_type)
}
#endif
inline void UrlInfoParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.user_type)
}
inline void UrlInfoParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.user_type)
}
inline ::std::string* UrlInfoParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlInfoParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.UrlInfoParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlInfoParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.UrlInfoParams.user_type)
}

// repeated string url_hashes = 3 [(.gogo.query) = {
inline int UrlInfoParams::url_hashes_size() const {
  return url_hashes_.size();
}
inline void UrlInfoParams::clear_url_hashes() {
  url_hashes_.Clear();
}
inline const ::std::string& UrlInfoParams::url_hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Get(index);
}
inline ::std::string* UrlInfoParams::mutable_url_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Mutable(index);
}
inline void UrlInfoParams::set_url_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.url_hashes)
  url_hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UrlInfoParams::set_url_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.UrlInfoParams.url_hashes)
  url_hashes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UrlInfoParams::set_url_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.UrlInfoParams.url_hashes)
}
inline void UrlInfoParams::set_url_hashes(int index, const char* value, size_t size) {
  url_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.UrlInfoParams.url_hashes)
}
inline ::std::string* UrlInfoParams::add_url_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_.Add();
}
inline void UrlInfoParams::add_url_hashes(const ::std::string& value) {
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.UrlInfoParams.url_hashes)
}
#if LANG_CXX11
inline void UrlInfoParams::add_url_hashes(::std::string&& value) {
  url_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.UrlInfoParams.url_hashes)
}
#endif
inline void UrlInfoParams::add_url_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.UrlInfoParams.url_hashes)
}
inline void UrlInfoParams::add_url_hashes(const char* value, size_t size) {
  url_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.UrlInfoParams.url_hashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UrlInfoParams::url_hashes() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.UrlInfoParams.url_hashes)
  return url_hashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UrlInfoParams::mutable_url_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.UrlInfoParams.url_hashes)
  return &url_hashes_;
}

// -------------------------------------------------------------------

// SerpSite

// uint32 position = 1;
inline void SerpSite::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 SerpSite::position() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.position)
  return position_;
}
inline void SerpSite::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.position)
}

// string url = 2;
inline void SerpSite::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerpSite::url() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.url)
  return url_.GetNoArena();
}
inline void SerpSite::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.url)
}
#if LANG_CXX11
inline void SerpSite::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SerpSite.url)
}
#endif
inline void SerpSite::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SerpSite.url)
}
inline void SerpSite::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SerpSite.url)
}
inline ::std::string* SerpSite::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SerpSite.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpSite::release_url() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SerpSite.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpSite::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SerpSite.url)
}

// string title = 3;
inline void SerpSite::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerpSite::title() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.title)
  return title_.GetNoArena();
}
inline void SerpSite::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.title)
}
#if LANG_CXX11
inline void SerpSite::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.SerpSite.title)
}
#endif
inline void SerpSite::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.SerpSite.title)
}
inline void SerpSite::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.SerpSite.title)
}
inline ::std::string* SerpSite::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.SerpSite.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerpSite::release_title() {
  // @@protoc_insertion_point(field_release:pb.srch.music.SerpSite.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerpSite::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.SerpSite.title)
}

// float sq_model_rank = 4;
inline void SerpSite::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
inline float SerpSite::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.SerpSite.sq_model_rank)
  return sq_model_rank_;
}
inline void SerpSite::set_sq_model_rank(float value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.SerpSite.sq_model_rank)
}

// -------------------------------------------------------------------

// ShardSite

// uint64 url_hash = 1;
inline void ShardSite::clear_url_hash() {
  url_hash_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ShardSite::url_hash() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.url_hash)
  return url_hash_;
}
inline void ShardSite::set_url_hash(::google::protobuf::uint64 value) {
  
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.url_hash)
}

// uint32 position = 3;
inline void ShardSite::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 ShardSite::position() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.position)
  return position_;
}
inline void ShardSite::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.position)
}

// float sq_model_rank = 4;
inline void ShardSite::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
inline float ShardSite::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ShardSite.sq_model_rank)
  return sq_model_rank_;
}
inline void ShardSite::set_sq_model_rank(float value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ShardSite.sq_model_rank)
}

// -------------------------------------------------------------------

// ManagerParams

// string qid = 1 [(.gogo.query) = {
inline void ManagerParams::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.qid)
  return qid_.GetNoArena();
}
inline void ManagerParams::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.qid)
}
#if LANG_CXX11
inline void ManagerParams::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.qid)
}
#endif
inline void ManagerParams::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.qid)
}
inline void ManagerParams::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.qid)
}
inline ::std::string* ManagerParams::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.qid)
}

// string user_type = 2 [(.gogo.query) = {
inline void ManagerParams::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::user_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.user_type)
  return user_type_.GetNoArena();
}
inline void ManagerParams::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.user_type)
}
#if LANG_CXX11
inline void ManagerParams::set_user_type(::std::string&& value) {
  
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.user_type)
}
#endif
inline void ManagerParams::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.user_type)
}
inline void ManagerParams::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.user_type)
}
inline ::std::string* ManagerParams::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_user_type() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.user_type)
}

// string query = 3 [(.gogo.query) = {
inline void ManagerParams::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::query() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.query)
  return query_.GetNoArena();
}
inline void ManagerParams::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.query)
}
#if LANG_CXX11
inline void ManagerParams::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.query)
}
#endif
inline void ManagerParams::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.query)
}
inline void ManagerParams::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.query)
}
inline ::std::string* ManagerParams::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_query() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.query)
}

// string query_data = 4 [(.gogo.query) = {
inline void ManagerParams::clear_query_data() {
  query_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::query_data() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.query_data)
  return query_data_.GetNoArena();
}
inline void ManagerParams::set_query_data(const ::std::string& value) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.query_data)
}
#if LANG_CXX11
inline void ManagerParams::set_query_data(::std::string&& value) {
  
  query_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.query_data)
}
#endif
inline void ManagerParams::set_query_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.query_data)
}
inline void ManagerParams::set_query_data(const char* value, size_t size) {
  
  query_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.query_data)
}
inline ::std::string* ManagerParams::mutable_query_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.query_data)
  return query_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_query_data() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.query_data)
  
  return query_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_query_data(::std::string* query_data) {
  if (query_data != NULL) {
    
  } else {
    
  }
  query_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_data);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.query_data)
}

// string rb_code = 5 [(.gogo.query) = {
inline void ManagerParams::clear_rb_code() {
  rb_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::rb_code() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.rb_code)
  return rb_code_.GetNoArena();
}
inline void ManagerParams::set_rb_code(const ::std::string& value) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.rb_code)
}
#if LANG_CXX11
inline void ManagerParams::set_rb_code(::std::string&& value) {
  
  rb_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.rb_code)
}
#endif
inline void ManagerParams::set_rb_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.rb_code)
}
inline void ManagerParams::set_rb_code(const char* value, size_t size) {
  
  rb_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.rb_code)
}
inline ::std::string* ManagerParams::mutable_rb_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.rb_code)
  return rb_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_rb_code() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.rb_code)
  
  return rb_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_rb_code(::std::string* rb_code) {
  if (rb_code != NULL) {
    
  } else {
    
  }
  rb_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rb_code);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.rb_code)
}

// bool is_voice = 6 [(.gogo.query) = {
inline void ManagerParams::clear_is_voice() {
  is_voice_ = false;
}
inline bool ManagerParams::is_voice() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_voice)
  return is_voice_;
}
inline void ManagerParams::set_is_voice(bool value) {
  
  is_voice_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_voice)
}

// bool is_album = 7 [(.gogo.query) = {
inline void ManagerParams::clear_is_album() {
  is_album_ = false;
}
inline bool ManagerParams::is_album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_album)
  return is_album_;
}
inline void ManagerParams::set_is_album(bool value) {
  
  is_album_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_album)
}

// bool is_nails_disabled = 8 [(.gogo.query) = {
inline void ManagerParams::clear_is_nails_disabled() {
  is_nails_disabled_ = false;
}
inline bool ManagerParams::is_nails_disabled() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.is_nails_disabled)
  return is_nails_disabled_;
}
inline void ManagerParams::set_is_nails_disabled(bool value) {
  
  is_nails_disabled_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.is_nails_disabled)
}

// repeated string url_hashes = 9 [(.gogo.query) = {
inline int ManagerParams::url_hashes_size() const {
  return url_hashes_.size();
}
inline void ManagerParams::clear_url_hashes() {
  url_hashes_.Clear();
}
inline const ::std::string& ManagerParams::url_hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Get(index);
}
inline ::std::string* ManagerParams::mutable_url_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Mutable(index);
}
inline void ManagerParams::set_url_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.url_hashes)
  url_hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ManagerParams::set_url_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.url_hashes)
  url_hashes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ManagerParams::set_url_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.url_hashes)
}
inline void ManagerParams::set_url_hashes(int index, const char* value, size_t size) {
  url_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.url_hashes)
}
inline ::std::string* ManagerParams::add_url_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_.Add();
}
inline void ManagerParams::add_url_hashes(const ::std::string& value) {
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.url_hashes)
}
#if LANG_CXX11
inline void ManagerParams::add_url_hashes(::std::string&& value) {
  url_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.url_hashes)
}
#endif
inline void ManagerParams::add_url_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  url_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.ManagerParams.url_hashes)
}
inline void ManagerParams::add_url_hashes(const char* value, size_t size) {
  url_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.ManagerParams.url_hashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ManagerParams::url_hashes() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.url_hashes)
  return url_hashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ManagerParams::mutable_url_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.url_hashes)
  return &url_hashes_;
}

// string supposed_artist = 10 [(.gogo.query) = {
inline void ManagerParams::clear_supposed_artist() {
  supposed_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::supposed_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.supposed_artist)
  return supposed_artist_.GetNoArena();
}
inline void ManagerParams::set_supposed_artist(const ::std::string& value) {
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.supposed_artist)
}
#if LANG_CXX11
inline void ManagerParams::set_supposed_artist(::std::string&& value) {
  
  supposed_artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.supposed_artist)
}
#endif
inline void ManagerParams::set_supposed_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.supposed_artist)
}
inline void ManagerParams::set_supposed_artist(const char* value, size_t size) {
  
  supposed_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.supposed_artist)
}
inline ::std::string* ManagerParams::mutable_supposed_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.supposed_artist)
  return supposed_artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_supposed_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.supposed_artist)
  
  return supposed_artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_supposed_artist(::std::string* supposed_artist) {
  if (supposed_artist != NULL) {
    
  } else {
    
  }
  supposed_artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supposed_artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.supposed_artist)
}

// string supposed_track = 11 [(.gogo.query) = {
inline void ManagerParams::clear_supposed_track() {
  supposed_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::supposed_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.supposed_track)
  return supposed_track_.GetNoArena();
}
inline void ManagerParams::set_supposed_track(const ::std::string& value) {
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.supposed_track)
}
#if LANG_CXX11
inline void ManagerParams::set_supposed_track(::std::string&& value) {
  
  supposed_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.supposed_track)
}
#endif
inline void ManagerParams::set_supposed_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.supposed_track)
}
inline void ManagerParams::set_supposed_track(const char* value, size_t size) {
  
  supposed_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.supposed_track)
}
inline ::std::string* ManagerParams::mutable_supposed_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.supposed_track)
  return supposed_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_supposed_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.supposed_track)
  
  return supposed_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_supposed_track(::std::string* supposed_track) {
  if (supposed_track != NULL) {
    
  } else {
    
  }
  supposed_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supposed_track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.supposed_track)
}

// string dict_artist = 12 [(.gogo.query) = {
inline void ManagerParams::clear_dict_artist() {
  dict_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::dict_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.dict_artist)
  return dict_artist_.GetNoArena();
}
inline void ManagerParams::set_dict_artist(const ::std::string& value) {
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.dict_artist)
}
#if LANG_CXX11
inline void ManagerParams::set_dict_artist(::std::string&& value) {
  
  dict_artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.dict_artist)
}
#endif
inline void ManagerParams::set_dict_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.dict_artist)
}
inline void ManagerParams::set_dict_artist(const char* value, size_t size) {
  
  dict_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.dict_artist)
}
inline ::std::string* ManagerParams::mutable_dict_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.dict_artist)
  return dict_artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_dict_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.dict_artist)
  
  return dict_artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_dict_artist(::std::string* dict_artist) {
  if (dict_artist != NULL) {
    
  } else {
    
  }
  dict_artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.dict_artist)
}

// string dict_track = 13 [(.gogo.query) = {
inline void ManagerParams::clear_dict_track() {
  dict_track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::dict_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.dict_track)
  return dict_track_.GetNoArena();
}
inline void ManagerParams::set_dict_track(const ::std::string& value) {
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.dict_track)
}
#if LANG_CXX11
inline void ManagerParams::set_dict_track(::std::string&& value) {
  
  dict_track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.dict_track)
}
#endif
inline void ManagerParams::set_dict_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.dict_track)
}
inline void ManagerParams::set_dict_track(const char* value, size_t size) {
  
  dict_track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.dict_track)
}
inline ::std::string* ManagerParams::mutable_dict_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.dict_track)
  return dict_track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_dict_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.dict_track)
  
  return dict_track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_dict_track(::std::string* dict_track) {
  if (dict_track != NULL) {
    
  } else {
    
  }
  dict_track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.dict_track)
}

// repeated .pb.srch.music.SerpSite serp = 14 [(.gogo.query) = {
inline int ManagerParams::serp_size() const {
  return serp_.size();
}
inline void ManagerParams::clear_serp() {
  serp_.Clear();
}
inline const ::pb::srch::music::SerpSite& ManagerParams::serp(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.serp)
  return serp_.Get(index);
}
inline ::pb::srch::music::SerpSite* ManagerParams::mutable_serp(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.serp)
  return serp_.Mutable(index);
}
inline ::pb::srch::music::SerpSite* ManagerParams::add_serp() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.serp)
  return serp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >*
ManagerParams::mutable_serp() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.serp)
  return &serp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::SerpSite >&
ManagerParams::serp() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.serp)
  return serp_;
}

// repeated .pb.srch.music.ShardSite shard = 15 [(.gogo.query) = {
inline int ManagerParams::shard_size() const {
  return shard_.size();
}
inline void ManagerParams::clear_shard() {
  shard_.Clear();
}
inline const ::pb::srch::music::ShardSite& ManagerParams::shard(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.shard)
  return shard_.Get(index);
}
inline ::pb::srch::music::ShardSite* ManagerParams::mutable_shard(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.shard)
  return shard_.Mutable(index);
}
inline ::pb::srch::music::ShardSite* ManagerParams::add_shard() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerParams.shard)
  return shard_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >*
ManagerParams::mutable_shard() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerParams.shard)
  return &shard_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ShardSite >&
ManagerParams::shard() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerParams.shard)
  return shard_;
}

// bool use_titles_new = 16 [(.gogo.query) = {
inline void ManagerParams::clear_use_titles_new() {
  use_titles_new_ = false;
}
inline bool ManagerParams::use_titles_new() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.use_titles_new)
  return use_titles_new_;
}
inline void ManagerParams::set_use_titles_new(bool value) {
  
  use_titles_new_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.use_titles_new)
}

// string lbcmd = 17 [(.gogo.query) = {
inline void ManagerParams::clear_lbcmd() {
  lbcmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerParams::lbcmd() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerParams.lbcmd)
  return lbcmd_.GetNoArena();
}
inline void ManagerParams::set_lbcmd(const ::std::string& value) {
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerParams.lbcmd)
}
#if LANG_CXX11
inline void ManagerParams::set_lbcmd(::std::string&& value) {
  
  lbcmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerParams.lbcmd)
}
#endif
inline void ManagerParams::set_lbcmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerParams.lbcmd)
}
inline void ManagerParams::set_lbcmd(const char* value, size_t size) {
  
  lbcmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerParams.lbcmd)
}
inline ::std::string* ManagerParams::mutable_lbcmd() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerParams.lbcmd)
  return lbcmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerParams::release_lbcmd() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerParams.lbcmd)
  
  return lbcmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerParams::set_allocated_lbcmd(::std::string* lbcmd) {
  if (lbcmd != NULL) {
    
  } else {
    
  }
  lbcmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lbcmd);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerParams.lbcmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace music
}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_music_5frequest_2eproto__INCLUDED
