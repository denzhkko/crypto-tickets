// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace srch {
namespace music {
class CacheEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CacheEntry>
     _instance;
} _CacheEntry_default_instance_;
class TitlesDocument_UmaDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TitlesDocument_UmaData>
     _instance;
} _TitlesDocument_UmaData_default_instance_;
class TitlesDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TitlesDocument>
     _instance;
} _TitlesDocument_default_instance_;
class TitlesResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TitlesResponse>
     _instance;
} _TitlesResponse_default_instance_;
class PlaylistSearcherDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlaylistSearcherDocument>
     _instance;
} _PlaylistSearcherDocument_default_instance_;
class AlbumSearcherDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AlbumSearcherDocument>
     _instance;
} _AlbumSearcherDocument_default_instance_;
class ArtistSearcherDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ArtistSearcherDocument>
     _instance;
} _ArtistSearcherDocument_default_instance_;
class TrackSearcherDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrackSearcherDocument>
     _instance;
} _TrackSearcherDocument_default_instance_;
class VkTrackResponse_ResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrackResponse_Result>
     _instance;
} _VkTrackResponse_Result_default_instance_;
class VkTrackResponse_SerpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrackResponse_Serp>
     _instance;
} _VkTrackResponse_Serp_default_instance_;
class VkTrackResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkTrackResponse>
     _instance;
} _VkTrackResponse_default_instance_;
class VkAlbumResponse_ResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkAlbumResponse_Result>
     _instance;
} _VkAlbumResponse_Result_default_instance_;
class VkAlbumResponse_SerpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkAlbumResponse_Serp>
     _instance;
} _VkAlbumResponse_Serp_default_instance_;
class VkAlbumResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VkAlbumResponse>
     _instance;
} _VkAlbumResponse_default_instance_;
class ManagerDocument_TrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ManagerDocument_Track>
     _instance;
} _ManagerDocument_Track_default_instance_;
class ManagerDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ManagerDocument>
     _instance;
} _ManagerDocument_default_instance_;

namespace protobuf_music_5fresponse_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheEntry, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheEntry, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheEntry, expiration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, artist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, prob_artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument_UmaData, prob_track_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, url_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesDocument, uma_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitlesResponse, docs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, collection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, tracks_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, tracks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistSearcherDocument, refs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, collection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, tracks_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, tracks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumSearcherDocument, refs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, artist_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, track_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, tracks_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, tracks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, listen_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, max_listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistSearcherDocument, max_listen_month_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, uma_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackSearcherDocument, listen_month_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, audio_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, subtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, is_official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, listen_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, listen_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, idf_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, sq_model_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, max_artist_subsequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, max_track_subsequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, num_artist_marked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, num_track_marked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, num_artist_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, num_track_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, artist_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, track_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, query_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Result, alternative_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, backend_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, response_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, all_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, official_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, qddb_sessions_num_log2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse_Serp, sm_reply_quality_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkTrackResponse, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, album_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, subtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, is_official_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, listen_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, listen_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, idf_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, max_artist_subsequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, max_album_subsequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, num_artist_marked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, num_album_marked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, num_artist_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, num_album_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, artist_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, album_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, query_words_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Result, alternative_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, response_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, all_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, official_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, qddb_sessions_num_log2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse_Serp, sm_reply_quality_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse, serp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VkAlbumResponse, split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument_Track, file_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, is_nailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, latest_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, artist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, album_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, playlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, tracks_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, tracks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, listen_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, max_listen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, max_listen_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerDocument, refs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CacheEntry)},
  { 8, -1, sizeof(TitlesDocument_UmaData)},
  { 20, -1, sizeof(TitlesDocument)},
  { 31, -1, sizeof(TitlesResponse)},
  { 37, -1, sizeof(PlaylistSearcherDocument)},
  { 50, -1, sizeof(AlbumSearcherDocument)},
  { 64, -1, sizeof(ArtistSearcherDocument)},
  { 79, -1, sizeof(TrackSearcherDocument)},
  { 96, -1, sizeof(VkTrackResponse_Result)},
  { 123, -1, sizeof(VkTrackResponse_Serp)},
  { 135, -1, sizeof(VkTrackResponse)},
  { 143, -1, sizeof(VkAlbumResponse_Result)},
  { 169, -1, sizeof(VkAlbumResponse_Serp)},
  { 180, -1, sizeof(VkAlbumResponse)},
  { 188, -1, sizeof(ManagerDocument_Track)},
  { 198, -1, sizeof(ManagerDocument)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CacheEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TitlesDocument_UmaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TitlesDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TitlesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaylistSearcherDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AlbumSearcherDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ArtistSearcherDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrackSearcherDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrackResponse_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrackResponse_Serp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkTrackResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkAlbumResponse_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkAlbumResponse_Serp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VkAlbumResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManagerDocument_Track_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManagerDocument_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music_response.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _CacheEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CacheEntry_default_instance_);_TitlesDocument_UmaData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TitlesDocument_UmaData_default_instance_);_TitlesDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TitlesDocument_default_instance_);_TitlesResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TitlesResponse_default_instance_);_PlaylistSearcherDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlaylistSearcherDocument_default_instance_);_AlbumSearcherDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AlbumSearcherDocument_default_instance_);_ArtistSearcherDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ArtistSearcherDocument_default_instance_);_TrackSearcherDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrackSearcherDocument_default_instance_);_VkTrackResponse_Result_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrackResponse_Result_default_instance_);_VkTrackResponse_Serp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrackResponse_Serp_default_instance_);_VkTrackResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkTrackResponse_default_instance_);_VkAlbumResponse_Result_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkAlbumResponse_Result_default_instance_);_VkAlbumResponse_Serp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkAlbumResponse_Serp_default_instance_);_VkAlbumResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VkAlbumResponse_default_instance_);_ManagerDocument_Track_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ManagerDocument_Track_default_instance_);_ManagerDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ManagerDocument_default_instance_);_TitlesDocument_default_instance_._instance.get_mutable()->uma_ = const_cast< ::pb::srch::music::TitlesDocument_UmaData*>(
      ::pb::srch::music::TitlesDocument_UmaData::internal_default_instance());
  _VkTrackResponse_default_instance_._instance.get_mutable()->serp_ = const_cast< ::pb::srch::music::VkTrackResponse_Serp*>(
      ::pb::srch::music::VkTrackResponse_Serp::internal_default_instance());
  _VkAlbumResponse_default_instance_._instance.get_mutable()->serp_ = const_cast< ::pb::srch::music::VkAlbumResponse_Serp*>(
      ::pb::srch::music::VkAlbumResponse_Serp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024music_response.proto\022\rpb.srch.music\032\ro"
      "ptions.proto\"F\n\nCacheEntry\022\020\n\010response\030\001"
      " \001(\t\022\022\n\nbegin_time\030\002 \001(\004\022\022\n\nexpiration\030\003"
      " \001(\004\"\310\004\n\016TitlesDocument\022\033\n\010url_hash\030\001 \001("
      "\004B\t\202\265\030\005\n\003Url\022<\n\004type\030\010 \001(\0162\".pb.srch.mus"
      "ic.TitlesDocument.TypeB\n\202\265\030\006\n\004Type\022\034\n\006ar"
      "tist\030\002 \001(\tB\014\202\265\030\010\n\006Artist\022\032\n\005album\030\004 \001(\tB"
      "\013\202\265\030\007\n\005Album\022\032\n\005track\030\003 \001(\tB\013\202\265\030\007\n\005Track"
      "\022=\n\003uma\030\t \001(\0132%.pb.srch.music.TitlesDocu"
      "ment.UmaDataB\t\202\265\030\005\n\003Uma\032\357\001\n\007UmaData\022!\n\ta"
      "rtist_id\030\001 \003(\004B\016\202\265\030\n\n\010ArtistId\022\037\n\010track_"
      "id\030\002 \001(\004B\r\202\265\030\t\n\007TrackId\022\034\n\006artist\030\003 \001(\tB"
      "\014\202\265\030\010\n\006Artist\022\032\n\005album\030\004 \001(\tB\013\202\265\030\007\n\005Albu"
      "m\022\032\n\005track\030\005 \001(\tB\013\202\265\030\007\n\005Track\022%\n\013prob_ar"
      "tist\030\006 \001(\001B\020\202\265\030\014\n\nProbArtist\022#\n\nprob_tra"
      "ck\030\007 \001(\001B\017\202\265\030\013\n\tProbTrack\"B\n\004Type\022\014\n\010Typ"
      "eNone\020\000\022\016\n\nTypeArtist\020\001\022\r\n\tTypeAlbum\020\002\022\r"
      "\n\tTypeTrack\020\003J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010\"=\n\016Title"
      "sResponse\022+\n\004docs\030\001 \003(\0132\035.pb.srch.music."
      "TitlesDocument\"\240\002\n\030PlaylistSearcherDocum"
      "ent\022\027\n\002id\030\001 \001(\tB\013\202\265\030\007\n\005docID\022)\n\rcollecti"
      "on_id\030\002 \001(\tB\022\202\265\030\016\n\014CollectionID\022\035\n\007user_"
      "id\030\003 \001(\tB\014\202\265\030\010\n\006UserID\022\034\n\010playlist\030\004 \001(\t"
      "B\n\202\265\030\006\n\004Name\022\"\n\014tracks_proto\030\005 \001(\tB\014\202\265\030\010"
      "\n\006Tracks\022\'\n\014tracks_count\030\010 \001(\rB\021\202\265\030\r\n\013Tr"
      "acksCount\022\034\n\006listen\030\006 \001(\004B\014\202\265\030\010\n\006Listen\022"
      "\030\n\004refs\030\007 \001(\004B\n\202\265\030\006\n\004Refs\"\270\002\n\025AlbumSearc"
      "herDocument\022\027\n\002id\030\001 \001(\tB\013\202\265\030\007\n\005docID\022)\n\r"
      "collection_id\030\002 \001(\tB\022\202\265\030\016\n\014CollectionID\022"
      "\035\n\007user_id\030\003 \001(\tB\014\202\265\030\010\n\006UserID\022\031\n\005album\030"
      "\004 \001(\tB\n\202\265\030\006\n\004Name\022\034\n\006artist\030\005 \001(\tB\014\202\265\030\010\n"
      "\006Author\022\"\n\014tracks_proto\030\006 \001(\tB\014\202\265\030\010\n\006Tra"
      "cks\022\'\n\014tracks_count\030\t \001(\rB\021\202\265\030\r\n\013TracksC"
      "ount\022\034\n\006listen\030\007 \001(\004B\014\202\265\030\010\n\006Listen\022\030\n\004re"
      "fs\030\010 \001(\004B\n\202\265\030\006\n\004Refs\"\203\003\n\026ArtistSearcherD"
      "ocument\022\027\n\002id\030\001 \001(\tB\013\202\265\030\007\n\005docID\022\033\n\tarti"
      "st_id\030\002 \001(\tB\010\202\265\030\004\n\002ID\022\034\n\006artist\030\003 \001(\tB\014\202"
      "\265\030\010\n\006Artist\022!\n\013track_names\030\004 \001(\tB\014\202\265\030\010\n\006"
      "Tracks\022\'\n\014tracks_proto\030\005 \001(\tB\021\202\265\030\r\n\013Prot"
      "oTracks\022\'\n\014tracks_count\030\n \001(\rB\021\202\265\030\r\n\013Tra"
      "cksCount\022\037\n\006listen\030\006 \001(\004B\017\202\265\030\013\n\tSumListe"
      "n\022*\n\014listen_month\030\007 \001(\004B\024\202\265\030\020\n\016SumListen"
      "Month\022#\n\nmax_listen\030\010 \001(\004B\017\202\265\030\013\n\tMaxList"
      "en\022.\n\020max_listen_month\030\t \001(\004B\024\202\265\030\020\n\016MaxL"
      "istenMonth\"\205\003\n\025TrackSearcherDocument\022\027\n\002"
      "id\030\001 \001(\tB\013\202\265\030\007\n\005docID\022\032\n\010track_id\030\002 \001(\tB"
      "\010\202\265\030\004\n\002id\022\035\n\007user_id\030\003 \001(\tB\014\202\265\030\010\n\006UserID"
      "\022\035\n\007file_id\030\004 \001(\tB\014\202\265\030\010\n\006FileID\022\033\n\006uma_i"
      "d\030\014 \001(\tB\013\202\265\030\007\n\005UmaID\022\031\n\005track\030\005 \001(\tB\n\202\265\030"
      "\006\n\004Name\022\034\n\006artist\030\006 \001(\tB\014\202\265\030\010\n\006Author\022\032\n"
      "\005album\030\007 \001(\tB\013\202\265\030\007\n\005Album\022 \n\010duration\030\010 "
      "\001(\rB\016\202\265\030\n\n\010Duration\022\036\n\006shares\030\t \001(\004B\016\202\265\030"
      "\n\n\010ShareCnt\022\034\n\006listen\030\n \001(\004B\014\202\265\030\010\n\006Liste"
      "n\022\'\n\014listen_month\030\013 \001(\004B\021\202\265\030\r\n\013ListenMon"
      "th\"\274\013\n\017VkTrackResponse\022\026\n\003qid\030\001 \001(\tB\t\222\265\030"
      "\005\n\003qid\022=\n\004serp\030\002 \001(\0132#.pb.srch.music.VkT"
      "rackResponse.SerpB\n\222\265\030\006\n\004serp\022\032\n\005split\030\003"
      " \001(\rB\013\222\265\030\007\n\005split\032\320\007\n\006Result\022\034\n\006number\030\001"
      " \001(\rB\014\222\265\030\010\n\006number\022 \n\010audio_id\030\002 \001(\003B\016\222\265"
      "\030\n\n\010audio_id\022 \n\010owner_id\030\003 \001(\003B\016\222\265\030\n\n\010ow"
      "ner_id\022\037\n\006artist\030\004 \001(\tB\017\222\265\030\013\n\tperformer\022"
      "\032\n\005track\030\005 \001(\tB\013\222\265\030\007\n\005title\022 \n\010subtitle\030"
      "\006 \001(\tB\016\222\265\030\n\n\010subtitle\022#\n\013is_official\030\007 \001"
      "(\010B\016\222\265\030\n\n\010official\022$\n\006listen\030\010 \001(\004B\024\222\265\030\020"
      "\n\016times_listened\0225\n\014listen_month\030\t \001(\004B\037"
      "\222\265\030\033\n\031times_listened_last_month\0223\n\013liste"
      "n_week\030\n \001(\004B\036\222\265\030\032\n\030times_listened_last_"
      "week\022 \n\010idf_rank\030\013 \001(\001B\016\222\265\030\n\n\010idf_rank\022*"
      "\n\rsq_model_rank\030\026 \001(\001B\023\222\265\030\017\n\rsq_model_ra"
      "nk\0223\n\026max_artist_subsequence\030\014 \001(\rB\023\222\265\030\017"
      "\n\rmax_cont_perf\0223\n\025max_track_subsequence"
      "\030\r \001(\rB\024\222\265\030\020\n\016max_cont_title\0222\n\021num_arti"
      "st_marked\030\016 \001(\rB\027\222\265\030\023\n\021perf_words_num_rf"
      "\0222\n\020num_track_marked\030\017 \001(\rB\030\222\265\030\024\n\022title_"
      "words_num_rf\0226\n\022num_artist_entries\030\021 \001(\r"
      "B\032\222\265\030\026\n\024entries_in_performer\0221\n\021num_trac"
      "k_entries\030\022 \001(\rB\026\222\265\030\022\n\020entries_in_title\022"
      "0\n\022artist_words_count\030\023 \001(\rB\024\222\265\030\020\n\016perf_"
      "words_num\0220\n\021track_words_count\030\024 \001(\rB\025\222\265"
      "\030\021\n\017title_words_num\022/\n\021query_words_count"
      "\030\025 \001(\rB\024\222\265\030\020\n\016words_in_query\022.\n\017alternat"
      "ive_ids\030\020 \003(\tB\025\222\265\030\021\n\017alternative_ids\032\342\002\n"
      "\004Serp\022E\n\007results\030\001 \003(\0132%.pb.srch.music.V"
      "kTrackResponse.ResultB\r\222\265\030\t\n\007results\0220\n\020"
      "backend_response\030\007 \001(\tB\026\222\265\030\022\n\020backend_re"
      "sponse\022#\n\016response_class\030\006 \001(\tB\013\222\265\030\007\n\005cl"
      "ass\022\036\n\tall_count\030\002 \001(\rB\013\222\265\030\007\n\005count\022,\n\016o"
      "fficial_count\030\003 \001(\rB\024\222\265\030\020\n\016official_coun"
      "t\022<\n\026qddb_sessions_num_log2\030\004 \001(\rB\034\222\265\030\030\n"
      "\026qddb_sessions_num_log2\0220\n\020sm_reply_qual"
      "ity\030\005 \001(\tB\026\222\265\030\022\n\020sm_reply_quality\"\341\n\n\017Vk"
      "AlbumResponse\022\026\n\003qid\030\001 \001(\tB\t\222\265\030\005\n\003qid\022=\n"
      "\004serp\030\002 \001(\0132#.pb.srch.music.VkAlbumRespo"
      "nse.SerpB\n\222\265\030\006\n\004serp\022\032\n\005split\030\003 \001(\rB\013\222\265\030"
      "\007\n\005split\032\247\007\n\006Result\022\034\n\006number\030\001 \001(\rB\014\222\265\030"
      "\010\n\006number\022#\n\010album_id\030\002 \001(\003B\021\222\265\030\r\n\013playl"
      "ist_id\022 \n\010owner_id\030\003 \001(\003B\016\222\265\030\n\n\010owner_id"
      "\022\037\n\006artist\030\004 \001(\tB\017\222\265\030\013\n\tperformer\022\032\n\005alb"
      "um\030\005 \001(\tB\013\222\265\030\007\n\005title\022 \n\010subtitle\030\006 \001(\tB"
      "\016\222\265\030\n\n\010subtitle\022#\n\013is_official\030\007 \001(\010B\016\222\265"
      "\030\n\n\010official\022$\n\006listen\030\010 \001(\004B\024\222\265\030\020\n\016time"
      "s_listened\0225\n\014listen_month\030\t \001(\004B\037\222\265\030\033\n\031"
      "times_listened_last_month\0223\n\013listen_week"
      "\030\n \001(\004B\036\222\265\030\032\n\030times_listened_last_week\022 "
      "\n\010idf_rank\030\013 \001(\001B\016\222\265\030\n\n\010idf_rank\0223\n\026max_"
      "artist_subsequence\030\014 \001(\rB\023\222\265\030\017\n\rmax_cont"
      "_perf\0223\n\025max_album_subsequence\030\r \001(\rB\024\222\265"
      "\030\020\n\016max_cont_title\0222\n\021num_artist_marked\030"
      "\016 \001(\rB\027\222\265\030\023\n\021perf_words_num_rf\0222\n\020num_al"
      "bum_marked\030\017 \001(\rB\030\222\265\030\024\n\022title_words_num_"
      "rf\0226\n\022num_artist_entries\030\021 \001(\rB\032\222\265\030\026\n\024en"
      "tries_in_performer\0221\n\021num_album_entries\030"
      "\022 \001(\rB\026\222\265\030\022\n\020entries_in_title\0220\n\022artist_"
      "words_count\030\023 \001(\rB\024\222\265\030\020\n\016perf_words_num\022"
      "0\n\021album_words_count\030\024 \001(\rB\025\222\265\030\021\n\017title_"
      "words_num\022/\n\021query_words_count\030\025 \001(\rB\024\222\265"
      "\030\020\n\016words_in_query\022.\n\017alternative_ids\030\020 "
      "\003(\tB\025\222\265\030\021\n\017alternative_ids\032\260\002\n\004Serp\022E\n\007r"
      "esults\030\001 \003(\0132%.pb.srch.music.VkAlbumResp"
      "onse.ResultB\r\222\265\030\t\n\007results\022#\n\016response_c"
      "lass\030\006 \001(\tB\013\222\265\030\007\n\005class\022\036\n\tall_count\030\002 \001"
      "(\rB\013\222\265\030\007\n\005count\022,\n\016official_count\030\003 \001(\rB"
      "\024\222\265\030\020\n\016official_count\022<\n\026qddb_sessions_n"
      "um_log2\030\004 \001(\rB\034\222\265\030\030\n\026qddb_sessions_num_l"
      "og2\0220\n\020sm_reply_quality\030\005 \001(\tB\026\222\265\030\022\n\020sm_"
      "reply_quality\"\307\006\n\017ManagerDocument\0221\n\004typ"
      "e\030\001 \001(\0162#.pb.srch.music.ManagerDocument."
      "Type\0229\n\010category\030\020 \001(\0162\'.pb.srch.music.M"
      "anagerDocument.Category\022\021\n\tis_nailed\030\002 \001"
      "(\010\022>\n\013latest_type\030\003 \001(\0162).pb.srch.music."
      "ManagerDocument.LatestType\022\016\n\006artist\030\004 \001"
      "(\t\022\r\n\005album\030\005 \001(\t\022\r\n\005track\030\006 \001(\t\022\020\n\010play"
      "list\030\007 \001(\t\022\024\n\014tracks_count\030\010 \001(\004\0224\n\006trac"
      "ks\030\t \003(\0132$.pb.srch.music.ManagerDocument"
      ".Track\022\016\n\006listen\030\n \001(\004\022\024\n\014listen_month\030\013"
      " \001(\004\022\022\n\nmax_listen\030\014 \001(\004\022\030\n\020max_listen_m"
      "onth\030\r \001(\004\022\016\n\006shares\030\016 \001(\004\022\014\n\004refs\030\017 \001(\004"
      "\032Z\n\005Track\022\016\n\006artist\030\001 \001(\t\022\r\n\005track\030\002 \001(\t"
      "\022\020\n\010duration\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\017\n\007f"
      "ile_id\030\005 \001(\t\"T\n\004Type\022\014\n\010TypeNone\020\000\022\016\n\nTy"
      "peArtist\020\001\022\r\n\tTypeAlbum\020\002\022\r\n\tTypeTrack\020\003"
      "\022\020\n\014TypePlaylist\020\004\"\202\001\n\010Category\022\020\n\014Categ"
      "oryNone\020\000\022\022\n\016CategoryNailed\020\001\022\024\n\020Categor"
      "ySearcher\020\002\022\024\n\020CategorySupposed\020\003\022\020\n\014Cat"
      "egoryDict\020\004\022\022\n\016CategoryLatest\020\005\">\n\nLates"
      "tType\022\016\n\nLatestNone\020\000\022\017\n\013LatestAlbum\020\001\022\017"
      "\n\013LatestTrack\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5863);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music_response.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_5fresponse_2eproto

const ::google::protobuf::EnumDescriptor* TitlesDocument_Type_descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_enum_descriptors[0];
}
bool TitlesDocument_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TitlesDocument_Type TitlesDocument::TypeNone;
const TitlesDocument_Type TitlesDocument::TypeArtist;
const TitlesDocument_Type TitlesDocument::TypeAlbum;
const TitlesDocument_Type TitlesDocument::TypeTrack;
const TitlesDocument_Type TitlesDocument::Type_MIN;
const TitlesDocument_Type TitlesDocument::Type_MAX;
const int TitlesDocument::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ManagerDocument_Type_descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_enum_descriptors[1];
}
bool ManagerDocument_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ManagerDocument_Type ManagerDocument::TypeNone;
const ManagerDocument_Type ManagerDocument::TypeArtist;
const ManagerDocument_Type ManagerDocument::TypeAlbum;
const ManagerDocument_Type ManagerDocument::TypeTrack;
const ManagerDocument_Type ManagerDocument::TypePlaylist;
const ManagerDocument_Type ManagerDocument::Type_MIN;
const ManagerDocument_Type ManagerDocument::Type_MAX;
const int ManagerDocument::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ManagerDocument_Category_descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_enum_descriptors[2];
}
bool ManagerDocument_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ManagerDocument_Category ManagerDocument::CategoryNone;
const ManagerDocument_Category ManagerDocument::CategoryNailed;
const ManagerDocument_Category ManagerDocument::CategorySearcher;
const ManagerDocument_Category ManagerDocument::CategorySupposed;
const ManagerDocument_Category ManagerDocument::CategoryDict;
const ManagerDocument_Category ManagerDocument::CategoryLatest;
const ManagerDocument_Category ManagerDocument::Category_MIN;
const ManagerDocument_Category ManagerDocument::Category_MAX;
const int ManagerDocument::Category_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ManagerDocument_LatestType_descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_enum_descriptors[3];
}
bool ManagerDocument_LatestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ManagerDocument_LatestType ManagerDocument::LatestNone;
const ManagerDocument_LatestType ManagerDocument::LatestAlbum;
const ManagerDocument_LatestType ManagerDocument::LatestTrack;
const ManagerDocument_LatestType ManagerDocument::LatestType_MIN;
const ManagerDocument_LatestType ManagerDocument::LatestType_MAX;
const int ManagerDocument::LatestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheEntry::kResponseFieldNumber;
const int CacheEntry::kBeginTimeFieldNumber;
const int CacheEntry::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CacheEntry::CacheEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.CacheEntry)
}
CacheEntry::CacheEntry(const CacheEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response().size() > 0) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.CacheEntry)
}

void CacheEntry::SharedCtor() {
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(expiration_));
  _cached_size_ = 0;
}

CacheEntry::~CacheEntry() {
  // @@protoc_insertion_point(destructor:pb.srch.music.CacheEntry)
  SharedDtor();
}

void CacheEntry::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheEntry::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CacheEntry& CacheEntry::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

CacheEntry* CacheEntry::New(::google::protobuf::Arena* arena) const {
  CacheEntry* n = new CacheEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CacheEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.CacheEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(expiration_));
  _internal_metadata_.Clear();
}

bool CacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.CacheEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response().data(), static_cast<int>(this->response().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.CacheEntry.response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expiration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.CacheEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.CacheEntry)
  return false;
#undef DO_
}

void CacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.CacheEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.CacheEntry.response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  // uint64 begin_time = 2;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begin_time(), output);
  }

  // uint64 expiration = 3;
  if (this->expiration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expiration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.CacheEntry)
}

::google::protobuf::uint8* CacheEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.CacheEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.CacheEntry.response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  // uint64 begin_time = 2;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begin_time(), target);
  }

  // uint64 expiration = 3;
  if (this->expiration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expiration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.CacheEntry)
  return target;
}

size_t CacheEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.CacheEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response());
  }

  // uint64 begin_time = 2;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begin_time());
  }

  // uint64 expiration = 3;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expiration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.CacheEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CacheEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.CacheEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.CacheEntry)
    MergeFrom(*source);
  }
}

void CacheEntry::MergeFrom(const CacheEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.CacheEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {

    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.expiration() != 0) {
    set_expiration(from.expiration());
  }
}

void CacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.CacheEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheEntry::CopyFrom(const CacheEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.CacheEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheEntry::IsInitialized() const {
  return true;
}

void CacheEntry::Swap(CacheEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CacheEntry::InternalSwap(CacheEntry* other) {
  using std::swap;
  response_.Swap(&other->response_);
  swap(begin_time_, other->begin_time_);
  swap(expiration_, other->expiration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CacheEntry::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CacheEntry

// string response = 1;
void CacheEntry::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CacheEntry::response() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.response)
  return response_.GetNoArena();
}
void CacheEntry::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.response)
}
#if LANG_CXX11
void CacheEntry::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.CacheEntry.response)
}
#endif
void CacheEntry::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.CacheEntry.response)
}
void CacheEntry::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.CacheEntry.response)
}
::std::string* CacheEntry::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.CacheEntry.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CacheEntry::release_response() {
  // @@protoc_insertion_point(field_release:pb.srch.music.CacheEntry.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CacheEntry::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.CacheEntry.response)
}

// uint64 begin_time = 2;
void CacheEntry::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CacheEntry::begin_time() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.begin_time)
  return begin_time_;
}
void CacheEntry::set_begin_time(::google::protobuf::uint64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.begin_time)
}

// uint64 expiration = 3;
void CacheEntry::clear_expiration() {
  expiration_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CacheEntry::expiration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.expiration)
  return expiration_;
}
void CacheEntry::set_expiration(::google::protobuf::uint64 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.expiration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitlesDocument_UmaData::kArtistIdFieldNumber;
const int TitlesDocument_UmaData::kTrackIdFieldNumber;
const int TitlesDocument_UmaData::kArtistFieldNumber;
const int TitlesDocument_UmaData::kAlbumFieldNumber;
const int TitlesDocument_UmaData::kTrackFieldNumber;
const int TitlesDocument_UmaData::kProbArtistFieldNumber;
const int TitlesDocument_UmaData::kProbTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitlesDocument_UmaData::TitlesDocument_UmaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.TitlesDocument.UmaData)
}
TitlesDocument_UmaData::TitlesDocument_UmaData(const TitlesDocument_UmaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      artist_id_(from.artist_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  ::memcpy(&track_id_, &from.track_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_track_) -
    reinterpret_cast<char*>(&track_id_)) + sizeof(prob_track_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.TitlesDocument.UmaData)
}

void TitlesDocument_UmaData::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_track_) -
      reinterpret_cast<char*>(&track_id_)) + sizeof(prob_track_));
  _cached_size_ = 0;
}

TitlesDocument_UmaData::~TitlesDocument_UmaData() {
  // @@protoc_insertion_point(destructor:pb.srch.music.TitlesDocument.UmaData)
  SharedDtor();
}

void TitlesDocument_UmaData::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TitlesDocument_UmaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitlesDocument_UmaData::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TitlesDocument_UmaData& TitlesDocument_UmaData::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

TitlesDocument_UmaData* TitlesDocument_UmaData::New(::google::protobuf::Arena* arena) const {
  TitlesDocument_UmaData* n = new TitlesDocument_UmaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TitlesDocument_UmaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.TitlesDocument.UmaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artist_id_.Clear();
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_track_) -
      reinterpret_cast<char*>(&track_id_)) + sizeof(prob_track_));
  _internal_metadata_.Clear();
}

bool TitlesDocument_UmaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.TitlesDocument.UmaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 artist_id = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_artist_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_artist_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 track_id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.UmaData.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.UmaData.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 5 [(.gogo.xml) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.UmaData.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prob_artist = 6 [(.gogo.xml) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prob_artist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prob_track = 7 [(.gogo.xml) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prob_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.TitlesDocument.UmaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.TitlesDocument.UmaData)
  return false;
#undef DO_
}

void TitlesDocument_UmaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.TitlesDocument.UmaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 artist_id = 1 [(.gogo.xml) = {
  if (this->artist_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _artist_id_cached_byte_size_));
  }
  for (int i = 0, n = this->artist_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->artist_id(i), output);
  }

  // uint64 track_id = 2 [(.gogo.xml) = {
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->track_id(), output);
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artist(), output);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->track(), output);
  }

  // double prob_artist = 6 [(.gogo.xml) = {
  if (this->prob_artist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prob_artist(), output);
  }

  // double prob_track = 7 [(.gogo.xml) = {
  if (this->prob_track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prob_track(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.TitlesDocument.UmaData)
}

::google::protobuf::uint8* TitlesDocument_UmaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.TitlesDocument.UmaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 artist_id = 1 [(.gogo.xml) = {
  if (this->artist_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _artist_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->artist_id_, target);
  }

  // uint64 track_id = 2 [(.gogo.xml) = {
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->track_id(), target);
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.UmaData.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->track(), target);
  }

  // double prob_artist = 6 [(.gogo.xml) = {
  if (this->prob_artist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prob_artist(), target);
  }

  // double prob_track = 7 [(.gogo.xml) = {
  if (this->prob_track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prob_track(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.TitlesDocument.UmaData)
  return target;
}

size_t TitlesDocument_UmaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.TitlesDocument.UmaData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 artist_id = 1 [(.gogo.xml) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->artist_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _artist_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // uint64 track_id = 2 [(.gogo.xml) = {
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->track_id());
  }

  // double prob_artist = 6 [(.gogo.xml) = {
  if (this->prob_artist() != 0) {
    total_size += 1 + 8;
  }

  // double prob_track = 7 [(.gogo.xml) = {
  if (this->prob_track() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitlesDocument_UmaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.TitlesDocument.UmaData)
  GOOGLE_DCHECK_NE(&from, this);
  const TitlesDocument_UmaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TitlesDocument_UmaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.TitlesDocument.UmaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.TitlesDocument.UmaData)
    MergeFrom(*source);
  }
}

void TitlesDocument_UmaData::MergeFrom(const TitlesDocument_UmaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.TitlesDocument.UmaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artist_id_.MergeFrom(from.artist_id_);
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
  if (from.prob_artist() != 0) {
    set_prob_artist(from.prob_artist());
  }
  if (from.prob_track() != 0) {
    set_prob_track(from.prob_track());
  }
}

void TitlesDocument_UmaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.TitlesDocument.UmaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitlesDocument_UmaData::CopyFrom(const TitlesDocument_UmaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.TitlesDocument.UmaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitlesDocument_UmaData::IsInitialized() const {
  return true;
}

void TitlesDocument_UmaData::Swap(TitlesDocument_UmaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitlesDocument_UmaData::InternalSwap(TitlesDocument_UmaData* other) {
  using std::swap;
  artist_id_.InternalSwap(&other->artist_id_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  track_.Swap(&other->track_);
  swap(track_id_, other->track_id_);
  swap(prob_artist_, other->prob_artist_);
  swap(prob_track_, other->prob_track_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TitlesDocument_UmaData::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TitlesDocument_UmaData

// repeated uint64 artist_id = 1 [(.gogo.xml) = {
int TitlesDocument_UmaData::artist_id_size() const {
  return artist_id_.size();
}
void TitlesDocument_UmaData::clear_artist_id() {
  artist_id_.Clear();
}
::google::protobuf::uint64 TitlesDocument_UmaData::artist_id(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return artist_id_.Get(index);
}
void TitlesDocument_UmaData::set_artist_id(int index, ::google::protobuf::uint64 value) {
  artist_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.artist_id)
}
void TitlesDocument_UmaData::add_artist_id(::google::protobuf::uint64 value) {
  artist_id_.Add(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.TitlesDocument.UmaData.artist_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TitlesDocument_UmaData::artist_id() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return artist_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TitlesDocument_UmaData::mutable_artist_id() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return &artist_id_;
}

// uint64 track_id = 2 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TitlesDocument_UmaData::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.track_id)
  return track_id_;
}
void TitlesDocument_UmaData::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.track_id)
}

// string artist = 3 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument_UmaData::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.artist)
  return artist_.GetNoArena();
}
void TitlesDocument_UmaData::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.artist)
}
#if LANG_CXX11
void TitlesDocument_UmaData::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.artist)
}
#endif
void TitlesDocument_UmaData::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.artist)
}
void TitlesDocument_UmaData::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.artist)
}
::std::string* TitlesDocument_UmaData::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument_UmaData::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument_UmaData::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.artist)
}

// string album = 4 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument_UmaData::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.album)
  return album_.GetNoArena();
}
void TitlesDocument_UmaData::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.album)
}
#if LANG_CXX11
void TitlesDocument_UmaData::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.album)
}
#endif
void TitlesDocument_UmaData::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.album)
}
void TitlesDocument_UmaData::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.album)
}
::std::string* TitlesDocument_UmaData::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument_UmaData::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument_UmaData::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.album)
}

// string track = 5 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument_UmaData::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.track)
  return track_.GetNoArena();
}
void TitlesDocument_UmaData::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.track)
}
#if LANG_CXX11
void TitlesDocument_UmaData::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.track)
}
#endif
void TitlesDocument_UmaData::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.track)
}
void TitlesDocument_UmaData::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.track)
}
::std::string* TitlesDocument_UmaData::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument_UmaData::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument_UmaData::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.track)
}

// double prob_artist = 6 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_prob_artist() {
  prob_artist_ = 0;
}
double TitlesDocument_UmaData::prob_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.prob_artist)
  return prob_artist_;
}
void TitlesDocument_UmaData::set_prob_artist(double value) {
  
  prob_artist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.prob_artist)
}

// double prob_track = 7 [(.gogo.xml) = {
void TitlesDocument_UmaData::clear_prob_track() {
  prob_track_ = 0;
}
double TitlesDocument_UmaData::prob_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.prob_track)
  return prob_track_;
}
void TitlesDocument_UmaData::set_prob_track(double value) {
  
  prob_track_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.prob_track)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitlesDocument::kUrlHashFieldNumber;
const int TitlesDocument::kTypeFieldNumber;
const int TitlesDocument::kArtistFieldNumber;
const int TitlesDocument::kAlbumFieldNumber;
const int TitlesDocument::kTrackFieldNumber;
const int TitlesDocument::kUmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitlesDocument::TitlesDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.TitlesDocument)
}
TitlesDocument::TitlesDocument(const TitlesDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.has_uma()) {
    uma_ = new ::pb::srch::music::TitlesDocument_UmaData(*from.uma_);
  } else {
    uma_ = NULL;
  }
  ::memcpy(&url_hash_, &from.url_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&url_hash_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.TitlesDocument)
}

void TitlesDocument::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uma_)) + sizeof(type_));
  _cached_size_ = 0;
}

TitlesDocument::~TitlesDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.TitlesDocument)
  SharedDtor();
}

void TitlesDocument::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uma_;
}

void TitlesDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitlesDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TitlesDocument& TitlesDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

TitlesDocument* TitlesDocument::New(::google::protobuf::Arena* arena) const {
  TitlesDocument* n = new TitlesDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TitlesDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.TitlesDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && uma_ != NULL) {
    delete uma_;
  }
  uma_ = NULL;
  ::memset(&url_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&url_hash_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool TitlesDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.TitlesDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 url_hash = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &url_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TitlesDocument.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::srch::music::TitlesDocument_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uma()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.TitlesDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.TitlesDocument)
  return false;
#undef DO_
}

void TitlesDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.TitlesDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 url_hash = 1 [(.gogo.xml) = {
  if (this->url_hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->url_hash(), output);
  }

  // string artist = 2 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // string track = 3 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->track(), output);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
  if (this->has_uma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->uma_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.TitlesDocument)
}

::google::protobuf::uint8* TitlesDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.TitlesDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 url_hash = 1 [(.gogo.xml) = {
  if (this->url_hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->url_hash(), target);
  }

  // string artist = 2 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // string track = 3 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->track(), target);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TitlesDocument.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
  if (this->has_uma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->uma_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.TitlesDocument)
  return target;
}

size_t TitlesDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.TitlesDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string artist = 2 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string track = 3 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
  if (this->has_uma()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uma_);
  }

  // uint64 url_hash = 1 [(.gogo.xml) = {
  if (this->url_hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->url_hash());
  }

  // .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitlesDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.TitlesDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const TitlesDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TitlesDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.TitlesDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.TitlesDocument)
    MergeFrom(*source);
  }
}

void TitlesDocument::MergeFrom(const TitlesDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.TitlesDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.has_uma()) {
    mutable_uma()->::pb::srch::music::TitlesDocument_UmaData::MergeFrom(from.uma());
  }
  if (from.url_hash() != 0) {
    set_url_hash(from.url_hash());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TitlesDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.TitlesDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitlesDocument::CopyFrom(const TitlesDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.TitlesDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitlesDocument::IsInitialized() const {
  return true;
}

void TitlesDocument::Swap(TitlesDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitlesDocument::InternalSwap(TitlesDocument* other) {
  using std::swap;
  artist_.Swap(&other->artist_);
  track_.Swap(&other->track_);
  album_.Swap(&other->album_);
  swap(uma_, other->uma_);
  swap(url_hash_, other->url_hash_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TitlesDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TitlesDocument

// uint64 url_hash = 1 [(.gogo.xml) = {
void TitlesDocument::clear_url_hash() {
  url_hash_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TitlesDocument::url_hash() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.url_hash)
  return url_hash_;
}
void TitlesDocument::set_url_hash(::google::protobuf::uint64 value) {
  
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.url_hash)
}

// .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
void TitlesDocument::clear_type() {
  type_ = 0;
}
::pb::srch::music::TitlesDocument_Type TitlesDocument::type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.type)
  return static_cast< ::pb::srch::music::TitlesDocument_Type >(type_);
}
void TitlesDocument::set_type(::pb::srch::music::TitlesDocument_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.type)
}

// string artist = 2 [(.gogo.xml) = {
void TitlesDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.artist)
  return artist_.GetNoArena();
}
void TitlesDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.artist)
}
#if LANG_CXX11
void TitlesDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.artist)
}
#endif
void TitlesDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.artist)
}
void TitlesDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.artist)
}
::std::string* TitlesDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.artist)
}

// string album = 4 [(.gogo.xml) = {
void TitlesDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.album)
  return album_.GetNoArena();
}
void TitlesDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.album)
}
#if LANG_CXX11
void TitlesDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.album)
}
#endif
void TitlesDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.album)
}
void TitlesDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.album)
}
::std::string* TitlesDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.album)
}

// string track = 3 [(.gogo.xml) = {
void TitlesDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TitlesDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.track)
  return track_.GetNoArena();
}
void TitlesDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.track)
}
#if LANG_CXX11
void TitlesDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.track)
}
#endif
void TitlesDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.track)
}
void TitlesDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.track)
}
::std::string* TitlesDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TitlesDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TitlesDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.track)
}

// .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
bool TitlesDocument::has_uma() const {
  return this != internal_default_instance() && uma_ != NULL;
}
void TitlesDocument::clear_uma() {
  if (GetArenaNoVirtual() == NULL && uma_ != NULL) delete uma_;
  uma_ = NULL;
}
const ::pb::srch::music::TitlesDocument_UmaData& TitlesDocument::uma() const {
  const ::pb::srch::music::TitlesDocument_UmaData* p = uma_;
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.uma)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::TitlesDocument_UmaData*>(
      &::pb::srch::music::_TitlesDocument_UmaData_default_instance_);
}
::pb::srch::music::TitlesDocument_UmaData* TitlesDocument::mutable_uma() {
  
  if (uma_ == NULL) {
    uma_ = new ::pb::srch::music::TitlesDocument_UmaData;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.uma)
  return uma_;
}
::pb::srch::music::TitlesDocument_UmaData* TitlesDocument::release_uma() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.uma)
  
  ::pb::srch::music::TitlesDocument_UmaData* temp = uma_;
  uma_ = NULL;
  return temp;
}
void TitlesDocument::set_allocated_uma(::pb::srch::music::TitlesDocument_UmaData* uma) {
  delete uma_;
  uma_ = uma;
  if (uma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.uma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitlesResponse::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitlesResponse::TitlesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.TitlesResponse)
}
TitlesResponse::TitlesResponse(const TitlesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      docs_(from.docs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.TitlesResponse)
}

void TitlesResponse::SharedCtor() {
  _cached_size_ = 0;
}

TitlesResponse::~TitlesResponse() {
  // @@protoc_insertion_point(destructor:pb.srch.music.TitlesResponse)
  SharedDtor();
}

void TitlesResponse::SharedDtor() {
}

void TitlesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitlesResponse::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TitlesResponse& TitlesResponse::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

TitlesResponse* TitlesResponse::New(::google::protobuf::Arena* arena) const {
  TitlesResponse* n = new TitlesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TitlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.TitlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  _internal_metadata_.Clear();
}

bool TitlesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.TitlesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.srch.music.TitlesDocument docs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.TitlesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.TitlesResponse)
  return false;
#undef DO_
}

void TitlesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.TitlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.TitlesDocument docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.TitlesResponse)
}

::google::protobuf::uint8* TitlesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.TitlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.TitlesDocument docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.TitlesResponse)
  return target;
}

size_t TitlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.TitlesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.srch.music.TitlesDocument docs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitlesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.TitlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TitlesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TitlesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.TitlesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.TitlesResponse)
    MergeFrom(*source);
  }
}

void TitlesResponse::MergeFrom(const TitlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.TitlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void TitlesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.TitlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitlesResponse::CopyFrom(const TitlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.TitlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitlesResponse::IsInitialized() const {
  return true;
}

void TitlesResponse::Swap(TitlesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitlesResponse::InternalSwap(TitlesResponse* other) {
  using std::swap;
  docs_.InternalSwap(&other->docs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TitlesResponse::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TitlesResponse

// repeated .pb.srch.music.TitlesDocument docs = 1;
int TitlesResponse::docs_size() const {
  return docs_.size();
}
void TitlesResponse::clear_docs() {
  docs_.Clear();
}
const ::pb::srch::music::TitlesDocument& TitlesResponse::docs(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesResponse.docs)
  return docs_.Get(index);
}
::pb::srch::music::TitlesDocument* TitlesResponse::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesResponse.docs)
  return docs_.Mutable(index);
}
::pb::srch::music::TitlesDocument* TitlesResponse::add_docs() {
  // @@protoc_insertion_point(field_add:pb.srch.music.TitlesResponse.docs)
  return docs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >*
TitlesResponse::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.TitlesResponse.docs)
  return &docs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >&
TitlesResponse::docs() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.TitlesResponse.docs)
  return docs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaylistSearcherDocument::kIdFieldNumber;
const int PlaylistSearcherDocument::kCollectionIdFieldNumber;
const int PlaylistSearcherDocument::kUserIdFieldNumber;
const int PlaylistSearcherDocument::kPlaylistFieldNumber;
const int PlaylistSearcherDocument::kTracksProtoFieldNumber;
const int PlaylistSearcherDocument::kTracksCountFieldNumber;
const int PlaylistSearcherDocument::kListenFieldNumber;
const int PlaylistSearcherDocument::kRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaylistSearcherDocument::PlaylistSearcherDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.PlaylistSearcherDocument)
}
PlaylistSearcherDocument::PlaylistSearcherDocument(const PlaylistSearcherDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection_id().size() > 0) {
    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  playlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playlist().size() > 0) {
    playlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_);
  }
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tracks_proto().size() > 0) {
    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  ::memcpy(&listen_, &from.listen_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracks_count_) -
    reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.PlaylistSearcherDocument)
}

void PlaylistSearcherDocument::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _cached_size_ = 0;
}

PlaylistSearcherDocument::~PlaylistSearcherDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.PlaylistSearcherDocument)
  SharedDtor();
}

void PlaylistSearcherDocument::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlaylistSearcherDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaylistSearcherDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlaylistSearcherDocument& PlaylistSearcherDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaylistSearcherDocument* PlaylistSearcherDocument::New(::google::protobuf::Arena* arena) const {
  PlaylistSearcherDocument* n = new PlaylistSearcherDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaylistSearcherDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.PlaylistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _internal_metadata_.Clear();
}

bool PlaylistSearcherDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.PlaylistSearcherDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.PlaylistSearcherDocument.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_id().data(), static_cast<int>(this->collection_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.PlaylistSearcherDocument.collection_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.PlaylistSearcherDocument.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playlist = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playlist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playlist().data(), static_cast<int>(this->playlist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.PlaylistSearcherDocument.playlist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tracks_proto = 5 [(.gogo.xml) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracks_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.PlaylistSearcherDocument.tracks_proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 6 [(.gogo.xml) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 refs = 7 [(.gogo.xml) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tracks_count = 8 [(.gogo.xml) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.PlaylistSearcherDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.PlaylistSearcherDocument)
  return false;
#undef DO_
}

void PlaylistSearcherDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.PlaylistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.collection_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection_id(), output);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string playlist = 4 [(.gogo.xml) = {
  if (this->playlist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist().data(), static_cast<int>(this->playlist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.playlist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->playlist(), output);
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.tracks_proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tracks_proto(), output);
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->listen(), output);
  }

  // uint64 refs = 7 [(.gogo.xml) = {
  if (this->refs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->refs(), output);
  }

  // uint32 tracks_count = 8 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tracks_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.PlaylistSearcherDocument)
}

::google::protobuf::uint8* PlaylistSearcherDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.PlaylistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.collection_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_id(), target);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string playlist = 4 [(.gogo.xml) = {
  if (this->playlist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist().data(), static_cast<int>(this->playlist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.playlist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playlist(), target);
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.PlaylistSearcherDocument.tracks_proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tracks_proto(), target);
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->listen(), target);
  }

  // uint64 refs = 7 [(.gogo.xml) = {
  if (this->refs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->refs(), target);
  }

  // uint32 tracks_count = 8 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tracks_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.PlaylistSearcherDocument)
  return target;
}

size_t PlaylistSearcherDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.PlaylistSearcherDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_id());
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string playlist = 4 [(.gogo.xml) = {
  if (this->playlist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playlist());
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tracks_proto());
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 refs = 7 [(.gogo.xml) = {
  if (this->refs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->refs());
  }

  // uint32 tracks_count = 8 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracks_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaylistSearcherDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.PlaylistSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaylistSearcherDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaylistSearcherDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.PlaylistSearcherDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.PlaylistSearcherDocument)
    MergeFrom(*source);
  }
}

void PlaylistSearcherDocument::MergeFrom(const PlaylistSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.PlaylistSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.collection_id().size() > 0) {

    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.playlist().size() > 0) {

    playlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_);
  }
  if (from.tracks_proto().size() > 0) {

    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.refs() != 0) {
    set_refs(from.refs());
  }
  if (from.tracks_count() != 0) {
    set_tracks_count(from.tracks_count());
  }
}

void PlaylistSearcherDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.PlaylistSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaylistSearcherDocument::CopyFrom(const PlaylistSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.PlaylistSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaylistSearcherDocument::IsInitialized() const {
  return true;
}

void PlaylistSearcherDocument::Swap(PlaylistSearcherDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaylistSearcherDocument::InternalSwap(PlaylistSearcherDocument* other) {
  using std::swap;
  id_.Swap(&other->id_);
  collection_id_.Swap(&other->collection_id_);
  user_id_.Swap(&other->user_id_);
  playlist_.Swap(&other->playlist_);
  tracks_proto_.Swap(&other->tracks_proto_);
  swap(listen_, other->listen_);
  swap(refs_, other->refs_);
  swap(tracks_count_, other->tracks_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaylistSearcherDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaylistSearcherDocument

// string id = 1 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlaylistSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.id)
  return id_.GetNoArena();
}
void PlaylistSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.id)
}
#if LANG_CXX11
void PlaylistSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.id)
}
#endif
void PlaylistSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.id)
}
void PlaylistSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.id)
}
::std::string* PlaylistSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaylistSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaylistSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.id)
}

// string collection_id = 2 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_collection_id() {
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlaylistSearcherDocument::collection_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.collection_id)
  return collection_id_.GetNoArena();
}
void PlaylistSearcherDocument::set_collection_id(const ::std::string& value) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
#if LANG_CXX11
void PlaylistSearcherDocument::set_collection_id(::std::string&& value) {
  
  collection_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
#endif
void PlaylistSearcherDocument::set_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
void PlaylistSearcherDocument::set_collection_id(const char* value, size_t size) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
::std::string* PlaylistSearcherDocument::mutable_collection_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.collection_id)
  return collection_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaylistSearcherDocument::release_collection_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.collection_id)
  
  return collection_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaylistSearcherDocument::set_allocated_collection_id(::std::string* collection_id) {
  if (collection_id != NULL) {
    
  } else {
    
  }
  collection_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.collection_id)
}

// string user_id = 3 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlaylistSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
void PlaylistSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.user_id)
}
#if LANG_CXX11
void PlaylistSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.user_id)
}
#endif
void PlaylistSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.user_id)
}
void PlaylistSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.user_id)
}
::std::string* PlaylistSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaylistSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaylistSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.user_id)
}

// string playlist = 4 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_playlist() {
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlaylistSearcherDocument::playlist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.playlist)
  return playlist_.GetNoArena();
}
void PlaylistSearcherDocument::set_playlist(const ::std::string& value) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.playlist)
}
#if LANG_CXX11
void PlaylistSearcherDocument::set_playlist(::std::string&& value) {
  
  playlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.playlist)
}
#endif
void PlaylistSearcherDocument::set_playlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.playlist)
}
void PlaylistSearcherDocument::set_playlist(const char* value, size_t size) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.playlist)
}
::std::string* PlaylistSearcherDocument::mutable_playlist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.playlist)
  return playlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaylistSearcherDocument::release_playlist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.playlist)
  
  return playlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaylistSearcherDocument::set_allocated_playlist(::std::string* playlist) {
  if (playlist != NULL) {
    
  } else {
    
  }
  playlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.playlist)
}

// string tracks_proto = 5 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlaylistSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
void PlaylistSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
#if LANG_CXX11
void PlaylistSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
#endif
void PlaylistSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
void PlaylistSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
::std::string* PlaylistSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlaylistSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlaylistSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 8 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
::google::protobuf::uint32 PlaylistSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.tracks_count)
  return tracks_count_;
}
void PlaylistSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.tracks_count)
}

// uint64 listen = 6 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PlaylistSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.listen)
  return listen_;
}
void PlaylistSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.listen)
}

// uint64 refs = 7 [(.gogo.xml) = {
void PlaylistSearcherDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PlaylistSearcherDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.refs)
  return refs_;
}
void PlaylistSearcherDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.refs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlbumSearcherDocument::kIdFieldNumber;
const int AlbumSearcherDocument::kCollectionIdFieldNumber;
const int AlbumSearcherDocument::kUserIdFieldNumber;
const int AlbumSearcherDocument::kAlbumFieldNumber;
const int AlbumSearcherDocument::kArtistFieldNumber;
const int AlbumSearcherDocument::kTracksProtoFieldNumber;
const int AlbumSearcherDocument::kTracksCountFieldNumber;
const int AlbumSearcherDocument::kListenFieldNumber;
const int AlbumSearcherDocument::kRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlbumSearcherDocument::AlbumSearcherDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.AlbumSearcherDocument)
}
AlbumSearcherDocument::AlbumSearcherDocument(const AlbumSearcherDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection_id().size() > 0) {
    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tracks_proto().size() > 0) {
    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  ::memcpy(&listen_, &from.listen_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracks_count_) -
    reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.AlbumSearcherDocument)
}

void AlbumSearcherDocument::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _cached_size_ = 0;
}

AlbumSearcherDocument::~AlbumSearcherDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.AlbumSearcherDocument)
  SharedDtor();
}

void AlbumSearcherDocument::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlbumSearcherDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlbumSearcherDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlbumSearcherDocument& AlbumSearcherDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

AlbumSearcherDocument* AlbumSearcherDocument::New(::google::protobuf::Arena* arena) const {
  AlbumSearcherDocument* n = new AlbumSearcherDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlbumSearcherDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.AlbumSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _internal_metadata_.Clear();
}

bool AlbumSearcherDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.AlbumSearcherDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_id().data(), static_cast<int>(this->collection_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.collection_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 5 [(.gogo.xml) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tracks_proto = 6 [(.gogo.xml) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracks_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.AlbumSearcherDocument.tracks_proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 7 [(.gogo.xml) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 refs = 8 [(.gogo.xml) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tracks_count = 9 [(.gogo.xml) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.AlbumSearcherDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.AlbumSearcherDocument)
  return false;
#undef DO_
}

void AlbumSearcherDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.AlbumSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.collection_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection_id(), output);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album(), output);
  }

  // string artist = 5 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->artist(), output);
  }

  // string tracks_proto = 6 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.tracks_proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tracks_proto(), output);
  }

  // uint64 listen = 7 [(.gogo.xml) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->listen(), output);
  }

  // uint64 refs = 8 [(.gogo.xml) = {
  if (this->refs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->refs(), output);
  }

  // uint32 tracks_count = 9 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tracks_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.AlbumSearcherDocument)
}

::google::protobuf::uint8* AlbumSearcherDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.AlbumSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_id().data(), static_cast<int>(this->collection_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.collection_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_id(), target);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album(), target);
  }

  // string artist = 5 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->artist(), target);
  }

  // string tracks_proto = 6 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.AlbumSearcherDocument.tracks_proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tracks_proto(), target);
  }

  // uint64 listen = 7 [(.gogo.xml) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->listen(), target);
  }

  // uint64 refs = 8 [(.gogo.xml) = {
  if (this->refs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->refs(), target);
  }

  // uint32 tracks_count = 9 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tracks_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.AlbumSearcherDocument)
  return target;
}

size_t AlbumSearcherDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.AlbumSearcherDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string collection_id = 2 [(.gogo.xml) = {
  if (this->collection_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_id());
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string album = 4 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // string artist = 5 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string tracks_proto = 6 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tracks_proto());
  }

  // uint64 listen = 7 [(.gogo.xml) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 refs = 8 [(.gogo.xml) = {
  if (this->refs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->refs());
  }

  // uint32 tracks_count = 9 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracks_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlbumSearcherDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.AlbumSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const AlbumSearcherDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlbumSearcherDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.AlbumSearcherDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.AlbumSearcherDocument)
    MergeFrom(*source);
  }
}

void AlbumSearcherDocument::MergeFrom(const AlbumSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.AlbumSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.collection_id().size() > 0) {

    collection_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.tracks_proto().size() > 0) {

    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.refs() != 0) {
    set_refs(from.refs());
  }
  if (from.tracks_count() != 0) {
    set_tracks_count(from.tracks_count());
  }
}

void AlbumSearcherDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.AlbumSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlbumSearcherDocument::CopyFrom(const AlbumSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.AlbumSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbumSearcherDocument::IsInitialized() const {
  return true;
}

void AlbumSearcherDocument::Swap(AlbumSearcherDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlbumSearcherDocument::InternalSwap(AlbumSearcherDocument* other) {
  using std::swap;
  id_.Swap(&other->id_);
  collection_id_.Swap(&other->collection_id_);
  user_id_.Swap(&other->user_id_);
  album_.Swap(&other->album_);
  artist_.Swap(&other->artist_);
  tracks_proto_.Swap(&other->tracks_proto_);
  swap(listen_, other->listen_);
  swap(refs_, other->refs_);
  swap(tracks_count_, other->tracks_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlbumSearcherDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlbumSearcherDocument

// string id = 1 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.id)
  return id_.GetNoArena();
}
void AlbumSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.id)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.id)
}
#endif
void AlbumSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.id)
}
void AlbumSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.id)
}
::std::string* AlbumSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.id)
}

// string collection_id = 2 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_collection_id() {
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::collection_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.collection_id)
  return collection_id_.GetNoArena();
}
void AlbumSearcherDocument::set_collection_id(const ::std::string& value) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.collection_id)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_collection_id(::std::string&& value) {
  
  collection_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.collection_id)
}
#endif
void AlbumSearcherDocument::set_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.collection_id)
}
void AlbumSearcherDocument::set_collection_id(const char* value, size_t size) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.collection_id)
}
::std::string* AlbumSearcherDocument::mutable_collection_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.collection_id)
  return collection_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_collection_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.collection_id)
  
  return collection_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_collection_id(::std::string* collection_id) {
  if (collection_id != NULL) {
    
  } else {
    
  }
  collection_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.collection_id)
}

// string user_id = 3 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
void AlbumSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.user_id)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.user_id)
}
#endif
void AlbumSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.user_id)
}
void AlbumSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.user_id)
}
::std::string* AlbumSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.user_id)
}

// string album = 4 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.album)
  return album_.GetNoArena();
}
void AlbumSearcherDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.album)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.album)
}
#endif
void AlbumSearcherDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.album)
}
void AlbumSearcherDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.album)
}
::std::string* AlbumSearcherDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.album)
}

// string artist = 5 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.artist)
  return artist_.GetNoArena();
}
void AlbumSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.artist)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.artist)
}
#endif
void AlbumSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.artist)
}
void AlbumSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.artist)
}
::std::string* AlbumSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.artist)
}

// string tracks_proto = 6 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AlbumSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
void AlbumSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
#if LANG_CXX11
void AlbumSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
#endif
void AlbumSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
void AlbumSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
::std::string* AlbumSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AlbumSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AlbumSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 9 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
::google::protobuf::uint32 AlbumSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.tracks_count)
  return tracks_count_;
}
void AlbumSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.tracks_count)
}

// uint64 listen = 7 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AlbumSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.listen)
  return listen_;
}
void AlbumSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.listen)
}

// uint64 refs = 8 [(.gogo.xml) = {
void AlbumSearcherDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AlbumSearcherDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.refs)
  return refs_;
}
void AlbumSearcherDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.refs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtistSearcherDocument::kIdFieldNumber;
const int ArtistSearcherDocument::kArtistIdFieldNumber;
const int ArtistSearcherDocument::kArtistFieldNumber;
const int ArtistSearcherDocument::kTrackNamesFieldNumber;
const int ArtistSearcherDocument::kTracksProtoFieldNumber;
const int ArtistSearcherDocument::kTracksCountFieldNumber;
const int ArtistSearcherDocument::kListenFieldNumber;
const int ArtistSearcherDocument::kListenMonthFieldNumber;
const int ArtistSearcherDocument::kMaxListenFieldNumber;
const int ArtistSearcherDocument::kMaxListenMonthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtistSearcherDocument::ArtistSearcherDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.ArtistSearcherDocument)
}
ArtistSearcherDocument::ArtistSearcherDocument(const ArtistSearcherDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  artist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist_id().size() > 0) {
    artist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_id_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  track_names_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track_names().size() > 0) {
    track_names_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_names_);
  }
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tracks_proto().size() > 0) {
    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  ::memcpy(&listen_, &from.listen_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracks_count_) -
    reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.ArtistSearcherDocument)
}

void ArtistSearcherDocument::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_names_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _cached_size_ = 0;
}

ArtistSearcherDocument::~ArtistSearcherDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.ArtistSearcherDocument)
  SharedDtor();
}

void ArtistSearcherDocument::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_names_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ArtistSearcherDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtistSearcherDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArtistSearcherDocument& ArtistSearcherDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArtistSearcherDocument* ArtistSearcherDocument::New(::google::protobuf::Arena* arena) const {
  ArtistSearcherDocument* n = new ArtistSearcherDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArtistSearcherDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.ArtistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracks_count_) -
      reinterpret_cast<char*>(&listen_)) + sizeof(tracks_count_));
  _internal_metadata_.Clear();
}

bool ArtistSearcherDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.ArtistSearcherDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ArtistSearcherDocument.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist_id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist_id().data(), static_cast<int>(this->artist_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ArtistSearcherDocument.artist_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ArtistSearcherDocument.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track_names = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track_names().data(), static_cast<int>(this->track_names().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ArtistSearcherDocument.track_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tracks_proto = 5 [(.gogo.xml) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracks_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ArtistSearcherDocument.tracks_proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 6 [(.gogo.xml) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_month = 7 [(.gogo.xml) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_listen = 8 [(.gogo.xml) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_listen_month = 9 [(.gogo.xml) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tracks_count = 10 [(.gogo.xml) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.ArtistSearcherDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.ArtistSearcherDocument)
  return false;
#undef DO_
}

void ArtistSearcherDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.ArtistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string artist_id = 2 [(.gogo.xml) = {
  if (this->artist_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist_id().data(), static_cast<int>(this->artist_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.artist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist_id(), output);
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artist(), output);
  }

  // string track_names = 4 [(.gogo.xml) = {
  if (this->track_names().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track_names().data(), static_cast<int>(this->track_names().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.track_names");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->track_names(), output);
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.tracks_proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tracks_proto(), output);
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->listen(), output);
  }

  // uint64 listen_month = 7 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->listen_month(), output);
  }

  // uint64 max_listen = 8 [(.gogo.xml) = {
  if (this->max_listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->max_listen(), output);
  }

  // uint64 max_listen_month = 9 [(.gogo.xml) = {
  if (this->max_listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->max_listen_month(), output);
  }

  // uint32 tracks_count = 10 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tracks_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.ArtistSearcherDocument)
}

::google::protobuf::uint8* ArtistSearcherDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.ArtistSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string artist_id = 2 [(.gogo.xml) = {
  if (this->artist_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist_id().data(), static_cast<int>(this->artist_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.artist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist_id(), target);
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // string track_names = 4 [(.gogo.xml) = {
  if (this->track_names().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track_names().data(), static_cast<int>(this->track_names().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.track_names");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->track_names(), target);
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tracks_proto().data(), static_cast<int>(this->tracks_proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ArtistSearcherDocument.tracks_proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tracks_proto(), target);
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->listen(), target);
  }

  // uint64 listen_month = 7 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->listen_month(), target);
  }

  // uint64 max_listen = 8 [(.gogo.xml) = {
  if (this->max_listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->max_listen(), target);
  }

  // uint64 max_listen_month = 9 [(.gogo.xml) = {
  if (this->max_listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->max_listen_month(), target);
  }

  // uint32 tracks_count = 10 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tracks_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.ArtistSearcherDocument)
  return target;
}

size_t ArtistSearcherDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.ArtistSearcherDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string artist_id = 2 [(.gogo.xml) = {
  if (this->artist_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist_id());
  }

  // string artist = 3 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string track_names = 4 [(.gogo.xml) = {
  if (this->track_names().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_names());
  }

  // string tracks_proto = 5 [(.gogo.xml) = {
  if (this->tracks_proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tracks_proto());
  }

  // uint64 listen = 6 [(.gogo.xml) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 listen_month = 7 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_month());
  }

  // uint64 max_listen = 8 [(.gogo.xml) = {
  if (this->max_listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_listen());
  }

  // uint64 max_listen_month = 9 [(.gogo.xml) = {
  if (this->max_listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_listen_month());
  }

  // uint32 tracks_count = 10 [(.gogo.xml) = {
  if (this->tracks_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracks_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtistSearcherDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.ArtistSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistSearcherDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArtistSearcherDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.ArtistSearcherDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.ArtistSearcherDocument)
    MergeFrom(*source);
  }
}

void ArtistSearcherDocument::MergeFrom(const ArtistSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.ArtistSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.artist_id().size() > 0) {

    artist_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_id_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.track_names().size() > 0) {

    track_names_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_names_);
  }
  if (from.tracks_proto().size() > 0) {

    tracks_proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_proto_);
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.listen_month() != 0) {
    set_listen_month(from.listen_month());
  }
  if (from.max_listen() != 0) {
    set_max_listen(from.max_listen());
  }
  if (from.max_listen_month() != 0) {
    set_max_listen_month(from.max_listen_month());
  }
  if (from.tracks_count() != 0) {
    set_tracks_count(from.tracks_count());
  }
}

void ArtistSearcherDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.ArtistSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistSearcherDocument::CopyFrom(const ArtistSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.ArtistSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistSearcherDocument::IsInitialized() const {
  return true;
}

void ArtistSearcherDocument::Swap(ArtistSearcherDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtistSearcherDocument::InternalSwap(ArtistSearcherDocument* other) {
  using std::swap;
  id_.Swap(&other->id_);
  artist_id_.Swap(&other->artist_id_);
  artist_.Swap(&other->artist_);
  track_names_.Swap(&other->track_names_);
  tracks_proto_.Swap(&other->tracks_proto_);
  swap(listen_, other->listen_);
  swap(listen_month_, other->listen_month_);
  swap(max_listen_, other->max_listen_);
  swap(max_listen_month_, other->max_listen_month_);
  swap(tracks_count_, other->tracks_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArtistSearcherDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArtistSearcherDocument

// string id = 1 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ArtistSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.id)
  return id_.GetNoArena();
}
void ArtistSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.id)
}
#if LANG_CXX11
void ArtistSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.id)
}
#endif
void ArtistSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.id)
}
void ArtistSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.id)
}
::std::string* ArtistSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArtistSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArtistSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.id)
}

// string artist_id = 2 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_artist_id() {
  artist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ArtistSearcherDocument::artist_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.artist_id)
  return artist_id_.GetNoArena();
}
void ArtistSearcherDocument::set_artist_id(const ::std::string& value) {
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.artist_id)
}
#if LANG_CXX11
void ArtistSearcherDocument::set_artist_id(::std::string&& value) {
  
  artist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.artist_id)
}
#endif
void ArtistSearcherDocument::set_artist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.artist_id)
}
void ArtistSearcherDocument::set_artist_id(const char* value, size_t size) {
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.artist_id)
}
::std::string* ArtistSearcherDocument::mutable_artist_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.artist_id)
  return artist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArtistSearcherDocument::release_artist_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.artist_id)
  
  return artist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArtistSearcherDocument::set_allocated_artist_id(::std::string* artist_id) {
  if (artist_id != NULL) {
    
  } else {
    
  }
  artist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.artist_id)
}

// string artist = 3 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ArtistSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.artist)
  return artist_.GetNoArena();
}
void ArtistSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.artist)
}
#if LANG_CXX11
void ArtistSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.artist)
}
#endif
void ArtistSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.artist)
}
void ArtistSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.artist)
}
::std::string* ArtistSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArtistSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArtistSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.artist)
}

// string track_names = 4 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_track_names() {
  track_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ArtistSearcherDocument::track_names() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.track_names)
  return track_names_.GetNoArena();
}
void ArtistSearcherDocument::set_track_names(const ::std::string& value) {
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.track_names)
}
#if LANG_CXX11
void ArtistSearcherDocument::set_track_names(::std::string&& value) {
  
  track_names_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.track_names)
}
#endif
void ArtistSearcherDocument::set_track_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.track_names)
}
void ArtistSearcherDocument::set_track_names(const char* value, size_t size) {
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.track_names)
}
::std::string* ArtistSearcherDocument::mutable_track_names() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.track_names)
  return track_names_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArtistSearcherDocument::release_track_names() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.track_names)
  
  return track_names_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArtistSearcherDocument::set_allocated_track_names(::std::string* track_names) {
  if (track_names != NULL) {
    
  } else {
    
  }
  track_names_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_names);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.track_names)
}

// string tracks_proto = 5 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ArtistSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
void ArtistSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
#if LANG_CXX11
void ArtistSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
#endif
void ArtistSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
void ArtistSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
::std::string* ArtistSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArtistSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArtistSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 10 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
::google::protobuf::uint32 ArtistSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.tracks_count)
  return tracks_count_;
}
void ArtistSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.tracks_count)
}

// uint64 listen = 6 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ArtistSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.listen)
  return listen_;
}
void ArtistSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.listen)
}

// uint64 listen_month = 7 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ArtistSearcherDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.listen_month)
  return listen_month_;
}
void ArtistSearcherDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.listen_month)
}

// uint64 max_listen = 8 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_max_listen() {
  max_listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ArtistSearcherDocument::max_listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.max_listen)
  return max_listen_;
}
void ArtistSearcherDocument::set_max_listen(::google::protobuf::uint64 value) {
  
  max_listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.max_listen)
}

// uint64 max_listen_month = 9 [(.gogo.xml) = {
void ArtistSearcherDocument::clear_max_listen_month() {
  max_listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ArtistSearcherDocument::max_listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.max_listen_month)
  return max_listen_month_;
}
void ArtistSearcherDocument::set_max_listen_month(::google::protobuf::uint64 value) {
  
  max_listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.max_listen_month)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackSearcherDocument::kIdFieldNumber;
const int TrackSearcherDocument::kTrackIdFieldNumber;
const int TrackSearcherDocument::kUserIdFieldNumber;
const int TrackSearcherDocument::kFileIdFieldNumber;
const int TrackSearcherDocument::kUmaIdFieldNumber;
const int TrackSearcherDocument::kTrackFieldNumber;
const int TrackSearcherDocument::kArtistFieldNumber;
const int TrackSearcherDocument::kAlbumFieldNumber;
const int TrackSearcherDocument::kDurationFieldNumber;
const int TrackSearcherDocument::kSharesFieldNumber;
const int TrackSearcherDocument::kListenFieldNumber;
const int TrackSearcherDocument::kListenMonthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackSearcherDocument::TrackSearcherDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.TrackSearcherDocument)
}
TrackSearcherDocument::TrackSearcherDocument(const TrackSearcherDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track_id().size() > 0) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  uma_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uma_id().size() > 0) {
    uma_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uma_id_);
  }
  ::memcpy(&shares_, &from.shares_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&shares_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.TrackSearcherDocument)
}

void TrackSearcherDocument::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uma_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shares_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&shares_)) + sizeof(duration_));
  _cached_size_ = 0;
}

TrackSearcherDocument::~TrackSearcherDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.TrackSearcherDocument)
  SharedDtor();
}

void TrackSearcherDocument::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uma_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrackSearcherDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackSearcherDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackSearcherDocument& TrackSearcherDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrackSearcherDocument* TrackSearcherDocument::New(::google::protobuf::Arena* arena) const {
  TrackSearcherDocument* n = new TrackSearcherDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackSearcherDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.TrackSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uma_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shares_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&shares_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

bool TrackSearcherDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.TrackSearcherDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.gogo.xml) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track_id = 2 [(.gogo.xml) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track_id().data(), static_cast<int>(this->track_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.track_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3 [(.gogo.xml) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_id = 4 [(.gogo.xml) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 5 [(.gogo.xml) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 6 [(.gogo.xml) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 7 [(.gogo.xml) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 8 [(.gogo.xml) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 shares = 9 [(.gogo.xml) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 10 [(.gogo.xml) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_month = 11 [(.gogo.xml) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uma_id = 12 [(.gogo.xml) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uma_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uma_id().data(), static_cast<int>(this->uma_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.TrackSearcherDocument.uma_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.TrackSearcherDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.TrackSearcherDocument)
  return false;
#undef DO_
}

void TrackSearcherDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.TrackSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string track_id = 2 [(.gogo.xml) = {
  if (this->track_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.track_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track_id(), output);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string file_id = 4 [(.gogo.xml) = {
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_id(), output);
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->track(), output);
  }

  // string artist = 6 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->artist(), output);
  }

  // string album = 7 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->album(), output);
  }

  // uint32 duration = 8 [(.gogo.xml) = {
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration(), output);
  }

  // uint64 shares = 9 [(.gogo.xml) = {
  if (this->shares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->shares(), output);
  }

  // uint64 listen = 10 [(.gogo.xml) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->listen(), output);
  }

  // uint64 listen_month = 11 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->listen_month(), output);
  }

  // string uma_id = 12 [(.gogo.xml) = {
  if (this->uma_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uma_id().data(), static_cast<int>(this->uma_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.uma_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->uma_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.TrackSearcherDocument)
}

::google::protobuf::uint8* TrackSearcherDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.TrackSearcherDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string track_id = 2 [(.gogo.xml) = {
  if (this->track_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.track_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track_id(), target);
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string file_id = 4 [(.gogo.xml) = {
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_id(), target);
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->track(), target);
  }

  // string artist = 6 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->artist(), target);
  }

  // string album = 7 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->album(), target);
  }

  // uint32 duration = 8 [(.gogo.xml) = {
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration(), target);
  }

  // uint64 shares = 9 [(.gogo.xml) = {
  if (this->shares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->shares(), target);
  }

  // uint64 listen = 10 [(.gogo.xml) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->listen(), target);
  }

  // uint64 listen_month = 11 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->listen_month(), target);
  }

  // string uma_id = 12 [(.gogo.xml) = {
  if (this->uma_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uma_id().data(), static_cast<int>(this->uma_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.TrackSearcherDocument.uma_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uma_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.TrackSearcherDocument)
  return target;
}

size_t TrackSearcherDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.TrackSearcherDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1 [(.gogo.xml) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string track_id = 2 [(.gogo.xml) = {
  if (this->track_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track_id());
  }

  // string user_id = 3 [(.gogo.xml) = {
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string file_id = 4 [(.gogo.xml) = {
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  // string track = 5 [(.gogo.xml) = {
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string artist = 6 [(.gogo.xml) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string album = 7 [(.gogo.xml) = {
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // string uma_id = 12 [(.gogo.xml) = {
  if (this->uma_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uma_id());
  }

  // uint64 shares = 9 [(.gogo.xml) = {
  if (this->shares() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->shares());
  }

  // uint64 listen = 10 [(.gogo.xml) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 listen_month = 11 [(.gogo.xml) = {
  if (this->listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_month());
  }

  // uint32 duration = 8 [(.gogo.xml) = {
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackSearcherDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.TrackSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackSearcherDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackSearcherDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.TrackSearcherDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.TrackSearcherDocument)
    MergeFrom(*source);
  }
}

void TrackSearcherDocument::MergeFrom(const TrackSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.TrackSearcherDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.track_id().size() > 0) {

    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.uma_id().size() > 0) {

    uma_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uma_id_);
  }
  if (from.shares() != 0) {
    set_shares(from.shares());
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.listen_month() != 0) {
    set_listen_month(from.listen_month());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void TrackSearcherDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.TrackSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackSearcherDocument::CopyFrom(const TrackSearcherDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.TrackSearcherDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackSearcherDocument::IsInitialized() const {
  return true;
}

void TrackSearcherDocument::Swap(TrackSearcherDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackSearcherDocument::InternalSwap(TrackSearcherDocument* other) {
  using std::swap;
  id_.Swap(&other->id_);
  track_id_.Swap(&other->track_id_);
  user_id_.Swap(&other->user_id_);
  file_id_.Swap(&other->file_id_);
  track_.Swap(&other->track_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  uma_id_.Swap(&other->uma_id_);
  swap(shares_, other->shares_);
  swap(listen_, other->listen_);
  swap(listen_month_, other->listen_month_);
  swap(duration_, other->duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackSearcherDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackSearcherDocument

// string id = 1 [(.gogo.xml) = {
void TrackSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.id)
  return id_.GetNoArena();
}
void TrackSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.id)
}
#if LANG_CXX11
void TrackSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.id)
}
#endif
void TrackSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.id)
}
void TrackSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.id)
}
::std::string* TrackSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.id)
}

// string track_id = 2 [(.gogo.xml) = {
void TrackSearcherDocument::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.track_id)
  return track_id_.GetNoArena();
}
void TrackSearcherDocument::set_track_id(const ::std::string& value) {
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.track_id)
}
#if LANG_CXX11
void TrackSearcherDocument::set_track_id(::std::string&& value) {
  
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.track_id)
}
#endif
void TrackSearcherDocument::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.track_id)
}
void TrackSearcherDocument::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.track_id)
}
::std::string* TrackSearcherDocument::mutable_track_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.track_id)
  
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.track_id)
}

// string user_id = 3 [(.gogo.xml) = {
void TrackSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
void TrackSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.user_id)
}
#if LANG_CXX11
void TrackSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.user_id)
}
#endif
void TrackSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.user_id)
}
void TrackSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.user_id)
}
::std::string* TrackSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.user_id)
}

// string file_id = 4 [(.gogo.xml) = {
void TrackSearcherDocument::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.file_id)
  return file_id_.GetNoArena();
}
void TrackSearcherDocument::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.file_id)
}
#if LANG_CXX11
void TrackSearcherDocument::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.file_id)
}
#endif
void TrackSearcherDocument::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.file_id)
}
void TrackSearcherDocument::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.file_id)
}
::std::string* TrackSearcherDocument::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.file_id)
}

// string uma_id = 12 [(.gogo.xml) = {
void TrackSearcherDocument::clear_uma_id() {
  uma_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::uma_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.uma_id)
  return uma_id_.GetNoArena();
}
void TrackSearcherDocument::set_uma_id(const ::std::string& value) {
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.uma_id)
}
#if LANG_CXX11
void TrackSearcherDocument::set_uma_id(::std::string&& value) {
  
  uma_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.uma_id)
}
#endif
void TrackSearcherDocument::set_uma_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.uma_id)
}
void TrackSearcherDocument::set_uma_id(const char* value, size_t size) {
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.uma_id)
}
::std::string* TrackSearcherDocument::mutable_uma_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.uma_id)
  return uma_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_uma_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.uma_id)
  
  return uma_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_uma_id(::std::string* uma_id) {
  if (uma_id != NULL) {
    
  } else {
    
  }
  uma_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uma_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.uma_id)
}

// string track = 5 [(.gogo.xml) = {
void TrackSearcherDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.track)
  return track_.GetNoArena();
}
void TrackSearcherDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.track)
}
#if LANG_CXX11
void TrackSearcherDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.track)
}
#endif
void TrackSearcherDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.track)
}
void TrackSearcherDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.track)
}
::std::string* TrackSearcherDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.track)
}

// string artist = 6 [(.gogo.xml) = {
void TrackSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.artist)
  return artist_.GetNoArena();
}
void TrackSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.artist)
}
#if LANG_CXX11
void TrackSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.artist)
}
#endif
void TrackSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.artist)
}
void TrackSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.artist)
}
::std::string* TrackSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.artist)
}

// string album = 7 [(.gogo.xml) = {
void TrackSearcherDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrackSearcherDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.album)
  return album_.GetNoArena();
}
void TrackSearcherDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.album)
}
#if LANG_CXX11
void TrackSearcherDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.album)
}
#endif
void TrackSearcherDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.album)
}
void TrackSearcherDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.album)
}
::std::string* TrackSearcherDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackSearcherDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackSearcherDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.album)
}

// uint32 duration = 8 [(.gogo.xml) = {
void TrackSearcherDocument::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 TrackSearcherDocument::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.duration)
  return duration_;
}
void TrackSearcherDocument::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.duration)
}

// uint64 shares = 9 [(.gogo.xml) = {
void TrackSearcherDocument::clear_shares() {
  shares_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TrackSearcherDocument::shares() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.shares)
  return shares_;
}
void TrackSearcherDocument::set_shares(::google::protobuf::uint64 value) {
  
  shares_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.shares)
}

// uint64 listen = 10 [(.gogo.xml) = {
void TrackSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TrackSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.listen)
  return listen_;
}
void TrackSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.listen)
}

// uint64 listen_month = 11 [(.gogo.xml) = {
void TrackSearcherDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TrackSearcherDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.listen_month)
  return listen_month_;
}
void TrackSearcherDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.listen_month)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrackResponse_Result::kNumberFieldNumber;
const int VkTrackResponse_Result::kAudioIdFieldNumber;
const int VkTrackResponse_Result::kOwnerIdFieldNumber;
const int VkTrackResponse_Result::kArtistFieldNumber;
const int VkTrackResponse_Result::kTrackFieldNumber;
const int VkTrackResponse_Result::kSubtitleFieldNumber;
const int VkTrackResponse_Result::kIsOfficialFieldNumber;
const int VkTrackResponse_Result::kListenFieldNumber;
const int VkTrackResponse_Result::kListenMonthFieldNumber;
const int VkTrackResponse_Result::kListenWeekFieldNumber;
const int VkTrackResponse_Result::kIdfRankFieldNumber;
const int VkTrackResponse_Result::kSqModelRankFieldNumber;
const int VkTrackResponse_Result::kMaxArtistSubsequenceFieldNumber;
const int VkTrackResponse_Result::kMaxTrackSubsequenceFieldNumber;
const int VkTrackResponse_Result::kNumArtistMarkedFieldNumber;
const int VkTrackResponse_Result::kNumTrackMarkedFieldNumber;
const int VkTrackResponse_Result::kNumArtistEntriesFieldNumber;
const int VkTrackResponse_Result::kNumTrackEntriesFieldNumber;
const int VkTrackResponse_Result::kArtistWordsCountFieldNumber;
const int VkTrackResponse_Result::kTrackWordsCountFieldNumber;
const int VkTrackResponse_Result::kQueryWordsCountFieldNumber;
const int VkTrackResponse_Result::kAlternativeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrackResponse_Result::VkTrackResponse_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkTrackResponse.Result)
}
VkTrackResponse_Result::VkTrackResponse_Result(const VkTrackResponse_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternative_ids_(from.alternative_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subtitle().size() > 0) {
    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  ::memcpy(&audio_id_, &from.audio_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_words_count_) -
    reinterpret_cast<char*>(&audio_id_)) + sizeof(query_words_count_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkTrackResponse.Result)
}

void VkTrackResponse_Result::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_words_count_) -
      reinterpret_cast<char*>(&audio_id_)) + sizeof(query_words_count_));
  _cached_size_ = 0;
}

VkTrackResponse_Result::~VkTrackResponse_Result() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkTrackResponse.Result)
  SharedDtor();
}

void VkTrackResponse_Result::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkTrackResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrackResponse_Result::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrackResponse_Result& VkTrackResponse_Result::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrackResponse_Result* VkTrackResponse_Result::New(::google::protobuf::Arena* arena) const {
  VkTrackResponse_Result* n = new VkTrackResponse_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrackResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkTrackResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_ids_.Clear();
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_words_count_) -
      reinterpret_cast<char*>(&audio_id_)) + sizeof(query_words_count_));
  _internal_metadata_.Clear();
}

bool VkTrackResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkTrackResponse.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 audio_id = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &audio_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 owner_id = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Result.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Result.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subtitle = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subtitle().data(), static_cast<int>(this->subtitle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Result.subtitle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_official = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_month = 9 [(.gogo.json) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_week = 10 [(.gogo.json) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double idf_rank = 11 [(.gogo.json) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idf_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_artist_subsequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_track_subsequence = 13 [(.gogo.json) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_track_subsequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_artist_marked = 14 [(.gogo.json) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_artist_marked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_track_marked = 15 [(.gogo.json) = {
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_track_marked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alternative_ids = 16 [(.gogo.json) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternative_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternative_ids(this->alternative_ids_size() - 1).data(),
            static_cast<int>(this->alternative_ids(this->alternative_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Result.alternative_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_artist_entries = 17 [(.gogo.json) = {
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_artist_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_track_entries = 18 [(.gogo.json) = {
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_track_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 artist_words_count = 19 [(.gogo.json) = {
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &artist_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 track_words_count = 20 [(.gogo.json) = {
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &track_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 query_words_count = 21 [(.gogo.json) = {
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sq_model_rank = 22 [(.gogo.json) = {
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sq_model_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkTrackResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkTrackResponse.Result)
  return false;
#undef DO_
}

void VkTrackResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkTrackResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // int64 audio_id = 2 [(.gogo.json) = {
  if (this->audio_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->audio_id(), output);
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->owner_id(), output);
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->artist(), output);
  }

  // string track = 5 [(.gogo.json) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->track(), output);
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.subtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subtitle(), output);
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_official(), output);
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->listen(), output);
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->listen_month(), output);
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->listen_week(), output);
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->idf_rank(), output);
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_artist_subsequence(), output);
  }

  // uint32 max_track_subsequence = 13 [(.gogo.json) = {
  if (this->max_track_subsequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_track_subsequence(), output);
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_artist_marked(), output);
  }

  // uint32 num_track_marked = 15 [(.gogo.json) = {
  if (this->num_track_marked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->num_track_marked(), output);
  }

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_ids(i).data(), static_cast<int>(this->alternative_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.alternative_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->alternative_ids(i), output);
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->num_artist_entries(), output);
  }

  // uint32 num_track_entries = 18 [(.gogo.json) = {
  if (this->num_track_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->num_track_entries(), output);
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->artist_words_count(), output);
  }

  // uint32 track_words_count = 20 [(.gogo.json) = {
  if (this->track_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->track_words_count(), output);
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->query_words_count(), output);
  }

  // double sq_model_rank = 22 [(.gogo.json) = {
  if (this->sq_model_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->sq_model_rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkTrackResponse.Result)
}

::google::protobuf::uint8* VkTrackResponse_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkTrackResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // int64 audio_id = 2 [(.gogo.json) = {
  if (this->audio_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->audio_id(), target);
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->owner_id(), target);
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artist(), target);
  }

  // string track = 5 [(.gogo.json) = {
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->track(), target);
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.subtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subtitle(), target);
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_official(), target);
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->listen(), target);
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->listen_month(), target);
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->listen_week(), target);
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->idf_rank(), target);
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_artist_subsequence(), target);
  }

  // uint32 max_track_subsequence = 13 [(.gogo.json) = {
  if (this->max_track_subsequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_track_subsequence(), target);
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_artist_marked(), target);
  }

  // uint32 num_track_marked = 15 [(.gogo.json) = {
  if (this->num_track_marked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->num_track_marked(), target);
  }

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_ids(i).data(), static_cast<int>(this->alternative_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Result.alternative_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->alternative_ids(i), target);
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->num_artist_entries(), target);
  }

  // uint32 num_track_entries = 18 [(.gogo.json) = {
  if (this->num_track_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->num_track_entries(), target);
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->artist_words_count(), target);
  }

  // uint32 track_words_count = 20 [(.gogo.json) = {
  if (this->track_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->track_words_count(), target);
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->query_words_count(), target);
  }

  // double sq_model_rank = 22 [(.gogo.json) = {
  if (this->sq_model_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->sq_model_rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkTrackResponse.Result)
  return target;
}

size_t VkTrackResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkTrackResponse.Result)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string alternative_ids = 16 [(.gogo.json) = {
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->alternative_ids_size());
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternative_ids(i));
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string track = 5 [(.gogo.json) = {
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subtitle());
  }

  // int64 audio_id = 2 [(.gogo.json) = {
  if (this->audio_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->audio_id());
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    total_size += 1 + 1;
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_month());
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_week());
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    total_size += 1 + 8;
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_artist_subsequence());
  }

  // uint32 max_track_subsequence = 13 [(.gogo.json) = {
  if (this->max_track_subsequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_track_subsequence());
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_artist_marked());
  }

  // uint32 num_track_marked = 15 [(.gogo.json) = {
  if (this->num_track_marked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_track_marked());
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_artist_entries());
  }

  // uint32 num_track_entries = 18 [(.gogo.json) = {
  if (this->num_track_entries() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_track_entries());
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->artist_words_count());
  }

  // uint32 track_words_count = 20 [(.gogo.json) = {
  if (this->track_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->track_words_count());
  }

  // double sq_model_rank = 22 [(.gogo.json) = {
  if (this->sq_model_rank() != 0) {
    total_size += 2 + 8;
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->query_words_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrackResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkTrackResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrackResponse_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrackResponse_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkTrackResponse.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkTrackResponse.Result)
    MergeFrom(*source);
  }
}

void VkTrackResponse_Result::MergeFrom(const VkTrackResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkTrackResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_ids_.MergeFrom(from.alternative_ids_);
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.subtitle().size() > 0) {

    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  if (from.audio_id() != 0) {
    set_audio_id(from.audio_id());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.is_official() != 0) {
    set_is_official(from.is_official());
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.listen_month() != 0) {
    set_listen_month(from.listen_month());
  }
  if (from.listen_week() != 0) {
    set_listen_week(from.listen_week());
  }
  if (from.idf_rank() != 0) {
    set_idf_rank(from.idf_rank());
  }
  if (from.max_artist_subsequence() != 0) {
    set_max_artist_subsequence(from.max_artist_subsequence());
  }
  if (from.max_track_subsequence() != 0) {
    set_max_track_subsequence(from.max_track_subsequence());
  }
  if (from.num_artist_marked() != 0) {
    set_num_artist_marked(from.num_artist_marked());
  }
  if (from.num_track_marked() != 0) {
    set_num_track_marked(from.num_track_marked());
  }
  if (from.num_artist_entries() != 0) {
    set_num_artist_entries(from.num_artist_entries());
  }
  if (from.num_track_entries() != 0) {
    set_num_track_entries(from.num_track_entries());
  }
  if (from.artist_words_count() != 0) {
    set_artist_words_count(from.artist_words_count());
  }
  if (from.track_words_count() != 0) {
    set_track_words_count(from.track_words_count());
  }
  if (from.sq_model_rank() != 0) {
    set_sq_model_rank(from.sq_model_rank());
  }
  if (from.query_words_count() != 0) {
    set_query_words_count(from.query_words_count());
  }
}

void VkTrackResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkTrackResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrackResponse_Result::CopyFrom(const VkTrackResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkTrackResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrackResponse_Result::IsInitialized() const {
  return true;
}

void VkTrackResponse_Result::Swap(VkTrackResponse_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrackResponse_Result::InternalSwap(VkTrackResponse_Result* other) {
  using std::swap;
  alternative_ids_.InternalSwap(&other->alternative_ids_);
  artist_.Swap(&other->artist_);
  track_.Swap(&other->track_);
  subtitle_.Swap(&other->subtitle_);
  swap(audio_id_, other->audio_id_);
  swap(owner_id_, other->owner_id_);
  swap(number_, other->number_);
  swap(is_official_, other->is_official_);
  swap(listen_, other->listen_);
  swap(listen_month_, other->listen_month_);
  swap(listen_week_, other->listen_week_);
  swap(idf_rank_, other->idf_rank_);
  swap(max_artist_subsequence_, other->max_artist_subsequence_);
  swap(max_track_subsequence_, other->max_track_subsequence_);
  swap(num_artist_marked_, other->num_artist_marked_);
  swap(num_track_marked_, other->num_track_marked_);
  swap(num_artist_entries_, other->num_artist_entries_);
  swap(num_track_entries_, other->num_track_entries_);
  swap(artist_words_count_, other->artist_words_count_);
  swap(track_words_count_, other->track_words_count_);
  swap(sq_model_rank_, other->sq_model_rank_);
  swap(query_words_count_, other->query_words_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrackResponse_Result::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrackResponse_Result

// uint32 number = 1 [(.gogo.json) = {
void VkTrackResponse_Result::clear_number() {
  number_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::number() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.number)
  return number_;
}
void VkTrackResponse_Result::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.number)
}

// int64 audio_id = 2 [(.gogo.json) = {
void VkTrackResponse_Result::clear_audio_id() {
  audio_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VkTrackResponse_Result::audio_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.audio_id)
  return audio_id_;
}
void VkTrackResponse_Result::set_audio_id(::google::protobuf::int64 value) {
  
  audio_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.audio_id)
}

// int64 owner_id = 3 [(.gogo.json) = {
void VkTrackResponse_Result::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VkTrackResponse_Result::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.owner_id)
  return owner_id_;
}
void VkTrackResponse_Result::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.owner_id)
}

// string artist = 4 [(.gogo.json) = {
void VkTrackResponse_Result::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Result::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.artist)
  return artist_.GetNoArena();
}
void VkTrackResponse_Result::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.artist)
}
#if LANG_CXX11
void VkTrackResponse_Result::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.artist)
}
#endif
void VkTrackResponse_Result::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.artist)
}
void VkTrackResponse_Result::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.artist)
}
::std::string* VkTrackResponse_Result::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Result::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Result::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.artist)
}

// string track = 5 [(.gogo.json) = {
void VkTrackResponse_Result::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Result::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.track)
  return track_.GetNoArena();
}
void VkTrackResponse_Result::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.track)
}
#if LANG_CXX11
void VkTrackResponse_Result::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.track)
}
#endif
void VkTrackResponse_Result::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.track)
}
void VkTrackResponse_Result::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.track)
}
::std::string* VkTrackResponse_Result::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Result::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Result::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.track)
}

// string subtitle = 6 [(.gogo.json) = {
void VkTrackResponse_Result::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Result::subtitle() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.subtitle)
  return subtitle_.GetNoArena();
}
void VkTrackResponse_Result::set_subtitle(const ::std::string& value) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.subtitle)
}
#if LANG_CXX11
void VkTrackResponse_Result::set_subtitle(::std::string&& value) {
  
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.subtitle)
}
#endif
void VkTrackResponse_Result::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.subtitle)
}
void VkTrackResponse_Result::set_subtitle(const char* value, size_t size) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.subtitle)
}
::std::string* VkTrackResponse_Result::mutable_subtitle() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Result::release_subtitle() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.subtitle)
  
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Result::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    
  } else {
    
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.subtitle)
}

// bool is_official = 7 [(.gogo.json) = {
void VkTrackResponse_Result::clear_is_official() {
  is_official_ = false;
}
bool VkTrackResponse_Result::is_official() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.is_official)
  return is_official_;
}
void VkTrackResponse_Result::set_is_official(bool value) {
  
  is_official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.is_official)
}

// uint64 listen = 8 [(.gogo.json) = {
void VkTrackResponse_Result::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkTrackResponse_Result::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen)
  return listen_;
}
void VkTrackResponse_Result::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen)
}

// uint64 listen_month = 9 [(.gogo.json) = {
void VkTrackResponse_Result::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkTrackResponse_Result::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen_month)
  return listen_month_;
}
void VkTrackResponse_Result::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen_month)
}

// uint64 listen_week = 10 [(.gogo.json) = {
void VkTrackResponse_Result::clear_listen_week() {
  listen_week_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkTrackResponse_Result::listen_week() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen_week)
  return listen_week_;
}
void VkTrackResponse_Result::set_listen_week(::google::protobuf::uint64 value) {
  
  listen_week_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen_week)
}

// double idf_rank = 11 [(.gogo.json) = {
void VkTrackResponse_Result::clear_idf_rank() {
  idf_rank_ = 0;
}
double VkTrackResponse_Result::idf_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.idf_rank)
  return idf_rank_;
}
void VkTrackResponse_Result::set_idf_rank(double value) {
  
  idf_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.idf_rank)
}

// double sq_model_rank = 22 [(.gogo.json) = {
void VkTrackResponse_Result::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
double VkTrackResponse_Result::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.sq_model_rank)
  return sq_model_rank_;
}
void VkTrackResponse_Result::set_sq_model_rank(double value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.sq_model_rank)
}

// uint32 max_artist_subsequence = 12 [(.gogo.json) = {
void VkTrackResponse_Result::clear_max_artist_subsequence() {
  max_artist_subsequence_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::max_artist_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.max_artist_subsequence)
  return max_artist_subsequence_;
}
void VkTrackResponse_Result::set_max_artist_subsequence(::google::protobuf::uint32 value) {
  
  max_artist_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.max_artist_subsequence)
}

// uint32 max_track_subsequence = 13 [(.gogo.json) = {
void VkTrackResponse_Result::clear_max_track_subsequence() {
  max_track_subsequence_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::max_track_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.max_track_subsequence)
  return max_track_subsequence_;
}
void VkTrackResponse_Result::set_max_track_subsequence(::google::protobuf::uint32 value) {
  
  max_track_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.max_track_subsequence)
}

// uint32 num_artist_marked = 14 [(.gogo.json) = {
void VkTrackResponse_Result::clear_num_artist_marked() {
  num_artist_marked_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::num_artist_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_artist_marked)
  return num_artist_marked_;
}
void VkTrackResponse_Result::set_num_artist_marked(::google::protobuf::uint32 value) {
  
  num_artist_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_artist_marked)
}

// uint32 num_track_marked = 15 [(.gogo.json) = {
void VkTrackResponse_Result::clear_num_track_marked() {
  num_track_marked_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::num_track_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_track_marked)
  return num_track_marked_;
}
void VkTrackResponse_Result::set_num_track_marked(::google::protobuf::uint32 value) {
  
  num_track_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_track_marked)
}

// uint32 num_artist_entries = 17 [(.gogo.json) = {
void VkTrackResponse_Result::clear_num_artist_entries() {
  num_artist_entries_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::num_artist_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_artist_entries)
  return num_artist_entries_;
}
void VkTrackResponse_Result::set_num_artist_entries(::google::protobuf::uint32 value) {
  
  num_artist_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_artist_entries)
}

// uint32 num_track_entries = 18 [(.gogo.json) = {
void VkTrackResponse_Result::clear_num_track_entries() {
  num_track_entries_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::num_track_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_track_entries)
  return num_track_entries_;
}
void VkTrackResponse_Result::set_num_track_entries(::google::protobuf::uint32 value) {
  
  num_track_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_track_entries)
}

// uint32 artist_words_count = 19 [(.gogo.json) = {
void VkTrackResponse_Result::clear_artist_words_count() {
  artist_words_count_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::artist_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.artist_words_count)
  return artist_words_count_;
}
void VkTrackResponse_Result::set_artist_words_count(::google::protobuf::uint32 value) {
  
  artist_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.artist_words_count)
}

// uint32 track_words_count = 20 [(.gogo.json) = {
void VkTrackResponse_Result::clear_track_words_count() {
  track_words_count_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::track_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.track_words_count)
  return track_words_count_;
}
void VkTrackResponse_Result::set_track_words_count(::google::protobuf::uint32 value) {
  
  track_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.track_words_count)
}

// uint32 query_words_count = 21 [(.gogo.json) = {
void VkTrackResponse_Result::clear_query_words_count() {
  query_words_count_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Result::query_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.query_words_count)
  return query_words_count_;
}
void VkTrackResponse_Result::set_query_words_count(::google::protobuf::uint32 value) {
  
  query_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.query_words_count)
}

// repeated string alternative_ids = 16 [(.gogo.json) = {
int VkTrackResponse_Result::alternative_ids_size() const {
  return alternative_ids_.size();
}
void VkTrackResponse_Result::clear_alternative_ids() {
  alternative_ids_.Clear();
}
const ::std::string& VkTrackResponse_Result::alternative_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Get(index);
}
::std::string* VkTrackResponse_Result::mutable_alternative_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Mutable(index);
}
void VkTrackResponse_Result::set_alternative_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkTrackResponse_Result::set_alternative_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VkTrackResponse_Result::set_alternative_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
void VkTrackResponse_Result::set_alternative_ids(int index, const char* value, size_t size) {
  alternative_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
::std::string* VkTrackResponse_Result::add_alternative_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Add();
}
void VkTrackResponse_Result::add_alternative_ids(const ::std::string& value) {
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
#if LANG_CXX11
void VkTrackResponse_Result::add_alternative_ids(::std::string&& value) {
  alternative_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
#endif
void VkTrackResponse_Result::add_alternative_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
void VkTrackResponse_Result::add_alternative_ids(const char* value, size_t size) {
  alternative_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkTrackResponse_Result::alternative_ids() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkTrackResponse_Result::mutable_alternative_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return &alternative_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrackResponse_Serp::kResultsFieldNumber;
const int VkTrackResponse_Serp::kBackendResponseFieldNumber;
const int VkTrackResponse_Serp::kResponseClassFieldNumber;
const int VkTrackResponse_Serp::kAllCountFieldNumber;
const int VkTrackResponse_Serp::kOfficialCountFieldNumber;
const int VkTrackResponse_Serp::kQddbSessionsNumLog2FieldNumber;
const int VkTrackResponse_Serp::kSmReplyQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrackResponse_Serp::VkTrackResponse_Serp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkTrackResponse.Serp)
}
VkTrackResponse_Serp::VkTrackResponse_Serp(const VkTrackResponse_Serp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sm_reply_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sm_reply_quality().size() > 0) {
    sm_reply_quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_reply_quality_);
  }
  response_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_class().size() > 0) {
    response_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_class_);
  }
  backend_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.backend_response().size() > 0) {
    backend_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backend_response_);
  }
  ::memcpy(&all_count_, &from.all_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
    reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkTrackResponse.Serp)
}

void VkTrackResponse_Serp::SharedCtor() {
  sm_reply_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backend_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
      reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  _cached_size_ = 0;
}

VkTrackResponse_Serp::~VkTrackResponse_Serp() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkTrackResponse.Serp)
  SharedDtor();
}

void VkTrackResponse_Serp::SharedDtor() {
  sm_reply_quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backend_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkTrackResponse_Serp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrackResponse_Serp::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrackResponse_Serp& VkTrackResponse_Serp::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrackResponse_Serp* VkTrackResponse_Serp::New(::google::protobuf::Arena* arena) const {
  VkTrackResponse_Serp* n = new VkTrackResponse_Serp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrackResponse_Serp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkTrackResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backend_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
      reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  _internal_metadata_.Clear();
}

bool VkTrackResponse_Serp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkTrackResponse.Serp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 all_count = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 official_count = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qddb_sessions_num_log2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sm_reply_quality = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sm_reply_quality()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Serp.sm_reply_quality"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_class = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_class()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_class().data(), static_cast<int>(this->response_class().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Serp.response_class"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string backend_response = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backend_response()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backend_response().data(), static_cast<int>(this->backend_response().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.Serp.backend_response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkTrackResponse.Serp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkTrackResponse.Serp)
  return false;
#undef DO_
}

void VkTrackResponse_Serp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkTrackResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->all_count(), output);
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->official_count(), output);
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qddb_sessions_num_log2(), output);
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.sm_reply_quality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sm_reply_quality(), output);
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_class().data(), static_cast<int>(this->response_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.response_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->response_class(), output);
  }

  // string backend_response = 7 [(.gogo.json) = {
  if (this->backend_response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backend_response().data(), static_cast<int>(this->backend_response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.backend_response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->backend_response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkTrackResponse.Serp)
}

::google::protobuf::uint8* VkTrackResponse_Serp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkTrackResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->all_count(), target);
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->official_count(), target);
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qddb_sessions_num_log2(), target);
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.sm_reply_quality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sm_reply_quality(), target);
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_class().data(), static_cast<int>(this->response_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.response_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->response_class(), target);
  }

  // string backend_response = 7 [(.gogo.json) = {
  if (this->backend_response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backend_response().data(), static_cast<int>(this->backend_response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.Serp.backend_response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->backend_response(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkTrackResponse.Serp)
  return target;
}

size_t VkTrackResponse_Serp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkTrackResponse.Serp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sm_reply_quality());
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_class());
  }

  // string backend_response = 7 [(.gogo.json) = {
  if (this->backend_response().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backend_response());
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->all_count());
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->official_count());
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qddb_sessions_num_log2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrackResponse_Serp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkTrackResponse.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrackResponse_Serp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrackResponse_Serp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkTrackResponse.Serp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkTrackResponse.Serp)
    MergeFrom(*source);
  }
}

void VkTrackResponse_Serp::MergeFrom(const VkTrackResponse_Serp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkTrackResponse.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.sm_reply_quality().size() > 0) {

    sm_reply_quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_reply_quality_);
  }
  if (from.response_class().size() > 0) {

    response_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_class_);
  }
  if (from.backend_response().size() > 0) {

    backend_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backend_response_);
  }
  if (from.all_count() != 0) {
    set_all_count(from.all_count());
  }
  if (from.official_count() != 0) {
    set_official_count(from.official_count());
  }
  if (from.qddb_sessions_num_log2() != 0) {
    set_qddb_sessions_num_log2(from.qddb_sessions_num_log2());
  }
}

void VkTrackResponse_Serp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkTrackResponse.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrackResponse_Serp::CopyFrom(const VkTrackResponse_Serp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkTrackResponse.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrackResponse_Serp::IsInitialized() const {
  return true;
}

void VkTrackResponse_Serp::Swap(VkTrackResponse_Serp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrackResponse_Serp::InternalSwap(VkTrackResponse_Serp* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  sm_reply_quality_.Swap(&other->sm_reply_quality_);
  response_class_.Swap(&other->response_class_);
  backend_response_.Swap(&other->backend_response_);
  swap(all_count_, other->all_count_);
  swap(official_count_, other->official_count_);
  swap(qddb_sessions_num_log2_, other->qddb_sessions_num_log2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrackResponse_Serp::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrackResponse_Serp

// repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
int VkTrackResponse_Serp::results_size() const {
  return results_.size();
}
void VkTrackResponse_Serp::clear_results() {
  results_.Clear();
}
const ::pb::srch::music::VkTrackResponse_Result& VkTrackResponse_Serp::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Get(index);
}
::pb::srch::music::VkTrackResponse_Result* VkTrackResponse_Serp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Mutable(index);
}
::pb::srch::music::VkTrackResponse_Result* VkTrackResponse_Serp::add_results() {
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >*
VkTrackResponse_Serp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkTrackResponse.Serp.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >&
VkTrackResponse_Serp::results() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkTrackResponse.Serp.results)
  return results_;
}

// string backend_response = 7 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_backend_response() {
  backend_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Serp::backend_response() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.backend_response)
  return backend_response_.GetNoArena();
}
void VkTrackResponse_Serp::set_backend_response(const ::std::string& value) {
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
#if LANG_CXX11
void VkTrackResponse_Serp::set_backend_response(::std::string&& value) {
  
  backend_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
#endif
void VkTrackResponse_Serp::set_backend_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
void VkTrackResponse_Serp::set_backend_response(const char* value, size_t size) {
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
::std::string* VkTrackResponse_Serp::mutable_backend_response() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.backend_response)
  return backend_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Serp::release_backend_response() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.backend_response)
  
  return backend_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Serp::set_allocated_backend_response(::std::string* backend_response) {
  if (backend_response != NULL) {
    
  } else {
    
  }
  backend_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backend_response);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.backend_response)
}

// string response_class = 6 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_response_class() {
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Serp::response_class() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.response_class)
  return response_class_.GetNoArena();
}
void VkTrackResponse_Serp::set_response_class(const ::std::string& value) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.response_class)
}
#if LANG_CXX11
void VkTrackResponse_Serp::set_response_class(::std::string&& value) {
  
  response_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.response_class)
}
#endif
void VkTrackResponse_Serp::set_response_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.response_class)
}
void VkTrackResponse_Serp::set_response_class(const char* value, size_t size) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.response_class)
}
::std::string* VkTrackResponse_Serp::mutable_response_class() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.response_class)
  return response_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Serp::release_response_class() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.response_class)
  
  return response_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Serp::set_allocated_response_class(::std::string* response_class) {
  if (response_class != NULL) {
    
  } else {
    
  }
  response_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_class);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.response_class)
}

// uint32 all_count = 2 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_all_count() {
  all_count_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Serp::all_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.all_count)
  return all_count_;
}
void VkTrackResponse_Serp::set_all_count(::google::protobuf::uint32 value) {
  
  all_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.all_count)
}

// uint32 official_count = 3 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_official_count() {
  official_count_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Serp::official_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.official_count)
  return official_count_;
}
void VkTrackResponse_Serp::set_official_count(::google::protobuf::uint32 value) {
  
  official_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.official_count)
}

// uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse_Serp::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
void VkTrackResponse_Serp::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.qddb_sessions_num_log2)
}

// string sm_reply_quality = 5 [(.gogo.json) = {
void VkTrackResponse_Serp::clear_sm_reply_quality() {
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse_Serp::sm_reply_quality() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.GetNoArena();
}
void VkTrackResponse_Serp::set_sm_reply_quality(const ::std::string& value) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
#if LANG_CXX11
void VkTrackResponse_Serp::set_sm_reply_quality(::std::string&& value) {
  
  sm_reply_quality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
#endif
void VkTrackResponse_Serp::set_sm_reply_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
void VkTrackResponse_Serp::set_sm_reply_quality(const char* value, size_t size) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
::std::string* VkTrackResponse_Serp::mutable_sm_reply_quality() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse_Serp::release_sm_reply_quality() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  
  return sm_reply_quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse_Serp::set_allocated_sm_reply_quality(::std::string* sm_reply_quality) {
  if (sm_reply_quality != NULL) {
    
  } else {
    
  }
  sm_reply_quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_reply_quality);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkTrackResponse::kQidFieldNumber;
const int VkTrackResponse::kSerpFieldNumber;
const int VkTrackResponse::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkTrackResponse::VkTrackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkTrackResponse)
}
VkTrackResponse::VkTrackResponse(const VkTrackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_serp()) {
    serp_ = new ::pb::srch::music::VkTrackResponse_Serp(*from.serp_);
  } else {
    serp_ = NULL;
  }
  split_ = from.split_;
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkTrackResponse)
}

void VkTrackResponse::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_) -
      reinterpret_cast<char*>(&serp_)) + sizeof(split_));
  _cached_size_ = 0;
}

VkTrackResponse::~VkTrackResponse() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkTrackResponse)
  SharedDtor();
}

void VkTrackResponse::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete serp_;
}

void VkTrackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkTrackResponse::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkTrackResponse& VkTrackResponse::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkTrackResponse* VkTrackResponse::New(::google::protobuf::Arena* arena) const {
  VkTrackResponse* n = new VkTrackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkTrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkTrackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) {
    delete serp_;
  }
  serp_ = NULL;
  split_ = 0u;
  _internal_metadata_.Clear();
}

bool VkTrackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkTrackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string qid = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkTrackResponse.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 split = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkTrackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkTrackResponse)
  return false;
#undef DO_
}

void VkTrackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkTrackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->serp_, output);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->split(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkTrackResponse)
}

::google::protobuf::uint8* VkTrackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkTrackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkTrackResponse.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->serp_, deterministic, target);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->split(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkTrackResponse)
  return target;
}

size_t VkTrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkTrackResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serp_);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->split());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkTrackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkTrackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VkTrackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkTrackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkTrackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkTrackResponse)
    MergeFrom(*source);
  }
}

void VkTrackResponse::MergeFrom(const VkTrackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkTrackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_serp()) {
    mutable_serp()->::pb::srch::music::VkTrackResponse_Serp::MergeFrom(from.serp());
  }
  if (from.split() != 0) {
    set_split(from.split());
  }
}

void VkTrackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkTrackResponse::CopyFrom(const VkTrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkTrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkTrackResponse::IsInitialized() const {
  return true;
}

void VkTrackResponse::Swap(VkTrackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkTrackResponse::InternalSwap(VkTrackResponse* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  swap(serp_, other->serp_);
  swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkTrackResponse::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkTrackResponse

// string qid = 1 [(.gogo.json) = {
void VkTrackResponse::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkTrackResponse::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.qid)
  return qid_.GetNoArena();
}
void VkTrackResponse::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.qid)
}
#if LANG_CXX11
void VkTrackResponse::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.qid)
}
#endif
void VkTrackResponse::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.qid)
}
void VkTrackResponse::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.qid)
}
::std::string* VkTrackResponse::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkTrackResponse::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkTrackResponse::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.qid)
}

// .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
bool VkTrackResponse::has_serp() const {
  return this != internal_default_instance() && serp_ != NULL;
}
void VkTrackResponse::clear_serp() {
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) delete serp_;
  serp_ = NULL;
}
const ::pb::srch::music::VkTrackResponse_Serp& VkTrackResponse::serp() const {
  const ::pb::srch::music::VkTrackResponse_Serp* p = serp_;
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.serp)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::VkTrackResponse_Serp*>(
      &::pb::srch::music::_VkTrackResponse_Serp_default_instance_);
}
::pb::srch::music::VkTrackResponse_Serp* VkTrackResponse::mutable_serp() {
  
  if (serp_ == NULL) {
    serp_ = new ::pb::srch::music::VkTrackResponse_Serp;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.serp)
  return serp_;
}
::pb::srch::music::VkTrackResponse_Serp* VkTrackResponse::release_serp() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.serp)
  
  ::pb::srch::music::VkTrackResponse_Serp* temp = serp_;
  serp_ = NULL;
  return temp;
}
void VkTrackResponse::set_allocated_serp(::pb::srch::music::VkTrackResponse_Serp* serp) {
  delete serp_;
  serp_ = serp;
  if (serp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.serp)
}

// uint32 split = 3 [(.gogo.json) = {
void VkTrackResponse::clear_split() {
  split_ = 0u;
}
::google::protobuf::uint32 VkTrackResponse::split() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.split)
  return split_;
}
void VkTrackResponse::set_split(::google::protobuf::uint32 value) {
  
  split_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkAlbumResponse_Result::kNumberFieldNumber;
const int VkAlbumResponse_Result::kAlbumIdFieldNumber;
const int VkAlbumResponse_Result::kOwnerIdFieldNumber;
const int VkAlbumResponse_Result::kArtistFieldNumber;
const int VkAlbumResponse_Result::kAlbumFieldNumber;
const int VkAlbumResponse_Result::kSubtitleFieldNumber;
const int VkAlbumResponse_Result::kIsOfficialFieldNumber;
const int VkAlbumResponse_Result::kListenFieldNumber;
const int VkAlbumResponse_Result::kListenMonthFieldNumber;
const int VkAlbumResponse_Result::kListenWeekFieldNumber;
const int VkAlbumResponse_Result::kIdfRankFieldNumber;
const int VkAlbumResponse_Result::kMaxArtistSubsequenceFieldNumber;
const int VkAlbumResponse_Result::kMaxAlbumSubsequenceFieldNumber;
const int VkAlbumResponse_Result::kNumArtistMarkedFieldNumber;
const int VkAlbumResponse_Result::kNumAlbumMarkedFieldNumber;
const int VkAlbumResponse_Result::kNumArtistEntriesFieldNumber;
const int VkAlbumResponse_Result::kNumAlbumEntriesFieldNumber;
const int VkAlbumResponse_Result::kArtistWordsCountFieldNumber;
const int VkAlbumResponse_Result::kAlbumWordsCountFieldNumber;
const int VkAlbumResponse_Result::kQueryWordsCountFieldNumber;
const int VkAlbumResponse_Result::kAlternativeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkAlbumResponse_Result::VkAlbumResponse_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkAlbumResponse.Result)
}
VkAlbumResponse_Result::VkAlbumResponse_Result(const VkAlbumResponse_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternative_ids_(from.alternative_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subtitle().size() > 0) {
    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  ::memcpy(&album_id_, &from.album_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_words_count_) -
    reinterpret_cast<char*>(&album_id_)) + sizeof(query_words_count_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkAlbumResponse.Result)
}

void VkAlbumResponse_Result::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&album_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_words_count_) -
      reinterpret_cast<char*>(&album_id_)) + sizeof(query_words_count_));
  _cached_size_ = 0;
}

VkAlbumResponse_Result::~VkAlbumResponse_Result() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkAlbumResponse.Result)
  SharedDtor();
}

void VkAlbumResponse_Result::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkAlbumResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkAlbumResponse_Result::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkAlbumResponse_Result& VkAlbumResponse_Result::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkAlbumResponse_Result* VkAlbumResponse_Result::New(::google::protobuf::Arena* arena) const {
  VkAlbumResponse_Result* n = new VkAlbumResponse_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkAlbumResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkAlbumResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_ids_.Clear();
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&album_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_words_count_) -
      reinterpret_cast<char*>(&album_id_)) + sizeof(query_words_count_));
  _internal_metadata_.Clear();
}

bool VkAlbumResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkAlbumResponse.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 album_id = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &album_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 owner_id = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Result.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Result.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subtitle = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subtitle().data(), static_cast<int>(this->subtitle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Result.subtitle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_official = 7 [(.gogo.json) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 8 [(.gogo.json) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_month = 9 [(.gogo.json) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_week = 10 [(.gogo.json) = {
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double idf_rank = 11 [(.gogo.json) = {
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idf_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_artist_subsequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_album_subsequence = 13 [(.gogo.json) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_album_subsequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_artist_marked = 14 [(.gogo.json) = {
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_artist_marked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_album_marked = 15 [(.gogo.json) = {
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_album_marked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alternative_ids = 16 [(.gogo.json) = {
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternative_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternative_ids(this->alternative_ids_size() - 1).data(),
            static_cast<int>(this->alternative_ids(this->alternative_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Result.alternative_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_artist_entries = 17 [(.gogo.json) = {
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_artist_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_album_entries = 18 [(.gogo.json) = {
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_album_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 artist_words_count = 19 [(.gogo.json) = {
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &artist_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 album_words_count = 20 [(.gogo.json) = {
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &album_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 query_words_count = 21 [(.gogo.json) = {
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_words_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkAlbumResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkAlbumResponse.Result)
  return false;
#undef DO_
}

void VkAlbumResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkAlbumResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // int64 album_id = 2 [(.gogo.json) = {
  if (this->album_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->album_id(), output);
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->owner_id(), output);
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->artist(), output);
  }

  // string album = 5 [(.gogo.json) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->album(), output);
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.subtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subtitle(), output);
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_official(), output);
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->listen(), output);
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->listen_month(), output);
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->listen_week(), output);
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->idf_rank(), output);
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_artist_subsequence(), output);
  }

  // uint32 max_album_subsequence = 13 [(.gogo.json) = {
  if (this->max_album_subsequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_album_subsequence(), output);
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_artist_marked(), output);
  }

  // uint32 num_album_marked = 15 [(.gogo.json) = {
  if (this->num_album_marked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->num_album_marked(), output);
  }

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_ids(i).data(), static_cast<int>(this->alternative_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.alternative_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->alternative_ids(i), output);
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->num_artist_entries(), output);
  }

  // uint32 num_album_entries = 18 [(.gogo.json) = {
  if (this->num_album_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->num_album_entries(), output);
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->artist_words_count(), output);
  }

  // uint32 album_words_count = 20 [(.gogo.json) = {
  if (this->album_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->album_words_count(), output);
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->query_words_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkAlbumResponse.Result)
}

::google::protobuf::uint8* VkAlbumResponse_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkAlbumResponse.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // int64 album_id = 2 [(.gogo.json) = {
  if (this->album_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->album_id(), target);
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->owner_id(), target);
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artist(), target);
  }

  // string album = 5 [(.gogo.json) = {
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->album(), target);
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subtitle().data(), static_cast<int>(this->subtitle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.subtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subtitle(), target);
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_official(), target);
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->listen(), target);
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->listen_month(), target);
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->listen_week(), target);
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->idf_rank(), target);
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_artist_subsequence(), target);
  }

  // uint32 max_album_subsequence = 13 [(.gogo.json) = {
  if (this->max_album_subsequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_album_subsequence(), target);
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_artist_marked(), target);
  }

  // uint32 num_album_marked = 15 [(.gogo.json) = {
  if (this->num_album_marked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->num_album_marked(), target);
  }

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternative_ids(i).data(), static_cast<int>(this->alternative_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Result.alternative_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->alternative_ids(i), target);
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->num_artist_entries(), target);
  }

  // uint32 num_album_entries = 18 [(.gogo.json) = {
  if (this->num_album_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->num_album_entries(), target);
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->artist_words_count(), target);
  }

  // uint32 album_words_count = 20 [(.gogo.json) = {
  if (this->album_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->album_words_count(), target);
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->query_words_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkAlbumResponse.Result)
  return target;
}

size_t VkAlbumResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkAlbumResponse.Result)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string alternative_ids = 16 [(.gogo.json) = {
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->alternative_ids_size());
  for (int i = 0, n = this->alternative_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternative_ids(i));
  }

  // string artist = 4 [(.gogo.json) = {
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string album = 5 [(.gogo.json) = {
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // string subtitle = 6 [(.gogo.json) = {
  if (this->subtitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subtitle());
  }

  // int64 album_id = 2 [(.gogo.json) = {
  if (this->album_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->album_id());
  }

  // int64 owner_id = 3 [(.gogo.json) = {
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  // uint32 number = 1 [(.gogo.json) = {
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  // bool is_official = 7 [(.gogo.json) = {
  if (this->is_official() != 0) {
    total_size += 1 + 1;
  }

  // uint64 listen = 8 [(.gogo.json) = {
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 listen_month = 9 [(.gogo.json) = {
  if (this->listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_month());
  }

  // uint64 listen_week = 10 [(.gogo.json) = {
  if (this->listen_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_week());
  }

  // double idf_rank = 11 [(.gogo.json) = {
  if (this->idf_rank() != 0) {
    total_size += 1 + 8;
  }

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  if (this->max_artist_subsequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_artist_subsequence());
  }

  // uint32 max_album_subsequence = 13 [(.gogo.json) = {
  if (this->max_album_subsequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_album_subsequence());
  }

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  if (this->num_artist_marked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_artist_marked());
  }

  // uint32 num_album_marked = 15 [(.gogo.json) = {
  if (this->num_album_marked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_album_marked());
  }

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  if (this->num_artist_entries() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_artist_entries());
  }

  // uint32 num_album_entries = 18 [(.gogo.json) = {
  if (this->num_album_entries() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_album_entries());
  }

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  if (this->artist_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->artist_words_count());
  }

  // uint32 album_words_count = 20 [(.gogo.json) = {
  if (this->album_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->album_words_count());
  }

  // uint32 query_words_count = 21 [(.gogo.json) = {
  if (this->query_words_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->query_words_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkAlbumResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkAlbumResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const VkAlbumResponse_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkAlbumResponse_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkAlbumResponse.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkAlbumResponse.Result)
    MergeFrom(*source);
  }
}

void VkAlbumResponse_Result::MergeFrom(const VkAlbumResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkAlbumResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_ids_.MergeFrom(from.alternative_ids_);
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.subtitle().size() > 0) {

    subtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  if (from.album_id() != 0) {
    set_album_id(from.album_id());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.is_official() != 0) {
    set_is_official(from.is_official());
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.listen_month() != 0) {
    set_listen_month(from.listen_month());
  }
  if (from.listen_week() != 0) {
    set_listen_week(from.listen_week());
  }
  if (from.idf_rank() != 0) {
    set_idf_rank(from.idf_rank());
  }
  if (from.max_artist_subsequence() != 0) {
    set_max_artist_subsequence(from.max_artist_subsequence());
  }
  if (from.max_album_subsequence() != 0) {
    set_max_album_subsequence(from.max_album_subsequence());
  }
  if (from.num_artist_marked() != 0) {
    set_num_artist_marked(from.num_artist_marked());
  }
  if (from.num_album_marked() != 0) {
    set_num_album_marked(from.num_album_marked());
  }
  if (from.num_artist_entries() != 0) {
    set_num_artist_entries(from.num_artist_entries());
  }
  if (from.num_album_entries() != 0) {
    set_num_album_entries(from.num_album_entries());
  }
  if (from.artist_words_count() != 0) {
    set_artist_words_count(from.artist_words_count());
  }
  if (from.album_words_count() != 0) {
    set_album_words_count(from.album_words_count());
  }
  if (from.query_words_count() != 0) {
    set_query_words_count(from.query_words_count());
  }
}

void VkAlbumResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkAlbumResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkAlbumResponse_Result::CopyFrom(const VkAlbumResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkAlbumResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkAlbumResponse_Result::IsInitialized() const {
  return true;
}

void VkAlbumResponse_Result::Swap(VkAlbumResponse_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkAlbumResponse_Result::InternalSwap(VkAlbumResponse_Result* other) {
  using std::swap;
  alternative_ids_.InternalSwap(&other->alternative_ids_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  subtitle_.Swap(&other->subtitle_);
  swap(album_id_, other->album_id_);
  swap(owner_id_, other->owner_id_);
  swap(number_, other->number_);
  swap(is_official_, other->is_official_);
  swap(listen_, other->listen_);
  swap(listen_month_, other->listen_month_);
  swap(listen_week_, other->listen_week_);
  swap(idf_rank_, other->idf_rank_);
  swap(max_artist_subsequence_, other->max_artist_subsequence_);
  swap(max_album_subsequence_, other->max_album_subsequence_);
  swap(num_artist_marked_, other->num_artist_marked_);
  swap(num_album_marked_, other->num_album_marked_);
  swap(num_artist_entries_, other->num_artist_entries_);
  swap(num_album_entries_, other->num_album_entries_);
  swap(artist_words_count_, other->artist_words_count_);
  swap(album_words_count_, other->album_words_count_);
  swap(query_words_count_, other->query_words_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkAlbumResponse_Result::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkAlbumResponse_Result

// uint32 number = 1 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_number() {
  number_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::number() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.number)
  return number_;
}
void VkAlbumResponse_Result::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.number)
}

// int64 album_id = 2 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_album_id() {
  album_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VkAlbumResponse_Result::album_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album_id)
  return album_id_;
}
void VkAlbumResponse_Result::set_album_id(::google::protobuf::int64 value) {
  
  album_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album_id)
}

// int64 owner_id = 3 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 VkAlbumResponse_Result::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.owner_id)
  return owner_id_;
}
void VkAlbumResponse_Result::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.owner_id)
}

// string artist = 4 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse_Result::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.artist)
  return artist_.GetNoArena();
}
void VkAlbumResponse_Result::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.artist)
}
#if LANG_CXX11
void VkAlbumResponse_Result::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.artist)
}
#endif
void VkAlbumResponse_Result::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.artist)
}
void VkAlbumResponse_Result::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.artist)
}
::std::string* VkAlbumResponse_Result::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse_Result::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse_Result::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.artist)
}

// string album = 5 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse_Result::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album)
  return album_.GetNoArena();
}
void VkAlbumResponse_Result::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album)
}
#if LANG_CXX11
void VkAlbumResponse_Result::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.album)
}
#endif
void VkAlbumResponse_Result::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.album)
}
void VkAlbumResponse_Result::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.album)
}
::std::string* VkAlbumResponse_Result::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse_Result::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse_Result::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.album)
}

// string subtitle = 6 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse_Result::subtitle() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.subtitle)
  return subtitle_.GetNoArena();
}
void VkAlbumResponse_Result::set_subtitle(const ::std::string& value) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
#if LANG_CXX11
void VkAlbumResponse_Result::set_subtitle(::std::string&& value) {
  
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
#endif
void VkAlbumResponse_Result::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
void VkAlbumResponse_Result::set_subtitle(const char* value, size_t size) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
::std::string* VkAlbumResponse_Result::mutable_subtitle() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse_Result::release_subtitle() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.subtitle)
  
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse_Result::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    
  } else {
    
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.subtitle)
}

// bool is_official = 7 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_is_official() {
  is_official_ = false;
}
bool VkAlbumResponse_Result::is_official() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.is_official)
  return is_official_;
}
void VkAlbumResponse_Result::set_is_official(bool value) {
  
  is_official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.is_official)
}

// uint64 listen = 8 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkAlbumResponse_Result::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen)
  return listen_;
}
void VkAlbumResponse_Result::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen)
}

// uint64 listen_month = 9 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkAlbumResponse_Result::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen_month)
  return listen_month_;
}
void VkAlbumResponse_Result::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen_month)
}

// uint64 listen_week = 10 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_listen_week() {
  listen_week_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VkAlbumResponse_Result::listen_week() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen_week)
  return listen_week_;
}
void VkAlbumResponse_Result::set_listen_week(::google::protobuf::uint64 value) {
  
  listen_week_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen_week)
}

// double idf_rank = 11 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_idf_rank() {
  idf_rank_ = 0;
}
double VkAlbumResponse_Result::idf_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.idf_rank)
  return idf_rank_;
}
void VkAlbumResponse_Result::set_idf_rank(double value) {
  
  idf_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.idf_rank)
}

// uint32 max_artist_subsequence = 12 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_max_artist_subsequence() {
  max_artist_subsequence_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::max_artist_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.max_artist_subsequence)
  return max_artist_subsequence_;
}
void VkAlbumResponse_Result::set_max_artist_subsequence(::google::protobuf::uint32 value) {
  
  max_artist_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.max_artist_subsequence)
}

// uint32 max_album_subsequence = 13 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_max_album_subsequence() {
  max_album_subsequence_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::max_album_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.max_album_subsequence)
  return max_album_subsequence_;
}
void VkAlbumResponse_Result::set_max_album_subsequence(::google::protobuf::uint32 value) {
  
  max_album_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.max_album_subsequence)
}

// uint32 num_artist_marked = 14 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_num_artist_marked() {
  num_artist_marked_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::num_artist_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_artist_marked)
  return num_artist_marked_;
}
void VkAlbumResponse_Result::set_num_artist_marked(::google::protobuf::uint32 value) {
  
  num_artist_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_artist_marked)
}

// uint32 num_album_marked = 15 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_num_album_marked() {
  num_album_marked_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::num_album_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_album_marked)
  return num_album_marked_;
}
void VkAlbumResponse_Result::set_num_album_marked(::google::protobuf::uint32 value) {
  
  num_album_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_album_marked)
}

// uint32 num_artist_entries = 17 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_num_artist_entries() {
  num_artist_entries_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::num_artist_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_artist_entries)
  return num_artist_entries_;
}
void VkAlbumResponse_Result::set_num_artist_entries(::google::protobuf::uint32 value) {
  
  num_artist_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_artist_entries)
}

// uint32 num_album_entries = 18 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_num_album_entries() {
  num_album_entries_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::num_album_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_album_entries)
  return num_album_entries_;
}
void VkAlbumResponse_Result::set_num_album_entries(::google::protobuf::uint32 value) {
  
  num_album_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_album_entries)
}

// uint32 artist_words_count = 19 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_artist_words_count() {
  artist_words_count_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::artist_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.artist_words_count)
  return artist_words_count_;
}
void VkAlbumResponse_Result::set_artist_words_count(::google::protobuf::uint32 value) {
  
  artist_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.artist_words_count)
}

// uint32 album_words_count = 20 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_album_words_count() {
  album_words_count_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::album_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album_words_count)
  return album_words_count_;
}
void VkAlbumResponse_Result::set_album_words_count(::google::protobuf::uint32 value) {
  
  album_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album_words_count)
}

// uint32 query_words_count = 21 [(.gogo.json) = {
void VkAlbumResponse_Result::clear_query_words_count() {
  query_words_count_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Result::query_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.query_words_count)
  return query_words_count_;
}
void VkAlbumResponse_Result::set_query_words_count(::google::protobuf::uint32 value) {
  
  query_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.query_words_count)
}

// repeated string alternative_ids = 16 [(.gogo.json) = {
int VkAlbumResponse_Result::alternative_ids_size() const {
  return alternative_ids_.size();
}
void VkAlbumResponse_Result::clear_alternative_ids() {
  alternative_ids_.Clear();
}
const ::std::string& VkAlbumResponse_Result::alternative_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Get(index);
}
::std::string* VkAlbumResponse_Result::mutable_alternative_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Mutable(index);
}
void VkAlbumResponse_Result::set_alternative_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VkAlbumResponse_Result::set_alternative_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void VkAlbumResponse_Result::set_alternative_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
void VkAlbumResponse_Result::set_alternative_ids(int index, const char* value, size_t size) {
  alternative_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
::std::string* VkAlbumResponse_Result::add_alternative_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Add();
}
void VkAlbumResponse_Result::add_alternative_ids(const ::std::string& value) {
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
#if LANG_CXX11
void VkAlbumResponse_Result::add_alternative_ids(::std::string&& value) {
  alternative_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
#endif
void VkAlbumResponse_Result::add_alternative_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
void VkAlbumResponse_Result::add_alternative_ids(const char* value, size_t size) {
  alternative_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkAlbumResponse_Result::alternative_ids() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VkAlbumResponse_Result::mutable_alternative_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return &alternative_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkAlbumResponse_Serp::kResultsFieldNumber;
const int VkAlbumResponse_Serp::kResponseClassFieldNumber;
const int VkAlbumResponse_Serp::kAllCountFieldNumber;
const int VkAlbumResponse_Serp::kOfficialCountFieldNumber;
const int VkAlbumResponse_Serp::kQddbSessionsNumLog2FieldNumber;
const int VkAlbumResponse_Serp::kSmReplyQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkAlbumResponse_Serp::VkAlbumResponse_Serp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkAlbumResponse.Serp)
}
VkAlbumResponse_Serp::VkAlbumResponse_Serp(const VkAlbumResponse_Serp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sm_reply_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sm_reply_quality().size() > 0) {
    sm_reply_quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_reply_quality_);
  }
  response_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_class().size() > 0) {
    response_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_class_);
  }
  ::memcpy(&all_count_, &from.all_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
    reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkAlbumResponse.Serp)
}

void VkAlbumResponse_Serp::SharedCtor() {
  sm_reply_quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
      reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  _cached_size_ = 0;
}

VkAlbumResponse_Serp::~VkAlbumResponse_Serp() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkAlbumResponse.Serp)
  SharedDtor();
}

void VkAlbumResponse_Serp::SharedDtor() {
  sm_reply_quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VkAlbumResponse_Serp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkAlbumResponse_Serp::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkAlbumResponse_Serp& VkAlbumResponse_Serp::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkAlbumResponse_Serp* VkAlbumResponse_Serp::New(::google::protobuf::Arena* arena) const {
  VkAlbumResponse_Serp* n = new VkAlbumResponse_Serp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkAlbumResponse_Serp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkAlbumResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&all_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qddb_sessions_num_log2_) -
      reinterpret_cast<char*>(&all_count_)) + sizeof(qddb_sessions_num_log2_));
  _internal_metadata_.Clear();
}

bool VkAlbumResponse_Serp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkAlbumResponse.Serp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 all_count = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 official_count = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qddb_sessions_num_log2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sm_reply_quality = 5 [(.gogo.json) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sm_reply_quality()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_class = 6 [(.gogo.json) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_class()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_class().data(), static_cast<int>(this->response_class().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.Serp.response_class"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkAlbumResponse.Serp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkAlbumResponse.Serp)
  return false;
#undef DO_
}

void VkAlbumResponse_Serp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkAlbumResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->all_count(), output);
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->official_count(), output);
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qddb_sessions_num_log2(), output);
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sm_reply_quality(), output);
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_class().data(), static_cast<int>(this->response_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Serp.response_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->response_class(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkAlbumResponse.Serp)
}

::google::protobuf::uint8* VkAlbumResponse_Serp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkAlbumResponse.Serp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->all_count(), target);
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->official_count(), target);
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qddb_sessions_num_log2(), target);
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sm_reply_quality().data(), static_cast<int>(this->sm_reply_quality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sm_reply_quality(), target);
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_class().data(), static_cast<int>(this->response_class().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.Serp.response_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->response_class(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkAlbumResponse.Serp)
  return target;
}

size_t VkAlbumResponse_Serp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkAlbumResponse.Serp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  // string sm_reply_quality = 5 [(.gogo.json) = {
  if (this->sm_reply_quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sm_reply_quality());
  }

  // string response_class = 6 [(.gogo.json) = {
  if (this->response_class().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_class());
  }

  // uint32 all_count = 2 [(.gogo.json) = {
  if (this->all_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->all_count());
  }

  // uint32 official_count = 3 [(.gogo.json) = {
  if (this->official_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->official_count());
  }

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  if (this->qddb_sessions_num_log2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qddb_sessions_num_log2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkAlbumResponse_Serp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkAlbumResponse.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  const VkAlbumResponse_Serp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkAlbumResponse_Serp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkAlbumResponse.Serp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkAlbumResponse.Serp)
    MergeFrom(*source);
  }
}

void VkAlbumResponse_Serp::MergeFrom(const VkAlbumResponse_Serp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkAlbumResponse.Serp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.sm_reply_quality().size() > 0) {

    sm_reply_quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sm_reply_quality_);
  }
  if (from.response_class().size() > 0) {

    response_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_class_);
  }
  if (from.all_count() != 0) {
    set_all_count(from.all_count());
  }
  if (from.official_count() != 0) {
    set_official_count(from.official_count());
  }
  if (from.qddb_sessions_num_log2() != 0) {
    set_qddb_sessions_num_log2(from.qddb_sessions_num_log2());
  }
}

void VkAlbumResponse_Serp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkAlbumResponse.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkAlbumResponse_Serp::CopyFrom(const VkAlbumResponse_Serp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkAlbumResponse.Serp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkAlbumResponse_Serp::IsInitialized() const {
  return true;
}

void VkAlbumResponse_Serp::Swap(VkAlbumResponse_Serp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkAlbumResponse_Serp::InternalSwap(VkAlbumResponse_Serp* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  sm_reply_quality_.Swap(&other->sm_reply_quality_);
  response_class_.Swap(&other->response_class_);
  swap(all_count_, other->all_count_);
  swap(official_count_, other->official_count_);
  swap(qddb_sessions_num_log2_, other->qddb_sessions_num_log2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkAlbumResponse_Serp::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkAlbumResponse_Serp

// repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
int VkAlbumResponse_Serp::results_size() const {
  return results_.size();
}
void VkAlbumResponse_Serp::clear_results() {
  results_.Clear();
}
const ::pb::srch::music::VkAlbumResponse_Result& VkAlbumResponse_Serp::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Get(index);
}
::pb::srch::music::VkAlbumResponse_Result* VkAlbumResponse_Serp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Mutable(index);
}
::pb::srch::music::VkAlbumResponse_Result* VkAlbumResponse_Serp::add_results() {
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >*
VkAlbumResponse_Serp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkAlbumResponse.Serp.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >&
VkAlbumResponse_Serp::results() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_;
}

// string response_class = 6 [(.gogo.json) = {
void VkAlbumResponse_Serp::clear_response_class() {
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse_Serp::response_class() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.response_class)
  return response_class_.GetNoArena();
}
void VkAlbumResponse_Serp::set_response_class(const ::std::string& value) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
#if LANG_CXX11
void VkAlbumResponse_Serp::set_response_class(::std::string&& value) {
  
  response_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
#endif
void VkAlbumResponse_Serp::set_response_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
void VkAlbumResponse_Serp::set_response_class(const char* value, size_t size) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
::std::string* VkAlbumResponse_Serp::mutable_response_class() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.response_class)
  return response_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse_Serp::release_response_class() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Serp.response_class)
  
  return response_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse_Serp::set_allocated_response_class(::std::string* response_class) {
  if (response_class != NULL) {
    
  } else {
    
  }
  response_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_class);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Serp.response_class)
}

// uint32 all_count = 2 [(.gogo.json) = {
void VkAlbumResponse_Serp::clear_all_count() {
  all_count_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Serp::all_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.all_count)
  return all_count_;
}
void VkAlbumResponse_Serp::set_all_count(::google::protobuf::uint32 value) {
  
  all_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.all_count)
}

// uint32 official_count = 3 [(.gogo.json) = {
void VkAlbumResponse_Serp::clear_official_count() {
  official_count_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Serp::official_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.official_count)
  return official_count_;
}
void VkAlbumResponse_Serp::set_official_count(::google::protobuf::uint32 value) {
  
  official_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.official_count)
}

// uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
void VkAlbumResponse_Serp::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse_Serp::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
void VkAlbumResponse_Serp::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.qddb_sessions_num_log2)
}

// string sm_reply_quality = 5 [(.gogo.json) = {
void VkAlbumResponse_Serp::clear_sm_reply_quality() {
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse_Serp::sm_reply_quality() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.GetNoArena();
}
void VkAlbumResponse_Serp::set_sm_reply_quality(const ::std::string& value) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
#if LANG_CXX11
void VkAlbumResponse_Serp::set_sm_reply_quality(::std::string&& value) {
  
  sm_reply_quality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
#endif
void VkAlbumResponse_Serp::set_sm_reply_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
void VkAlbumResponse_Serp::set_sm_reply_quality(const char* value, size_t size) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
::std::string* VkAlbumResponse_Serp::mutable_sm_reply_quality() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse_Serp::release_sm_reply_quality() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  
  return sm_reply_quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse_Serp::set_allocated_sm_reply_quality(::std::string* sm_reply_quality) {
  if (sm_reply_quality != NULL) {
    
  } else {
    
  }
  sm_reply_quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_reply_quality);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VkAlbumResponse::kQidFieldNumber;
const int VkAlbumResponse::kSerpFieldNumber;
const int VkAlbumResponse::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VkAlbumResponse::VkAlbumResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.VkAlbumResponse)
}
VkAlbumResponse::VkAlbumResponse(const VkAlbumResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qid().size() > 0) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_serp()) {
    serp_ = new ::pb::srch::music::VkAlbumResponse_Serp(*from.serp_);
  } else {
    serp_ = NULL;
  }
  split_ = from.split_;
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.VkAlbumResponse)
}

void VkAlbumResponse::SharedCtor() {
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_) -
      reinterpret_cast<char*>(&serp_)) + sizeof(split_));
  _cached_size_ = 0;
}

VkAlbumResponse::~VkAlbumResponse() {
  // @@protoc_insertion_point(destructor:pb.srch.music.VkAlbumResponse)
  SharedDtor();
}

void VkAlbumResponse::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete serp_;
}

void VkAlbumResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VkAlbumResponse::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VkAlbumResponse& VkAlbumResponse::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

VkAlbumResponse* VkAlbumResponse::New(::google::protobuf::Arena* arena) const {
  VkAlbumResponse* n = new VkAlbumResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VkAlbumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.VkAlbumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) {
    delete serp_;
  }
  serp_ = NULL;
  split_ = 0u;
  _internal_metadata_.Clear();
}

bool VkAlbumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.VkAlbumResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string qid = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.VkAlbumResponse.qid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 split = 3 [(.gogo.json) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.VkAlbumResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.VkAlbumResponse)
  return false;
#undef DO_
}

void VkAlbumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.VkAlbumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->serp_, output);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->split(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.VkAlbumResponse)
}

::google::protobuf::uint8* VkAlbumResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.VkAlbumResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.VkAlbumResponse.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->serp_, deterministic, target);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->split(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.VkAlbumResponse)
  return target;
}

size_t VkAlbumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.VkAlbumResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string qid = 1 [(.gogo.json) = {
  if (this->qid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  // .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
  if (this->has_serp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serp_);
  }

  // uint32 split = 3 [(.gogo.json) = {
  if (this->split() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->split());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VkAlbumResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.VkAlbumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VkAlbumResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VkAlbumResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.VkAlbumResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.VkAlbumResponse)
    MergeFrom(*source);
  }
}

void VkAlbumResponse::MergeFrom(const VkAlbumResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.VkAlbumResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qid().size() > 0) {

    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  if (from.has_serp()) {
    mutable_serp()->::pb::srch::music::VkAlbumResponse_Serp::MergeFrom(from.serp());
  }
  if (from.split() != 0) {
    set_split(from.split());
  }
}

void VkAlbumResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.VkAlbumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VkAlbumResponse::CopyFrom(const VkAlbumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.VkAlbumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VkAlbumResponse::IsInitialized() const {
  return true;
}

void VkAlbumResponse::Swap(VkAlbumResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VkAlbumResponse::InternalSwap(VkAlbumResponse* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  swap(serp_, other->serp_);
  swap(split_, other->split_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VkAlbumResponse::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VkAlbumResponse

// string qid = 1 [(.gogo.json) = {
void VkAlbumResponse::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VkAlbumResponse::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.qid)
  return qid_.GetNoArena();
}
void VkAlbumResponse::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.qid)
}
#if LANG_CXX11
void VkAlbumResponse::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.qid)
}
#endif
void VkAlbumResponse::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.qid)
}
void VkAlbumResponse::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.qid)
}
::std::string* VkAlbumResponse::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VkAlbumResponse::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VkAlbumResponse::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.qid)
}

// .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
bool VkAlbumResponse::has_serp() const {
  return this != internal_default_instance() && serp_ != NULL;
}
void VkAlbumResponse::clear_serp() {
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) delete serp_;
  serp_ = NULL;
}
const ::pb::srch::music::VkAlbumResponse_Serp& VkAlbumResponse::serp() const {
  const ::pb::srch::music::VkAlbumResponse_Serp* p = serp_;
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.serp)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::VkAlbumResponse_Serp*>(
      &::pb::srch::music::_VkAlbumResponse_Serp_default_instance_);
}
::pb::srch::music::VkAlbumResponse_Serp* VkAlbumResponse::mutable_serp() {
  
  if (serp_ == NULL) {
    serp_ = new ::pb::srch::music::VkAlbumResponse_Serp;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.serp)
  return serp_;
}
::pb::srch::music::VkAlbumResponse_Serp* VkAlbumResponse::release_serp() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.serp)
  
  ::pb::srch::music::VkAlbumResponse_Serp* temp = serp_;
  serp_ = NULL;
  return temp;
}
void VkAlbumResponse::set_allocated_serp(::pb::srch::music::VkAlbumResponse_Serp* serp) {
  delete serp_;
  serp_ = serp;
  if (serp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.serp)
}

// uint32 split = 3 [(.gogo.json) = {
void VkAlbumResponse::clear_split() {
  split_ = 0u;
}
::google::protobuf::uint32 VkAlbumResponse::split() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.split)
  return split_;
}
void VkAlbumResponse::set_split(::google::protobuf::uint32 value) {
  
  split_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerDocument_Track::kArtistFieldNumber;
const int ManagerDocument_Track::kTrackFieldNumber;
const int ManagerDocument_Track::kDurationFieldNumber;
const int ManagerDocument_Track::kUserIdFieldNumber;
const int ManagerDocument_Track::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerDocument_Track::ManagerDocument_Track()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.ManagerDocument.Track)
}
ManagerDocument_Track::ManagerDocument_Track(const ManagerDocument_Track& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.duration().size() > 0) {
    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_id().size() > 0) {
    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.ManagerDocument.Track)
}

void ManagerDocument_Track::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ManagerDocument_Track::~ManagerDocument_Track() {
  // @@protoc_insertion_point(destructor:pb.srch.music.ManagerDocument.Track)
  SharedDtor();
}

void ManagerDocument_Track::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagerDocument_Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerDocument_Track::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManagerDocument_Track& ManagerDocument_Track::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManagerDocument_Track* ManagerDocument_Track::New(::google::protobuf::Arena* arena) const {
  ManagerDocument_Track* n = new ManagerDocument_Track;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerDocument_Track::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.ManagerDocument.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ManagerDocument_Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.ManagerDocument.Track)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string artist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.Track.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.Track.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duration().data(), static_cast<int>(this->duration().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.Track.duration"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.Track.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_id().data(), static_cast<int>(this->file_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.Track.file_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.ManagerDocument.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.ManagerDocument.Track)
  return false;
#undef DO_
}

void ManagerDocument_Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.ManagerDocument.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artist = 1;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->artist(), output);
  }

  // string track = 2;
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->track(), output);
  }

  // string duration = 3;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->duration(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // string file_id = 5;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.file_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.ManagerDocument.Track)
}

::google::protobuf::uint8* ManagerDocument_Track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.ManagerDocument.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artist = 1;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->artist(), target);
  }

  // string track = 2;
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track(), target);
  }

  // string duration = 3;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->duration(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // string file_id = 5;
  if (this->file_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_id().data(), static_cast<int>(this->file_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.Track.file_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.ManagerDocument.Track)
  return target;
}

size_t ManagerDocument_Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.ManagerDocument.Track)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string artist = 1;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string track = 2;
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string duration = 3;
  if (this->duration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duration());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string file_id = 5;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerDocument_Track::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.ManagerDocument.Track)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagerDocument_Track* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerDocument_Track>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.ManagerDocument.Track)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.ManagerDocument.Track)
    MergeFrom(*source);
  }
}

void ManagerDocument_Track::MergeFrom(const ManagerDocument_Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.ManagerDocument.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.duration().size() > 0) {

    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.file_id().size() > 0) {

    file_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_id_);
  }
}

void ManagerDocument_Track::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.ManagerDocument.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerDocument_Track::CopyFrom(const ManagerDocument_Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.ManagerDocument.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerDocument_Track::IsInitialized() const {
  return true;
}

void ManagerDocument_Track::Swap(ManagerDocument_Track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerDocument_Track::InternalSwap(ManagerDocument_Track* other) {
  using std::swap;
  artist_.Swap(&other->artist_);
  track_.Swap(&other->track_);
  duration_.Swap(&other->duration_);
  user_id_.Swap(&other->user_id_);
  file_id_.Swap(&other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerDocument_Track::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerDocument_Track

// string artist = 1;
void ManagerDocument_Track::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument_Track::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.artist)
  return artist_.GetNoArena();
}
void ManagerDocument_Track::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.artist)
}
#if LANG_CXX11
void ManagerDocument_Track::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.artist)
}
#endif
void ManagerDocument_Track::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.artist)
}
void ManagerDocument_Track::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.artist)
}
::std::string* ManagerDocument_Track::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument_Track::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument_Track::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.artist)
}

// string track = 2;
void ManagerDocument_Track::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument_Track::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.track)
  return track_.GetNoArena();
}
void ManagerDocument_Track::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.track)
}
#if LANG_CXX11
void ManagerDocument_Track::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.track)
}
#endif
void ManagerDocument_Track::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.track)
}
void ManagerDocument_Track::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.track)
}
::std::string* ManagerDocument_Track::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument_Track::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument_Track::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.track)
}

// string duration = 3;
void ManagerDocument_Track::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument_Track::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.duration)
  return duration_.GetNoArena();
}
void ManagerDocument_Track::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.duration)
}
#if LANG_CXX11
void ManagerDocument_Track::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.duration)
}
#endif
void ManagerDocument_Track::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.duration)
}
void ManagerDocument_Track::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.duration)
}
::std::string* ManagerDocument_Track::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument_Track::release_duration() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument_Track::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.duration)
}

// string user_id = 4;
void ManagerDocument_Track::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument_Track::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.user_id)
  return user_id_.GetNoArena();
}
void ManagerDocument_Track::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.user_id)
}
#if LANG_CXX11
void ManagerDocument_Track::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.user_id)
}
#endif
void ManagerDocument_Track::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.user_id)
}
void ManagerDocument_Track::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.user_id)
}
::std::string* ManagerDocument_Track::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument_Track::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument_Track::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.user_id)
}

// string file_id = 5;
void ManagerDocument_Track::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument_Track::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.file_id)
  return file_id_.GetNoArena();
}
void ManagerDocument_Track::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.file_id)
}
#if LANG_CXX11
void ManagerDocument_Track::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.file_id)
}
#endif
void ManagerDocument_Track::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.file_id)
}
void ManagerDocument_Track::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.file_id)
}
::std::string* ManagerDocument_Track::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument_Track::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument_Track::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.file_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerDocument::kTypeFieldNumber;
const int ManagerDocument::kCategoryFieldNumber;
const int ManagerDocument::kIsNailedFieldNumber;
const int ManagerDocument::kLatestTypeFieldNumber;
const int ManagerDocument::kArtistFieldNumber;
const int ManagerDocument::kAlbumFieldNumber;
const int ManagerDocument::kTrackFieldNumber;
const int ManagerDocument::kPlaylistFieldNumber;
const int ManagerDocument::kTracksCountFieldNumber;
const int ManagerDocument::kTracksFieldNumber;
const int ManagerDocument::kListenFieldNumber;
const int ManagerDocument::kListenMonthFieldNumber;
const int ManagerDocument::kMaxListenFieldNumber;
const int ManagerDocument::kMaxListenMonthFieldNumber;
const int ManagerDocument::kSharesFieldNumber;
const int ManagerDocument::kRefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerDocument::ManagerDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_5fresponse_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.srch.music.ManagerDocument)
}
ManagerDocument::ManagerDocument(const ManagerDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tracks_(from.tracks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artist().size() > 0) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.album().size() > 0) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.track().size() > 0) {
    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  playlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playlist().size() > 0) {
    playlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&refs_) -
    reinterpret_cast<char*>(&type_)) + sizeof(refs_));
  // @@protoc_insertion_point(copy_constructor:pb.srch.music.ManagerDocument)
}

void ManagerDocument::SharedCtor() {
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refs_) -
      reinterpret_cast<char*>(&type_)) + sizeof(refs_));
  _cached_size_ = 0;
}

ManagerDocument::~ManagerDocument() {
  // @@protoc_insertion_point(destructor:pb.srch.music.ManagerDocument)
  SharedDtor();
}

void ManagerDocument::SharedDtor() {
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagerDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerDocument::descriptor() {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManagerDocument& ManagerDocument::default_instance() {
  protobuf_music_5fresponse_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManagerDocument* ManagerDocument::New(::google::protobuf::Arena* arena) const {
  ManagerDocument* n = new ManagerDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.srch.music.ManagerDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refs_) -
      reinterpret_cast<char*>(&type_)) + sizeof(refs_));
  _internal_metadata_.Clear();
}

bool ManagerDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.srch.music.ManagerDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.srch.music.ManagerDocument.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::srch::music::ManagerDocument_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_nailed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_latest_type(static_cast< ::pb::srch::music::ManagerDocument_LatestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.artist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string album = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.album"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string track = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->track().data(), static_cast<int>(this->track().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playlist = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playlist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playlist().data(), static_cast<int>(this->playlist().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.srch.music.ManagerDocument.playlist"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tracks_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tracks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 listen_month = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_listen = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_listen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_listen_month = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_listen_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 shares = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 refs = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.srch.music.ManagerDocument.Category category = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::pb::srch::music::ManagerDocument_Category >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.srch.music.ManagerDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.srch.music.ManagerDocument)
  return false;
#undef DO_
}

void ManagerDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.srch.music.ManagerDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.srch.music.ManagerDocument.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool is_nailed = 2;
  if (this->is_nailed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_nailed(), output);
  }

  // .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
  if (this->latest_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->latest_type(), output);
  }

  // string artist = 4;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->artist(), output);
  }

  // string album = 5;
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->album(), output);
  }

  // string track = 6;
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.track");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->track(), output);
  }

  // string playlist = 7;
  if (this->playlist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist().data(), static_cast<int>(this->playlist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.playlist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->playlist(), output);
  }

  // uint64 tracks_count = 8;
  if (this->tracks_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->tracks_count(), output);
  }

  // repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tracks(static_cast<int>(i)), output);
  }

  // uint64 listen = 10;
  if (this->listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->listen(), output);
  }

  // uint64 listen_month = 11;
  if (this->listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->listen_month(), output);
  }

  // uint64 max_listen = 12;
  if (this->max_listen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->max_listen(), output);
  }

  // uint64 max_listen_month = 13;
  if (this->max_listen_month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->max_listen_month(), output);
  }

  // uint64 shares = 14;
  if (this->shares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->shares(), output);
  }

  // uint64 refs = 15;
  if (this->refs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->refs(), output);
  }

  // .pb.srch.music.ManagerDocument.Category category = 16;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->category(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.srch.music.ManagerDocument)
}

::google::protobuf::uint8* ManagerDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.srch.music.ManagerDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.srch.music.ManagerDocument.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool is_nailed = 2;
  if (this->is_nailed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_nailed(), target);
  }

  // .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
  if (this->latest_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->latest_type(), target);
  }

  // string artist = 4;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artist(), target);
  }

  // string album = 5;
  if (this->album().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->album(), target);
  }

  // string track = 6;
  if (this->track().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->track().data(), static_cast<int>(this->track().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.track");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->track(), target);
  }

  // string playlist = 7;
  if (this->playlist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist().data(), static_cast<int>(this->playlist().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.srch.music.ManagerDocument.playlist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playlist(), target);
  }

  // uint64 tracks_count = 8;
  if (this->tracks_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->tracks_count(), target);
  }

  // repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->tracks(static_cast<int>(i)), deterministic, target);
  }

  // uint64 listen = 10;
  if (this->listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->listen(), target);
  }

  // uint64 listen_month = 11;
  if (this->listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->listen_month(), target);
  }

  // uint64 max_listen = 12;
  if (this->max_listen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->max_listen(), target);
  }

  // uint64 max_listen_month = 13;
  if (this->max_listen_month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->max_listen_month(), target);
  }

  // uint64 shares = 14;
  if (this->shares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->shares(), target);
  }

  // uint64 refs = 15;
  if (this->refs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->refs(), target);
  }

  // .pb.srch.music.ManagerDocument.Category category = 16;
  if (this->category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->category(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.srch.music.ManagerDocument)
  return target;
}

size_t ManagerDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.srch.music.ManagerDocument)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks(static_cast<int>(i)));
    }
  }

  // string artist = 4;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // string album = 5;
  if (this->album().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->album());
  }

  // string track = 6;
  if (this->track().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->track());
  }

  // string playlist = 7;
  if (this->playlist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playlist());
  }

  // .pb.srch.music.ManagerDocument.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_nailed = 2;
  if (this->is_nailed() != 0) {
    total_size += 1 + 1;
  }

  // uint64 tracks_count = 8;
  if (this->tracks_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tracks_count());
  }

  // .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
  if (this->latest_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_type());
  }

  // .pb.srch.music.ManagerDocument.Category category = 16;
  if (this->category() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  // uint64 listen = 10;
  if (this->listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen());
  }

  // uint64 listen_month = 11;
  if (this->listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->listen_month());
  }

  // uint64 max_listen = 12;
  if (this->max_listen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_listen());
  }

  // uint64 max_listen_month = 13;
  if (this->max_listen_month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_listen_month());
  }

  // uint64 shares = 14;
  if (this->shares() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->shares());
  }

  // uint64 refs = 15;
  if (this->refs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->refs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.srch.music.ManagerDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagerDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.srch.music.ManagerDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.srch.music.ManagerDocument)
    MergeFrom(*source);
  }
}

void ManagerDocument::MergeFrom(const ManagerDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.srch.music.ManagerDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.album().size() > 0) {

    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  if (from.track().size() > 0) {

    track_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_);
  }
  if (from.playlist().size() > 0) {

    playlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_nailed() != 0) {
    set_is_nailed(from.is_nailed());
  }
  if (from.tracks_count() != 0) {
    set_tracks_count(from.tracks_count());
  }
  if (from.latest_type() != 0) {
    set_latest_type(from.latest_type());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.listen() != 0) {
    set_listen(from.listen());
  }
  if (from.listen_month() != 0) {
    set_listen_month(from.listen_month());
  }
  if (from.max_listen() != 0) {
    set_max_listen(from.max_listen());
  }
  if (from.max_listen_month() != 0) {
    set_max_listen_month(from.max_listen_month());
  }
  if (from.shares() != 0) {
    set_shares(from.shares());
  }
  if (from.refs() != 0) {
    set_refs(from.refs());
  }
}

void ManagerDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.srch.music.ManagerDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerDocument::CopyFrom(const ManagerDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.srch.music.ManagerDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerDocument::IsInitialized() const {
  return true;
}

void ManagerDocument::Swap(ManagerDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerDocument::InternalSwap(ManagerDocument* other) {
  using std::swap;
  tracks_.InternalSwap(&other->tracks_);
  artist_.Swap(&other->artist_);
  album_.Swap(&other->album_);
  track_.Swap(&other->track_);
  playlist_.Swap(&other->playlist_);
  swap(type_, other->type_);
  swap(is_nailed_, other->is_nailed_);
  swap(tracks_count_, other->tracks_count_);
  swap(latest_type_, other->latest_type_);
  swap(category_, other->category_);
  swap(listen_, other->listen_);
  swap(listen_month_, other->listen_month_);
  swap(max_listen_, other->max_listen_);
  swap(max_listen_month_, other->max_listen_month_);
  swap(shares_, other->shares_);
  swap(refs_, other->refs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerDocument::GetMetadata() const {
  protobuf_music_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerDocument

// .pb.srch.music.ManagerDocument.Type type = 1;
void ManagerDocument::clear_type() {
  type_ = 0;
}
::pb::srch::music::ManagerDocument_Type ManagerDocument::type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.type)
  return static_cast< ::pb::srch::music::ManagerDocument_Type >(type_);
}
void ManagerDocument::set_type(::pb::srch::music::ManagerDocument_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.type)
}

// .pb.srch.music.ManagerDocument.Category category = 16;
void ManagerDocument::clear_category() {
  category_ = 0;
}
::pb::srch::music::ManagerDocument_Category ManagerDocument::category() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.category)
  return static_cast< ::pb::srch::music::ManagerDocument_Category >(category_);
}
void ManagerDocument::set_category(::pb::srch::music::ManagerDocument_Category value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.category)
}

// bool is_nailed = 2;
void ManagerDocument::clear_is_nailed() {
  is_nailed_ = false;
}
bool ManagerDocument::is_nailed() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.is_nailed)
  return is_nailed_;
}
void ManagerDocument::set_is_nailed(bool value) {
  
  is_nailed_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.is_nailed)
}

// .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
void ManagerDocument::clear_latest_type() {
  latest_type_ = 0;
}
::pb::srch::music::ManagerDocument_LatestType ManagerDocument::latest_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.latest_type)
  return static_cast< ::pb::srch::music::ManagerDocument_LatestType >(latest_type_);
}
void ManagerDocument::set_latest_type(::pb::srch::music::ManagerDocument_LatestType value) {
  
  latest_type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.latest_type)
}

// string artist = 4;
void ManagerDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.artist)
  return artist_.GetNoArena();
}
void ManagerDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.artist)
}
#if LANG_CXX11
void ManagerDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.artist)
}
#endif
void ManagerDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.artist)
}
void ManagerDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.artist)
}
::std::string* ManagerDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.artist)
}

// string album = 5;
void ManagerDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.album)
  return album_.GetNoArena();
}
void ManagerDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.album)
}
#if LANG_CXX11
void ManagerDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.album)
}
#endif
void ManagerDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.album)
}
void ManagerDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.album)
}
::std::string* ManagerDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.album)
}

// string track = 6;
void ManagerDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.track)
  return track_.GetNoArena();
}
void ManagerDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.track)
}
#if LANG_CXX11
void ManagerDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.track)
}
#endif
void ManagerDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.track)
}
void ManagerDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.track)
}
::std::string* ManagerDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.track)
}

// string playlist = 7;
void ManagerDocument::clear_playlist() {
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagerDocument::playlist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.playlist)
  return playlist_.GetNoArena();
}
void ManagerDocument::set_playlist(const ::std::string& value) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.playlist)
}
#if LANG_CXX11
void ManagerDocument::set_playlist(::std::string&& value) {
  
  playlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.playlist)
}
#endif
void ManagerDocument::set_playlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.playlist)
}
void ManagerDocument::set_playlist(const char* value, size_t size) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.playlist)
}
::std::string* ManagerDocument::mutable_playlist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.playlist)
  return playlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagerDocument::release_playlist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.playlist)
  
  return playlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagerDocument::set_allocated_playlist(::std::string* playlist) {
  if (playlist != NULL) {
    
  } else {
    
  }
  playlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.playlist)
}

// uint64 tracks_count = 8;
void ManagerDocument::clear_tracks_count() {
  tracks_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.tracks_count)
  return tracks_count_;
}
void ManagerDocument::set_tracks_count(::google::protobuf::uint64 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.tracks_count)
}

// repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
int ManagerDocument::tracks_size() const {
  return tracks_.size();
}
void ManagerDocument::clear_tracks() {
  tracks_.Clear();
}
const ::pb::srch::music::ManagerDocument_Track& ManagerDocument::tracks(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Get(index);
}
::pb::srch::music::ManagerDocument_Track* ManagerDocument::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Mutable(index);
}
::pb::srch::music::ManagerDocument_Track* ManagerDocument::add_tracks() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >*
ManagerDocument::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerDocument.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >&
ManagerDocument::tracks() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerDocument.tracks)
  return tracks_;
}

// uint64 listen = 10;
void ManagerDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.listen)
  return listen_;
}
void ManagerDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.listen)
}

// uint64 listen_month = 11;
void ManagerDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.listen_month)
  return listen_month_;
}
void ManagerDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.listen_month)
}

// uint64 max_listen = 12;
void ManagerDocument::clear_max_listen() {
  max_listen_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::max_listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.max_listen)
  return max_listen_;
}
void ManagerDocument::set_max_listen(::google::protobuf::uint64 value) {
  
  max_listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.max_listen)
}

// uint64 max_listen_month = 13;
void ManagerDocument::clear_max_listen_month() {
  max_listen_month_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::max_listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.max_listen_month)
  return max_listen_month_;
}
void ManagerDocument::set_max_listen_month(::google::protobuf::uint64 value) {
  
  max_listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.max_listen_month)
}

// uint64 shares = 14;
void ManagerDocument::clear_shares() {
  shares_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::shares() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.shares)
  return shares_;
}
void ManagerDocument::set_shares(::google::protobuf::uint64 value) {
  
  shares_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.shares)
}

// uint64 refs = 15;
void ManagerDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ManagerDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.refs)
  return refs_;
}
void ManagerDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.refs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace music
}  // namespace srch
}  // namespace pb

// @@protoc_insertion_point(global_scope)
