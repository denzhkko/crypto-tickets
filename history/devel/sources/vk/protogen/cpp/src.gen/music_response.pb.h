// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music_response.proto

#ifndef PROTOBUF_music_5fresponse_2eproto__INCLUDED
#define PROTOBUF_music_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace srch {
namespace music {
class AlbumSearcherDocument;
class AlbumSearcherDocumentDefaultTypeInternal;
extern AlbumSearcherDocumentDefaultTypeInternal _AlbumSearcherDocument_default_instance_;
class ArtistSearcherDocument;
class ArtistSearcherDocumentDefaultTypeInternal;
extern ArtistSearcherDocumentDefaultTypeInternal _ArtistSearcherDocument_default_instance_;
class CacheEntry;
class CacheEntryDefaultTypeInternal;
extern CacheEntryDefaultTypeInternal _CacheEntry_default_instance_;
class ManagerDocument;
class ManagerDocumentDefaultTypeInternal;
extern ManagerDocumentDefaultTypeInternal _ManagerDocument_default_instance_;
class ManagerDocument_Track;
class ManagerDocument_TrackDefaultTypeInternal;
extern ManagerDocument_TrackDefaultTypeInternal _ManagerDocument_Track_default_instance_;
class PlaylistSearcherDocument;
class PlaylistSearcherDocumentDefaultTypeInternal;
extern PlaylistSearcherDocumentDefaultTypeInternal _PlaylistSearcherDocument_default_instance_;
class TitlesDocument;
class TitlesDocumentDefaultTypeInternal;
extern TitlesDocumentDefaultTypeInternal _TitlesDocument_default_instance_;
class TitlesDocument_UmaData;
class TitlesDocument_UmaDataDefaultTypeInternal;
extern TitlesDocument_UmaDataDefaultTypeInternal _TitlesDocument_UmaData_default_instance_;
class TitlesResponse;
class TitlesResponseDefaultTypeInternal;
extern TitlesResponseDefaultTypeInternal _TitlesResponse_default_instance_;
class TrackSearcherDocument;
class TrackSearcherDocumentDefaultTypeInternal;
extern TrackSearcherDocumentDefaultTypeInternal _TrackSearcherDocument_default_instance_;
class VkAlbumResponse;
class VkAlbumResponseDefaultTypeInternal;
extern VkAlbumResponseDefaultTypeInternal _VkAlbumResponse_default_instance_;
class VkAlbumResponse_Result;
class VkAlbumResponse_ResultDefaultTypeInternal;
extern VkAlbumResponse_ResultDefaultTypeInternal _VkAlbumResponse_Result_default_instance_;
class VkAlbumResponse_Serp;
class VkAlbumResponse_SerpDefaultTypeInternal;
extern VkAlbumResponse_SerpDefaultTypeInternal _VkAlbumResponse_Serp_default_instance_;
class VkTrackResponse;
class VkTrackResponseDefaultTypeInternal;
extern VkTrackResponseDefaultTypeInternal _VkTrackResponse_default_instance_;
class VkTrackResponse_Result;
class VkTrackResponse_ResultDefaultTypeInternal;
extern VkTrackResponse_ResultDefaultTypeInternal _VkTrackResponse_Result_default_instance_;
class VkTrackResponse_Serp;
class VkTrackResponse_SerpDefaultTypeInternal;
extern VkTrackResponse_SerpDefaultTypeInternal _VkTrackResponse_Serp_default_instance_;
}  // namespace music
}  // namespace srch
}  // namespace pb

namespace pb {
namespace srch {
namespace music {

namespace protobuf_music_5fresponse_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_music_5fresponse_2eproto

enum TitlesDocument_Type {
  TitlesDocument_Type_TypeNone = 0,
  TitlesDocument_Type_TypeArtist = 1,
  TitlesDocument_Type_TypeAlbum = 2,
  TitlesDocument_Type_TypeTrack = 3,
  TitlesDocument_Type_TitlesDocument_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TitlesDocument_Type_TitlesDocument_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TitlesDocument_Type_IsValid(int value);
const TitlesDocument_Type TitlesDocument_Type_Type_MIN = TitlesDocument_Type_TypeNone;
const TitlesDocument_Type TitlesDocument_Type_Type_MAX = TitlesDocument_Type_TypeTrack;
const int TitlesDocument_Type_Type_ARRAYSIZE = TitlesDocument_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TitlesDocument_Type_descriptor();
inline const ::std::string& TitlesDocument_Type_Name(TitlesDocument_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TitlesDocument_Type_descriptor(), value);
}
inline bool TitlesDocument_Type_Parse(
    const ::std::string& name, TitlesDocument_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TitlesDocument_Type>(
    TitlesDocument_Type_descriptor(), name, value);
}
enum ManagerDocument_Type {
  ManagerDocument_Type_TypeNone = 0,
  ManagerDocument_Type_TypeArtist = 1,
  ManagerDocument_Type_TypeAlbum = 2,
  ManagerDocument_Type_TypeTrack = 3,
  ManagerDocument_Type_TypePlaylist = 4,
  ManagerDocument_Type_ManagerDocument_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ManagerDocument_Type_ManagerDocument_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ManagerDocument_Type_IsValid(int value);
const ManagerDocument_Type ManagerDocument_Type_Type_MIN = ManagerDocument_Type_TypeNone;
const ManagerDocument_Type ManagerDocument_Type_Type_MAX = ManagerDocument_Type_TypePlaylist;
const int ManagerDocument_Type_Type_ARRAYSIZE = ManagerDocument_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManagerDocument_Type_descriptor();
inline const ::std::string& ManagerDocument_Type_Name(ManagerDocument_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManagerDocument_Type_descriptor(), value);
}
inline bool ManagerDocument_Type_Parse(
    const ::std::string& name, ManagerDocument_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManagerDocument_Type>(
    ManagerDocument_Type_descriptor(), name, value);
}
enum ManagerDocument_Category {
  ManagerDocument_Category_CategoryNone = 0,
  ManagerDocument_Category_CategoryNailed = 1,
  ManagerDocument_Category_CategorySearcher = 2,
  ManagerDocument_Category_CategorySupposed = 3,
  ManagerDocument_Category_CategoryDict = 4,
  ManagerDocument_Category_CategoryLatest = 5,
  ManagerDocument_Category_ManagerDocument_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ManagerDocument_Category_ManagerDocument_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ManagerDocument_Category_IsValid(int value);
const ManagerDocument_Category ManagerDocument_Category_Category_MIN = ManagerDocument_Category_CategoryNone;
const ManagerDocument_Category ManagerDocument_Category_Category_MAX = ManagerDocument_Category_CategoryLatest;
const int ManagerDocument_Category_Category_ARRAYSIZE = ManagerDocument_Category_Category_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManagerDocument_Category_descriptor();
inline const ::std::string& ManagerDocument_Category_Name(ManagerDocument_Category value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManagerDocument_Category_descriptor(), value);
}
inline bool ManagerDocument_Category_Parse(
    const ::std::string& name, ManagerDocument_Category* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManagerDocument_Category>(
    ManagerDocument_Category_descriptor(), name, value);
}
enum ManagerDocument_LatestType {
  ManagerDocument_LatestType_LatestNone = 0,
  ManagerDocument_LatestType_LatestAlbum = 1,
  ManagerDocument_LatestType_LatestTrack = 2,
  ManagerDocument_LatestType_ManagerDocument_LatestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ManagerDocument_LatestType_ManagerDocument_LatestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ManagerDocument_LatestType_IsValid(int value);
const ManagerDocument_LatestType ManagerDocument_LatestType_LatestType_MIN = ManagerDocument_LatestType_LatestNone;
const ManagerDocument_LatestType ManagerDocument_LatestType_LatestType_MAX = ManagerDocument_LatestType_LatestTrack;
const int ManagerDocument_LatestType_LatestType_ARRAYSIZE = ManagerDocument_LatestType_LatestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManagerDocument_LatestType_descriptor();
inline const ::std::string& ManagerDocument_LatestType_Name(ManagerDocument_LatestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManagerDocument_LatestType_descriptor(), value);
}
inline bool ManagerDocument_LatestType_Parse(
    const ::std::string& name, ManagerDocument_LatestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManagerDocument_LatestType>(
    ManagerDocument_LatestType_descriptor(), name, value);
}
// ===================================================================

class CacheEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.CacheEntry) */ {
 public:
  CacheEntry();
  virtual ~CacheEntry();

  CacheEntry(const CacheEntry& from);

  inline CacheEntry& operator=(const CacheEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheEntry(CacheEntry&& from) noexcept
    : CacheEntry() {
    *this = ::std::move(from);
  }

  inline CacheEntry& operator=(CacheEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheEntry& default_instance();

  static inline const CacheEntry* internal_default_instance() {
    return reinterpret_cast<const CacheEntry*>(
               &_CacheEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CacheEntry* other);
  friend void swap(CacheEntry& a, CacheEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CacheEntry& from);
  void MergeFrom(const CacheEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CacheEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // uint64 begin_time = 2;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // uint64 expiration = 3;
  void clear_expiration();
  static const int kExpirationFieldNumber = 3;
  ::google::protobuf::uint64 expiration() const;
  void set_expiration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.CacheEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 expiration_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TitlesDocument_UmaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.TitlesDocument.UmaData) */ {
 public:
  TitlesDocument_UmaData();
  virtual ~TitlesDocument_UmaData();

  TitlesDocument_UmaData(const TitlesDocument_UmaData& from);

  inline TitlesDocument_UmaData& operator=(const TitlesDocument_UmaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TitlesDocument_UmaData(TitlesDocument_UmaData&& from) noexcept
    : TitlesDocument_UmaData() {
    *this = ::std::move(from);
  }

  inline TitlesDocument_UmaData& operator=(TitlesDocument_UmaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TitlesDocument_UmaData& default_instance();

  static inline const TitlesDocument_UmaData* internal_default_instance() {
    return reinterpret_cast<const TitlesDocument_UmaData*>(
               &_TitlesDocument_UmaData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TitlesDocument_UmaData* other);
  friend void swap(TitlesDocument_UmaData& a, TitlesDocument_UmaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TitlesDocument_UmaData* New() const PROTOBUF_FINAL { return New(NULL); }

  TitlesDocument_UmaData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TitlesDocument_UmaData& from);
  void MergeFrom(const TitlesDocument_UmaData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TitlesDocument_UmaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 artist_id = 1 [(.gogo.xml) = {
  int artist_id_size() const;
  void clear_artist_id();
  static const int kArtistIdFieldNumber = 1;
  ::google::protobuf::uint64 artist_id(int index) const;
  void set_artist_id(int index, ::google::protobuf::uint64 value);
  void add_artist_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      artist_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_artist_id();

  // string artist = 3 [(.gogo.xml) = {
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string album = 4 [(.gogo.xml) = {
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string track = 5 [(.gogo.xml) = {
  void clear_track();
  static const int kTrackFieldNumber = 5;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // uint64 track_id = 2 [(.gogo.xml) = {
  void clear_track_id();
  static const int kTrackIdFieldNumber = 2;
  ::google::protobuf::uint64 track_id() const;
  void set_track_id(::google::protobuf::uint64 value);

  // double prob_artist = 6 [(.gogo.xml) = {
  void clear_prob_artist();
  static const int kProbArtistFieldNumber = 6;
  double prob_artist() const;
  void set_prob_artist(double value);

  // double prob_track = 7 [(.gogo.xml) = {
  void clear_prob_track();
  static const int kProbTrackFieldNumber = 7;
  double prob_track() const;
  void set_prob_track(double value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.TitlesDocument.UmaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > artist_id_;
  mutable int _artist_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::uint64 track_id_;
  double prob_artist_;
  double prob_track_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TitlesDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.TitlesDocument) */ {
 public:
  TitlesDocument();
  virtual ~TitlesDocument();

  TitlesDocument(const TitlesDocument& from);

  inline TitlesDocument& operator=(const TitlesDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TitlesDocument(TitlesDocument&& from) noexcept
    : TitlesDocument() {
    *this = ::std::move(from);
  }

  inline TitlesDocument& operator=(TitlesDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TitlesDocument& default_instance();

  static inline const TitlesDocument* internal_default_instance() {
    return reinterpret_cast<const TitlesDocument*>(
               &_TitlesDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TitlesDocument* other);
  friend void swap(TitlesDocument& a, TitlesDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TitlesDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  TitlesDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TitlesDocument& from);
  void MergeFrom(const TitlesDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TitlesDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TitlesDocument_UmaData UmaData;

  typedef TitlesDocument_Type Type;
  static const Type TypeNone =
    TitlesDocument_Type_TypeNone;
  static const Type TypeArtist =
    TitlesDocument_Type_TypeArtist;
  static const Type TypeAlbum =
    TitlesDocument_Type_TypeAlbum;
  static const Type TypeTrack =
    TitlesDocument_Type_TypeTrack;
  static inline bool Type_IsValid(int value) {
    return TitlesDocument_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TitlesDocument_Type_Type_MIN;
  static const Type Type_MAX =
    TitlesDocument_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TitlesDocument_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TitlesDocument_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TitlesDocument_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TitlesDocument_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string artist = 2 [(.gogo.xml) = {
  void clear_artist();
  static const int kArtistFieldNumber = 2;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string track = 3 [(.gogo.xml) = {
  void clear_track();
  static const int kTrackFieldNumber = 3;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // string album = 4 [(.gogo.xml) = {
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
  bool has_uma() const;
  void clear_uma();
  static const int kUmaFieldNumber = 9;
  const ::pb::srch::music::TitlesDocument_UmaData& uma() const;
  ::pb::srch::music::TitlesDocument_UmaData* mutable_uma();
  ::pb::srch::music::TitlesDocument_UmaData* release_uma();
  void set_allocated_uma(::pb::srch::music::TitlesDocument_UmaData* uma);

  // uint64 url_hash = 1 [(.gogo.xml) = {
  void clear_url_hash();
  static const int kUrlHashFieldNumber = 1;
  ::google::protobuf::uint64 url_hash() const;
  void set_url_hash(::google::protobuf::uint64 value);

  // .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::pb::srch::music::TitlesDocument_Type type() const;
  void set_type(::pb::srch::music::TitlesDocument_Type value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.TitlesDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::pb::srch::music::TitlesDocument_UmaData* uma_;
  ::google::protobuf::uint64 url_hash_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TitlesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.TitlesResponse) */ {
 public:
  TitlesResponse();
  virtual ~TitlesResponse();

  TitlesResponse(const TitlesResponse& from);

  inline TitlesResponse& operator=(const TitlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TitlesResponse(TitlesResponse&& from) noexcept
    : TitlesResponse() {
    *this = ::std::move(from);
  }

  inline TitlesResponse& operator=(TitlesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TitlesResponse& default_instance();

  static inline const TitlesResponse* internal_default_instance() {
    return reinterpret_cast<const TitlesResponse*>(
               &_TitlesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TitlesResponse* other);
  friend void swap(TitlesResponse& a, TitlesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TitlesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TitlesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TitlesResponse& from);
  void MergeFrom(const TitlesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TitlesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.srch.music.TitlesDocument docs = 1;
  int docs_size() const;
  void clear_docs();
  static const int kDocsFieldNumber = 1;
  const ::pb::srch::music::TitlesDocument& docs(int index) const;
  ::pb::srch::music::TitlesDocument* mutable_docs(int index);
  ::pb::srch::music::TitlesDocument* add_docs();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >*
      mutable_docs();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >&
      docs() const;

  // @@protoc_insertion_point(class_scope:pb.srch.music.TitlesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument > docs_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaylistSearcherDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.PlaylistSearcherDocument) */ {
 public:
  PlaylistSearcherDocument();
  virtual ~PlaylistSearcherDocument();

  PlaylistSearcherDocument(const PlaylistSearcherDocument& from);

  inline PlaylistSearcherDocument& operator=(const PlaylistSearcherDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaylistSearcherDocument(PlaylistSearcherDocument&& from) noexcept
    : PlaylistSearcherDocument() {
    *this = ::std::move(from);
  }

  inline PlaylistSearcherDocument& operator=(PlaylistSearcherDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaylistSearcherDocument& default_instance();

  static inline const PlaylistSearcherDocument* internal_default_instance() {
    return reinterpret_cast<const PlaylistSearcherDocument*>(
               &_PlaylistSearcherDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlaylistSearcherDocument* other);
  friend void swap(PlaylistSearcherDocument& a, PlaylistSearcherDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaylistSearcherDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  PlaylistSearcherDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlaylistSearcherDocument& from);
  void MergeFrom(const PlaylistSearcherDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlaylistSearcherDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.xml) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string collection_id = 2 [(.gogo.xml) = {
  void clear_collection_id();
  static const int kCollectionIdFieldNumber = 2;
  const ::std::string& collection_id() const;
  void set_collection_id(const ::std::string& value);
  #if LANG_CXX11
  void set_collection_id(::std::string&& value);
  #endif
  void set_collection_id(const char* value);
  void set_collection_id(const char* value, size_t size);
  ::std::string* mutable_collection_id();
  ::std::string* release_collection_id();
  void set_allocated_collection_id(::std::string* collection_id);

  // string user_id = 3 [(.gogo.xml) = {
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string playlist = 4 [(.gogo.xml) = {
  void clear_playlist();
  static const int kPlaylistFieldNumber = 4;
  const ::std::string& playlist() const;
  void set_playlist(const ::std::string& value);
  #if LANG_CXX11
  void set_playlist(::std::string&& value);
  #endif
  void set_playlist(const char* value);
  void set_playlist(const char* value, size_t size);
  ::std::string* mutable_playlist();
  ::std::string* release_playlist();
  void set_allocated_playlist(::std::string* playlist);

  // string tracks_proto = 5 [(.gogo.xml) = {
  void clear_tracks_proto();
  static const int kTracksProtoFieldNumber = 5;
  const ::std::string& tracks_proto() const;
  void set_tracks_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_tracks_proto(::std::string&& value);
  #endif
  void set_tracks_proto(const char* value);
  void set_tracks_proto(const char* value, size_t size);
  ::std::string* mutable_tracks_proto();
  ::std::string* release_tracks_proto();
  void set_allocated_tracks_proto(::std::string* tracks_proto);

  // uint64 listen = 6 [(.gogo.xml) = {
  void clear_listen();
  static const int kListenFieldNumber = 6;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 refs = 7 [(.gogo.xml) = {
  void clear_refs();
  static const int kRefsFieldNumber = 7;
  ::google::protobuf::uint64 refs() const;
  void set_refs(::google::protobuf::uint64 value);

  // uint32 tracks_count = 8 [(.gogo.xml) = {
  void clear_tracks_count();
  static const int kTracksCountFieldNumber = 8;
  ::google::protobuf::uint32 tracks_count() const;
  void set_tracks_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.PlaylistSearcherDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr collection_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr playlist_;
  ::google::protobuf::internal::ArenaStringPtr tracks_proto_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 refs_;
  ::google::protobuf::uint32 tracks_count_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlbumSearcherDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.AlbumSearcherDocument) */ {
 public:
  AlbumSearcherDocument();
  virtual ~AlbumSearcherDocument();

  AlbumSearcherDocument(const AlbumSearcherDocument& from);

  inline AlbumSearcherDocument& operator=(const AlbumSearcherDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlbumSearcherDocument(AlbumSearcherDocument&& from) noexcept
    : AlbumSearcherDocument() {
    *this = ::std::move(from);
  }

  inline AlbumSearcherDocument& operator=(AlbumSearcherDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlbumSearcherDocument& default_instance();

  static inline const AlbumSearcherDocument* internal_default_instance() {
    return reinterpret_cast<const AlbumSearcherDocument*>(
               &_AlbumSearcherDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AlbumSearcherDocument* other);
  friend void swap(AlbumSearcherDocument& a, AlbumSearcherDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlbumSearcherDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  AlbumSearcherDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AlbumSearcherDocument& from);
  void MergeFrom(const AlbumSearcherDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AlbumSearcherDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.xml) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string collection_id = 2 [(.gogo.xml) = {
  void clear_collection_id();
  static const int kCollectionIdFieldNumber = 2;
  const ::std::string& collection_id() const;
  void set_collection_id(const ::std::string& value);
  #if LANG_CXX11
  void set_collection_id(::std::string&& value);
  #endif
  void set_collection_id(const char* value);
  void set_collection_id(const char* value, size_t size);
  ::std::string* mutable_collection_id();
  ::std::string* release_collection_id();
  void set_allocated_collection_id(::std::string* collection_id);

  // string user_id = 3 [(.gogo.xml) = {
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string album = 4 [(.gogo.xml) = {
  void clear_album();
  static const int kAlbumFieldNumber = 4;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string artist = 5 [(.gogo.xml) = {
  void clear_artist();
  static const int kArtistFieldNumber = 5;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string tracks_proto = 6 [(.gogo.xml) = {
  void clear_tracks_proto();
  static const int kTracksProtoFieldNumber = 6;
  const ::std::string& tracks_proto() const;
  void set_tracks_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_tracks_proto(::std::string&& value);
  #endif
  void set_tracks_proto(const char* value);
  void set_tracks_proto(const char* value, size_t size);
  ::std::string* mutable_tracks_proto();
  ::std::string* release_tracks_proto();
  void set_allocated_tracks_proto(::std::string* tracks_proto);

  // uint64 listen = 7 [(.gogo.xml) = {
  void clear_listen();
  static const int kListenFieldNumber = 7;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 refs = 8 [(.gogo.xml) = {
  void clear_refs();
  static const int kRefsFieldNumber = 8;
  ::google::protobuf::uint64 refs() const;
  void set_refs(::google::protobuf::uint64 value);

  // uint32 tracks_count = 9 [(.gogo.xml) = {
  void clear_tracks_count();
  static const int kTracksCountFieldNumber = 9;
  ::google::protobuf::uint32 tracks_count() const;
  void set_tracks_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.AlbumSearcherDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr collection_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr tracks_proto_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 refs_;
  ::google::protobuf::uint32 tracks_count_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArtistSearcherDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.ArtistSearcherDocument) */ {
 public:
  ArtistSearcherDocument();
  virtual ~ArtistSearcherDocument();

  ArtistSearcherDocument(const ArtistSearcherDocument& from);

  inline ArtistSearcherDocument& operator=(const ArtistSearcherDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArtistSearcherDocument(ArtistSearcherDocument&& from) noexcept
    : ArtistSearcherDocument() {
    *this = ::std::move(from);
  }

  inline ArtistSearcherDocument& operator=(ArtistSearcherDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtistSearcherDocument& default_instance();

  static inline const ArtistSearcherDocument* internal_default_instance() {
    return reinterpret_cast<const ArtistSearcherDocument*>(
               &_ArtistSearcherDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ArtistSearcherDocument* other);
  friend void swap(ArtistSearcherDocument& a, ArtistSearcherDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArtistSearcherDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  ArtistSearcherDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArtistSearcherDocument& from);
  void MergeFrom(const ArtistSearcherDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArtistSearcherDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.xml) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string artist_id = 2 [(.gogo.xml) = {
  void clear_artist_id();
  static const int kArtistIdFieldNumber = 2;
  const ::std::string& artist_id() const;
  void set_artist_id(const ::std::string& value);
  #if LANG_CXX11
  void set_artist_id(::std::string&& value);
  #endif
  void set_artist_id(const char* value);
  void set_artist_id(const char* value, size_t size);
  ::std::string* mutable_artist_id();
  ::std::string* release_artist_id();
  void set_allocated_artist_id(::std::string* artist_id);

  // string artist = 3 [(.gogo.xml) = {
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string track_names = 4 [(.gogo.xml) = {
  void clear_track_names();
  static const int kTrackNamesFieldNumber = 4;
  const ::std::string& track_names() const;
  void set_track_names(const ::std::string& value);
  #if LANG_CXX11
  void set_track_names(::std::string&& value);
  #endif
  void set_track_names(const char* value);
  void set_track_names(const char* value, size_t size);
  ::std::string* mutable_track_names();
  ::std::string* release_track_names();
  void set_allocated_track_names(::std::string* track_names);

  // string tracks_proto = 5 [(.gogo.xml) = {
  void clear_tracks_proto();
  static const int kTracksProtoFieldNumber = 5;
  const ::std::string& tracks_proto() const;
  void set_tracks_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_tracks_proto(::std::string&& value);
  #endif
  void set_tracks_proto(const char* value);
  void set_tracks_proto(const char* value, size_t size);
  ::std::string* mutable_tracks_proto();
  ::std::string* release_tracks_proto();
  void set_allocated_tracks_proto(::std::string* tracks_proto);

  // uint64 listen = 6 [(.gogo.xml) = {
  void clear_listen();
  static const int kListenFieldNumber = 6;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 listen_month = 7 [(.gogo.xml) = {
  void clear_listen_month();
  static const int kListenMonthFieldNumber = 7;
  ::google::protobuf::uint64 listen_month() const;
  void set_listen_month(::google::protobuf::uint64 value);

  // uint64 max_listen = 8 [(.gogo.xml) = {
  void clear_max_listen();
  static const int kMaxListenFieldNumber = 8;
  ::google::protobuf::uint64 max_listen() const;
  void set_max_listen(::google::protobuf::uint64 value);

  // uint64 max_listen_month = 9 [(.gogo.xml) = {
  void clear_max_listen_month();
  static const int kMaxListenMonthFieldNumber = 9;
  ::google::protobuf::uint64 max_listen_month() const;
  void set_max_listen_month(::google::protobuf::uint64 value);

  // uint32 tracks_count = 10 [(.gogo.xml) = {
  void clear_tracks_count();
  static const int kTracksCountFieldNumber = 10;
  ::google::protobuf::uint32 tracks_count() const;
  void set_tracks_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.ArtistSearcherDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr artist_id_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr track_names_;
  ::google::protobuf::internal::ArenaStringPtr tracks_proto_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 listen_month_;
  ::google::protobuf::uint64 max_listen_;
  ::google::protobuf::uint64 max_listen_month_;
  ::google::protobuf::uint32 tracks_count_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackSearcherDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.TrackSearcherDocument) */ {
 public:
  TrackSearcherDocument();
  virtual ~TrackSearcherDocument();

  TrackSearcherDocument(const TrackSearcherDocument& from);

  inline TrackSearcherDocument& operator=(const TrackSearcherDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackSearcherDocument(TrackSearcherDocument&& from) noexcept
    : TrackSearcherDocument() {
    *this = ::std::move(from);
  }

  inline TrackSearcherDocument& operator=(TrackSearcherDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackSearcherDocument& default_instance();

  static inline const TrackSearcherDocument* internal_default_instance() {
    return reinterpret_cast<const TrackSearcherDocument*>(
               &_TrackSearcherDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TrackSearcherDocument* other);
  friend void swap(TrackSearcherDocument& a, TrackSearcherDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackSearcherDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackSearcherDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackSearcherDocument& from);
  void MergeFrom(const TrackSearcherDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackSearcherDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.gogo.xml) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string track_id = 2 [(.gogo.xml) = {
  void clear_track_id();
  static const int kTrackIdFieldNumber = 2;
  const ::std::string& track_id() const;
  void set_track_id(const ::std::string& value);
  #if LANG_CXX11
  void set_track_id(::std::string&& value);
  #endif
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  ::std::string* mutable_track_id();
  ::std::string* release_track_id();
  void set_allocated_track_id(::std::string* track_id);

  // string user_id = 3 [(.gogo.xml) = {
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string file_id = 4 [(.gogo.xml) = {
  void clear_file_id();
  static const int kFileIdFieldNumber = 4;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // string track = 5 [(.gogo.xml) = {
  void clear_track();
  static const int kTrackFieldNumber = 5;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // string artist = 6 [(.gogo.xml) = {
  void clear_artist();
  static const int kArtistFieldNumber = 6;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string album = 7 [(.gogo.xml) = {
  void clear_album();
  static const int kAlbumFieldNumber = 7;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string uma_id = 12 [(.gogo.xml) = {
  void clear_uma_id();
  static const int kUmaIdFieldNumber = 12;
  const ::std::string& uma_id() const;
  void set_uma_id(const ::std::string& value);
  #if LANG_CXX11
  void set_uma_id(::std::string&& value);
  #endif
  void set_uma_id(const char* value);
  void set_uma_id(const char* value, size_t size);
  ::std::string* mutable_uma_id();
  ::std::string* release_uma_id();
  void set_allocated_uma_id(::std::string* uma_id);

  // uint64 shares = 9 [(.gogo.xml) = {
  void clear_shares();
  static const int kSharesFieldNumber = 9;
  ::google::protobuf::uint64 shares() const;
  void set_shares(::google::protobuf::uint64 value);

  // uint64 listen = 10 [(.gogo.xml) = {
  void clear_listen();
  static const int kListenFieldNumber = 10;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 listen_month = 11 [(.gogo.xml) = {
  void clear_listen_month();
  static const int kListenMonthFieldNumber = 11;
  ::google::protobuf::uint64 listen_month() const;
  void set_listen_month(::google::protobuf::uint64 value);

  // uint32 duration = 8 [(.gogo.xml) = {
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.TrackSearcherDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr track_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr uma_id_;
  ::google::protobuf::uint64 shares_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 listen_month_;
  ::google::protobuf::uint32 duration_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkTrackResponse_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkTrackResponse.Result) */ {
 public:
  VkTrackResponse_Result();
  virtual ~VkTrackResponse_Result();

  VkTrackResponse_Result(const VkTrackResponse_Result& from);

  inline VkTrackResponse_Result& operator=(const VkTrackResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrackResponse_Result(VkTrackResponse_Result&& from) noexcept
    : VkTrackResponse_Result() {
    *this = ::std::move(from);
  }

  inline VkTrackResponse_Result& operator=(VkTrackResponse_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrackResponse_Result& default_instance();

  static inline const VkTrackResponse_Result* internal_default_instance() {
    return reinterpret_cast<const VkTrackResponse_Result*>(
               &_VkTrackResponse_Result_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(VkTrackResponse_Result* other);
  friend void swap(VkTrackResponse_Result& a, VkTrackResponse_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrackResponse_Result* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrackResponse_Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrackResponse_Result& from);
  void MergeFrom(const VkTrackResponse_Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrackResponse_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  int alternative_ids_size() const;
  void clear_alternative_ids();
  static const int kAlternativeIdsFieldNumber = 16;
  const ::std::string& alternative_ids(int index) const;
  ::std::string* mutable_alternative_ids(int index);
  void set_alternative_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_alternative_ids(int index, ::std::string&& value);
  #endif
  void set_alternative_ids(int index, const char* value);
  void set_alternative_ids(int index, const char* value, size_t size);
  ::std::string* add_alternative_ids();
  void add_alternative_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_alternative_ids(::std::string&& value);
  #endif
  void add_alternative_ids(const char* value);
  void add_alternative_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alternative_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alternative_ids();

  // string artist = 4 [(.gogo.json) = {
  void clear_artist();
  static const int kArtistFieldNumber = 4;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string track = 5 [(.gogo.json) = {
  void clear_track();
  static const int kTrackFieldNumber = 5;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // string subtitle = 6 [(.gogo.json) = {
  void clear_subtitle();
  static const int kSubtitleFieldNumber = 6;
  const ::std::string& subtitle() const;
  void set_subtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_subtitle(::std::string&& value);
  #endif
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  ::std::string* mutable_subtitle();
  ::std::string* release_subtitle();
  void set_allocated_subtitle(::std::string* subtitle);

  // int64 audio_id = 2 [(.gogo.json) = {
  void clear_audio_id();
  static const int kAudioIdFieldNumber = 2;
  ::google::protobuf::int64 audio_id() const;
  void set_audio_id(::google::protobuf::int64 value);

  // int64 owner_id = 3 [(.gogo.json) = {
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 3;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // uint32 number = 1 [(.gogo.json) = {
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // bool is_official = 7 [(.gogo.json) = {
  void clear_is_official();
  static const int kIsOfficialFieldNumber = 7;
  bool is_official() const;
  void set_is_official(bool value);

  // uint64 listen = 8 [(.gogo.json) = {
  void clear_listen();
  static const int kListenFieldNumber = 8;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 listen_month = 9 [(.gogo.json) = {
  void clear_listen_month();
  static const int kListenMonthFieldNumber = 9;
  ::google::protobuf::uint64 listen_month() const;
  void set_listen_month(::google::protobuf::uint64 value);

  // uint64 listen_week = 10 [(.gogo.json) = {
  void clear_listen_week();
  static const int kListenWeekFieldNumber = 10;
  ::google::protobuf::uint64 listen_week() const;
  void set_listen_week(::google::protobuf::uint64 value);

  // double idf_rank = 11 [(.gogo.json) = {
  void clear_idf_rank();
  static const int kIdfRankFieldNumber = 11;
  double idf_rank() const;
  void set_idf_rank(double value);

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  void clear_max_artist_subsequence();
  static const int kMaxArtistSubsequenceFieldNumber = 12;
  ::google::protobuf::uint32 max_artist_subsequence() const;
  void set_max_artist_subsequence(::google::protobuf::uint32 value);

  // uint32 max_track_subsequence = 13 [(.gogo.json) = {
  void clear_max_track_subsequence();
  static const int kMaxTrackSubsequenceFieldNumber = 13;
  ::google::protobuf::uint32 max_track_subsequence() const;
  void set_max_track_subsequence(::google::protobuf::uint32 value);

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  void clear_num_artist_marked();
  static const int kNumArtistMarkedFieldNumber = 14;
  ::google::protobuf::uint32 num_artist_marked() const;
  void set_num_artist_marked(::google::protobuf::uint32 value);

  // uint32 num_track_marked = 15 [(.gogo.json) = {
  void clear_num_track_marked();
  static const int kNumTrackMarkedFieldNumber = 15;
  ::google::protobuf::uint32 num_track_marked() const;
  void set_num_track_marked(::google::protobuf::uint32 value);

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  void clear_num_artist_entries();
  static const int kNumArtistEntriesFieldNumber = 17;
  ::google::protobuf::uint32 num_artist_entries() const;
  void set_num_artist_entries(::google::protobuf::uint32 value);

  // uint32 num_track_entries = 18 [(.gogo.json) = {
  void clear_num_track_entries();
  static const int kNumTrackEntriesFieldNumber = 18;
  ::google::protobuf::uint32 num_track_entries() const;
  void set_num_track_entries(::google::protobuf::uint32 value);

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  void clear_artist_words_count();
  static const int kArtistWordsCountFieldNumber = 19;
  ::google::protobuf::uint32 artist_words_count() const;
  void set_artist_words_count(::google::protobuf::uint32 value);

  // uint32 track_words_count = 20 [(.gogo.json) = {
  void clear_track_words_count();
  static const int kTrackWordsCountFieldNumber = 20;
  ::google::protobuf::uint32 track_words_count() const;
  void set_track_words_count(::google::protobuf::uint32 value);

  // double sq_model_rank = 22 [(.gogo.json) = {
  void clear_sq_model_rank();
  static const int kSqModelRankFieldNumber = 22;
  double sq_model_rank() const;
  void set_sq_model_rank(double value);

  // uint32 query_words_count = 21 [(.gogo.json) = {
  void clear_query_words_count();
  static const int kQueryWordsCountFieldNumber = 21;
  ::google::protobuf::uint32 query_words_count() const;
  void set_query_words_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkTrackResponse.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alternative_ids_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr subtitle_;
  ::google::protobuf::int64 audio_id_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::uint32 number_;
  bool is_official_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 listen_month_;
  ::google::protobuf::uint64 listen_week_;
  double idf_rank_;
  ::google::protobuf::uint32 max_artist_subsequence_;
  ::google::protobuf::uint32 max_track_subsequence_;
  ::google::protobuf::uint32 num_artist_marked_;
  ::google::protobuf::uint32 num_track_marked_;
  ::google::protobuf::uint32 num_artist_entries_;
  ::google::protobuf::uint32 num_track_entries_;
  ::google::protobuf::uint32 artist_words_count_;
  ::google::protobuf::uint32 track_words_count_;
  double sq_model_rank_;
  ::google::protobuf::uint32 query_words_count_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkTrackResponse_Serp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkTrackResponse.Serp) */ {
 public:
  VkTrackResponse_Serp();
  virtual ~VkTrackResponse_Serp();

  VkTrackResponse_Serp(const VkTrackResponse_Serp& from);

  inline VkTrackResponse_Serp& operator=(const VkTrackResponse_Serp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrackResponse_Serp(VkTrackResponse_Serp&& from) noexcept
    : VkTrackResponse_Serp() {
    *this = ::std::move(from);
  }

  inline VkTrackResponse_Serp& operator=(VkTrackResponse_Serp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrackResponse_Serp& default_instance();

  static inline const VkTrackResponse_Serp* internal_default_instance() {
    return reinterpret_cast<const VkTrackResponse_Serp*>(
               &_VkTrackResponse_Serp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VkTrackResponse_Serp* other);
  friend void swap(VkTrackResponse_Serp& a, VkTrackResponse_Serp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrackResponse_Serp* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrackResponse_Serp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrackResponse_Serp& from);
  void MergeFrom(const VkTrackResponse_Serp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrackResponse_Serp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::pb::srch::music::VkTrackResponse_Result& results(int index) const;
  ::pb::srch::music::VkTrackResponse_Result* mutable_results(int index);
  ::pb::srch::music::VkTrackResponse_Result* add_results();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >&
      results() const;

  // string sm_reply_quality = 5 [(.gogo.json) = {
  void clear_sm_reply_quality();
  static const int kSmReplyQualityFieldNumber = 5;
  const ::std::string& sm_reply_quality() const;
  void set_sm_reply_quality(const ::std::string& value);
  #if LANG_CXX11
  void set_sm_reply_quality(::std::string&& value);
  #endif
  void set_sm_reply_quality(const char* value);
  void set_sm_reply_quality(const char* value, size_t size);
  ::std::string* mutable_sm_reply_quality();
  ::std::string* release_sm_reply_quality();
  void set_allocated_sm_reply_quality(::std::string* sm_reply_quality);

  // string response_class = 6 [(.gogo.json) = {
  void clear_response_class();
  static const int kResponseClassFieldNumber = 6;
  const ::std::string& response_class() const;
  void set_response_class(const ::std::string& value);
  #if LANG_CXX11
  void set_response_class(::std::string&& value);
  #endif
  void set_response_class(const char* value);
  void set_response_class(const char* value, size_t size);
  ::std::string* mutable_response_class();
  ::std::string* release_response_class();
  void set_allocated_response_class(::std::string* response_class);

  // string backend_response = 7 [(.gogo.json) = {
  void clear_backend_response();
  static const int kBackendResponseFieldNumber = 7;
  const ::std::string& backend_response() const;
  void set_backend_response(const ::std::string& value);
  #if LANG_CXX11
  void set_backend_response(::std::string&& value);
  #endif
  void set_backend_response(const char* value);
  void set_backend_response(const char* value, size_t size);
  ::std::string* mutable_backend_response();
  ::std::string* release_backend_response();
  void set_allocated_backend_response(::std::string* backend_response);

  // uint32 all_count = 2 [(.gogo.json) = {
  void clear_all_count();
  static const int kAllCountFieldNumber = 2;
  ::google::protobuf::uint32 all_count() const;
  void set_all_count(::google::protobuf::uint32 value);

  // uint32 official_count = 3 [(.gogo.json) = {
  void clear_official_count();
  static const int kOfficialCountFieldNumber = 3;
  ::google::protobuf::uint32 official_count() const;
  void set_official_count(::google::protobuf::uint32 value);

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  void clear_qddb_sessions_num_log2();
  static const int kQddbSessionsNumLog2FieldNumber = 4;
  ::google::protobuf::uint32 qddb_sessions_num_log2() const;
  void set_qddb_sessions_num_log2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkTrackResponse.Serp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result > results_;
  ::google::protobuf::internal::ArenaStringPtr sm_reply_quality_;
  ::google::protobuf::internal::ArenaStringPtr response_class_;
  ::google::protobuf::internal::ArenaStringPtr backend_response_;
  ::google::protobuf::uint32 all_count_;
  ::google::protobuf::uint32 official_count_;
  ::google::protobuf::uint32 qddb_sessions_num_log2_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkTrackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkTrackResponse) */ {
 public:
  VkTrackResponse();
  virtual ~VkTrackResponse();

  VkTrackResponse(const VkTrackResponse& from);

  inline VkTrackResponse& operator=(const VkTrackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkTrackResponse(VkTrackResponse&& from) noexcept
    : VkTrackResponse() {
    *this = ::std::move(from);
  }

  inline VkTrackResponse& operator=(VkTrackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkTrackResponse& default_instance();

  static inline const VkTrackResponse* internal_default_instance() {
    return reinterpret_cast<const VkTrackResponse*>(
               &_VkTrackResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VkTrackResponse* other);
  friend void swap(VkTrackResponse& a, VkTrackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkTrackResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VkTrackResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkTrackResponse& from);
  void MergeFrom(const VkTrackResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkTrackResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VkTrackResponse_Result Result;
  typedef VkTrackResponse_Serp Serp;

  // accessors -------------------------------------------------------

  // string qid = 1 [(.gogo.json) = {
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
  bool has_serp() const;
  void clear_serp();
  static const int kSerpFieldNumber = 2;
  const ::pb::srch::music::VkTrackResponse_Serp& serp() const;
  ::pb::srch::music::VkTrackResponse_Serp* mutable_serp();
  ::pb::srch::music::VkTrackResponse_Serp* release_serp();
  void set_allocated_serp(::pb::srch::music::VkTrackResponse_Serp* serp);

  // uint32 split = 3 [(.gogo.json) = {
  void clear_split();
  static const int kSplitFieldNumber = 3;
  ::google::protobuf::uint32 split() const;
  void set_split(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkTrackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::pb::srch::music::VkTrackResponse_Serp* serp_;
  ::google::protobuf::uint32 split_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkAlbumResponse_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkAlbumResponse.Result) */ {
 public:
  VkAlbumResponse_Result();
  virtual ~VkAlbumResponse_Result();

  VkAlbumResponse_Result(const VkAlbumResponse_Result& from);

  inline VkAlbumResponse_Result& operator=(const VkAlbumResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkAlbumResponse_Result(VkAlbumResponse_Result&& from) noexcept
    : VkAlbumResponse_Result() {
    *this = ::std::move(from);
  }

  inline VkAlbumResponse_Result& operator=(VkAlbumResponse_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkAlbumResponse_Result& default_instance();

  static inline const VkAlbumResponse_Result* internal_default_instance() {
    return reinterpret_cast<const VkAlbumResponse_Result*>(
               &_VkAlbumResponse_Result_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VkAlbumResponse_Result* other);
  friend void swap(VkAlbumResponse_Result& a, VkAlbumResponse_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkAlbumResponse_Result* New() const PROTOBUF_FINAL { return New(NULL); }

  VkAlbumResponse_Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkAlbumResponse_Result& from);
  void MergeFrom(const VkAlbumResponse_Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkAlbumResponse_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string alternative_ids = 16 [(.gogo.json) = {
  int alternative_ids_size() const;
  void clear_alternative_ids();
  static const int kAlternativeIdsFieldNumber = 16;
  const ::std::string& alternative_ids(int index) const;
  ::std::string* mutable_alternative_ids(int index);
  void set_alternative_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_alternative_ids(int index, ::std::string&& value);
  #endif
  void set_alternative_ids(int index, const char* value);
  void set_alternative_ids(int index, const char* value, size_t size);
  ::std::string* add_alternative_ids();
  void add_alternative_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_alternative_ids(::std::string&& value);
  #endif
  void add_alternative_ids(const char* value);
  void add_alternative_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alternative_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alternative_ids();

  // string artist = 4 [(.gogo.json) = {
  void clear_artist();
  static const int kArtistFieldNumber = 4;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string album = 5 [(.gogo.json) = {
  void clear_album();
  static const int kAlbumFieldNumber = 5;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string subtitle = 6 [(.gogo.json) = {
  void clear_subtitle();
  static const int kSubtitleFieldNumber = 6;
  const ::std::string& subtitle() const;
  void set_subtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_subtitle(::std::string&& value);
  #endif
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  ::std::string* mutable_subtitle();
  ::std::string* release_subtitle();
  void set_allocated_subtitle(::std::string* subtitle);

  // int64 album_id = 2 [(.gogo.json) = {
  void clear_album_id();
  static const int kAlbumIdFieldNumber = 2;
  ::google::protobuf::int64 album_id() const;
  void set_album_id(::google::protobuf::int64 value);

  // int64 owner_id = 3 [(.gogo.json) = {
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 3;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // uint32 number = 1 [(.gogo.json) = {
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // bool is_official = 7 [(.gogo.json) = {
  void clear_is_official();
  static const int kIsOfficialFieldNumber = 7;
  bool is_official() const;
  void set_is_official(bool value);

  // uint64 listen = 8 [(.gogo.json) = {
  void clear_listen();
  static const int kListenFieldNumber = 8;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 listen_month = 9 [(.gogo.json) = {
  void clear_listen_month();
  static const int kListenMonthFieldNumber = 9;
  ::google::protobuf::uint64 listen_month() const;
  void set_listen_month(::google::protobuf::uint64 value);

  // uint64 listen_week = 10 [(.gogo.json) = {
  void clear_listen_week();
  static const int kListenWeekFieldNumber = 10;
  ::google::protobuf::uint64 listen_week() const;
  void set_listen_week(::google::protobuf::uint64 value);

  // double idf_rank = 11 [(.gogo.json) = {
  void clear_idf_rank();
  static const int kIdfRankFieldNumber = 11;
  double idf_rank() const;
  void set_idf_rank(double value);

  // uint32 max_artist_subsequence = 12 [(.gogo.json) = {
  void clear_max_artist_subsequence();
  static const int kMaxArtistSubsequenceFieldNumber = 12;
  ::google::protobuf::uint32 max_artist_subsequence() const;
  void set_max_artist_subsequence(::google::protobuf::uint32 value);

  // uint32 max_album_subsequence = 13 [(.gogo.json) = {
  void clear_max_album_subsequence();
  static const int kMaxAlbumSubsequenceFieldNumber = 13;
  ::google::protobuf::uint32 max_album_subsequence() const;
  void set_max_album_subsequence(::google::protobuf::uint32 value);

  // uint32 num_artist_marked = 14 [(.gogo.json) = {
  void clear_num_artist_marked();
  static const int kNumArtistMarkedFieldNumber = 14;
  ::google::protobuf::uint32 num_artist_marked() const;
  void set_num_artist_marked(::google::protobuf::uint32 value);

  // uint32 num_album_marked = 15 [(.gogo.json) = {
  void clear_num_album_marked();
  static const int kNumAlbumMarkedFieldNumber = 15;
  ::google::protobuf::uint32 num_album_marked() const;
  void set_num_album_marked(::google::protobuf::uint32 value);

  // uint32 num_artist_entries = 17 [(.gogo.json) = {
  void clear_num_artist_entries();
  static const int kNumArtistEntriesFieldNumber = 17;
  ::google::protobuf::uint32 num_artist_entries() const;
  void set_num_artist_entries(::google::protobuf::uint32 value);

  // uint32 num_album_entries = 18 [(.gogo.json) = {
  void clear_num_album_entries();
  static const int kNumAlbumEntriesFieldNumber = 18;
  ::google::protobuf::uint32 num_album_entries() const;
  void set_num_album_entries(::google::protobuf::uint32 value);

  // uint32 artist_words_count = 19 [(.gogo.json) = {
  void clear_artist_words_count();
  static const int kArtistWordsCountFieldNumber = 19;
  ::google::protobuf::uint32 artist_words_count() const;
  void set_artist_words_count(::google::protobuf::uint32 value);

  // uint32 album_words_count = 20 [(.gogo.json) = {
  void clear_album_words_count();
  static const int kAlbumWordsCountFieldNumber = 20;
  ::google::protobuf::uint32 album_words_count() const;
  void set_album_words_count(::google::protobuf::uint32 value);

  // uint32 query_words_count = 21 [(.gogo.json) = {
  void clear_query_words_count();
  static const int kQueryWordsCountFieldNumber = 21;
  ::google::protobuf::uint32 query_words_count() const;
  void set_query_words_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkAlbumResponse.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alternative_ids_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr subtitle_;
  ::google::protobuf::int64 album_id_;
  ::google::protobuf::int64 owner_id_;
  ::google::protobuf::uint32 number_;
  bool is_official_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 listen_month_;
  ::google::protobuf::uint64 listen_week_;
  double idf_rank_;
  ::google::protobuf::uint32 max_artist_subsequence_;
  ::google::protobuf::uint32 max_album_subsequence_;
  ::google::protobuf::uint32 num_artist_marked_;
  ::google::protobuf::uint32 num_album_marked_;
  ::google::protobuf::uint32 num_artist_entries_;
  ::google::protobuf::uint32 num_album_entries_;
  ::google::protobuf::uint32 artist_words_count_;
  ::google::protobuf::uint32 album_words_count_;
  ::google::protobuf::uint32 query_words_count_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkAlbumResponse_Serp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkAlbumResponse.Serp) */ {
 public:
  VkAlbumResponse_Serp();
  virtual ~VkAlbumResponse_Serp();

  VkAlbumResponse_Serp(const VkAlbumResponse_Serp& from);

  inline VkAlbumResponse_Serp& operator=(const VkAlbumResponse_Serp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkAlbumResponse_Serp(VkAlbumResponse_Serp&& from) noexcept
    : VkAlbumResponse_Serp() {
    *this = ::std::move(from);
  }

  inline VkAlbumResponse_Serp& operator=(VkAlbumResponse_Serp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkAlbumResponse_Serp& default_instance();

  static inline const VkAlbumResponse_Serp* internal_default_instance() {
    return reinterpret_cast<const VkAlbumResponse_Serp*>(
               &_VkAlbumResponse_Serp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(VkAlbumResponse_Serp* other);
  friend void swap(VkAlbumResponse_Serp& a, VkAlbumResponse_Serp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkAlbumResponse_Serp* New() const PROTOBUF_FINAL { return New(NULL); }

  VkAlbumResponse_Serp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkAlbumResponse_Serp& from);
  void MergeFrom(const VkAlbumResponse_Serp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkAlbumResponse_Serp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::pb::srch::music::VkAlbumResponse_Result& results(int index) const;
  ::pb::srch::music::VkAlbumResponse_Result* mutable_results(int index);
  ::pb::srch::music::VkAlbumResponse_Result* add_results();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >&
      results() const;

  // string sm_reply_quality = 5 [(.gogo.json) = {
  void clear_sm_reply_quality();
  static const int kSmReplyQualityFieldNumber = 5;
  const ::std::string& sm_reply_quality() const;
  void set_sm_reply_quality(const ::std::string& value);
  #if LANG_CXX11
  void set_sm_reply_quality(::std::string&& value);
  #endif
  void set_sm_reply_quality(const char* value);
  void set_sm_reply_quality(const char* value, size_t size);
  ::std::string* mutable_sm_reply_quality();
  ::std::string* release_sm_reply_quality();
  void set_allocated_sm_reply_quality(::std::string* sm_reply_quality);

  // string response_class = 6 [(.gogo.json) = {
  void clear_response_class();
  static const int kResponseClassFieldNumber = 6;
  const ::std::string& response_class() const;
  void set_response_class(const ::std::string& value);
  #if LANG_CXX11
  void set_response_class(::std::string&& value);
  #endif
  void set_response_class(const char* value);
  void set_response_class(const char* value, size_t size);
  ::std::string* mutable_response_class();
  ::std::string* release_response_class();
  void set_allocated_response_class(::std::string* response_class);

  // uint32 all_count = 2 [(.gogo.json) = {
  void clear_all_count();
  static const int kAllCountFieldNumber = 2;
  ::google::protobuf::uint32 all_count() const;
  void set_all_count(::google::protobuf::uint32 value);

  // uint32 official_count = 3 [(.gogo.json) = {
  void clear_official_count();
  static const int kOfficialCountFieldNumber = 3;
  ::google::protobuf::uint32 official_count() const;
  void set_official_count(::google::protobuf::uint32 value);

  // uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
  void clear_qddb_sessions_num_log2();
  static const int kQddbSessionsNumLog2FieldNumber = 4;
  ::google::protobuf::uint32 qddb_sessions_num_log2() const;
  void set_qddb_sessions_num_log2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkAlbumResponse.Serp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result > results_;
  ::google::protobuf::internal::ArenaStringPtr sm_reply_quality_;
  ::google::protobuf::internal::ArenaStringPtr response_class_;
  ::google::protobuf::uint32 all_count_;
  ::google::protobuf::uint32 official_count_;
  ::google::protobuf::uint32 qddb_sessions_num_log2_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VkAlbumResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.VkAlbumResponse) */ {
 public:
  VkAlbumResponse();
  virtual ~VkAlbumResponse();

  VkAlbumResponse(const VkAlbumResponse& from);

  inline VkAlbumResponse& operator=(const VkAlbumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VkAlbumResponse(VkAlbumResponse&& from) noexcept
    : VkAlbumResponse() {
    *this = ::std::move(from);
  }

  inline VkAlbumResponse& operator=(VkAlbumResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VkAlbumResponse& default_instance();

  static inline const VkAlbumResponse* internal_default_instance() {
    return reinterpret_cast<const VkAlbumResponse*>(
               &_VkAlbumResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(VkAlbumResponse* other);
  friend void swap(VkAlbumResponse& a, VkAlbumResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VkAlbumResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VkAlbumResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VkAlbumResponse& from);
  void MergeFrom(const VkAlbumResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VkAlbumResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VkAlbumResponse_Result Result;
  typedef VkAlbumResponse_Serp Serp;

  // accessors -------------------------------------------------------

  // string qid = 1 [(.gogo.json) = {
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
  bool has_serp() const;
  void clear_serp();
  static const int kSerpFieldNumber = 2;
  const ::pb::srch::music::VkAlbumResponse_Serp& serp() const;
  ::pb::srch::music::VkAlbumResponse_Serp* mutable_serp();
  ::pb::srch::music::VkAlbumResponse_Serp* release_serp();
  void set_allocated_serp(::pb::srch::music::VkAlbumResponse_Serp* serp);

  // uint32 split = 3 [(.gogo.json) = {
  void clear_split();
  static const int kSplitFieldNumber = 3;
  ::google::protobuf::uint32 split() const;
  void set_split(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.VkAlbumResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::pb::srch::music::VkAlbumResponse_Serp* serp_;
  ::google::protobuf::uint32 split_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagerDocument_Track : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.ManagerDocument.Track) */ {
 public:
  ManagerDocument_Track();
  virtual ~ManagerDocument_Track();

  ManagerDocument_Track(const ManagerDocument_Track& from);

  inline ManagerDocument_Track& operator=(const ManagerDocument_Track& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagerDocument_Track(ManagerDocument_Track&& from) noexcept
    : ManagerDocument_Track() {
    *this = ::std::move(from);
  }

  inline ManagerDocument_Track& operator=(ManagerDocument_Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagerDocument_Track& default_instance();

  static inline const ManagerDocument_Track* internal_default_instance() {
    return reinterpret_cast<const ManagerDocument_Track*>(
               &_ManagerDocument_Track_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ManagerDocument_Track* other);
  friend void swap(ManagerDocument_Track& a, ManagerDocument_Track& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagerDocument_Track* New() const PROTOBUF_FINAL { return New(NULL); }

  ManagerDocument_Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManagerDocument_Track& from);
  void MergeFrom(const ManagerDocument_Track& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManagerDocument_Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string artist = 1;
  void clear_artist();
  static const int kArtistFieldNumber = 1;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string track = 2;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // string duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string file_id = 5;
  void clear_file_id();
  static const int kFileIdFieldNumber = 5;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // @@protoc_insertion_point(class_scope:pb.srch.music.ManagerDocument.Track)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagerDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.srch.music.ManagerDocument) */ {
 public:
  ManagerDocument();
  virtual ~ManagerDocument();

  ManagerDocument(const ManagerDocument& from);

  inline ManagerDocument& operator=(const ManagerDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagerDocument(ManagerDocument&& from) noexcept
    : ManagerDocument() {
    *this = ::std::move(from);
  }

  inline ManagerDocument& operator=(ManagerDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagerDocument& default_instance();

  static inline const ManagerDocument* internal_default_instance() {
    return reinterpret_cast<const ManagerDocument*>(
               &_ManagerDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ManagerDocument* other);
  friend void swap(ManagerDocument& a, ManagerDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagerDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  ManagerDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManagerDocument& from);
  void MergeFrom(const ManagerDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManagerDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ManagerDocument_Track Track;

  typedef ManagerDocument_Type Type;
  static const Type TypeNone =
    ManagerDocument_Type_TypeNone;
  static const Type TypeArtist =
    ManagerDocument_Type_TypeArtist;
  static const Type TypeAlbum =
    ManagerDocument_Type_TypeAlbum;
  static const Type TypeTrack =
    ManagerDocument_Type_TypeTrack;
  static const Type TypePlaylist =
    ManagerDocument_Type_TypePlaylist;
  static inline bool Type_IsValid(int value) {
    return ManagerDocument_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ManagerDocument_Type_Type_MIN;
  static const Type Type_MAX =
    ManagerDocument_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ManagerDocument_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ManagerDocument_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ManagerDocument_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ManagerDocument_Type_Parse(name, value);
  }

  typedef ManagerDocument_Category Category;
  static const Category CategoryNone =
    ManagerDocument_Category_CategoryNone;
  static const Category CategoryNailed =
    ManagerDocument_Category_CategoryNailed;
  static const Category CategorySearcher =
    ManagerDocument_Category_CategorySearcher;
  static const Category CategorySupposed =
    ManagerDocument_Category_CategorySupposed;
  static const Category CategoryDict =
    ManagerDocument_Category_CategoryDict;
  static const Category CategoryLatest =
    ManagerDocument_Category_CategoryLatest;
  static inline bool Category_IsValid(int value) {
    return ManagerDocument_Category_IsValid(value);
  }
  static const Category Category_MIN =
    ManagerDocument_Category_Category_MIN;
  static const Category Category_MAX =
    ManagerDocument_Category_Category_MAX;
  static const int Category_ARRAYSIZE =
    ManagerDocument_Category_Category_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Category_descriptor() {
    return ManagerDocument_Category_descriptor();
  }
  static inline const ::std::string& Category_Name(Category value) {
    return ManagerDocument_Category_Name(value);
  }
  static inline bool Category_Parse(const ::std::string& name,
      Category* value) {
    return ManagerDocument_Category_Parse(name, value);
  }

  typedef ManagerDocument_LatestType LatestType;
  static const LatestType LatestNone =
    ManagerDocument_LatestType_LatestNone;
  static const LatestType LatestAlbum =
    ManagerDocument_LatestType_LatestAlbum;
  static const LatestType LatestTrack =
    ManagerDocument_LatestType_LatestTrack;
  static inline bool LatestType_IsValid(int value) {
    return ManagerDocument_LatestType_IsValid(value);
  }
  static const LatestType LatestType_MIN =
    ManagerDocument_LatestType_LatestType_MIN;
  static const LatestType LatestType_MAX =
    ManagerDocument_LatestType_LatestType_MAX;
  static const int LatestType_ARRAYSIZE =
    ManagerDocument_LatestType_LatestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LatestType_descriptor() {
    return ManagerDocument_LatestType_descriptor();
  }
  static inline const ::std::string& LatestType_Name(LatestType value) {
    return ManagerDocument_LatestType_Name(value);
  }
  static inline bool LatestType_Parse(const ::std::string& name,
      LatestType* value) {
    return ManagerDocument_LatestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 9;
  const ::pb::srch::music::ManagerDocument_Track& tracks(int index) const;
  ::pb::srch::music::ManagerDocument_Track* mutable_tracks(int index);
  ::pb::srch::music::ManagerDocument_Track* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >&
      tracks() const;

  // string artist = 4;
  void clear_artist();
  static const int kArtistFieldNumber = 4;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string album = 5;
  void clear_album();
  static const int kAlbumFieldNumber = 5;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string track = 6;
  void clear_track();
  static const int kTrackFieldNumber = 6;
  const ::std::string& track() const;
  void set_track(const ::std::string& value);
  #if LANG_CXX11
  void set_track(::std::string&& value);
  #endif
  void set_track(const char* value);
  void set_track(const char* value, size_t size);
  ::std::string* mutable_track();
  ::std::string* release_track();
  void set_allocated_track(::std::string* track);

  // string playlist = 7;
  void clear_playlist();
  static const int kPlaylistFieldNumber = 7;
  const ::std::string& playlist() const;
  void set_playlist(const ::std::string& value);
  #if LANG_CXX11
  void set_playlist(::std::string&& value);
  #endif
  void set_playlist(const char* value);
  void set_playlist(const char* value, size_t size);
  ::std::string* mutable_playlist();
  ::std::string* release_playlist();
  void set_allocated_playlist(::std::string* playlist);

  // .pb.srch.music.ManagerDocument.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb::srch::music::ManagerDocument_Type type() const;
  void set_type(::pb::srch::music::ManagerDocument_Type value);

  // bool is_nailed = 2;
  void clear_is_nailed();
  static const int kIsNailedFieldNumber = 2;
  bool is_nailed() const;
  void set_is_nailed(bool value);

  // uint64 tracks_count = 8;
  void clear_tracks_count();
  static const int kTracksCountFieldNumber = 8;
  ::google::protobuf::uint64 tracks_count() const;
  void set_tracks_count(::google::protobuf::uint64 value);

  // .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
  void clear_latest_type();
  static const int kLatestTypeFieldNumber = 3;
  ::pb::srch::music::ManagerDocument_LatestType latest_type() const;
  void set_latest_type(::pb::srch::music::ManagerDocument_LatestType value);

  // .pb.srch.music.ManagerDocument.Category category = 16;
  void clear_category();
  static const int kCategoryFieldNumber = 16;
  ::pb::srch::music::ManagerDocument_Category category() const;
  void set_category(::pb::srch::music::ManagerDocument_Category value);

  // uint64 listen = 10;
  void clear_listen();
  static const int kListenFieldNumber = 10;
  ::google::protobuf::uint64 listen() const;
  void set_listen(::google::protobuf::uint64 value);

  // uint64 listen_month = 11;
  void clear_listen_month();
  static const int kListenMonthFieldNumber = 11;
  ::google::protobuf::uint64 listen_month() const;
  void set_listen_month(::google::protobuf::uint64 value);

  // uint64 max_listen = 12;
  void clear_max_listen();
  static const int kMaxListenFieldNumber = 12;
  ::google::protobuf::uint64 max_listen() const;
  void set_max_listen(::google::protobuf::uint64 value);

  // uint64 max_listen_month = 13;
  void clear_max_listen_month();
  static const int kMaxListenMonthFieldNumber = 13;
  ::google::protobuf::uint64 max_listen_month() const;
  void set_max_listen_month(::google::protobuf::uint64 value);

  // uint64 shares = 14;
  void clear_shares();
  static const int kSharesFieldNumber = 14;
  ::google::protobuf::uint64 shares() const;
  void set_shares(::google::protobuf::uint64 value);

  // uint64 refs = 15;
  void clear_refs();
  static const int kRefsFieldNumber = 15;
  ::google::protobuf::uint64 refs() const;
  void set_refs(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.srch.music.ManagerDocument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track > tracks_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr track_;
  ::google::protobuf::internal::ArenaStringPtr playlist_;
  int type_;
  bool is_nailed_;
  ::google::protobuf::uint64 tracks_count_;
  int latest_type_;
  int category_;
  ::google::protobuf::uint64 listen_;
  ::google::protobuf::uint64 listen_month_;
  ::google::protobuf::uint64 max_listen_;
  ::google::protobuf::uint64 max_listen_month_;
  ::google::protobuf::uint64 shares_;
  ::google::protobuf::uint64 refs_;
  mutable int _cached_size_;
  friend struct protobuf_music_5fresponse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CacheEntry

// string response = 1;
inline void CacheEntry::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CacheEntry::response() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.response)
  return response_.GetNoArena();
}
inline void CacheEntry::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.response)
}
#if LANG_CXX11
inline void CacheEntry::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.CacheEntry.response)
}
#endif
inline void CacheEntry::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.CacheEntry.response)
}
inline void CacheEntry::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.CacheEntry.response)
}
inline ::std::string* CacheEntry::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.CacheEntry.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheEntry::release_response() {
  // @@protoc_insertion_point(field_release:pb.srch.music.CacheEntry.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheEntry::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.CacheEntry.response)
}

// uint64 begin_time = 2;
inline void CacheEntry::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheEntry::begin_time() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.begin_time)
  return begin_time_;
}
inline void CacheEntry::set_begin_time(::google::protobuf::uint64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.begin_time)
}

// uint64 expiration = 3;
inline void CacheEntry::clear_expiration() {
  expiration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheEntry::expiration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.CacheEntry.expiration)
  return expiration_;
}
inline void CacheEntry::set_expiration(::google::protobuf::uint64 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.CacheEntry.expiration)
}

// -------------------------------------------------------------------

// TitlesDocument_UmaData

// repeated uint64 artist_id = 1 [(.gogo.xml) = {
inline int TitlesDocument_UmaData::artist_id_size() const {
  return artist_id_.size();
}
inline void TitlesDocument_UmaData::clear_artist_id() {
  artist_id_.Clear();
}
inline ::google::protobuf::uint64 TitlesDocument_UmaData::artist_id(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return artist_id_.Get(index);
}
inline void TitlesDocument_UmaData::set_artist_id(int index, ::google::protobuf::uint64 value) {
  artist_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.artist_id)
}
inline void TitlesDocument_UmaData::add_artist_id(::google::protobuf::uint64 value) {
  artist_id_.Add(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.TitlesDocument.UmaData.artist_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TitlesDocument_UmaData::artist_id() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return artist_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TitlesDocument_UmaData::mutable_artist_id() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.TitlesDocument.UmaData.artist_id)
  return &artist_id_;
}

// uint64 track_id = 2 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TitlesDocument_UmaData::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.track_id)
  return track_id_;
}
inline void TitlesDocument_UmaData::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.track_id)
}

// string artist = 3 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument_UmaData::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.artist)
  return artist_.GetNoArena();
}
inline void TitlesDocument_UmaData::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.artist)
}
#if LANG_CXX11
inline void TitlesDocument_UmaData::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.artist)
}
#endif
inline void TitlesDocument_UmaData::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.artist)
}
inline void TitlesDocument_UmaData::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.artist)
}
inline ::std::string* TitlesDocument_UmaData::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument_UmaData::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument_UmaData::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.artist)
}

// string album = 4 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument_UmaData::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.album)
  return album_.GetNoArena();
}
inline void TitlesDocument_UmaData::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.album)
}
#if LANG_CXX11
inline void TitlesDocument_UmaData::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.album)
}
#endif
inline void TitlesDocument_UmaData::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.album)
}
inline void TitlesDocument_UmaData::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.album)
}
inline ::std::string* TitlesDocument_UmaData::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument_UmaData::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument_UmaData::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.album)
}

// string track = 5 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument_UmaData::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.track)
  return track_.GetNoArena();
}
inline void TitlesDocument_UmaData::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.track)
}
#if LANG_CXX11
inline void TitlesDocument_UmaData::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.UmaData.track)
}
#endif
inline void TitlesDocument_UmaData::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.UmaData.track)
}
inline void TitlesDocument_UmaData::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.UmaData.track)
}
inline ::std::string* TitlesDocument_UmaData::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.UmaData.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument_UmaData::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.UmaData.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument_UmaData::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.UmaData.track)
}

// double prob_artist = 6 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_prob_artist() {
  prob_artist_ = 0;
}
inline double TitlesDocument_UmaData::prob_artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.prob_artist)
  return prob_artist_;
}
inline void TitlesDocument_UmaData::set_prob_artist(double value) {
  
  prob_artist_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.prob_artist)
}

// double prob_track = 7 [(.gogo.xml) = {
inline void TitlesDocument_UmaData::clear_prob_track() {
  prob_track_ = 0;
}
inline double TitlesDocument_UmaData::prob_track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.UmaData.prob_track)
  return prob_track_;
}
inline void TitlesDocument_UmaData::set_prob_track(double value) {
  
  prob_track_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.UmaData.prob_track)
}

// -------------------------------------------------------------------

// TitlesDocument

// uint64 url_hash = 1 [(.gogo.xml) = {
inline void TitlesDocument::clear_url_hash() {
  url_hash_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TitlesDocument::url_hash() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.url_hash)
  return url_hash_;
}
inline void TitlesDocument::set_url_hash(::google::protobuf::uint64 value) {
  
  url_hash_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.url_hash)
}

// .pb.srch.music.TitlesDocument.Type type = 8 [(.gogo.xml) = {
inline void TitlesDocument::clear_type() {
  type_ = 0;
}
inline ::pb::srch::music::TitlesDocument_Type TitlesDocument::type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.type)
  return static_cast< ::pb::srch::music::TitlesDocument_Type >(type_);
}
inline void TitlesDocument::set_type(::pb::srch::music::TitlesDocument_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.type)
}

// string artist = 2 [(.gogo.xml) = {
inline void TitlesDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.artist)
  return artist_.GetNoArena();
}
inline void TitlesDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.artist)
}
#if LANG_CXX11
inline void TitlesDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.artist)
}
#endif
inline void TitlesDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.artist)
}
inline void TitlesDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.artist)
}
inline ::std::string* TitlesDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.artist)
}

// string album = 4 [(.gogo.xml) = {
inline void TitlesDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.album)
  return album_.GetNoArena();
}
inline void TitlesDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.album)
}
#if LANG_CXX11
inline void TitlesDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.album)
}
#endif
inline void TitlesDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.album)
}
inline void TitlesDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.album)
}
inline ::std::string* TitlesDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.album)
}

// string track = 3 [(.gogo.xml) = {
inline void TitlesDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TitlesDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.track)
  return track_.GetNoArena();
}
inline void TitlesDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TitlesDocument.track)
}
#if LANG_CXX11
inline void TitlesDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TitlesDocument.track)
}
#endif
inline void TitlesDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TitlesDocument.track)
}
inline void TitlesDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TitlesDocument.track)
}
inline ::std::string* TitlesDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TitlesDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TitlesDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.track)
}

// .pb.srch.music.TitlesDocument.UmaData uma = 9 [(.gogo.xml) = {
inline bool TitlesDocument::has_uma() const {
  return this != internal_default_instance() && uma_ != NULL;
}
inline void TitlesDocument::clear_uma() {
  if (GetArenaNoVirtual() == NULL && uma_ != NULL) delete uma_;
  uma_ = NULL;
}
inline const ::pb::srch::music::TitlesDocument_UmaData& TitlesDocument::uma() const {
  const ::pb::srch::music::TitlesDocument_UmaData* p = uma_;
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesDocument.uma)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::TitlesDocument_UmaData*>(
      &::pb::srch::music::_TitlesDocument_UmaData_default_instance_);
}
inline ::pb::srch::music::TitlesDocument_UmaData* TitlesDocument::mutable_uma() {
  
  if (uma_ == NULL) {
    uma_ = new ::pb::srch::music::TitlesDocument_UmaData;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesDocument.uma)
  return uma_;
}
inline ::pb::srch::music::TitlesDocument_UmaData* TitlesDocument::release_uma() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TitlesDocument.uma)
  
  ::pb::srch::music::TitlesDocument_UmaData* temp = uma_;
  uma_ = NULL;
  return temp;
}
inline void TitlesDocument::set_allocated_uma(::pb::srch::music::TitlesDocument_UmaData* uma) {
  delete uma_;
  uma_ = uma;
  if (uma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TitlesDocument.uma)
}

// -------------------------------------------------------------------

// TitlesResponse

// repeated .pb.srch.music.TitlesDocument docs = 1;
inline int TitlesResponse::docs_size() const {
  return docs_.size();
}
inline void TitlesResponse::clear_docs() {
  docs_.Clear();
}
inline const ::pb::srch::music::TitlesDocument& TitlesResponse::docs(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TitlesResponse.docs)
  return docs_.Get(index);
}
inline ::pb::srch::music::TitlesDocument* TitlesResponse::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TitlesResponse.docs)
  return docs_.Mutable(index);
}
inline ::pb::srch::music::TitlesDocument* TitlesResponse::add_docs() {
  // @@protoc_insertion_point(field_add:pb.srch.music.TitlesResponse.docs)
  return docs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >*
TitlesResponse::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.TitlesResponse.docs)
  return &docs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::TitlesDocument >&
TitlesResponse::docs() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.TitlesResponse.docs)
  return docs_;
}

// -------------------------------------------------------------------

// PlaylistSearcherDocument

// string id = 1 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaylistSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.id)
  return id_.GetNoArena();
}
inline void PlaylistSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.id)
}
#if LANG_CXX11
inline void PlaylistSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.id)
}
#endif
inline void PlaylistSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.id)
}
inline void PlaylistSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.id)
}
inline ::std::string* PlaylistSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaylistSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaylistSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.id)
}

// string collection_id = 2 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_collection_id() {
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaylistSearcherDocument::collection_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.collection_id)
  return collection_id_.GetNoArena();
}
inline void PlaylistSearcherDocument::set_collection_id(const ::std::string& value) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
#if LANG_CXX11
inline void PlaylistSearcherDocument::set_collection_id(::std::string&& value) {
  
  collection_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
#endif
inline void PlaylistSearcherDocument::set_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
inline void PlaylistSearcherDocument::set_collection_id(const char* value, size_t size) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.collection_id)
}
inline ::std::string* PlaylistSearcherDocument::mutable_collection_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.collection_id)
  return collection_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaylistSearcherDocument::release_collection_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.collection_id)
  
  return collection_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaylistSearcherDocument::set_allocated_collection_id(::std::string* collection_id) {
  if (collection_id != NULL) {
    
  } else {
    
  }
  collection_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.collection_id)
}

// string user_id = 3 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaylistSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
inline void PlaylistSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.user_id)
}
#if LANG_CXX11
inline void PlaylistSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.user_id)
}
#endif
inline void PlaylistSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.user_id)
}
inline void PlaylistSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.user_id)
}
inline ::std::string* PlaylistSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaylistSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaylistSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.user_id)
}

// string playlist = 4 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_playlist() {
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaylistSearcherDocument::playlist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.playlist)
  return playlist_.GetNoArena();
}
inline void PlaylistSearcherDocument::set_playlist(const ::std::string& value) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.playlist)
}
#if LANG_CXX11
inline void PlaylistSearcherDocument::set_playlist(::std::string&& value) {
  
  playlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.playlist)
}
#endif
inline void PlaylistSearcherDocument::set_playlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.playlist)
}
inline void PlaylistSearcherDocument::set_playlist(const char* value, size_t size) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.playlist)
}
inline ::std::string* PlaylistSearcherDocument::mutable_playlist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.playlist)
  return playlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaylistSearcherDocument::release_playlist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.playlist)
  
  return playlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaylistSearcherDocument::set_allocated_playlist(::std::string* playlist) {
  if (playlist != NULL) {
    
  } else {
    
  }
  playlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.playlist)
}

// string tracks_proto = 5 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaylistSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
inline void PlaylistSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
#if LANG_CXX11
inline void PlaylistSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
#endif
inline void PlaylistSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
inline void PlaylistSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}
inline ::std::string* PlaylistSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaylistSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaylistSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.PlaylistSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 8 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
inline ::google::protobuf::uint32 PlaylistSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.tracks_count)
  return tracks_count_;
}
inline void PlaylistSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.tracks_count)
}

// uint64 listen = 6 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlaylistSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.listen)
  return listen_;
}
inline void PlaylistSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.listen)
}

// uint64 refs = 7 [(.gogo.xml) = {
inline void PlaylistSearcherDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlaylistSearcherDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.PlaylistSearcherDocument.refs)
  return refs_;
}
inline void PlaylistSearcherDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.PlaylistSearcherDocument.refs)
}

// -------------------------------------------------------------------

// AlbumSearcherDocument

// string id = 1 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.id)
  return id_.GetNoArena();
}
inline void AlbumSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.id)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.id)
}
#endif
inline void AlbumSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.id)
}
inline void AlbumSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.id)
}
inline ::std::string* AlbumSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.id)
}

// string collection_id = 2 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_collection_id() {
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::collection_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.collection_id)
  return collection_id_.GetNoArena();
}
inline void AlbumSearcherDocument::set_collection_id(const ::std::string& value) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.collection_id)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_collection_id(::std::string&& value) {
  
  collection_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.collection_id)
}
#endif
inline void AlbumSearcherDocument::set_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.collection_id)
}
inline void AlbumSearcherDocument::set_collection_id(const char* value, size_t size) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.collection_id)
}
inline ::std::string* AlbumSearcherDocument::mutable_collection_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.collection_id)
  return collection_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_collection_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.collection_id)
  
  return collection_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_collection_id(::std::string* collection_id) {
  if (collection_id != NULL) {
    
  } else {
    
  }
  collection_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.collection_id)
}

// string user_id = 3 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
inline void AlbumSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.user_id)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.user_id)
}
#endif
inline void AlbumSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.user_id)
}
inline void AlbumSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.user_id)
}
inline ::std::string* AlbumSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.user_id)
}

// string album = 4 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.album)
  return album_.GetNoArena();
}
inline void AlbumSearcherDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.album)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.album)
}
#endif
inline void AlbumSearcherDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.album)
}
inline void AlbumSearcherDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.album)
}
inline ::std::string* AlbumSearcherDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.album)
}

// string artist = 5 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.artist)
  return artist_.GetNoArena();
}
inline void AlbumSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.artist)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.artist)
}
#endif
inline void AlbumSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.artist)
}
inline void AlbumSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.artist)
}
inline ::std::string* AlbumSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.artist)
}

// string tracks_proto = 6 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlbumSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
inline void AlbumSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
#if LANG_CXX11
inline void AlbumSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
#endif
inline void AlbumSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
inline void AlbumSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}
inline ::std::string* AlbumSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlbumSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.AlbumSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlbumSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.AlbumSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 9 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
inline ::google::protobuf::uint32 AlbumSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.tracks_count)
  return tracks_count_;
}
inline void AlbumSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.tracks_count)
}

// uint64 listen = 7 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AlbumSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.listen)
  return listen_;
}
inline void AlbumSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.listen)
}

// uint64 refs = 8 [(.gogo.xml) = {
inline void AlbumSearcherDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AlbumSearcherDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.AlbumSearcherDocument.refs)
  return refs_;
}
inline void AlbumSearcherDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.AlbumSearcherDocument.refs)
}

// -------------------------------------------------------------------

// ArtistSearcherDocument

// string id = 1 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtistSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.id)
  return id_.GetNoArena();
}
inline void ArtistSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.id)
}
#if LANG_CXX11
inline void ArtistSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.id)
}
#endif
inline void ArtistSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.id)
}
inline void ArtistSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.id)
}
inline ::std::string* ArtistSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtistSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtistSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.id)
}

// string artist_id = 2 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_artist_id() {
  artist_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtistSearcherDocument::artist_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.artist_id)
  return artist_id_.GetNoArena();
}
inline void ArtistSearcherDocument::set_artist_id(const ::std::string& value) {
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.artist_id)
}
#if LANG_CXX11
inline void ArtistSearcherDocument::set_artist_id(::std::string&& value) {
  
  artist_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.artist_id)
}
#endif
inline void ArtistSearcherDocument::set_artist_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.artist_id)
}
inline void ArtistSearcherDocument::set_artist_id(const char* value, size_t size) {
  
  artist_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.artist_id)
}
inline ::std::string* ArtistSearcherDocument::mutable_artist_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.artist_id)
  return artist_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtistSearcherDocument::release_artist_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.artist_id)
  
  return artist_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtistSearcherDocument::set_allocated_artist_id(::std::string* artist_id) {
  if (artist_id != NULL) {
    
  } else {
    
  }
  artist_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.artist_id)
}

// string artist = 3 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtistSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.artist)
  return artist_.GetNoArena();
}
inline void ArtistSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.artist)
}
#if LANG_CXX11
inline void ArtistSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.artist)
}
#endif
inline void ArtistSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.artist)
}
inline void ArtistSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.artist)
}
inline ::std::string* ArtistSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtistSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtistSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.artist)
}

// string track_names = 4 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_track_names() {
  track_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtistSearcherDocument::track_names() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.track_names)
  return track_names_.GetNoArena();
}
inline void ArtistSearcherDocument::set_track_names(const ::std::string& value) {
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.track_names)
}
#if LANG_CXX11
inline void ArtistSearcherDocument::set_track_names(::std::string&& value) {
  
  track_names_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.track_names)
}
#endif
inline void ArtistSearcherDocument::set_track_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.track_names)
}
inline void ArtistSearcherDocument::set_track_names(const char* value, size_t size) {
  
  track_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.track_names)
}
inline ::std::string* ArtistSearcherDocument::mutable_track_names() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.track_names)
  return track_names_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtistSearcherDocument::release_track_names() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.track_names)
  
  return track_names_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtistSearcherDocument::set_allocated_track_names(::std::string* track_names) {
  if (track_names != NULL) {
    
  } else {
    
  }
  track_names_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_names);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.track_names)
}

// string tracks_proto = 5 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_tracks_proto() {
  tracks_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtistSearcherDocument::tracks_proto() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  return tracks_proto_.GetNoArena();
}
inline void ArtistSearcherDocument::set_tracks_proto(const ::std::string& value) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
#if LANG_CXX11
inline void ArtistSearcherDocument::set_tracks_proto(::std::string&& value) {
  
  tracks_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
#endif
inline void ArtistSearcherDocument::set_tracks_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
inline void ArtistSearcherDocument::set_tracks_proto(const char* value, size_t size) {
  
  tracks_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}
inline ::std::string* ArtistSearcherDocument::mutable_tracks_proto() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  return tracks_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtistSearcherDocument::release_tracks_proto() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ArtistSearcherDocument.tracks_proto)
  
  return tracks_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtistSearcherDocument::set_allocated_tracks_proto(::std::string* tracks_proto) {
  if (tracks_proto != NULL) {
    
  } else {
    
  }
  tracks_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_proto);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ArtistSearcherDocument.tracks_proto)
}

// uint32 tracks_count = 10 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_tracks_count() {
  tracks_count_ = 0u;
}
inline ::google::protobuf::uint32 ArtistSearcherDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.tracks_count)
  return tracks_count_;
}
inline void ArtistSearcherDocument::set_tracks_count(::google::protobuf::uint32 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.tracks_count)
}

// uint64 listen = 6 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ArtistSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.listen)
  return listen_;
}
inline void ArtistSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.listen)
}

// uint64 listen_month = 7 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ArtistSearcherDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.listen_month)
  return listen_month_;
}
inline void ArtistSearcherDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.listen_month)
}

// uint64 max_listen = 8 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_max_listen() {
  max_listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ArtistSearcherDocument::max_listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.max_listen)
  return max_listen_;
}
inline void ArtistSearcherDocument::set_max_listen(::google::protobuf::uint64 value) {
  
  max_listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.max_listen)
}

// uint64 max_listen_month = 9 [(.gogo.xml) = {
inline void ArtistSearcherDocument::clear_max_listen_month() {
  max_listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ArtistSearcherDocument::max_listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ArtistSearcherDocument.max_listen_month)
  return max_listen_month_;
}
inline void ArtistSearcherDocument::set_max_listen_month(::google::protobuf::uint64 value) {
  
  max_listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ArtistSearcherDocument.max_listen_month)
}

// -------------------------------------------------------------------

// TrackSearcherDocument

// string id = 1 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.id)
  return id_.GetNoArena();
}
inline void TrackSearcherDocument::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.id)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.id)
}
#endif
inline void TrackSearcherDocument::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.id)
}
inline void TrackSearcherDocument::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.id)
}
inline ::std::string* TrackSearcherDocument::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.id)
}

// string track_id = 2 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::track_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.track_id)
  return track_id_.GetNoArena();
}
inline void TrackSearcherDocument::set_track_id(const ::std::string& value) {
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.track_id)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_track_id(::std::string&& value) {
  
  track_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.track_id)
}
#endif
inline void TrackSearcherDocument::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.track_id)
}
inline void TrackSearcherDocument::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.track_id)
}
inline ::std::string* TrackSearcherDocument::mutable_track_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.track_id)
  return track_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_track_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.track_id)
  
  return track_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_track_id(::std::string* track_id) {
  if (track_id != NULL) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.track_id)
}

// string user_id = 3 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.user_id)
  return user_id_.GetNoArena();
}
inline void TrackSearcherDocument::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.user_id)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.user_id)
}
#endif
inline void TrackSearcherDocument::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.user_id)
}
inline void TrackSearcherDocument::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.user_id)
}
inline ::std::string* TrackSearcherDocument::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.user_id)
}

// string file_id = 4 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.file_id)
  return file_id_.GetNoArena();
}
inline void TrackSearcherDocument::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.file_id)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.file_id)
}
#endif
inline void TrackSearcherDocument::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.file_id)
}
inline void TrackSearcherDocument::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.file_id)
}
inline ::std::string* TrackSearcherDocument::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.file_id)
}

// string uma_id = 12 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_uma_id() {
  uma_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::uma_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.uma_id)
  return uma_id_.GetNoArena();
}
inline void TrackSearcherDocument::set_uma_id(const ::std::string& value) {
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.uma_id)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_uma_id(::std::string&& value) {
  
  uma_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.uma_id)
}
#endif
inline void TrackSearcherDocument::set_uma_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.uma_id)
}
inline void TrackSearcherDocument::set_uma_id(const char* value, size_t size) {
  
  uma_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.uma_id)
}
inline ::std::string* TrackSearcherDocument::mutable_uma_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.uma_id)
  return uma_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_uma_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.uma_id)
  
  return uma_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_uma_id(::std::string* uma_id) {
  if (uma_id != NULL) {
    
  } else {
    
  }
  uma_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uma_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.uma_id)
}

// string track = 5 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.track)
  return track_.GetNoArena();
}
inline void TrackSearcherDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.track)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.track)
}
#endif
inline void TrackSearcherDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.track)
}
inline void TrackSearcherDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.track)
}
inline ::std::string* TrackSearcherDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.track)
}

// string artist = 6 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.artist)
  return artist_.GetNoArena();
}
inline void TrackSearcherDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.artist)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.artist)
}
#endif
inline void TrackSearcherDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.artist)
}
inline void TrackSearcherDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.artist)
}
inline ::std::string* TrackSearcherDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.artist)
}

// string album = 7 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackSearcherDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.album)
  return album_.GetNoArena();
}
inline void TrackSearcherDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.album)
}
#if LANG_CXX11
inline void TrackSearcherDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.TrackSearcherDocument.album)
}
#endif
inline void TrackSearcherDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.TrackSearcherDocument.album)
}
inline void TrackSearcherDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.TrackSearcherDocument.album)
}
inline ::std::string* TrackSearcherDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.TrackSearcherDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackSearcherDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.TrackSearcherDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackSearcherDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.TrackSearcherDocument.album)
}

// uint32 duration = 8 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 TrackSearcherDocument::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.duration)
  return duration_;
}
inline void TrackSearcherDocument::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.duration)
}

// uint64 shares = 9 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_shares() {
  shares_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrackSearcherDocument::shares() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.shares)
  return shares_;
}
inline void TrackSearcherDocument::set_shares(::google::protobuf::uint64 value) {
  
  shares_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.shares)
}

// uint64 listen = 10 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrackSearcherDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.listen)
  return listen_;
}
inline void TrackSearcherDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.listen)
}

// uint64 listen_month = 11 [(.gogo.xml) = {
inline void TrackSearcherDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrackSearcherDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.TrackSearcherDocument.listen_month)
  return listen_month_;
}
inline void TrackSearcherDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.TrackSearcherDocument.listen_month)
}

// -------------------------------------------------------------------

// VkTrackResponse_Result

// uint32 number = 1 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::number() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.number)
  return number_;
}
inline void VkTrackResponse_Result::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.number)
}

// int64 audio_id = 2 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_audio_id() {
  audio_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VkTrackResponse_Result::audio_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.audio_id)
  return audio_id_;
}
inline void VkTrackResponse_Result::set_audio_id(::google::protobuf::int64 value) {
  
  audio_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.audio_id)
}

// int64 owner_id = 3 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VkTrackResponse_Result::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.owner_id)
  return owner_id_;
}
inline void VkTrackResponse_Result::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.owner_id)
}

// string artist = 4 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Result::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.artist)
  return artist_.GetNoArena();
}
inline void VkTrackResponse_Result::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.artist)
}
#if LANG_CXX11
inline void VkTrackResponse_Result::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.artist)
}
#endif
inline void VkTrackResponse_Result::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.artist)
}
inline void VkTrackResponse_Result::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.artist)
}
inline ::std::string* VkTrackResponse_Result::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Result::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Result::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.artist)
}

// string track = 5 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Result::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.track)
  return track_.GetNoArena();
}
inline void VkTrackResponse_Result::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.track)
}
#if LANG_CXX11
inline void VkTrackResponse_Result::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.track)
}
#endif
inline void VkTrackResponse_Result::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.track)
}
inline void VkTrackResponse_Result::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.track)
}
inline ::std::string* VkTrackResponse_Result::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Result::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Result::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.track)
}

// string subtitle = 6 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Result::subtitle() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.subtitle)
  return subtitle_.GetNoArena();
}
inline void VkTrackResponse_Result::set_subtitle(const ::std::string& value) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.subtitle)
}
#if LANG_CXX11
inline void VkTrackResponse_Result::set_subtitle(::std::string&& value) {
  
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Result.subtitle)
}
#endif
inline void VkTrackResponse_Result::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.subtitle)
}
inline void VkTrackResponse_Result::set_subtitle(const char* value, size_t size) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.subtitle)
}
inline ::std::string* VkTrackResponse_Result::mutable_subtitle() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Result::release_subtitle() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Result.subtitle)
  
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Result::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    
  } else {
    
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Result.subtitle)
}

// bool is_official = 7 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_is_official() {
  is_official_ = false;
}
inline bool VkTrackResponse_Result::is_official() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.is_official)
  return is_official_;
}
inline void VkTrackResponse_Result::set_is_official(bool value) {
  
  is_official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.is_official)
}

// uint64 listen = 8 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkTrackResponse_Result::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen)
  return listen_;
}
inline void VkTrackResponse_Result::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen)
}

// uint64 listen_month = 9 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkTrackResponse_Result::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen_month)
  return listen_month_;
}
inline void VkTrackResponse_Result::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen_month)
}

// uint64 listen_week = 10 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_listen_week() {
  listen_week_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkTrackResponse_Result::listen_week() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.listen_week)
  return listen_week_;
}
inline void VkTrackResponse_Result::set_listen_week(::google::protobuf::uint64 value) {
  
  listen_week_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.listen_week)
}

// double idf_rank = 11 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_idf_rank() {
  idf_rank_ = 0;
}
inline double VkTrackResponse_Result::idf_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.idf_rank)
  return idf_rank_;
}
inline void VkTrackResponse_Result::set_idf_rank(double value) {
  
  idf_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.idf_rank)
}

// double sq_model_rank = 22 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_sq_model_rank() {
  sq_model_rank_ = 0;
}
inline double VkTrackResponse_Result::sq_model_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.sq_model_rank)
  return sq_model_rank_;
}
inline void VkTrackResponse_Result::set_sq_model_rank(double value) {
  
  sq_model_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.sq_model_rank)
}

// uint32 max_artist_subsequence = 12 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_max_artist_subsequence() {
  max_artist_subsequence_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::max_artist_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.max_artist_subsequence)
  return max_artist_subsequence_;
}
inline void VkTrackResponse_Result::set_max_artist_subsequence(::google::protobuf::uint32 value) {
  
  max_artist_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.max_artist_subsequence)
}

// uint32 max_track_subsequence = 13 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_max_track_subsequence() {
  max_track_subsequence_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::max_track_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.max_track_subsequence)
  return max_track_subsequence_;
}
inline void VkTrackResponse_Result::set_max_track_subsequence(::google::protobuf::uint32 value) {
  
  max_track_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.max_track_subsequence)
}

// uint32 num_artist_marked = 14 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_num_artist_marked() {
  num_artist_marked_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::num_artist_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_artist_marked)
  return num_artist_marked_;
}
inline void VkTrackResponse_Result::set_num_artist_marked(::google::protobuf::uint32 value) {
  
  num_artist_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_artist_marked)
}

// uint32 num_track_marked = 15 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_num_track_marked() {
  num_track_marked_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::num_track_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_track_marked)
  return num_track_marked_;
}
inline void VkTrackResponse_Result::set_num_track_marked(::google::protobuf::uint32 value) {
  
  num_track_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_track_marked)
}

// uint32 num_artist_entries = 17 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_num_artist_entries() {
  num_artist_entries_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::num_artist_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_artist_entries)
  return num_artist_entries_;
}
inline void VkTrackResponse_Result::set_num_artist_entries(::google::protobuf::uint32 value) {
  
  num_artist_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_artist_entries)
}

// uint32 num_track_entries = 18 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_num_track_entries() {
  num_track_entries_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::num_track_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.num_track_entries)
  return num_track_entries_;
}
inline void VkTrackResponse_Result::set_num_track_entries(::google::protobuf::uint32 value) {
  
  num_track_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.num_track_entries)
}

// uint32 artist_words_count = 19 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_artist_words_count() {
  artist_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::artist_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.artist_words_count)
  return artist_words_count_;
}
inline void VkTrackResponse_Result::set_artist_words_count(::google::protobuf::uint32 value) {
  
  artist_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.artist_words_count)
}

// uint32 track_words_count = 20 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_track_words_count() {
  track_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::track_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.track_words_count)
  return track_words_count_;
}
inline void VkTrackResponse_Result::set_track_words_count(::google::protobuf::uint32 value) {
  
  track_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.track_words_count)
}

// uint32 query_words_count = 21 [(.gogo.json) = {
inline void VkTrackResponse_Result::clear_query_words_count() {
  query_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Result::query_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.query_words_count)
  return query_words_count_;
}
inline void VkTrackResponse_Result::set_query_words_count(::google::protobuf::uint32 value) {
  
  query_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.query_words_count)
}

// repeated string alternative_ids = 16 [(.gogo.json) = {
inline int VkTrackResponse_Result::alternative_ids_size() const {
  return alternative_ids_.size();
}
inline void VkTrackResponse_Result::clear_alternative_ids() {
  alternative_ids_.Clear();
}
inline const ::std::string& VkTrackResponse_Result::alternative_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Get(index);
}
inline ::std::string* VkTrackResponse_Result::mutable_alternative_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Mutable(index);
}
inline void VkTrackResponse_Result::set_alternative_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkTrackResponse_Result::set_alternative_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkTrackResponse_Result::set_alternative_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
inline void VkTrackResponse_Result::set_alternative_ids(int index, const char* value, size_t size) {
  alternative_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
inline ::std::string* VkTrackResponse_Result::add_alternative_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_.Add();
}
inline void VkTrackResponse_Result::add_alternative_ids(const ::std::string& value) {
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
#if LANG_CXX11
inline void VkTrackResponse_Result::add_alternative_ids(::std::string&& value) {
  alternative_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
#endif
inline void VkTrackResponse_Result::add_alternative_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
inline void VkTrackResponse_Result::add_alternative_ids(const char* value, size_t size) {
  alternative_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.VkTrackResponse.Result.alternative_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkTrackResponse_Result::alternative_ids() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return alternative_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkTrackResponse_Result::mutable_alternative_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkTrackResponse.Result.alternative_ids)
  return &alternative_ids_;
}

// -------------------------------------------------------------------

// VkTrackResponse_Serp

// repeated .pb.srch.music.VkTrackResponse.Result results = 1 [(.gogo.json) = {
inline int VkTrackResponse_Serp::results_size() const {
  return results_.size();
}
inline void VkTrackResponse_Serp::clear_results() {
  results_.Clear();
}
inline const ::pb::srch::music::VkTrackResponse_Result& VkTrackResponse_Serp::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Get(index);
}
inline ::pb::srch::music::VkTrackResponse_Result* VkTrackResponse_Serp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Mutable(index);
}
inline ::pb::srch::music::VkTrackResponse_Result* VkTrackResponse_Serp::add_results() {
  // @@protoc_insertion_point(field_add:pb.srch.music.VkTrackResponse.Serp.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >*
VkTrackResponse_Serp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkTrackResponse.Serp.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkTrackResponse_Result >&
VkTrackResponse_Serp::results() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkTrackResponse.Serp.results)
  return results_;
}

// string backend_response = 7 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_backend_response() {
  backend_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Serp::backend_response() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.backend_response)
  return backend_response_.GetNoArena();
}
inline void VkTrackResponse_Serp::set_backend_response(const ::std::string& value) {
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
#if LANG_CXX11
inline void VkTrackResponse_Serp::set_backend_response(::std::string&& value) {
  
  backend_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
#endif
inline void VkTrackResponse_Serp::set_backend_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
inline void VkTrackResponse_Serp::set_backend_response(const char* value, size_t size) {
  
  backend_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.backend_response)
}
inline ::std::string* VkTrackResponse_Serp::mutable_backend_response() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.backend_response)
  return backend_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Serp::release_backend_response() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.backend_response)
  
  return backend_response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Serp::set_allocated_backend_response(::std::string* backend_response) {
  if (backend_response != NULL) {
    
  } else {
    
  }
  backend_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backend_response);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.backend_response)
}

// string response_class = 6 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_response_class() {
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Serp::response_class() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.response_class)
  return response_class_.GetNoArena();
}
inline void VkTrackResponse_Serp::set_response_class(const ::std::string& value) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.response_class)
}
#if LANG_CXX11
inline void VkTrackResponse_Serp::set_response_class(::std::string&& value) {
  
  response_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.response_class)
}
#endif
inline void VkTrackResponse_Serp::set_response_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.response_class)
}
inline void VkTrackResponse_Serp::set_response_class(const char* value, size_t size) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.response_class)
}
inline ::std::string* VkTrackResponse_Serp::mutable_response_class() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.response_class)
  return response_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Serp::release_response_class() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.response_class)
  
  return response_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Serp::set_allocated_response_class(::std::string* response_class) {
  if (response_class != NULL) {
    
  } else {
    
  }
  response_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_class);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.response_class)
}

// uint32 all_count = 2 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_all_count() {
  all_count_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Serp::all_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.all_count)
  return all_count_;
}
inline void VkTrackResponse_Serp::set_all_count(::google::protobuf::uint32 value) {
  
  all_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.all_count)
}

// uint32 official_count = 3 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_official_count() {
  official_count_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Serp::official_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.official_count)
  return official_count_;
}
inline void VkTrackResponse_Serp::set_official_count(::google::protobuf::uint32 value) {
  
  official_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.official_count)
}

// uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse_Serp::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
inline void VkTrackResponse_Serp::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.qddb_sessions_num_log2)
}

// string sm_reply_quality = 5 [(.gogo.json) = {
inline void VkTrackResponse_Serp::clear_sm_reply_quality() {
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse_Serp::sm_reply_quality() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.GetNoArena();
}
inline void VkTrackResponse_Serp::set_sm_reply_quality(const ::std::string& value) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
#if LANG_CXX11
inline void VkTrackResponse_Serp::set_sm_reply_quality(::std::string&& value) {
  
  sm_reply_quality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
#endif
inline void VkTrackResponse_Serp::set_sm_reply_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
inline void VkTrackResponse_Serp::set_sm_reply_quality(const char* value, size_t size) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}
inline ::std::string* VkTrackResponse_Serp::mutable_sm_reply_quality() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse_Serp::release_sm_reply_quality() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
  
  return sm_reply_quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse_Serp::set_allocated_sm_reply_quality(::std::string* sm_reply_quality) {
  if (sm_reply_quality != NULL) {
    
  } else {
    
  }
  sm_reply_quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_reply_quality);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.Serp.sm_reply_quality)
}

// -------------------------------------------------------------------

// VkTrackResponse

// string qid = 1 [(.gogo.json) = {
inline void VkTrackResponse::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkTrackResponse::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.qid)
  return qid_.GetNoArena();
}
inline void VkTrackResponse::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.qid)
}
#if LANG_CXX11
inline void VkTrackResponse::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkTrackResponse.qid)
}
#endif
inline void VkTrackResponse::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkTrackResponse.qid)
}
inline void VkTrackResponse::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkTrackResponse.qid)
}
inline ::std::string* VkTrackResponse::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkTrackResponse::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkTrackResponse::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.qid)
}

// .pb.srch.music.VkTrackResponse.Serp serp = 2 [(.gogo.json) = {
inline bool VkTrackResponse::has_serp() const {
  return this != internal_default_instance() && serp_ != NULL;
}
inline void VkTrackResponse::clear_serp() {
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) delete serp_;
  serp_ = NULL;
}
inline const ::pb::srch::music::VkTrackResponse_Serp& VkTrackResponse::serp() const {
  const ::pb::srch::music::VkTrackResponse_Serp* p = serp_;
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.serp)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::VkTrackResponse_Serp*>(
      &::pb::srch::music::_VkTrackResponse_Serp_default_instance_);
}
inline ::pb::srch::music::VkTrackResponse_Serp* VkTrackResponse::mutable_serp() {
  
  if (serp_ == NULL) {
    serp_ = new ::pb::srch::music::VkTrackResponse_Serp;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkTrackResponse.serp)
  return serp_;
}
inline ::pb::srch::music::VkTrackResponse_Serp* VkTrackResponse::release_serp() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkTrackResponse.serp)
  
  ::pb::srch::music::VkTrackResponse_Serp* temp = serp_;
  serp_ = NULL;
  return temp;
}
inline void VkTrackResponse::set_allocated_serp(::pb::srch::music::VkTrackResponse_Serp* serp) {
  delete serp_;
  serp_ = serp;
  if (serp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkTrackResponse.serp)
}

// uint32 split = 3 [(.gogo.json) = {
inline void VkTrackResponse::clear_split() {
  split_ = 0u;
}
inline ::google::protobuf::uint32 VkTrackResponse::split() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkTrackResponse.split)
  return split_;
}
inline void VkTrackResponse::set_split(::google::protobuf::uint32 value) {
  
  split_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkTrackResponse.split)
}

// -------------------------------------------------------------------

// VkAlbumResponse_Result

// uint32 number = 1 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::number() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.number)
  return number_;
}
inline void VkAlbumResponse_Result::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.number)
}

// int64 album_id = 2 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_album_id() {
  album_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VkAlbumResponse_Result::album_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album_id)
  return album_id_;
}
inline void VkAlbumResponse_Result::set_album_id(::google::protobuf::int64 value) {
  
  album_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album_id)
}

// int64 owner_id = 3 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VkAlbumResponse_Result::owner_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.owner_id)
  return owner_id_;
}
inline void VkAlbumResponse_Result::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.owner_id)
}

// string artist = 4 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse_Result::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.artist)
  return artist_.GetNoArena();
}
inline void VkAlbumResponse_Result::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.artist)
}
#if LANG_CXX11
inline void VkAlbumResponse_Result::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.artist)
}
#endif
inline void VkAlbumResponse_Result::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.artist)
}
inline void VkAlbumResponse_Result::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.artist)
}
inline ::std::string* VkAlbumResponse_Result::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse_Result::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse_Result::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.artist)
}

// string album = 5 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse_Result::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album)
  return album_.GetNoArena();
}
inline void VkAlbumResponse_Result::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album)
}
#if LANG_CXX11
inline void VkAlbumResponse_Result::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.album)
}
#endif
inline void VkAlbumResponse_Result::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.album)
}
inline void VkAlbumResponse_Result::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.album)
}
inline ::std::string* VkAlbumResponse_Result::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse_Result::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse_Result::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.album)
}

// string subtitle = 6 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse_Result::subtitle() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.subtitle)
  return subtitle_.GetNoArena();
}
inline void VkAlbumResponse_Result::set_subtitle(const ::std::string& value) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
#if LANG_CXX11
inline void VkAlbumResponse_Result::set_subtitle(::std::string&& value) {
  
  subtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
#endif
inline void VkAlbumResponse_Result::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
inline void VkAlbumResponse_Result::set_subtitle(const char* value, size_t size) {
  
  subtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.subtitle)
}
inline ::std::string* VkAlbumResponse_Result::mutable_subtitle() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.subtitle)
  return subtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse_Result::release_subtitle() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Result.subtitle)
  
  return subtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse_Result::set_allocated_subtitle(::std::string* subtitle) {
  if (subtitle != NULL) {
    
  } else {
    
  }
  subtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Result.subtitle)
}

// bool is_official = 7 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_is_official() {
  is_official_ = false;
}
inline bool VkAlbumResponse_Result::is_official() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.is_official)
  return is_official_;
}
inline void VkAlbumResponse_Result::set_is_official(bool value) {
  
  is_official_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.is_official)
}

// uint64 listen = 8 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkAlbumResponse_Result::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen)
  return listen_;
}
inline void VkAlbumResponse_Result::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen)
}

// uint64 listen_month = 9 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkAlbumResponse_Result::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen_month)
  return listen_month_;
}
inline void VkAlbumResponse_Result::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen_month)
}

// uint64 listen_week = 10 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_listen_week() {
  listen_week_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VkAlbumResponse_Result::listen_week() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.listen_week)
  return listen_week_;
}
inline void VkAlbumResponse_Result::set_listen_week(::google::protobuf::uint64 value) {
  
  listen_week_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.listen_week)
}

// double idf_rank = 11 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_idf_rank() {
  idf_rank_ = 0;
}
inline double VkAlbumResponse_Result::idf_rank() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.idf_rank)
  return idf_rank_;
}
inline void VkAlbumResponse_Result::set_idf_rank(double value) {
  
  idf_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.idf_rank)
}

// uint32 max_artist_subsequence = 12 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_max_artist_subsequence() {
  max_artist_subsequence_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::max_artist_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.max_artist_subsequence)
  return max_artist_subsequence_;
}
inline void VkAlbumResponse_Result::set_max_artist_subsequence(::google::protobuf::uint32 value) {
  
  max_artist_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.max_artist_subsequence)
}

// uint32 max_album_subsequence = 13 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_max_album_subsequence() {
  max_album_subsequence_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::max_album_subsequence() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.max_album_subsequence)
  return max_album_subsequence_;
}
inline void VkAlbumResponse_Result::set_max_album_subsequence(::google::protobuf::uint32 value) {
  
  max_album_subsequence_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.max_album_subsequence)
}

// uint32 num_artist_marked = 14 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_num_artist_marked() {
  num_artist_marked_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::num_artist_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_artist_marked)
  return num_artist_marked_;
}
inline void VkAlbumResponse_Result::set_num_artist_marked(::google::protobuf::uint32 value) {
  
  num_artist_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_artist_marked)
}

// uint32 num_album_marked = 15 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_num_album_marked() {
  num_album_marked_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::num_album_marked() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_album_marked)
  return num_album_marked_;
}
inline void VkAlbumResponse_Result::set_num_album_marked(::google::protobuf::uint32 value) {
  
  num_album_marked_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_album_marked)
}

// uint32 num_artist_entries = 17 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_num_artist_entries() {
  num_artist_entries_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::num_artist_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_artist_entries)
  return num_artist_entries_;
}
inline void VkAlbumResponse_Result::set_num_artist_entries(::google::protobuf::uint32 value) {
  
  num_artist_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_artist_entries)
}

// uint32 num_album_entries = 18 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_num_album_entries() {
  num_album_entries_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::num_album_entries() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.num_album_entries)
  return num_album_entries_;
}
inline void VkAlbumResponse_Result::set_num_album_entries(::google::protobuf::uint32 value) {
  
  num_album_entries_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.num_album_entries)
}

// uint32 artist_words_count = 19 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_artist_words_count() {
  artist_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::artist_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.artist_words_count)
  return artist_words_count_;
}
inline void VkAlbumResponse_Result::set_artist_words_count(::google::protobuf::uint32 value) {
  
  artist_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.artist_words_count)
}

// uint32 album_words_count = 20 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_album_words_count() {
  album_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::album_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.album_words_count)
  return album_words_count_;
}
inline void VkAlbumResponse_Result::set_album_words_count(::google::protobuf::uint32 value) {
  
  album_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.album_words_count)
}

// uint32 query_words_count = 21 [(.gogo.json) = {
inline void VkAlbumResponse_Result::clear_query_words_count() {
  query_words_count_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Result::query_words_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.query_words_count)
  return query_words_count_;
}
inline void VkAlbumResponse_Result::set_query_words_count(::google::protobuf::uint32 value) {
  
  query_words_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.query_words_count)
}

// repeated string alternative_ids = 16 [(.gogo.json) = {
inline int VkAlbumResponse_Result::alternative_ids_size() const {
  return alternative_ids_.size();
}
inline void VkAlbumResponse_Result::clear_alternative_ids() {
  alternative_ids_.Clear();
}
inline const ::std::string& VkAlbumResponse_Result::alternative_ids(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Get(index);
}
inline ::std::string* VkAlbumResponse_Result::mutable_alternative_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Mutable(index);
}
inline void VkAlbumResponse_Result::set_alternative_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VkAlbumResponse_Result::set_alternative_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  alternative_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VkAlbumResponse_Result::set_alternative_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
inline void VkAlbumResponse_Result::set_alternative_ids(int index, const char* value, size_t size) {
  alternative_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
inline ::std::string* VkAlbumResponse_Result::add_alternative_ids() {
  // @@protoc_insertion_point(field_add_mutable:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_.Add();
}
inline void VkAlbumResponse_Result::add_alternative_ids(const ::std::string& value) {
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
#if LANG_CXX11
inline void VkAlbumResponse_Result::add_alternative_ids(::std::string&& value) {
  alternative_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
#endif
inline void VkAlbumResponse_Result::add_alternative_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alternative_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
inline void VkAlbumResponse_Result::add_alternative_ids(const char* value, size_t size) {
  alternative_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VkAlbumResponse_Result::alternative_ids() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return alternative_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VkAlbumResponse_Result::mutable_alternative_ids() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkAlbumResponse.Result.alternative_ids)
  return &alternative_ids_;
}

// -------------------------------------------------------------------

// VkAlbumResponse_Serp

// repeated .pb.srch.music.VkAlbumResponse.Result results = 1 [(.gogo.json) = {
inline int VkAlbumResponse_Serp::results_size() const {
  return results_.size();
}
inline void VkAlbumResponse_Serp::clear_results() {
  results_.Clear();
}
inline const ::pb::srch::music::VkAlbumResponse_Result& VkAlbumResponse_Serp::results(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Get(index);
}
inline ::pb::srch::music::VkAlbumResponse_Result* VkAlbumResponse_Serp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Mutable(index);
}
inline ::pb::srch::music::VkAlbumResponse_Result* VkAlbumResponse_Serp::add_results() {
  // @@protoc_insertion_point(field_add:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >*
VkAlbumResponse_Serp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.VkAlbumResponse.Serp.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::VkAlbumResponse_Result >&
VkAlbumResponse_Serp::results() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.VkAlbumResponse.Serp.results)
  return results_;
}

// string response_class = 6 [(.gogo.json) = {
inline void VkAlbumResponse_Serp::clear_response_class() {
  response_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse_Serp::response_class() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.response_class)
  return response_class_.GetNoArena();
}
inline void VkAlbumResponse_Serp::set_response_class(const ::std::string& value) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
#if LANG_CXX11
inline void VkAlbumResponse_Serp::set_response_class(::std::string&& value) {
  
  response_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
#endif
inline void VkAlbumResponse_Serp::set_response_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
inline void VkAlbumResponse_Serp::set_response_class(const char* value, size_t size) {
  
  response_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Serp.response_class)
}
inline ::std::string* VkAlbumResponse_Serp::mutable_response_class() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.response_class)
  return response_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse_Serp::release_response_class() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Serp.response_class)
  
  return response_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse_Serp::set_allocated_response_class(::std::string* response_class) {
  if (response_class != NULL) {
    
  } else {
    
  }
  response_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_class);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Serp.response_class)
}

// uint32 all_count = 2 [(.gogo.json) = {
inline void VkAlbumResponse_Serp::clear_all_count() {
  all_count_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Serp::all_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.all_count)
  return all_count_;
}
inline void VkAlbumResponse_Serp::set_all_count(::google::protobuf::uint32 value) {
  
  all_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.all_count)
}

// uint32 official_count = 3 [(.gogo.json) = {
inline void VkAlbumResponse_Serp::clear_official_count() {
  official_count_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Serp::official_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.official_count)
  return official_count_;
}
inline void VkAlbumResponse_Serp::set_official_count(::google::protobuf::uint32 value) {
  
  official_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.official_count)
}

// uint32 qddb_sessions_num_log2 = 4 [(.gogo.json) = {
inline void VkAlbumResponse_Serp::clear_qddb_sessions_num_log2() {
  qddb_sessions_num_log2_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse_Serp::qddb_sessions_num_log2() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.qddb_sessions_num_log2)
  return qddb_sessions_num_log2_;
}
inline void VkAlbumResponse_Serp::set_qddb_sessions_num_log2(::google::protobuf::uint32 value) {
  
  qddb_sessions_num_log2_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.qddb_sessions_num_log2)
}

// string sm_reply_quality = 5 [(.gogo.json) = {
inline void VkAlbumResponse_Serp::clear_sm_reply_quality() {
  sm_reply_quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse_Serp::sm_reply_quality() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.GetNoArena();
}
inline void VkAlbumResponse_Serp::set_sm_reply_quality(const ::std::string& value) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
#if LANG_CXX11
inline void VkAlbumResponse_Serp::set_sm_reply_quality(::std::string&& value) {
  
  sm_reply_quality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
#endif
inline void VkAlbumResponse_Serp::set_sm_reply_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
inline void VkAlbumResponse_Serp::set_sm_reply_quality(const char* value, size_t size) {
  
  sm_reply_quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}
inline ::std::string* VkAlbumResponse_Serp::mutable_sm_reply_quality() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  return sm_reply_quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse_Serp::release_sm_reply_quality() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
  
  return sm_reply_quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse_Serp::set_allocated_sm_reply_quality(::std::string* sm_reply_quality) {
  if (sm_reply_quality != NULL) {
    
  } else {
    
  }
  sm_reply_quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sm_reply_quality);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.Serp.sm_reply_quality)
}

// -------------------------------------------------------------------

// VkAlbumResponse

// string qid = 1 [(.gogo.json) = {
inline void VkAlbumResponse::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VkAlbumResponse::qid() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.qid)
  return qid_.GetNoArena();
}
inline void VkAlbumResponse::set_qid(const ::std::string& value) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.qid)
}
#if LANG_CXX11
inline void VkAlbumResponse::set_qid(::std::string&& value) {
  
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.VkAlbumResponse.qid)
}
#endif
inline void VkAlbumResponse::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.VkAlbumResponse.qid)
}
inline void VkAlbumResponse::set_qid(const char* value, size_t size) {
  
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.VkAlbumResponse.qid)
}
inline ::std::string* VkAlbumResponse::mutable_qid() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VkAlbumResponse::release_qid() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.qid)
  
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VkAlbumResponse::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    
  } else {
    
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.qid)
}

// .pb.srch.music.VkAlbumResponse.Serp serp = 2 [(.gogo.json) = {
inline bool VkAlbumResponse::has_serp() const {
  return this != internal_default_instance() && serp_ != NULL;
}
inline void VkAlbumResponse::clear_serp() {
  if (GetArenaNoVirtual() == NULL && serp_ != NULL) delete serp_;
  serp_ = NULL;
}
inline const ::pb::srch::music::VkAlbumResponse_Serp& VkAlbumResponse::serp() const {
  const ::pb::srch::music::VkAlbumResponse_Serp* p = serp_;
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.serp)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::srch::music::VkAlbumResponse_Serp*>(
      &::pb::srch::music::_VkAlbumResponse_Serp_default_instance_);
}
inline ::pb::srch::music::VkAlbumResponse_Serp* VkAlbumResponse::mutable_serp() {
  
  if (serp_ == NULL) {
    serp_ = new ::pb::srch::music::VkAlbumResponse_Serp;
  }
  // @@protoc_insertion_point(field_mutable:pb.srch.music.VkAlbumResponse.serp)
  return serp_;
}
inline ::pb::srch::music::VkAlbumResponse_Serp* VkAlbumResponse::release_serp() {
  // @@protoc_insertion_point(field_release:pb.srch.music.VkAlbumResponse.serp)
  
  ::pb::srch::music::VkAlbumResponse_Serp* temp = serp_;
  serp_ = NULL;
  return temp;
}
inline void VkAlbumResponse::set_allocated_serp(::pb::srch::music::VkAlbumResponse_Serp* serp) {
  delete serp_;
  serp_ = serp;
  if (serp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.VkAlbumResponse.serp)
}

// uint32 split = 3 [(.gogo.json) = {
inline void VkAlbumResponse::clear_split() {
  split_ = 0u;
}
inline ::google::protobuf::uint32 VkAlbumResponse::split() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.VkAlbumResponse.split)
  return split_;
}
inline void VkAlbumResponse::set_split(::google::protobuf::uint32 value) {
  
  split_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.VkAlbumResponse.split)
}

// -------------------------------------------------------------------

// ManagerDocument_Track

// string artist = 1;
inline void ManagerDocument_Track::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument_Track::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.artist)
  return artist_.GetNoArena();
}
inline void ManagerDocument_Track::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.artist)
}
#if LANG_CXX11
inline void ManagerDocument_Track::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.artist)
}
#endif
inline void ManagerDocument_Track::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.artist)
}
inline void ManagerDocument_Track::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.artist)
}
inline ::std::string* ManagerDocument_Track::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument_Track::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument_Track::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.artist)
}

// string track = 2;
inline void ManagerDocument_Track::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument_Track::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.track)
  return track_.GetNoArena();
}
inline void ManagerDocument_Track::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.track)
}
#if LANG_CXX11
inline void ManagerDocument_Track::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.track)
}
#endif
inline void ManagerDocument_Track::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.track)
}
inline void ManagerDocument_Track::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.track)
}
inline ::std::string* ManagerDocument_Track::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument_Track::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument_Track::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.track)
}

// string duration = 3;
inline void ManagerDocument_Track::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument_Track::duration() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.duration)
  return duration_.GetNoArena();
}
inline void ManagerDocument_Track::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.duration)
}
#if LANG_CXX11
inline void ManagerDocument_Track::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.duration)
}
#endif
inline void ManagerDocument_Track::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.duration)
}
inline void ManagerDocument_Track::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.duration)
}
inline ::std::string* ManagerDocument_Track::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument_Track::release_duration() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument_Track::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.duration)
}

// string user_id = 4;
inline void ManagerDocument_Track::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument_Track::user_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.user_id)
  return user_id_.GetNoArena();
}
inline void ManagerDocument_Track::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.user_id)
}
#if LANG_CXX11
inline void ManagerDocument_Track::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.user_id)
}
#endif
inline void ManagerDocument_Track::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.user_id)
}
inline void ManagerDocument_Track::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.user_id)
}
inline ::std::string* ManagerDocument_Track::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument_Track::release_user_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument_Track::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.user_id)
}

// string file_id = 5;
inline void ManagerDocument_Track::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument_Track::file_id() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.Track.file_id)
  return file_id_.GetNoArena();
}
inline void ManagerDocument_Track::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.Track.file_id)
}
#if LANG_CXX11
inline void ManagerDocument_Track::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.Track.file_id)
}
#endif
inline void ManagerDocument_Track::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.Track.file_id)
}
inline void ManagerDocument_Track::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.Track.file_id)
}
inline ::std::string* ManagerDocument_Track::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.Track.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument_Track::release_file_id() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.Track.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument_Track::set_allocated_file_id(::std::string* file_id) {
  if (file_id != NULL) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.Track.file_id)
}

// -------------------------------------------------------------------

// ManagerDocument

// .pb.srch.music.ManagerDocument.Type type = 1;
inline void ManagerDocument::clear_type() {
  type_ = 0;
}
inline ::pb::srch::music::ManagerDocument_Type ManagerDocument::type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.type)
  return static_cast< ::pb::srch::music::ManagerDocument_Type >(type_);
}
inline void ManagerDocument::set_type(::pb::srch::music::ManagerDocument_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.type)
}

// .pb.srch.music.ManagerDocument.Category category = 16;
inline void ManagerDocument::clear_category() {
  category_ = 0;
}
inline ::pb::srch::music::ManagerDocument_Category ManagerDocument::category() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.category)
  return static_cast< ::pb::srch::music::ManagerDocument_Category >(category_);
}
inline void ManagerDocument::set_category(::pb::srch::music::ManagerDocument_Category value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.category)
}

// bool is_nailed = 2;
inline void ManagerDocument::clear_is_nailed() {
  is_nailed_ = false;
}
inline bool ManagerDocument::is_nailed() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.is_nailed)
  return is_nailed_;
}
inline void ManagerDocument::set_is_nailed(bool value) {
  
  is_nailed_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.is_nailed)
}

// .pb.srch.music.ManagerDocument.LatestType latest_type = 3;
inline void ManagerDocument::clear_latest_type() {
  latest_type_ = 0;
}
inline ::pb::srch::music::ManagerDocument_LatestType ManagerDocument::latest_type() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.latest_type)
  return static_cast< ::pb::srch::music::ManagerDocument_LatestType >(latest_type_);
}
inline void ManagerDocument::set_latest_type(::pb::srch::music::ManagerDocument_LatestType value) {
  
  latest_type_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.latest_type)
}

// string artist = 4;
inline void ManagerDocument::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument::artist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.artist)
  return artist_.GetNoArena();
}
inline void ManagerDocument::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.artist)
}
#if LANG_CXX11
inline void ManagerDocument::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.artist)
}
#endif
inline void ManagerDocument::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.artist)
}
inline void ManagerDocument::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.artist)
}
inline ::std::string* ManagerDocument::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument::release_artist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.artist)
}

// string album = 5;
inline void ManagerDocument::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument::album() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.album)
  return album_.GetNoArena();
}
inline void ManagerDocument::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.album)
}
#if LANG_CXX11
inline void ManagerDocument::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.album)
}
#endif
inline void ManagerDocument::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.album)
}
inline void ManagerDocument::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.album)
}
inline ::std::string* ManagerDocument::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument::release_album() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.album)
}

// string track = 6;
inline void ManagerDocument::clear_track() {
  track_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument::track() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.track)
  return track_.GetNoArena();
}
inline void ManagerDocument::set_track(const ::std::string& value) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.track)
}
#if LANG_CXX11
inline void ManagerDocument::set_track(::std::string&& value) {
  
  track_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.track)
}
#endif
inline void ManagerDocument::set_track(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.track)
}
inline void ManagerDocument::set_track(const char* value, size_t size) {
  
  track_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.track)
}
inline ::std::string* ManagerDocument::mutable_track() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.track)
  return track_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument::release_track() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.track)
  
  return track_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument::set_allocated_track(::std::string* track) {
  if (track != NULL) {
    
  } else {
    
  }
  track_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), track);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.track)
}

// string playlist = 7;
inline void ManagerDocument::clear_playlist() {
  playlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagerDocument::playlist() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.playlist)
  return playlist_.GetNoArena();
}
inline void ManagerDocument::set_playlist(const ::std::string& value) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.playlist)
}
#if LANG_CXX11
inline void ManagerDocument::set_playlist(::std::string&& value) {
  
  playlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.srch.music.ManagerDocument.playlist)
}
#endif
inline void ManagerDocument::set_playlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.srch.music.ManagerDocument.playlist)
}
inline void ManagerDocument::set_playlist(const char* value, size_t size) {
  
  playlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.srch.music.ManagerDocument.playlist)
}
inline ::std::string* ManagerDocument::mutable_playlist() {
  
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.playlist)
  return playlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagerDocument::release_playlist() {
  // @@protoc_insertion_point(field_release:pb.srch.music.ManagerDocument.playlist)
  
  return playlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagerDocument::set_allocated_playlist(::std::string* playlist) {
  if (playlist != NULL) {
    
  } else {
    
  }
  playlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist);
  // @@protoc_insertion_point(field_set_allocated:pb.srch.music.ManagerDocument.playlist)
}

// uint64 tracks_count = 8;
inline void ManagerDocument::clear_tracks_count() {
  tracks_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::tracks_count() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.tracks_count)
  return tracks_count_;
}
inline void ManagerDocument::set_tracks_count(::google::protobuf::uint64 value) {
  
  tracks_count_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.tracks_count)
}

// repeated .pb.srch.music.ManagerDocument.Track tracks = 9;
inline int ManagerDocument::tracks_size() const {
  return tracks_.size();
}
inline void ManagerDocument::clear_tracks() {
  tracks_.Clear();
}
inline const ::pb::srch::music::ManagerDocument_Track& ManagerDocument::tracks(int index) const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Get(index);
}
inline ::pb::srch::music::ManagerDocument_Track* ManagerDocument::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Mutable(index);
}
inline ::pb::srch::music::ManagerDocument_Track* ManagerDocument::add_tracks() {
  // @@protoc_insertion_point(field_add:pb.srch.music.ManagerDocument.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >*
ManagerDocument::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:pb.srch.music.ManagerDocument.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::srch::music::ManagerDocument_Track >&
ManagerDocument::tracks() const {
  // @@protoc_insertion_point(field_list:pb.srch.music.ManagerDocument.tracks)
  return tracks_;
}

// uint64 listen = 10;
inline void ManagerDocument::clear_listen() {
  listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.listen)
  return listen_;
}
inline void ManagerDocument::set_listen(::google::protobuf::uint64 value) {
  
  listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.listen)
}

// uint64 listen_month = 11;
inline void ManagerDocument::clear_listen_month() {
  listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.listen_month)
  return listen_month_;
}
inline void ManagerDocument::set_listen_month(::google::protobuf::uint64 value) {
  
  listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.listen_month)
}

// uint64 max_listen = 12;
inline void ManagerDocument::clear_max_listen() {
  max_listen_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::max_listen() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.max_listen)
  return max_listen_;
}
inline void ManagerDocument::set_max_listen(::google::protobuf::uint64 value) {
  
  max_listen_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.max_listen)
}

// uint64 max_listen_month = 13;
inline void ManagerDocument::clear_max_listen_month() {
  max_listen_month_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::max_listen_month() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.max_listen_month)
  return max_listen_month_;
}
inline void ManagerDocument::set_max_listen_month(::google::protobuf::uint64 value) {
  
  max_listen_month_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.max_listen_month)
}

// uint64 shares = 14;
inline void ManagerDocument::clear_shares() {
  shares_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::shares() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.shares)
  return shares_;
}
inline void ManagerDocument::set_shares(::google::protobuf::uint64 value) {
  
  shares_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.shares)
}

// uint64 refs = 15;
inline void ManagerDocument::clear_refs() {
  refs_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagerDocument::refs() const {
  // @@protoc_insertion_point(field_get:pb.srch.music.ManagerDocument.refs)
  return refs_;
}
inline void ManagerDocument::set_refs(::google::protobuf::uint64 value) {
  
  refs_ = value;
  // @@protoc_insertion_point(field_set:pb.srch.music.ManagerDocument.refs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace music
}  // namespace srch
}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::srch::music::TitlesDocument_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::srch::music::TitlesDocument_Type>() {
  return ::pb::srch::music::TitlesDocument_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::srch::music::ManagerDocument_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::srch::music::ManagerDocument_Type>() {
  return ::pb::srch::music::ManagerDocument_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::srch::music::ManagerDocument_Category> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::srch::music::ManagerDocument_Category>() {
  return ::pb::srch::music::ManagerDocument_Category_descriptor();
}
template <> struct is_proto_enum< ::pb::srch::music::ManagerDocument_LatestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::srch::music::ManagerDocument_LatestType>() {
  return ::pb::srch::music::ManagerDocument_LatestType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_music_5fresponse_2eproto__INCLUDED
