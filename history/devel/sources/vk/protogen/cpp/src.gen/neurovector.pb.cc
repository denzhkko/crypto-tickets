// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neurovector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "neurovector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace neurovector {
namespace pb {
class StringsValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StringsValue>
     _instance;
} _StringsValue_default_instance_;
class TensorValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TensorValue>
     _instance;
} _TensorValue_default_instance_;
class ValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Value>
     _instance;
  const ::neurovector::pb::StringsValue* strings_value_;
  const ::neurovector::pb::TensorValue* tensor_value_;
} _Value_default_instance_;
class ValuesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Values>
     _instance;
} _Values_default_instance_;

namespace protobuf_neurovector_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringsValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringsValue, strs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorValue, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorValue, data_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ValueDefaultTypeInternal, strings_value_),
  offsetof(ValueDefaultTypeInternal, tensor_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, options_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Values, values_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(StringsValue)},
  { 7, 15, sizeof(TensorValue)},
  { 18, 26, sizeof(Value)},
  { 28, 34, sizeof(Values)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StringsValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Values_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "neurovector.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StringsValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StringsValue_default_instance_);_TensorValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TensorValue_default_instance_);_Value_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Value_default_instance_);_Values_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Values_default_instance_);_Value_default_instance_.strings_value_ = const_cast< ::neurovector::pb::StringsValue*>(
      ::neurovector::pb::StringsValue::internal_default_instance());
  _Value_default_instance_.tensor_value_ = const_cast< ::neurovector::pb::TensorValue*>(
      ::neurovector::pb::TensorValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021neurovector.proto\022\016neurovector.pb\"\034\n\014S"
      "tringsValue\022\014\n\004strs\030\001 \003(\t\"\371\001\n\013TensorValu"
      "e\022.\n\004type\030\001 \001(\0162 .neurovector.pb.TensorV"
      "alue.Type\022\r\n\005shape\030\002 \003(\005\022\014\n\004data\030\003 \001(\014\"\234"
      "\001\n\004Type\022\014\n\010FLOAT_32\020\000\022\014\n\010FLOAT_64\020\001\022\t\n\005I"
      "NT_8\020\002\022\n\n\006INT_16\020\003\022\n\n\006INT_32\020\004\022\n\n\006INT_64"
      "\020\005\022\n\n\006UINT_8\020\006\022\013\n\007UINT_16\020\007\022\013\n\007UINT_32\020\010"
      "\022\013\n\007UINT_64\020\t\022\010\n\004BOOL\020\n\022\014\n\010FLOAT_16\020\013\"~\n"
      "\005Value\0225\n\rstrings_value\030\001 \001(\0132\034.neurovec"
      "tor.pb.StringsValueH\000\0223\n\014tensor_value\030\002 "
      "\001(\0132\033.neurovector.pb.TensorValueH\000B\t\n\007op"
      "tions\"/\n\006Values\022%\n\006values\030\001 \003(\0132\025.neurov"
      "ector.pb.Value"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "neurovector.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_neurovector_2eproto

const ::google::protobuf::EnumDescriptor* TensorValue_Type_descriptor() {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_enum_descriptors[0];
}
bool TensorValue_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorValue_Type TensorValue::FLOAT_32;
const TensorValue_Type TensorValue::FLOAT_64;
const TensorValue_Type TensorValue::INT_8;
const TensorValue_Type TensorValue::INT_16;
const TensorValue_Type TensorValue::INT_32;
const TensorValue_Type TensorValue::INT_64;
const TensorValue_Type TensorValue::UINT_8;
const TensorValue_Type TensorValue::UINT_16;
const TensorValue_Type TensorValue::UINT_32;
const TensorValue_Type TensorValue::UINT_64;
const TensorValue_Type TensorValue::BOOL;
const TensorValue_Type TensorValue::FLOAT_16;
const TensorValue_Type TensorValue::Type_MIN;
const TensorValue_Type TensorValue::Type_MAX;
const int TensorValue::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringsValue::kStrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringsValue::StringsValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurovector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurovector.pb.StringsValue)
}
StringsValue::StringsValue(const StringsValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      strs_(from.strs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neurovector.pb.StringsValue)
}

void StringsValue::SharedCtor() {
  _cached_size_ = 0;
}

StringsValue::~StringsValue() {
  // @@protoc_insertion_point(destructor:neurovector.pb.StringsValue)
  SharedDtor();
}

void StringsValue::SharedDtor() {
}

void StringsValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringsValue::descriptor() {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringsValue& StringsValue::default_instance() {
  protobuf_neurovector_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringsValue* StringsValue::New(::google::protobuf::Arena* arena) const {
  StringsValue* n = new StringsValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:neurovector.pb.StringsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringsValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurovector.pb.StringsValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string strs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strs(this->strs_size() - 1).data(),
            static_cast<int>(this->strs(this->strs_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "neurovector.pb.StringsValue.strs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurovector.pb.StringsValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurovector.pb.StringsValue)
  return false;
#undef DO_
}

void StringsValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurovector.pb.StringsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string strs = 1;
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strs(i).data(), static_cast<int>(this->strs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurovector.pb.StringsValue.strs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurovector.pb.StringsValue)
}

::google::protobuf::uint8* StringsValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurovector.pb.StringsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string strs = 1;
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strs(i).data(), static_cast<int>(this->strs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurovector.pb.StringsValue.strs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->strs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurovector.pb.StringsValue)
  return target;
}

size_t StringsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurovector.pb.StringsValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string strs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strs_size());
  for (int i = 0, n = this->strs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringsValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurovector.pb.StringsValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StringsValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringsValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurovector.pb.StringsValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurovector.pb.StringsValue)
    MergeFrom(*source);
  }
}

void StringsValue::MergeFrom(const StringsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurovector.pb.StringsValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strs_.MergeFrom(from.strs_);
}

void StringsValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurovector.pb.StringsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringsValue::CopyFrom(const StringsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurovector.pb.StringsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringsValue::IsInitialized() const {
  return true;
}

void StringsValue::Swap(StringsValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringsValue::InternalSwap(StringsValue* other) {
  using std::swap;
  strs_.InternalSwap(&other->strs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringsValue::GetMetadata() const {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringsValue

// repeated string strs = 1;
int StringsValue::strs_size() const {
  return strs_.size();
}
void StringsValue::clear_strs() {
  strs_.Clear();
}
const ::std::string& StringsValue::strs(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.StringsValue.strs)
  return strs_.Get(index);
}
::std::string* StringsValue::mutable_strs(int index) {
  // @@protoc_insertion_point(field_mutable:neurovector.pb.StringsValue.strs)
  return strs_.Mutable(index);
}
void StringsValue::set_strs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:neurovector.pb.StringsValue.strs)
  strs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringsValue::set_strs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:neurovector.pb.StringsValue.strs)
  strs_.Mutable(index)->assign(std::move(value));
}
#endif
void StringsValue::set_strs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:neurovector.pb.StringsValue.strs)
}
void StringsValue::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:neurovector.pb.StringsValue.strs)
}
::std::string* StringsValue::add_strs() {
  // @@protoc_insertion_point(field_add_mutable:neurovector.pb.StringsValue.strs)
  return strs_.Add();
}
void StringsValue::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:neurovector.pb.StringsValue.strs)
}
#if LANG_CXX11
void StringsValue::add_strs(::std::string&& value) {
  strs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:neurovector.pb.StringsValue.strs)
}
#endif
void StringsValue::add_strs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:neurovector.pb.StringsValue.strs)
}
void StringsValue::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:neurovector.pb.StringsValue.strs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringsValue::strs() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.StringsValue.strs)
  return strs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringsValue::mutable_strs() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.StringsValue.strs)
  return &strs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue::kTypeFieldNumber;
const int TensorValue::kShapeFieldNumber;
const int TensorValue::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue::TensorValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurovector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurovector.pb.TensorValue)
}
TensorValue::TensorValue(const TensorValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:neurovector.pb.TensorValue)
}

void TensorValue::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TensorValue::~TensorValue() {
  // @@protoc_insertion_point(destructor:neurovector.pb.TensorValue)
  SharedDtor();
}

void TensorValue::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorValue::descriptor() {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorValue& TensorValue::default_instance() {
  protobuf_neurovector_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue* TensorValue::New(::google::protobuf::Arena* arena) const {
  TensorValue* n = new TensorValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue::Clear() {
// @@protoc_insertion_point(message_clear_start:neurovector.pb.TensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurovector.pb.TensorValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neurovector.pb.TensorValue.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::neurovector::pb::TensorValue_Type_IsValid(value)) {
            set_type(static_cast< ::neurovector::pb::TensorValue_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_shape())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurovector.pb.TensorValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurovector.pb.TensorValue)
  return false;
#undef DO_
}

void TensorValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurovector.pb.TensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .neurovector.pb.TensorValue.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurovector.pb.TensorValue)
}

::google::protobuf::uint8* TensorValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurovector.pb.TensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .neurovector.pb.TensorValue.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 shape = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->shape_, target);

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurovector.pb.TensorValue)
  return target;
}

size_t TensorValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurovector.pb.TensorValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 shape = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shape_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .neurovector.pb.TensorValue.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurovector.pb.TensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurovector.pb.TensorValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurovector.pb.TensorValue)
    MergeFrom(*source);
  }
}

void TensorValue::MergeFrom(const TensorValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurovector.pb.TensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TensorValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurovector.pb.TensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorValue::CopyFrom(const TensorValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurovector.pb.TensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue::IsInitialized() const {
  return true;
}

void TensorValue::Swap(TensorValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue::InternalSwap(TensorValue* other) {
  using std::swap;
  shape_.InternalSwap(&other->shape_);
  data_.Swap(&other->data_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorValue::GetMetadata() const {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue

// optional .neurovector.pb.TensorValue.Type type = 1;
bool TensorValue::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TensorValue::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TensorValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TensorValue::clear_type() {
  type_ = 0;
  clear_has_type();
}
::neurovector::pb::TensorValue_Type TensorValue::type() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.type)
  return static_cast< ::neurovector::pb::TensorValue_Type >(type_);
}
void TensorValue::set_type(::neurovector::pb::TensorValue_Type value) {
  assert(::neurovector::pb::TensorValue_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.type)
}

// repeated int32 shape = 2;
int TensorValue::shape_size() const {
  return shape_.size();
}
void TensorValue::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int32 TensorValue::shape(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.shape)
  return shape_.Get(index);
}
void TensorValue::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.shape)
}
void TensorValue::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:neurovector.pb.TensorValue.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorValue::shape() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.TensorValue.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorValue::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.TensorValue.shape)
  return &shape_;
}

// optional bytes data = 3;
bool TensorValue::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TensorValue::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void TensorValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void TensorValue::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& TensorValue::data() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.data)
  return data_.GetNoArena();
}
void TensorValue::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.data)
}
#if LANG_CXX11
void TensorValue::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurovector.pb.TensorValue.data)
}
#endif
void TensorValue::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurovector.pb.TensorValue.data)
}
void TensorValue::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurovector.pb.TensorValue.data)
}
::std::string* TensorValue::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:neurovector.pb.TensorValue.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorValue::release_data() {
  // @@protoc_insertion_point(field_release:neurovector.pb.TensorValue.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorValue::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.TensorValue.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kStringsValueFieldNumber;
const int Value::kTensorValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurovector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurovector.pb.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_options();
  switch (from.options_case()) {
    case kStringsValue: {
      mutable_strings_value()->::neurovector::pb::StringsValue::MergeFrom(from.strings_value());
      break;
    }
    case kTensorValue: {
      mutable_tensor_value()->::neurovector::pb::TensorValue::MergeFrom(from.tensor_value());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:neurovector.pb.Value)
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  clear_has_options();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:neurovector.pb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_options()) {
    clear_options();
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  protobuf_neurovector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:neurovector.pb.Value)
  switch (options_case()) {
    case kStringsValue: {
      delete options_.strings_value_;
      break;
    }
    case kTensorValue: {
      delete options_.tensor_value_;
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONS_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:neurovector.pb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_options();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurovector.pb.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neurovector.pb.StringsValue strings_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .neurovector.pb.TensorValue tensor_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurovector.pb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurovector.pb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurovector.pb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (options_case()) {
    case kStringsValue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *options_.strings_value_, output);
      break;
    case kTensorValue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *options_.tensor_value_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurovector.pb.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurovector.pb.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (options_case()) {
    case kStringsValue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *options_.strings_value_, deterministic, target);
      break;
    case kTensorValue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *options_.tensor_value_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurovector.pb.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurovector.pb.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (options_case()) {
    // optional .neurovector.pb.StringsValue strings_value = 1;
    case kStringsValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *options_.strings_value_);
      break;
    }
    // optional .neurovector.pb.TensorValue tensor_value = 2;
    case kTensorValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *options_.tensor_value_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurovector.pb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurovector.pb.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurovector.pb.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurovector.pb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.options_case()) {
    case kStringsValue: {
      mutable_strings_value()->::neurovector::pb::StringsValue::MergeFrom(from.strings_value());
      break;
    }
    case kTensorValue: {
      mutable_tensor_value()->::neurovector::pb::TensorValue::MergeFrom(from.tensor_value());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurovector.pb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurovector.pb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  swap(options_, other->options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional .neurovector.pb.StringsValue strings_value = 1;
bool Value::has_strings_value() const {
  return options_case() == kStringsValue;
}
void Value::set_has_strings_value() {
  _oneof_case_[0] = kStringsValue;
}
void Value::clear_strings_value() {
  if (has_strings_value()) {
    delete options_.strings_value_;
    clear_has_options();
  }
}
 const ::neurovector::pb::StringsValue& Value::strings_value() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Value.strings_value)
  return has_strings_value()
      ? *options_.strings_value_
      : ::neurovector::pb::StringsValue::default_instance();
}
::neurovector::pb::StringsValue* Value::mutable_strings_value() {
  if (!has_strings_value()) {
    clear_options();
    set_has_strings_value();
    options_.strings_value_ = new ::neurovector::pb::StringsValue;
  }
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Value.strings_value)
  return options_.strings_value_;
}
::neurovector::pb::StringsValue* Value::release_strings_value() {
  // @@protoc_insertion_point(field_release:neurovector.pb.Value.strings_value)
  if (has_strings_value()) {
    clear_has_options();
    ::neurovector::pb::StringsValue* temp = options_.strings_value_;
    options_.strings_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_strings_value(::neurovector::pb::StringsValue* strings_value) {
  clear_options();
  if (strings_value) {
    set_has_strings_value();
    options_.strings_value_ = strings_value;
  }
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.Value.strings_value)
}

// optional .neurovector.pb.TensorValue tensor_value = 2;
bool Value::has_tensor_value() const {
  return options_case() == kTensorValue;
}
void Value::set_has_tensor_value() {
  _oneof_case_[0] = kTensorValue;
}
void Value::clear_tensor_value() {
  if (has_tensor_value()) {
    delete options_.tensor_value_;
    clear_has_options();
  }
}
 const ::neurovector::pb::TensorValue& Value::tensor_value() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Value.tensor_value)
  return has_tensor_value()
      ? *options_.tensor_value_
      : ::neurovector::pb::TensorValue::default_instance();
}
::neurovector::pb::TensorValue* Value::mutable_tensor_value() {
  if (!has_tensor_value()) {
    clear_options();
    set_has_tensor_value();
    options_.tensor_value_ = new ::neurovector::pb::TensorValue;
  }
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Value.tensor_value)
  return options_.tensor_value_;
}
::neurovector::pb::TensorValue* Value::release_tensor_value() {
  // @@protoc_insertion_point(field_release:neurovector.pb.Value.tensor_value)
  if (has_tensor_value()) {
    clear_has_options();
    ::neurovector::pb::TensorValue* temp = options_.tensor_value_;
    options_.tensor_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_tensor_value(::neurovector::pb::TensorValue* tensor_value) {
  clear_options();
  if (tensor_value) {
    set_has_tensor_value();
    options_.tensor_value_ = tensor_value;
  }
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.Value.tensor_value)
}

bool Value::has_options() const {
  return options_case() != OPTIONS_NOT_SET;
}
void Value::clear_has_options() {
  _oneof_case_[0] = OPTIONS_NOT_SET;
}
Value::OptionsCase Value::options_case() const {
  return Value::OptionsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Values::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Values::Values()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurovector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurovector.pb.Values)
}
Values::Values(const Values& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neurovector.pb.Values)
}

void Values::SharedCtor() {
  _cached_size_ = 0;
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:neurovector.pb.Values)
  SharedDtor();
}

void Values::SharedDtor() {
}

void Values::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Values::descriptor() {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Values& Values::default_instance() {
  protobuf_neurovector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Values* Values::New(::google::protobuf::Arena* arena) const {
  Values* n = new Values;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:neurovector.pb.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Values::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurovector.pb.Values)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .neurovector.pb.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurovector.pb.Values)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurovector.pb.Values)
  return false;
#undef DO_
}

void Values::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurovector.pb.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neurovector.pb.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurovector.pb.Values)
}

::google::protobuf::uint8* Values::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurovector.pb.Values)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neurovector.pb.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurovector.pb.Values)
  return target;
}

size_t Values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurovector.pb.Values)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .neurovector.pb.Value values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Values::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurovector.pb.Values)
  GOOGLE_DCHECK_NE(&from, this);
  const Values* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Values>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurovector.pb.Values)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurovector.pb.Values)
    MergeFrom(*source);
  }
}

void Values::MergeFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurovector.pb.Values)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Values::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurovector.pb.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurovector.pb.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {
  return true;
}

void Values::Swap(Values* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Values::InternalSwap(Values* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Values::GetMetadata() const {
  protobuf_neurovector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurovector_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Values

// repeated .neurovector.pb.Value values = 1;
int Values::values_size() const {
  return values_.size();
}
void Values::clear_values() {
  values_.Clear();
}
const ::neurovector::pb::Value& Values::values(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Values.values)
  return values_.Get(index);
}
::neurovector::pb::Value* Values::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Values.values)
  return values_.Mutable(index);
}
::neurovector::pb::Value* Values::add_values() {
  // @@protoc_insertion_point(field_add:neurovector.pb.Values.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >*
Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.Values.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >&
Values::values() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.Values.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace neurovector

// @@protoc_insertion_point(global_scope)
