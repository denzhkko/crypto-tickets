// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neurovector.proto

#ifndef PROTOBUF_neurovector_2eproto__INCLUDED
#define PROTOBUF_neurovector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace neurovector {
namespace pb {
class StringsValue;
class StringsValueDefaultTypeInternal;
extern StringsValueDefaultTypeInternal _StringsValue_default_instance_;
class TensorValue;
class TensorValueDefaultTypeInternal;
extern TensorValueDefaultTypeInternal _TensorValue_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class Values;
class ValuesDefaultTypeInternal;
extern ValuesDefaultTypeInternal _Values_default_instance_;
}  // namespace pb
}  // namespace neurovector

namespace neurovector {
namespace pb {

namespace protobuf_neurovector_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_neurovector_2eproto

enum TensorValue_Type {
  TensorValue_Type_FLOAT_32 = 0,
  TensorValue_Type_FLOAT_64 = 1,
  TensorValue_Type_INT_8 = 2,
  TensorValue_Type_INT_16 = 3,
  TensorValue_Type_INT_32 = 4,
  TensorValue_Type_INT_64 = 5,
  TensorValue_Type_UINT_8 = 6,
  TensorValue_Type_UINT_16 = 7,
  TensorValue_Type_UINT_32 = 8,
  TensorValue_Type_UINT_64 = 9,
  TensorValue_Type_BOOL = 10,
  TensorValue_Type_FLOAT_16 = 11
};
bool TensorValue_Type_IsValid(int value);
const TensorValue_Type TensorValue_Type_Type_MIN = TensorValue_Type_FLOAT_32;
const TensorValue_Type TensorValue_Type_Type_MAX = TensorValue_Type_FLOAT_16;
const int TensorValue_Type_Type_ARRAYSIZE = TensorValue_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorValue_Type_descriptor();
inline const ::std::string& TensorValue_Type_Name(TensorValue_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorValue_Type_descriptor(), value);
}
inline bool TensorValue_Type_Parse(
    const ::std::string& name, TensorValue_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorValue_Type>(
    TensorValue_Type_descriptor(), name, value);
}
// ===================================================================

class StringsValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurovector.pb.StringsValue) */ {
 public:
  StringsValue();
  virtual ~StringsValue();

  StringsValue(const StringsValue& from);

  inline StringsValue& operator=(const StringsValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringsValue(StringsValue&& from) noexcept
    : StringsValue() {
    *this = ::std::move(from);
  }

  inline StringsValue& operator=(StringsValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringsValue& default_instance();

  static inline const StringsValue* internal_default_instance() {
    return reinterpret_cast<const StringsValue*>(
               &_StringsValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StringsValue* other);
  friend void swap(StringsValue& a, StringsValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringsValue* New() const PROTOBUF_FINAL { return New(NULL); }

  StringsValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringsValue& from);
  void MergeFrom(const StringsValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringsValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string strs = 1;
  int strs_size() const;
  void clear_strs();
  static const int kStrsFieldNumber = 1;
  const ::std::string& strs(int index) const;
  ::std::string* mutable_strs(int index);
  void set_strs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_strs(int index, ::std::string&& value);
  #endif
  void set_strs(int index, const char* value);
  void set_strs(int index, const char* value, size_t size);
  ::std::string* add_strs();
  void add_strs(const ::std::string& value);
  #if LANG_CXX11
  void add_strs(::std::string&& value);
  #endif
  void add_strs(const char* value);
  void add_strs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strs();

  // @@protoc_insertion_point(class_scope:neurovector.pb.StringsValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strs_;
  friend struct protobuf_neurovector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurovector.pb.TensorValue) */ {
 public:
  TensorValue();
  virtual ~TensorValue();

  TensorValue(const TensorValue& from);

  inline TensorValue& operator=(const TensorValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorValue(TensorValue&& from) noexcept
    : TensorValue() {
    *this = ::std::move(from);
  }

  inline TensorValue& operator=(TensorValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorValue& default_instance();

  static inline const TensorValue* internal_default_instance() {
    return reinterpret_cast<const TensorValue*>(
               &_TensorValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TensorValue* other);
  friend void swap(TensorValue& a, TensorValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorValue* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorValue& from);
  void MergeFrom(const TensorValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TensorValue_Type Type;
  static const Type FLOAT_32 =
    TensorValue_Type_FLOAT_32;
  static const Type FLOAT_64 =
    TensorValue_Type_FLOAT_64;
  static const Type INT_8 =
    TensorValue_Type_INT_8;
  static const Type INT_16 =
    TensorValue_Type_INT_16;
  static const Type INT_32 =
    TensorValue_Type_INT_32;
  static const Type INT_64 =
    TensorValue_Type_INT_64;
  static const Type UINT_8 =
    TensorValue_Type_UINT_8;
  static const Type UINT_16 =
    TensorValue_Type_UINT_16;
  static const Type UINT_32 =
    TensorValue_Type_UINT_32;
  static const Type UINT_64 =
    TensorValue_Type_UINT_64;
  static const Type BOOL =
    TensorValue_Type_BOOL;
  static const Type FLOAT_16 =
    TensorValue_Type_FLOAT_16;
  static inline bool Type_IsValid(int value) {
    return TensorValue_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TensorValue_Type_Type_MIN;
  static const Type Type_MAX =
    TensorValue_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TensorValue_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TensorValue_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TensorValue_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TensorValue_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .neurovector.pb.TensorValue.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::neurovector::pb::TensorValue_Type type() const;
  void set_type(::neurovector::pb::TensorValue_Type value);

  // @@protoc_insertion_point(class_scope:neurovector.pb.TensorValue)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  friend struct protobuf_neurovector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurovector.pb.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum OptionsCase {
    kStringsValue = 1,
    kTensorValue = 2,
    OPTIONS_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const PROTOBUF_FINAL { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .neurovector.pb.StringsValue strings_value = 1;
  bool has_strings_value() const;
  void clear_strings_value();
  static const int kStringsValueFieldNumber = 1;
  const ::neurovector::pb::StringsValue& strings_value() const;
  ::neurovector::pb::StringsValue* mutable_strings_value();
  ::neurovector::pb::StringsValue* release_strings_value();
  void set_allocated_strings_value(::neurovector::pb::StringsValue* strings_value);

  // optional .neurovector.pb.TensorValue tensor_value = 2;
  bool has_tensor_value() const;
  void clear_tensor_value();
  static const int kTensorValueFieldNumber = 2;
  const ::neurovector::pb::TensorValue& tensor_value() const;
  ::neurovector::pb::TensorValue* mutable_tensor_value();
  ::neurovector::pb::TensorValue* release_tensor_value();
  void set_allocated_tensor_value(::neurovector::pb::TensorValue* tensor_value);

  OptionsCase options_case() const;
  // @@protoc_insertion_point(class_scope:neurovector.pb.Value)
 private:
  void set_has_strings_value();
  void set_has_tensor_value();

  inline bool has_options() const;
  void clear_options();
  inline void clear_has_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union OptionsUnion {
    OptionsUnion() {}
    ::neurovector::pb::StringsValue* strings_value_;
    ::neurovector::pb::TensorValue* tensor_value_;
  } options_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_neurovector_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Values : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurovector.pb.Values) */ {
 public:
  Values();
  virtual ~Values();

  Values(const Values& from);

  inline Values& operator=(const Values& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Values(Values&& from) noexcept
    : Values() {
    *this = ::std::move(from);
  }

  inline Values& operator=(Values&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Values& default_instance();

  static inline const Values* internal_default_instance() {
    return reinterpret_cast<const Values*>(
               &_Values_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Values* other);
  friend void swap(Values& a, Values& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Values* New() const PROTOBUF_FINAL { return New(NULL); }

  Values* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Values& from);
  void MergeFrom(const Values& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Values* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .neurovector.pb.Value values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::neurovector::pb::Value& values(int index) const;
  ::neurovector::pb::Value* mutable_values(int index);
  ::neurovector::pb::Value* add_values();
  ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:neurovector.pb.Values)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value > values_;
  friend struct protobuf_neurovector_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringsValue

// repeated string strs = 1;
inline int StringsValue::strs_size() const {
  return strs_.size();
}
inline void StringsValue::clear_strs() {
  strs_.Clear();
}
inline const ::std::string& StringsValue::strs(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.StringsValue.strs)
  return strs_.Get(index);
}
inline ::std::string* StringsValue::mutable_strs(int index) {
  // @@protoc_insertion_point(field_mutable:neurovector.pb.StringsValue.strs)
  return strs_.Mutable(index);
}
inline void StringsValue::set_strs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:neurovector.pb.StringsValue.strs)
  strs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringsValue::set_strs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:neurovector.pb.StringsValue.strs)
  strs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringsValue::set_strs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:neurovector.pb.StringsValue.strs)
}
inline void StringsValue::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:neurovector.pb.StringsValue.strs)
}
inline ::std::string* StringsValue::add_strs() {
  // @@protoc_insertion_point(field_add_mutable:neurovector.pb.StringsValue.strs)
  return strs_.Add();
}
inline void StringsValue::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:neurovector.pb.StringsValue.strs)
}
#if LANG_CXX11
inline void StringsValue::add_strs(::std::string&& value) {
  strs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:neurovector.pb.StringsValue.strs)
}
#endif
inline void StringsValue::add_strs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:neurovector.pb.StringsValue.strs)
}
inline void StringsValue::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:neurovector.pb.StringsValue.strs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringsValue::strs() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.StringsValue.strs)
  return strs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringsValue::mutable_strs() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.StringsValue.strs)
  return &strs_;
}

// -------------------------------------------------------------------

// TensorValue

// optional .neurovector.pb.TensorValue.Type type = 1;
inline bool TensorValue::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorValue::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorValue::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::neurovector::pb::TensorValue_Type TensorValue::type() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.type)
  return static_cast< ::neurovector::pb::TensorValue_Type >(type_);
}
inline void TensorValue::set_type(::neurovector::pb::TensorValue_Type value) {
  assert(::neurovector::pb::TensorValue_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.type)
}

// repeated int32 shape = 2;
inline int TensorValue::shape_size() const {
  return shape_.size();
}
inline void TensorValue::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 TensorValue::shape(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.shape)
  return shape_.Get(index);
}
inline void TensorValue::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.shape)
}
inline void TensorValue::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:neurovector.pb.TensorValue.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorValue::shape() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.TensorValue.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorValue::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.TensorValue.shape)
  return &shape_;
}

// optional bytes data = 3;
inline bool TensorValue::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorValue::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorValue::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& TensorValue::data() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.TensorValue.data)
  return data_.GetNoArena();
}
inline void TensorValue::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurovector.pb.TensorValue.data)
}
#if LANG_CXX11
inline void TensorValue::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurovector.pb.TensorValue.data)
}
#endif
inline void TensorValue::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurovector.pb.TensorValue.data)
}
inline void TensorValue::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurovector.pb.TensorValue.data)
}
inline ::std::string* TensorValue::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:neurovector.pb.TensorValue.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorValue::release_data() {
  // @@protoc_insertion_point(field_release:neurovector.pb.TensorValue.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorValue::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.TensorValue.data)
}

// -------------------------------------------------------------------

// Value

// optional .neurovector.pb.StringsValue strings_value = 1;
inline bool Value::has_strings_value() const {
  return options_case() == kStringsValue;
}
inline void Value::set_has_strings_value() {
  _oneof_case_[0] = kStringsValue;
}
inline void Value::clear_strings_value() {
  if (has_strings_value()) {
    delete options_.strings_value_;
    clear_has_options();
  }
}
inline  const ::neurovector::pb::StringsValue& Value::strings_value() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Value.strings_value)
  return has_strings_value()
      ? *options_.strings_value_
      : ::neurovector::pb::StringsValue::default_instance();
}
inline ::neurovector::pb::StringsValue* Value::mutable_strings_value() {
  if (!has_strings_value()) {
    clear_options();
    set_has_strings_value();
    options_.strings_value_ = new ::neurovector::pb::StringsValue;
  }
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Value.strings_value)
  return options_.strings_value_;
}
inline ::neurovector::pb::StringsValue* Value::release_strings_value() {
  // @@protoc_insertion_point(field_release:neurovector.pb.Value.strings_value)
  if (has_strings_value()) {
    clear_has_options();
    ::neurovector::pb::StringsValue* temp = options_.strings_value_;
    options_.strings_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_strings_value(::neurovector::pb::StringsValue* strings_value) {
  clear_options();
  if (strings_value) {
    set_has_strings_value();
    options_.strings_value_ = strings_value;
  }
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.Value.strings_value)
}

// optional .neurovector.pb.TensorValue tensor_value = 2;
inline bool Value::has_tensor_value() const {
  return options_case() == kTensorValue;
}
inline void Value::set_has_tensor_value() {
  _oneof_case_[0] = kTensorValue;
}
inline void Value::clear_tensor_value() {
  if (has_tensor_value()) {
    delete options_.tensor_value_;
    clear_has_options();
  }
}
inline  const ::neurovector::pb::TensorValue& Value::tensor_value() const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Value.tensor_value)
  return has_tensor_value()
      ? *options_.tensor_value_
      : ::neurovector::pb::TensorValue::default_instance();
}
inline ::neurovector::pb::TensorValue* Value::mutable_tensor_value() {
  if (!has_tensor_value()) {
    clear_options();
    set_has_tensor_value();
    options_.tensor_value_ = new ::neurovector::pb::TensorValue;
  }
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Value.tensor_value)
  return options_.tensor_value_;
}
inline ::neurovector::pb::TensorValue* Value::release_tensor_value() {
  // @@protoc_insertion_point(field_release:neurovector.pb.Value.tensor_value)
  if (has_tensor_value()) {
    clear_has_options();
    ::neurovector::pb::TensorValue* temp = options_.tensor_value_;
    options_.tensor_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_tensor_value(::neurovector::pb::TensorValue* tensor_value) {
  clear_options();
  if (tensor_value) {
    set_has_tensor_value();
    options_.tensor_value_ = tensor_value;
  }
  // @@protoc_insertion_point(field_set_allocated:neurovector.pb.Value.tensor_value)
}

inline bool Value::has_options() const {
  return options_case() != OPTIONS_NOT_SET;
}
inline void Value::clear_has_options() {
  _oneof_case_[0] = OPTIONS_NOT_SET;
}
inline Value::OptionsCase Value::options_case() const {
  return Value::OptionsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Values

// repeated .neurovector.pb.Value values = 1;
inline int Values::values_size() const {
  return values_.size();
}
inline void Values::clear_values() {
  values_.Clear();
}
inline const ::neurovector::pb::Value& Values::values(int index) const {
  // @@protoc_insertion_point(field_get:neurovector.pb.Values.values)
  return values_.Get(index);
}
inline ::neurovector::pb::Value* Values::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:neurovector.pb.Values.values)
  return values_.Mutable(index);
}
inline ::neurovector::pb::Value* Values::add_values() {
  // @@protoc_insertion_point(field_add:neurovector.pb.Values.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >*
Values::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:neurovector.pb.Values.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::neurovector::pb::Value >&
Values::values() const {
  // @@protoc_insertion_point(field_list:neurovector.pb.Values.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace neurovector

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::neurovector::pb::TensorValue_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::neurovector::pb::TensorValue_Type>() {
  return ::neurovector::pb::TensorValue_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_neurovector_2eproto__INCLUDED
