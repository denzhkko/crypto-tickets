// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neurozone_documents.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "neurozone_documents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace neurozone {
namespace pb {
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;
class DocumentsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentsInfo>
     _instance;
} _DocumentsInfo_default_instance_;

namespace protobuf_neurozone_5fdocuments_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, backend_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentsInfo, documents_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Document)},
  { 9, 15, sizeof(DocumentsInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentsInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "neurozone_documents.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_DocumentsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentsInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031neurozone_documents.proto\022\014neurozone.p"
      "b\"(\n\010Document\022\013\n\003url\030\001 \001(\t\022\017\n\007backend\030\002 "
      "\001(\t\":\n\rDocumentsInfo\022)\n\tdocuments\030\001 \003(\0132"
      "\026.neurozone.pb.Document"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "neurozone_documents.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_neurozone_5fdocuments_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kUrlFieldNumber;
const int Document::kBackendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurozone_5fdocuments_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurozone.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  backend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backend()) {
    backend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backend_);
  }
  // @@protoc_insertion_point(copy_constructor:neurozone.pb.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:neurozone.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_neurozone_5fdocuments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurozone_5fdocuments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_neurozone_5fdocuments_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:neurozone.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!backend_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*backend_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurozone.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "neurozone.pb.Document.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backend().data(), static_cast<int>(this->backend().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "neurozone.pb.Document.backend");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurozone.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurozone.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurozone.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurozone.pb.Document.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string backend = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backend().data(), static_cast<int>(this->backend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurozone.pb.Document.backend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->backend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurozone.pb.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurozone.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurozone.pb.Document.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string backend = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backend().data(), static_cast<int>(this->backend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "neurozone.pb.Document.backend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->backend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurozone.pb.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurozone.pb.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string backend = 2;
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backend());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurozone.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurozone.pb.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurozone.pb.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurozone.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_backend();
      backend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backend_);
    }
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurozone.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurozone.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  url_.Swap(&other->url_);
  backend_.Swap(&other->backend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_neurozone_5fdocuments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurozone_5fdocuments_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// optional string url = 1;
bool Document::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Document::url() const {
  // @@protoc_insertion_point(field_get:neurozone.pb.Document.url)
  return url_.GetNoArena();
}
void Document::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurozone.pb.Document.url)
}
#if LANG_CXX11
void Document::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurozone.pb.Document.url)
}
#endif
void Document::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurozone.pb.Document.url)
}
void Document::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurozone.pb.Document.url)
}
::std::string* Document::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:neurozone.pb.Document.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_url() {
  // @@protoc_insertion_point(field_release:neurozone.pb.Document.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:neurozone.pb.Document.url)
}

// optional string backend = 2;
bool Document::has_backend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_backend() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_backend() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_backend() {
  backend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backend();
}
const ::std::string& Document::backend() const {
  // @@protoc_insertion_point(field_get:neurozone.pb.Document.backend)
  return backend_.GetNoArena();
}
void Document::set_backend(const ::std::string& value) {
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurozone.pb.Document.backend)
}
#if LANG_CXX11
void Document::set_backend(::std::string&& value) {
  set_has_backend();
  backend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurozone.pb.Document.backend)
}
#endif
void Document::set_backend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurozone.pb.Document.backend)
}
void Document::set_backend(const char* value, size_t size) {
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurozone.pb.Document.backend)
}
::std::string* Document::mutable_backend() {
  set_has_backend();
  // @@protoc_insertion_point(field_mutable:neurozone.pb.Document.backend)
  return backend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_backend() {
  // @@protoc_insertion_point(field_release:neurozone.pb.Document.backend)
  clear_has_backend();
  return backend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_backend(::std::string* backend) {
  if (backend != NULL) {
    set_has_backend();
  } else {
    clear_has_backend();
  }
  backend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backend);
  // @@protoc_insertion_point(field_set_allocated:neurozone.pb.Document.backend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentsInfo::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentsInfo::DocumentsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_neurozone_5fdocuments_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:neurozone.pb.DocumentsInfo)
}
DocumentsInfo::DocumentsInfo(const DocumentsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:neurozone.pb.DocumentsInfo)
}

void DocumentsInfo::SharedCtor() {
  _cached_size_ = 0;
}

DocumentsInfo::~DocumentsInfo() {
  // @@protoc_insertion_point(destructor:neurozone.pb.DocumentsInfo)
  SharedDtor();
}

void DocumentsInfo::SharedDtor() {
}

void DocumentsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentsInfo::descriptor() {
  protobuf_neurozone_5fdocuments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurozone_5fdocuments_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentsInfo& DocumentsInfo::default_instance() {
  protobuf_neurozone_5fdocuments_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentsInfo* DocumentsInfo::New(::google::protobuf::Arena* arena) const {
  DocumentsInfo* n = new DocumentsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:neurozone.pb.DocumentsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neurozone.pb.DocumentsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .neurozone.pb.Document documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neurozone.pb.DocumentsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neurozone.pb.DocumentsInfo)
  return false;
#undef DO_
}

void DocumentsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neurozone.pb.DocumentsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neurozone.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:neurozone.pb.DocumentsInfo)
}

::google::protobuf::uint8* DocumentsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neurozone.pb.DocumentsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .neurozone.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->documents(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neurozone.pb.DocumentsInfo)
  return target;
}

size_t DocumentsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neurozone.pb.DocumentsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .neurozone.pb.Document documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neurozone.pb.DocumentsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neurozone.pb.DocumentsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neurozone.pb.DocumentsInfo)
    MergeFrom(*source);
  }
}

void DocumentsInfo::MergeFrom(const DocumentsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neurozone.pb.DocumentsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
}

void DocumentsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neurozone.pb.DocumentsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentsInfo::CopyFrom(const DocumentsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neurozone.pb.DocumentsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentsInfo::IsInitialized() const {
  return true;
}

void DocumentsInfo::Swap(DocumentsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentsInfo::InternalSwap(DocumentsInfo* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentsInfo::GetMetadata() const {
  protobuf_neurozone_5fdocuments_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_neurozone_5fdocuments_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentsInfo

// repeated .neurozone.pb.Document documents = 1;
int DocumentsInfo::documents_size() const {
  return documents_.size();
}
void DocumentsInfo::clear_documents() {
  documents_.Clear();
}
const ::neurozone::pb::Document& DocumentsInfo::documents(int index) const {
  // @@protoc_insertion_point(field_get:neurozone.pb.DocumentsInfo.documents)
  return documents_.Get(index);
}
::neurozone::pb::Document* DocumentsInfo::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:neurozone.pb.DocumentsInfo.documents)
  return documents_.Mutable(index);
}
::neurozone::pb::Document* DocumentsInfo::add_documents() {
  // @@protoc_insertion_point(field_add:neurozone.pb.DocumentsInfo.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >*
DocumentsInfo::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:neurozone.pb.DocumentsInfo.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >&
DocumentsInfo::documents() const {
  // @@protoc_insertion_point(field_list:neurozone.pb.DocumentsInfo.documents)
  return documents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace neurozone

// @@protoc_insertion_point(global_scope)
