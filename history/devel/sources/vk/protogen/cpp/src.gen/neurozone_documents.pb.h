// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neurozone_documents.proto

#ifndef PROTOBUF_neurozone_5fdocuments_2eproto__INCLUDED
#define PROTOBUF_neurozone_5fdocuments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace neurozone {
namespace pb {
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class DocumentsInfo;
class DocumentsInfoDefaultTypeInternal;
extern DocumentsInfoDefaultTypeInternal _DocumentsInfo_default_instance_;
}  // namespace pb
}  // namespace neurozone

namespace neurozone {
namespace pb {

namespace protobuf_neurozone_5fdocuments_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_neurozone_5fdocuments_2eproto

// ===================================================================

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurozone.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string backend = 2;
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 2;
  const ::std::string& backend() const;
  void set_backend(const ::std::string& value);
  #if LANG_CXX11
  void set_backend(::std::string&& value);
  #endif
  void set_backend(const char* value);
  void set_backend(const char* value, size_t size);
  ::std::string* mutable_backend();
  ::std::string* release_backend();
  void set_allocated_backend(::std::string* backend);

  // @@protoc_insertion_point(class_scope:neurozone.pb.Document)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_backend();
  void clear_has_backend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr backend_;
  friend struct protobuf_neurozone_5fdocuments_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neurozone.pb.DocumentsInfo) */ {
 public:
  DocumentsInfo();
  virtual ~DocumentsInfo();

  DocumentsInfo(const DocumentsInfo& from);

  inline DocumentsInfo& operator=(const DocumentsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentsInfo(DocumentsInfo&& from) noexcept
    : DocumentsInfo() {
    *this = ::std::move(from);
  }

  inline DocumentsInfo& operator=(DocumentsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentsInfo& default_instance();

  static inline const DocumentsInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentsInfo*>(
               &_DocumentsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DocumentsInfo* other);
  friend void swap(DocumentsInfo& a, DocumentsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentsInfo& from);
  void MergeFrom(const DocumentsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .neurozone.pb.Document documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::neurozone::pb::Document& documents(int index) const;
  ::neurozone::pb::Document* mutable_documents(int index);
  ::neurozone::pb::Document* add_documents();
  ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >&
      documents() const;

  // @@protoc_insertion_point(class_scope:neurozone.pb.DocumentsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document > documents_;
  friend struct protobuf_neurozone_5fdocuments_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Document

// optional string url = 1;
inline bool Document::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Document::url() const {
  // @@protoc_insertion_point(field_get:neurozone.pb.Document.url)
  return url_.GetNoArena();
}
inline void Document::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurozone.pb.Document.url)
}
#if LANG_CXX11
inline void Document::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurozone.pb.Document.url)
}
#endif
inline void Document::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurozone.pb.Document.url)
}
inline void Document::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurozone.pb.Document.url)
}
inline ::std::string* Document::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:neurozone.pb.Document.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_url() {
  // @@protoc_insertion_point(field_release:neurozone.pb.Document.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:neurozone.pb.Document.url)
}

// optional string backend = 2;
inline bool Document::has_backend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_backend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_backend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_backend() {
  backend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backend();
}
inline const ::std::string& Document::backend() const {
  // @@protoc_insertion_point(field_get:neurozone.pb.Document.backend)
  return backend_.GetNoArena();
}
inline void Document::set_backend(const ::std::string& value) {
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neurozone.pb.Document.backend)
}
#if LANG_CXX11
inline void Document::set_backend(::std::string&& value) {
  set_has_backend();
  backend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neurozone.pb.Document.backend)
}
#endif
inline void Document::set_backend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neurozone.pb.Document.backend)
}
inline void Document::set_backend(const char* value, size_t size) {
  set_has_backend();
  backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neurozone.pb.Document.backend)
}
inline ::std::string* Document::mutable_backend() {
  set_has_backend();
  // @@protoc_insertion_point(field_mutable:neurozone.pb.Document.backend)
  return backend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_backend() {
  // @@protoc_insertion_point(field_release:neurozone.pb.Document.backend)
  clear_has_backend();
  return backend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_backend(::std::string* backend) {
  if (backend != NULL) {
    set_has_backend();
  } else {
    clear_has_backend();
  }
  backend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backend);
  // @@protoc_insertion_point(field_set_allocated:neurozone.pb.Document.backend)
}

// -------------------------------------------------------------------

// DocumentsInfo

// repeated .neurozone.pb.Document documents = 1;
inline int DocumentsInfo::documents_size() const {
  return documents_.size();
}
inline void DocumentsInfo::clear_documents() {
  documents_.Clear();
}
inline const ::neurozone::pb::Document& DocumentsInfo::documents(int index) const {
  // @@protoc_insertion_point(field_get:neurozone.pb.DocumentsInfo.documents)
  return documents_.Get(index);
}
inline ::neurozone::pb::Document* DocumentsInfo::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:neurozone.pb.DocumentsInfo.documents)
  return documents_.Mutable(index);
}
inline ::neurozone::pb::Document* DocumentsInfo::add_documents() {
  // @@protoc_insertion_point(field_add:neurozone.pb.DocumentsInfo.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >*
DocumentsInfo::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:neurozone.pb.DocumentsInfo.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::neurozone::pb::Document >&
DocumentsInfo::documents() const {
  // @@protoc_insertion_point(field_list:neurozone.pb.DocumentsInfo.documents)
  return documents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace neurozone

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_neurozone_5fdocuments_2eproto__INCLUDED
