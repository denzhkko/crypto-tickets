// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phalanx_defs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phalanx_defs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;
class CropImageMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CropImageMeta>
     _instance;
} _CropImageMeta_default_instance_;
class CropImageMetaBinDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CropImageMetaBin>
     _instance;
} _CropImageMetaBin_default_instance_;

namespace protobuf_phalanx_5fdefs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, contenttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, crop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, prevcompat_),
  3,
  0,
  1,
  2,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, y2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMeta, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMetaBin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMetaBin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropImageMetaBin, data_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(Document)},
  { 17, 27, sizeof(CropImageMeta)},
  { 32, 38, sizeof(CropImageMetaBin)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CropImageMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CropImageMetaBin_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "phalanx_defs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_CropImageMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CropImageMeta_default_instance_);_CropImageMetaBin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CropImageMetaBin_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022phalanx_defs.proto\022\030ru.mail.go.webbase"
      ".blobs\"\226\001\n\010Document\022\017\n\007version\030\001 \002(\r\022\013\n\003"
      "key\030\002 \002(\t\022\014\n\004data\030\003 \002(\014\022\023\n\013contentType\030\004"
      " \001(\t\0225\n\004crop\030\005 \003(\0132\'.ru.mail.go.webbase."
      "blobs.CropImageMeta\022\022\n\nprevCompat\030\006 \001(\010\""
      "\233\001\n\rCropImageMeta\022\n\n\002x1\030\002 \002(\005\022\n\n\002y1\030\003 \002("
      "\005\022\n\n\002x2\030\004 \002(\005\022\n\n\002y2\030\005 \002(\005\022<\n\004type\030\006 \001(\0162"
      "..ru.mail.go.webbase.blobs.CropImageMeta"
      ".type_t\"\034\n\006type_t\022\010\n\004face\020\001\022\010\n\004text\020\002\"I\n"
      "\020CropImageMetaBin\0225\n\004data\030\001 \003(\0132\'.ru.mai"
      "l.go.webbase.blobs.CropImageMetaB\rB\013Phal"
      "anxDefs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "phalanx_defs.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_phalanx_5fdefs_2eproto

const ::google::protobuf::EnumDescriptor* CropImageMeta_type_t_descriptor() {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_enum_descriptors[0];
}
bool CropImageMeta_type_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CropImageMeta_type_t CropImageMeta::face;
const CropImageMeta_type_t CropImageMeta::text;
const CropImageMeta_type_t CropImageMeta::type_t_MIN;
const CropImageMeta_type_t CropImageMeta::type_t_MAX;
const int CropImageMeta::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kVersionFieldNumber;
const int Document::kKeyFieldNumber;
const int Document::kDataFieldNumber;
const int Document::kContentTypeFieldNumber;
const int Document::kCropFieldNumber;
const int Document::kPrevCompatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      crop_(from.crop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  contenttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contenttype()) {
    contenttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contenttype_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevcompat_) -
    reinterpret_cast<char*>(&version_)) + sizeof(prevcompat_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contenttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevcompat_) -
      reinterpret_cast<char*>(&version_)) + sizeof(prevcompat_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contenttype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crop_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!contenttype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contenttype_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prevcompat_) -
        reinterpret_cast<char*>(&version_)) + sizeof(prevcompat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Document.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contentType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contenttype().data(), static_cast<int>(this->contenttype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.blobs.Document.contentType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prevCompat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_prevcompat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevcompat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Document.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional string contentType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), static_cast<int>(this->contenttype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Document.contentType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contenttype(), output);
  }

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crop(static_cast<int>(i)), output);
  }

  // optional bool prevCompat = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prevcompat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Document.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string contentType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), static_cast<int>(this->contenttype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.blobs.Document.contentType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contenttype(), target);
  }

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->crop(static_cast<int>(i)), deterministic, target);
  }

  // optional bool prevCompat = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prevcompat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.Document)
  return target;
}

size_t Document::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.Document)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->crop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop(static_cast<int>(i)));
    }
  }

  // optional string contentType = 4;
  if (has_contenttype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contenttype());
  }

  // optional bool prevCompat = 6;
  if (has_prevcompat()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crop_.MergeFrom(from.crop_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_contenttype();
      contenttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contenttype_);
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      prevcompat_ = from.prevcompat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crop())) return false;
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  crop_.InternalSwap(&other->crop_);
  key_.Swap(&other->key_);
  data_.Swap(&other->data_);
  contenttype_.Swap(&other->contenttype_);
  swap(version_, other->version_);
  swap(prevcompat_, other->prevcompat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// required uint32 version = 1;
bool Document::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Document::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Document::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Document::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 Document::version() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.version)
  return version_;
}
void Document::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.version)
}

// required string key = 2;
bool Document::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Document::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.key)
  return key_.GetNoArena();
}
void Document::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.key)
}
#if LANG_CXX11
void Document::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.key)
}
#endif
void Document::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.key)
}
void Document::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.key)
}
::std::string* Document::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.key)
}

// required bytes data = 3;
bool Document::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Document::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.data)
  return data_.GetNoArena();
}
void Document::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.data)
}
#if LANG_CXX11
void Document::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.data)
}
#endif
void Document::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.data)
}
void Document::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.data)
}
::std::string* Document::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.data)
}

// optional string contentType = 4;
bool Document::has_contenttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Document::set_has_contenttype() {
  _has_bits_[0] |= 0x00000004u;
}
void Document::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000004u;
}
void Document::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contenttype();
}
const ::std::string& Document::contenttype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.contentType)
  return contenttype_.GetNoArena();
}
void Document::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.contentType)
}
#if LANG_CXX11
void Document::set_contenttype(::std::string&& value) {
  set_has_contenttype();
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.contentType)
}
#endif
void Document::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.contentType)
}
void Document::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.contentType)
}
::std::string* Document::mutable_contenttype() {
  set_has_contenttype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.contentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_contenttype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.contentType)
  clear_has_contenttype();
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    set_has_contenttype();
  } else {
    clear_has_contenttype();
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.contentType)
}

// repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
int Document::crop_size() const {
  return crop_.size();
}
void Document::clear_crop() {
  crop_.Clear();
}
const ::ru::mail::go::webbase::blobs::CropImageMeta& Document::crop(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Get(index);
}
::ru::mail::go::webbase::blobs::CropImageMeta* Document::mutable_crop(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CropImageMeta* Document::add_crop() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
Document::mutable_crop() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Document.crop)
  return &crop_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
Document::crop() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Document.crop)
  return crop_;
}

// optional bool prevCompat = 6;
bool Document::has_prevcompat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Document::set_has_prevcompat() {
  _has_bits_[0] |= 0x00000010u;
}
void Document::clear_has_prevcompat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Document::clear_prevcompat() {
  prevcompat_ = false;
  clear_has_prevcompat();
}
bool Document::prevcompat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.prevCompat)
  return prevcompat_;
}
void Document::set_prevcompat(bool value) {
  set_has_prevcompat();
  prevcompat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.prevCompat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropImageMeta::kX1FieldNumber;
const int CropImageMeta::kY1FieldNumber;
const int CropImageMeta::kX2FieldNumber;
const int CropImageMeta::kY2FieldNumber;
const int CropImageMeta::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropImageMeta::CropImageMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CropImageMeta)
}
CropImageMeta::CropImageMeta(const CropImageMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CropImageMeta)
}

void CropImageMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y2_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
  type_ = 1;
}

CropImageMeta::~CropImageMeta() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CropImageMeta)
  SharedDtor();
}

void CropImageMeta::SharedDtor() {
}

void CropImageMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropImageMeta::descriptor() {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CropImageMeta& CropImageMeta::default_instance() {
  protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CropImageMeta* CropImageMeta::New(::google::protobuf::Arena* arena) const {
  CropImageMeta* n = new CropImageMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropImageMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CropImageMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&x1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y2_) -
        reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CropImageMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CropImageMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_y1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_x2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_y2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::CropImageMeta_type_t_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::blobs::CropImageMeta_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CropImageMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CropImageMeta)
  return false;
#undef DO_
}

void CropImageMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CropImageMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x1 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x1(), output);
  }

  // required int32 y1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y1(), output);
  }

  // required int32 x2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x2(), output);
  }

  // required int32 y2 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y2(), output);
  }

  // optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CropImageMeta)
}

::google::protobuf::uint8* CropImageMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CropImageMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x1(), target);
  }

  // required int32 y1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y1(), target);
  }

  // required int32 x2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x2(), target);
  }

  // required int32 y2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y2(), target);
  }

  // optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CropImageMeta)
  return target;
}

size_t CropImageMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.CropImageMeta)
  size_t total_size = 0;

  if (has_x1()) {
    // required int32 x1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x1());
  }

  if (has_y1()) {
    // required int32 y1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y1());
  }

  if (has_x2()) {
    // required int32 x2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x2());
  }

  if (has_y2()) {
    // required int32 y2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y2());
  }

  return total_size;
}
size_t CropImageMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CropImageMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x1());

    // required int32 y1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y1());

    // required int32 x2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x2());

    // required int32 y2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropImageMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CropImageMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const CropImageMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CropImageMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CropImageMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CropImageMeta)
    MergeFrom(*source);
  }
}

void CropImageMeta::MergeFrom(const CropImageMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CropImageMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000002u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000004u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000008u) {
      y2_ = from.y2_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CropImageMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CropImageMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropImageMeta::CopyFrom(const CropImageMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CropImageMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropImageMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CropImageMeta::Swap(CropImageMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropImageMeta::InternalSwap(CropImageMeta* other) {
  using std::swap;
  swap(x1_, other->x1_);
  swap(y1_, other->y1_);
  swap(x2_, other->x2_);
  swap(y2_, other->y2_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropImageMeta::GetMetadata() const {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropImageMeta

// required int32 x1 = 2;
bool CropImageMeta::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CropImageMeta::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
void CropImageMeta::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CropImageMeta::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
::google::protobuf::int32 CropImageMeta::x1() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.x1)
  return x1_;
}
void CropImageMeta::set_x1(::google::protobuf::int32 value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.x1)
}

// required int32 y1 = 3;
bool CropImageMeta::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CropImageMeta::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
void CropImageMeta::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CropImageMeta::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
::google::protobuf::int32 CropImageMeta::y1() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.y1)
  return y1_;
}
void CropImageMeta::set_y1(::google::protobuf::int32 value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.y1)
}

// required int32 x2 = 4;
bool CropImageMeta::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CropImageMeta::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
void CropImageMeta::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CropImageMeta::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
::google::protobuf::int32 CropImageMeta::x2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.x2)
  return x2_;
}
void CropImageMeta::set_x2(::google::protobuf::int32 value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.x2)
}

// required int32 y2 = 5;
bool CropImageMeta::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CropImageMeta::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
void CropImageMeta::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CropImageMeta::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
::google::protobuf::int32 CropImageMeta::y2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.y2)
  return y2_;
}
void CropImageMeta::set_y2(::google::protobuf::int32 value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.y2)
}

// optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
bool CropImageMeta::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CropImageMeta::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CropImageMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CropImageMeta::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ru::mail::go::webbase::blobs::CropImageMeta_type_t CropImageMeta::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.type)
  return static_cast< ::ru::mail::go::webbase::blobs::CropImageMeta_type_t >(type_);
}
void CropImageMeta::set_type(::ru::mail::go::webbase::blobs::CropImageMeta_type_t value) {
  assert(::ru::mail::go::webbase::blobs::CropImageMeta_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropImageMetaBin::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropImageMetaBin::CropImageMetaBin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.CropImageMetaBin)
}
CropImageMetaBin::CropImageMetaBin(const CropImageMetaBin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.CropImageMetaBin)
}

void CropImageMetaBin::SharedCtor() {
  _cached_size_ = 0;
}

CropImageMetaBin::~CropImageMetaBin() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.CropImageMetaBin)
  SharedDtor();
}

void CropImageMetaBin::SharedDtor() {
}

void CropImageMetaBin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropImageMetaBin::descriptor() {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CropImageMetaBin& CropImageMetaBin::default_instance() {
  protobuf_phalanx_5fdefs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CropImageMetaBin* CropImageMetaBin::New(::google::protobuf::Arena* arena) const {
  CropImageMetaBin* n = new CropImageMetaBin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropImageMetaBin::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CropImageMetaBin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.CropImageMetaBin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.CropImageMetaBin)
  return false;
#undef DO_
}

void CropImageMetaBin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.CropImageMetaBin)
}

::google::protobuf::uint8* CropImageMetaBin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.CropImageMetaBin)
  return target;
}

size_t CropImageMetaBin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropImageMetaBin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  GOOGLE_DCHECK_NE(&from, this);
  const CropImageMetaBin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CropImageMetaBin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.CropImageMetaBin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.CropImageMetaBin)
    MergeFrom(*source);
  }
}

void CropImageMetaBin::MergeFrom(const CropImageMetaBin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void CropImageMetaBin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropImageMetaBin::CopyFrom(const CropImageMetaBin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.CropImageMetaBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropImageMetaBin::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void CropImageMetaBin::Swap(CropImageMetaBin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropImageMetaBin::InternalSwap(CropImageMetaBin* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropImageMetaBin::GetMetadata() const {
  protobuf_phalanx_5fdefs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_phalanx_5fdefs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropImageMetaBin

// repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
int CropImageMetaBin::data_size() const {
  return data_.size();
}
void CropImageMetaBin::clear_data() {
  data_.Clear();
}
const ::ru::mail::go::webbase::blobs::CropImageMeta& CropImageMetaBin::data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Get(index);
}
::ru::mail::go::webbase::blobs::CropImageMeta* CropImageMetaBin::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Mutable(index);
}
::ru::mail::go::webbase::blobs::CropImageMeta* CropImageMetaBin::add_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
CropImageMetaBin::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
CropImageMetaBin::data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
