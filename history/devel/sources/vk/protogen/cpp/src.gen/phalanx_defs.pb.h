// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phalanx_defs.proto

#ifndef PROTOBUF_phalanx_5fdefs_2eproto__INCLUDED
#define PROTOBUF_phalanx_5fdefs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class CropImageMeta;
class CropImageMetaDefaultTypeInternal;
extern CropImageMetaDefaultTypeInternal _CropImageMeta_default_instance_;
class CropImageMetaBin;
class CropImageMetaBinDefaultTypeInternal;
extern CropImageMetaBinDefaultTypeInternal _CropImageMetaBin_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_phalanx_5fdefs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_phalanx_5fdefs_2eproto

enum CropImageMeta_type_t {
  CropImageMeta_type_t_face = 1,
  CropImageMeta_type_t_text = 2
};
bool CropImageMeta_type_t_IsValid(int value);
const CropImageMeta_type_t CropImageMeta_type_t_type_t_MIN = CropImageMeta_type_t_face;
const CropImageMeta_type_t CropImageMeta_type_t_type_t_MAX = CropImageMeta_type_t_text;
const int CropImageMeta_type_t_type_t_ARRAYSIZE = CropImageMeta_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CropImageMeta_type_t_descriptor();
inline const ::std::string& CropImageMeta_type_t_Name(CropImageMeta_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CropImageMeta_type_t_descriptor(), value);
}
inline bool CropImageMeta_type_t_Parse(
    const ::std::string& name, CropImageMeta_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CropImageMeta_type_t>(
    CropImageMeta_type_t_descriptor(), name, value);
}
// ===================================================================

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
  int crop_size() const;
  void clear_crop();
  static const int kCropFieldNumber = 5;
  const ::ru::mail::go::webbase::blobs::CropImageMeta& crop(int index) const;
  ::ru::mail::go::webbase::blobs::CropImageMeta* mutable_crop(int index);
  ::ru::mail::go::webbase::blobs::CropImageMeta* add_crop();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
      mutable_crop();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
      crop() const;

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string contentType = 4;
  bool has_contenttype() const;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 4;
  const ::std::string& contenttype() const;
  void set_contenttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttype(::std::string&& value);
  #endif
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  ::std::string* mutable_contenttype();
  ::std::string* release_contenttype();
  void set_allocated_contenttype(::std::string* contenttype);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool prevCompat = 6;
  bool has_prevcompat() const;
  void clear_prevcompat();
  static const int kPrevCompatFieldNumber = 6;
  bool prevcompat() const;
  void set_prevcompat(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.Document)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_key();
  void clear_has_key();
  void set_has_data();
  void clear_has_data();
  void set_has_contenttype();
  void clear_has_contenttype();
  void set_has_prevcompat();
  void clear_has_prevcompat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta > crop_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  ::google::protobuf::uint32 version_;
  bool prevcompat_;
  friend struct protobuf_phalanx_5fdefs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CropImageMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CropImageMeta) */ {
 public:
  CropImageMeta();
  virtual ~CropImageMeta();

  CropImageMeta(const CropImageMeta& from);

  inline CropImageMeta& operator=(const CropImageMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropImageMeta(CropImageMeta&& from) noexcept
    : CropImageMeta() {
    *this = ::std::move(from);
  }

  inline CropImageMeta& operator=(CropImageMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropImageMeta& default_instance();

  static inline const CropImageMeta* internal_default_instance() {
    return reinterpret_cast<const CropImageMeta*>(
               &_CropImageMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CropImageMeta* other);
  friend void swap(CropImageMeta& a, CropImageMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropImageMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  CropImageMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropImageMeta& from);
  void MergeFrom(const CropImageMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropImageMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CropImageMeta_type_t type_t;
  static const type_t face =
    CropImageMeta_type_t_face;
  static const type_t text =
    CropImageMeta_type_t_text;
  static inline bool type_t_IsValid(int value) {
    return CropImageMeta_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    CropImageMeta_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    CropImageMeta_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    CropImageMeta_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return CropImageMeta_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return CropImageMeta_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return CropImageMeta_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 x1 = 2;
  bool has_x1() const;
  void clear_x1();
  static const int kX1FieldNumber = 2;
  ::google::protobuf::int32 x1() const;
  void set_x1(::google::protobuf::int32 value);

  // required int32 y1 = 3;
  bool has_y1() const;
  void clear_y1();
  static const int kY1FieldNumber = 3;
  ::google::protobuf::int32 y1() const;
  void set_y1(::google::protobuf::int32 value);

  // required int32 x2 = 4;
  bool has_x2() const;
  void clear_x2();
  static const int kX2FieldNumber = 4;
  ::google::protobuf::int32 x2() const;
  void set_x2(::google::protobuf::int32 value);

  // required int32 y2 = 5;
  bool has_y2() const;
  void clear_y2();
  static const int kY2FieldNumber = 5;
  ::google::protobuf::int32 y2() const;
  void set_y2(::google::protobuf::int32 value);

  // optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::ru::mail::go::webbase::blobs::CropImageMeta_type_t type() const;
  void set_type(::ru::mail::go::webbase::blobs::CropImageMeta_type_t value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CropImageMeta)
 private:
  void set_has_x1();
  void clear_has_x1();
  void set_has_y1();
  void clear_has_y1();
  void set_has_x2();
  void clear_has_x2();
  void set_has_y2();
  void clear_has_y2();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x1_;
  ::google::protobuf::int32 y1_;
  ::google::protobuf::int32 x2_;
  ::google::protobuf::int32 y2_;
  int type_;
  friend struct protobuf_phalanx_5fdefs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CropImageMetaBin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.CropImageMetaBin) */ {
 public:
  CropImageMetaBin();
  virtual ~CropImageMetaBin();

  CropImageMetaBin(const CropImageMetaBin& from);

  inline CropImageMetaBin& operator=(const CropImageMetaBin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropImageMetaBin(CropImageMetaBin&& from) noexcept
    : CropImageMetaBin() {
    *this = ::std::move(from);
  }

  inline CropImageMetaBin& operator=(CropImageMetaBin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropImageMetaBin& default_instance();

  static inline const CropImageMetaBin* internal_default_instance() {
    return reinterpret_cast<const CropImageMetaBin*>(
               &_CropImageMetaBin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CropImageMetaBin* other);
  friend void swap(CropImageMetaBin& a, CropImageMetaBin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropImageMetaBin* New() const PROTOBUF_FINAL { return New(NULL); }

  CropImageMetaBin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropImageMetaBin& from);
  void MergeFrom(const CropImageMetaBin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropImageMetaBin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::CropImageMeta& data(int index) const;
  ::ru::mail::go::webbase::blobs::CropImageMeta* mutable_data(int index);
  ::ru::mail::go::webbase::blobs::CropImageMeta* add_data();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
      data() const;

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.CropImageMetaBin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta > data_;
  friend struct protobuf_phalanx_5fdefs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Document

// required uint32 version = 1;
inline bool Document::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Document::version() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.version)
  return version_;
}
inline void Document::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.version)
}

// required string key = 2;
inline bool Document::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Document::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.key)
  return key_.GetNoArena();
}
inline void Document::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.key)
}
#if LANG_CXX11
inline void Document::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.key)
}
#endif
inline void Document::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.key)
}
inline void Document::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.key)
}
inline ::std::string* Document::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.key)
}

// required bytes data = 3;
inline bool Document::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Document::data() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.data)
  return data_.GetNoArena();
}
inline void Document::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.data)
}
#if LANG_CXX11
inline void Document::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.data)
}
#endif
inline void Document::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.data)
}
inline void Document::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.data)
}
inline ::std::string* Document::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_data() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.data)
}

// optional string contentType = 4;
inline bool Document::has_contenttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_contenttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contenttype();
}
inline const ::std::string& Document::contenttype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.contentType)
  return contenttype_.GetNoArena();
}
inline void Document::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.contentType)
}
#if LANG_CXX11
inline void Document::set_contenttype(::std::string&& value) {
  set_has_contenttype();
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.Document.contentType)
}
#endif
inline void Document::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.Document.contentType)
}
inline void Document::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.Document.contentType)
}
inline ::std::string* Document::mutable_contenttype() {
  set_has_contenttype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.contentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_contenttype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.Document.contentType)
  clear_has_contenttype();
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    set_has_contenttype();
  } else {
    clear_has_contenttype();
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.Document.contentType)
}

// repeated .ru.mail.go.webbase.blobs.CropImageMeta crop = 5;
inline int Document::crop_size() const {
  return crop_.size();
}
inline void Document::clear_crop() {
  crop_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::CropImageMeta& Document::crop(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::CropImageMeta* Document::mutable_crop(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::CropImageMeta* Document::add_crop() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.Document.crop)
  return crop_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
Document::mutable_crop() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.Document.crop)
  return &crop_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
Document::crop() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.Document.crop)
  return crop_;
}

// optional bool prevCompat = 6;
inline bool Document::has_prevcompat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_prevcompat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_prevcompat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_prevcompat() {
  prevcompat_ = false;
  clear_has_prevcompat();
}
inline bool Document::prevcompat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.Document.prevCompat)
  return prevcompat_;
}
inline void Document::set_prevcompat(bool value) {
  set_has_prevcompat();
  prevcompat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.Document.prevCompat)
}

// -------------------------------------------------------------------

// CropImageMeta

// required int32 x1 = 2;
inline bool CropImageMeta::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropImageMeta::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropImageMeta::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropImageMeta::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline ::google::protobuf::int32 CropImageMeta::x1() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.x1)
  return x1_;
}
inline void CropImageMeta::set_x1(::google::protobuf::int32 value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.x1)
}

// required int32 y1 = 3;
inline bool CropImageMeta::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CropImageMeta::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CropImageMeta::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CropImageMeta::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline ::google::protobuf::int32 CropImageMeta::y1() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.y1)
  return y1_;
}
inline void CropImageMeta::set_y1(::google::protobuf::int32 value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.y1)
}

// required int32 x2 = 4;
inline bool CropImageMeta::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CropImageMeta::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CropImageMeta::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CropImageMeta::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline ::google::protobuf::int32 CropImageMeta::x2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.x2)
  return x2_;
}
inline void CropImageMeta::set_x2(::google::protobuf::int32 value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.x2)
}

// required int32 y2 = 5;
inline bool CropImageMeta::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CropImageMeta::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CropImageMeta::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CropImageMeta::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
inline ::google::protobuf::int32 CropImageMeta::y2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.y2)
  return y2_;
}
inline void CropImageMeta::set_y2(::google::protobuf::int32 value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.y2)
}

// optional .ru.mail.go.webbase.blobs.CropImageMeta.type_t type = 6;
inline bool CropImageMeta::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CropImageMeta::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CropImageMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CropImageMeta::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::mail::go::webbase::blobs::CropImageMeta_type_t CropImageMeta::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMeta.type)
  return static_cast< ::ru::mail::go::webbase::blobs::CropImageMeta_type_t >(type_);
}
inline void CropImageMeta::set_type(::ru::mail::go::webbase::blobs::CropImageMeta_type_t value) {
  assert(::ru::mail::go::webbase::blobs::CropImageMeta_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.CropImageMeta.type)
}

// -------------------------------------------------------------------

// CropImageMetaBin

// repeated .ru.mail.go.webbase.blobs.CropImageMeta data = 1;
inline int CropImageMetaBin::data_size() const {
  return data_.size();
}
inline void CropImageMetaBin::clear_data() {
  data_.Clear();
}
inline const ::ru::mail::go::webbase::blobs::CropImageMeta& CropImageMetaBin::data(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Get(index);
}
inline ::ru::mail::go::webbase::blobs::CropImageMeta* CropImageMetaBin::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Mutable(index);
}
inline ::ru::mail::go::webbase::blobs::CropImageMeta* CropImageMetaBin::add_data() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >*
CropImageMetaBin::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::CropImageMeta >&
CropImageMetaBin::data() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.CropImageMetaBin.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::blobs::CropImageMeta_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::blobs::CropImageMeta_type_t>() {
  return ::ru::mail::go::webbase::blobs::CropImageMeta_type_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phalanx_5fdefs_2eproto__INCLUDED
