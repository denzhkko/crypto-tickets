// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_fast.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qddb_fast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QddbFast_DocInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbFast_DocInfo>
     _instance;
} _QddbFast_DocInfo_default_instance_;
class QddbFast_GeoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbFast_GeoInfo>
     _instance;
} _QddbFast_GeoInfo_default_instance_;
class QddbFastDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbFast>
     _instance;
} _QddbFast_default_instance_;

namespace protobuf_qddb_5ffast_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_DocInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_DocInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_DocInfo, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_DocInfo, result_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_GeoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_GeoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_GeoInfo, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast_GeoInfo, doc_infos_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbFast, geo_infos_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(QddbFast_DocInfo)},
  { 9, 16, sizeof(QddbFast_GeoInfo)},
  { 18, 24, sizeof(QddbFast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbFast_DocInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbFast_GeoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbFast_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qddb_fast.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::protobuf_result_2eproto::InitDefaults();
  _QddbFast_DocInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbFast_DocInfo_default_instance_);_QddbFast_GeoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbFast_GeoInfo_default_instance_);_QddbFast_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbFast_default_instance_);_QddbFast_DocInfo_default_instance_._instance.get_mutable()->result_ = const_cast< ::ru::mail::go::webbase::BBResult*>(
      ::ru::mail::go::webbase::BBResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017qddb_fast.proto\022\027ru.mail.go.webbase.se"
      "rp\032\014result.proto\"\347\001\n\010QddbFast\022<\n\tgeo_inf"
      "os\030\001 \003(\0132).ru.mail.go.webbase.serp.QddbF"
      "ast.GeoInfo\032G\n\007DocInfo\022\016\n\006doc_id\030\001 \002(\r\022,"
      "\n\006result\030\002 \001(\0132\034.ru.mail.go.webbase.BBRe"
      "sult\032T\n\007GeoInfo\022\013\n\003geo\030\001 \002(\r\022<\n\tdoc_info"
      "s\030\002 \003(\0132).ru.mail.go.webbase.serp.QddbFa"
      "st.DocInfoB\nB\010QDDBFast"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qddb_fast.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::protobuf_result_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qddb_5ffast_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbFast_DocInfo::kDocIdFieldNumber;
const int QddbFast_DocInfo::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbFast_DocInfo::QddbFast_DocInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ffast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbFast.DocInfo)
}
QddbFast_DocInfo::QddbFast_DocInfo(const QddbFast_DocInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::ru::mail::go::webbase::BBResult(*from.result_);
  } else {
    result_ = NULL;
  }
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbFast.DocInfo)
}

void QddbFast_DocInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(doc_id_));
}

QddbFast_DocInfo::~QddbFast_DocInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  SharedDtor();
}

void QddbFast_DocInfo::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QddbFast_DocInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbFast_DocInfo::descriptor() {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbFast_DocInfo& QddbFast_DocInfo::default_instance() {
  protobuf_qddb_5ffast_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbFast_DocInfo* QddbFast_DocInfo::New(::google::protobuf::Arena* arena) const {
  QddbFast_DocInfo* n = new QddbFast_DocInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbFast_DocInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_result()) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->::ru::mail::go::webbase::BBResult::Clear();
  }
  doc_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbFast_DocInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.BBResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  return false;
#undef DO_
}

void QddbFast_DocInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->doc_id(), output);
  }

  // optional .ru.mail.go.webbase.BBResult result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbFast.DocInfo)
}

::google::protobuf::uint8* QddbFast_DocInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 doc_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->doc_id(), target);
  }

  // optional .ru.mail.go.webbase.BBResult result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  return target;
}

size_t QddbFast_DocInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_id());
  }
  // optional .ru.mail.go.webbase.BBResult result = 2;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbFast_DocInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbFast_DocInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbFast_DocInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbFast.DocInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbFast.DocInfo)
    MergeFrom(*source);
  }
}

void QddbFast_DocInfo::MergeFrom(const QddbFast_DocInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::ru::mail::go::webbase::BBResult::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      doc_id_ = from.doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QddbFast_DocInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbFast_DocInfo::CopyFrom(const QddbFast_DocInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbFast.DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbFast_DocInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void QddbFast_DocInfo::Swap(QddbFast_DocInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbFast_DocInfo::InternalSwap(QddbFast_DocInfo* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbFast_DocInfo::GetMetadata() const {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbFast_DocInfo

// required uint32 doc_id = 1;
bool QddbFast_DocInfo::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QddbFast_DocInfo::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
void QddbFast_DocInfo::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void QddbFast_DocInfo::clear_doc_id() {
  doc_id_ = 0u;
  clear_has_doc_id();
}
::google::protobuf::uint32 QddbFast_DocInfo::doc_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbFast.DocInfo.doc_id)
  return doc_id_;
}
void QddbFast_DocInfo::set_doc_id(::google::protobuf::uint32 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbFast.DocInfo.doc_id)
}

// optional .ru.mail.go.webbase.BBResult result = 2;
bool QddbFast_DocInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbFast_DocInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbFast_DocInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbFast_DocInfo::clear_result() {
  if (result_ != NULL) result_->::ru::mail::go::webbase::BBResult::Clear();
  clear_has_result();
}
const ::ru::mail::go::webbase::BBResult& QddbFast_DocInfo::result() const {
  const ::ru::mail::go::webbase::BBResult* p = result_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbFast.DocInfo.result)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::BBResult*>(
      &::ru::mail::go::webbase::_BBResult_default_instance_);
}
::ru::mail::go::webbase::BBResult* QddbFast_DocInfo::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::ru::mail::go::webbase::BBResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbFast.DocInfo.result)
  return result_;
}
::ru::mail::go::webbase::BBResult* QddbFast_DocInfo::release_result() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QddbFast.DocInfo.result)
  clear_has_result();
  ::ru::mail::go::webbase::BBResult* temp = result_;
  result_ = NULL;
  return temp;
}
void QddbFast_DocInfo::set_allocated_result(::ru::mail::go::webbase::BBResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QddbFast.DocInfo.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbFast_GeoInfo::kGeoFieldNumber;
const int QddbFast_GeoInfo::kDocInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbFast_GeoInfo::QddbFast_GeoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ffast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
}
QddbFast_GeoInfo::QddbFast_GeoInfo(const QddbFast_GeoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_infos_(from.doc_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_ = from.geo_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
}

void QddbFast_GeoInfo::SharedCtor() {
  _cached_size_ = 0;
  geo_ = 0u;
}

QddbFast_GeoInfo::~QddbFast_GeoInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  SharedDtor();
}

void QddbFast_GeoInfo::SharedDtor() {
}

void QddbFast_GeoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbFast_GeoInfo::descriptor() {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbFast_GeoInfo& QddbFast_GeoInfo::default_instance() {
  protobuf_qddb_5ffast_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbFast_GeoInfo* QddbFast_GeoInfo::New(::google::protobuf::Arena* arena) const {
  QddbFast_GeoInfo* n = new QddbFast_GeoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbFast_GeoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_infos_.Clear();
  geo_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbFast_GeoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QddbFast.DocInfo doc_infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doc_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  return false;
#undef DO_
}

void QddbFast_GeoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // repeated .ru.mail.go.webbase.serp.QddbFast.DocInfo doc_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc_infos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
}

::google::protobuf::uint8* QddbFast_GeoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // repeated .ru.mail.go.webbase.serp.QddbFast.DocInfo doc_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->doc_infos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  return target;
}

size_t QddbFast_GeoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 geo = 1;
  if (has_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }
  // repeated .ru.mail.go.webbase.serp.QddbFast.DocInfo doc_infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbFast_GeoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbFast_GeoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbFast_GeoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
    MergeFrom(*source);
  }
}

void QddbFast_GeoInfo::MergeFrom(const QddbFast_GeoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_infos_.MergeFrom(from.doc_infos_);
  if (from.has_geo()) {
    set_geo(from.geo());
  }
}

void QddbFast_GeoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbFast_GeoInfo::CopyFrom(const QddbFast_GeoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbFast.GeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbFast_GeoInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->doc_infos())) return false;
  return true;
}

void QddbFast_GeoInfo::Swap(QddbFast_GeoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbFast_GeoInfo::InternalSwap(QddbFast_GeoInfo* other) {
  using std::swap;
  doc_infos_.InternalSwap(&other->doc_infos_);
  swap(geo_, other->geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbFast_GeoInfo::GetMetadata() const {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbFast_GeoInfo

// required uint32 geo = 1;
bool QddbFast_GeoInfo::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbFast_GeoInfo::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbFast_GeoInfo::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbFast_GeoInfo::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 QddbFast_GeoInfo::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbFast.GeoInfo.geo)
  return geo_;
}
void QddbFast_GeoInfo::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbFast.GeoInfo.geo)
}

// repeated .ru.mail.go.webbase.serp.QddbFast.DocInfo doc_infos = 2;
int QddbFast_GeoInfo::doc_infos_size() const {
  return doc_infos_.size();
}
void QddbFast_GeoInfo::clear_doc_infos() {
  doc_infos_.Clear();
}
const ::ru::mail::go::webbase::serp::QddbFast_DocInfo& QddbFast_GeoInfo::doc_infos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbFast.GeoInfo.doc_infos)
  return doc_infos_.Get(index);
}
::ru::mail::go::webbase::serp::QddbFast_DocInfo* QddbFast_GeoInfo::mutable_doc_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbFast.GeoInfo.doc_infos)
  return doc_infos_.Mutable(index);
}
::ru::mail::go::webbase::serp::QddbFast_DocInfo* QddbFast_GeoInfo::add_doc_infos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QddbFast.GeoInfo.doc_infos)
  return doc_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbFast_DocInfo >*
QddbFast_GeoInfo::mutable_doc_infos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QddbFast.GeoInfo.doc_infos)
  return &doc_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbFast_DocInfo >&
QddbFast_GeoInfo::doc_infos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QddbFast.GeoInfo.doc_infos)
  return doc_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbFast::kGeoInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbFast::QddbFast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ffast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbFast)
}
QddbFast::QddbFast(const QddbFast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_infos_(from.geo_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbFast)
}

void QddbFast::SharedCtor() {
  _cached_size_ = 0;
}

QddbFast::~QddbFast() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbFast)
  SharedDtor();
}

void QddbFast::SharedDtor() {
}

void QddbFast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbFast::descriptor() {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbFast& QddbFast::default_instance() {
  protobuf_qddb_5ffast_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbFast* QddbFast::New(::google::protobuf::Arena* arena) const {
  QddbFast* n = new QddbFast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbFast::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbFast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbFast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.serp.QddbFast.GeoInfo geo_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbFast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbFast)
  return false;
#undef DO_
}

void QddbFast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.serp.QddbFast.GeoInfo geo_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geo_infos(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbFast)
}

::google::protobuf::uint8* QddbFast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbFast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.serp.QddbFast.GeoInfo geo_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geo_infos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbFast)
  return target;
}

size_t QddbFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbFast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QddbFast.GeoInfo geo_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbFast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbFast)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbFast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbFast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbFast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbFast)
    MergeFrom(*source);
  }
}

void QddbFast::MergeFrom(const QddbFast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbFast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_infos_.MergeFrom(from.geo_infos_);
}

void QddbFast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbFast::CopyFrom(const QddbFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbFast::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_infos())) return false;
  return true;
}

void QddbFast::Swap(QddbFast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbFast::InternalSwap(QddbFast* other) {
  using std::swap;
  geo_infos_.InternalSwap(&other->geo_infos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbFast::GetMetadata() const {
  protobuf_qddb_5ffast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ffast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbFast

// repeated .ru.mail.go.webbase.serp.QddbFast.GeoInfo geo_infos = 1;
int QddbFast::geo_infos_size() const {
  return geo_infos_.size();
}
void QddbFast::clear_geo_infos() {
  geo_infos_.Clear();
}
const ::ru::mail::go::webbase::serp::QddbFast_GeoInfo& QddbFast::geo_infos(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbFast.geo_infos)
  return geo_infos_.Get(index);
}
::ru::mail::go::webbase::serp::QddbFast_GeoInfo* QddbFast::mutable_geo_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbFast.geo_infos)
  return geo_infos_.Mutable(index);
}
::ru::mail::go::webbase::serp::QddbFast_GeoInfo* QddbFast::add_geo_infos() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QddbFast.geo_infos)
  return geo_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbFast_GeoInfo >*
QddbFast::mutable_geo_infos() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QddbFast.geo_infos)
  return &geo_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbFast_GeoInfo >&
QddbFast::geo_infos() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QddbFast.geo_infos)
  return geo_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
