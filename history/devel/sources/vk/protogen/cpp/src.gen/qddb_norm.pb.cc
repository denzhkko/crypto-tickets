// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_norm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qddb_norm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QddbNorm_NormalizationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbNorm_Normalization>
     _instance;
} _QddbNorm_Normalization_default_instance_;
class QddbNorm_QddbEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbNorm_QddbEntry>
     _instance;
} _QddbNorm_QddbEntry_default_instance_;
class QddbNormDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbNorm>
     _instance;
} _QddbNorm_default_instance_;

namespace protobuf_qddb_5fnorm_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_Normalization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_Normalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_Normalization, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_QddbEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_QddbEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_QddbEntry, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm_QddbEntry, sessions_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm, norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbNorm, entries_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(QddbNorm_Normalization)},
  { 7, 14, sizeof(QddbNorm_QddbEntry)},
  { 16, 24, sizeof(QddbNorm)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbNorm_Normalization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbNorm_QddbEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbNorm_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qddb_norm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QddbNorm_Normalization_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbNorm_Normalization_default_instance_);_QddbNorm_QddbEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbNorm_QddbEntry_default_instance_);_QddbNorm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbNorm_default_instance_);_QddbNorm_default_instance_._instance.get_mutable()->norm_ = const_cast< ::ru::mail::go::webbase::serp::QddbNorm_Normalization*>(
      ::ru::mail::go::webbase::serp::QddbNorm_Normalization::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017qddb_norm.proto\022\027ru.mail.go.webbase.se"
      "rp\"\303\002\n\010QddbNorm\022\022\n\nquery_text\030\001 \001(\t\022=\n\004n"
      "orm\030\002 \001(\0132/.ru.mail.go.webbase.serp.Qddb"
      "Norm.Normalization\022<\n\007entries\030\003 \003(\0132+.ru"
      ".mail.go.webbase.serp.QddbNorm.QddbEntry"
      "\032y\n\rNormalization\022B\n\004type\030\001 \002(\01624.ru.mai"
      "l.go.webbase.serp.QddbNorm.Normalization"
      ".Type\"$\n\004Type\022\010\n\004None\020\000\022\010\n\004Lemm\020\001\022\010\n\004Sor"
      "t\020\002\032+\n\tQddbEntry\022\014\n\004hash\030\001 \002(\004\022\020\n\010sessio"
      "ns\030\002 \001(\rB\nB\010QDDBNorm"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qddb_norm.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qddb_5fnorm_2eproto

const ::google::protobuf::EnumDescriptor* QddbNorm_Normalization_Type_descriptor() {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_enum_descriptors[0];
}
bool QddbNorm_Normalization_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QddbNorm_Normalization_Type QddbNorm_Normalization::None;
const QddbNorm_Normalization_Type QddbNorm_Normalization::Lemm;
const QddbNorm_Normalization_Type QddbNorm_Normalization::Sort;
const QddbNorm_Normalization_Type QddbNorm_Normalization::Type_MIN;
const QddbNorm_Normalization_Type QddbNorm_Normalization::Type_MAX;
const int QddbNorm_Normalization::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbNorm_Normalization::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbNorm_Normalization::QddbNorm_Normalization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fnorm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbNorm.Normalization)
}
QddbNorm_Normalization::QddbNorm_Normalization(const QddbNorm_Normalization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbNorm.Normalization)
}

void QddbNorm_Normalization::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

QddbNorm_Normalization::~QddbNorm_Normalization() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  SharedDtor();
}

void QddbNorm_Normalization::SharedDtor() {
}

void QddbNorm_Normalization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbNorm_Normalization::descriptor() {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbNorm_Normalization& QddbNorm_Normalization::default_instance() {
  protobuf_qddb_5fnorm_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbNorm_Normalization* QddbNorm_Normalization::New(::google::protobuf::Arena* arena) const {
  QddbNorm_Normalization* n = new QddbNorm_Normalization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbNorm_Normalization::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbNorm_Normalization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.serp.QddbNorm.Normalization.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  return false;
#undef DO_
}

void QddbNorm_Normalization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.serp.QddbNorm.Normalization.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbNorm.Normalization)
}

::google::protobuf::uint8* QddbNorm_Normalization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.serp.QddbNorm.Normalization.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  return target;
}

size_t QddbNorm_Normalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.serp.QddbNorm.Normalization.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbNorm_Normalization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbNorm_Normalization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbNorm_Normalization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbNorm.Normalization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbNorm.Normalization)
    MergeFrom(*source);
  }
}

void QddbNorm_Normalization::MergeFrom(const QddbNorm_Normalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void QddbNorm_Normalization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbNorm_Normalization::CopyFrom(const QddbNorm_Normalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbNorm.Normalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbNorm_Normalization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QddbNorm_Normalization::Swap(QddbNorm_Normalization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbNorm_Normalization::InternalSwap(QddbNorm_Normalization* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbNorm_Normalization::GetMetadata() const {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbNorm_Normalization

// required .ru.mail.go.webbase.serp.QddbNorm.Normalization.Type type = 1;
bool QddbNorm_Normalization::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbNorm_Normalization::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbNorm_Normalization::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbNorm_Normalization::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type QddbNorm_Normalization::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.Normalization.type)
  return static_cast< ::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type >(type_);
}
void QddbNorm_Normalization::set_type(::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type value) {
  assert(::ru::mail::go::webbase::serp::QddbNorm_Normalization_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbNorm.Normalization.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbNorm_QddbEntry::kHashFieldNumber;
const int QddbNorm_QddbEntry::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbNorm_QddbEntry::QddbNorm_QddbEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fnorm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
}
QddbNorm_QddbEntry::QddbNorm_QddbEntry(const QddbNorm_QddbEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessions_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(sessions_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
}

void QddbNorm_QddbEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessions_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(sessions_));
}

QddbNorm_QddbEntry::~QddbNorm_QddbEntry() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  SharedDtor();
}

void QddbNorm_QddbEntry::SharedDtor() {
}

void QddbNorm_QddbEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbNorm_QddbEntry::descriptor() {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbNorm_QddbEntry& QddbNorm_QddbEntry::default_instance() {
  protobuf_qddb_5fnorm_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbNorm_QddbEntry* QddbNorm_QddbEntry::New(::google::protobuf::Arena* arena) const {
  QddbNorm_QddbEntry* n = new QddbNorm_QddbEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbNorm_QddbEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sessions_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbNorm_QddbEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  return false;
#undef DO_
}

void QddbNorm_QddbEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hash(), output);
  }

  // optional uint32 sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
}

::google::protobuf::uint8* QddbNorm_QddbEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hash(), target);
  }

  // optional uint32 sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  return target;
}

size_t QddbNorm_QddbEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hash());
  }
  // optional uint32 sessions = 2;
  if (has_sessions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbNorm_QddbEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbNorm_QddbEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbNorm_QddbEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
    MergeFrom(*source);
  }
}

void QddbNorm_QddbEntry::MergeFrom(const QddbNorm_QddbEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessions_ = from.sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QddbNorm_QddbEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbNorm_QddbEntry::CopyFrom(const QddbNorm_QddbEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbNorm.QddbEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbNorm_QddbEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QddbNorm_QddbEntry::Swap(QddbNorm_QddbEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbNorm_QddbEntry::InternalSwap(QddbNorm_QddbEntry* other) {
  using std::swap;
  swap(hash_, other->hash_);
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbNorm_QddbEntry::GetMetadata() const {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbNorm_QddbEntry

// required uint64 hash = 1;
bool QddbNorm_QddbEntry::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbNorm_QddbEntry::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbNorm_QddbEntry::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbNorm_QddbEntry::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
::google::protobuf::uint64 QddbNorm_QddbEntry::hash() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.QddbEntry.hash)
  return hash_;
}
void QddbNorm_QddbEntry::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbNorm.QddbEntry.hash)
}

// optional uint32 sessions = 2;
bool QddbNorm_QddbEntry::has_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QddbNorm_QddbEntry::set_has_sessions() {
  _has_bits_[0] |= 0x00000002u;
}
void QddbNorm_QddbEntry::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000002u;
}
void QddbNorm_QddbEntry::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QddbNorm_QddbEntry::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.QddbEntry.sessions)
  return sessions_;
}
void QddbNorm_QddbEntry::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbNorm.QddbEntry.sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbNorm::kQueryTextFieldNumber;
const int QddbNorm::kNormFieldNumber;
const int QddbNorm::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbNorm::QddbNorm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fnorm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QddbNorm)
}
QddbNorm::QddbNorm(const QddbNorm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  if (from.has_norm()) {
    norm_ = new ::ru::mail::go::webbase::serp::QddbNorm_Normalization(*from.norm_);
  } else {
    norm_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QddbNorm)
}

void QddbNorm::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  norm_ = NULL;
}

QddbNorm::~QddbNorm() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QddbNorm)
  SharedDtor();
}

void QddbNorm::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete norm_;
}

void QddbNorm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbNorm::descriptor() {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbNorm& QddbNorm::default_instance() {
  protobuf_qddb_5fnorm_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbNorm* QddbNorm::New(::google::protobuf::Arena* arena) const {
  QddbNorm* n = new QddbNorm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbNorm::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QddbNorm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(norm_ != NULL);
      norm_->::ru::mail::go::webbase::serp::QddbNorm_Normalization::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbNorm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QddbNorm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QddbNorm.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QddbNorm.Normalization norm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_norm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QddbNorm.QddbEntry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QddbNorm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QddbNorm)
  return false;
#undef DO_
}

void QddbNorm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QddbNorm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QddbNorm.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // optional .ru.mail.go.webbase.serp.QddbNorm.Normalization norm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->norm_, output);
  }

  // repeated .ru.mail.go.webbase.serp.QddbNorm.QddbEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QddbNorm)
}

::google::protobuf::uint8* QddbNorm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QddbNorm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QddbNorm.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // optional .ru.mail.go.webbase.serp.QddbNorm.Normalization norm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->norm_, deterministic, target);
  }

  // repeated .ru.mail.go.webbase.serp.QddbNorm.QddbEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QddbNorm)
  return target;
}

size_t QddbNorm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QddbNorm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QddbNorm.QddbEntry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string query_text = 1;
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional .ru.mail.go.webbase.serp.QddbNorm.Normalization norm = 2;
    if (has_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->norm_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbNorm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QddbNorm)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbNorm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbNorm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QddbNorm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QddbNorm)
    MergeFrom(*source);
  }
}

void QddbNorm::MergeFrom(const QddbNorm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QddbNorm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_norm()->::ru::mail::go::webbase::serp::QddbNorm_Normalization::MergeFrom(from.norm());
    }
  }
}

void QddbNorm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QddbNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbNorm::CopyFrom(const QddbNorm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QddbNorm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbNorm::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  if (has_norm()) {
    if (!this->norm_->IsInitialized()) return false;
  }
  return true;
}

void QddbNorm::Swap(QddbNorm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbNorm::InternalSwap(QddbNorm* other) {
  using std::swap;
  entries_.InternalSwap(&other->entries_);
  query_text_.Swap(&other->query_text_);
  swap(norm_, other->norm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbNorm::GetMetadata() const {
  protobuf_qddb_5fnorm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fnorm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbNorm

// optional string query_text = 1;
bool QddbNorm::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbNorm::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbNorm::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbNorm::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& QddbNorm::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.query_text)
  return query_text_.GetNoArena();
}
void QddbNorm::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QddbNorm.query_text)
}
#if LANG_CXX11
void QddbNorm::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QddbNorm.query_text)
}
#endif
void QddbNorm::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QddbNorm.query_text)
}
void QddbNorm::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QddbNorm.query_text)
}
::std::string* QddbNorm::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbNorm.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QddbNorm::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QddbNorm.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QddbNorm::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QddbNorm.query_text)
}

// optional .ru.mail.go.webbase.serp.QddbNorm.Normalization norm = 2;
bool QddbNorm::has_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QddbNorm::set_has_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void QddbNorm::clear_has_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void QddbNorm::clear_norm() {
  if (norm_ != NULL) norm_->::ru::mail::go::webbase::serp::QddbNorm_Normalization::Clear();
  clear_has_norm();
}
const ::ru::mail::go::webbase::serp::QddbNorm_Normalization& QddbNorm::norm() const {
  const ::ru::mail::go::webbase::serp::QddbNorm_Normalization* p = norm_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.norm)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QddbNorm_Normalization*>(
      &::ru::mail::go::webbase::serp::_QddbNorm_Normalization_default_instance_);
}
::ru::mail::go::webbase::serp::QddbNorm_Normalization* QddbNorm::mutable_norm() {
  set_has_norm();
  if (norm_ == NULL) {
    norm_ = new ::ru::mail::go::webbase::serp::QddbNorm_Normalization;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbNorm.norm)
  return norm_;
}
::ru::mail::go::webbase::serp::QddbNorm_Normalization* QddbNorm::release_norm() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QddbNorm.norm)
  clear_has_norm();
  ::ru::mail::go::webbase::serp::QddbNorm_Normalization* temp = norm_;
  norm_ = NULL;
  return temp;
}
void QddbNorm::set_allocated_norm(::ru::mail::go::webbase::serp::QddbNorm_Normalization* norm) {
  delete norm_;
  norm_ = norm;
  if (norm) {
    set_has_norm();
  } else {
    clear_has_norm();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QddbNorm.norm)
}

// repeated .ru.mail.go.webbase.serp.QddbNorm.QddbEntry entries = 3;
int QddbNorm::entries_size() const {
  return entries_.size();
}
void QddbNorm::clear_entries() {
  entries_.Clear();
}
const ::ru::mail::go::webbase::serp::QddbNorm_QddbEntry& QddbNorm::entries(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QddbNorm.entries)
  return entries_.Get(index);
}
::ru::mail::go::webbase::serp::QddbNorm_QddbEntry* QddbNorm::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QddbNorm.entries)
  return entries_.Mutable(index);
}
::ru::mail::go::webbase::serp::QddbNorm_QddbEntry* QddbNorm::add_entries() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QddbNorm.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbNorm_QddbEntry >*
QddbNorm::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QddbNorm.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QddbNorm_QddbEntry >&
QddbNorm::entries() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QddbNorm.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
