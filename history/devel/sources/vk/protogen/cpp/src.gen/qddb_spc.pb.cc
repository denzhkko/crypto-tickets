// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_spc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qddb_spc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QDDBSpc_SpellcheckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QDDBSpc_Spellcheck>
     _instance;
} _QDDBSpc_Spellcheck_default_instance_;
class QDDBSpc_StatisticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QDDBSpc_Statistic>
     _instance;
} _QDDBSpc_Statistic_default_instance_;
class QDDBSpc_QueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QDDBSpc_QueryInfo>
     _instance;
} _QDDBSpc_QueryInfo_default_instance_;
class QDDBSpcDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QDDBSpc>
     _instance;
} _QDDBSpc_default_instance_;

namespace protobuf_qddb_5fspc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Spellcheck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Spellcheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Spellcheck, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Spellcheck, proposed_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Spellcheck, rank_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, spc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, spc_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_Statistic, spc_m_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_QueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_QueryInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc_QueryInfo, user_rank_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDDBSpc, query_info_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(QDDBSpc_Spellcheck)},
  { 11, 21, sizeof(QDDBSpc_Statistic)},
  { 26, 33, sizeof(QDDBSpc_QueryInfo)},
  { 35, 43, sizeof(QDDBSpc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QDDBSpc_Spellcheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QDDBSpc_Statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QDDBSpc_QueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QDDBSpc_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qddb_spc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::InitDefaults();
  _QDDBSpc_Spellcheck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QDDBSpc_Spellcheck_default_instance_);_QDDBSpc_Statistic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QDDBSpc_Statistic_default_instance_);_QDDBSpc_QueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QDDBSpc_QueryInfo_default_instance_);_QDDBSpc_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QDDBSpc_default_instance_);_QDDBSpc_Statistic_default_instance_._instance.get_mutable()->spc_y_ = const_cast< ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::internal_default_instance());
  _QDDBSpc_Statistic_default_instance_._instance.get_mutable()->spc_g_ = const_cast< ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::internal_default_instance());
  _QDDBSpc_Statistic_default_instance_._instance.get_mutable()->spc_m_ = const_cast< ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::internal_default_instance());
  _QDDBSpc_default_instance_._instance.get_mutable()->query_info_ = const_cast< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo*>(
      ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016qddb_spc.proto\022\027ru.mail.go.webbase.ser"
      "p\032\022sputnik_logs.proto\"\362\004\n\007QDDBSpc\022\022\n\nque"
      "ry_text\030\001 \001(\t\0228\n\004stat\030\002 \003(\0132*.ru.mail.go"
      ".webbase.serp.QDDBSpc.Statistic\022>\n\nquery"
      "_info\030\004 \001(\0132*.ru.mail.go.webbase.serp.QD"
      "DBSpc.QueryInfo\032s\n\nSpellcheck\022\?\n\004type\030\001 "
      "\002(\01621.ru.mail.go.webbase.SputnikRanker.S"
      "essionSpc.Type\022\026\n\016proposed_query\030\002 \001(\t\022\014"
      "\n\004rank\030\003 \001(\002\032\336\001\n\tStatistic\022\013\n\003geo\030\001 \002(\r\022"
      "\020\n\010sessions\030\002 \001(\r\022:\n\005spc_y\030\003 \001(\0132+.ru.ma"
      "il.go.webbase.serp.QDDBSpc.Spellcheck\022:\n"
      "\005spc_g\030\004 \001(\0132+.ru.mail.go.webbase.serp.Q"
      "DDBSpc.Spellcheck\022:\n\005spc_m\030\005 \001(\0132+.ru.ma"
      "il.go.webbase.serp.QDDBSpc.Spellcheck\032\202\001"
      "\n\tQueryInfo\022=\n\004type\030\001 \002(\0162/.ru.mail.go.w"
      "ebbase.serp.QDDBSpc.QueryInfo.Type\022\021\n\tus"
      "er_rank\030\002 \001(\r\"#\n\004Type\022\010\n\004None\020\000\022\007\n\003Url\020\001"
      "\022\010\n\004Word\020\002B\017B\rQSpellchecker"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qddb_spc.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::SputnikRanker::protobuf_sputnik_5flogs_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qddb_5fspc_2eproto

const ::google::protobuf::EnumDescriptor* QDDBSpc_QueryInfo_Type_descriptor() {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_enum_descriptors[0];
}
bool QDDBSpc_QueryInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::None;
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::Url;
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::Word;
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::Type_MIN;
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::Type_MAX;
const int QDDBSpc_QueryInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QDDBSpc_Spellcheck::kTypeFieldNumber;
const int QDDBSpc_Spellcheck::kProposedQueryFieldNumber;
const int QDDBSpc_Spellcheck::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QDDBSpc_Spellcheck::QDDBSpc_Spellcheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fspc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
}
QDDBSpc_Spellcheck::QDDBSpc_Spellcheck(const QDDBSpc_Spellcheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proposed_query()) {
    proposed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposed_query_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
}

void QDDBSpc_Spellcheck::SharedCtor() {
  _cached_size_ = 0;
  proposed_query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rank_));
}

QDDBSpc_Spellcheck::~QDDBSpc_Spellcheck() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  SharedDtor();
}

void QDDBSpc_Spellcheck::SharedDtor() {
  proposed_query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QDDBSpc_Spellcheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDDBSpc_Spellcheck::descriptor() {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QDDBSpc_Spellcheck& QDDBSpc_Spellcheck::default_instance() {
  protobuf_qddb_5fspc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QDDBSpc_Spellcheck* QDDBSpc_Spellcheck::New(::google::protobuf::Arena* arena) const {
  QDDBSpc_Spellcheck* n = new QDDBSpc_Spellcheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QDDBSpc_Spellcheck::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_proposed_query()) {
    GOOGLE_DCHECK(!proposed_query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proposed_query_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&type_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QDDBSpc_Spellcheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proposed_query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposed_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposed_query().data(), static_cast<int>(this->proposed_query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  return false;
#undef DO_
}

void QDDBSpc_Spellcheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string proposed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposed_query().data(), static_cast<int>(this->proposed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proposed_query(), output);
  }

  // optional float rank = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
}

::google::protobuf::uint8* QDDBSpc_Spellcheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string proposed_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposed_query().data(), static_cast<int>(this->proposed_query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proposed_query(), target);
  }

  // optional float rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  return target;
}

size_t QDDBSpc_Spellcheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string proposed_query = 2;
  if (has_proposed_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposed_query());
  }

  // optional float rank = 3;
  if (has_rank()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDDBSpc_Spellcheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  GOOGLE_DCHECK_NE(&from, this);
  const QDDBSpc_Spellcheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QDDBSpc_Spellcheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
    MergeFrom(*source);
  }
}

void QDDBSpc_Spellcheck::MergeFrom(const QDDBSpc_Spellcheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proposed_query();
      proposed_query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposed_query_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QDDBSpc_Spellcheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDDBSpc_Spellcheck::CopyFrom(const QDDBSpc_Spellcheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDDBSpc_Spellcheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void QDDBSpc_Spellcheck::Swap(QDDBSpc_Spellcheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QDDBSpc_Spellcheck::InternalSwap(QDDBSpc_Spellcheck* other) {
  using std::swap;
  proposed_query_.Swap(&other->proposed_query_);
  swap(type_, other->type_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QDDBSpc_Spellcheck::GetMetadata() const {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QDDBSpc_Spellcheck

// required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
bool QDDBSpc_Spellcheck::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QDDBSpc_Spellcheck::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void QDDBSpc_Spellcheck::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void QDDBSpc_Spellcheck::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type QDDBSpc_Spellcheck::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(type_);
}
void QDDBSpc_Spellcheck::set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.type)
}

// optional string proposed_query = 2;
bool QDDBSpc_Spellcheck::has_proposed_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QDDBSpc_Spellcheck::set_has_proposed_query() {
  _has_bits_[0] |= 0x00000001u;
}
void QDDBSpc_Spellcheck::clear_has_proposed_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void QDDBSpc_Spellcheck::clear_proposed_query() {
  proposed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proposed_query();
}
const ::std::string& QDDBSpc_Spellcheck::proposed_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  return proposed_query_.GetNoArena();
}
void QDDBSpc_Spellcheck::set_proposed_query(const ::std::string& value) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
#if LANG_CXX11
void QDDBSpc_Spellcheck::set_proposed_query(::std::string&& value) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
#endif
void QDDBSpc_Spellcheck::set_proposed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
void QDDBSpc_Spellcheck::set_proposed_query(const char* value, size_t size) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
::std::string* QDDBSpc_Spellcheck::mutable_proposed_query() {
  set_has_proposed_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  return proposed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QDDBSpc_Spellcheck::release_proposed_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  clear_has_proposed_query();
  return proposed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QDDBSpc_Spellcheck::set_allocated_proposed_query(::std::string* proposed_query) {
  if (proposed_query != NULL) {
    set_has_proposed_query();
  } else {
    clear_has_proposed_query();
  }
  proposed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposed_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}

// optional float rank = 3;
bool QDDBSpc_Spellcheck::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QDDBSpc_Spellcheck::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
void QDDBSpc_Spellcheck::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
void QDDBSpc_Spellcheck::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float QDDBSpc_Spellcheck::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.rank)
  return rank_;
}
void QDDBSpc_Spellcheck::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QDDBSpc_Statistic::kGeoFieldNumber;
const int QDDBSpc_Statistic::kSessionsFieldNumber;
const int QDDBSpc_Statistic::kSpcYFieldNumber;
const int QDDBSpc_Statistic::kSpcGFieldNumber;
const int QDDBSpc_Statistic::kSpcMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QDDBSpc_Statistic::QDDBSpc_Statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fspc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
}
QDDBSpc_Statistic::QDDBSpc_Statistic(const QDDBSpc_Statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_spc_y()) {
    spc_y_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck(*from.spc_y_);
  } else {
    spc_y_ = NULL;
  }
  if (from.has_spc_g()) {
    spc_g_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck(*from.spc_g_);
  } else {
    spc_g_ = NULL;
  }
  if (from.has_spc_m()) {
    spc_m_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck(*from.spc_m_);
  } else {
    spc_m_ = NULL;
  }
  ::memcpy(&geo_, &from.geo_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessions_) -
    reinterpret_cast<char*>(&geo_)) + sizeof(sessions_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
}

void QDDBSpc_Statistic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&spc_y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessions_) -
      reinterpret_cast<char*>(&spc_y_)) + sizeof(sessions_));
}

QDDBSpc_Statistic::~QDDBSpc_Statistic() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  SharedDtor();
}

void QDDBSpc_Statistic::SharedDtor() {
  if (this != internal_default_instance()) delete spc_y_;
  if (this != internal_default_instance()) delete spc_g_;
  if (this != internal_default_instance()) delete spc_m_;
}

void QDDBSpc_Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDDBSpc_Statistic::descriptor() {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QDDBSpc_Statistic& QDDBSpc_Statistic::default_instance() {
  protobuf_qddb_5fspc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QDDBSpc_Statistic* QDDBSpc_Statistic::New(::google::protobuf::Arena* arena) const {
  QDDBSpc_Statistic* n = new QDDBSpc_Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QDDBSpc_Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spc_y_ != NULL);
      spc_y_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spc_g_ != NULL);
      spc_g_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spc_m_ != NULL);
      spc_m_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&geo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sessions_) -
        reinterpret_cast<char*>(&geo_)) + sizeof(sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QDDBSpc_Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spc_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spc_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spc_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  return false;
#undef DO_
}

void QDDBSpc_Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // optional uint32 sessions = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessions(), output);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->spc_y_, output);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->spc_g_, output);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->spc_m_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
}

::google::protobuf::uint8* QDDBSpc_Statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // optional uint32 sessions = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessions(), target);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->spc_y_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->spc_g_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->spc_m_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  return target;
}

size_t QDDBSpc_Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 geo = 1;
  if (has_geo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
    if (has_spc_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spc_y_);
    }

    // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
    if (has_spc_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spc_g_);
    }

    // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
    if (has_spc_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spc_m_);
    }

  }
  // optional uint32 sessions = 2;
  if (has_sessions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDDBSpc_Statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const QDDBSpc_Statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QDDBSpc_Statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
    MergeFrom(*source);
  }
}

void QDDBSpc_Statistic::MergeFrom(const QDDBSpc_Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_spc_y()->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::MergeFrom(from.spc_y());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_spc_g()->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::MergeFrom(from.spc_g());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_spc_m()->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::MergeFrom(from.spc_m());
    }
    if (cached_has_bits & 0x00000008u) {
      geo_ = from.geo_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessions_ = from.sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QDDBSpc_Statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDDBSpc_Statistic::CopyFrom(const QDDBSpc_Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDDBSpc_Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_spc_y()) {
    if (!this->spc_y_->IsInitialized()) return false;
  }
  if (has_spc_g()) {
    if (!this->spc_g_->IsInitialized()) return false;
  }
  if (has_spc_m()) {
    if (!this->spc_m_->IsInitialized()) return false;
  }
  return true;
}

void QDDBSpc_Statistic::Swap(QDDBSpc_Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QDDBSpc_Statistic::InternalSwap(QDDBSpc_Statistic* other) {
  using std::swap;
  swap(spc_y_, other->spc_y_);
  swap(spc_g_, other->spc_g_);
  swap(spc_m_, other->spc_m_);
  swap(geo_, other->geo_);
  swap(sessions_, other->sessions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QDDBSpc_Statistic::GetMetadata() const {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QDDBSpc_Statistic

// required uint32 geo = 1;
bool QDDBSpc_Statistic::has_geo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QDDBSpc_Statistic::set_has_geo() {
  _has_bits_[0] |= 0x00000008u;
}
void QDDBSpc_Statistic::clear_has_geo() {
  _has_bits_[0] &= ~0x00000008u;
}
void QDDBSpc_Statistic::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 QDDBSpc_Statistic::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.geo)
  return geo_;
}
void QDDBSpc_Statistic::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Statistic.geo)
}

// optional uint32 sessions = 2;
bool QDDBSpc_Statistic::has_sessions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QDDBSpc_Statistic::set_has_sessions() {
  _has_bits_[0] |= 0x00000010u;
}
void QDDBSpc_Statistic::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000010u;
}
void QDDBSpc_Statistic::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
::google::protobuf::uint32 QDDBSpc_Statistic::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.sessions)
  return sessions_;
}
void QDDBSpc_Statistic::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Statistic.sessions)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
bool QDDBSpc_Statistic::has_spc_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QDDBSpc_Statistic::set_has_spc_y() {
  _has_bits_[0] |= 0x00000001u;
}
void QDDBSpc_Statistic::clear_has_spc_y() {
  _has_bits_[0] &= ~0x00000001u;
}
void QDDBSpc_Statistic::clear_spc_y() {
  if (spc_y_ != NULL) spc_y_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_y();
}
const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_y() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_y() {
  set_has_spc_y();
  if (spc_y_ == NULL) {
    spc_y_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  return spc_y_;
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  clear_has_spc_y();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_y_;
  spc_y_ = NULL;
  return temp;
}
void QDDBSpc_Statistic::set_allocated_spc_y(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_y) {
  delete spc_y_;
  spc_y_ = spc_y;
  if (spc_y) {
    set_has_spc_y();
  } else {
    clear_has_spc_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
bool QDDBSpc_Statistic::has_spc_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QDDBSpc_Statistic::set_has_spc_g() {
  _has_bits_[0] |= 0x00000002u;
}
void QDDBSpc_Statistic::clear_has_spc_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void QDDBSpc_Statistic::clear_spc_g() {
  if (spc_g_ != NULL) spc_g_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_g();
}
const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_g() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_g() {
  set_has_spc_g();
  if (spc_g_ == NULL) {
    spc_g_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  return spc_g_;
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  clear_has_spc_g();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_g_;
  spc_g_ = NULL;
  return temp;
}
void QDDBSpc_Statistic::set_allocated_spc_g(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_g) {
  delete spc_g_;
  spc_g_ = spc_g;
  if (spc_g) {
    set_has_spc_g();
  } else {
    clear_has_spc_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
bool QDDBSpc_Statistic::has_spc_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QDDBSpc_Statistic::set_has_spc_m() {
  _has_bits_[0] |= 0x00000004u;
}
void QDDBSpc_Statistic::clear_has_spc_m() {
  _has_bits_[0] &= ~0x00000004u;
}
void QDDBSpc_Statistic::clear_spc_m() {
  if (spc_m_ != NULL) spc_m_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_m();
}
const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_m() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_m() {
  set_has_spc_m();
  if (spc_m_ == NULL) {
    spc_m_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  return spc_m_;
}
::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  clear_has_spc_m();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_m_;
  spc_m_ = NULL;
  return temp;
}
void QDDBSpc_Statistic::set_allocated_spc_m(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_m) {
  delete spc_m_;
  spc_m_ = spc_m;
  if (spc_m) {
    set_has_spc_m();
  } else {
    clear_has_spc_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QDDBSpc_QueryInfo::kTypeFieldNumber;
const int QDDBSpc_QueryInfo::kUserRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QDDBSpc_QueryInfo::QDDBSpc_QueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fspc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
}
QDDBSpc_QueryInfo::QDDBSpc_QueryInfo(const QDDBSpc_QueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_rank_) -
    reinterpret_cast<char*>(&type_)) + sizeof(user_rank_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
}

void QDDBSpc_QueryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_rank_) -
      reinterpret_cast<char*>(&type_)) + sizeof(user_rank_));
}

QDDBSpc_QueryInfo::~QDDBSpc_QueryInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  SharedDtor();
}

void QDDBSpc_QueryInfo::SharedDtor() {
}

void QDDBSpc_QueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDDBSpc_QueryInfo::descriptor() {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QDDBSpc_QueryInfo& QDDBSpc_QueryInfo::default_instance() {
  protobuf_qddb_5fspc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QDDBSpc_QueryInfo* QDDBSpc_QueryInfo::New(::google::protobuf::Arena* arena) const {
  QDDBSpc_QueryInfo* n = new QDDBSpc_QueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QDDBSpc_QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_rank_) -
        reinterpret_cast<char*>(&type_)) + sizeof(user_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QDDBSpc_QueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  return false;
#undef DO_
}

void QDDBSpc_QueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 user_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
}

::google::protobuf::uint8* QDDBSpc_QueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 user_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  return target;
}

size_t QDDBSpc_QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional uint32 user_rank = 2;
  if (has_user_rank()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDDBSpc_QueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QDDBSpc_QueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QDDBSpc_QueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
    MergeFrom(*source);
  }
}

void QDDBSpc_QueryInfo::MergeFrom(const QDDBSpc_QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_rank_ = from.user_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QDDBSpc_QueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDDBSpc_QueryInfo::CopyFrom(const QDDBSpc_QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDDBSpc_QueryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QDDBSpc_QueryInfo::Swap(QDDBSpc_QueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QDDBSpc_QueryInfo::InternalSwap(QDDBSpc_QueryInfo* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(user_rank_, other->user_rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QDDBSpc_QueryInfo::GetMetadata() const {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QDDBSpc_QueryInfo

// required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
bool QDDBSpc_QueryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QDDBSpc_QueryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void QDDBSpc_QueryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void QDDBSpc_QueryInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.type)
  return static_cast< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type >(type_);
}
void QDDBSpc_QueryInfo::set_type(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type value) {
  assert(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.type)
}

// optional uint32 user_rank = 2;
bool QDDBSpc_QueryInfo::has_user_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QDDBSpc_QueryInfo::set_has_user_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void QDDBSpc_QueryInfo::clear_has_user_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void QDDBSpc_QueryInfo::clear_user_rank() {
  user_rank_ = 0u;
  clear_has_user_rank();
}
::google::protobuf::uint32 QDDBSpc_QueryInfo::user_rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.user_rank)
  return user_rank_;
}
void QDDBSpc_QueryInfo::set_user_rank(::google::protobuf::uint32 value) {
  set_has_user_rank();
  user_rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.user_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QDDBSpc::kQueryTextFieldNumber;
const int QDDBSpc::kStatFieldNumber;
const int QDDBSpc::kQueryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QDDBSpc::QDDBSpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5fspc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.serp.QDDBSpc)
}
QDDBSpc::QDDBSpc(const QDDBSpc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_(from.stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  if (from.has_query_info()) {
    query_info_ = new ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo(*from.query_info_);
  } else {
    query_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.serp.QDDBSpc)
}

void QDDBSpc::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_info_ = NULL;
}

QDDBSpc::~QDDBSpc() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.serp.QDDBSpc)
  SharedDtor();
}

void QDDBSpc::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_info_;
}

void QDDBSpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDDBSpc::descriptor() {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QDDBSpc& QDDBSpc::default_instance() {
  protobuf_qddb_5fspc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QDDBSpc* QDDBSpc::New(::google::protobuf::Arena* arena) const {
  QDDBSpc* n = new QDDBSpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QDDBSpc::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.serp.QDDBSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(query_info_ != NULL);
      query_info_->::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QDDBSpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.serp.QDDBSpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.webbase.serp.QDDBSpc.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.serp.QDDBSpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.serp.QDDBSpc)
  return false;
#undef DO_
}

void QDDBSpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.serp.QDDBSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QDDBSpc.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->query_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.serp.QDDBSpc)
}

::google::protobuf::uint8* QDDBSpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.serp.QDDBSpc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.webbase.serp.QDDBSpc.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stat(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->query_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.serp.QDDBSpc)
  return target;
}

size_t QDDBSpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.serp.QDDBSpc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string query_text = 1;
    if (has_query_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_text());
    }

    // optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
    if (has_query_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDDBSpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc)
  GOOGLE_DCHECK_NE(&from, this);
  const QDDBSpc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QDDBSpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.serp.QDDBSpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.serp.QDDBSpc)
    MergeFrom(*source);
  }
}

void QDDBSpc::MergeFrom(const QDDBSpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.serp.QDDBSpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_.MergeFrom(from.stat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query_text();
      query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_query_info()->::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo::MergeFrom(from.query_info());
    }
  }
}

void QDDBSpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDDBSpc::CopyFrom(const QDDBSpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.serp.QDDBSpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDDBSpc::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stat())) return false;
  if (has_query_info()) {
    if (!this->query_info_->IsInitialized()) return false;
  }
  return true;
}

void QDDBSpc::Swap(QDDBSpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QDDBSpc::InternalSwap(QDDBSpc* other) {
  using std::swap;
  stat_.InternalSwap(&other->stat_);
  query_text_.Swap(&other->query_text_);
  swap(query_info_, other->query_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QDDBSpc::GetMetadata() const {
  protobuf_qddb_5fspc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5fspc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QDDBSpc

// optional string query_text = 1;
bool QDDBSpc::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QDDBSpc::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QDDBSpc::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QDDBSpc::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& QDDBSpc::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  return query_text_.GetNoArena();
}
void QDDBSpc::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
#if LANG_CXX11
void QDDBSpc::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
#endif
void QDDBSpc::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
void QDDBSpc::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
::std::string* QDDBSpc::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QDDBSpc::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QDDBSpc::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}

// repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
int QDDBSpc::stat_size() const {
  return stat_.size();
}
void QDDBSpc::clear_stat() {
  stat_.Clear();
}
const ::ru::mail::go::webbase::serp::QDDBSpc_Statistic& QDDBSpc::stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Get(index);
}
::ru::mail::go::webbase::serp::QDDBSpc_Statistic* QDDBSpc::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Mutable(index);
}
::ru::mail::go::webbase::serp::QDDBSpc_Statistic* QDDBSpc::add_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >*
QDDBSpc::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return &stat_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >&
QDDBSpc::stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_;
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
bool QDDBSpc::has_query_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QDDBSpc::set_has_query_info() {
  _has_bits_[0] |= 0x00000002u;
}
void QDDBSpc::clear_has_query_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void QDDBSpc::clear_query_info() {
  if (query_info_ != NULL) query_info_->::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo::Clear();
  clear_has_query_info();
}
const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo& QDDBSpc::query_info() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* p = query_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_QueryInfo_default_instance_);
}
::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* QDDBSpc::mutable_query_info() {
  set_has_query_info();
  if (query_info_ == NULL) {
    query_info_ = new ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  return query_info_;
}
::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* QDDBSpc::release_query_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  clear_has_query_info();
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* temp = query_info_;
  query_info_ = NULL;
  return temp;
}
void QDDBSpc::set_allocated_query_info(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* query_info) {
  delete query_info_;
  query_info_ = query_info;
  if (query_info) {
    set_has_query_info();
  } else {
    clear_has_query_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.query_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
