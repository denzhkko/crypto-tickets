// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_spc.proto

#ifndef PROTOBUF_qddb_5fspc_2eproto__INCLUDED
#define PROTOBUF_qddb_5fspc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sputnik_logs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {
class QDDBSpc;
class QDDBSpcDefaultTypeInternal;
extern QDDBSpcDefaultTypeInternal _QDDBSpc_default_instance_;
class QDDBSpc_QueryInfo;
class QDDBSpc_QueryInfoDefaultTypeInternal;
extern QDDBSpc_QueryInfoDefaultTypeInternal _QDDBSpc_QueryInfo_default_instance_;
class QDDBSpc_Spellcheck;
class QDDBSpc_SpellcheckDefaultTypeInternal;
extern QDDBSpc_SpellcheckDefaultTypeInternal _QDDBSpc_Spellcheck_default_instance_;
class QDDBSpc_Statistic;
class QDDBSpc_StatisticDefaultTypeInternal;
extern QDDBSpc_StatisticDefaultTypeInternal _QDDBSpc_Statistic_default_instance_;
}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace serp {

namespace protobuf_qddb_5fspc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qddb_5fspc_2eproto

enum QDDBSpc_QueryInfo_Type {
  QDDBSpc_QueryInfo_Type_None = 0,
  QDDBSpc_QueryInfo_Type_Url = 1,
  QDDBSpc_QueryInfo_Type_Word = 2
};
bool QDDBSpc_QueryInfo_Type_IsValid(int value);
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo_Type_Type_MIN = QDDBSpc_QueryInfo_Type_None;
const QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo_Type_Type_MAX = QDDBSpc_QueryInfo_Type_Word;
const int QDDBSpc_QueryInfo_Type_Type_ARRAYSIZE = QDDBSpc_QueryInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* QDDBSpc_QueryInfo_Type_descriptor();
inline const ::std::string& QDDBSpc_QueryInfo_Type_Name(QDDBSpc_QueryInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    QDDBSpc_QueryInfo_Type_descriptor(), value);
}
inline bool QDDBSpc_QueryInfo_Type_Parse(
    const ::std::string& name, QDDBSpc_QueryInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QDDBSpc_QueryInfo_Type>(
    QDDBSpc_QueryInfo_Type_descriptor(), name, value);
}
// ===================================================================

class QDDBSpc_Spellcheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck) */ {
 public:
  QDDBSpc_Spellcheck();
  virtual ~QDDBSpc_Spellcheck();

  QDDBSpc_Spellcheck(const QDDBSpc_Spellcheck& from);

  inline QDDBSpc_Spellcheck& operator=(const QDDBSpc_Spellcheck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QDDBSpc_Spellcheck(QDDBSpc_Spellcheck&& from) noexcept
    : QDDBSpc_Spellcheck() {
    *this = ::std::move(from);
  }

  inline QDDBSpc_Spellcheck& operator=(QDDBSpc_Spellcheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QDDBSpc_Spellcheck& default_instance();

  static inline const QDDBSpc_Spellcheck* internal_default_instance() {
    return reinterpret_cast<const QDDBSpc_Spellcheck*>(
               &_QDDBSpc_Spellcheck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QDDBSpc_Spellcheck* other);
  friend void swap(QDDBSpc_Spellcheck& a, QDDBSpc_Spellcheck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QDDBSpc_Spellcheck* New() const PROTOBUF_FINAL { return New(NULL); }

  QDDBSpc_Spellcheck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QDDBSpc_Spellcheck& from);
  void MergeFrom(const QDDBSpc_Spellcheck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QDDBSpc_Spellcheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string proposed_query = 2;
  bool has_proposed_query() const;
  void clear_proposed_query();
  static const int kProposedQueryFieldNumber = 2;
  const ::std::string& proposed_query() const;
  void set_proposed_query(const ::std::string& value);
  #if LANG_CXX11
  void set_proposed_query(::std::string&& value);
  #endif
  void set_proposed_query(const char* value);
  void set_proposed_query(const char* value, size_t size);
  ::std::string* mutable_proposed_query();
  ::std::string* release_proposed_query();
  void set_allocated_proposed_query(::std::string* proposed_query);

  // required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type type() const;
  void set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value);

  // optional float rank = 3;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  float rank() const;
  void set_rank(float value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_proposed_query();
  void clear_has_proposed_query();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr proposed_query_;
  int type_;
  float rank_;
  friend struct protobuf_qddb_5fspc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QDDBSpc_Statistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QDDBSpc.Statistic) */ {
 public:
  QDDBSpc_Statistic();
  virtual ~QDDBSpc_Statistic();

  QDDBSpc_Statistic(const QDDBSpc_Statistic& from);

  inline QDDBSpc_Statistic& operator=(const QDDBSpc_Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QDDBSpc_Statistic(QDDBSpc_Statistic&& from) noexcept
    : QDDBSpc_Statistic() {
    *this = ::std::move(from);
  }

  inline QDDBSpc_Statistic& operator=(QDDBSpc_Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QDDBSpc_Statistic& default_instance();

  static inline const QDDBSpc_Statistic* internal_default_instance() {
    return reinterpret_cast<const QDDBSpc_Statistic*>(
               &_QDDBSpc_Statistic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QDDBSpc_Statistic* other);
  friend void swap(QDDBSpc_Statistic& a, QDDBSpc_Statistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QDDBSpc_Statistic* New() const PROTOBUF_FINAL { return New(NULL); }

  QDDBSpc_Statistic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QDDBSpc_Statistic& from);
  void MergeFrom(const QDDBSpc_Statistic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QDDBSpc_Statistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
  bool has_spc_y() const;
  void clear_spc_y();
  static const int kSpcYFieldNumber = 3;
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& spc_y() const;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* mutable_spc_y();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* release_spc_y();
  void set_allocated_spc_y(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_y);

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
  bool has_spc_g() const;
  void clear_spc_g();
  static const int kSpcGFieldNumber = 4;
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& spc_g() const;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* mutable_spc_g();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* release_spc_g();
  void set_allocated_spc_g(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_g);

  // optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
  bool has_spc_m() const;
  void clear_spc_m();
  static const int kSpcMFieldNumber = 5;
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& spc_m() const;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* mutable_spc_m();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* release_spc_m();
  void set_allocated_spc_m(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_m);

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // optional uint32 sessions = 2;
  bool has_sessions() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  ::google::protobuf::uint32 sessions() const;
  void set_sessions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QDDBSpc.Statistic)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_sessions();
  void clear_has_sessions();
  void set_has_spc_y();
  void clear_has_spc_y();
  void set_has_spc_g();
  void clear_has_spc_g();
  void set_has_spc_m();
  void clear_has_spc_m();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_y_;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_g_;
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_m_;
  ::google::protobuf::uint32 geo_;
  ::google::protobuf::uint32 sessions_;
  friend struct protobuf_qddb_5fspc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QDDBSpc_QueryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo) */ {
 public:
  QDDBSpc_QueryInfo();
  virtual ~QDDBSpc_QueryInfo();

  QDDBSpc_QueryInfo(const QDDBSpc_QueryInfo& from);

  inline QDDBSpc_QueryInfo& operator=(const QDDBSpc_QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QDDBSpc_QueryInfo(QDDBSpc_QueryInfo&& from) noexcept
    : QDDBSpc_QueryInfo() {
    *this = ::std::move(from);
  }

  inline QDDBSpc_QueryInfo& operator=(QDDBSpc_QueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QDDBSpc_QueryInfo& default_instance();

  static inline const QDDBSpc_QueryInfo* internal_default_instance() {
    return reinterpret_cast<const QDDBSpc_QueryInfo*>(
               &_QDDBSpc_QueryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(QDDBSpc_QueryInfo* other);
  friend void swap(QDDBSpc_QueryInfo& a, QDDBSpc_QueryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QDDBSpc_QueryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QDDBSpc_QueryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QDDBSpc_QueryInfo& from);
  void MergeFrom(const QDDBSpc_QueryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QDDBSpc_QueryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QDDBSpc_QueryInfo_Type Type;
  static const Type None =
    QDDBSpc_QueryInfo_Type_None;
  static const Type Url =
    QDDBSpc_QueryInfo_Type_Url;
  static const Type Word =
    QDDBSpc_QueryInfo_Type_Word;
  static inline bool Type_IsValid(int value) {
    return QDDBSpc_QueryInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    QDDBSpc_QueryInfo_Type_Type_MIN;
  static const Type Type_MAX =
    QDDBSpc_QueryInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    QDDBSpc_QueryInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return QDDBSpc_QueryInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return QDDBSpc_QueryInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return QDDBSpc_QueryInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type type() const;
  void set_type(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type value);

  // optional uint32 user_rank = 2;
  bool has_user_rank() const;
  void clear_user_rank();
  static const int kUserRankFieldNumber = 2;
  ::google::protobuf::uint32 user_rank() const;
  void set_user_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_user_rank();
  void clear_has_user_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 user_rank_;
  friend struct protobuf_qddb_5fspc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QDDBSpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.serp.QDDBSpc) */ {
 public:
  QDDBSpc();
  virtual ~QDDBSpc();

  QDDBSpc(const QDDBSpc& from);

  inline QDDBSpc& operator=(const QDDBSpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QDDBSpc(QDDBSpc&& from) noexcept
    : QDDBSpc() {
    *this = ::std::move(from);
  }

  inline QDDBSpc& operator=(QDDBSpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QDDBSpc& default_instance();

  static inline const QDDBSpc* internal_default_instance() {
    return reinterpret_cast<const QDDBSpc*>(
               &_QDDBSpc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(QDDBSpc* other);
  friend void swap(QDDBSpc& a, QDDBSpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QDDBSpc* New() const PROTOBUF_FINAL { return New(NULL); }

  QDDBSpc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QDDBSpc& from);
  void MergeFrom(const QDDBSpc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QDDBSpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QDDBSpc_Spellcheck Spellcheck;
  typedef QDDBSpc_Statistic Statistic;
  typedef QDDBSpc_QueryInfo QueryInfo;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
  int stat_size() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  const ::ru::mail::go::webbase::serp::QDDBSpc_Statistic& stat(int index) const;
  ::ru::mail::go::webbase::serp::QDDBSpc_Statistic* mutable_stat(int index);
  ::ru::mail::go::webbase::serp::QDDBSpc_Statistic* add_stat();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >*
      mutable_stat();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >&
      stat() const;

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
  bool has_query_info() const;
  void clear_query_info();
  static const int kQueryInfoFieldNumber = 4;
  const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo& query_info() const;
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* mutable_query_info();
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* release_query_info();
  void set_allocated_query_info(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* query_info);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.serp.QDDBSpc)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_query_info();
  void clear_has_query_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic > stat_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* query_info_;
  friend struct protobuf_qddb_5fspc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QDDBSpc_Spellcheck

// required .ru.mail.go.webbase.SputnikRanker.SessionSpc.Type type = 1;
inline bool QDDBSpc_Spellcheck::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QDDBSpc_Spellcheck::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QDDBSpc_Spellcheck::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QDDBSpc_Spellcheck::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type QDDBSpc_Spellcheck::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.type)
  return static_cast< ::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type >(type_);
}
inline void QDDBSpc_Spellcheck::set_type(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type value) {
  assert(::ru::mail::go::webbase::SputnikRanker::SessionSpc_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.type)
}

// optional string proposed_query = 2;
inline bool QDDBSpc_Spellcheck::has_proposed_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QDDBSpc_Spellcheck::set_has_proposed_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QDDBSpc_Spellcheck::clear_has_proposed_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QDDBSpc_Spellcheck::clear_proposed_query() {
  proposed_query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proposed_query();
}
inline const ::std::string& QDDBSpc_Spellcheck::proposed_query() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  return proposed_query_.GetNoArena();
}
inline void QDDBSpc_Spellcheck::set_proposed_query(const ::std::string& value) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
#if LANG_CXX11
inline void QDDBSpc_Spellcheck::set_proposed_query(::std::string&& value) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
#endif
inline void QDDBSpc_Spellcheck::set_proposed_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
inline void QDDBSpc_Spellcheck::set_proposed_query(const char* value, size_t size) {
  set_has_proposed_query();
  proposed_query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}
inline ::std::string* QDDBSpc_Spellcheck::mutable_proposed_query() {
  set_has_proposed_query();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  return proposed_query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QDDBSpc_Spellcheck::release_proposed_query() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
  clear_has_proposed_query();
  return proposed_query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QDDBSpc_Spellcheck::set_allocated_proposed_query(::std::string* proposed_query) {
  if (proposed_query != NULL) {
    set_has_proposed_query();
  } else {
    clear_has_proposed_query();
  }
  proposed_query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposed_query);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.proposed_query)
}

// optional float rank = 3;
inline bool QDDBSpc_Spellcheck::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QDDBSpc_Spellcheck::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QDDBSpc_Spellcheck::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QDDBSpc_Spellcheck::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float QDDBSpc_Spellcheck::rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.rank)
  return rank_;
}
inline void QDDBSpc_Spellcheck::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Spellcheck.rank)
}

// -------------------------------------------------------------------

// QDDBSpc_Statistic

// required uint32 geo = 1;
inline bool QDDBSpc_Statistic::has_geo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QDDBSpc_Statistic::set_has_geo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QDDBSpc_Statistic::clear_has_geo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QDDBSpc_Statistic::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 QDDBSpc_Statistic::geo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.geo)
  return geo_;
}
inline void QDDBSpc_Statistic::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Statistic.geo)
}

// optional uint32 sessions = 2;
inline bool QDDBSpc_Statistic::has_sessions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QDDBSpc_Statistic::set_has_sessions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QDDBSpc_Statistic::clear_has_sessions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QDDBSpc_Statistic::clear_sessions() {
  sessions_ = 0u;
  clear_has_sessions();
}
inline ::google::protobuf::uint32 QDDBSpc_Statistic::sessions() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.sessions)
  return sessions_;
}
inline void QDDBSpc_Statistic::set_sessions(::google::protobuf::uint32 value) {
  set_has_sessions();
  sessions_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.Statistic.sessions)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_y = 3;
inline bool QDDBSpc_Statistic::has_spc_y() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QDDBSpc_Statistic::set_has_spc_y() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QDDBSpc_Statistic::clear_has_spc_y() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QDDBSpc_Statistic::clear_spc_y() {
  if (spc_y_ != NULL) spc_y_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_y();
}
inline const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_y() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_y_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_y() {
  set_has_spc_y();
  if (spc_y_ == NULL) {
    spc_y_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  return spc_y_;
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_y() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
  clear_has_spc_y();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_y_;
  spc_y_ = NULL;
  return temp;
}
inline void QDDBSpc_Statistic::set_allocated_spc_y(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_y) {
  delete spc_y_;
  spc_y_ = spc_y;
  if (spc_y) {
    set_has_spc_y();
  } else {
    clear_has_spc_y();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_y)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_g = 4;
inline bool QDDBSpc_Statistic::has_spc_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QDDBSpc_Statistic::set_has_spc_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QDDBSpc_Statistic::clear_has_spc_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QDDBSpc_Statistic::clear_spc_g() {
  if (spc_g_ != NULL) spc_g_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_g();
}
inline const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_g() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_g_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_g() {
  set_has_spc_g();
  if (spc_g_ == NULL) {
    spc_g_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  return spc_g_;
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_g() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
  clear_has_spc_g();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_g_;
  spc_g_ = NULL;
  return temp;
}
inline void QDDBSpc_Statistic::set_allocated_spc_g(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_g) {
  delete spc_g_;
  spc_g_ = spc_g;
  if (spc_g) {
    set_has_spc_g();
  } else {
    clear_has_spc_g();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_g)
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.Spellcheck spc_m = 5;
inline bool QDDBSpc_Statistic::has_spc_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QDDBSpc_Statistic::set_has_spc_m() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QDDBSpc_Statistic::clear_has_spc_m() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QDDBSpc_Statistic::clear_spc_m() {
  if (spc_m_ != NULL) spc_m_->::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck::Clear();
  clear_has_spc_m();
}
inline const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck& QDDBSpc_Statistic::spc_m() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* p = spc_m_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_Spellcheck_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::mutable_spc_m() {
  set_has_spc_m();
  if (spc_m_ == NULL) {
    spc_m_ = new ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  return spc_m_;
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* QDDBSpc_Statistic::release_spc_m() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
  clear_has_spc_m();
  ::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* temp = spc_m_;
  spc_m_ = NULL;
  return temp;
}
inline void QDDBSpc_Statistic::set_allocated_spc_m(::ru::mail::go::webbase::serp::QDDBSpc_Spellcheck* spc_m) {
  delete spc_m_;
  spc_m_ = spc_m;
  if (spc_m) {
    set_has_spc_m();
  } else {
    clear_has_spc_m();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.Statistic.spc_m)
}

// -------------------------------------------------------------------

// QDDBSpc_QueryInfo

// required .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.Type type = 1;
inline bool QDDBSpc_QueryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QDDBSpc_QueryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QDDBSpc_QueryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QDDBSpc_QueryInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type QDDBSpc_QueryInfo::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.type)
  return static_cast< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type >(type_);
}
inline void QDDBSpc_QueryInfo::set_type(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type value) {
  assert(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.type)
}

// optional uint32 user_rank = 2;
inline bool QDDBSpc_QueryInfo::has_user_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QDDBSpc_QueryInfo::set_has_user_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QDDBSpc_QueryInfo::clear_has_user_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QDDBSpc_QueryInfo::clear_user_rank() {
  user_rank_ = 0u;
  clear_has_user_rank();
}
inline ::google::protobuf::uint32 QDDBSpc_QueryInfo::user_rank() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.user_rank)
  return user_rank_;
}
inline void QDDBSpc_QueryInfo::set_user_rank(::google::protobuf::uint32 value) {
  set_has_user_rank();
  user_rank_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.QueryInfo.user_rank)
}

// -------------------------------------------------------------------

// QDDBSpc

// optional string query_text = 1;
inline bool QDDBSpc::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QDDBSpc::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QDDBSpc::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QDDBSpc::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& QDDBSpc::query_text() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  return query_text_.GetNoArena();
}
inline void QDDBSpc::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
#if LANG_CXX11
inline void QDDBSpc::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
#endif
inline void QDDBSpc::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
inline void QDDBSpc::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}
inline ::std::string* QDDBSpc::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QDDBSpc::release_query_text() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QDDBSpc::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.query_text)
}

// repeated .ru.mail.go.webbase.serp.QDDBSpc.Statistic stat = 2;
inline int QDDBSpc::stat_size() const {
  return stat_.size();
}
inline void QDDBSpc::clear_stat() {
  stat_.Clear();
}
inline const ::ru::mail::go::webbase::serp::QDDBSpc_Statistic& QDDBSpc::stat(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Get(index);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Statistic* QDDBSpc::mutable_stat(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Mutable(index);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_Statistic* QDDBSpc::add_stat() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >*
QDDBSpc::mutable_stat() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return &stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::serp::QDDBSpc_Statistic >&
QDDBSpc::stat() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.serp.QDDBSpc.stat)
  return stat_;
}

// optional .ru.mail.go.webbase.serp.QDDBSpc.QueryInfo query_info = 4;
inline bool QDDBSpc::has_query_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QDDBSpc::set_has_query_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QDDBSpc::clear_has_query_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QDDBSpc::clear_query_info() {
  if (query_info_ != NULL) query_info_->::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo::Clear();
  clear_has_query_info();
}
inline const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo& QDDBSpc::query_info() const {
  const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* p = query_info_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo*>(
      &::ru::mail::go::webbase::serp::_QDDBSpc_QueryInfo_default_instance_);
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* QDDBSpc::mutable_query_info() {
  set_has_query_info();
  if (query_info_ == NULL) {
    query_info_ = new ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  return query_info_;
}
inline ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* QDDBSpc::release_query_info() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.serp.QDDBSpc.query_info)
  clear_has_query_info();
  ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* temp = query_info_;
  query_info_ = NULL;
  return temp;
}
inline void QDDBSpc::set_allocated_query_info(::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo* query_info) {
  delete query_info_;
  query_info_ = query_info;
  if (query_info) {
    set_has_query_info();
  } else {
    clear_has_query_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.serp.QDDBSpc.query_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace serp
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type>() {
  return ::ru::mail::go::webbase::serp::QDDBSpc_QueryInfo_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qddb_5fspc_2eproto__INCLUDED
