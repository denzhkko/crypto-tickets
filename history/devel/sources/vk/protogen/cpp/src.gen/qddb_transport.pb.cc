// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_transport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qddb_transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {
namespace pb {
class GeoRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoRecord>
     _instance;
} _GeoRecord_default_instance_;
class errorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<error>
     _instance;
} _error_default_instance_;
class QddbSiteInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QddbSiteInfo>
     _instance;
} _QddbSiteInfo_default_instance_;

namespace protobuf_qddb_5ftransport_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRecord, geo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoRecord, site_data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error, error_message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, qddb_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, hash_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, geo_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QddbSiteInfo, err_),
  1,
  2,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(GeoRecord)},
  { 9, 16, sizeof(error)},
  { 18, 27, sizeof(QddbSiteInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QddbSiteInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qddb_transport.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GeoRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoRecord_default_instance_);_error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_error_default_instance_);_QddbSiteInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QddbSiteInfo_default_instance_);_QddbSiteInfo_default_instance_._instance.get_mutable()->err_ = const_cast< ::common::pb::error*>(
      ::common::pb::error::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024qddb_transport.proto\022\tcommon.pb\".\n\tGeo"
      "Record\022\016\n\006geo_id\030\001 \002(\r\022\021\n\tsite_data\030\002 \002("
      "\014\"2\n\005error\022\022\n\nerror_code\030\001 \002(\021\022\025\n\rerror_"
      "message\030\002 \001(\t\"\201\001\n\014QddbSiteInfo\022\024\n\014qddb_v"
      "ersion\030\001 \002(\005\022\021\n\thash_type\030\002 \002(\005\022)\n\013geo_r"
      "ecords\030\003 \003(\0132\024.common.pb.GeoRecord\022\035\n\003er"
      "r\030\004 \001(\0132\020.common.pb.error"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qddb_transport.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qddb_5ftransport_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoRecord::kGeoIdFieldNumber;
const int GeoRecord::kSiteDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoRecord::GeoRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ftransport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.GeoRecord)
}
GeoRecord::GeoRecord(const GeoRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  site_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site_data()) {
    site_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_data_);
  }
  geo_id_ = from.geo_id_;
  // @@protoc_insertion_point(copy_constructor:common.pb.GeoRecord)
}

void GeoRecord::SharedCtor() {
  _cached_size_ = 0;
  site_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_id_ = 0u;
}

GeoRecord::~GeoRecord() {
  // @@protoc_insertion_point(destructor:common.pb.GeoRecord)
  SharedDtor();
}

void GeoRecord::SharedDtor() {
  site_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoRecord::descriptor() {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoRecord& GeoRecord::default_instance() {
  protobuf_qddb_5ftransport_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoRecord* GeoRecord::New(::google::protobuf::Arena* arena) const {
  GeoRecord* n = new GeoRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.GeoRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_site_data()) {
    GOOGLE_DCHECK(!site_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*site_data_.UnsafeRawStringPointer())->clear();
  }
  geo_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.GeoRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes site_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_site_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.GeoRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.GeoRecord)
  return false;
#undef DO_
}

void GeoRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.GeoRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo_id(), output);
  }

  // required bytes site_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->site_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.GeoRecord)
}

::google::protobuf::uint8* GeoRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.GeoRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo_id(), target);
  }

  // required bytes site_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->site_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.GeoRecord)
  return target;
}

size_t GeoRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:common.pb.GeoRecord)
  size_t total_size = 0;

  if (has_site_data()) {
    // required bytes site_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->site_data());
  }

  if (has_geo_id()) {
    // required uint32 geo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo_id());
  }

  return total_size;
}
size_t GeoRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.GeoRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes site_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->site_data());

    // required uint32 geo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.GeoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.GeoRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.GeoRecord)
    MergeFrom(*source);
  }
}

void GeoRecord::MergeFrom(const GeoRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.GeoRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_site_data();
      site_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      geo_id_ = from.geo_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeoRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.GeoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRecord::CopyFrom(const GeoRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.GeoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GeoRecord::Swap(GeoRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoRecord::InternalSwap(GeoRecord* other) {
  using std::swap;
  site_data_.Swap(&other->site_data_);
  swap(geo_id_, other->geo_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoRecord::GetMetadata() const {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoRecord

// required uint32 geo_id = 1;
bool GeoRecord::has_geo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoRecord::set_has_geo_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoRecord::clear_has_geo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoRecord::clear_geo_id() {
  geo_id_ = 0u;
  clear_has_geo_id();
}
::google::protobuf::uint32 GeoRecord::geo_id() const {
  // @@protoc_insertion_point(field_get:common.pb.GeoRecord.geo_id)
  return geo_id_;
}
void GeoRecord::set_geo_id(::google::protobuf::uint32 value) {
  set_has_geo_id();
  geo_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.GeoRecord.geo_id)
}

// required bytes site_data = 2;
bool GeoRecord::has_site_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoRecord::set_has_site_data() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoRecord::clear_has_site_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoRecord::clear_site_data() {
  site_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_data();
}
const ::std::string& GeoRecord::site_data() const {
  // @@protoc_insertion_point(field_get:common.pb.GeoRecord.site_data)
  return site_data_.GetNoArena();
}
void GeoRecord::set_site_data(const ::std::string& value) {
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.GeoRecord.site_data)
}
#if LANG_CXX11
void GeoRecord::set_site_data(::std::string&& value) {
  set_has_site_data();
  site_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.GeoRecord.site_data)
}
#endif
void GeoRecord::set_site_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.GeoRecord.site_data)
}
void GeoRecord::set_site_data(const void* value, size_t size) {
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.GeoRecord.site_data)
}
::std::string* GeoRecord::mutable_site_data() {
  set_has_site_data();
  // @@protoc_insertion_point(field_mutable:common.pb.GeoRecord.site_data)
  return site_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeoRecord::release_site_data() {
  // @@protoc_insertion_point(field_release:common.pb.GeoRecord.site_data)
  clear_has_site_data();
  return site_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeoRecord::set_allocated_site_data(::std::string* site_data) {
  if (site_data != NULL) {
    set_has_site_data();
  } else {
    clear_has_site_data();
  }
  site_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_data);
  // @@protoc_insertion_point(field_set_allocated:common.pb.GeoRecord.site_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error::kErrorCodeFieldNumber;
const int error::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error::error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ftransport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.error)
}
error::error(const error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:common.pb.error)
}

void error::SharedCtor() {
  _cached_size_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

error::~error() {
  // @@protoc_insertion_point(destructor:common.pb.error)
  SharedDtor();
}

void error::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error::descriptor() {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const error& error::default_instance() {
  protobuf_qddb_5ftransport_2eproto::InitDefaults();
  return *internal_default_instance();
}

error* error::New(::google::protobuf::Arena* arena) const {
  error* n = new error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_error_message()) {
    GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_message_.UnsafeRawStringPointer())->clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common.pb.error.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.error)
  return false;
#undef DO_
}

void error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.error.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.error)
}

::google::protobuf::uint8* error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.pb.error.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.error)
  return target;
}

size_t error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sint32 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->error_code());
  }
  // optional string error_message = 2;
  if (has_error_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.error)
  GOOGLE_DCHECK_NE(&from, this);
  const error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.error)
    MergeFrom(*source);
  }
}

void error::MergeFrom(const error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error::CopyFrom(const error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void error::Swap(error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error::InternalSwap(error* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error::GetMetadata() const {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error

// required sint32 error_code = 1;
bool error::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void error::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 error::error_code() const {
  // @@protoc_insertion_point(field_get:common.pb.error.error_code)
  return error_code_;
}
void error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:common.pb.error.error_code)
}

// optional string error_message = 2;
bool error::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void error::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
void error::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& error::error_message() const {
  // @@protoc_insertion_point(field_get:common.pb.error.error_message)
  return error_message_.GetNoArena();
}
void error::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.error.error_message)
}
#if LANG_CXX11
void error::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.error.error_message)
}
#endif
void error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.error.error_message)
}
void error::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.error.error_message)
}
::std::string* error::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:common.pb.error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error::release_error_message() {
  // @@protoc_insertion_point(field_release:common.pb.error.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:common.pb.error.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QddbSiteInfo::kQddbVersionFieldNumber;
const int QddbSiteInfo::kHashTypeFieldNumber;
const int QddbSiteInfo::kGeoRecordsFieldNumber;
const int QddbSiteInfo::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QddbSiteInfo::QddbSiteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qddb_5ftransport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.pb.QddbSiteInfo)
}
QddbSiteInfo::QddbSiteInfo(const QddbSiteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_records_(from.geo_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::common::pb::error(*from.err_);
  } else {
    err_ = NULL;
  }
  ::memcpy(&qddb_version_, &from.qddb_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_type_) -
    reinterpret_cast<char*>(&qddb_version_)) + sizeof(hash_type_));
  // @@protoc_insertion_point(copy_constructor:common.pb.QddbSiteInfo)
}

void QddbSiteInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_type_) -
      reinterpret_cast<char*>(&err_)) + sizeof(hash_type_));
}

QddbSiteInfo::~QddbSiteInfo() {
  // @@protoc_insertion_point(destructor:common.pb.QddbSiteInfo)
  SharedDtor();
}

void QddbSiteInfo::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
}

void QddbSiteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QddbSiteInfo::descriptor() {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QddbSiteInfo& QddbSiteInfo::default_instance() {
  protobuf_qddb_5ftransport_2eproto::InitDefaults();
  return *internal_default_instance();
}

QddbSiteInfo* QddbSiteInfo::New(::google::protobuf::Arena* arena) const {
  QddbSiteInfo* n = new QddbSiteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QddbSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.pb.QddbSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_records_.Clear();
  if (has_err()) {
    GOOGLE_DCHECK(err_ != NULL);
    err_->::common::pb::error::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&qddb_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hash_type_) -
        reinterpret_cast<char*>(&qddb_version_)) + sizeof(hash_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QddbSiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.pb.QddbSiteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 qddb_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_qddb_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qddb_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hash_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hash_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.pb.GeoRecord geo_records = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.pb.error err = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.pb.QddbSiteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.pb.QddbSiteInfo)
  return false;
#undef DO_
}

void QddbSiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.pb.QddbSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 qddb_version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->qddb_version(), output);
  }

  // required int32 hash_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hash_type(), output);
  }

  // repeated .common.pb.GeoRecord geo_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geo_records(static_cast<int>(i)), output);
  }

  // optional .common.pb.error err = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->err_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.pb.QddbSiteInfo)
}

::google::protobuf::uint8* QddbSiteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.pb.QddbSiteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 qddb_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->qddb_version(), target);
  }

  // required int32 hash_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hash_type(), target);
  }

  // repeated .common.pb.GeoRecord geo_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->geo_records(static_cast<int>(i)), deterministic, target);
  }

  // optional .common.pb.error err = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->err_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.pb.QddbSiteInfo)
  return target;
}

size_t QddbSiteInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:common.pb.QddbSiteInfo)
  size_t total_size = 0;

  if (has_qddb_version()) {
    // required int32 qddb_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qddb_version());
  }

  if (has_hash_type()) {
    // required int32 hash_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hash_type());
  }

  return total_size;
}
size_t QddbSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.pb.QddbSiteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 qddb_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qddb_version());

    // required int32 hash_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hash_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .common.pb.GeoRecord geo_records = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_records(static_cast<int>(i)));
    }
  }

  // optional .common.pb.error err = 4;
  if (has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QddbSiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.pb.QddbSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QddbSiteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QddbSiteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.pb.QddbSiteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.pb.QddbSiteInfo)
    MergeFrom(*source);
  }
}

void QddbSiteInfo::MergeFrom(const QddbSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.pb.QddbSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_records_.MergeFrom(from.geo_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_err()->::common::pb::error::MergeFrom(from.err());
    }
    if (cached_has_bits & 0x00000002u) {
      qddb_version_ = from.qddb_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      hash_type_ = from.hash_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QddbSiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.pb.QddbSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QddbSiteInfo::CopyFrom(const QddbSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.pb.QddbSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QddbSiteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_records())) return false;
  if (has_err()) {
    if (!this->err_->IsInitialized()) return false;
  }
  return true;
}

void QddbSiteInfo::Swap(QddbSiteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QddbSiteInfo::InternalSwap(QddbSiteInfo* other) {
  using std::swap;
  geo_records_.InternalSwap(&other->geo_records_);
  swap(err_, other->err_);
  swap(qddb_version_, other->qddb_version_);
  swap(hash_type_, other->hash_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QddbSiteInfo::GetMetadata() const {
  protobuf_qddb_5ftransport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qddb_5ftransport_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QddbSiteInfo

// required int32 qddb_version = 1;
bool QddbSiteInfo::has_qddb_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QddbSiteInfo::set_has_qddb_version() {
  _has_bits_[0] |= 0x00000002u;
}
void QddbSiteInfo::clear_has_qddb_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void QddbSiteInfo::clear_qddb_version() {
  qddb_version_ = 0;
  clear_has_qddb_version();
}
::google::protobuf::int32 QddbSiteInfo::qddb_version() const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.qddb_version)
  return qddb_version_;
}
void QddbSiteInfo::set_qddb_version(::google::protobuf::int32 value) {
  set_has_qddb_version();
  qddb_version_ = value;
  // @@protoc_insertion_point(field_set:common.pb.QddbSiteInfo.qddb_version)
}

// required int32 hash_type = 2;
bool QddbSiteInfo::has_hash_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QddbSiteInfo::set_has_hash_type() {
  _has_bits_[0] |= 0x00000004u;
}
void QddbSiteInfo::clear_has_hash_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void QddbSiteInfo::clear_hash_type() {
  hash_type_ = 0;
  clear_has_hash_type();
}
::google::protobuf::int32 QddbSiteInfo::hash_type() const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.hash_type)
  return hash_type_;
}
void QddbSiteInfo::set_hash_type(::google::protobuf::int32 value) {
  set_has_hash_type();
  hash_type_ = value;
  // @@protoc_insertion_point(field_set:common.pb.QddbSiteInfo.hash_type)
}

// repeated .common.pb.GeoRecord geo_records = 3;
int QddbSiteInfo::geo_records_size() const {
  return geo_records_.size();
}
void QddbSiteInfo::clear_geo_records() {
  geo_records_.Clear();
}
const ::common::pb::GeoRecord& QddbSiteInfo::geo_records(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Get(index);
}
::common::pb::GeoRecord* QddbSiteInfo::mutable_geo_records(int index) {
  // @@protoc_insertion_point(field_mutable:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Mutable(index);
}
::common::pb::GeoRecord* QddbSiteInfo::add_geo_records() {
  // @@protoc_insertion_point(field_add:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Add();
}
::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >*
QddbSiteInfo::mutable_geo_records() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.QddbSiteInfo.geo_records)
  return &geo_records_;
}
const ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >&
QddbSiteInfo::geo_records() const {
  // @@protoc_insertion_point(field_list:common.pb.QddbSiteInfo.geo_records)
  return geo_records_;
}

// optional .common.pb.error err = 4;
bool QddbSiteInfo::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QddbSiteInfo::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
void QddbSiteInfo::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
void QddbSiteInfo::clear_err() {
  if (err_ != NULL) err_->::common::pb::error::Clear();
  clear_has_err();
}
const ::common::pb::error& QddbSiteInfo::err() const {
  const ::common::pb::error* p = err_;
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.err)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::error*>(
      &::common::pb::_error_default_instance_);
}
::common::pb::error* QddbSiteInfo::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    err_ = new ::common::pb::error;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.QddbSiteInfo.err)
  return err_;
}
::common::pb::error* QddbSiteInfo::release_err() {
  // @@protoc_insertion_point(field_release:common.pb.QddbSiteInfo.err)
  clear_has_err();
  ::common::pb::error* temp = err_;
  err_ = NULL;
  return temp;
}
void QddbSiteInfo::set_allocated_err(::common::pb::error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.QddbSiteInfo.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace common

// @@protoc_insertion_point(global_scope)
