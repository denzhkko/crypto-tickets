// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qddb_transport.proto

#ifndef PROTOBUF_qddb_5ftransport_2eproto__INCLUDED
#define PROTOBUF_qddb_5ftransport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace common {
namespace pb {
class GeoRecord;
class GeoRecordDefaultTypeInternal;
extern GeoRecordDefaultTypeInternal _GeoRecord_default_instance_;
class QddbSiteInfo;
class QddbSiteInfoDefaultTypeInternal;
extern QddbSiteInfoDefaultTypeInternal _QddbSiteInfo_default_instance_;
class error;
class errorDefaultTypeInternal;
extern errorDefaultTypeInternal _error_default_instance_;
}  // namespace pb
}  // namespace common

namespace common {
namespace pb {

namespace protobuf_qddb_5ftransport_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qddb_5ftransport_2eproto

// ===================================================================

class GeoRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.GeoRecord) */ {
 public:
  GeoRecord();
  virtual ~GeoRecord();

  GeoRecord(const GeoRecord& from);

  inline GeoRecord& operator=(const GeoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoRecord(GeoRecord&& from) noexcept
    : GeoRecord() {
    *this = ::std::move(from);
  }

  inline GeoRecord& operator=(GeoRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoRecord& default_instance();

  static inline const GeoRecord* internal_default_instance() {
    return reinterpret_cast<const GeoRecord*>(
               &_GeoRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GeoRecord* other);
  friend void swap(GeoRecord& a, GeoRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoRecord& from);
  void MergeFrom(const GeoRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes site_data = 2;
  bool has_site_data() const;
  void clear_site_data();
  static const int kSiteDataFieldNumber = 2;
  const ::std::string& site_data() const;
  void set_site_data(const ::std::string& value);
  #if LANG_CXX11
  void set_site_data(::std::string&& value);
  #endif
  void set_site_data(const char* value);
  void set_site_data(const void* value, size_t size);
  ::std::string* mutable_site_data();
  ::std::string* release_site_data();
  void set_allocated_site_data(::std::string* site_data);

  // required uint32 geo_id = 1;
  bool has_geo_id() const;
  void clear_geo_id();
  static const int kGeoIdFieldNumber = 1;
  ::google::protobuf::uint32 geo_id() const;
  void set_geo_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.pb.GeoRecord)
 private:
  void set_has_geo_id();
  void clear_has_geo_id();
  void set_has_site_data();
  void clear_has_site_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr site_data_;
  ::google::protobuf::uint32 geo_id_;
  friend struct protobuf_qddb_5ftransport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.error) */ {
 public:
  error();
  virtual ~error();

  error(const error& from);

  inline error& operator=(const error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error(error&& from) noexcept
    : error() {
    *this = ::std::move(from);
  }

  inline error& operator=(error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const error& default_instance();

  static inline const error* internal_default_instance() {
    return reinterpret_cast<const error*>(
               &_error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(error* other);
  friend void swap(error& a, error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error* New() const PROTOBUF_FINAL { return New(NULL); }

  error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const error& from);
  void MergeFrom(const error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_message = 2;
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // required sint32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:common.pb.error)
 private:
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_message();
  void clear_has_error_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  friend struct protobuf_qddb_5ftransport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QddbSiteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.pb.QddbSiteInfo) */ {
 public:
  QddbSiteInfo();
  virtual ~QddbSiteInfo();

  QddbSiteInfo(const QddbSiteInfo& from);

  inline QddbSiteInfo& operator=(const QddbSiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QddbSiteInfo(QddbSiteInfo&& from) noexcept
    : QddbSiteInfo() {
    *this = ::std::move(from);
  }

  inline QddbSiteInfo& operator=(QddbSiteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QddbSiteInfo& default_instance();

  static inline const QddbSiteInfo* internal_default_instance() {
    return reinterpret_cast<const QddbSiteInfo*>(
               &_QddbSiteInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(QddbSiteInfo* other);
  friend void swap(QddbSiteInfo& a, QddbSiteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QddbSiteInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QddbSiteInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QddbSiteInfo& from);
  void MergeFrom(const QddbSiteInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QddbSiteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.pb.GeoRecord geo_records = 3;
  int geo_records_size() const;
  void clear_geo_records();
  static const int kGeoRecordsFieldNumber = 3;
  const ::common::pb::GeoRecord& geo_records(int index) const;
  ::common::pb::GeoRecord* mutable_geo_records(int index);
  ::common::pb::GeoRecord* add_geo_records();
  ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >*
      mutable_geo_records();
  const ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >&
      geo_records() const;

  // optional .common.pb.error err = 4;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 4;
  const ::common::pb::error& err() const;
  ::common::pb::error* mutable_err();
  ::common::pb::error* release_err();
  void set_allocated_err(::common::pb::error* err);

  // required int32 qddb_version = 1;
  bool has_qddb_version() const;
  void clear_qddb_version();
  static const int kQddbVersionFieldNumber = 1;
  ::google::protobuf::int32 qddb_version() const;
  void set_qddb_version(::google::protobuf::int32 value);

  // required int32 hash_type = 2;
  bool has_hash_type() const;
  void clear_hash_type();
  static const int kHashTypeFieldNumber = 2;
  ::google::protobuf::int32 hash_type() const;
  void set_hash_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:common.pb.QddbSiteInfo)
 private:
  void set_has_qddb_version();
  void clear_has_qddb_version();
  void set_has_hash_type();
  void clear_has_hash_type();
  void set_has_err();
  void clear_has_err();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord > geo_records_;
  ::common::pb::error* err_;
  ::google::protobuf::int32 qddb_version_;
  ::google::protobuf::int32 hash_type_;
  friend struct protobuf_qddb_5ftransport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoRecord

// required uint32 geo_id = 1;
inline bool GeoRecord::has_geo_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoRecord::set_has_geo_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoRecord::clear_has_geo_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoRecord::clear_geo_id() {
  geo_id_ = 0u;
  clear_has_geo_id();
}
inline ::google::protobuf::uint32 GeoRecord::geo_id() const {
  // @@protoc_insertion_point(field_get:common.pb.GeoRecord.geo_id)
  return geo_id_;
}
inline void GeoRecord::set_geo_id(::google::protobuf::uint32 value) {
  set_has_geo_id();
  geo_id_ = value;
  // @@protoc_insertion_point(field_set:common.pb.GeoRecord.geo_id)
}

// required bytes site_data = 2;
inline bool GeoRecord::has_site_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoRecord::set_has_site_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoRecord::clear_has_site_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoRecord::clear_site_data() {
  site_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site_data();
}
inline const ::std::string& GeoRecord::site_data() const {
  // @@protoc_insertion_point(field_get:common.pb.GeoRecord.site_data)
  return site_data_.GetNoArena();
}
inline void GeoRecord::set_site_data(const ::std::string& value) {
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.GeoRecord.site_data)
}
#if LANG_CXX11
inline void GeoRecord::set_site_data(::std::string&& value) {
  set_has_site_data();
  site_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.GeoRecord.site_data)
}
#endif
inline void GeoRecord::set_site_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.GeoRecord.site_data)
}
inline void GeoRecord::set_site_data(const void* value, size_t size) {
  set_has_site_data();
  site_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.GeoRecord.site_data)
}
inline ::std::string* GeoRecord::mutable_site_data() {
  set_has_site_data();
  // @@protoc_insertion_point(field_mutable:common.pb.GeoRecord.site_data)
  return site_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoRecord::release_site_data() {
  // @@protoc_insertion_point(field_release:common.pb.GeoRecord.site_data)
  clear_has_site_data();
  return site_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoRecord::set_allocated_site_data(::std::string* site_data) {
  if (site_data != NULL) {
    set_has_site_data();
  } else {
    clear_has_site_data();
  }
  site_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site_data);
  // @@protoc_insertion_point(field_set_allocated:common.pb.GeoRecord.site_data)
}

// -------------------------------------------------------------------

// error

// required sint32 error_code = 1;
inline bool error::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void error::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void error::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void error::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 error::error_code() const {
  // @@protoc_insertion_point(field_get:common.pb.error.error_code)
  return error_code_;
}
inline void error::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:common.pb.error.error_code)
}

// optional string error_message = 2;
inline bool error::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void error::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void error::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& error::error_message() const {
  // @@protoc_insertion_point(field_get:common.pb.error.error_message)
  return error_message_.GetNoArena();
}
inline void error::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.pb.error.error_message)
}
#if LANG_CXX11
inline void error::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.pb.error.error_message)
}
#endif
inline void error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.pb.error.error_message)
}
inline void error::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.pb.error.error_message)
}
inline ::std::string* error::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:common.pb.error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error::release_error_message() {
  // @@protoc_insertion_point(field_release:common.pb.error.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:common.pb.error.error_message)
}

// -------------------------------------------------------------------

// QddbSiteInfo

// required int32 qddb_version = 1;
inline bool QddbSiteInfo::has_qddb_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QddbSiteInfo::set_has_qddb_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QddbSiteInfo::clear_has_qddb_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QddbSiteInfo::clear_qddb_version() {
  qddb_version_ = 0;
  clear_has_qddb_version();
}
inline ::google::protobuf::int32 QddbSiteInfo::qddb_version() const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.qddb_version)
  return qddb_version_;
}
inline void QddbSiteInfo::set_qddb_version(::google::protobuf::int32 value) {
  set_has_qddb_version();
  qddb_version_ = value;
  // @@protoc_insertion_point(field_set:common.pb.QddbSiteInfo.qddb_version)
}

// required int32 hash_type = 2;
inline bool QddbSiteInfo::has_hash_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QddbSiteInfo::set_has_hash_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QddbSiteInfo::clear_has_hash_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QddbSiteInfo::clear_hash_type() {
  hash_type_ = 0;
  clear_has_hash_type();
}
inline ::google::protobuf::int32 QddbSiteInfo::hash_type() const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.hash_type)
  return hash_type_;
}
inline void QddbSiteInfo::set_hash_type(::google::protobuf::int32 value) {
  set_has_hash_type();
  hash_type_ = value;
  // @@protoc_insertion_point(field_set:common.pb.QddbSiteInfo.hash_type)
}

// repeated .common.pb.GeoRecord geo_records = 3;
inline int QddbSiteInfo::geo_records_size() const {
  return geo_records_.size();
}
inline void QddbSiteInfo::clear_geo_records() {
  geo_records_.Clear();
}
inline const ::common::pb::GeoRecord& QddbSiteInfo::geo_records(int index) const {
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Get(index);
}
inline ::common::pb::GeoRecord* QddbSiteInfo::mutable_geo_records(int index) {
  // @@protoc_insertion_point(field_mutable:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Mutable(index);
}
inline ::common::pb::GeoRecord* QddbSiteInfo::add_geo_records() {
  // @@protoc_insertion_point(field_add:common.pb.QddbSiteInfo.geo_records)
  return geo_records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >*
QddbSiteInfo::mutable_geo_records() {
  // @@protoc_insertion_point(field_mutable_list:common.pb.QddbSiteInfo.geo_records)
  return &geo_records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::common::pb::GeoRecord >&
QddbSiteInfo::geo_records() const {
  // @@protoc_insertion_point(field_list:common.pb.QddbSiteInfo.geo_records)
  return geo_records_;
}

// optional .common.pb.error err = 4;
inline bool QddbSiteInfo::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QddbSiteInfo::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QddbSiteInfo::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QddbSiteInfo::clear_err() {
  if (err_ != NULL) err_->::common::pb::error::Clear();
  clear_has_err();
}
inline const ::common::pb::error& QddbSiteInfo::err() const {
  const ::common::pb::error* p = err_;
  // @@protoc_insertion_point(field_get:common.pb.QddbSiteInfo.err)
  return p != NULL ? *p : *reinterpret_cast<const ::common::pb::error*>(
      &::common::pb::_error_default_instance_);
}
inline ::common::pb::error* QddbSiteInfo::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    err_ = new ::common::pb::error;
  }
  // @@protoc_insertion_point(field_mutable:common.pb.QddbSiteInfo.err)
  return err_;
}
inline ::common::pb::error* QddbSiteInfo::release_err() {
  // @@protoc_insertion_point(field_release:common.pb.QddbSiteInfo.err)
  clear_has_err();
  ::common::pb::error* temp = err_;
  err_ = NULL;
  return temp;
}
inline void QddbSiteInfo::set_allocated_err(::common::pb::error* err) {
  delete err_;
  err_ = err;
  if (err) {
    set_has_err();
  } else {
    clear_has_err();
  }
  // @@protoc_insertion_point(field_set_allocated:common.pb.QddbSiteInfo.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qddb_5ftransport_2eproto__INCLUDED
