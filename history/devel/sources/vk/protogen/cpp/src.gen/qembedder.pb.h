// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qembedder.proto

#ifndef PROTOBUF_qembedder_2eproto__INCLUDED
#define PROTOBUF_qembedder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace qembedder {
namespace pb {
class Embedding;
class EmbeddingDefaultTypeInternal;
extern EmbeddingDefaultTypeInternal _Embedding_default_instance_;
class Embedding_NamedEmbedding;
class Embedding_NamedEmbeddingDefaultTypeInternal;
extern Embedding_NamedEmbeddingDefaultTypeInternal _Embedding_NamedEmbedding_default_instance_;
}  // namespace pb
}  // namespace qembedder

namespace qembedder {
namespace pb {

namespace protobuf_qembedder_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qembedder_2eproto

// ===================================================================

class Embedding_NamedEmbedding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qembedder.pb.Embedding.NamedEmbedding) */ {
 public:
  Embedding_NamedEmbedding();
  virtual ~Embedding_NamedEmbedding();

  Embedding_NamedEmbedding(const Embedding_NamedEmbedding& from);

  inline Embedding_NamedEmbedding& operator=(const Embedding_NamedEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Embedding_NamedEmbedding(Embedding_NamedEmbedding&& from) noexcept
    : Embedding_NamedEmbedding() {
    *this = ::std::move(from);
  }

  inline Embedding_NamedEmbedding& operator=(Embedding_NamedEmbedding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Embedding_NamedEmbedding& default_instance();

  static inline const Embedding_NamedEmbedding* internal_default_instance() {
    return reinterpret_cast<const Embedding_NamedEmbedding*>(
               &_Embedding_NamedEmbedding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Embedding_NamedEmbedding* other);
  friend void swap(Embedding_NamedEmbedding& a, Embedding_NamedEmbedding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Embedding_NamedEmbedding* New() const PROTOBUF_FINAL { return New(NULL); }

  Embedding_NamedEmbedding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Embedding_NamedEmbedding& from);
  void MergeFrom(const Embedding_NamedEmbedding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Embedding_NamedEmbedding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float component = 2;
  int component_size() const;
  void clear_component();
  static const int kComponentFieldNumber = 2;
  float component(int index) const;
  void set_component(int index, float value);
  void add_component(float value);
  const ::google::protobuf::RepeatedField< float >&
      component() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_component();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:qembedder.pb.Embedding.NamedEmbedding)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > component_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_qembedder_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Embedding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qembedder.pb.Embedding) */ {
 public:
  Embedding();
  virtual ~Embedding();

  Embedding(const Embedding& from);

  inline Embedding& operator=(const Embedding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Embedding(Embedding&& from) noexcept
    : Embedding() {
    *this = ::std::move(from);
  }

  inline Embedding& operator=(Embedding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Embedding& default_instance();

  static inline const Embedding* internal_default_instance() {
    return reinterpret_cast<const Embedding*>(
               &_Embedding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Embedding* other);
  friend void swap(Embedding& a, Embedding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Embedding* New() const PROTOBUF_FINAL { return New(NULL); }

  Embedding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Embedding& from);
  void MergeFrom(const Embedding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Embedding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Embedding_NamedEmbedding NamedEmbedding;

  // accessors -------------------------------------------------------

  // repeated float feature = 2;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature();

  // repeated .qembedder.pb.Embedding.NamedEmbedding named_embedding = 3;
  int named_embedding_size() const;
  void clear_named_embedding();
  static const int kNamedEmbeddingFieldNumber = 3;
  const ::qembedder::pb::Embedding_NamedEmbedding& named_embedding(int index) const;
  ::qembedder::pb::Embedding_NamedEmbedding* mutable_named_embedding(int index);
  ::qembedder::pb::Embedding_NamedEmbedding* add_named_embedding();
  ::google::protobuf::RepeatedPtrField< ::qembedder::pb::Embedding_NamedEmbedding >*
      mutable_named_embedding();
  const ::google::protobuf::RepeatedPtrField< ::qembedder::pb::Embedding_NamedEmbedding >&
      named_embedding() const;

  // required int32 length = 1;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional uint32 successed = 4;
  bool has_successed() const;
  void clear_successed();
  static const int kSuccessedFieldNumber = 4;
  ::google::protobuf::uint32 successed() const;
  void set_successed(::google::protobuf::uint32 value);

  // optional uint32 cluster_size = 5;
  bool has_cluster_size() const;
  void clear_cluster_size();
  static const int kClusterSizeFieldNumber = 5;
  ::google::protobuf::uint32 cluster_size() const;
  void set_cluster_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qembedder.pb.Embedding)
 private:
  void set_has_length();
  void clear_has_length();
  void set_has_successed();
  void clear_has_successed();
  void set_has_cluster_size();
  void clear_has_cluster_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > feature_;
  ::google::protobuf::RepeatedPtrField< ::qembedder::pb::Embedding_NamedEmbedding > named_embedding_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::uint32 successed_;
  ::google::protobuf::uint32 cluster_size_;
  friend struct protobuf_qembedder_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Embedding_NamedEmbedding

// optional string name = 1;
inline bool Embedding_NamedEmbedding::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Embedding_NamedEmbedding::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Embedding_NamedEmbedding::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Embedding_NamedEmbedding::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Embedding_NamedEmbedding::name() const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.NamedEmbedding.name)
  return name_.GetNoArena();
}
inline void Embedding_NamedEmbedding::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.NamedEmbedding.name)
}
#if LANG_CXX11
inline void Embedding_NamedEmbedding::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qembedder.pb.Embedding.NamedEmbedding.name)
}
#endif
inline void Embedding_NamedEmbedding::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qembedder.pb.Embedding.NamedEmbedding.name)
}
inline void Embedding_NamedEmbedding::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qembedder.pb.Embedding.NamedEmbedding.name)
}
inline ::std::string* Embedding_NamedEmbedding::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:qembedder.pb.Embedding.NamedEmbedding.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Embedding_NamedEmbedding::release_name() {
  // @@protoc_insertion_point(field_release:qembedder.pb.Embedding.NamedEmbedding.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Embedding_NamedEmbedding::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:qembedder.pb.Embedding.NamedEmbedding.name)
}

// repeated float component = 2;
inline int Embedding_NamedEmbedding::component_size() const {
  return component_.size();
}
inline void Embedding_NamedEmbedding::clear_component() {
  component_.Clear();
}
inline float Embedding_NamedEmbedding::component(int index) const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.NamedEmbedding.component)
  return component_.Get(index);
}
inline void Embedding_NamedEmbedding::set_component(int index, float value) {
  component_.Set(index, value);
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.NamedEmbedding.component)
}
inline void Embedding_NamedEmbedding::add_component(float value) {
  component_.Add(value);
  // @@protoc_insertion_point(field_add:qembedder.pb.Embedding.NamedEmbedding.component)
}
inline const ::google::protobuf::RepeatedField< float >&
Embedding_NamedEmbedding::component() const {
  // @@protoc_insertion_point(field_list:qembedder.pb.Embedding.NamedEmbedding.component)
  return component_;
}
inline ::google::protobuf::RepeatedField< float >*
Embedding_NamedEmbedding::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:qembedder.pb.Embedding.NamedEmbedding.component)
  return &component_;
}

// -------------------------------------------------------------------

// Embedding

// required int32 length = 1;
inline bool Embedding::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Embedding::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Embedding::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Embedding::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 Embedding::length() const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.length)
  return length_;
}
inline void Embedding::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.length)
}

// repeated float feature = 2;
inline int Embedding::feature_size() const {
  return feature_.size();
}
inline void Embedding::clear_feature() {
  feature_.Clear();
}
inline float Embedding::feature(int index) const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.feature)
  return feature_.Get(index);
}
inline void Embedding::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.feature)
}
inline void Embedding::add_feature(float value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:qembedder.pb.Embedding.feature)
}
inline const ::google::protobuf::RepeatedField< float >&
Embedding::feature() const {
  // @@protoc_insertion_point(field_list:qembedder.pb.Embedding.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedField< float >*
Embedding::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:qembedder.pb.Embedding.feature)
  return &feature_;
}

// repeated .qembedder.pb.Embedding.NamedEmbedding named_embedding = 3;
inline int Embedding::named_embedding_size() const {
  return named_embedding_.size();
}
inline void Embedding::clear_named_embedding() {
  named_embedding_.Clear();
}
inline const ::qembedder::pb::Embedding_NamedEmbedding& Embedding::named_embedding(int index) const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.named_embedding)
  return named_embedding_.Get(index);
}
inline ::qembedder::pb::Embedding_NamedEmbedding* Embedding::mutable_named_embedding(int index) {
  // @@protoc_insertion_point(field_mutable:qembedder.pb.Embedding.named_embedding)
  return named_embedding_.Mutable(index);
}
inline ::qembedder::pb::Embedding_NamedEmbedding* Embedding::add_named_embedding() {
  // @@protoc_insertion_point(field_add:qembedder.pb.Embedding.named_embedding)
  return named_embedding_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::qembedder::pb::Embedding_NamedEmbedding >*
Embedding::mutable_named_embedding() {
  // @@protoc_insertion_point(field_mutable_list:qembedder.pb.Embedding.named_embedding)
  return &named_embedding_;
}
inline const ::google::protobuf::RepeatedPtrField< ::qembedder::pb::Embedding_NamedEmbedding >&
Embedding::named_embedding() const {
  // @@protoc_insertion_point(field_list:qembedder.pb.Embedding.named_embedding)
  return named_embedding_;
}

// optional uint32 successed = 4;
inline bool Embedding::has_successed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Embedding::set_has_successed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Embedding::clear_has_successed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Embedding::clear_successed() {
  successed_ = 0u;
  clear_has_successed();
}
inline ::google::protobuf::uint32 Embedding::successed() const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.successed)
  return successed_;
}
inline void Embedding::set_successed(::google::protobuf::uint32 value) {
  set_has_successed();
  successed_ = value;
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.successed)
}

// optional uint32 cluster_size = 5;
inline bool Embedding::has_cluster_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Embedding::set_has_cluster_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Embedding::clear_has_cluster_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Embedding::clear_cluster_size() {
  cluster_size_ = 0u;
  clear_has_cluster_size();
}
inline ::google::protobuf::uint32 Embedding::cluster_size() const {
  // @@protoc_insertion_point(field_get:qembedder.pb.Embedding.cluster_size)
  return cluster_size_;
}
inline void Embedding::set_cluster_size(::google::protobuf::uint32 value) {
  set_has_cluster_size();
  cluster_size_ = value;
  // @@protoc_insertion_point(field_set:qembedder.pb.Embedding.cluster_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace qembedder

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qembedder_2eproto__INCLUDED
