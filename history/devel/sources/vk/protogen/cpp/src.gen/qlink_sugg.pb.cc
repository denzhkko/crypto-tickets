// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qlink_sugg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qlink_sugg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qlink_sugg {
namespace pb {
class QlinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Qlink>
     _instance;
} _Qlink_default_instance_;
class QlinkSuggDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QlinkSugg>
     _instance;
} _QlinkSugg_default_instance_;

namespace protobuf_qlink_5fsugg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlink, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Qlink, rank_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QlinkSugg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QlinkSugg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QlinkSugg, query_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QlinkSugg, qlinks_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Qlink)},
  { 9, 16, sizeof(QlinkSugg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Qlink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QlinkSugg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qlink_sugg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Qlink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Qlink_default_instance_);_QlinkSugg_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QlinkSugg_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020qlink_sugg.proto\022\rqlink_sugg.pb\"#\n\005Qli"
      "nk\022\014\n\004text\030\001 \001(\t\022\014\n\004rank\030\002 \001(\001\"E\n\tQlinkS"
      "ugg\022\022\n\nquery_text\030\001 \001(\t\022$\n\006qlinks\030\002 \003(\0132"
      "\024.qlink_sugg.pb.Qlink"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qlink_sugg.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qlink_5fsugg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Qlink::kTextFieldNumber;
const int Qlink::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Qlink::Qlink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qlink_5fsugg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qlink_sugg.pb.Qlink)
}
Qlink::Qlink(const Qlink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:qlink_sugg.pb.Qlink)
}

void Qlink::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
}

Qlink::~Qlink() {
  // @@protoc_insertion_point(destructor:qlink_sugg.pb.Qlink)
  SharedDtor();
}

void Qlink::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Qlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Qlink::descriptor() {
  protobuf_qlink_5fsugg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qlink_5fsugg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Qlink& Qlink::default_instance() {
  protobuf_qlink_5fsugg_2eproto::InitDefaults();
  return *internal_default_instance();
}

Qlink* Qlink::New(::google::protobuf::Arena* arena) const {
  Qlink* n = new Qlink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Qlink::Clear() {
// @@protoc_insertion_point(message_clear_start:qlink_sugg.pb.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  rank_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Qlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qlink_sugg.pb.Qlink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qlink_sugg.pb.Qlink.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qlink_sugg.pb.Qlink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qlink_sugg.pb.Qlink)
  return false;
#undef DO_
}

void Qlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qlink_sugg.pb.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qlink_sugg.pb.Qlink.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional double rank = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qlink_sugg.pb.Qlink)
}

::google::protobuf::uint8* Qlink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:qlink_sugg.pb.Qlink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qlink_sugg.pb.Qlink.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional double rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qlink_sugg.pb.Qlink)
  return target;
}

size_t Qlink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qlink_sugg.pb.Qlink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional double rank = 2;
    if (has_rank()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Qlink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qlink_sugg.pb.Qlink)
  GOOGLE_DCHECK_NE(&from, this);
  const Qlink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Qlink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qlink_sugg.pb.Qlink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qlink_sugg.pb.Qlink)
    MergeFrom(*source);
  }
}

void Qlink::MergeFrom(const Qlink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qlink_sugg.pb.Qlink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Qlink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qlink_sugg.pb.Qlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Qlink::CopyFrom(const Qlink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qlink_sugg.pb.Qlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qlink::IsInitialized() const {
  return true;
}

void Qlink::Swap(Qlink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Qlink::InternalSwap(Qlink* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Qlink::GetMetadata() const {
  protobuf_qlink_5fsugg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qlink_5fsugg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Qlink

// optional string text = 1;
bool Qlink::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Qlink::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Qlink::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Qlink::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Qlink::text() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.Qlink.text)
  return text_.GetNoArena();
}
void Qlink::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.Qlink.text)
}
#if LANG_CXX11
void Qlink::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qlink_sugg.pb.Qlink.text)
}
#endif
void Qlink::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qlink_sugg.pb.Qlink.text)
}
void Qlink::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qlink_sugg.pb.Qlink.text)
}
::std::string* Qlink::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.Qlink.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Qlink::release_text() {
  // @@protoc_insertion_point(field_release:qlink_sugg.pb.Qlink.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Qlink::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:qlink_sugg.pb.Qlink.text)
}

// optional double rank = 2;
bool Qlink::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Qlink::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void Qlink::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void Qlink::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
double Qlink::rank() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.Qlink.rank)
  return rank_;
}
void Qlink::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.Qlink.rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QlinkSugg::kQueryTextFieldNumber;
const int QlinkSugg::kQlinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QlinkSugg::QlinkSugg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qlink_5fsugg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qlink_sugg.pb.QlinkSugg)
}
QlinkSugg::QlinkSugg(const QlinkSugg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qlinks_(from.qlinks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_text()) {
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
  // @@protoc_insertion_point(copy_constructor:qlink_sugg.pb.QlinkSugg)
}

void QlinkSugg::SharedCtor() {
  _cached_size_ = 0;
  query_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QlinkSugg::~QlinkSugg() {
  // @@protoc_insertion_point(destructor:qlink_sugg.pb.QlinkSugg)
  SharedDtor();
}

void QlinkSugg::SharedDtor() {
  query_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QlinkSugg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QlinkSugg::descriptor() {
  protobuf_qlink_5fsugg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qlink_5fsugg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QlinkSugg& QlinkSugg::default_instance() {
  protobuf_qlink_5fsugg_2eproto::InitDefaults();
  return *internal_default_instance();
}

QlinkSugg* QlinkSugg::New(::google::protobuf::Arena* arena) const {
  QlinkSugg* n = new QlinkSugg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QlinkSugg::Clear() {
// @@protoc_insertion_point(message_clear_start:qlink_sugg.pb.QlinkSugg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qlinks_.Clear();
  if (has_query_text()) {
    GOOGLE_DCHECK(!query_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*query_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QlinkSugg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qlink_sugg.pb.QlinkSugg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_text().data(), static_cast<int>(this->query_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qlink_sugg.pb.QlinkSugg.query_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qlink_sugg.pb.Qlink qlinks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qlinks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qlink_sugg.pb.QlinkSugg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qlink_sugg.pb.QlinkSugg)
  return false;
#undef DO_
}

void QlinkSugg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qlink_sugg.pb.QlinkSugg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qlink_sugg.pb.QlinkSugg.query_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_text(), output);
  }

  // repeated .qlink_sugg.pb.Qlink qlinks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qlinks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qlinks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qlink_sugg.pb.QlinkSugg)
}

::google::protobuf::uint8* QlinkSugg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:qlink_sugg.pb.QlinkSugg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_text().data(), static_cast<int>(this->query_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qlink_sugg.pb.QlinkSugg.query_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_text(), target);
  }

  // repeated .qlink_sugg.pb.Qlink qlinks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qlinks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->qlinks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qlink_sugg.pb.QlinkSugg)
  return target;
}

size_t QlinkSugg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qlink_sugg.pb.QlinkSugg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .qlink_sugg.pb.Qlink qlinks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qlinks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qlinks(static_cast<int>(i)));
    }
  }

  // optional string query_text = 1;
  if (has_query_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QlinkSugg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qlink_sugg.pb.QlinkSugg)
  GOOGLE_DCHECK_NE(&from, this);
  const QlinkSugg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QlinkSugg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qlink_sugg.pb.QlinkSugg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qlink_sugg.pb.QlinkSugg)
    MergeFrom(*source);
  }
}

void QlinkSugg::MergeFrom(const QlinkSugg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qlink_sugg.pb.QlinkSugg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qlinks_.MergeFrom(from.qlinks_);
  if (from.has_query_text()) {
    set_has_query_text();
    query_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_text_);
  }
}

void QlinkSugg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qlink_sugg.pb.QlinkSugg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QlinkSugg::CopyFrom(const QlinkSugg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qlink_sugg.pb.QlinkSugg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QlinkSugg::IsInitialized() const {
  return true;
}

void QlinkSugg::Swap(QlinkSugg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QlinkSugg::InternalSwap(QlinkSugg* other) {
  using std::swap;
  qlinks_.InternalSwap(&other->qlinks_);
  query_text_.Swap(&other->query_text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QlinkSugg::GetMetadata() const {
  protobuf_qlink_5fsugg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qlink_5fsugg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QlinkSugg

// optional string query_text = 1;
bool QlinkSugg::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QlinkSugg::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
void QlinkSugg::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void QlinkSugg::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
const ::std::string& QlinkSugg::query_text() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.QlinkSugg.query_text)
  return query_text_.GetNoArena();
}
void QlinkSugg::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.QlinkSugg.query_text)
}
#if LANG_CXX11
void QlinkSugg::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qlink_sugg.pb.QlinkSugg.query_text)
}
#endif
void QlinkSugg::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qlink_sugg.pb.QlinkSugg.query_text)
}
void QlinkSugg::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qlink_sugg.pb.QlinkSugg.query_text)
}
::std::string* QlinkSugg::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.QlinkSugg.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QlinkSugg::release_query_text() {
  // @@protoc_insertion_point(field_release:qlink_sugg.pb.QlinkSugg.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QlinkSugg::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:qlink_sugg.pb.QlinkSugg.query_text)
}

// repeated .qlink_sugg.pb.Qlink qlinks = 2;
int QlinkSugg::qlinks_size() const {
  return qlinks_.size();
}
void QlinkSugg::clear_qlinks() {
  qlinks_.Clear();
}
const ::qlink_sugg::pb::Qlink& QlinkSugg::qlinks(int index) const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Get(index);
}
::qlink_sugg::pb::Qlink* QlinkSugg::mutable_qlinks(int index) {
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Mutable(index);
}
::qlink_sugg::pb::Qlink* QlinkSugg::add_qlinks() {
  // @@protoc_insertion_point(field_add:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Add();
}
::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >*
QlinkSugg::mutable_qlinks() {
  // @@protoc_insertion_point(field_mutable_list:qlink_sugg.pb.QlinkSugg.qlinks)
  return &qlinks_;
}
const ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >&
QlinkSugg::qlinks() const {
  // @@protoc_insertion_point(field_list:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace qlink_sugg

// @@protoc_insertion_point(global_scope)
