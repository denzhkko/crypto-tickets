// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qlink_sugg.proto

#ifndef PROTOBUF_qlink_5fsugg_2eproto__INCLUDED
#define PROTOBUF_qlink_5fsugg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace qlink_sugg {
namespace pb {
class Qlink;
class QlinkDefaultTypeInternal;
extern QlinkDefaultTypeInternal _Qlink_default_instance_;
class QlinkSugg;
class QlinkSuggDefaultTypeInternal;
extern QlinkSuggDefaultTypeInternal _QlinkSugg_default_instance_;
}  // namespace pb
}  // namespace qlink_sugg

namespace qlink_sugg {
namespace pb {

namespace protobuf_qlink_5fsugg_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qlink_5fsugg_2eproto

// ===================================================================

class Qlink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qlink_sugg.pb.Qlink) */ {
 public:
  Qlink();
  virtual ~Qlink();

  Qlink(const Qlink& from);

  inline Qlink& operator=(const Qlink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Qlink(Qlink&& from) noexcept
    : Qlink() {
    *this = ::std::move(from);
  }

  inline Qlink& operator=(Qlink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Qlink& default_instance();

  static inline const Qlink* internal_default_instance() {
    return reinterpret_cast<const Qlink*>(
               &_Qlink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Qlink* other);
  friend void swap(Qlink& a, Qlink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Qlink* New() const PROTOBUF_FINAL { return New(NULL); }

  Qlink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Qlink& from);
  void MergeFrom(const Qlink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Qlink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional double rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  double rank() const;
  void set_rank(double value);

  // @@protoc_insertion_point(class_scope:qlink_sugg.pb.Qlink)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double rank_;
  friend struct protobuf_qlink_5fsugg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QlinkSugg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qlink_sugg.pb.QlinkSugg) */ {
 public:
  QlinkSugg();
  virtual ~QlinkSugg();

  QlinkSugg(const QlinkSugg& from);

  inline QlinkSugg& operator=(const QlinkSugg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QlinkSugg(QlinkSugg&& from) noexcept
    : QlinkSugg() {
    *this = ::std::move(from);
  }

  inline QlinkSugg& operator=(QlinkSugg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QlinkSugg& default_instance();

  static inline const QlinkSugg* internal_default_instance() {
    return reinterpret_cast<const QlinkSugg*>(
               &_QlinkSugg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QlinkSugg* other);
  friend void swap(QlinkSugg& a, QlinkSugg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QlinkSugg* New() const PROTOBUF_FINAL { return New(NULL); }

  QlinkSugg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QlinkSugg& from);
  void MergeFrom(const QlinkSugg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QlinkSugg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .qlink_sugg.pb.Qlink qlinks = 2;
  int qlinks_size() const;
  void clear_qlinks();
  static const int kQlinksFieldNumber = 2;
  const ::qlink_sugg::pb::Qlink& qlinks(int index) const;
  ::qlink_sugg::pb::Qlink* mutable_qlinks(int index);
  ::qlink_sugg::pb::Qlink* add_qlinks();
  ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >*
      mutable_qlinks();
  const ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >&
      qlinks() const;

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // @@protoc_insertion_point(class_scope:qlink_sugg.pb.QlinkSugg)
 private:
  void set_has_query_text();
  void clear_has_query_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink > qlinks_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  friend struct protobuf_qlink_5fsugg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Qlink

// optional string text = 1;
inline bool Qlink::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Qlink::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Qlink::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Qlink::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Qlink::text() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.Qlink.text)
  return text_.GetNoArena();
}
inline void Qlink::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.Qlink.text)
}
#if LANG_CXX11
inline void Qlink::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qlink_sugg.pb.Qlink.text)
}
#endif
inline void Qlink::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qlink_sugg.pb.Qlink.text)
}
inline void Qlink::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qlink_sugg.pb.Qlink.text)
}
inline ::std::string* Qlink::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.Qlink.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Qlink::release_text() {
  // @@protoc_insertion_point(field_release:qlink_sugg.pb.Qlink.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Qlink::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:qlink_sugg.pb.Qlink.text)
}

// optional double rank = 2;
inline bool Qlink::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Qlink::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Qlink::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Qlink::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline double Qlink::rank() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.Qlink.rank)
  return rank_;
}
inline void Qlink::set_rank(double value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.Qlink.rank)
}

// -------------------------------------------------------------------

// QlinkSugg

// optional string query_text = 1;
inline bool QlinkSugg::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QlinkSugg::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QlinkSugg::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QlinkSugg::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& QlinkSugg::query_text() const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.QlinkSugg.query_text)
  return query_text_.GetNoArena();
}
inline void QlinkSugg::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qlink_sugg.pb.QlinkSugg.query_text)
}
#if LANG_CXX11
inline void QlinkSugg::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qlink_sugg.pb.QlinkSugg.query_text)
}
#endif
inline void QlinkSugg::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qlink_sugg.pb.QlinkSugg.query_text)
}
inline void QlinkSugg::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qlink_sugg.pb.QlinkSugg.query_text)
}
inline ::std::string* QlinkSugg::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.QlinkSugg.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QlinkSugg::release_query_text() {
  // @@protoc_insertion_point(field_release:qlink_sugg.pb.QlinkSugg.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QlinkSugg::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:qlink_sugg.pb.QlinkSugg.query_text)
}

// repeated .qlink_sugg.pb.Qlink qlinks = 2;
inline int QlinkSugg::qlinks_size() const {
  return qlinks_.size();
}
inline void QlinkSugg::clear_qlinks() {
  qlinks_.Clear();
}
inline const ::qlink_sugg::pb::Qlink& QlinkSugg::qlinks(int index) const {
  // @@protoc_insertion_point(field_get:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Get(index);
}
inline ::qlink_sugg::pb::Qlink* QlinkSugg::mutable_qlinks(int index) {
  // @@protoc_insertion_point(field_mutable:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Mutable(index);
}
inline ::qlink_sugg::pb::Qlink* QlinkSugg::add_qlinks() {
  // @@protoc_insertion_point(field_add:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >*
QlinkSugg::mutable_qlinks() {
  // @@protoc_insertion_point(field_mutable_list:qlink_sugg.pb.QlinkSugg.qlinks)
  return &qlinks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::qlink_sugg::pb::Qlink >&
QlinkSugg::qlinks() const {
  // @@protoc_insertion_point(field_list:qlink_sugg.pb.QlinkSugg.qlinks)
  return qlinks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace qlink_sugg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qlink_5fsugg_2eproto__INCLUDED
