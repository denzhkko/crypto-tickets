// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qp_proxy_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qp_proxy_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class QPResult_LangValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QPResult_LangValue>
     _instance;
} _QPResult_LangValue_default_instance_;
class QPResult_LangResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QPResult_LangResult>
     _instance;
} _QPResult_LangResult_default_instance_;
class QPResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QPResult>
     _instance;
} _QPResult_default_instance_;
class HarvesterResult_OldStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HarvesterResult_OldStats>
     _instance;
} _HarvesterResult_OldStats_default_instance_;
class HarvesterResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HarvesterResult>
     _instance;
} _HarvesterResult_default_instance_;

namespace protobuf_qp_5fproxy_5fresult_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangValue, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangValue, probability_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult_LangResult, languages_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, georegion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, navigregion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, langresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, geonameregion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, isgeo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, isnavig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, isanswer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPResult, isgeoname_),
  1,
  2,
  0,
  7,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult_OldStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult_OldStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult_OldStats, wasexproted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult_OldStats, wasgeo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult_OldStats, wasnavig_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, qpproxydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, oldstatsdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, isyandexgeo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, isnavig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterResult, wasexported_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(QPResult_LangValue)},
  { 9, 15, sizeof(QPResult_LangResult)},
  { 16, 29, sizeof(QPResult)},
  { 37, 45, sizeof(HarvesterResult_OldStats)},
  { 48, 58, sizeof(HarvesterResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QPResult_LangValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QPResult_LangResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QPResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HarvesterResult_OldStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HarvesterResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qp_proxy_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QPResult_LangValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QPResult_LangValue_default_instance_);_QPResult_LangResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QPResult_LangResult_default_instance_);_QPResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QPResult_default_instance_);_HarvesterResult_OldStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HarvesterResult_OldStats_default_instance_);_HarvesterResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HarvesterResult_default_instance_);_QPResult_default_instance_._instance.get_mutable()->langresult_ = const_cast< ::ru::mail::go::webbase::blobs::QPResult_LangResult*>(
      ::ru::mail::go::webbase::blobs::QPResult_LangResult::internal_default_instance());
  _HarvesterResult_default_instance_._instance.get_mutable()->qpproxydata_ = const_cast< ::ru::mail::go::webbase::blobs::QPResult*>(
      ::ru::mail::go::webbase::blobs::QPResult::internal_default_instance());
  _HarvesterResult_default_instance_._instance.get_mutable()->oldstatsdata_ = const_cast< ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats*>(
      ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025qp_proxy_result.proto\022\030ru.mail.go.webb"
      "ase.blobs\"\255\003\n\010QPResult\022\021\n\tgeoRegion\030\001 \001("
      "\021\022\023\n\013navigRegion\030\002 \001(\021\022A\n\nlangResult\030\003 \001"
      "(\0132-.ru.mail.go.webbase.blobs.QPResult.L"
      "angResult\022\025\n\rgeoNameRegion\030\007 \001(\021\022\r\n\005isGe"
      "o\030\004 \001(\010\022\017\n\007isNavig\030\005 \001(\010\022\020\n\010isAnswer\030\006 \001"
      "(\010\022\021\n\tisGeoName\030\010 \001(\010\032[\n\tLangValue\0229\n\010la"
      "nguage\030\001 \002(\0162\'.ru.mail.go.webbase.blobs."
      "QPResult.Lang\022\023\n\013probability\030\002 \002(\002\032M\n\nLa"
      "ngResult\022\?\n\tlanguages\030\001 \003(\0132,.ru.mail.go"
      ".webbase.blobs.QPResult.LangValue\".\n\004Lan"
      "g\022\006\n\002RU\020\001\022\006\n\002EN\020\002\022\006\n\002KZ\020\003\022\006\n\002UA\020\004\022\006\n\002BY\020"
      "\005\"\222\002\n\017HarvesterResult\0227\n\013qpProxyData\030\001 \002"
      "(\0132\".ru.mail.go.webbase.blobs.QPResult\022H"
      "\n\014oldStatsData\030\002 \001(\01322.ru.mail.go.webbas"
      "e.blobs.HarvesterResult.OldStats\022\023\n\013isYa"
      "ndexGeo\030\003 \001(\010\022\017\n\007isNavig\030\004 \001(\010\022\023\n\013wasExp"
      "orted\030\005 \001(\010\032A\n\010OldStats\022\023\n\013wasExproted\030\001"
      " \002(\010\022\016\n\006wasGeo\030\002 \002(\010\022\020\n\010wasNavig\030\003 \002(\010B\017"
      "B\rQPProxyResult"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qp_proxy_result.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_qp_5fproxy_5fresult_2eproto

const ::google::protobuf::EnumDescriptor* QPResult_Lang_descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_enum_descriptors[0];
}
bool QPResult_Lang_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QPResult_Lang QPResult::RU;
const QPResult_Lang QPResult::EN;
const QPResult_Lang QPResult::KZ;
const QPResult_Lang QPResult::UA;
const QPResult_Lang QPResult::BY;
const QPResult_Lang QPResult::Lang_MIN;
const QPResult_Lang QPResult::Lang_MAX;
const int QPResult::Lang_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QPResult_LangValue::kLanguageFieldNumber;
const int QPResult_LangValue::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QPResult_LangValue::QPResult_LangValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QPResult.LangValue)
}
QPResult_LangValue::QPResult_LangValue(const QPResult_LangValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QPResult.LangValue)
}

void QPResult_LangValue::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
  language_ = 1;
}

QPResult_LangValue::~QPResult_LangValue() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QPResult.LangValue)
  SharedDtor();
}

void QPResult_LangValue::SharedDtor() {
}

void QPResult_LangValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QPResult_LangValue::descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QPResult_LangValue& QPResult_LangValue::default_instance() {
  protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

QPResult_LangValue* QPResult_LangValue::New(::google::protobuf::Arena* arena) const {
  QPResult_LangValue* n = new QPResult_LangValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QPResult_LangValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    probability_ = 0;
    language_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QPResult_LangValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::webbase::blobs::QPResult_Lang_IsValid(value)) {
            set_language(static_cast< ::ru::mail::go::webbase::blobs::QPResult_Lang >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QPResult.LangValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QPResult.LangValue)
  return false;
#undef DO_
}

void QPResult_LangValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->language(), output);
  }

  // required float probability = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QPResult.LangValue)
}

::google::protobuf::uint8* QPResult_LangValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->language(), target);
  }

  // required float probability = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QPResult.LangValue)
  return target;
}

size_t QPResult_LangValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  size_t total_size = 0;

  if (has_probability()) {
    // required float probability = 2;
    total_size += 1 + 4;
  }

  if (has_language()) {
    // required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  return total_size;
}
size_t QPResult_LangValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float probability = 2;
    total_size += 1 + 4;

    // required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QPResult_LangValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  GOOGLE_DCHECK_NE(&from, this);
  const QPResult_LangValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QPResult_LangValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QPResult.LangValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QPResult.LangValue)
    MergeFrom(*source);
  }
}

void QPResult_LangValue::MergeFrom(const QPResult_LangValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QPResult_LangValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPResult_LangValue::CopyFrom(const QPResult_LangValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QPResult.LangValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPResult_LangValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void QPResult_LangValue::Swap(QPResult_LangValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QPResult_LangValue::InternalSwap(QPResult_LangValue* other) {
  using std::swap;
  swap(probability_, other->probability_);
  swap(language_, other->language_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QPResult_LangValue::GetMetadata() const {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QPResult_LangValue

// required .ru.mail.go.webbase.blobs.QPResult.Lang language = 1;
bool QPResult_LangValue::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QPResult_LangValue::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void QPResult_LangValue::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void QPResult_LangValue::clear_language() {
  language_ = 1;
  clear_has_language();
}
::ru::mail::go::webbase::blobs::QPResult_Lang QPResult_LangValue::language() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.LangValue.language)
  return static_cast< ::ru::mail::go::webbase::blobs::QPResult_Lang >(language_);
}
void QPResult_LangValue::set_language(::ru::mail::go::webbase::blobs::QPResult_Lang value) {
  assert(::ru::mail::go::webbase::blobs::QPResult_Lang_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.LangValue.language)
}

// required float probability = 2;
bool QPResult_LangValue::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QPResult_LangValue::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void QPResult_LangValue::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void QPResult_LangValue::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
float QPResult_LangValue::probability() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.LangValue.probability)
  return probability_;
}
void QPResult_LangValue::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.LangValue.probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QPResult_LangResult::kLanguagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QPResult_LangResult::QPResult_LangResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QPResult.LangResult)
}
QPResult_LangResult::QPResult_LangResult(const QPResult_LangResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QPResult.LangResult)
}

void QPResult_LangResult::SharedCtor() {
  _cached_size_ = 0;
}

QPResult_LangResult::~QPResult_LangResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QPResult.LangResult)
  SharedDtor();
}

void QPResult_LangResult::SharedDtor() {
}

void QPResult_LangResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QPResult_LangResult::descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QPResult_LangResult& QPResult_LangResult::default_instance() {
  protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

QPResult_LangResult* QPResult_LangResult::New(::google::protobuf::Arena* arena) const {
  QPResult_LangResult* n = new QPResult_LangResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QPResult_LangResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QPResult_LangResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ru.mail.go.webbase.blobs.QPResult.LangValue languages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QPResult.LangResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QPResult.LangResult)
  return false;
#undef DO_
}

void QPResult_LangResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.QPResult.LangValue languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->languages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->languages(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QPResult.LangResult)
}

::google::protobuf::uint8* QPResult_LangResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ru.mail.go.webbase.blobs.QPResult.LangValue languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->languages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->languages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QPResult.LangResult)
  return target;
}

size_t QPResult_LangResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ru.mail.go.webbase.blobs.QPResult.LangValue languages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->languages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->languages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QPResult_LangResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QPResult_LangResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QPResult_LangResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QPResult.LangResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QPResult.LangResult)
    MergeFrom(*source);
  }
}

void QPResult_LangResult::MergeFrom(const QPResult_LangResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
}

void QPResult_LangResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPResult_LangResult::CopyFrom(const QPResult_LangResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QPResult.LangResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPResult_LangResult::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->languages())) return false;
  return true;
}

void QPResult_LangResult::Swap(QPResult_LangResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QPResult_LangResult::InternalSwap(QPResult_LangResult* other) {
  using std::swap;
  languages_.InternalSwap(&other->languages_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QPResult_LangResult::GetMetadata() const {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QPResult_LangResult

// repeated .ru.mail.go.webbase.blobs.QPResult.LangValue languages = 1;
int QPResult_LangResult::languages_size() const {
  return languages_.size();
}
void QPResult_LangResult::clear_languages() {
  languages_.Clear();
}
const ::ru::mail::go::webbase::blobs::QPResult_LangValue& QPResult_LangResult::languages(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.LangResult.languages)
  return languages_.Get(index);
}
::ru::mail::go::webbase::blobs::QPResult_LangValue* QPResult_LangResult::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QPResult.LangResult.languages)
  return languages_.Mutable(index);
}
::ru::mail::go::webbase::blobs::QPResult_LangValue* QPResult_LangResult::add_languages() {
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.QPResult.LangResult.languages)
  return languages_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QPResult_LangValue >*
QPResult_LangResult::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.QPResult.LangResult.languages)
  return &languages_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::webbase::blobs::QPResult_LangValue >&
QPResult_LangResult::languages() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.QPResult.LangResult.languages)
  return languages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QPResult::kGeoRegionFieldNumber;
const int QPResult::kNavigRegionFieldNumber;
const int QPResult::kLangResultFieldNumber;
const int QPResult::kGeoNameRegionFieldNumber;
const int QPResult::kIsGeoFieldNumber;
const int QPResult::kIsNavigFieldNumber;
const int QPResult::kIsAnswerFieldNumber;
const int QPResult::kIsGeoNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QPResult::QPResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.QPResult)
}
QPResult::QPResult(const QPResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_langresult()) {
    langresult_ = new ::ru::mail::go::webbase::blobs::QPResult_LangResult(*from.langresult_);
  } else {
    langresult_ = NULL;
  }
  ::memcpy(&georegion_, &from.georegion_,
    static_cast<size_t>(reinterpret_cast<char*>(&geonameregion_) -
    reinterpret_cast<char*>(&georegion_)) + sizeof(geonameregion_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.QPResult)
}

void QPResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&langresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geonameregion_) -
      reinterpret_cast<char*>(&langresult_)) + sizeof(geonameregion_));
}

QPResult::~QPResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.QPResult)
  SharedDtor();
}

void QPResult::SharedDtor() {
  if (this != internal_default_instance()) delete langresult_;
}

void QPResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QPResult::descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QPResult& QPResult::default_instance() {
  protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

QPResult* QPResult::New(::google::protobuf::Arena* arena) const {
  QPResult* n = new QPResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QPResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.QPResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_langresult()) {
    GOOGLE_DCHECK(langresult_ != NULL);
    langresult_->::ru::mail::go::webbase::blobs::QPResult_LangResult::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&georegion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&geonameregion_) -
        reinterpret_cast<char*>(&georegion_)) + sizeof(geonameregion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QPResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.QPResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 geoRegion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_georegion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &georegion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 navigRegion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_navigregion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &navigregion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.QPResult.LangResult langResult = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_langresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isGeo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isgeo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgeo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isNavig = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_isnavig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnavig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isAnswer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isanswer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isanswer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 geoNameRegion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_geonameregion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &geonameregion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isGeoName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_isgeoname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgeoname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.QPResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.QPResult)
  return false;
#undef DO_
}

void QPResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.QPResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 geoRegion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->georegion(), output);
  }

  // optional sint32 navigRegion = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->navigregion(), output);
  }

  // optional .ru.mail.go.webbase.blobs.QPResult.LangResult langResult = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->langresult_, output);
  }

  // optional bool isGeo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isgeo(), output);
  }

  // optional bool isNavig = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isnavig(), output);
  }

  // optional bool isAnswer = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isanswer(), output);
  }

  // optional sint32 geoNameRegion = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->geonameregion(), output);
  }

  // optional bool isGeoName = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isgeoname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.QPResult)
}

::google::protobuf::uint8* QPResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.QPResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 geoRegion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->georegion(), target);
  }

  // optional sint32 navigRegion = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->navigregion(), target);
  }

  // optional .ru.mail.go.webbase.blobs.QPResult.LangResult langResult = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->langresult_, deterministic, target);
  }

  // optional bool isGeo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isgeo(), target);
  }

  // optional bool isNavig = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isnavig(), target);
  }

  // optional bool isAnswer = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isanswer(), target);
  }

  // optional sint32 geoNameRegion = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->geonameregion(), target);
  }

  // optional bool isGeoName = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isgeoname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.QPResult)
  return target;
}

size_t QPResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.QPResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ru.mail.go.webbase.blobs.QPResult.LangResult langResult = 3;
    if (has_langresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->langresult_);
    }

    // optional sint32 geoRegion = 1;
    if (has_georegion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->georegion());
    }

    // optional sint32 navigRegion = 2;
    if (has_navigregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->navigregion());
    }

    // optional bool isGeo = 4;
    if (has_isgeo()) {
      total_size += 1 + 1;
    }

    // optional bool isNavig = 5;
    if (has_isnavig()) {
      total_size += 1 + 1;
    }

    // optional bool isAnswer = 6;
    if (has_isanswer()) {
      total_size += 1 + 1;
    }

    // optional bool isGeoName = 8;
    if (has_isgeoname()) {
      total_size += 1 + 1;
    }

    // optional sint32 geoNameRegion = 7;
    if (has_geonameregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->geonameregion());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QPResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.QPResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QPResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QPResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.QPResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.QPResult)
    MergeFrom(*source);
  }
}

void QPResult::MergeFrom(const QPResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.QPResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_langresult()->::ru::mail::go::webbase::blobs::QPResult_LangResult::MergeFrom(from.langresult());
    }
    if (cached_has_bits & 0x00000002u) {
      georegion_ = from.georegion_;
    }
    if (cached_has_bits & 0x00000004u) {
      navigregion_ = from.navigregion_;
    }
    if (cached_has_bits & 0x00000008u) {
      isgeo_ = from.isgeo_;
    }
    if (cached_has_bits & 0x00000010u) {
      isnavig_ = from.isnavig_;
    }
    if (cached_has_bits & 0x00000020u) {
      isanswer_ = from.isanswer_;
    }
    if (cached_has_bits & 0x00000040u) {
      isgeoname_ = from.isgeoname_;
    }
    if (cached_has_bits & 0x00000080u) {
      geonameregion_ = from.geonameregion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QPResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.QPResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPResult::CopyFrom(const QPResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.QPResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPResult::IsInitialized() const {
  if (has_langresult()) {
    if (!this->langresult_->IsInitialized()) return false;
  }
  return true;
}

void QPResult::Swap(QPResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QPResult::InternalSwap(QPResult* other) {
  using std::swap;
  swap(langresult_, other->langresult_);
  swap(georegion_, other->georegion_);
  swap(navigregion_, other->navigregion_);
  swap(isgeo_, other->isgeo_);
  swap(isnavig_, other->isnavig_);
  swap(isanswer_, other->isanswer_);
  swap(isgeoname_, other->isgeoname_);
  swap(geonameregion_, other->geonameregion_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QPResult::GetMetadata() const {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QPResult

// optional sint32 geoRegion = 1;
bool QPResult::has_georegion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QPResult::set_has_georegion() {
  _has_bits_[0] |= 0x00000002u;
}
void QPResult::clear_has_georegion() {
  _has_bits_[0] &= ~0x00000002u;
}
void QPResult::clear_georegion() {
  georegion_ = 0;
  clear_has_georegion();
}
::google::protobuf::int32 QPResult::georegion() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.geoRegion)
  return georegion_;
}
void QPResult::set_georegion(::google::protobuf::int32 value) {
  set_has_georegion();
  georegion_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.geoRegion)
}

// optional sint32 navigRegion = 2;
bool QPResult::has_navigregion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QPResult::set_has_navigregion() {
  _has_bits_[0] |= 0x00000004u;
}
void QPResult::clear_has_navigregion() {
  _has_bits_[0] &= ~0x00000004u;
}
void QPResult::clear_navigregion() {
  navigregion_ = 0;
  clear_has_navigregion();
}
::google::protobuf::int32 QPResult::navigregion() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.navigRegion)
  return navigregion_;
}
void QPResult::set_navigregion(::google::protobuf::int32 value) {
  set_has_navigregion();
  navigregion_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.navigRegion)
}

// optional .ru.mail.go.webbase.blobs.QPResult.LangResult langResult = 3;
bool QPResult::has_langresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QPResult::set_has_langresult() {
  _has_bits_[0] |= 0x00000001u;
}
void QPResult::clear_has_langresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void QPResult::clear_langresult() {
  if (langresult_ != NULL) langresult_->::ru::mail::go::webbase::blobs::QPResult_LangResult::Clear();
  clear_has_langresult();
}
const ::ru::mail::go::webbase::blobs::QPResult_LangResult& QPResult::langresult() const {
  const ::ru::mail::go::webbase::blobs::QPResult_LangResult* p = langresult_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.langResult)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::QPResult_LangResult*>(
      &::ru::mail::go::webbase::blobs::_QPResult_LangResult_default_instance_);
}
::ru::mail::go::webbase::blobs::QPResult_LangResult* QPResult::mutable_langresult() {
  set_has_langresult();
  if (langresult_ == NULL) {
    langresult_ = new ::ru::mail::go::webbase::blobs::QPResult_LangResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.QPResult.langResult)
  return langresult_;
}
::ru::mail::go::webbase::blobs::QPResult_LangResult* QPResult::release_langresult() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.QPResult.langResult)
  clear_has_langresult();
  ::ru::mail::go::webbase::blobs::QPResult_LangResult* temp = langresult_;
  langresult_ = NULL;
  return temp;
}
void QPResult::set_allocated_langresult(::ru::mail::go::webbase::blobs::QPResult_LangResult* langresult) {
  delete langresult_;
  langresult_ = langresult;
  if (langresult) {
    set_has_langresult();
  } else {
    clear_has_langresult();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.QPResult.langResult)
}

// optional sint32 geoNameRegion = 7;
bool QPResult::has_geonameregion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QPResult::set_has_geonameregion() {
  _has_bits_[0] |= 0x00000080u;
}
void QPResult::clear_has_geonameregion() {
  _has_bits_[0] &= ~0x00000080u;
}
void QPResult::clear_geonameregion() {
  geonameregion_ = 0;
  clear_has_geonameregion();
}
::google::protobuf::int32 QPResult::geonameregion() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.geoNameRegion)
  return geonameregion_;
}
void QPResult::set_geonameregion(::google::protobuf::int32 value) {
  set_has_geonameregion();
  geonameregion_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.geoNameRegion)
}

// optional bool isGeo = 4;
bool QPResult::has_isgeo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QPResult::set_has_isgeo() {
  _has_bits_[0] |= 0x00000008u;
}
void QPResult::clear_has_isgeo() {
  _has_bits_[0] &= ~0x00000008u;
}
void QPResult::clear_isgeo() {
  isgeo_ = false;
  clear_has_isgeo();
}
bool QPResult::isgeo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.isGeo)
  return isgeo_;
}
void QPResult::set_isgeo(bool value) {
  set_has_isgeo();
  isgeo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.isGeo)
}

// optional bool isNavig = 5;
bool QPResult::has_isnavig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QPResult::set_has_isnavig() {
  _has_bits_[0] |= 0x00000010u;
}
void QPResult::clear_has_isnavig() {
  _has_bits_[0] &= ~0x00000010u;
}
void QPResult::clear_isnavig() {
  isnavig_ = false;
  clear_has_isnavig();
}
bool QPResult::isnavig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.isNavig)
  return isnavig_;
}
void QPResult::set_isnavig(bool value) {
  set_has_isnavig();
  isnavig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.isNavig)
}

// optional bool isAnswer = 6;
bool QPResult::has_isanswer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QPResult::set_has_isanswer() {
  _has_bits_[0] |= 0x00000020u;
}
void QPResult::clear_has_isanswer() {
  _has_bits_[0] &= ~0x00000020u;
}
void QPResult::clear_isanswer() {
  isanswer_ = false;
  clear_has_isanswer();
}
bool QPResult::isanswer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.isAnswer)
  return isanswer_;
}
void QPResult::set_isanswer(bool value) {
  set_has_isanswer();
  isanswer_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.isAnswer)
}

// optional bool isGeoName = 8;
bool QPResult::has_isgeoname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QPResult::set_has_isgeoname() {
  _has_bits_[0] |= 0x00000040u;
}
void QPResult::clear_has_isgeoname() {
  _has_bits_[0] &= ~0x00000040u;
}
void QPResult::clear_isgeoname() {
  isgeoname_ = false;
  clear_has_isgeoname();
}
bool QPResult::isgeoname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.QPResult.isGeoName)
  return isgeoname_;
}
void QPResult::set_isgeoname(bool value) {
  set_has_isgeoname();
  isgeoname_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.QPResult.isGeoName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarvesterResult_OldStats::kWasExprotedFieldNumber;
const int HarvesterResult_OldStats::kWasGeoFieldNumber;
const int HarvesterResult_OldStats::kWasNavigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarvesterResult_OldStats::HarvesterResult_OldStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
}
HarvesterResult_OldStats::HarvesterResult_OldStats(const HarvesterResult_OldStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wasexproted_, &from.wasexproted_,
    static_cast<size_t>(reinterpret_cast<char*>(&wasnavig_) -
    reinterpret_cast<char*>(&wasexproted_)) + sizeof(wasnavig_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
}

void HarvesterResult_OldStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wasexproted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wasnavig_) -
      reinterpret_cast<char*>(&wasexproted_)) + sizeof(wasnavig_));
}

HarvesterResult_OldStats::~HarvesterResult_OldStats() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  SharedDtor();
}

void HarvesterResult_OldStats::SharedDtor() {
}

void HarvesterResult_OldStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarvesterResult_OldStats::descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarvesterResult_OldStats& HarvesterResult_OldStats::default_instance() {
  protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

HarvesterResult_OldStats* HarvesterResult_OldStats::New(::google::protobuf::Arena* arena) const {
  HarvesterResult_OldStats* n = new HarvesterResult_OldStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HarvesterResult_OldStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&wasexproted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wasnavig_) -
        reinterpret_cast<char*>(&wasexproted_)) + sizeof(wasnavig_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarvesterResult_OldStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool wasExproted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_wasexproted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasexproted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool wasGeo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_wasgeo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasgeo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool wasNavig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wasnavig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasnavig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  return false;
#undef DO_
}

void HarvesterResult_OldStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool wasExproted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wasexproted(), output);
  }

  // required bool wasGeo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->wasgeo(), output);
  }

  // required bool wasNavig = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wasnavig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
}

::google::protobuf::uint8* HarvesterResult_OldStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool wasExproted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wasexproted(), target);
  }

  // required bool wasGeo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->wasgeo(), target);
  }

  // required bool wasNavig = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wasnavig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  return target;
}

size_t HarvesterResult_OldStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  size_t total_size = 0;

  if (has_wasexproted()) {
    // required bool wasExproted = 1;
    total_size += 1 + 1;
  }

  if (has_wasgeo()) {
    // required bool wasGeo = 2;
    total_size += 1 + 1;
  }

  if (has_wasnavig()) {
    // required bool wasNavig = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t HarvesterResult_OldStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool wasExproted = 1;
    total_size += 1 + 1;

    // required bool wasGeo = 2;
    total_size += 1 + 1;

    // required bool wasNavig = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarvesterResult_OldStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  GOOGLE_DCHECK_NE(&from, this);
  const HarvesterResult_OldStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarvesterResult_OldStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
    MergeFrom(*source);
  }
}

void HarvesterResult_OldStats::MergeFrom(const HarvesterResult_OldStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      wasexproted_ = from.wasexproted_;
    }
    if (cached_has_bits & 0x00000002u) {
      wasgeo_ = from.wasgeo_;
    }
    if (cached_has_bits & 0x00000004u) {
      wasnavig_ = from.wasnavig_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarvesterResult_OldStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvesterResult_OldStats::CopyFrom(const HarvesterResult_OldStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.HarvesterResult.OldStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvesterResult_OldStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HarvesterResult_OldStats::Swap(HarvesterResult_OldStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HarvesterResult_OldStats::InternalSwap(HarvesterResult_OldStats* other) {
  using std::swap;
  swap(wasexproted_, other->wasexproted_);
  swap(wasgeo_, other->wasgeo_);
  swap(wasnavig_, other->wasnavig_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HarvesterResult_OldStats::GetMetadata() const {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HarvesterResult_OldStats

// required bool wasExproted = 1;
bool HarvesterResult_OldStats::has_wasexproted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HarvesterResult_OldStats::set_has_wasexproted() {
  _has_bits_[0] |= 0x00000001u;
}
void HarvesterResult_OldStats::clear_has_wasexproted() {
  _has_bits_[0] &= ~0x00000001u;
}
void HarvesterResult_OldStats::clear_wasexproted() {
  wasexproted_ = false;
  clear_has_wasexproted();
}
bool HarvesterResult_OldStats::wasexproted() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasExproted)
  return wasexproted_;
}
void HarvesterResult_OldStats::set_wasexproted(bool value) {
  set_has_wasexproted();
  wasexproted_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasExproted)
}

// required bool wasGeo = 2;
bool HarvesterResult_OldStats::has_wasgeo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HarvesterResult_OldStats::set_has_wasgeo() {
  _has_bits_[0] |= 0x00000002u;
}
void HarvesterResult_OldStats::clear_has_wasgeo() {
  _has_bits_[0] &= ~0x00000002u;
}
void HarvesterResult_OldStats::clear_wasgeo() {
  wasgeo_ = false;
  clear_has_wasgeo();
}
bool HarvesterResult_OldStats::wasgeo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasGeo)
  return wasgeo_;
}
void HarvesterResult_OldStats::set_wasgeo(bool value) {
  set_has_wasgeo();
  wasgeo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasGeo)
}

// required bool wasNavig = 3;
bool HarvesterResult_OldStats::has_wasnavig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HarvesterResult_OldStats::set_has_wasnavig() {
  _has_bits_[0] |= 0x00000004u;
}
void HarvesterResult_OldStats::clear_has_wasnavig() {
  _has_bits_[0] &= ~0x00000004u;
}
void HarvesterResult_OldStats::clear_wasnavig() {
  wasnavig_ = false;
  clear_has_wasnavig();
}
bool HarvesterResult_OldStats::wasnavig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasNavig)
  return wasnavig_;
}
void HarvesterResult_OldStats::set_wasnavig(bool value) {
  set_has_wasnavig();
  wasnavig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.OldStats.wasNavig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HarvesterResult::kQpProxyDataFieldNumber;
const int HarvesterResult::kOldStatsDataFieldNumber;
const int HarvesterResult::kIsYandexGeoFieldNumber;
const int HarvesterResult::kIsNavigFieldNumber;
const int HarvesterResult::kWasExportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HarvesterResult::HarvesterResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.webbase.blobs.HarvesterResult)
}
HarvesterResult::HarvesterResult(const HarvesterResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_qpproxydata()) {
    qpproxydata_ = new ::ru::mail::go::webbase::blobs::QPResult(*from.qpproxydata_);
  } else {
    qpproxydata_ = NULL;
  }
  if (from.has_oldstatsdata()) {
    oldstatsdata_ = new ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats(*from.oldstatsdata_);
  } else {
    oldstatsdata_ = NULL;
  }
  ::memcpy(&isyandexgeo_, &from.isyandexgeo_,
    static_cast<size_t>(reinterpret_cast<char*>(&wasexported_) -
    reinterpret_cast<char*>(&isyandexgeo_)) + sizeof(wasexported_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.webbase.blobs.HarvesterResult)
}

void HarvesterResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&qpproxydata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wasexported_) -
      reinterpret_cast<char*>(&qpproxydata_)) + sizeof(wasexported_));
}

HarvesterResult::~HarvesterResult() {
  // @@protoc_insertion_point(destructor:ru.mail.go.webbase.blobs.HarvesterResult)
  SharedDtor();
}

void HarvesterResult::SharedDtor() {
  if (this != internal_default_instance()) delete qpproxydata_;
  if (this != internal_default_instance()) delete oldstatsdata_;
}

void HarvesterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarvesterResult::descriptor() {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HarvesterResult& HarvesterResult::default_instance() {
  protobuf_qp_5fproxy_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

HarvesterResult* HarvesterResult::New(::google::protobuf::Arena* arena) const {
  HarvesterResult* n = new HarvesterResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HarvesterResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.webbase.blobs.HarvesterResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(qpproxydata_ != NULL);
      qpproxydata_->::ru::mail::go::webbase::blobs::QPResult::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oldstatsdata_ != NULL);
      oldstatsdata_->::ru::mail::go::webbase::blobs::HarvesterResult_OldStats::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&isyandexgeo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wasexported_) -
        reinterpret_cast<char*>(&isyandexgeo_)) + sizeof(wasexported_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HarvesterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.webbase.blobs.HarvesterResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.webbase.blobs.QPResult qpProxyData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qpproxydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.webbase.blobs.HarvesterResult.OldStats oldStatsData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldstatsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isYandexGeo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isyandexgeo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyandexgeo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isNavig = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isnavig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnavig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wasExported = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_wasexported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wasexported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.webbase.blobs.HarvesterResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.webbase.blobs.HarvesterResult)
  return false;
#undef DO_
}

void HarvesterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.webbase.blobs.HarvesterResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.QPResult qpProxyData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->qpproxydata_, output);
  }

  // optional .ru.mail.go.webbase.blobs.HarvesterResult.OldStats oldStatsData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oldstatsdata_, output);
  }

  // optional bool isYandexGeo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isyandexgeo(), output);
  }

  // optional bool isNavig = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isnavig(), output);
  }

  // optional bool wasExported = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->wasexported(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.webbase.blobs.HarvesterResult)
}

::google::protobuf::uint8* HarvesterResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.webbase.blobs.HarvesterResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.webbase.blobs.QPResult qpProxyData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->qpproxydata_, deterministic, target);
  }

  // optional .ru.mail.go.webbase.blobs.HarvesterResult.OldStats oldStatsData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oldstatsdata_, deterministic, target);
  }

  // optional bool isYandexGeo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isyandexgeo(), target);
  }

  // optional bool isNavig = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isnavig(), target);
  }

  // optional bool wasExported = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->wasexported(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.webbase.blobs.HarvesterResult)
  return target;
}

size_t HarvesterResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.webbase.blobs.HarvesterResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.webbase.blobs.QPResult qpProxyData = 1;
  if (has_qpproxydata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qpproxydata_);
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional .ru.mail.go.webbase.blobs.HarvesterResult.OldStats oldStatsData = 2;
    if (has_oldstatsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->oldstatsdata_);
    }

    // optional bool isYandexGeo = 3;
    if (has_isyandexgeo()) {
      total_size += 1 + 1;
    }

    // optional bool isNavig = 4;
    if (has_isnavig()) {
      total_size += 1 + 1;
    }

    // optional bool wasExported = 5;
    if (has_wasexported()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarvesterResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.webbase.blobs.HarvesterResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HarvesterResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HarvesterResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.webbase.blobs.HarvesterResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.webbase.blobs.HarvesterResult)
    MergeFrom(*source);
  }
}

void HarvesterResult::MergeFrom(const HarvesterResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.webbase.blobs.HarvesterResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_qpproxydata()->::ru::mail::go::webbase::blobs::QPResult::MergeFrom(from.qpproxydata());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_oldstatsdata()->::ru::mail::go::webbase::blobs::HarvesterResult_OldStats::MergeFrom(from.oldstatsdata());
    }
    if (cached_has_bits & 0x00000004u) {
      isyandexgeo_ = from.isyandexgeo_;
    }
    if (cached_has_bits & 0x00000008u) {
      isnavig_ = from.isnavig_;
    }
    if (cached_has_bits & 0x00000010u) {
      wasexported_ = from.wasexported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarvesterResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.webbase.blobs.HarvesterResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvesterResult::CopyFrom(const HarvesterResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.webbase.blobs.HarvesterResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvesterResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_qpproxydata()) {
    if (!this->qpproxydata_->IsInitialized()) return false;
  }
  if (has_oldstatsdata()) {
    if (!this->oldstatsdata_->IsInitialized()) return false;
  }
  return true;
}

void HarvesterResult::Swap(HarvesterResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HarvesterResult::InternalSwap(HarvesterResult* other) {
  using std::swap;
  swap(qpproxydata_, other->qpproxydata_);
  swap(oldstatsdata_, other->oldstatsdata_);
  swap(isyandexgeo_, other->isyandexgeo_);
  swap(isnavig_, other->isnavig_);
  swap(wasexported_, other->wasexported_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HarvesterResult::GetMetadata() const {
  protobuf_qp_5fproxy_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_qp_5fproxy_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HarvesterResult

// required .ru.mail.go.webbase.blobs.QPResult qpProxyData = 1;
bool HarvesterResult::has_qpproxydata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HarvesterResult::set_has_qpproxydata() {
  _has_bits_[0] |= 0x00000001u;
}
void HarvesterResult::clear_has_qpproxydata() {
  _has_bits_[0] &= ~0x00000001u;
}
void HarvesterResult::clear_qpproxydata() {
  if (qpproxydata_ != NULL) qpproxydata_->::ru::mail::go::webbase::blobs::QPResult::Clear();
  clear_has_qpproxydata();
}
const ::ru::mail::go::webbase::blobs::QPResult& HarvesterResult::qpproxydata() const {
  const ::ru::mail::go::webbase::blobs::QPResult* p = qpproxydata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.qpProxyData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::QPResult*>(
      &::ru::mail::go::webbase::blobs::_QPResult_default_instance_);
}
::ru::mail::go::webbase::blobs::QPResult* HarvesterResult::mutable_qpproxydata() {
  set_has_qpproxydata();
  if (qpproxydata_ == NULL) {
    qpproxydata_ = new ::ru::mail::go::webbase::blobs::QPResult;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HarvesterResult.qpProxyData)
  return qpproxydata_;
}
::ru::mail::go::webbase::blobs::QPResult* HarvesterResult::release_qpproxydata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.HarvesterResult.qpProxyData)
  clear_has_qpproxydata();
  ::ru::mail::go::webbase::blobs::QPResult* temp = qpproxydata_;
  qpproxydata_ = NULL;
  return temp;
}
void HarvesterResult::set_allocated_qpproxydata(::ru::mail::go::webbase::blobs::QPResult* qpproxydata) {
  delete qpproxydata_;
  qpproxydata_ = qpproxydata;
  if (qpproxydata) {
    set_has_qpproxydata();
  } else {
    clear_has_qpproxydata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.HarvesterResult.qpProxyData)
}

// optional .ru.mail.go.webbase.blobs.HarvesterResult.OldStats oldStatsData = 2;
bool HarvesterResult::has_oldstatsdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HarvesterResult::set_has_oldstatsdata() {
  _has_bits_[0] |= 0x00000002u;
}
void HarvesterResult::clear_has_oldstatsdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void HarvesterResult::clear_oldstatsdata() {
  if (oldstatsdata_ != NULL) oldstatsdata_->::ru::mail::go::webbase::blobs::HarvesterResult_OldStats::Clear();
  clear_has_oldstatsdata();
}
const ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats& HarvesterResult::oldstatsdata() const {
  const ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats* p = oldstatsdata_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.oldStatsData)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats*>(
      &::ru::mail::go::webbase::blobs::_HarvesterResult_OldStats_default_instance_);
}
::ru::mail::go::webbase::blobs::HarvesterResult_OldStats* HarvesterResult::mutable_oldstatsdata() {
  set_has_oldstatsdata();
  if (oldstatsdata_ == NULL) {
    oldstatsdata_ = new ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.HarvesterResult.oldStatsData)
  return oldstatsdata_;
}
::ru::mail::go::webbase::blobs::HarvesterResult_OldStats* HarvesterResult::release_oldstatsdata() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.HarvesterResult.oldStatsData)
  clear_has_oldstatsdata();
  ::ru::mail::go::webbase::blobs::HarvesterResult_OldStats* temp = oldstatsdata_;
  oldstatsdata_ = NULL;
  return temp;
}
void HarvesterResult::set_allocated_oldstatsdata(::ru::mail::go::webbase::blobs::HarvesterResult_OldStats* oldstatsdata) {
  delete oldstatsdata_;
  oldstatsdata_ = oldstatsdata;
  if (oldstatsdata) {
    set_has_oldstatsdata();
  } else {
    clear_has_oldstatsdata();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.HarvesterResult.oldStatsData)
}

// optional bool isYandexGeo = 3;
bool HarvesterResult::has_isyandexgeo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HarvesterResult::set_has_isyandexgeo() {
  _has_bits_[0] |= 0x00000004u;
}
void HarvesterResult::clear_has_isyandexgeo() {
  _has_bits_[0] &= ~0x00000004u;
}
void HarvesterResult::clear_isyandexgeo() {
  isyandexgeo_ = false;
  clear_has_isyandexgeo();
}
bool HarvesterResult::isyandexgeo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.isYandexGeo)
  return isyandexgeo_;
}
void HarvesterResult::set_isyandexgeo(bool value) {
  set_has_isyandexgeo();
  isyandexgeo_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.isYandexGeo)
}

// optional bool isNavig = 4;
bool HarvesterResult::has_isnavig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HarvesterResult::set_has_isnavig() {
  _has_bits_[0] |= 0x00000008u;
}
void HarvesterResult::clear_has_isnavig() {
  _has_bits_[0] &= ~0x00000008u;
}
void HarvesterResult::clear_isnavig() {
  isnavig_ = false;
  clear_has_isnavig();
}
bool HarvesterResult::isnavig() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.isNavig)
  return isnavig_;
}
void HarvesterResult::set_isnavig(bool value) {
  set_has_isnavig();
  isnavig_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.isNavig)
}

// optional bool wasExported = 5;
bool HarvesterResult::has_wasexported() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HarvesterResult::set_has_wasexported() {
  _has_bits_[0] |= 0x00000010u;
}
void HarvesterResult::clear_has_wasexported() {
  _has_bits_[0] &= ~0x00000010u;
}
void HarvesterResult::clear_wasexported() {
  wasexported_ = false;
  clear_has_wasexported();
}
bool HarvesterResult::wasexported() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.HarvesterResult.wasExported)
  return wasexported_;
}
void HarvesterResult::set_wasexported(bool value) {
  set_has_wasexported();
  wasexported_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.HarvesterResult.wasExported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
