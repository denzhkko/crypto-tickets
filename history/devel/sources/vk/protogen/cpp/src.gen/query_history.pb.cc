// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "query_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace qhist {
class QueryClassifiersDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryClassifiersData>
     _instance;
} _QueryClassifiersData_default_instance_;
class MixinInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MixinInfo>
     _instance;
} _MixinInfo_default_instance_;
class InfocardFactInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InfocardFactInfo>
     _instance;
} _InfocardFactInfo_default_instance_;
class InfocardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InfocardInfo>
     _instance;
} _InfocardInfo_default_instance_;
class QueryObjectInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryObjectInfo>
     _instance;
} _QueryObjectInfo_default_instance_;
class MixinsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MixinsData>
     _instance;
} _MixinsData_default_instance_;
class WeatherDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeatherData>
     _instance;
} _WeatherData_default_instance_;
class TimeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeData>
     _instance;
} _TimeData_default_instance_;
class SunriseDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SunriseData>
     _instance;
} _SunriseData_default_instance_;
class UserHistoryQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserHistoryQuery>
     _instance;
} _UserHistoryQuery_default_instance_;
class UserHistoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserHistory>
     _instance;
} _UserHistory_default_instance_;

namespace protobuf_query_5fhistory_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, infocard_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, health_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, torg_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, film_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, porn_doc_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, recipe_doc_prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryClassifiersData, music_doc_prob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinInfo, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinInfo, position_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardFactInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardFactInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardFactInfo, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardInfo, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfocardInfo, fact_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjectInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjectInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryObjectInfo, text_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinsData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinsData, weather_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinsData, time_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixinsData, sunrise_data_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherData, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherData, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherData, date_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeData, city_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SunriseData, date_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, bin_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, classifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, mixins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, infocards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, query_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistoryQuery, mixins_data_),
  0,
  4,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, queries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, enabled_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(QueryClassifiersData)},
  { 19, 27, sizeof(MixinInfo)},
  { 30, 36, sizeof(InfocardFactInfo)},
  { 37, 44, sizeof(InfocardInfo)},
  { 46, 53, sizeof(QueryObjectInfo)},
  { 55, 63, sizeof(MixinsData)},
  { 66, 74, sizeof(WeatherData)},
  { 77, 83, sizeof(TimeData)},
  { 84, 93, sizeof(SunriseData)},
  { 97, 110, sizeof(UserHistoryQuery)},
  { 118, 126, sizeof(UserHistory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryClassifiersData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MixinInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfocardFactInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfocardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryObjectInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MixinsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeatherData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SunriseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserHistoryQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserHistory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "query_history.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QueryClassifiersData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryClassifiersData_default_instance_);_MixinInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MixinInfo_default_instance_);_InfocardFactInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InfocardFactInfo_default_instance_);_InfocardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InfocardInfo_default_instance_);_QueryObjectInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryObjectInfo_default_instance_);_MixinsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MixinsData_default_instance_);_WeatherData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeatherData_default_instance_);_TimeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeData_default_instance_);_SunriseData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SunriseData_default_instance_);_UserHistoryQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserHistoryQuery_default_instance_);_UserHistory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserHistory_default_instance_);_InfocardInfo_default_instance_._instance.get_mutable()->fact_ = const_cast< ::gogo::qhist::InfocardFactInfo*>(
      ::gogo::qhist::InfocardFactInfo::internal_default_instance());
  _MixinsData_default_instance_._instance.get_mutable()->weather_data_ = const_cast< ::gogo::qhist::WeatherData*>(
      ::gogo::qhist::WeatherData::internal_default_instance());
  _MixinsData_default_instance_._instance.get_mutable()->time_data_ = const_cast< ::gogo::qhist::TimeData*>(
      ::gogo::qhist::TimeData::internal_default_instance());
  _MixinsData_default_instance_._instance.get_mutable()->sunrise_data_ = const_cast< ::gogo::qhist::SunriseData*>(
      ::gogo::qhist::SunriseData::internal_default_instance());
  _UserHistoryQuery_default_instance_._instance.get_mutable()->classifiers_ = const_cast< ::gogo::qhist::QueryClassifiersData*>(
      ::gogo::qhist::QueryClassifiersData::internal_default_instance());
  _UserHistoryQuery_default_instance_._instance.get_mutable()->mixins_data_ = const_cast< ::gogo::qhist::MixinsData*>(
      ::gogo::qhist::MixinsData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023query_history.proto\022\ngogo.qhist\"\260\001\n\024Qu"
      "eryClassifiersData\022\025\n\rinfocard_prob\030\001 \001("
      "\002\022\023\n\013health_prob\030\002 \001(\002\022\021\n\ttorg_prob\030\003 \001("
      "\002\022\021\n\tfilm_prob\030\004 \001(\002\022\025\n\rporn_doc_prob\030\006 "
      "\001(\002\022\027\n\017recipe_doc_prob\030\007 \001(\002\022\026\n\016music_do"
      "c_prob\030\010 \001(\002\"z\n\tMixinInfo\022\014\n\004name\030\001 \001(\t\022"
      ",\n\004side\030\002 \001(\0162\036.gogo.qhist.MixinInfo.Ser"
      "pSide\022\020\n\010position\030\003 \001(\r\"\037\n\010SerpSide\022\010\n\004L"
      "EFT\020\001\022\t\n\005RIGHT\020\002\" \n\020InfocardFactInfo\022\014\n\004"
      "name\030\001 \001(\t\"J\n\014InfocardInfo\022\016\n\006object\030\001 \001"
      "(\004\022*\n\004fact\030\003 \001(\0132\034.gogo.qhist.InfocardFa"
      "ctInfo\"-\n\017QueryObjectInfo\022\014\n\004type\030\001 \001(\t\022"
      "\014\n\004text\030\002 \001(\t\"\223\001\n\nMixinsData\022-\n\014weather_"
      "data\030\001 \001(\0132\027.gogo.qhist.WeatherData\022\'\n\tt"
      "ime_data\030\002 \001(\0132\024.gogo.qhist.TimeData\022-\n\014"
      "sunrise_data\030\003 \001(\0132\027.gogo.qhist.SunriseD"
      "ata\"6\n\013WeatherData\022\014\n\004city\030\001 \001(\004\022\013\n\003day\030"
      "\002 \001(\005\022\014\n\004date\030\003 \001(\t\"\030\n\010TimeData\022\014\n\004city\030"
      "\001 \001(\004\"\263\001\n\013SunriseData\0221\n\004type\030\001 \001(\0162#.go"
      "go.qhist.SunriseData.SunriseType\022\014\n\004city"
      "\030\002 \001(\004\022\013\n\003day\030\003 \001(\005\022\014\n\004date\030\004 \001(\t\"H\n\013Sun"
      "riseType\022\013\n\007SUNRISE\020\001\022\n\n\006SUNSET\020\002\022\016\n\nDAY"
      "_LENGTH\020\003\022\020\n\014NIGHT_LENGTH\020\004\"\261\002\n\020UserHist"
      "oryQuery\022\014\n\004text\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001("
      "\004\022\020\n\010bin_name\030\003 \001(\t\0225\n\013classifiers\030\004 \001(\013"
      "2 .gogo.qhist.QueryClassifiersData\022%\n\006mi"
      "xins\030\005 \003(\0132\025.gogo.qhist.MixinInfo\022+\n\tinf"
      "ocards\030\006 \003(\0132\030.gogo.qhist.InfocardInfo\0222"
      "\n\rquery_objects\030\007 \003(\0132\033.gogo.qhist.Query"
      "ObjectInfo\022+\n\013mixins_data\030\010 \001(\0132\026.gogo.q"
      "hist.MixinsData\"\\\n\013UserHistory\022-\n\007querie"
      "s\030\001 \003(\0132\034.gogo.qhist.UserHistoryQuery\022\r\n"
      "\005error\030\002 \001(\t\022\017\n\007enabled\030\003 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "query_history.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_query_5fhistory_2eproto

const ::google::protobuf::EnumDescriptor* MixinInfo_SerpSide_descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_enum_descriptors[0];
}
bool MixinInfo_SerpSide_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MixinInfo_SerpSide MixinInfo::LEFT;
const MixinInfo_SerpSide MixinInfo::RIGHT;
const MixinInfo_SerpSide MixinInfo::SerpSide_MIN;
const MixinInfo_SerpSide MixinInfo::SerpSide_MAX;
const int MixinInfo::SerpSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SunriseData_SunriseType_descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_enum_descriptors[1];
}
bool SunriseData_SunriseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SunriseData_SunriseType SunriseData::SUNRISE;
const SunriseData_SunriseType SunriseData::SUNSET;
const SunriseData_SunriseType SunriseData::DAY_LENGTH;
const SunriseData_SunriseType SunriseData::NIGHT_LENGTH;
const SunriseData_SunriseType SunriseData::SunriseType_MIN;
const SunriseData_SunriseType SunriseData::SunriseType_MAX;
const int SunriseData::SunriseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryClassifiersData::kInfocardProbFieldNumber;
const int QueryClassifiersData::kHealthProbFieldNumber;
const int QueryClassifiersData::kTorgProbFieldNumber;
const int QueryClassifiersData::kFilmProbFieldNumber;
const int QueryClassifiersData::kPornDocProbFieldNumber;
const int QueryClassifiersData::kRecipeDocProbFieldNumber;
const int QueryClassifiersData::kMusicDocProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryClassifiersData::QueryClassifiersData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.QueryClassifiersData)
}
QueryClassifiersData::QueryClassifiersData(const QueryClassifiersData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&infocard_prob_, &from.infocard_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&music_doc_prob_) -
    reinterpret_cast<char*>(&infocard_prob_)) + sizeof(music_doc_prob_));
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.QueryClassifiersData)
}

void QueryClassifiersData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&infocard_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&music_doc_prob_) -
      reinterpret_cast<char*>(&infocard_prob_)) + sizeof(music_doc_prob_));
}

QueryClassifiersData::~QueryClassifiersData() {
  // @@protoc_insertion_point(destructor:gogo.qhist.QueryClassifiersData)
  SharedDtor();
}

void QueryClassifiersData::SharedDtor() {
}

void QueryClassifiersData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryClassifiersData::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryClassifiersData& QueryClassifiersData::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryClassifiersData* QueryClassifiersData::New(::google::protobuf::Arena* arena) const {
  QueryClassifiersData* n = new QueryClassifiersData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryClassifiersData::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.QueryClassifiersData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&infocard_prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&music_doc_prob_) -
        reinterpret_cast<char*>(&infocard_prob_)) + sizeof(music_doc_prob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryClassifiersData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.QueryClassifiersData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float infocard_prob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_infocard_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &infocard_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_prob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_health_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float torg_prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_torg_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torg_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float film_prob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_film_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &film_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porn_doc_prob = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_porn_doc_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porn_doc_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recipe_doc_prob = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_recipe_doc_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recipe_doc_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float music_doc_prob = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_music_doc_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &music_doc_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.QueryClassifiersData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.QueryClassifiersData)
  return false;
#undef DO_
}

void QueryClassifiersData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.QueryClassifiersData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float infocard_prob = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->infocard_prob(), output);
  }

  // optional float health_prob = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health_prob(), output);
  }

  // optional float torg_prob = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->torg_prob(), output);
  }

  // optional float film_prob = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->film_prob(), output);
  }

  // optional float porn_doc_prob = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->porn_doc_prob(), output);
  }

  // optional float recipe_doc_prob = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->recipe_doc_prob(), output);
  }

  // optional float music_doc_prob = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->music_doc_prob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.QueryClassifiersData)
}

::google::protobuf::uint8* QueryClassifiersData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.QueryClassifiersData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float infocard_prob = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->infocard_prob(), target);
  }

  // optional float health_prob = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health_prob(), target);
  }

  // optional float torg_prob = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->torg_prob(), target);
  }

  // optional float film_prob = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->film_prob(), target);
  }

  // optional float porn_doc_prob = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->porn_doc_prob(), target);
  }

  // optional float recipe_doc_prob = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->recipe_doc_prob(), target);
  }

  // optional float music_doc_prob = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->music_doc_prob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.QueryClassifiersData)
  return target;
}

size_t QueryClassifiersData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.QueryClassifiersData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional float infocard_prob = 1;
    if (has_infocard_prob()) {
      total_size += 1 + 4;
    }

    // optional float health_prob = 2;
    if (has_health_prob()) {
      total_size += 1 + 4;
    }

    // optional float torg_prob = 3;
    if (has_torg_prob()) {
      total_size += 1 + 4;
    }

    // optional float film_prob = 4;
    if (has_film_prob()) {
      total_size += 1 + 4;
    }

    // optional float porn_doc_prob = 6;
    if (has_porn_doc_prob()) {
      total_size += 1 + 4;
    }

    // optional float recipe_doc_prob = 7;
    if (has_recipe_doc_prob()) {
      total_size += 1 + 4;
    }

    // optional float music_doc_prob = 8;
    if (has_music_doc_prob()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryClassifiersData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.QueryClassifiersData)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryClassifiersData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryClassifiersData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.QueryClassifiersData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.QueryClassifiersData)
    MergeFrom(*source);
  }
}

void QueryClassifiersData::MergeFrom(const QueryClassifiersData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.QueryClassifiersData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      infocard_prob_ = from.infocard_prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      health_prob_ = from.health_prob_;
    }
    if (cached_has_bits & 0x00000004u) {
      torg_prob_ = from.torg_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      film_prob_ = from.film_prob_;
    }
    if (cached_has_bits & 0x00000010u) {
      porn_doc_prob_ = from.porn_doc_prob_;
    }
    if (cached_has_bits & 0x00000020u) {
      recipe_doc_prob_ = from.recipe_doc_prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      music_doc_prob_ = from.music_doc_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryClassifiersData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.QueryClassifiersData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryClassifiersData::CopyFrom(const QueryClassifiersData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.QueryClassifiersData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClassifiersData::IsInitialized() const {
  return true;
}

void QueryClassifiersData::Swap(QueryClassifiersData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryClassifiersData::InternalSwap(QueryClassifiersData* other) {
  using std::swap;
  swap(infocard_prob_, other->infocard_prob_);
  swap(health_prob_, other->health_prob_);
  swap(torg_prob_, other->torg_prob_);
  swap(film_prob_, other->film_prob_);
  swap(porn_doc_prob_, other->porn_doc_prob_);
  swap(recipe_doc_prob_, other->recipe_doc_prob_);
  swap(music_doc_prob_, other->music_doc_prob_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryClassifiersData::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryClassifiersData

// optional float infocard_prob = 1;
bool QueryClassifiersData::has_infocard_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryClassifiersData::set_has_infocard_prob() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryClassifiersData::clear_has_infocard_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryClassifiersData::clear_infocard_prob() {
  infocard_prob_ = 0;
  clear_has_infocard_prob();
}
float QueryClassifiersData::infocard_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.infocard_prob)
  return infocard_prob_;
}
void QueryClassifiersData::set_infocard_prob(float value) {
  set_has_infocard_prob();
  infocard_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.infocard_prob)
}

// optional float health_prob = 2;
bool QueryClassifiersData::has_health_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryClassifiersData::set_has_health_prob() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryClassifiersData::clear_has_health_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryClassifiersData::clear_health_prob() {
  health_prob_ = 0;
  clear_has_health_prob();
}
float QueryClassifiersData::health_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.health_prob)
  return health_prob_;
}
void QueryClassifiersData::set_health_prob(float value) {
  set_has_health_prob();
  health_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.health_prob)
}

// optional float torg_prob = 3;
bool QueryClassifiersData::has_torg_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryClassifiersData::set_has_torg_prob() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryClassifiersData::clear_has_torg_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryClassifiersData::clear_torg_prob() {
  torg_prob_ = 0;
  clear_has_torg_prob();
}
float QueryClassifiersData::torg_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.torg_prob)
  return torg_prob_;
}
void QueryClassifiersData::set_torg_prob(float value) {
  set_has_torg_prob();
  torg_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.torg_prob)
}

// optional float film_prob = 4;
bool QueryClassifiersData::has_film_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryClassifiersData::set_has_film_prob() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryClassifiersData::clear_has_film_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryClassifiersData::clear_film_prob() {
  film_prob_ = 0;
  clear_has_film_prob();
}
float QueryClassifiersData::film_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.film_prob)
  return film_prob_;
}
void QueryClassifiersData::set_film_prob(float value) {
  set_has_film_prob();
  film_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.film_prob)
}

// optional float porn_doc_prob = 6;
bool QueryClassifiersData::has_porn_doc_prob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryClassifiersData::set_has_porn_doc_prob() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryClassifiersData::clear_has_porn_doc_prob() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryClassifiersData::clear_porn_doc_prob() {
  porn_doc_prob_ = 0;
  clear_has_porn_doc_prob();
}
float QueryClassifiersData::porn_doc_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.porn_doc_prob)
  return porn_doc_prob_;
}
void QueryClassifiersData::set_porn_doc_prob(float value) {
  set_has_porn_doc_prob();
  porn_doc_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.porn_doc_prob)
}

// optional float recipe_doc_prob = 7;
bool QueryClassifiersData::has_recipe_doc_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QueryClassifiersData::set_has_recipe_doc_prob() {
  _has_bits_[0] |= 0x00000020u;
}
void QueryClassifiersData::clear_has_recipe_doc_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
void QueryClassifiersData::clear_recipe_doc_prob() {
  recipe_doc_prob_ = 0;
  clear_has_recipe_doc_prob();
}
float QueryClassifiersData::recipe_doc_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.recipe_doc_prob)
  return recipe_doc_prob_;
}
void QueryClassifiersData::set_recipe_doc_prob(float value) {
  set_has_recipe_doc_prob();
  recipe_doc_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.recipe_doc_prob)
}

// optional float music_doc_prob = 8;
bool QueryClassifiersData::has_music_doc_prob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QueryClassifiersData::set_has_music_doc_prob() {
  _has_bits_[0] |= 0x00000040u;
}
void QueryClassifiersData::clear_has_music_doc_prob() {
  _has_bits_[0] &= ~0x00000040u;
}
void QueryClassifiersData::clear_music_doc_prob() {
  music_doc_prob_ = 0;
  clear_has_music_doc_prob();
}
float QueryClassifiersData::music_doc_prob() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryClassifiersData.music_doc_prob)
  return music_doc_prob_;
}
void QueryClassifiersData::set_music_doc_prob(float value) {
  set_has_music_doc_prob();
  music_doc_prob_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryClassifiersData.music_doc_prob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MixinInfo::kNameFieldNumber;
const int MixinInfo::kSideFieldNumber;
const int MixinInfo::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MixinInfo::MixinInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.MixinInfo)
}
MixinInfo::MixinInfo(const MixinInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&position_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.MixinInfo)
}

void MixinInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0u;
  side_ = 1;
}

MixinInfo::~MixinInfo() {
  // @@protoc_insertion_point(destructor:gogo.qhist.MixinInfo)
  SharedDtor();
}

void MixinInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MixinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixinInfo::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MixinInfo& MixinInfo::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MixinInfo* MixinInfo::New(::google::protobuf::Arena* arena) const {
  MixinInfo* n = new MixinInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MixinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.MixinInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    position_ = 0u;
    side_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MixinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.MixinInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.MixinInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.MixinInfo.SerpSide side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::qhist::MixinInfo_SerpSide_IsValid(value)) {
            set_side(static_cast< ::gogo::qhist::MixinInfo_SerpSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.MixinInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.MixinInfo)
  return false;
#undef DO_
}

void MixinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.MixinInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.MixinInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .gogo.qhist.MixinInfo.SerpSide side = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.MixinInfo)
}

::google::protobuf::uint8* MixinInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.MixinInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.MixinInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .gogo.qhist.MixinInfo.SerpSide side = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional uint32 position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.MixinInfo)
  return target;
}

size_t MixinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.MixinInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional .gogo.qhist.MixinInfo.SerpSide side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixinInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.MixinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MixinInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MixinInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.MixinInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.MixinInfo)
    MergeFrom(*source);
  }
}

void MixinInfo::MergeFrom(const MixinInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.MixinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      side_ = from.side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MixinInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.MixinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixinInfo::CopyFrom(const MixinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.MixinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixinInfo::IsInitialized() const {
  return true;
}

void MixinInfo::Swap(MixinInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MixinInfo::InternalSwap(MixinInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(position_, other->position_);
  swap(side_, other->side_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MixinInfo::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MixinInfo

// optional string name = 1;
bool MixinInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MixinInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MixinInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MixinInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MixinInfo::name() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinInfo.name)
  return name_.GetNoArena();
}
void MixinInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.MixinInfo.name)
}
#if LANG_CXX11
void MixinInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.MixinInfo.name)
}
#endif
void MixinInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.MixinInfo.name)
}
void MixinInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.MixinInfo.name)
}
::std::string* MixinInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.MixinInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MixinInfo::release_name() {
  // @@protoc_insertion_point(field_release:gogo.qhist.MixinInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MixinInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.MixinInfo.name)
}

// optional .gogo.qhist.MixinInfo.SerpSide side = 2;
bool MixinInfo::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MixinInfo::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
void MixinInfo::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
void MixinInfo::clear_side() {
  side_ = 1;
  clear_has_side();
}
::gogo::qhist::MixinInfo_SerpSide MixinInfo::side() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinInfo.side)
  return static_cast< ::gogo::qhist::MixinInfo_SerpSide >(side_);
}
void MixinInfo::set_side(::gogo::qhist::MixinInfo_SerpSide value) {
  assert(::gogo::qhist::MixinInfo_SerpSide_IsValid(value));
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.MixinInfo.side)
}

// optional uint32 position = 3;
bool MixinInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MixinInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void MixinInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void MixinInfo::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 MixinInfo::position() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinInfo.position)
  return position_;
}
void MixinInfo::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.MixinInfo.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfocardFactInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfocardFactInfo::InfocardFactInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.InfocardFactInfo)
}
InfocardFactInfo::InfocardFactInfo(const InfocardFactInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.InfocardFactInfo)
}

void InfocardFactInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfocardFactInfo::~InfocardFactInfo() {
  // @@protoc_insertion_point(destructor:gogo.qhist.InfocardFactInfo)
  SharedDtor();
}

void InfocardFactInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfocardFactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfocardFactInfo::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfocardFactInfo& InfocardFactInfo::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfocardFactInfo* InfocardFactInfo::New(::google::protobuf::Arena* arena) const {
  InfocardFactInfo* n = new InfocardFactInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfocardFactInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.InfocardFactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfocardFactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.InfocardFactInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.InfocardFactInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.InfocardFactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.InfocardFactInfo)
  return false;
#undef DO_
}

void InfocardFactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.InfocardFactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.InfocardFactInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.InfocardFactInfo)
}

::google::protobuf::uint8* InfocardFactInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.InfocardFactInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.InfocardFactInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.InfocardFactInfo)
  return target;
}

size_t InfocardFactInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.InfocardFactInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfocardFactInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.InfocardFactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InfocardFactInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfocardFactInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.InfocardFactInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.InfocardFactInfo)
    MergeFrom(*source);
  }
}

void InfocardFactInfo::MergeFrom(const InfocardFactInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.InfocardFactInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InfocardFactInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.InfocardFactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfocardFactInfo::CopyFrom(const InfocardFactInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.InfocardFactInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfocardFactInfo::IsInitialized() const {
  return true;
}

void InfocardFactInfo::Swap(InfocardFactInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfocardFactInfo::InternalSwap(InfocardFactInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfocardFactInfo::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfocardFactInfo

// optional string name = 1;
bool InfocardFactInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfocardFactInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InfocardFactInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfocardFactInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& InfocardFactInfo::name() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.InfocardFactInfo.name)
  return name_.GetNoArena();
}
void InfocardFactInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.InfocardFactInfo.name)
}
#if LANG_CXX11
void InfocardFactInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.InfocardFactInfo.name)
}
#endif
void InfocardFactInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.InfocardFactInfo.name)
}
void InfocardFactInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.InfocardFactInfo.name)
}
::std::string* InfocardFactInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.InfocardFactInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfocardFactInfo::release_name() {
  // @@protoc_insertion_point(field_release:gogo.qhist.InfocardFactInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfocardFactInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.InfocardFactInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfocardInfo::kObjectFieldNumber;
const int InfocardInfo::kFactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfocardInfo::InfocardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.InfocardInfo)
}
InfocardInfo::InfocardInfo(const InfocardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fact()) {
    fact_ = new ::gogo::qhist::InfocardFactInfo(*from.fact_);
  } else {
    fact_ = NULL;
  }
  object_ = from.object_;
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.InfocardInfo)
}

void InfocardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_) -
      reinterpret_cast<char*>(&fact_)) + sizeof(object_));
}

InfocardInfo::~InfocardInfo() {
  // @@protoc_insertion_point(destructor:gogo.qhist.InfocardInfo)
  SharedDtor();
}

void InfocardInfo::SharedDtor() {
  if (this != internal_default_instance()) delete fact_;
}

void InfocardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfocardInfo::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfocardInfo& InfocardInfo::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfocardInfo* InfocardInfo::New(::google::protobuf::Arena* arena) const {
  InfocardInfo* n = new InfocardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfocardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.InfocardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_fact()) {
    GOOGLE_DCHECK(fact_ != NULL);
    fact_->::gogo::qhist::InfocardFactInfo::Clear();
  }
  object_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfocardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.InfocardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 object = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_object();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.InfocardFactInfo fact = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.InfocardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.InfocardInfo)
  return false;
#undef DO_
}

void InfocardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.InfocardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 object = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object(), output);
  }

  // optional .gogo.qhist.InfocardFactInfo fact = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fact_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.InfocardInfo)
}

::google::protobuf::uint8* InfocardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.InfocardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 object = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object(), target);
  }

  // optional .gogo.qhist.InfocardFactInfo fact = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fact_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.InfocardInfo)
  return target;
}

size_t InfocardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.InfocardInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .gogo.qhist.InfocardFactInfo fact = 3;
    if (has_fact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fact_);
    }

    // optional uint64 object = 1;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfocardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.InfocardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InfocardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfocardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.InfocardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.InfocardInfo)
    MergeFrom(*source);
  }
}

void InfocardInfo::MergeFrom(const InfocardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.InfocardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fact()->::gogo::qhist::InfocardFactInfo::MergeFrom(from.fact());
    }
    if (cached_has_bits & 0x00000002u) {
      object_ = from.object_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InfocardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.InfocardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfocardInfo::CopyFrom(const InfocardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.InfocardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfocardInfo::IsInitialized() const {
  return true;
}

void InfocardInfo::Swap(InfocardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfocardInfo::InternalSwap(InfocardInfo* other) {
  using std::swap;
  swap(fact_, other->fact_);
  swap(object_, other->object_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfocardInfo::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfocardInfo

// optional uint64 object = 1;
bool InfocardInfo::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfocardInfo::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
void InfocardInfo::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfocardInfo::clear_object() {
  object_ = GOOGLE_ULONGLONG(0);
  clear_has_object();
}
::google::protobuf::uint64 InfocardInfo::object() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.InfocardInfo.object)
  return object_;
}
void InfocardInfo::set_object(::google::protobuf::uint64 value) {
  set_has_object();
  object_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.InfocardInfo.object)
}

// optional .gogo.qhist.InfocardFactInfo fact = 3;
bool InfocardInfo::has_fact() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfocardInfo::set_has_fact() {
  _has_bits_[0] |= 0x00000001u;
}
void InfocardInfo::clear_has_fact() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfocardInfo::clear_fact() {
  if (fact_ != NULL) fact_->::gogo::qhist::InfocardFactInfo::Clear();
  clear_has_fact();
}
const ::gogo::qhist::InfocardFactInfo& InfocardInfo::fact() const {
  const ::gogo::qhist::InfocardFactInfo* p = fact_;
  // @@protoc_insertion_point(field_get:gogo.qhist.InfocardInfo.fact)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::InfocardFactInfo*>(
      &::gogo::qhist::_InfocardFactInfo_default_instance_);
}
::gogo::qhist::InfocardFactInfo* InfocardInfo::mutable_fact() {
  set_has_fact();
  if (fact_ == NULL) {
    fact_ = new ::gogo::qhist::InfocardFactInfo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.InfocardInfo.fact)
  return fact_;
}
::gogo::qhist::InfocardFactInfo* InfocardInfo::release_fact() {
  // @@protoc_insertion_point(field_release:gogo.qhist.InfocardInfo.fact)
  clear_has_fact();
  ::gogo::qhist::InfocardFactInfo* temp = fact_;
  fact_ = NULL;
  return temp;
}
void InfocardInfo::set_allocated_fact(::gogo::qhist::InfocardFactInfo* fact) {
  delete fact_;
  fact_ = fact;
  if (fact) {
    set_has_fact();
  } else {
    clear_has_fact();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.InfocardInfo.fact)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryObjectInfo::kTypeFieldNumber;
const int QueryObjectInfo::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryObjectInfo::QueryObjectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.QueryObjectInfo)
}
QueryObjectInfo::QueryObjectInfo(const QueryObjectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.QueryObjectInfo)
}

void QueryObjectInfo::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryObjectInfo::~QueryObjectInfo() {
  // @@protoc_insertion_point(destructor:gogo.qhist.QueryObjectInfo)
  SharedDtor();
}

void QueryObjectInfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryObjectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryObjectInfo::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryObjectInfo& QueryObjectInfo::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryObjectInfo* QueryObjectInfo::New(::google::protobuf::Arena* arena) const {
  QueryObjectInfo* n = new QueryObjectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.QueryObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryObjectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.QueryObjectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.QueryObjectInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.QueryObjectInfo.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.QueryObjectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.QueryObjectInfo)
  return false;
#undef DO_
}

void QueryObjectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.QueryObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.QueryObjectInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.QueryObjectInfo.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.QueryObjectInfo)
}

::google::protobuf::uint8* QueryObjectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.QueryObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.QueryObjectInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.QueryObjectInfo.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.QueryObjectInfo)
  return target;
}

size_t QueryObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.QueryObjectInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryObjectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.QueryObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryObjectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryObjectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.QueryObjectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.QueryObjectInfo)
    MergeFrom(*source);
  }
}

void QueryObjectInfo::MergeFrom(const QueryObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.QueryObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
}

void QueryObjectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.QueryObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryObjectInfo::CopyFrom(const QueryObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.QueryObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryObjectInfo::IsInitialized() const {
  return true;
}

void QueryObjectInfo::Swap(QueryObjectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryObjectInfo::InternalSwap(QueryObjectInfo* other) {
  using std::swap;
  type_.Swap(&other->type_);
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryObjectInfo::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryObjectInfo

// optional string type = 1;
bool QueryObjectInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryObjectInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryObjectInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryObjectInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& QueryObjectInfo::type() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryObjectInfo.type)
  return type_.GetNoArena();
}
void QueryObjectInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryObjectInfo.type)
}
#if LANG_CXX11
void QueryObjectInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.QueryObjectInfo.type)
}
#endif
void QueryObjectInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.QueryObjectInfo.type)
}
void QueryObjectInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.QueryObjectInfo.type)
}
::std::string* QueryObjectInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.QueryObjectInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryObjectInfo::release_type() {
  // @@protoc_insertion_point(field_release:gogo.qhist.QueryObjectInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryObjectInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.QueryObjectInfo.type)
}

// optional string text = 2;
bool QueryObjectInfo::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryObjectInfo::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryObjectInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryObjectInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& QueryObjectInfo::text() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.QueryObjectInfo.text)
  return text_.GetNoArena();
}
void QueryObjectInfo::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.QueryObjectInfo.text)
}
#if LANG_CXX11
void QueryObjectInfo::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.QueryObjectInfo.text)
}
#endif
void QueryObjectInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.QueryObjectInfo.text)
}
void QueryObjectInfo::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.QueryObjectInfo.text)
}
::std::string* QueryObjectInfo::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.QueryObjectInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryObjectInfo::release_text() {
  // @@protoc_insertion_point(field_release:gogo.qhist.QueryObjectInfo.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryObjectInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.QueryObjectInfo.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MixinsData::kWeatherDataFieldNumber;
const int MixinsData::kTimeDataFieldNumber;
const int MixinsData::kSunriseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MixinsData::MixinsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.MixinsData)
}
MixinsData::MixinsData(const MixinsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weather_data()) {
    weather_data_ = new ::gogo::qhist::WeatherData(*from.weather_data_);
  } else {
    weather_data_ = NULL;
  }
  if (from.has_time_data()) {
    time_data_ = new ::gogo::qhist::TimeData(*from.time_data_);
  } else {
    time_data_ = NULL;
  }
  if (from.has_sunrise_data()) {
    sunrise_data_ = new ::gogo::qhist::SunriseData(*from.sunrise_data_);
  } else {
    sunrise_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.MixinsData)
}

void MixinsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weather_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sunrise_data_) -
      reinterpret_cast<char*>(&weather_data_)) + sizeof(sunrise_data_));
}

MixinsData::~MixinsData() {
  // @@protoc_insertion_point(destructor:gogo.qhist.MixinsData)
  SharedDtor();
}

void MixinsData::SharedDtor() {
  if (this != internal_default_instance()) delete weather_data_;
  if (this != internal_default_instance()) delete time_data_;
  if (this != internal_default_instance()) delete sunrise_data_;
}

void MixinsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixinsData::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MixinsData& MixinsData::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

MixinsData* MixinsData::New(::google::protobuf::Arena* arena) const {
  MixinsData* n = new MixinsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MixinsData::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.MixinsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weather_data_ != NULL);
      weather_data_->::gogo::qhist::WeatherData::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_data_ != NULL);
      time_data_->::gogo::qhist::TimeData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sunrise_data_ != NULL);
      sunrise_data_->::gogo::qhist::SunriseData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MixinsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.MixinsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gogo.qhist.WeatherData weather_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weather_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.TimeData time_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.SunriseData sunrise_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sunrise_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.MixinsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.MixinsData)
  return false;
#undef DO_
}

void MixinsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.MixinsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gogo.qhist.WeatherData weather_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->weather_data_, output);
  }

  // optional .gogo.qhist.TimeData time_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_data_, output);
  }

  // optional .gogo.qhist.SunriseData sunrise_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sunrise_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.MixinsData)
}

::google::protobuf::uint8* MixinsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.MixinsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gogo.qhist.WeatherData weather_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->weather_data_, deterministic, target);
  }

  // optional .gogo.qhist.TimeData time_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_data_, deterministic, target);
  }

  // optional .gogo.qhist.SunriseData sunrise_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sunrise_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.MixinsData)
  return target;
}

size_t MixinsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.MixinsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .gogo.qhist.WeatherData weather_data = 1;
    if (has_weather_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weather_data_);
    }

    // optional .gogo.qhist.TimeData time_data = 2;
    if (has_time_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_data_);
    }

    // optional .gogo.qhist.SunriseData sunrise_data = 3;
    if (has_sunrise_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sunrise_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixinsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.MixinsData)
  GOOGLE_DCHECK_NE(&from, this);
  const MixinsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MixinsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.MixinsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.MixinsData)
    MergeFrom(*source);
  }
}

void MixinsData::MergeFrom(const MixinsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.MixinsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weather_data()->::gogo::qhist::WeatherData::MergeFrom(from.weather_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_data()->::gogo::qhist::TimeData::MergeFrom(from.time_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sunrise_data()->::gogo::qhist::SunriseData::MergeFrom(from.sunrise_data());
    }
  }
}

void MixinsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.MixinsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixinsData::CopyFrom(const MixinsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.MixinsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixinsData::IsInitialized() const {
  return true;
}

void MixinsData::Swap(MixinsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MixinsData::InternalSwap(MixinsData* other) {
  using std::swap;
  swap(weather_data_, other->weather_data_);
  swap(time_data_, other->time_data_);
  swap(sunrise_data_, other->sunrise_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MixinsData::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MixinsData

// optional .gogo.qhist.WeatherData weather_data = 1;
bool MixinsData::has_weather_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MixinsData::set_has_weather_data() {
  _has_bits_[0] |= 0x00000001u;
}
void MixinsData::clear_has_weather_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void MixinsData::clear_weather_data() {
  if (weather_data_ != NULL) weather_data_->::gogo::qhist::WeatherData::Clear();
  clear_has_weather_data();
}
const ::gogo::qhist::WeatherData& MixinsData::weather_data() const {
  const ::gogo::qhist::WeatherData* p = weather_data_;
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinsData.weather_data)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::WeatherData*>(
      &::gogo::qhist::_WeatherData_default_instance_);
}
::gogo::qhist::WeatherData* MixinsData::mutable_weather_data() {
  set_has_weather_data();
  if (weather_data_ == NULL) {
    weather_data_ = new ::gogo::qhist::WeatherData;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.MixinsData.weather_data)
  return weather_data_;
}
::gogo::qhist::WeatherData* MixinsData::release_weather_data() {
  // @@protoc_insertion_point(field_release:gogo.qhist.MixinsData.weather_data)
  clear_has_weather_data();
  ::gogo::qhist::WeatherData* temp = weather_data_;
  weather_data_ = NULL;
  return temp;
}
void MixinsData::set_allocated_weather_data(::gogo::qhist::WeatherData* weather_data) {
  delete weather_data_;
  weather_data_ = weather_data;
  if (weather_data) {
    set_has_weather_data();
  } else {
    clear_has_weather_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.MixinsData.weather_data)
}

// optional .gogo.qhist.TimeData time_data = 2;
bool MixinsData::has_time_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MixinsData::set_has_time_data() {
  _has_bits_[0] |= 0x00000002u;
}
void MixinsData::clear_has_time_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void MixinsData::clear_time_data() {
  if (time_data_ != NULL) time_data_->::gogo::qhist::TimeData::Clear();
  clear_has_time_data();
}
const ::gogo::qhist::TimeData& MixinsData::time_data() const {
  const ::gogo::qhist::TimeData* p = time_data_;
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinsData.time_data)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::TimeData*>(
      &::gogo::qhist::_TimeData_default_instance_);
}
::gogo::qhist::TimeData* MixinsData::mutable_time_data() {
  set_has_time_data();
  if (time_data_ == NULL) {
    time_data_ = new ::gogo::qhist::TimeData;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.MixinsData.time_data)
  return time_data_;
}
::gogo::qhist::TimeData* MixinsData::release_time_data() {
  // @@protoc_insertion_point(field_release:gogo.qhist.MixinsData.time_data)
  clear_has_time_data();
  ::gogo::qhist::TimeData* temp = time_data_;
  time_data_ = NULL;
  return temp;
}
void MixinsData::set_allocated_time_data(::gogo::qhist::TimeData* time_data) {
  delete time_data_;
  time_data_ = time_data;
  if (time_data) {
    set_has_time_data();
  } else {
    clear_has_time_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.MixinsData.time_data)
}

// optional .gogo.qhist.SunriseData sunrise_data = 3;
bool MixinsData::has_sunrise_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MixinsData::set_has_sunrise_data() {
  _has_bits_[0] |= 0x00000004u;
}
void MixinsData::clear_has_sunrise_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void MixinsData::clear_sunrise_data() {
  if (sunrise_data_ != NULL) sunrise_data_->::gogo::qhist::SunriseData::Clear();
  clear_has_sunrise_data();
}
const ::gogo::qhist::SunriseData& MixinsData::sunrise_data() const {
  const ::gogo::qhist::SunriseData* p = sunrise_data_;
  // @@protoc_insertion_point(field_get:gogo.qhist.MixinsData.sunrise_data)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::SunriseData*>(
      &::gogo::qhist::_SunriseData_default_instance_);
}
::gogo::qhist::SunriseData* MixinsData::mutable_sunrise_data() {
  set_has_sunrise_data();
  if (sunrise_data_ == NULL) {
    sunrise_data_ = new ::gogo::qhist::SunriseData;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.MixinsData.sunrise_data)
  return sunrise_data_;
}
::gogo::qhist::SunriseData* MixinsData::release_sunrise_data() {
  // @@protoc_insertion_point(field_release:gogo.qhist.MixinsData.sunrise_data)
  clear_has_sunrise_data();
  ::gogo::qhist::SunriseData* temp = sunrise_data_;
  sunrise_data_ = NULL;
  return temp;
}
void MixinsData::set_allocated_sunrise_data(::gogo::qhist::SunriseData* sunrise_data) {
  delete sunrise_data_;
  sunrise_data_ = sunrise_data;
  if (sunrise_data) {
    set_has_sunrise_data();
  } else {
    clear_has_sunrise_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.MixinsData.sunrise_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherData::kCityFieldNumber;
const int WeatherData::kDayFieldNumber;
const int WeatherData::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherData::WeatherData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.WeatherData)
}
WeatherData::WeatherData(const WeatherData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  ::memcpy(&city_, &from.city_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&city_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.WeatherData)
}

void WeatherData::SharedCtor() {
  _cached_size_ = 0;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&city_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&city_)) + sizeof(day_));
}

WeatherData::~WeatherData() {
  // @@protoc_insertion_point(destructor:gogo.qhist.WeatherData)
  SharedDtor();
}

void WeatherData::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeatherData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeatherData::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherData& WeatherData::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeatherData* WeatherData::New(::google::protobuf::Arena* arena) const {
  WeatherData* n = new WeatherData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeatherData::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.WeatherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_date()) {
    GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*date_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&city_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&day_) -
        reinterpret_cast<char*>(&city_)) + sizeof(day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeatherData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.WeatherData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 city = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_city();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.WeatherData.date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.WeatherData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.WeatherData)
  return false;
#undef DO_
}

void WeatherData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.WeatherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 city = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->city(), output);
  }

  // optional int32 day = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.WeatherData.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.WeatherData)
}

::google::protobuf::uint8* WeatherData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.WeatherData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 city = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->city(), target);
  }

  // optional int32 day = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.WeatherData.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.WeatherData)
  return target;
}

size_t WeatherData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.WeatherData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional uint64 city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->city());
    }

    // optional int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeatherData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.WeatherData)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.WeatherData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.WeatherData)
    MergeFrom(*source);
  }
}

void WeatherData::MergeFrom(const WeatherData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.WeatherData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000002u) {
      city_ = from.city_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeatherData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.WeatherData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherData::CopyFrom(const WeatherData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.WeatherData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherData::IsInitialized() const {
  return true;
}

void WeatherData::Swap(WeatherData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeatherData::InternalSwap(WeatherData* other) {
  using std::swap;
  date_.Swap(&other->date_);
  swap(city_, other->city_);
  swap(day_, other->day_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeatherData::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeatherData

// optional uint64 city = 1;
bool WeatherData::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeatherData::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void WeatherData::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeatherData::clear_city() {
  city_ = GOOGLE_ULONGLONG(0);
  clear_has_city();
}
::google::protobuf::uint64 WeatherData::city() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.WeatherData.city)
  return city_;
}
void WeatherData::set_city(::google::protobuf::uint64 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.WeatherData.city)
}

// optional int32 day = 2;
bool WeatherData::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WeatherData::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
void WeatherData::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
void WeatherData::clear_day() {
  day_ = 0;
  clear_has_day();
}
::google::protobuf::int32 WeatherData::day() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.WeatherData.day)
  return day_;
}
void WeatherData::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.WeatherData.day)
}

// optional string date = 3;
bool WeatherData::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeatherData::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void WeatherData::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeatherData::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
const ::std::string& WeatherData::date() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.WeatherData.date)
  return date_.GetNoArena();
}
void WeatherData::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.WeatherData.date)
}
#if LANG_CXX11
void WeatherData::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.WeatherData.date)
}
#endif
void WeatherData::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.WeatherData.date)
}
void WeatherData::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.WeatherData.date)
}
::std::string* WeatherData::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.WeatherData.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeatherData::release_date() {
  // @@protoc_insertion_point(field_release:gogo.qhist.WeatherData.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeatherData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.WeatherData.date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeData::kCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeData::TimeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.TimeData)
}
TimeData::TimeData(const TimeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_ = from.city_;
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.TimeData)
}

void TimeData::SharedCtor() {
  _cached_size_ = 0;
  city_ = GOOGLE_ULONGLONG(0);
}

TimeData::~TimeData() {
  // @@protoc_insertion_point(destructor:gogo.qhist.TimeData)
  SharedDtor();
}

void TimeData::SharedDtor() {
}

void TimeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeData::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeData& TimeData::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeData* TimeData::New(::google::protobuf::Arena* arena) const {
  TimeData* n = new TimeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.TimeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  city_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.TimeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 city = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_city();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.TimeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.TimeData)
  return false;
#undef DO_
}

void TimeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.TimeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 city = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->city(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.TimeData)
}

::google::protobuf::uint8* TimeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.TimeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 city = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->city(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.TimeData)
  return target;
}

size_t TimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.TimeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 city = 1;
  if (has_city()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->city());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.TimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.TimeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.TimeData)
    MergeFrom(*source);
  }
}

void TimeData::MergeFrom(const TimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.TimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_city()) {
    set_city(from.city());
  }
}

void TimeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.TimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeData::CopyFrom(const TimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.TimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeData::IsInitialized() const {
  return true;
}

void TimeData::Swap(TimeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeData::InternalSwap(TimeData* other) {
  using std::swap;
  swap(city_, other->city_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeData::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeData

// optional uint64 city = 1;
bool TimeData::has_city() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeData::set_has_city() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeData::clear_has_city() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeData::clear_city() {
  city_ = GOOGLE_ULONGLONG(0);
  clear_has_city();
}
::google::protobuf::uint64 TimeData::city() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.TimeData.city)
  return city_;
}
void TimeData::set_city(::google::protobuf::uint64 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.TimeData.city)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SunriseData::kTypeFieldNumber;
const int SunriseData::kCityFieldNumber;
const int SunriseData::kDayFieldNumber;
const int SunriseData::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SunriseData::SunriseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.SunriseData)
}
SunriseData::SunriseData(const SunriseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  ::memcpy(&city_, &from.city_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&city_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.SunriseData)
}

void SunriseData::SharedCtor() {
  _cached_size_ = 0;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&city_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&city_)) + sizeof(day_));
  type_ = 1;
}

SunriseData::~SunriseData() {
  // @@protoc_insertion_point(destructor:gogo.qhist.SunriseData)
  SharedDtor();
}

void SunriseData::SharedDtor() {
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SunriseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SunriseData::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SunriseData& SunriseData::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

SunriseData* SunriseData::New(::google::protobuf::Arena* arena) const {
  SunriseData* n = new SunriseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SunriseData::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.SunriseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_date()) {
    GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*date_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&city_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&day_) -
        reinterpret_cast<char*>(&city_)) + sizeof(day_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SunriseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.SunriseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gogo.qhist.SunriseData.SunriseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::qhist::SunriseData_SunriseType_IsValid(value)) {
            set_type(static_cast< ::gogo::qhist::SunriseData_SunriseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 city = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_city();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.SunriseData.date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.SunriseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.SunriseData)
  return false;
#undef DO_
}

void SunriseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.SunriseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gogo.qhist.SunriseData.SunriseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 city = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->city(), output);
  }

  // optional int32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional string date = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.SunriseData.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.SunriseData)
}

::google::protobuf::uint8* SunriseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.SunriseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gogo.qhist.SunriseData.SunriseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 city = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->city(), target);
  }

  // optional int32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional string date = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.SunriseData.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.SunriseData)
  return target;
}

size_t SunriseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.SunriseData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional uint64 city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->city());
    }

    // optional int32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional .gogo.qhist.SunriseData.SunriseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SunriseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.SunriseData)
  GOOGLE_DCHECK_NE(&from, this);
  const SunriseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SunriseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.SunriseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.SunriseData)
    MergeFrom(*source);
  }
}

void SunriseData::MergeFrom(const SunriseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.SunriseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000002u) {
      city_ = from.city_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SunriseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.SunriseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SunriseData::CopyFrom(const SunriseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.SunriseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SunriseData::IsInitialized() const {
  return true;
}

void SunriseData::Swap(SunriseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SunriseData::InternalSwap(SunriseData* other) {
  using std::swap;
  date_.Swap(&other->date_);
  swap(city_, other->city_);
  swap(day_, other->day_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SunriseData::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SunriseData

// optional .gogo.qhist.SunriseData.SunriseType type = 1;
bool SunriseData::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SunriseData::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void SunriseData::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void SunriseData::clear_type() {
  type_ = 1;
  clear_has_type();
}
::gogo::qhist::SunriseData_SunriseType SunriseData::type() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.SunriseData.type)
  return static_cast< ::gogo::qhist::SunriseData_SunriseType >(type_);
}
void SunriseData::set_type(::gogo::qhist::SunriseData_SunriseType value) {
  assert(::gogo::qhist::SunriseData_SunriseType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.SunriseData.type)
}

// optional uint64 city = 2;
bool SunriseData::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SunriseData::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void SunriseData::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void SunriseData::clear_city() {
  city_ = GOOGLE_ULONGLONG(0);
  clear_has_city();
}
::google::protobuf::uint64 SunriseData::city() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.SunriseData.city)
  return city_;
}
void SunriseData::set_city(::google::protobuf::uint64 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.SunriseData.city)
}

// optional int32 day = 3;
bool SunriseData::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SunriseData::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
void SunriseData::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
void SunriseData::clear_day() {
  day_ = 0;
  clear_has_day();
}
::google::protobuf::int32 SunriseData::day() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.SunriseData.day)
  return day_;
}
void SunriseData::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.SunriseData.day)
}

// optional string date = 4;
bool SunriseData::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SunriseData::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void SunriseData::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void SunriseData::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
const ::std::string& SunriseData::date() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.SunriseData.date)
  return date_.GetNoArena();
}
void SunriseData::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.SunriseData.date)
}
#if LANG_CXX11
void SunriseData::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.SunriseData.date)
}
#endif
void SunriseData::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.SunriseData.date)
}
void SunriseData::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.SunriseData.date)
}
::std::string* SunriseData::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.SunriseData.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SunriseData::release_date() {
  // @@protoc_insertion_point(field_release:gogo.qhist.SunriseData.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SunriseData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.SunriseData.date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHistoryQuery::kTextFieldNumber;
const int UserHistoryQuery::kTimestampFieldNumber;
const int UserHistoryQuery::kBinNameFieldNumber;
const int UserHistoryQuery::kClassifiersFieldNumber;
const int UserHistoryQuery::kMixinsFieldNumber;
const int UserHistoryQuery::kInfocardsFieldNumber;
const int UserHistoryQuery::kQueryObjectsFieldNumber;
const int UserHistoryQuery::kMixinsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHistoryQuery::UserHistoryQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.UserHistoryQuery)
}
UserHistoryQuery::UserHistoryQuery(const UserHistoryQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mixins_(from.mixins_),
      infocards_(from.infocards_),
      query_objects_(from.query_objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  bin_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bin_name()) {
    bin_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_name_);
  }
  if (from.has_classifiers()) {
    classifiers_ = new ::gogo::qhist::QueryClassifiersData(*from.classifiers_);
  } else {
    classifiers_ = NULL;
  }
  if (from.has_mixins_data()) {
    mixins_data_ = new ::gogo::qhist::MixinsData(*from.mixins_data_);
  } else {
    mixins_data_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.UserHistoryQuery)
}

void UserHistoryQuery::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bin_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&classifiers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&classifiers_)) + sizeof(timestamp_));
}

UserHistoryQuery::~UserHistoryQuery() {
  // @@protoc_insertion_point(destructor:gogo.qhist.UserHistoryQuery)
  SharedDtor();
}

void UserHistoryQuery::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bin_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete classifiers_;
  if (this != internal_default_instance()) delete mixins_data_;
}

void UserHistoryQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHistoryQuery::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHistoryQuery& UserHistoryQuery::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserHistoryQuery* UserHistoryQuery::New(::google::protobuf::Arena* arena) const {
  UserHistoryQuery* n = new UserHistoryQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHistoryQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.UserHistoryQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mixins_.Clear();
  infocards_.Clear();
  query_objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!bin_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bin_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(classifiers_ != NULL);
      classifiers_->::gogo::qhist::QueryClassifiersData::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mixins_data_ != NULL);
      mixins_data_->::gogo::qhist::MixinsData::Clear();
    }
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHistoryQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.UserHistoryQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.UserHistoryQuery.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bin_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bin_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bin_name().data(), static_cast<int>(this->bin_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.UserHistoryQuery.bin_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.QueryClassifiersData classifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.qhist.MixinInfo mixins = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mixins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.qhist.InfocardInfo infocards = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infocards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.qhist.QueryObjectInfo query_objects = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.qhist.MixinsData mixins_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixins_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.UserHistoryQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.UserHistoryQuery)
  return false;
#undef DO_
}

void UserHistoryQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.UserHistoryQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistoryQuery.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional string bin_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bin_name().data(), static_cast<int>(this->bin_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistoryQuery.bin_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bin_name(), output);
  }

  // optional .gogo.qhist.QueryClassifiersData classifiers = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->classifiers_, output);
  }

  // repeated .gogo.qhist.MixinInfo mixins = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mixins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mixins(static_cast<int>(i)), output);
  }

  // repeated .gogo.qhist.InfocardInfo infocards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infocards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->infocards(static_cast<int>(i)), output);
  }

  // repeated .gogo.qhist.QueryObjectInfo query_objects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->query_objects(static_cast<int>(i)), output);
  }

  // optional .gogo.qhist.MixinsData mixins_data = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->mixins_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.UserHistoryQuery)
}

::google::protobuf::uint8* UserHistoryQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.UserHistoryQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistoryQuery.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional string bin_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bin_name().data(), static_cast<int>(this->bin_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistoryQuery.bin_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bin_name(), target);
  }

  // optional .gogo.qhist.QueryClassifiersData classifiers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->classifiers_, deterministic, target);
  }

  // repeated .gogo.qhist.MixinInfo mixins = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mixins_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->mixins(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.qhist.InfocardInfo infocards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infocards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->infocards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.qhist.QueryObjectInfo query_objects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->query_objects(static_cast<int>(i)), deterministic, target);
  }

  // optional .gogo.qhist.MixinsData mixins_data = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->mixins_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.UserHistoryQuery)
  return target;
}

size_t UserHistoryQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.UserHistoryQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.qhist.MixinInfo mixins = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mixins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mixins(static_cast<int>(i)));
    }
  }

  // repeated .gogo.qhist.InfocardInfo infocards = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->infocards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infocards(static_cast<int>(i)));
    }
  }

  // repeated .gogo.qhist.QueryObjectInfo query_objects = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->query_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_objects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string bin_name = 3;
    if (has_bin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bin_name());
    }

    // optional .gogo.qhist.QueryClassifiersData classifiers = 4;
    if (has_classifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classifiers_);
    }

    // optional .gogo.qhist.MixinsData mixins_data = 8;
    if (has_mixins_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mixins_data_);
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHistoryQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.UserHistoryQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHistoryQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHistoryQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.UserHistoryQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.UserHistoryQuery)
    MergeFrom(*source);
  }
}

void UserHistoryQuery::MergeFrom(const UserHistoryQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.UserHistoryQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mixins_.MergeFrom(from.mixins_);
  infocards_.MergeFrom(from.infocards_);
  query_objects_.MergeFrom(from.query_objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bin_name();
      bin_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_classifiers()->::gogo::qhist::QueryClassifiersData::MergeFrom(from.classifiers());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_mixins_data()->::gogo::qhist::MixinsData::MergeFrom(from.mixins_data());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHistoryQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.UserHistoryQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistoryQuery::CopyFrom(const UserHistoryQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.UserHistoryQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistoryQuery::IsInitialized() const {
  return true;
}

void UserHistoryQuery::Swap(UserHistoryQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHistoryQuery::InternalSwap(UserHistoryQuery* other) {
  using std::swap;
  mixins_.InternalSwap(&other->mixins_);
  infocards_.InternalSwap(&other->infocards_);
  query_objects_.InternalSwap(&other->query_objects_);
  text_.Swap(&other->text_);
  bin_name_.Swap(&other->bin_name_);
  swap(classifiers_, other->classifiers_);
  swap(mixins_data_, other->mixins_data_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserHistoryQuery::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserHistoryQuery

// optional string text = 1;
bool UserHistoryQuery::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserHistoryQuery::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void UserHistoryQuery::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserHistoryQuery::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& UserHistoryQuery::text() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.text)
  return text_.GetNoArena();
}
void UserHistoryQuery::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.UserHistoryQuery.text)
}
#if LANG_CXX11
void UserHistoryQuery::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.UserHistoryQuery.text)
}
#endif
void UserHistoryQuery::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.UserHistoryQuery.text)
}
void UserHistoryQuery::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.UserHistoryQuery.text)
}
::std::string* UserHistoryQuery::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserHistoryQuery::release_text() {
  // @@protoc_insertion_point(field_release:gogo.qhist.UserHistoryQuery.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserHistoryQuery::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.UserHistoryQuery.text)
}

// optional uint64 timestamp = 2;
bool UserHistoryQuery::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserHistoryQuery::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void UserHistoryQuery::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserHistoryQuery::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 UserHistoryQuery::timestamp() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.timestamp)
  return timestamp_;
}
void UserHistoryQuery::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.UserHistoryQuery.timestamp)
}

// optional string bin_name = 3;
bool UserHistoryQuery::has_bin_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserHistoryQuery::set_has_bin_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UserHistoryQuery::clear_has_bin_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserHistoryQuery::clear_bin_name() {
  bin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bin_name();
}
const ::std::string& UserHistoryQuery::bin_name() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.bin_name)
  return bin_name_.GetNoArena();
}
void UserHistoryQuery::set_bin_name(const ::std::string& value) {
  set_has_bin_name();
  bin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.UserHistoryQuery.bin_name)
}
#if LANG_CXX11
void UserHistoryQuery::set_bin_name(::std::string&& value) {
  set_has_bin_name();
  bin_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.UserHistoryQuery.bin_name)
}
#endif
void UserHistoryQuery::set_bin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bin_name();
  bin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.UserHistoryQuery.bin_name)
}
void UserHistoryQuery::set_bin_name(const char* value, size_t size) {
  set_has_bin_name();
  bin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.UserHistoryQuery.bin_name)
}
::std::string* UserHistoryQuery::mutable_bin_name() {
  set_has_bin_name();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.bin_name)
  return bin_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserHistoryQuery::release_bin_name() {
  // @@protoc_insertion_point(field_release:gogo.qhist.UserHistoryQuery.bin_name)
  clear_has_bin_name();
  return bin_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserHistoryQuery::set_allocated_bin_name(::std::string* bin_name) {
  if (bin_name != NULL) {
    set_has_bin_name();
  } else {
    clear_has_bin_name();
  }
  bin_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bin_name);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.UserHistoryQuery.bin_name)
}

// optional .gogo.qhist.QueryClassifiersData classifiers = 4;
bool UserHistoryQuery::has_classifiers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserHistoryQuery::set_has_classifiers() {
  _has_bits_[0] |= 0x00000004u;
}
void UserHistoryQuery::clear_has_classifiers() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserHistoryQuery::clear_classifiers() {
  if (classifiers_ != NULL) classifiers_->::gogo::qhist::QueryClassifiersData::Clear();
  clear_has_classifiers();
}
const ::gogo::qhist::QueryClassifiersData& UserHistoryQuery::classifiers() const {
  const ::gogo::qhist::QueryClassifiersData* p = classifiers_;
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.classifiers)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::QueryClassifiersData*>(
      &::gogo::qhist::_QueryClassifiersData_default_instance_);
}
::gogo::qhist::QueryClassifiersData* UserHistoryQuery::mutable_classifiers() {
  set_has_classifiers();
  if (classifiers_ == NULL) {
    classifiers_ = new ::gogo::qhist::QueryClassifiersData;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.classifiers)
  return classifiers_;
}
::gogo::qhist::QueryClassifiersData* UserHistoryQuery::release_classifiers() {
  // @@protoc_insertion_point(field_release:gogo.qhist.UserHistoryQuery.classifiers)
  clear_has_classifiers();
  ::gogo::qhist::QueryClassifiersData* temp = classifiers_;
  classifiers_ = NULL;
  return temp;
}
void UserHistoryQuery::set_allocated_classifiers(::gogo::qhist::QueryClassifiersData* classifiers) {
  delete classifiers_;
  classifiers_ = classifiers;
  if (classifiers) {
    set_has_classifiers();
  } else {
    clear_has_classifiers();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.UserHistoryQuery.classifiers)
}

// repeated .gogo.qhist.MixinInfo mixins = 5;
int UserHistoryQuery::mixins_size() const {
  return mixins_.size();
}
void UserHistoryQuery::clear_mixins() {
  mixins_.Clear();
}
const ::gogo::qhist::MixinInfo& UserHistoryQuery::mixins(int index) const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.mixins)
  return mixins_.Get(index);
}
::gogo::qhist::MixinInfo* UserHistoryQuery::mutable_mixins(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.mixins)
  return mixins_.Mutable(index);
}
::gogo::qhist::MixinInfo* UserHistoryQuery::add_mixins() {
  // @@protoc_insertion_point(field_add:gogo.qhist.UserHistoryQuery.mixins)
  return mixins_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::qhist::MixinInfo >*
UserHistoryQuery::mutable_mixins() {
  // @@protoc_insertion_point(field_mutable_list:gogo.qhist.UserHistoryQuery.mixins)
  return &mixins_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::qhist::MixinInfo >&
UserHistoryQuery::mixins() const {
  // @@protoc_insertion_point(field_list:gogo.qhist.UserHistoryQuery.mixins)
  return mixins_;
}

// repeated .gogo.qhist.InfocardInfo infocards = 6;
int UserHistoryQuery::infocards_size() const {
  return infocards_.size();
}
void UserHistoryQuery::clear_infocards() {
  infocards_.Clear();
}
const ::gogo::qhist::InfocardInfo& UserHistoryQuery::infocards(int index) const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.infocards)
  return infocards_.Get(index);
}
::gogo::qhist::InfocardInfo* UserHistoryQuery::mutable_infocards(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.infocards)
  return infocards_.Mutable(index);
}
::gogo::qhist::InfocardInfo* UserHistoryQuery::add_infocards() {
  // @@protoc_insertion_point(field_add:gogo.qhist.UserHistoryQuery.infocards)
  return infocards_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::qhist::InfocardInfo >*
UserHistoryQuery::mutable_infocards() {
  // @@protoc_insertion_point(field_mutable_list:gogo.qhist.UserHistoryQuery.infocards)
  return &infocards_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::qhist::InfocardInfo >&
UserHistoryQuery::infocards() const {
  // @@protoc_insertion_point(field_list:gogo.qhist.UserHistoryQuery.infocards)
  return infocards_;
}

// repeated .gogo.qhist.QueryObjectInfo query_objects = 7;
int UserHistoryQuery::query_objects_size() const {
  return query_objects_.size();
}
void UserHistoryQuery::clear_query_objects() {
  query_objects_.Clear();
}
const ::gogo::qhist::QueryObjectInfo& UserHistoryQuery::query_objects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.query_objects)
  return query_objects_.Get(index);
}
::gogo::qhist::QueryObjectInfo* UserHistoryQuery::mutable_query_objects(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.query_objects)
  return query_objects_.Mutable(index);
}
::gogo::qhist::QueryObjectInfo* UserHistoryQuery::add_query_objects() {
  // @@protoc_insertion_point(field_add:gogo.qhist.UserHistoryQuery.query_objects)
  return query_objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::qhist::QueryObjectInfo >*
UserHistoryQuery::mutable_query_objects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.qhist.UserHistoryQuery.query_objects)
  return &query_objects_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::qhist::QueryObjectInfo >&
UserHistoryQuery::query_objects() const {
  // @@protoc_insertion_point(field_list:gogo.qhist.UserHistoryQuery.query_objects)
  return query_objects_;
}

// optional .gogo.qhist.MixinsData mixins_data = 8;
bool UserHistoryQuery::has_mixins_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserHistoryQuery::set_has_mixins_data() {
  _has_bits_[0] |= 0x00000008u;
}
void UserHistoryQuery::clear_has_mixins_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserHistoryQuery::clear_mixins_data() {
  if (mixins_data_ != NULL) mixins_data_->::gogo::qhist::MixinsData::Clear();
  clear_has_mixins_data();
}
const ::gogo::qhist::MixinsData& UserHistoryQuery::mixins_data() const {
  const ::gogo::qhist::MixinsData* p = mixins_data_;
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistoryQuery.mixins_data)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::qhist::MixinsData*>(
      &::gogo::qhist::_MixinsData_default_instance_);
}
::gogo::qhist::MixinsData* UserHistoryQuery::mutable_mixins_data() {
  set_has_mixins_data();
  if (mixins_data_ == NULL) {
    mixins_data_ = new ::gogo::qhist::MixinsData;
  }
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistoryQuery.mixins_data)
  return mixins_data_;
}
::gogo::qhist::MixinsData* UserHistoryQuery::release_mixins_data() {
  // @@protoc_insertion_point(field_release:gogo.qhist.UserHistoryQuery.mixins_data)
  clear_has_mixins_data();
  ::gogo::qhist::MixinsData* temp = mixins_data_;
  mixins_data_ = NULL;
  return temp;
}
void UserHistoryQuery::set_allocated_mixins_data(::gogo::qhist::MixinsData* mixins_data) {
  delete mixins_data_;
  mixins_data_ = mixins_data;
  if (mixins_data) {
    set_has_mixins_data();
  } else {
    clear_has_mixins_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.UserHistoryQuery.mixins_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHistory::kQueriesFieldNumber;
const int UserHistory::kErrorFieldNumber;
const int UserHistory::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHistory::UserHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_5fhistory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.qhist.UserHistory)
}
UserHistory::UserHistory(const UserHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gogo.qhist.UserHistory)
}

void UserHistory::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = 0u;
}

UserHistory::~UserHistory() {
  // @@protoc_insertion_point(destructor:gogo.qhist.UserHistory)
  SharedDtor();
}

void UserHistory::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHistory::descriptor() {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserHistory& UserHistory::default_instance() {
  protobuf_query_5fhistory_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserHistory* UserHistory::New(::google::protobuf::Arena* arena) const {
  UserHistory* n = new UserHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.qhist.UserHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  if (has_error()) {
    GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_.UnsafeRawStringPointer())->clear();
  }
  enabled_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.qhist.UserHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gogo.qhist.UserHistoryQuery queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.qhist.UserHistory.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.qhist.UserHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.qhist.UserHistory)
  return false;
#undef DO_
}

void UserHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.qhist.UserHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.qhist.UserHistoryQuery queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queries(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistory.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional uint32 enabled = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.qhist.UserHistory)
}

::google::protobuf::uint8* UserHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.qhist.UserHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gogo.qhist.UserHistoryQuery queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->queries(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.qhist.UserHistory.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional uint32 enabled = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.qhist.UserHistory)
  return target;
}

size_t UserHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.qhist.UserHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .gogo.qhist.UserHistoryQuery queries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional uint32 enabled = 3;
    if (has_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enabled());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.qhist.UserHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.qhist.UserHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.qhist.UserHistory)
    MergeFrom(*source);
  }
}

void UserHistory::MergeFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.qhist.UserHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.qhist.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory::CopyFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.qhist.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory::IsInitialized() const {
  return true;
}

void UserHistory::Swap(UserHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHistory::InternalSwap(UserHistory* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  error_.Swap(&other->error_);
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserHistory::GetMetadata() const {
  protobuf_query_5fhistory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_5fhistory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserHistory

// repeated .gogo.qhist.UserHistoryQuery queries = 1;
int UserHistory::queries_size() const {
  return queries_.size();
}
void UserHistory::clear_queries() {
  queries_.Clear();
}
const ::gogo::qhist::UserHistoryQuery& UserHistory::queries(int index) const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistory.queries)
  return queries_.Get(index);
}
::gogo::qhist::UserHistoryQuery* UserHistory::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistory.queries)
  return queries_.Mutable(index);
}
::gogo::qhist::UserHistoryQuery* UserHistory::add_queries() {
  // @@protoc_insertion_point(field_add:gogo.qhist.UserHistory.queries)
  return queries_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::qhist::UserHistoryQuery >*
UserHistory::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:gogo.qhist.UserHistory.queries)
  return &queries_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::qhist::UserHistoryQuery >&
UserHistory::queries() const {
  // @@protoc_insertion_point(field_list:gogo.qhist.UserHistory.queries)
  return queries_;
}

// optional string error = 2;
bool UserHistory::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserHistory::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void UserHistory::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserHistory::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& UserHistory::error() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistory.error)
  return error_.GetNoArena();
}
void UserHistory::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.qhist.UserHistory.error)
}
#if LANG_CXX11
void UserHistory::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.qhist.UserHistory.error)
}
#endif
void UserHistory::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.qhist.UserHistory.error)
}
void UserHistory::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.qhist.UserHistory.error)
}
::std::string* UserHistory::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:gogo.qhist.UserHistory.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserHistory::release_error() {
  // @@protoc_insertion_point(field_release:gogo.qhist.UserHistory.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserHistory::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:gogo.qhist.UserHistory.error)
}

// optional uint32 enabled = 3;
bool UserHistory::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserHistory::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void UserHistory::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserHistory::clear_enabled() {
  enabled_ = 0u;
  clear_has_enabled();
}
::google::protobuf::uint32 UserHistory::enabled() const {
  // @@protoc_insertion_point(field_get:gogo.qhist.UserHistory.enabled)
  return enabled_;
}
void UserHistory::set_enabled(::google::protobuf::uint32 value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gogo.qhist.UserHistory.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace qhist
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
