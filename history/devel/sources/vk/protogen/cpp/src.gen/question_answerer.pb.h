// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: question_answerer.proto

#ifndef PROTOBUF_question_5fanswerer_2eproto__INCLUDED
#define PROTOBUF_question_5fanswerer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace question_answerer {
namespace pb {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace pb
}  // namespace question_answerer

namespace question_answerer {
namespace pb {

namespace protobuf_question_5fanswerer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_question_5fanswerer_2eproto

// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:question_answerer.pb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string snippets = 1;
  int snippets_size() const;
  void clear_snippets();
  static const int kSnippetsFieldNumber = 1;
  const ::std::string& snippets(int index) const;
  ::std::string* mutable_snippets(int index);
  void set_snippets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_snippets(int index, ::std::string&& value);
  #endif
  void set_snippets(int index, const char* value);
  void set_snippets(int index, const char* value, size_t size);
  ::std::string* add_snippets();
  void add_snippets(const ::std::string& value);
  #if LANG_CXX11
  void add_snippets(::std::string&& value);
  #endif
  void add_snippets(const char* value);
  void add_snippets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& snippets() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snippets();

  // @@protoc_insertion_point(class_scope:question_answerer.pb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snippets_;
  friend struct protobuf_question_5fanswerer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:question_answerer.pb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string answer = 3;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 3;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // optional int32 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // optional float score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // optional float stage2_score = 5;
  bool has_stage2_score() const;
  void clear_stage2_score();
  static const int kStage2ScoreFieldNumber = 5;
  float stage2_score() const;
  void set_stage2_score(float value);

  // optional bool is_good = 4;
  bool has_is_good() const;
  void clear_is_good();
  static const int kIsGoodFieldNumber = 4;
  bool is_good() const;
  void set_is_good(bool value);

  // optional bool stage2_is_good = 6;
  bool has_stage2_is_good() const;
  void clear_stage2_is_good();
  static const int kStage2IsGoodFieldNumber = 6;
  bool stage2_is_good() const;
  void set_stage2_is_good(bool value);

  // @@protoc_insertion_point(class_scope:question_answerer.pb.Response)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_score();
  void clear_has_score();
  void set_has_answer();
  void clear_has_answer();
  void set_has_is_good();
  void clear_has_is_good();
  void set_has_stage2_score();
  void clear_has_stage2_score();
  void set_has_stage2_is_good();
  void clear_has_stage2_is_good();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::int32 pos_;
  float score_;
  float stage2_score_;
  bool is_good_;
  bool stage2_is_good_;
  friend struct protobuf_question_5fanswerer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// repeated string snippets = 1;
inline int Request::snippets_size() const {
  return snippets_.size();
}
inline void Request::clear_snippets() {
  snippets_.Clear();
}
inline const ::std::string& Request::snippets(int index) const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Request.snippets)
  return snippets_.Get(index);
}
inline ::std::string* Request::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:question_answerer.pb.Request.snippets)
  return snippets_.Mutable(index);
}
inline void Request::set_snippets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:question_answerer.pb.Request.snippets)
  snippets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Request::set_snippets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:question_answerer.pb.Request.snippets)
  snippets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Request::set_snippets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:question_answerer.pb.Request.snippets)
}
inline void Request::set_snippets(int index, const char* value, size_t size) {
  snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:question_answerer.pb.Request.snippets)
}
inline ::std::string* Request::add_snippets() {
  // @@protoc_insertion_point(field_add_mutable:question_answerer.pb.Request.snippets)
  return snippets_.Add();
}
inline void Request::add_snippets(const ::std::string& value) {
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:question_answerer.pb.Request.snippets)
}
#if LANG_CXX11
inline void Request::add_snippets(::std::string&& value) {
  snippets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:question_answerer.pb.Request.snippets)
}
#endif
inline void Request::add_snippets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:question_answerer.pb.Request.snippets)
}
inline void Request::add_snippets(const char* value, size_t size) {
  snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:question_answerer.pb.Request.snippets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::snippets() const {
  // @@protoc_insertion_point(field_list:question_answerer.pb.Request.snippets)
  return snippets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:question_answerer.pb.Request.snippets)
  return &snippets_;
}

// -------------------------------------------------------------------

// Response

// optional int32 pos = 1;
inline bool Response::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Response::pos() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.pos)
  return pos_;
}
inline void Response::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.pos)
}

// optional float score = 2;
inline bool Response::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float Response::score() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.score)
  return score_;
}
inline void Response::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.score)
}

// optional string answer = 3;
inline bool Response::has_answer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_answer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_answer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_answer();
}
inline const ::std::string& Response::answer() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.answer)
  return answer_.GetNoArena();
}
inline void Response::set_answer(const ::std::string& value) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.answer)
}
#if LANG_CXX11
inline void Response::set_answer(::std::string&& value) {
  set_has_answer();
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:question_answerer.pb.Response.answer)
}
#endif
inline void Response::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:question_answerer.pb.Response.answer)
}
inline void Response::set_answer(const char* value, size_t size) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:question_answerer.pb.Response.answer)
}
inline ::std::string* Response::mutable_answer() {
  set_has_answer();
  // @@protoc_insertion_point(field_mutable:question_answerer.pb.Response.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_answer() {
  // @@protoc_insertion_point(field_release:question_answerer.pb.Response.answer)
  clear_has_answer();
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    set_has_answer();
  } else {
    clear_has_answer();
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:question_answerer.pb.Response.answer)
}

// optional bool is_good = 4;
inline bool Response::has_is_good() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_is_good() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_is_good() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_is_good() {
  is_good_ = false;
  clear_has_is_good();
}
inline bool Response::is_good() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.is_good)
  return is_good_;
}
inline void Response::set_is_good(bool value) {
  set_has_is_good();
  is_good_ = value;
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.is_good)
}

// optional float stage2_score = 5;
inline bool Response::has_stage2_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_stage2_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_stage2_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_stage2_score() {
  stage2_score_ = 0;
  clear_has_stage2_score();
}
inline float Response::stage2_score() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.stage2_score)
  return stage2_score_;
}
inline void Response::set_stage2_score(float value) {
  set_has_stage2_score();
  stage2_score_ = value;
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.stage2_score)
}

// optional bool stage2_is_good = 6;
inline bool Response::has_stage2_is_good() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_stage2_is_good() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_stage2_is_good() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_stage2_is_good() {
  stage2_is_good_ = false;
  clear_has_stage2_is_good();
}
inline bool Response::stage2_is_good() const {
  // @@protoc_insertion_point(field_get:question_answerer.pb.Response.stage2_is_good)
  return stage2_is_good_;
}
inline void Response::set_stage2_is_good(bool value) {
  set_has_stage2_is_good();
  stage2_is_good_ = value;
  // @@protoc_insertion_point(field_set:question_answerer.pb.Response.stage2_is_good)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace question_answerer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_question_5fanswerer_2eproto__INCLUDED
