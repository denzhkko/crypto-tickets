// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recostream_pixel_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recostream_pixel_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace recostream {
namespace pb {
class ResultInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResultInfo>
     _instance;
} _ResultInfo_default_instance_;
class PromoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PromoInfo>
     _instance;
} _PromoInfo_default_instance_;
class UserInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserInfo>
     _instance;
} _UserInfo_default_instance_;
class DocumentMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentMetaInfo>
     _instance;
} _DocumentMetaInfo_default_instance_;
class ProviderOriginInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProviderOriginInfo>
     _instance;
} _ProviderOriginInfo_default_instance_;
class ProviderMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProviderMetaInfo>
     _instance;
} _ProviderMetaInfo_default_instance_;
class ResultMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResultMetaInfo>
     _instance;
} _ResultMetaInfo_default_instance_;

namespace protobuf_recostream_5fpixel_5finfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, block_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, is_internal_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, is_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, has_pictures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, is_commercial_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, block_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, from_scrollable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, advert_sitename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, is_video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultInfo, distribution_channel_id_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromoInfo, active_campaigns_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, hash_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, hash_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, hash_advertising_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, idfa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, compact_idfa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, compact_gaid_),
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  11,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, document_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, interleaving_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, mixer_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, result_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, from_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, promo_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, url_),
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderOriginInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderOriginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderOriginInfo, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMetaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMetaInfo, origin_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMetaInfo, mixer_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderMetaInfo, metrics_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, providers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, from_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMetaInfo, advert_sitename_),
  ~0u,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(ResultInfo)},
  { 29, 35, sizeof(PromoInfo)},
  { 36, 53, sizeof(UserInfo)},
  { 65, 79, sizeof(DocumentMetaInfo)},
  { 88, 94, sizeof(ProviderOriginInfo)},
  { 95, 103, sizeof(ProviderMetaInfo)},
  { 106, 115, sizeof(ResultMetaInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PromoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProviderOriginInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProviderMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultMetaInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "recostream_pixel_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::InitDefaults();
  ::utils::pb::protobuf_uuid_2eproto::InitDefaults();
  _ResultInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResultInfo_default_instance_);_PromoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PromoInfo_default_instance_);_UserInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserInfo_default_instance_);_DocumentMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentMetaInfo_default_instance_);_ProviderOriginInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProviderOriginInfo_default_instance_);_ProviderMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProviderMetaInfo_default_instance_);_ResultMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResultMetaInfo_default_instance_);_UserInfo_default_instance_._instance.get_mutable()->compact_idfa_ = const_cast< ::utils::pb::UUID*>(
      ::utils::pb::UUID::internal_default_instance());
  _UserInfo_default_instance_._instance.get_mutable()->compact_gaid_ = const_cast< ::utils::pb::UUID*>(
      ::utils::pb::UUID::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::cosmo::pb::Metrics*>(
      ::cosmo::pb::Metrics::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->document_info_ = const_cast< ::cosmo::pb::DocumentInfo*>(
      ::cosmo::pb::DocumentInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->interleaving_info_ = const_cast< ::cosmo::pb::InterleavingInfo*>(
      ::cosmo::pb::InterleavingInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->mixer_info_ = const_cast< ::cosmo::pb::MixerInfo*>(
      ::cosmo::pb::MixerInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->result_info_ = const_cast< ::recostream::pb::ResultInfo*>(
      ::recostream::pb::ResultInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->promo_info_ = const_cast< ::recostream::pb::PromoInfo*>(
      ::recostream::pb::PromoInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::recostream::pb::UserInfo*>(
      ::recostream::pb::UserInfo::internal_default_instance());
  _ProviderMetaInfo_default_instance_._instance.get_mutable()->origin_info_ = const_cast< ::recostream::pb::ProviderOriginInfo*>(
      ::recostream::pb::ProviderOriginInfo::internal_default_instance());
  _ProviderMetaInfo_default_instance_._instance.get_mutable()->mixer_info_ = const_cast< ::cosmo::pb::MixerInfo*>(
      ::cosmo::pb::MixerInfo::internal_default_instance());
  _ProviderMetaInfo_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::cosmo::pb::Metrics*>(
      ::cosmo::pb::Metrics::internal_default_instance());
  _ResultMetaInfo_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::recostream::pb::UserInfo*>(
      ::recostream::pb::UserInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033recostream_pixel_info.proto\022\rrecostrea"
      "m.pb\032\022cosmo_result.proto\032\nuuid.proto\"\244\002\n"
      "\nResultInfo\022\020\n\010position\030\001 \001(\005\022\023\n\013block_l"
      "abel\030\002 \001(\t\022\027\n\017is_internal_url\030\003 \001(\010\022\023\n\013i"
      "s_fulltext\030\004 \001(\010\022\024\n\014has_pictures\030\005 \001(\010\022\036"
      "\n\026is_commercial_fulltext\030\006 \001(\010\022\026\n\016block_"
      "position\030\007 \001(\005\022\027\n\017from_scrollable\030\010 \001(\010\022"
      "\016\n\006filler\030\t \001(\010\022\027\n\017advert_sitename\030\n \001(\003"
      "\022\020\n\010is_video\030\013 \001(\010\022\037\n\027distribution_chann"
      "el_id\030\014 \001(\t\"%\n\tPromoInfo\022\030\n\020active_campa"
      "igns\030\001 \003(\005\"\200\002\n\010UserInfo\022\017\n\007user_id\030\001 \001(\003"
      "\022\013\n\003vid\030\002 \001(\003\022\022\n\nhash_email\030\003 \001(\003\022\013\n\003geo"
      "\030\004 \001(\t\022\013\n\003age\030\005 \001(\r\022\013\n\003sex\030\006 \001(\010\022\026\n\016hash"
      "_device_id\030\007 \001(\003\022\033\n\023hash_advertising_id\030"
      "\010 \001(\003\022\014\n\004idfa\030\t \001(\t\022\014\n\004gaid\030\n \001(\t\022$\n\014com"
      "pact_idfa\030\013 \001(\0132\016.utils.pb.UUID\022$\n\014compa"
      "ct_gaid\030\014 \001(\0132\016.utils.pb.UUID\"\360\002\n\020Docume"
      "ntMetaInfo\022\"\n\007metrics\030\001 \001(\0132\021.cosmo.pb.M"
      "etrics\022-\n\rdocument_info\030\002 \001(\0132\026.cosmo.pb"
      ".DocumentInfo\0225\n\021interleaving_info\030\003 \001(\013"
      "2\032.cosmo.pb.InterleavingInfo\022\'\n\nmixer_in"
      "fo\030\004 \001(\0132\023.cosmo.pb.MixerInfo\022.\n\013result_"
      "info\030\005 \001(\0132\031.recostream.pb.ResultInfo\022\022\n"
      "\nfrom_label\030\006 \001(\t\022,\n\npromo_info\030\007 \001(\0132\030."
      "recostream.pb.PromoInfo\022*\n\tuser_info\030\010 \001"
      "(\0132\027.recostream.pb.UserInfo\022\013\n\003url\030\t \001(\t"
      "\"\"\n\022ProviderOriginInfo\022\014\n\004name\030\001 \002(\t\"\227\001\n"
      "\020ProviderMetaInfo\0226\n\013origin_info\030\001 \001(\0132!"
      ".recostream.pb.ProviderOriginInfo\022\'\n\nmix"
      "er_info\030\002 \001(\0132\023.cosmo.pb.MixerInfo\022\"\n\007me"
      "trics\030\003 \001(\0132\021.cosmo.pb.Metrics\"\235\001\n\016Resul"
      "tMetaInfo\0222\n\tproviders\030\001 \003(\0132\037.recostrea"
      "m.pb.ProviderMetaInfo\022\022\n\nfrom_label\030\002 \001("
      "\t\022*\n\tuser_info\030\003 \001(\0132\027.recostream.pb.Use"
      "rInfo\022\027\n\017advert_sitename\030\004 \001(\003B\036B\034Recost"
      "reamPixelMetaInfoProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recostream_pixel_info.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::AddDescriptors();
  ::utils::pb::protobuf_uuid_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_recostream_5fpixel_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultInfo::kPositionFieldNumber;
const int ResultInfo::kBlockLabelFieldNumber;
const int ResultInfo::kIsInternalUrlFieldNumber;
const int ResultInfo::kIsFulltextFieldNumber;
const int ResultInfo::kHasPicturesFieldNumber;
const int ResultInfo::kIsCommercialFulltextFieldNumber;
const int ResultInfo::kBlockPositionFieldNumber;
const int ResultInfo::kFromScrollableFieldNumber;
const int ResultInfo::kFillerFieldNumber;
const int ResultInfo::kAdvertSitenameFieldNumber;
const int ResultInfo::kIsVideoFieldNumber;
const int ResultInfo::kDistributionChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultInfo::ResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ResultInfo)
}
ResultInfo::ResultInfo(const ResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block_label()) {
    block_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_label_);
  }
  distribution_channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_distribution_channel_id()) {
    distribution_channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distribution_channel_id_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&advert_sitename_) -
    reinterpret_cast<char*>(&position_)) + sizeof(advert_sitename_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ResultInfo)
}

void ResultInfo::SharedCtor() {
  _cached_size_ = 0;
  block_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distribution_channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advert_sitename_) -
      reinterpret_cast<char*>(&position_)) + sizeof(advert_sitename_));
}

ResultInfo::~ResultInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.ResultInfo)
  SharedDtor();
}

void ResultInfo::SharedDtor() {
  block_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distribution_channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultInfo& ResultInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultInfo* ResultInfo::New(::google::protobuf::Arena* arena) const {
  ResultInfo* n = new ResultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!block_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*block_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!distribution_channel_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*distribution_channel_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_position_) -
        reinterpret_cast<char*>(&position_)) + sizeof(block_position_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&from_scrollable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&advert_sitename_) -
        reinterpret_cast<char*>(&from_scrollable_)) + sizeof(advert_sitename_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string block_label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block_label().data(), static_cast<int>(this->block_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ResultInfo.block_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_internal_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_internal_url();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_url_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fulltext = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_pictures = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_has_pictures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pictures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_commercial_fulltext = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_commercial_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_commercial_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 block_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_block_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_scrollable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_from_scrollable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_scrollable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filler = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_filler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 advert_sitename = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_advert_sitename();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &advert_sitename_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_video = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string distribution_channel_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distribution_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->distribution_channel_id().data(), static_cast<int>(this->distribution_channel_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ResultInfo.distribution_channel_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ResultInfo)
  return false;
#undef DO_
}

void ResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional string block_label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_label().data(), static_cast<int>(this->block_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultInfo.block_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->block_label(), output);
  }

  // optional bool is_internal_url = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_internal_url(), output);
  }

  // optional bool is_fulltext = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fulltext(), output);
  }

  // optional bool has_pictures = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_pictures(), output);
  }

  // optional bool is_commercial_fulltext = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_commercial_fulltext(), output);
  }

  // optional int32 block_position = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->block_position(), output);
  }

  // optional bool from_scrollable = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->from_scrollable(), output);
  }

  // optional bool filler = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->filler(), output);
  }

  // optional int64 advert_sitename = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->advert_sitename(), output);
  }

  // optional bool is_video = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_video(), output);
  }

  // optional string distribution_channel_id = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distribution_channel_id().data(), static_cast<int>(this->distribution_channel_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultInfo.distribution_channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->distribution_channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ResultInfo)
}

::google::protobuf::uint8* ResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 position = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional string block_label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_label().data(), static_cast<int>(this->block_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultInfo.block_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_label(), target);
  }

  // optional bool is_internal_url = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_internal_url(), target);
  }

  // optional bool is_fulltext = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fulltext(), target);
  }

  // optional bool has_pictures = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_pictures(), target);
  }

  // optional bool is_commercial_fulltext = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_commercial_fulltext(), target);
  }

  // optional int32 block_position = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->block_position(), target);
  }

  // optional bool from_scrollable = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->from_scrollable(), target);
  }

  // optional bool filler = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->filler(), target);
  }

  // optional int64 advert_sitename = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->advert_sitename(), target);
  }

  // optional bool is_video = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_video(), target);
  }

  // optional string distribution_channel_id = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->distribution_channel_id().data(), static_cast<int>(this->distribution_channel_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultInfo.distribution_channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->distribution_channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ResultInfo)
  return target;
}

size_t ResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ResultInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string block_label = 2;
    if (has_block_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_label());
    }

    // optional string distribution_channel_id = 12;
    if (has_distribution_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distribution_channel_id());
    }

    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional bool is_internal_url = 3;
    if (has_is_internal_url()) {
      total_size += 1 + 1;
    }

    // optional bool is_fulltext = 4;
    if (has_is_fulltext()) {
      total_size += 1 + 1;
    }

    // optional bool has_pictures = 5;
    if (has_has_pictures()) {
      total_size += 1 + 1;
    }

    // optional bool is_commercial_fulltext = 6;
    if (has_is_commercial_fulltext()) {
      total_size += 1 + 1;
    }

    // optional int32 block_position = 7;
    if (has_block_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_position());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool from_scrollable = 8;
    if (has_from_scrollable()) {
      total_size += 1 + 1;
    }

    // optional bool filler = 9;
    if (has_filler()) {
      total_size += 1 + 1;
    }

    // optional bool is_video = 11;
    if (has_is_video()) {
      total_size += 1 + 1;
    }

    // optional int64 advert_sitename = 10;
    if (has_advert_sitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->advert_sitename());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ResultInfo)
    MergeFrom(*source);
  }
}

void ResultInfo::MergeFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_block_label();
      block_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_distribution_channel_id();
      distribution_channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distribution_channel_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_internal_url_ = from.is_internal_url_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_fulltext_ = from.is_fulltext_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_pictures_ = from.has_pictures_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_commercial_fulltext_ = from.is_commercial_fulltext_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_position_ = from.block_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      from_scrollable_ = from.from_scrollable_;
    }
    if (cached_has_bits & 0x00000200u) {
      filler_ = from.filler_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_video_ = from.is_video_;
    }
    if (cached_has_bits & 0x00000800u) {
      advert_sitename_ = from.advert_sitename_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultInfo::CopyFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultInfo::IsInitialized() const {
  return true;
}

void ResultInfo::Swap(ResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultInfo::InternalSwap(ResultInfo* other) {
  using std::swap;
  block_label_.Swap(&other->block_label_);
  distribution_channel_id_.Swap(&other->distribution_channel_id_);
  swap(position_, other->position_);
  swap(is_internal_url_, other->is_internal_url_);
  swap(is_fulltext_, other->is_fulltext_);
  swap(has_pictures_, other->has_pictures_);
  swap(is_commercial_fulltext_, other->is_commercial_fulltext_);
  swap(block_position_, other->block_position_);
  swap(from_scrollable_, other->from_scrollable_);
  swap(filler_, other->filler_);
  swap(is_video_, other->is_video_);
  swap(advert_sitename_, other->advert_sitename_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultInfo

// optional int32 position = 1;
bool ResultInfo::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResultInfo::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void ResultInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResultInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 ResultInfo::position() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.position)
  return position_;
}
void ResultInfo::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.position)
}

// optional string block_label = 2;
bool ResultInfo::has_block_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultInfo::set_has_block_label() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultInfo::clear_has_block_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultInfo::clear_block_label() {
  block_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_label();
}
const ::std::string& ResultInfo::block_label() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.block_label)
  return block_label_.GetNoArena();
}
void ResultInfo::set_block_label(const ::std::string& value) {
  set_has_block_label();
  block_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.block_label)
}
#if LANG_CXX11
void ResultInfo::set_block_label(::std::string&& value) {
  set_has_block_label();
  block_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ResultInfo.block_label)
}
#endif
void ResultInfo::set_block_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_label();
  block_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ResultInfo.block_label)
}
void ResultInfo::set_block_label(const char* value, size_t size) {
  set_has_block_label();
  block_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ResultInfo.block_label)
}
::std::string* ResultInfo::mutable_block_label() {
  set_has_block_label();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultInfo.block_label)
  return block_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultInfo::release_block_label() {
  // @@protoc_insertion_point(field_release:recostream.pb.ResultInfo.block_label)
  clear_has_block_label();
  return block_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultInfo::set_allocated_block_label(::std::string* block_label) {
  if (block_label != NULL) {
    set_has_block_label();
  } else {
    clear_has_block_label();
  }
  block_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_label);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ResultInfo.block_label)
}

// optional bool is_internal_url = 3;
bool ResultInfo::has_is_internal_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResultInfo::set_has_is_internal_url() {
  _has_bits_[0] |= 0x00000008u;
}
void ResultInfo::clear_has_is_internal_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResultInfo::clear_is_internal_url() {
  is_internal_url_ = false;
  clear_has_is_internal_url();
}
bool ResultInfo::is_internal_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.is_internal_url)
  return is_internal_url_;
}
void ResultInfo::set_is_internal_url(bool value) {
  set_has_is_internal_url();
  is_internal_url_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.is_internal_url)
}

// optional bool is_fulltext = 4;
bool ResultInfo::has_is_fulltext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResultInfo::set_has_is_fulltext() {
  _has_bits_[0] |= 0x00000010u;
}
void ResultInfo::clear_has_is_fulltext() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResultInfo::clear_is_fulltext() {
  is_fulltext_ = false;
  clear_has_is_fulltext();
}
bool ResultInfo::is_fulltext() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.is_fulltext)
  return is_fulltext_;
}
void ResultInfo::set_is_fulltext(bool value) {
  set_has_is_fulltext();
  is_fulltext_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.is_fulltext)
}

// optional bool has_pictures = 5;
bool ResultInfo::has_has_pictures() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResultInfo::set_has_has_pictures() {
  _has_bits_[0] |= 0x00000020u;
}
void ResultInfo::clear_has_has_pictures() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResultInfo::clear_has_pictures() {
  has_pictures_ = false;
  clear_has_has_pictures();
}
bool ResultInfo::has_pictures() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.has_pictures)
  return has_pictures_;
}
void ResultInfo::set_has_pictures(bool value) {
  set_has_has_pictures();
  has_pictures_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.has_pictures)
}

// optional bool is_commercial_fulltext = 6;
bool ResultInfo::has_is_commercial_fulltext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ResultInfo::set_has_is_commercial_fulltext() {
  _has_bits_[0] |= 0x00000040u;
}
void ResultInfo::clear_has_is_commercial_fulltext() {
  _has_bits_[0] &= ~0x00000040u;
}
void ResultInfo::clear_is_commercial_fulltext() {
  is_commercial_fulltext_ = false;
  clear_has_is_commercial_fulltext();
}
bool ResultInfo::is_commercial_fulltext() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.is_commercial_fulltext)
  return is_commercial_fulltext_;
}
void ResultInfo::set_is_commercial_fulltext(bool value) {
  set_has_is_commercial_fulltext();
  is_commercial_fulltext_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.is_commercial_fulltext)
}

// optional int32 block_position = 7;
bool ResultInfo::has_block_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ResultInfo::set_has_block_position() {
  _has_bits_[0] |= 0x00000080u;
}
void ResultInfo::clear_has_block_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void ResultInfo::clear_block_position() {
  block_position_ = 0;
  clear_has_block_position();
}
::google::protobuf::int32 ResultInfo::block_position() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.block_position)
  return block_position_;
}
void ResultInfo::set_block_position(::google::protobuf::int32 value) {
  set_has_block_position();
  block_position_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.block_position)
}

// optional bool from_scrollable = 8;
bool ResultInfo::has_from_scrollable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ResultInfo::set_has_from_scrollable() {
  _has_bits_[0] |= 0x00000100u;
}
void ResultInfo::clear_has_from_scrollable() {
  _has_bits_[0] &= ~0x00000100u;
}
void ResultInfo::clear_from_scrollable() {
  from_scrollable_ = false;
  clear_has_from_scrollable();
}
bool ResultInfo::from_scrollable() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.from_scrollable)
  return from_scrollable_;
}
void ResultInfo::set_from_scrollable(bool value) {
  set_has_from_scrollable();
  from_scrollable_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.from_scrollable)
}

// optional bool filler = 9;
bool ResultInfo::has_filler() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ResultInfo::set_has_filler() {
  _has_bits_[0] |= 0x00000200u;
}
void ResultInfo::clear_has_filler() {
  _has_bits_[0] &= ~0x00000200u;
}
void ResultInfo::clear_filler() {
  filler_ = false;
  clear_has_filler();
}
bool ResultInfo::filler() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.filler)
  return filler_;
}
void ResultInfo::set_filler(bool value) {
  set_has_filler();
  filler_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.filler)
}

// optional int64 advert_sitename = 10;
bool ResultInfo::has_advert_sitename() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ResultInfo::set_has_advert_sitename() {
  _has_bits_[0] |= 0x00000800u;
}
void ResultInfo::clear_has_advert_sitename() {
  _has_bits_[0] &= ~0x00000800u;
}
void ResultInfo::clear_advert_sitename() {
  advert_sitename_ = GOOGLE_LONGLONG(0);
  clear_has_advert_sitename();
}
::google::protobuf::int64 ResultInfo::advert_sitename() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.advert_sitename)
  return advert_sitename_;
}
void ResultInfo::set_advert_sitename(::google::protobuf::int64 value) {
  set_has_advert_sitename();
  advert_sitename_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.advert_sitename)
}

// optional bool is_video = 11;
bool ResultInfo::has_is_video() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ResultInfo::set_has_is_video() {
  _has_bits_[0] |= 0x00000400u;
}
void ResultInfo::clear_has_is_video() {
  _has_bits_[0] &= ~0x00000400u;
}
void ResultInfo::clear_is_video() {
  is_video_ = false;
  clear_has_is_video();
}
bool ResultInfo::is_video() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.is_video)
  return is_video_;
}
void ResultInfo::set_is_video(bool value) {
  set_has_is_video();
  is_video_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.is_video)
}

// optional string distribution_channel_id = 12;
bool ResultInfo::has_distribution_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResultInfo::set_has_distribution_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ResultInfo::clear_has_distribution_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResultInfo::clear_distribution_channel_id() {
  distribution_channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_distribution_channel_id();
}
const ::std::string& ResultInfo::distribution_channel_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultInfo.distribution_channel_id)
  return distribution_channel_id_.GetNoArena();
}
void ResultInfo::set_distribution_channel_id(const ::std::string& value) {
  set_has_distribution_channel_id();
  distribution_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultInfo.distribution_channel_id)
}
#if LANG_CXX11
void ResultInfo::set_distribution_channel_id(::std::string&& value) {
  set_has_distribution_channel_id();
  distribution_channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ResultInfo.distribution_channel_id)
}
#endif
void ResultInfo::set_distribution_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_distribution_channel_id();
  distribution_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ResultInfo.distribution_channel_id)
}
void ResultInfo::set_distribution_channel_id(const char* value, size_t size) {
  set_has_distribution_channel_id();
  distribution_channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ResultInfo.distribution_channel_id)
}
::std::string* ResultInfo::mutable_distribution_channel_id() {
  set_has_distribution_channel_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultInfo.distribution_channel_id)
  return distribution_channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultInfo::release_distribution_channel_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.ResultInfo.distribution_channel_id)
  clear_has_distribution_channel_id();
  return distribution_channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultInfo::set_allocated_distribution_channel_id(::std::string* distribution_channel_id) {
  if (distribution_channel_id != NULL) {
    set_has_distribution_channel_id();
  } else {
    clear_has_distribution_channel_id();
  }
  distribution_channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distribution_channel_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ResultInfo.distribution_channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PromoInfo::kActiveCampaignsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PromoInfo::PromoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.PromoInfo)
}
PromoInfo::PromoInfo(const PromoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      active_campaigns_(from.active_campaigns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.PromoInfo)
}

void PromoInfo::SharedCtor() {
  _cached_size_ = 0;
}

PromoInfo::~PromoInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.PromoInfo)
  SharedDtor();
}

void PromoInfo::SharedDtor() {
}

void PromoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromoInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PromoInfo& PromoInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

PromoInfo* PromoInfo::New(::google::protobuf::Arena* arena) const {
  PromoInfo* n = new PromoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PromoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_campaigns_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PromoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.PromoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 active_campaigns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_active_campaigns())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active_campaigns())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.PromoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.PromoInfo)
  return false;
#undef DO_
}

void PromoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 active_campaigns = 1;
  for (int i = 0, n = this->active_campaigns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->active_campaigns(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.PromoInfo)
}

::google::protobuf::uint8* PromoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.PromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 active_campaigns = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->active_campaigns_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.PromoInfo)
  return target;
}

size_t PromoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.PromoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 active_campaigns = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->active_campaigns_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->active_campaigns_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.PromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PromoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PromoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.PromoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.PromoInfo)
    MergeFrom(*source);
  }
}

void PromoInfo::MergeFrom(const PromoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.PromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_campaigns_.MergeFrom(from.active_campaigns_);
}

void PromoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.PromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromoInfo::CopyFrom(const PromoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.PromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromoInfo::IsInitialized() const {
  return true;
}

void PromoInfo::Swap(PromoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PromoInfo::InternalSwap(PromoInfo* other) {
  using std::swap;
  active_campaigns_.InternalSwap(&other->active_campaigns_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PromoInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PromoInfo

// repeated int32 active_campaigns = 1;
int PromoInfo::active_campaigns_size() const {
  return active_campaigns_.size();
}
void PromoInfo::clear_active_campaigns() {
  active_campaigns_.Clear();
}
::google::protobuf::int32 PromoInfo::active_campaigns(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.PromoInfo.active_campaigns)
  return active_campaigns_.Get(index);
}
void PromoInfo::set_active_campaigns(int index, ::google::protobuf::int32 value) {
  active_campaigns_.Set(index, value);
  // @@protoc_insertion_point(field_set:recostream.pb.PromoInfo.active_campaigns)
}
void PromoInfo::add_active_campaigns(::google::protobuf::int32 value) {
  active_campaigns_.Add(value);
  // @@protoc_insertion_point(field_add:recostream.pb.PromoInfo.active_campaigns)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PromoInfo::active_campaigns() const {
  // @@protoc_insertion_point(field_list:recostream.pb.PromoInfo.active_campaigns)
  return active_campaigns_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PromoInfo::mutable_active_campaigns() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.PromoInfo.active_campaigns)
  return &active_campaigns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kVidFieldNumber;
const int UserInfo::kHashEmailFieldNumber;
const int UserInfo::kGeoFieldNumber;
const int UserInfo::kAgeFieldNumber;
const int UserInfo::kSexFieldNumber;
const int UserInfo::kHashDeviceIdFieldNumber;
const int UserInfo::kHashAdvertisingIdFieldNumber;
const int UserInfo::kIdfaFieldNumber;
const int UserInfo::kGaidFieldNumber;
const int UserInfo::kCompactIdfaFieldNumber;
const int UserInfo::kCompactGaidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geo()) {
    geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_);
  }
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_idfa()) {
    idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
  }
  gaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gaid()) {
    gaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaid_);
  }
  if (from.has_compact_idfa()) {
    compact_idfa_ = new ::utils::pb::UUID(*from.compact_idfa_);
  } else {
    compact_idfa_ = NULL;
  }
  if (from.has_compact_gaid()) {
    compact_gaid_ = new ::utils::pb::UUID(*from.compact_gaid_);
  } else {
    compact_gaid_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_advertising_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(hash_advertising_id_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.UserInfo)
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&compact_idfa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_advertising_id_) -
      reinterpret_cast<char*>(&compact_idfa_)) + sizeof(hash_advertising_id_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  geo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compact_idfa_;
  if (this != internal_default_instance()) delete compact_gaid_;
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!geo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*geo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!idfa_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*idfa_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!gaid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gaid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(compact_idfa_ != NULL);
      compact_idfa_->::utils::pb::UUID::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(compact_gaid_ != NULL);
      compact_gaid_->::utils::pb::UUID::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hash_email_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(hash_email_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&age_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hash_advertising_id_) -
        reinterpret_cast<char*>(&age_)) + sizeof(hash_advertising_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hash_email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_hash_email();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hash_email_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string geo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geo().data(), static_cast<int>(this->geo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.UserInfo.geo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hash_device_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hash_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hash_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hash_advertising_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hash_advertising_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hash_advertising_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string idfa = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), static_cast<int>(this->idfa().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.UserInfo.idfa");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gaid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gaid().data(), static_cast<int>(this->gaid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.UserInfo.gaid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .utils.pb.UUID compact_idfa = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_idfa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .utils.pb.UUID compact_gaid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_gaid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int64 vid = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vid(), output);
  }

  // optional int64 hash_email = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hash_email(), output);
  }

  // optional string geo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo().data(), static_cast<int>(this->geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.geo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->geo(), output);
  }

  // optional uint32 age = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->age(), output);
  }

  // optional bool sex = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sex(), output);
  }

  // optional int64 hash_device_id = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->hash_device_id(), output);
  }

  // optional int64 hash_advertising_id = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->hash_advertising_id(), output);
  }

  // optional string idfa = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->idfa(), output);
  }

  // optional string gaid = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gaid().data(), static_cast<int>(this->gaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.gaid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gaid(), output);
  }

  // optional .utils.pb.UUID compact_idfa = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->compact_idfa_, output);
  }

  // optional .utils.pb.UUID compact_gaid = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->compact_gaid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int64 vid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vid(), target);
  }

  // optional int64 hash_email = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hash_email(), target);
  }

  // optional string geo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo().data(), static_cast<int>(this->geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.geo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->geo(), target);
  }

  // optional uint32 age = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->age(), target);
  }

  // optional bool sex = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sex(), target);
  }

  // optional int64 hash_device_id = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->hash_device_id(), target);
  }

  // optional int64 hash_advertising_id = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->hash_advertising_id(), target);
  }

  // optional string idfa = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->idfa(), target);
  }

  // optional string gaid = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gaid().data(), static_cast<int>(this->gaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.UserInfo.gaid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gaid(), target);
  }

  // optional .utils.pb.UUID compact_idfa = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->compact_idfa_, deterministic, target);
  }

  // optional .utils.pb.UUID compact_gaid = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->compact_gaid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.UserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string geo = 4;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo());
    }

    // optional string idfa = 9;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string gaid = 10;
    if (has_gaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gaid());
    }

    // optional .utils.pb.UUID compact_idfa = 11;
    if (has_compact_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->compact_idfa_);
    }

    // optional .utils.pb.UUID compact_gaid = 12;
    if (has_compact_gaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->compact_gaid_);
    }

    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vid());
    }

    // optional int64 hash_email = 3;
    if (has_hash_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hash_email());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional bool sex = 6;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int64 hash_device_id = 7;
    if (has_hash_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hash_device_id());
    }

    // optional int64 hash_advertising_id = 8;
    if (has_hash_advertising_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hash_advertising_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_geo();
      geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_idfa();
      idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gaid();
      gaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_compact_idfa()->::utils::pb::UUID::MergeFrom(from.compact_idfa());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_compact_gaid()->::utils::pb::UUID::MergeFrom(from.compact_gaid());
    }
    if (cached_has_bits & 0x00000020u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      vid_ = from.vid_;
    }
    if (cached_has_bits & 0x00000080u) {
      hash_email_ = from.hash_email_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000200u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000400u) {
      hash_device_id_ = from.hash_device_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      hash_advertising_id_ = from.hash_advertising_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if (has_compact_idfa()) {
    if (!this->compact_idfa_->IsInitialized()) return false;
  }
  if (has_compact_gaid()) {
    if (!this->compact_gaid_->IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  geo_.Swap(&other->geo_);
  idfa_.Swap(&other->idfa_);
  gaid_.Swap(&other->gaid_);
  swap(compact_idfa_, other->compact_idfa_);
  swap(compact_gaid_, other->compact_gaid_);
  swap(user_id_, other->user_id_);
  swap(vid_, other->vid_);
  swap(hash_email_, other->hash_email_);
  swap(age_, other->age_);
  swap(sex_, other->sex_);
  swap(hash_device_id_, other->hash_device_id_);
  swap(hash_advertising_id_, other->hash_advertising_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional int64 user_id = 1;
bool UserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.user_id)
  return user_id_;
}
void UserInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.user_id)
}

// optional int64 vid = 2;
bool UserInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfo::clear_vid() {
  vid_ = GOOGLE_LONGLONG(0);
  clear_has_vid();
}
::google::protobuf::int64 UserInfo::vid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.vid)
  return vid_;
}
void UserInfo::set_vid(::google::protobuf::int64 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.vid)
}

// optional int64 hash_email = 3;
bool UserInfo::has_hash_email() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfo::set_has_hash_email() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfo::clear_has_hash_email() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfo::clear_hash_email() {
  hash_email_ = GOOGLE_LONGLONG(0);
  clear_has_hash_email();
}
::google::protobuf::int64 UserInfo::hash_email() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.hash_email)
  return hash_email_;
}
void UserInfo::set_hash_email(::google::protobuf::int64 value) {
  set_has_hash_email();
  hash_email_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.hash_email)
}

// optional string geo = 4;
bool UserInfo::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_geo() {
  geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geo();
}
const ::std::string& UserInfo::geo() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.geo)
  return geo_.GetNoArena();
}
void UserInfo::set_geo(const ::std::string& value) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.geo)
}
#if LANG_CXX11
void UserInfo::set_geo(::std::string&& value) {
  set_has_geo();
  geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.UserInfo.geo)
}
#endif
void UserInfo::set_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.UserInfo.geo)
}
void UserInfo::set_geo(const char* value, size_t size) {
  set_has_geo();
  geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.UserInfo.geo)
}
::std::string* UserInfo::mutable_geo() {
  set_has_geo();
  // @@protoc_insertion_point(field_mutable:recostream.pb.UserInfo.geo)
  return geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_geo() {
  // @@protoc_insertion_point(field_release:recostream.pb.UserInfo.geo)
  clear_has_geo();
  return geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_geo(::std::string* geo) {
  if (geo != NULL) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geo);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.UserInfo.geo)
}

// optional uint32 age = 5;
bool UserInfo::has_age() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfo::set_has_age() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfo::clear_has_age() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfo::clear_age() {
  age_ = 0u;
  clear_has_age();
}
::google::protobuf::uint32 UserInfo::age() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.age)
  return age_;
}
void UserInfo::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.age)
}

// optional bool sex = 6;
bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfo::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
bool UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.sex)
  return sex_;
}
void UserInfo::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.sex)
}

// optional int64 hash_device_id = 7;
bool UserInfo::has_hash_device_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfo::set_has_hash_device_id() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfo::clear_has_hash_device_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfo::clear_hash_device_id() {
  hash_device_id_ = GOOGLE_LONGLONG(0);
  clear_has_hash_device_id();
}
::google::protobuf::int64 UserInfo::hash_device_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.hash_device_id)
  return hash_device_id_;
}
void UserInfo::set_hash_device_id(::google::protobuf::int64 value) {
  set_has_hash_device_id();
  hash_device_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.hash_device_id)
}

// optional int64 hash_advertising_id = 8;
bool UserInfo::has_hash_advertising_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserInfo::set_has_hash_advertising_id() {
  _has_bits_[0] |= 0x00000800u;
}
void UserInfo::clear_has_hash_advertising_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserInfo::clear_hash_advertising_id() {
  hash_advertising_id_ = GOOGLE_LONGLONG(0);
  clear_has_hash_advertising_id();
}
::google::protobuf::int64 UserInfo::hash_advertising_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.hash_advertising_id)
  return hash_advertising_id_;
}
void UserInfo::set_hash_advertising_id(::google::protobuf::int64 value) {
  set_has_hash_advertising_id();
  hash_advertising_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.hash_advertising_id)
}

// optional string idfa = 9;
bool UserInfo::has_idfa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_idfa() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
const ::std::string& UserInfo::idfa() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.idfa)
  return idfa_.GetNoArena();
}
void UserInfo::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.idfa)
}
#if LANG_CXX11
void UserInfo::set_idfa(::std::string&& value) {
  set_has_idfa();
  idfa_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.UserInfo.idfa)
}
#endif
void UserInfo::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.UserInfo.idfa)
}
void UserInfo::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.UserInfo.idfa)
}
::std::string* UserInfo::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:recostream.pb.UserInfo.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:recostream.pb.UserInfo.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.UserInfo.idfa)
}

// optional string gaid = 10;
bool UserInfo::has_gaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_gaid() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_gaid() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_gaid() {
  gaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gaid();
}
const ::std::string& UserInfo::gaid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.gaid)
  return gaid_.GetNoArena();
}
void UserInfo::set_gaid(const ::std::string& value) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.UserInfo.gaid)
}
#if LANG_CXX11
void UserInfo::set_gaid(::std::string&& value) {
  set_has_gaid();
  gaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.UserInfo.gaid)
}
#endif
void UserInfo::set_gaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.UserInfo.gaid)
}
void UserInfo::set_gaid(const char* value, size_t size) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.UserInfo.gaid)
}
::std::string* UserInfo::mutable_gaid() {
  set_has_gaid();
  // @@protoc_insertion_point(field_mutable:recostream.pb.UserInfo.gaid)
  return gaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_gaid() {
  // @@protoc_insertion_point(field_release:recostream.pb.UserInfo.gaid)
  clear_has_gaid();
  return gaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_gaid(::std::string* gaid) {
  if (gaid != NULL) {
    set_has_gaid();
  } else {
    clear_has_gaid();
  }
  gaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaid);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.UserInfo.gaid)
}

// optional .utils.pb.UUID compact_idfa = 11;
bool UserInfo::has_compact_idfa() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfo::set_has_compact_idfa() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfo::clear_has_compact_idfa() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfo::clear_compact_idfa() {
  if (compact_idfa_ != NULL) compact_idfa_->::utils::pb::UUID::Clear();
  clear_has_compact_idfa();
}
const ::utils::pb::UUID& UserInfo::compact_idfa() const {
  const ::utils::pb::UUID* p = compact_idfa_;
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.compact_idfa)
  return p != NULL ? *p : *reinterpret_cast<const ::utils::pb::UUID*>(
      &::utils::pb::_UUID_default_instance_);
}
::utils::pb::UUID* UserInfo::mutable_compact_idfa() {
  set_has_compact_idfa();
  if (compact_idfa_ == NULL) {
    compact_idfa_ = new ::utils::pb::UUID;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.UserInfo.compact_idfa)
  return compact_idfa_;
}
::utils::pb::UUID* UserInfo::release_compact_idfa() {
  // @@protoc_insertion_point(field_release:recostream.pb.UserInfo.compact_idfa)
  clear_has_compact_idfa();
  ::utils::pb::UUID* temp = compact_idfa_;
  compact_idfa_ = NULL;
  return temp;
}
void UserInfo::set_allocated_compact_idfa(::utils::pb::UUID* compact_idfa) {
  delete compact_idfa_;
  compact_idfa_ = compact_idfa;
  if (compact_idfa) {
    set_has_compact_idfa();
  } else {
    clear_has_compact_idfa();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.UserInfo.compact_idfa)
}

// optional .utils.pb.UUID compact_gaid = 12;
bool UserInfo::has_compact_gaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfo::set_has_compact_gaid() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfo::clear_has_compact_gaid() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfo::clear_compact_gaid() {
  if (compact_gaid_ != NULL) compact_gaid_->::utils::pb::UUID::Clear();
  clear_has_compact_gaid();
}
const ::utils::pb::UUID& UserInfo::compact_gaid() const {
  const ::utils::pb::UUID* p = compact_gaid_;
  // @@protoc_insertion_point(field_get:recostream.pb.UserInfo.compact_gaid)
  return p != NULL ? *p : *reinterpret_cast<const ::utils::pb::UUID*>(
      &::utils::pb::_UUID_default_instance_);
}
::utils::pb::UUID* UserInfo::mutable_compact_gaid() {
  set_has_compact_gaid();
  if (compact_gaid_ == NULL) {
    compact_gaid_ = new ::utils::pb::UUID;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.UserInfo.compact_gaid)
  return compact_gaid_;
}
::utils::pb::UUID* UserInfo::release_compact_gaid() {
  // @@protoc_insertion_point(field_release:recostream.pb.UserInfo.compact_gaid)
  clear_has_compact_gaid();
  ::utils::pb::UUID* temp = compact_gaid_;
  compact_gaid_ = NULL;
  return temp;
}
void UserInfo::set_allocated_compact_gaid(::utils::pb::UUID* compact_gaid) {
  delete compact_gaid_;
  compact_gaid_ = compact_gaid;
  if (compact_gaid) {
    set_has_compact_gaid();
  } else {
    clear_has_compact_gaid();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.UserInfo.compact_gaid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentMetaInfo::kMetricsFieldNumber;
const int DocumentMetaInfo::kDocumentInfoFieldNumber;
const int DocumentMetaInfo::kInterleavingInfoFieldNumber;
const int DocumentMetaInfo::kMixerInfoFieldNumber;
const int DocumentMetaInfo::kResultInfoFieldNumber;
const int DocumentMetaInfo::kFromLabelFieldNumber;
const int DocumentMetaInfo::kPromoInfoFieldNumber;
const int DocumentMetaInfo::kUserInfoFieldNumber;
const int DocumentMetaInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentMetaInfo::DocumentMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.DocumentMetaInfo)
}
DocumentMetaInfo::DocumentMetaInfo(const DocumentMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_label()) {
    from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_metrics()) {
    metrics_ = new ::cosmo::pb::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  if (from.has_document_info()) {
    document_info_ = new ::cosmo::pb::DocumentInfo(*from.document_info_);
  } else {
    document_info_ = NULL;
  }
  if (from.has_interleaving_info()) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo(*from.interleaving_info_);
  } else {
    interleaving_info_ = NULL;
  }
  if (from.has_mixer_info()) {
    mixer_info_ = new ::cosmo::pb::MixerInfo(*from.mixer_info_);
  } else {
    mixer_info_ = NULL;
  }
  if (from.has_result_info()) {
    result_info_ = new ::recostream::pb::ResultInfo(*from.result_info_);
  } else {
    result_info_ = NULL;
  }
  if (from.has_promo_info()) {
    promo_info_ = new ::recostream::pb::PromoInfo(*from.promo_info_);
  } else {
    promo_info_ = NULL;
  }
  if (from.has_user_info()) {
    user_info_ = new ::recostream::pb::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.DocumentMetaInfo)
}

void DocumentMetaInfo::SharedCtor() {
  _cached_size_ = 0;
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) -
      reinterpret_cast<char*>(&metrics_)) + sizeof(user_info_));
}

DocumentMetaInfo::~DocumentMetaInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.DocumentMetaInfo)
  SharedDtor();
}

void DocumentMetaInfo::SharedDtor() {
  from_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete document_info_;
  if (this != internal_default_instance()) delete interleaving_info_;
  if (this != internal_default_instance()) delete mixer_info_;
  if (this != internal_default_instance()) delete result_info_;
  if (this != internal_default_instance()) delete promo_info_;
  if (this != internal_default_instance()) delete user_info_;
}

void DocumentMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetaInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentMetaInfo& DocumentMetaInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentMetaInfo* DocumentMetaInfo::New(::google::protobuf::Arena* arena) const {
  DocumentMetaInfo* n = new DocumentMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->::cosmo::pb::Metrics::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(document_info_ != NULL);
      document_info_->::cosmo::pb::DocumentInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(interleaving_info_ != NULL);
      interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mixer_info_ != NULL);
      mixer_info_->::cosmo::pb::MixerInfo::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(result_info_ != NULL);
      result_info_->::recostream::pb::ResultInfo::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(promo_info_ != NULL);
      promo_info_->::recostream::pb::PromoInfo::Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(user_info_ != NULL);
    user_info_->::recostream::pb::UserInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.DocumentMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.Metrics metrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentInfo document_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleaving_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.MixerInfo mixer_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.ResultInfo result_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_label = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_label().data(), static_cast<int>(this->from_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentMetaInfo.from_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.PromoInfo promo_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_promo_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.UserInfo user_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentMetaInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.DocumentMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.DocumentMetaInfo)
  return false;
#undef DO_
}

void DocumentMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.Metrics metrics = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metrics_, output);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->document_info_, output);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interleaving_info_, output);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mixer_info_, output);
  }

  // optional .recostream.pb.ResultInfo result_info = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->result_info_, output);
  }

  // optional string from_label = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentMetaInfo.from_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->from_label(), output);
  }

  // optional .recostream.pb.PromoInfo promo_info = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->promo_info_, output);
  }

  // optional .recostream.pb.UserInfo user_info = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->user_info_, output);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentMetaInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.DocumentMetaInfo)
}

::google::protobuf::uint8* DocumentMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.Metrics metrics = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metrics_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->document_info_, deterministic, target);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->interleaving_info_, deterministic, target);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mixer_info_, deterministic, target);
  }

  // optional .recostream.pb.ResultInfo result_info = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->result_info_, deterministic, target);
  }

  // optional string from_label = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentMetaInfo.from_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->from_label(), target);
  }

  // optional .recostream.pb.PromoInfo promo_info = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->promo_info_, deterministic, target);
  }

  // optional .recostream.pb.UserInfo user_info = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->user_info_, deterministic, target);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentMetaInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.DocumentMetaInfo)
  return target;
}

size_t DocumentMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.DocumentMetaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_label = 6;
    if (has_from_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_label());
    }

    // optional string url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .cosmo.pb.Metrics metrics = 1;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .cosmo.pb.DocumentInfo document_info = 2;
    if (has_document_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_info_);
    }

    // optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
    if (has_interleaving_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interleaving_info_);
    }

    // optional .cosmo.pb.MixerInfo mixer_info = 4;
    if (has_mixer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mixer_info_);
    }

    // optional .recostream.pb.ResultInfo result_info = 5;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_info_);
    }

    // optional .recostream.pb.PromoInfo promo_info = 7;
    if (has_promo_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->promo_info_);
    }

  }
  // optional .recostream.pb.UserInfo user_info = 8;
  if (has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.DocumentMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.DocumentMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.DocumentMetaInfo)
    MergeFrom(*source);
  }
}

void DocumentMetaInfo::MergeFrom(const DocumentMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.DocumentMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_label();
      from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_metrics()->::cosmo::pb::Metrics::MergeFrom(from.metrics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_document_info()->::cosmo::pb::DocumentInfo::MergeFrom(from.document_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_interleaving_info()->::cosmo::pb::InterleavingInfo::MergeFrom(from.interleaving_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_mixer_info()->::cosmo::pb::MixerInfo::MergeFrom(from.mixer_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_result_info()->::recostream::pb::ResultInfo::MergeFrom(from.result_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_promo_info()->::recostream::pb::PromoInfo::MergeFrom(from.promo_info());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_user_info()->::recostream::pb::UserInfo::MergeFrom(from.user_info());
  }
}

void DocumentMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.DocumentMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetaInfo::CopyFrom(const DocumentMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.DocumentMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetaInfo::IsInitialized() const {
  if (has_metrics()) {
    if (!this->metrics_->IsInitialized()) return false;
  }
  if (has_interleaving_info()) {
    if (!this->interleaving_info_->IsInitialized()) return false;
  }
  if (has_mixer_info()) {
    if (!this->mixer_info_->IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void DocumentMetaInfo::Swap(DocumentMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentMetaInfo::InternalSwap(DocumentMetaInfo* other) {
  using std::swap;
  from_label_.Swap(&other->from_label_);
  url_.Swap(&other->url_);
  swap(metrics_, other->metrics_);
  swap(document_info_, other->document_info_);
  swap(interleaving_info_, other->interleaving_info_);
  swap(mixer_info_, other->mixer_info_);
  swap(result_info_, other->result_info_);
  swap(promo_info_, other->promo_info_);
  swap(user_info_, other->user_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentMetaInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentMetaInfo

// optional .cosmo.pb.Metrics metrics = 1;
bool DocumentMetaInfo::has_metrics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentMetaInfo::set_has_metrics() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentMetaInfo::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentMetaInfo::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
const ::cosmo::pb::Metrics& DocumentMetaInfo::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
::cosmo::pb::Metrics* DocumentMetaInfo::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.metrics)
  return metrics_;
}
::cosmo::pb::Metrics* DocumentMetaInfo::release_metrics() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.metrics)
}

// optional .cosmo.pb.DocumentInfo document_info = 2;
bool DocumentMetaInfo::has_document_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentMetaInfo::set_has_document_info() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentMetaInfo::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentMetaInfo::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
const ::cosmo::pb::DocumentInfo& DocumentMetaInfo::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
::cosmo::pb::DocumentInfo* DocumentMetaInfo::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.document_info)
  return document_info_;
}
::cosmo::pb::DocumentInfo* DocumentMetaInfo::release_document_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.document_info)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 3;
bool DocumentMetaInfo::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentMetaInfo::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentMetaInfo::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentMetaInfo::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
const ::cosmo::pb::InterleavingInfo& DocumentMetaInfo::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
::cosmo::pb::InterleavingInfo* DocumentMetaInfo::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.interleaving_info)
  return interleaving_info_;
}
::cosmo::pb::InterleavingInfo* DocumentMetaInfo::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.interleaving_info)
}

// optional .cosmo.pb.MixerInfo mixer_info = 4;
bool DocumentMetaInfo::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentMetaInfo::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentMetaInfo::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentMetaInfo::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
const ::cosmo::pb::MixerInfo& DocumentMetaInfo::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
::cosmo::pb::MixerInfo* DocumentMetaInfo::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.mixer_info)
  return mixer_info_;
}
::cosmo::pb::MixerInfo* DocumentMetaInfo::release_mixer_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.mixer_info)
}

// optional .recostream.pb.ResultInfo result_info = 5;
bool DocumentMetaInfo::has_result_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocumentMetaInfo::set_has_result_info() {
  _has_bits_[0] |= 0x00000040u;
}
void DocumentMetaInfo::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentMetaInfo::clear_result_info() {
  if (result_info_ != NULL) result_info_->::recostream::pb::ResultInfo::Clear();
  clear_has_result_info();
}
const ::recostream::pb::ResultInfo& DocumentMetaInfo::result_info() const {
  const ::recostream::pb::ResultInfo* p = result_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.result_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::ResultInfo*>(
      &::recostream::pb::_ResultInfo_default_instance_);
}
::recostream::pb::ResultInfo* DocumentMetaInfo::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == NULL) {
    result_info_ = new ::recostream::pb::ResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.result_info)
  return result_info_;
}
::recostream::pb::ResultInfo* DocumentMetaInfo::release_result_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.result_info)
  clear_has_result_info();
  ::recostream::pb::ResultInfo* temp = result_info_;
  result_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_result_info(::recostream::pb::ResultInfo* result_info) {
  delete result_info_;
  result_info_ = result_info;
  if (result_info) {
    set_has_result_info();
  } else {
    clear_has_result_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.result_info)
}

// optional string from_label = 6;
bool DocumentMetaInfo::has_from_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentMetaInfo::set_has_from_label() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentMetaInfo::clear_has_from_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentMetaInfo::clear_from_label() {
  from_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_label();
}
const ::std::string& DocumentMetaInfo::from_label() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.from_label)
  return from_label_.GetNoArena();
}
void DocumentMetaInfo::set_from_label(const ::std::string& value) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentMetaInfo.from_label)
}
#if LANG_CXX11
void DocumentMetaInfo::set_from_label(::std::string&& value) {
  set_has_from_label();
  from_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentMetaInfo.from_label)
}
#endif
void DocumentMetaInfo::set_from_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentMetaInfo.from_label)
}
void DocumentMetaInfo::set_from_label(const char* value, size_t size) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentMetaInfo.from_label)
}
::std::string* DocumentMetaInfo::mutable_from_label() {
  set_has_from_label();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.from_label)
  return from_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentMetaInfo::release_from_label() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.from_label)
  clear_has_from_label();
  return from_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentMetaInfo::set_allocated_from_label(::std::string* from_label) {
  if (from_label != NULL) {
    set_has_from_label();
  } else {
    clear_has_from_label();
  }
  from_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_label);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.from_label)
}

// optional .recostream.pb.PromoInfo promo_info = 7;
bool DocumentMetaInfo::has_promo_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DocumentMetaInfo::set_has_promo_info() {
  _has_bits_[0] |= 0x00000080u;
}
void DocumentMetaInfo::clear_has_promo_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentMetaInfo::clear_promo_info() {
  if (promo_info_ != NULL) promo_info_->::recostream::pb::PromoInfo::Clear();
  clear_has_promo_info();
}
const ::recostream::pb::PromoInfo& DocumentMetaInfo::promo_info() const {
  const ::recostream::pb::PromoInfo* p = promo_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.promo_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PromoInfo*>(
      &::recostream::pb::_PromoInfo_default_instance_);
}
::recostream::pb::PromoInfo* DocumentMetaInfo::mutable_promo_info() {
  set_has_promo_info();
  if (promo_info_ == NULL) {
    promo_info_ = new ::recostream::pb::PromoInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.promo_info)
  return promo_info_;
}
::recostream::pb::PromoInfo* DocumentMetaInfo::release_promo_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.promo_info)
  clear_has_promo_info();
  ::recostream::pb::PromoInfo* temp = promo_info_;
  promo_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_promo_info(::recostream::pb::PromoInfo* promo_info) {
  delete promo_info_;
  promo_info_ = promo_info;
  if (promo_info) {
    set_has_promo_info();
  } else {
    clear_has_promo_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.promo_info)
}

// optional .recostream.pb.UserInfo user_info = 8;
bool DocumentMetaInfo::has_user_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DocumentMetaInfo::set_has_user_info() {
  _has_bits_[0] |= 0x00000100u;
}
void DocumentMetaInfo::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentMetaInfo::clear_user_info() {
  if (user_info_ != NULL) user_info_->::recostream::pb::UserInfo::Clear();
  clear_has_user_info();
}
const ::recostream::pb::UserInfo& DocumentMetaInfo::user_info() const {
  const ::recostream::pb::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::UserInfo*>(
      &::recostream::pb::_UserInfo_default_instance_);
}
::recostream::pb::UserInfo* DocumentMetaInfo::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::recostream::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.user_info)
  return user_info_;
}
::recostream::pb::UserInfo* DocumentMetaInfo::release_user_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.user_info)
  clear_has_user_info();
  ::recostream::pb::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_user_info(::recostream::pb::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.user_info)
}

// optional string url = 9;
bool DocumentMetaInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentMetaInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentMetaInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentMetaInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DocumentMetaInfo::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentMetaInfo.url)
  return url_.GetNoArena();
}
void DocumentMetaInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentMetaInfo.url)
}
#if LANG_CXX11
void DocumentMetaInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentMetaInfo.url)
}
#endif
void DocumentMetaInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentMetaInfo.url)
}
void DocumentMetaInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentMetaInfo.url)
}
::std::string* DocumentMetaInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentMetaInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentMetaInfo::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentMetaInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentMetaInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentMetaInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderOriginInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderOriginInfo::ProviderOriginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ProviderOriginInfo)
}
ProviderOriginInfo::ProviderOriginInfo(const ProviderOriginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ProviderOriginInfo)
}

void ProviderOriginInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProviderOriginInfo::~ProviderOriginInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.ProviderOriginInfo)
  SharedDtor();
}

void ProviderOriginInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProviderOriginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProviderOriginInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProviderOriginInfo& ProviderOriginInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProviderOriginInfo* ProviderOriginInfo::New(::google::protobuf::Arena* arena) const {
  ProviderOriginInfo* n = new ProviderOriginInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProviderOriginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ProviderOriginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProviderOriginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ProviderOriginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ProviderOriginInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ProviderOriginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ProviderOriginInfo)
  return false;
#undef DO_
}

void ProviderOriginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ProviderOriginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProviderOriginInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ProviderOriginInfo)
}

::google::protobuf::uint8* ProviderOriginInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ProviderOriginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProviderOriginInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ProviderOriginInfo)
  return target;
}

size_t ProviderOriginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ProviderOriginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProviderOriginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ProviderOriginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderOriginInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProviderOriginInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ProviderOriginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ProviderOriginInfo)
    MergeFrom(*source);
  }
}

void ProviderOriginInfo::MergeFrom(const ProviderOriginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ProviderOriginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ProviderOriginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ProviderOriginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderOriginInfo::CopyFrom(const ProviderOriginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ProviderOriginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderOriginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProviderOriginInfo::Swap(ProviderOriginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderOriginInfo::InternalSwap(ProviderOriginInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProviderOriginInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProviderOriginInfo

// required string name = 1;
bool ProviderOriginInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProviderOriginInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProviderOriginInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProviderOriginInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ProviderOriginInfo::name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderOriginInfo.name)
  return name_.GetNoArena();
}
void ProviderOriginInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ProviderOriginInfo.name)
}
#if LANG_CXX11
void ProviderOriginInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ProviderOriginInfo.name)
}
#endif
void ProviderOriginInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ProviderOriginInfo.name)
}
void ProviderOriginInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ProviderOriginInfo.name)
}
::std::string* ProviderOriginInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderOriginInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProviderOriginInfo::release_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderOriginInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProviderOriginInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderOriginInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderMetaInfo::kOriginInfoFieldNumber;
const int ProviderMetaInfo::kMixerInfoFieldNumber;
const int ProviderMetaInfo::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderMetaInfo::ProviderMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ProviderMetaInfo)
}
ProviderMetaInfo::ProviderMetaInfo(const ProviderMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin_info()) {
    origin_info_ = new ::recostream::pb::ProviderOriginInfo(*from.origin_info_);
  } else {
    origin_info_ = NULL;
  }
  if (from.has_mixer_info()) {
    mixer_info_ = new ::cosmo::pb::MixerInfo(*from.mixer_info_);
  } else {
    mixer_info_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::cosmo::pb::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ProviderMetaInfo)
}

void ProviderMetaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metrics_) -
      reinterpret_cast<char*>(&origin_info_)) + sizeof(metrics_));
}

ProviderMetaInfo::~ProviderMetaInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.ProviderMetaInfo)
  SharedDtor();
}

void ProviderMetaInfo::SharedDtor() {
  if (this != internal_default_instance()) delete origin_info_;
  if (this != internal_default_instance()) delete mixer_info_;
  if (this != internal_default_instance()) delete metrics_;
}

void ProviderMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProviderMetaInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProviderMetaInfo& ProviderMetaInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProviderMetaInfo* ProviderMetaInfo::New(::google::protobuf::Arena* arena) const {
  ProviderMetaInfo* n = new ProviderMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProviderMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ProviderMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_info_ != NULL);
      origin_info_->::recostream::pb::ProviderOriginInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mixer_info_ != NULL);
      mixer_info_->::cosmo::pb::MixerInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->::cosmo::pb::Metrics::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProviderMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ProviderMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .recostream.pb.ProviderOriginInfo origin_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.MixerInfo mixer_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ProviderMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ProviderMetaInfo)
  return false;
#undef DO_
}

void ProviderMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ProviderMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.ProviderOriginInfo origin_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_info_, output);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mixer_info_, output);
  }

  // optional .cosmo.pb.Metrics metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metrics_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ProviderMetaInfo)
}

::google::protobuf::uint8* ProviderMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ProviderMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.ProviderOriginInfo origin_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_info_, deterministic, target);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mixer_info_, deterministic, target);
  }

  // optional .cosmo.pb.Metrics metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->metrics_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ProviderMetaInfo)
  return target;
}

size_t ProviderMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ProviderMetaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .recostream.pb.ProviderOriginInfo origin_info = 1;
    if (has_origin_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_info_);
    }

    // optional .cosmo.pb.MixerInfo mixer_info = 2;
    if (has_mixer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mixer_info_);
    }

    // optional .cosmo.pb.Metrics metrics = 3;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProviderMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ProviderMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProviderMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ProviderMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ProviderMetaInfo)
    MergeFrom(*source);
  }
}

void ProviderMetaInfo::MergeFrom(const ProviderMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ProviderMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin_info()->::recostream::pb::ProviderOriginInfo::MergeFrom(from.origin_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mixer_info()->::cosmo::pb::MixerInfo::MergeFrom(from.mixer_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_metrics()->::cosmo::pb::Metrics::MergeFrom(from.metrics());
    }
  }
}

void ProviderMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ProviderMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderMetaInfo::CopyFrom(const ProviderMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ProviderMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderMetaInfo::IsInitialized() const {
  if (has_origin_info()) {
    if (!this->origin_info_->IsInitialized()) return false;
  }
  if (has_mixer_info()) {
    if (!this->mixer_info_->IsInitialized()) return false;
  }
  if (has_metrics()) {
    if (!this->metrics_->IsInitialized()) return false;
  }
  return true;
}

void ProviderMetaInfo::Swap(ProviderMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderMetaInfo::InternalSwap(ProviderMetaInfo* other) {
  using std::swap;
  swap(origin_info_, other->origin_info_);
  swap(mixer_info_, other->mixer_info_);
  swap(metrics_, other->metrics_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProviderMetaInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProviderMetaInfo

// optional .recostream.pb.ProviderOriginInfo origin_info = 1;
bool ProviderMetaInfo::has_origin_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProviderMetaInfo::set_has_origin_info() {
  _has_bits_[0] |= 0x00000001u;
}
void ProviderMetaInfo::clear_has_origin_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProviderMetaInfo::clear_origin_info() {
  if (origin_info_ != NULL) origin_info_->::recostream::pb::ProviderOriginInfo::Clear();
  clear_has_origin_info();
}
const ::recostream::pb::ProviderOriginInfo& ProviderMetaInfo::origin_info() const {
  const ::recostream::pb::ProviderOriginInfo* p = origin_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderMetaInfo.origin_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::ProviderOriginInfo*>(
      &::recostream::pb::_ProviderOriginInfo_default_instance_);
}
::recostream::pb::ProviderOriginInfo* ProviderMetaInfo::mutable_origin_info() {
  set_has_origin_info();
  if (origin_info_ == NULL) {
    origin_info_ = new ::recostream::pb::ProviderOriginInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderMetaInfo.origin_info)
  return origin_info_;
}
::recostream::pb::ProviderOriginInfo* ProviderMetaInfo::release_origin_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderMetaInfo.origin_info)
  clear_has_origin_info();
  ::recostream::pb::ProviderOriginInfo* temp = origin_info_;
  origin_info_ = NULL;
  return temp;
}
void ProviderMetaInfo::set_allocated_origin_info(::recostream::pb::ProviderOriginInfo* origin_info) {
  delete origin_info_;
  origin_info_ = origin_info;
  if (origin_info) {
    set_has_origin_info();
  } else {
    clear_has_origin_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderMetaInfo.origin_info)
}

// optional .cosmo.pb.MixerInfo mixer_info = 2;
bool ProviderMetaInfo::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProviderMetaInfo::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ProviderMetaInfo::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProviderMetaInfo::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
const ::cosmo::pb::MixerInfo& ProviderMetaInfo::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderMetaInfo.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
::cosmo::pb::MixerInfo* ProviderMetaInfo::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderMetaInfo.mixer_info)
  return mixer_info_;
}
::cosmo::pb::MixerInfo* ProviderMetaInfo::release_mixer_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderMetaInfo.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
void ProviderMetaInfo::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderMetaInfo.mixer_info)
}

// optional .cosmo.pb.Metrics metrics = 3;
bool ProviderMetaInfo::has_metrics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProviderMetaInfo::set_has_metrics() {
  _has_bits_[0] |= 0x00000004u;
}
void ProviderMetaInfo::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProviderMetaInfo::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
const ::cosmo::pb::Metrics& ProviderMetaInfo::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderMetaInfo.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
::cosmo::pb::Metrics* ProviderMetaInfo::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderMetaInfo.metrics)
  return metrics_;
}
::cosmo::pb::Metrics* ProviderMetaInfo::release_metrics() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderMetaInfo.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void ProviderMetaInfo::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderMetaInfo.metrics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultMetaInfo::kProvidersFieldNumber;
const int ResultMetaInfo::kFromLabelFieldNumber;
const int ResultMetaInfo::kUserInfoFieldNumber;
const int ResultMetaInfo::kAdvertSitenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultMetaInfo::ResultMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ResultMetaInfo)
}
ResultMetaInfo::ResultMetaInfo(const ResultMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_label()) {
    from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::recostream::pb::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  advert_sitename_ = from.advert_sitename_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ResultMetaInfo)
}

void ResultMetaInfo::SharedCtor() {
  _cached_size_ = 0;
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advert_sitename_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(advert_sitename_));
}

ResultMetaInfo::~ResultMetaInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.ResultMetaInfo)
  SharedDtor();
}

void ResultMetaInfo::SharedDtor() {
  from_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void ResultMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultMetaInfo::descriptor() {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultMetaInfo& ResultMetaInfo::default_instance() {
  protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultMetaInfo* ResultMetaInfo::New(::google::protobuf::Arena* arena) const {
  ResultMetaInfo* n = new ResultMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ResultMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->::recostream::pb::UserInfo::Clear();
    }
  }
  advert_sitename_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ResultMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .recostream.pb.ProviderMetaInfo providers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_providers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_label().data(), static_cast<int>(this->from_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ResultMetaInfo.from_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.UserInfo user_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 advert_sitename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_advert_sitename();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &advert_sitename_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ResultMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ResultMetaInfo)
  return false;
#undef DO_
}

void ResultMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ResultMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProviderMetaInfo providers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->providers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->providers(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string from_label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultMetaInfo.from_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_label(), output);
  }

  // optional .recostream.pb.UserInfo user_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->user_info_, output);
  }

  // optional int64 advert_sitename = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->advert_sitename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ResultMetaInfo)
}

::google::protobuf::uint8* ResultMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ResultMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProviderMetaInfo providers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->providers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->providers(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string from_label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultMetaInfo.from_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_label(), target);
  }

  // optional .recostream.pb.UserInfo user_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->user_info_, deterministic, target);
  }

  // optional int64 advert_sitename = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->advert_sitename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ResultMetaInfo)
  return target;
}

size_t ResultMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ResultMetaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .recostream.pb.ProviderMetaInfo providers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->providers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string from_label = 2;
    if (has_from_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_label());
    }

    // optional .recostream.pb.UserInfo user_info = 3;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_info_);
    }

    // optional int64 advert_sitename = 4;
    if (has_advert_sitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->advert_sitename());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ResultMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ResultMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ResultMetaInfo)
    MergeFrom(*source);
  }
}

void ResultMetaInfo::MergeFrom(const ResultMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ResultMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_label();
      from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_info()->::recostream::pb::UserInfo::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000004u) {
      advert_sitename_ = from.advert_sitename_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ResultMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultMetaInfo::CopyFrom(const ResultMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ResultMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultMetaInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->providers())) return false;
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void ResultMetaInfo::Swap(ResultMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultMetaInfo::InternalSwap(ResultMetaInfo* other) {
  using std::swap;
  providers_.InternalSwap(&other->providers_);
  from_label_.Swap(&other->from_label_);
  swap(user_info_, other->user_info_);
  swap(advert_sitename_, other->advert_sitename_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultMetaInfo::GetMetadata() const {
  protobuf_recostream_5fpixel_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fpixel_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultMetaInfo

// repeated .recostream.pb.ProviderMetaInfo providers = 1;
int ResultMetaInfo::providers_size() const {
  return providers_.size();
}
void ResultMetaInfo::clear_providers() {
  providers_.Clear();
}
const ::recostream::pb::ProviderMetaInfo& ResultMetaInfo::providers(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultMetaInfo.providers)
  return providers_.Get(index);
}
::recostream::pb::ProviderMetaInfo* ResultMetaInfo::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultMetaInfo.providers)
  return providers_.Mutable(index);
}
::recostream::pb::ProviderMetaInfo* ResultMetaInfo::add_providers() {
  // @@protoc_insertion_point(field_add:recostream.pb.ResultMetaInfo.providers)
  return providers_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderMetaInfo >*
ResultMetaInfo::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ResultMetaInfo.providers)
  return &providers_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderMetaInfo >&
ResultMetaInfo::providers() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ResultMetaInfo.providers)
  return providers_;
}

// optional string from_label = 2;
bool ResultMetaInfo::has_from_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultMetaInfo::set_has_from_label() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultMetaInfo::clear_has_from_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultMetaInfo::clear_from_label() {
  from_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_label();
}
const ::std::string& ResultMetaInfo::from_label() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultMetaInfo.from_label)
  return from_label_.GetNoArena();
}
void ResultMetaInfo::set_from_label(const ::std::string& value) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultMetaInfo.from_label)
}
#if LANG_CXX11
void ResultMetaInfo::set_from_label(::std::string&& value) {
  set_has_from_label();
  from_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ResultMetaInfo.from_label)
}
#endif
void ResultMetaInfo::set_from_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ResultMetaInfo.from_label)
}
void ResultMetaInfo::set_from_label(const char* value, size_t size) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ResultMetaInfo.from_label)
}
::std::string* ResultMetaInfo::mutable_from_label() {
  set_has_from_label();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultMetaInfo.from_label)
  return from_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultMetaInfo::release_from_label() {
  // @@protoc_insertion_point(field_release:recostream.pb.ResultMetaInfo.from_label)
  clear_has_from_label();
  return from_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultMetaInfo::set_allocated_from_label(::std::string* from_label) {
  if (from_label != NULL) {
    set_has_from_label();
  } else {
    clear_has_from_label();
  }
  from_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_label);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ResultMetaInfo.from_label)
}

// optional .recostream.pb.UserInfo user_info = 3;
bool ResultMetaInfo::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResultMetaInfo::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ResultMetaInfo::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResultMetaInfo::clear_user_info() {
  if (user_info_ != NULL) user_info_->::recostream::pb::UserInfo::Clear();
  clear_has_user_info();
}
const ::recostream::pb::UserInfo& ResultMetaInfo::user_info() const {
  const ::recostream::pb::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.ResultMetaInfo.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::UserInfo*>(
      &::recostream::pb::_UserInfo_default_instance_);
}
::recostream::pb::UserInfo* ResultMetaInfo::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::recostream::pb::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultMetaInfo.user_info)
  return user_info_;
}
::recostream::pb::UserInfo* ResultMetaInfo::release_user_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.ResultMetaInfo.user_info)
  clear_has_user_info();
  ::recostream::pb::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void ResultMetaInfo::set_allocated_user_info(::recostream::pb::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ResultMetaInfo.user_info)
}

// optional int64 advert_sitename = 4;
bool ResultMetaInfo::has_advert_sitename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResultMetaInfo::set_has_advert_sitename() {
  _has_bits_[0] |= 0x00000004u;
}
void ResultMetaInfo::clear_has_advert_sitename() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResultMetaInfo::clear_advert_sitename() {
  advert_sitename_ = GOOGLE_LONGLONG(0);
  clear_has_advert_sitename();
}
::google::protobuf::int64 ResultMetaInfo::advert_sitename() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultMetaInfo.advert_sitename)
  return advert_sitename_;
}
void ResultMetaInfo::set_advert_sitename(::google::protobuf::int64 value) {
  set_has_advert_sitename();
  advert_sitename_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultMetaInfo.advert_sitename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace recostream

// @@protoc_insertion_point(global_scope)
