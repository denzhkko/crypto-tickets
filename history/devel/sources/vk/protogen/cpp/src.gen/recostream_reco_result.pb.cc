// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recostream_reco_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recostream_reco_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace recostream {
namespace pb {
class DocumentImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentImage>
     _instance;
} _DocumentImage_default_instance_;
class DocumentPixelsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentPixels>
     _instance;
} _DocumentPixels_default_instance_;
class SourceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceInfo>
     _instance;
} _SourceInfo_default_instance_;
class PulseVideosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PulseVideos>
     _instance;
} _PulseVideos_default_instance_;
class PulseVideoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PulseVideo>
     _instance;
} _PulseVideo_default_instance_;
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
} _Document_default_instance_;
class AdvertDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Advert>
     _instance;
} _Advert_default_instance_;
class RecoResultItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecoResultItem>
     _instance;
  const ::recostream::pb::Document* document_;
  const ::recostream::pb::Advert* advert_;
} _RecoResultItem_default_instance_;
class ProviderDebugInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProviderDebugInfo>
     _instance;
  const ::cosmo::pb::DebugInfo* cosmo_info_;
} _ProviderDebugInfo_default_instance_;
class DebugInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DebugInfo>
     _instance;
} _DebugInfo_default_instance_;
class RankedSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankedSources>
     _instance;
} _RankedSources_default_instance_;
class RankedCategoriesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankedCategories>
     _instance;
} _RankedCategories_default_instance_;
class RecoResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecoResult>
     _instance;
} _RecoResult_default_instance_;
class PackedRecoResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackedRecoResult>
     _instance;
} _PackedRecoResult_default_instance_;
class SavedPromoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SavedPromoInfo>
     _instance;
} _SavedPromoInfo_default_instance_;

namespace protobuf_recostream_5freco_5fresult_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, mb_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, img_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentImage, tags_),
  4,
  5,
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPixels, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPixels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPixels, show_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPixels, click_pixels_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, favicon_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, favicon_base64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, subscribed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, short_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceInfo, type_),
  0,
  1,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideos, main_video_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, video_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PulseVideo, duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, snippet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, is_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, amp_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, slug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, videos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, redirect_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, external_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, advert_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, mapping_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, erid_),
  11,
  12,
  0,
  1,
  2,
  ~0u,
  13,
  14,
  9,
  15,
  3,
  4,
  10,
  5,
  6,
  16,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, banner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, snippet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, disclaimer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, age_restrictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, about_company_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, advert_template_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, raw_json_answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, domain_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, is_native_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advert, inn_),
  11,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  10,
  5,
  6,
  7,
  8,
  12,
  13,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RecoResultItemDefaultTypeInternal, document_),
  offsetof(RecoResultItemDefaultTypeInternal, advert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, meta_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, serve_notice_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResultItem, value_),
  ~0u,
  ~0u,
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ProviderDebugInfoDefaultTypeInternal, cosmo_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProviderDebugInfo, value_),
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, providers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedSources, sources_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedCategories, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedCategories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedCategories, categories_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, meta_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, ranked_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoResult, ranked_categories_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackedRecoResult, reco_result_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, readup_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, redirect_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, pulse_utm_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, id_ac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, rub_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedPromoInfo, user_geo_),
  ~0u,
  ~0u,
  0,
  3,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(DocumentImage)},
  { 19, 26, sizeof(DocumentPixels)},
  { 28, 39, sizeof(SourceInfo)},
  { 45, 51, sizeof(PulseVideos)},
  { 52, 59, sizeof(PulseVideo)},
  { 61, 84, sizeof(Document)},
  { 102, 122, sizeof(Advert)},
  { 137, 148, sizeof(RecoResultItem)},
  { 153, 162, sizeof(ProviderDebugInfo)},
  { 165, 171, sizeof(DebugInfo)},
  { 172, 178, sizeof(RankedSources)},
  { 179, 185, sizeof(RankedCategories)},
  { 186, 196, sizeof(RecoResult)},
  { 201, 210, sizeof(PackedRecoResult)},
  { 214, 225, sizeof(SavedPromoInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentPixels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PulseVideos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PulseVideo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Advert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecoResultItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProviderDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankedSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankedCategories_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackedRecoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SavedPromoInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "recostream_reco_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::recostream::pb::protobuf_recostream_5fpixel_5finfo_2eproto::InitDefaults();
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::InitDefaults();
  _DocumentImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentImage_default_instance_);_DocumentPixels_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentPixels_default_instance_);_SourceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceInfo_default_instance_);_PulseVideos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PulseVideos_default_instance_);_PulseVideo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PulseVideo_default_instance_);_Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_Advert_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Advert_default_instance_);_RecoResultItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecoResultItem_default_instance_);_ProviderDebugInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProviderDebugInfo_default_instance_);_DebugInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DebugInfo_default_instance_);_RankedSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankedSources_default_instance_);_RankedCategories_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankedCategories_default_instance_);_RecoResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecoResult_default_instance_);_PackedRecoResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackedRecoResult_default_instance_);_SavedPromoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SavedPromoInfo_default_instance_);_PulseVideos_default_instance_._instance.get_mutable()->main_video_ = const_cast< ::recostream::pb::PulseVideo*>(
      ::recostream::pb::PulseVideo::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->source_info_ = const_cast< ::recostream::pb::SourceInfo*>(
      ::recostream::pb::SourceInfo::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->videos_ = const_cast< ::recostream::pb::PulseVideos*>(
      ::recostream::pb::PulseVideos::internal_default_instance());
  _Advert_default_instance_._instance.get_mutable()->pixels_ = const_cast< ::recostream::pb::DocumentPixels*>(
      ::recostream::pb::DocumentPixels::internal_default_instance());
  _RecoResultItem_default_instance_.document_ = const_cast< ::recostream::pb::Document*>(
      ::recostream::pb::Document::internal_default_instance());
  _RecoResultItem_default_instance_.advert_ = const_cast< ::recostream::pb::Advert*>(
      ::recostream::pb::Advert::internal_default_instance());
  _RecoResultItem_default_instance_._instance.get_mutable()->meta_info_ = const_cast< ::recostream::pb::DocumentMetaInfo*>(
      ::recostream::pb::DocumentMetaInfo::internal_default_instance());
  _ProviderDebugInfo_default_instance_.cosmo_info_ = const_cast< ::cosmo::pb::DebugInfo*>(
      ::cosmo::pb::DebugInfo::internal_default_instance());
  _RecoResult_default_instance_._instance.get_mutable()->meta_info_ = const_cast< ::recostream::pb::ResultMetaInfo*>(
      ::recostream::pb::ResultMetaInfo::internal_default_instance());
  _RecoResult_default_instance_._instance.get_mutable()->debug_info_ = const_cast< ::recostream::pb::DebugInfo*>(
      ::recostream::pb::DebugInfo::internal_default_instance());
  _RecoResult_default_instance_._instance.get_mutable()->ranked_sources_ = const_cast< ::recostream::pb::RankedSources*>(
      ::recostream::pb::RankedSources::internal_default_instance());
  _RecoResult_default_instance_._instance.get_mutable()->ranked_categories_ = const_cast< ::recostream::pb::RankedCategories*>(
      ::recostream::pb::RankedCategories::internal_default_instance());
  _PackedRecoResult_default_instance_._instance.get_mutable()->reco_result_ = const_cast< ::recostream::pb::RecoResult*>(
      ::recostream::pb::RecoResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034recostream_reco_result.proto\022\rrecostre"
      "am.pb\032\033recostream_pixel_info.proto\032\022cosm"
      "o_result.proto\"x\n\rDocumentImage\022\r\n\005width"
      "\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\013\n\003url\030\003 \002(\t\022\013\n\003k"
      "ey\030\004 \002(\t\022\017\n\007mb_name\030\005 \002(\t\022\017\n\007img_url\030\006 \001"
      "(\t\022\014\n\004tags\030\007 \003(\t\";\n\016DocumentPixels\022\023\n\013sh"
      "ow_pixels\030\001 \003(\t\022\024\n\014click_pixels\030\002 \003(\t\"\177\n"
      "\nSourceInfo\022\r\n\005title\030\001 \001(\t\022\023\n\013favicon_ur"
      "l\030\002 \001(\t\022\026\n\016favicon_base64\030\003 \001(\t\022\022\n\nsubsc"
      "ribed\030\004 \001(\010\022\023\n\013short_title\030\005 \001(\t\022\014\n\004type"
      "\030\006 \001(\t\"<\n\013PulseVideos\022-\n\nmain_video\030\001 \002("
      "\0132\031.recostream.pb.PulseVideo\"1\n\nPulseVid"
      "eo\022\021\n\tvideo_url\030\001 \002(\t\022\020\n\010duration\030\002 \001(\005\""
      "\271\003\n\010Document\022\016\n\006doc_id\030\001 \002(\003\022\021\n\tsource_i"
      "d\030\002 \002(\003\022\017\n\007snippet\030\003 \002(\t\022\r\n\005title\030\004 \002(\t\022"
      "\013\n\003url\030\005 \002(\t\022,\n\006images\030\006 \003(\0132\034.recostrea"
      "m.pb.DocumentImage\022\021\n\tsite_hash\030\007 \002(\003\022%\n"
      "\004type\030\010 \001(\0162\027.cosmo.pb.Document.Type\022.\n\013"
      "source_info\030\t \001(\0132\031.recostream.pb.Source"
      "Info\022\023\n\013is_fulltext\030\n \001(\010\022\017\n\007amp_url\030\013 \001"
      "(\t\022\014\n\004slug\030\014 \001(\t\022*\n\006videos\030\r \001(\0132\032.recos"
      "tream.pb.PulseVideos\022\024\n\014redirect_url\030\016 \001"
      "(\t\022\024\n\014external_url\030\017 \001(\t\022\025\n\radvert_doc_i"
      "d\030\020 \001(\r\022\024\n\014mapping_date\030\021 \001(\t\022\014\n\004erid\030\022 "
      "\001(\t\"\342\002\n\006Advert\022\021\n\tbanner_id\030\001 \002(\005\022\r\n\005tit"
      "le\030\002 \002(\t\022\017\n\007snippet\030\003 \002(\t\022\013\n\003url\030\004 \002(\t\022\022"
      "\n\ndisclaimer\030\005 \001(\t\022\030\n\020age_restrictions\030\006"
      " \001(\t\022,\n\006images\030\007 \003(\0132\034.recostream.pb.Doc"
      "umentImage\022-\n\006pixels\030\010 \001(\0132\035.recostream."
      "pb.DocumentPixels\022\025\n\rabout_company\030\t \001(\t"
      "\022\032\n\022advert_template_id\030\n \001(\t\022\027\n\017raw_json"
      "_answer\030\013 \001(\t\022\023\n\013domain_name\030\014 \001(\t\022\021\n\tis"
      "_native\030\r \001(\010\022\014\n\004size\030\016 \001(\005\022\013\n\003inn\030\017 \001(\t"
      "\"\313\001\n\016RecoResultItem\022+\n\010document\030e \001(\0132\027."
      "recostream.pb.DocumentH\000\022\'\n\006advert\030f \001(\013"
      "2\025.recostream.pb.AdvertH\000\022\014\n\004hash\030\001 \001(\003\022"
      "2\n\tmeta_info\030\002 \001(\0132\037.recostream.pb.Docum"
      "entMetaInfo\022\030\n\020serve_notice_url\030\036 \003(\tB\007\n"
      "\005value\"v\n\021ProviderDebugInfo\022)\n\ncosmo_inf"
      "o\030e \001(\0132\023.cosmo.pb.DebugInfoH\000\022\014\n\004name\030\001"
      " \001(\t\022\037\n\006errors\030\002 \003(\0132\017.cosmo.pb.ErrorB\007\n"
      "\005value\"@\n\tDebugInfo\0223\n\tproviders\030\001 \003(\0132 "
      ".recostream.pb.ProviderDebugInfo\"2\n\rRank"
      "edSources\022!\n\007sources\030\001 \003(\0132\020.cosmo.pb.So"
      "urce\":\n\020RankedCategories\022&\n\ncategories\030\001"
      " \003(\0132\022.cosmo.pb.Category\"\214\002\n\nRecoResult\022"
      "0\n\tmeta_info\030\002 \001(\0132\035.recostream.pb.Resul"
      "tMetaInfo\022,\n\005items\030\003 \003(\0132\035.recostream.pb"
      ".RecoResultItem\022,\n\ndebug_info\030\004 \001(\0132\030.re"
      "costream.pb.DebugInfo\0224\n\016ranked_sources\030"
      "\005 \001(\0132\034.recostream.pb.RankedSources\022:\n\021r"
      "anked_categories\030\006 \001(\0132\037.recostream.pb.R"
      "ankedCategories\"v\n\020PackedRecoResult\022\021\n\ts"
      "tream_id\030\001 \002(\t\022\014\n\004hash\030\002 \002(\t\022\021\n\ttimestam"
      "p\030\003 \002(\003\022.\n\013reco_result\030\004 \002(\0132\031.recostrea"
      "m.pb.RecoResult\"\216\001\n\016SavedPromoInfo\022\025\n\rre"
      "adup_pixels\030\001 \003(\t\022\027\n\017redirect_pixels\030\002 \003"
      "(\t\022\030\n\020pulse_utm_labels\030\n \001(\t\022\r\n\005id_ac\030\013 "
      "\001(\003\022\021\n\trub_price\030\014 \001(\t\022\020\n\010user_geo\030\r \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recostream_reco_result.proto", &protobuf_RegisterTypes);
  ::recostream::pb::protobuf_recostream_5fpixel_5finfo_2eproto::AddDescriptors();
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_recostream_5freco_5fresult_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentImage::kWidthFieldNumber;
const int DocumentImage::kHeightFieldNumber;
const int DocumentImage::kUrlFieldNumber;
const int DocumentImage::kKeyFieldNumber;
const int DocumentImage::kMbNameFieldNumber;
const int DocumentImage::kImgUrlFieldNumber;
const int DocumentImage::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentImage::DocumentImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.DocumentImage)
}
DocumentImage::DocumentImage(const DocumentImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  mb_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mb_name()) {
    mb_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mb_name_);
  }
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img_url()) {
    img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.DocumentImage)
}

void DocumentImage::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mb_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

DocumentImage::~DocumentImage() {
  // @@protoc_insertion_point(destructor:recostream.pb.DocumentImage)
  SharedDtor();
}

void DocumentImage::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mb_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocumentImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentImage::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentImage& DocumentImage::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentImage* DocumentImage::New(::google::protobuf::Arena* arena) const {
  DocumentImage* n = new DocumentImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentImage::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.DocumentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!mb_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mb_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!img_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*img_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.DocumentImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentImage.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentImage.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string mb_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mb_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mb_name().data(), static_cast<int>(this->mb_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentImage.mb_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string img_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_url().data(), static_cast<int>(this->img_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentImage.img_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentImage.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.DocumentImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.DocumentImage)
  return false;
#undef DO_
}

void DocumentImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.DocumentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // required string key = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key(), output);
  }

  // required string mb_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mb_name().data(), static_cast<int>(this->mb_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.mb_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mb_name(), output);
  }

  // optional string img_url = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->img_url(), output);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.DocumentImage)
}

::google::protobuf::uint8* DocumentImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.DocumentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // required string key = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // required string mb_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mb_name().data(), static_cast<int>(this->mb_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.mb_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mb_name(), target);
  }

  // optional string img_url = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), static_cast<int>(this->img_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->img_url(), target);
  }

  // repeated string tags = 7;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentImage.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.DocumentImage)
  return target;
}

size_t DocumentImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.DocumentImage)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_key()) {
    // required string key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_mb_name()) {
    // required string mb_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mb_name());
  }

  if (has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
size_t DocumentImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.DocumentImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string mb_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mb_name());

    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string tags = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // optional string img_url = 6;
  if (has_img_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.DocumentImage)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.DocumentImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.DocumentImage)
    MergeFrom(*source);
  }
}

void DocumentImage::MergeFrom(const DocumentImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.DocumentImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mb_name();
      mb_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mb_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_img_url();
      img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.DocumentImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentImage::CopyFrom(const DocumentImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.DocumentImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  return true;
}

void DocumentImage::Swap(DocumentImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentImage::InternalSwap(DocumentImage* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  url_.Swap(&other->url_);
  key_.Swap(&other->key_);
  mb_name_.Swap(&other->mb_name_);
  img_url_.Swap(&other->img_url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentImage::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentImage

// required int32 width = 1;
bool DocumentImage::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentImage::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 DocumentImage::width() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.width)
  return width_;
}
void DocumentImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.width)
}

// required int32 height = 2;
bool DocumentImage::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentImage::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 DocumentImage::height() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.height)
  return height_;
}
void DocumentImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.height)
}

// required string url = 3;
bool DocumentImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& DocumentImage::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.url)
  return url_.GetNoArena();
}
void DocumentImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.url)
}
#if LANG_CXX11
void DocumentImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.url)
}
#endif
void DocumentImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.url)
}
void DocumentImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.url)
}
::std::string* DocumentImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentImage::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.url)
}

// required string key = 4;
bool DocumentImage::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentImage::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentImage::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentImage::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& DocumentImage::key() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.key)
  return key_.GetNoArena();
}
void DocumentImage::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.key)
}
#if LANG_CXX11
void DocumentImage::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.key)
}
#endif
void DocumentImage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.key)
}
void DocumentImage::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.key)
}
::std::string* DocumentImage::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentImage::release_key() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentImage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.key)
}

// required string mb_name = 5;
bool DocumentImage::has_mb_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentImage::set_has_mb_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentImage::clear_has_mb_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentImage::clear_mb_name() {
  mb_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mb_name();
}
const ::std::string& DocumentImage::mb_name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.mb_name)
  return mb_name_.GetNoArena();
}
void DocumentImage::set_mb_name(const ::std::string& value) {
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.mb_name)
}
#if LANG_CXX11
void DocumentImage::set_mb_name(::std::string&& value) {
  set_has_mb_name();
  mb_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.mb_name)
}
#endif
void DocumentImage::set_mb_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.mb_name)
}
void DocumentImage::set_mb_name(const char* value, size_t size) {
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.mb_name)
}
::std::string* DocumentImage::mutable_mb_name() {
  set_has_mb_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.mb_name)
  return mb_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentImage::release_mb_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.mb_name)
  clear_has_mb_name();
  return mb_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentImage::set_allocated_mb_name(::std::string* mb_name) {
  if (mb_name != NULL) {
    set_has_mb_name();
  } else {
    clear_has_mb_name();
  }
  mb_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.mb_name)
}

// optional string img_url = 6;
bool DocumentImage::has_img_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentImage::set_has_img_url() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentImage::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentImage::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
const ::std::string& DocumentImage::img_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.img_url)
  return img_url_.GetNoArena();
}
void DocumentImage::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.img_url)
}
#if LANG_CXX11
void DocumentImage::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.img_url)
}
#endif
void DocumentImage::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.img_url)
}
void DocumentImage::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.img_url)
}
::std::string* DocumentImage::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentImage::release_img_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentImage::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.img_url)
}

// repeated string tags = 7;
int DocumentImage::tags_size() const {
  return tags_.size();
}
void DocumentImage::clear_tags() {
  tags_.Clear();
}
const ::std::string& DocumentImage::tags(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.tags)
  return tags_.Get(index);
}
::std::string* DocumentImage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.tags)
  return tags_.Mutable(index);
}
void DocumentImage::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DocumentImage::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void DocumentImage::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.tags)
}
void DocumentImage::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.tags)
}
::std::string* DocumentImage::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentImage.tags)
  return tags_.Add();
}
void DocumentImage::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentImage.tags)
}
#if LANG_CXX11
void DocumentImage::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentImage.tags)
}
#endif
void DocumentImage::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentImage.tags)
}
void DocumentImage::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentImage.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentImage::tags() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentImage.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentImage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentImage.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentPixels::kShowPixelsFieldNumber;
const int DocumentPixels::kClickPixelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentPixels::DocumentPixels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.DocumentPixels)
}
DocumentPixels::DocumentPixels(const DocumentPixels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      show_pixels_(from.show_pixels_),
      click_pixels_(from.click_pixels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.DocumentPixels)
}

void DocumentPixels::SharedCtor() {
  _cached_size_ = 0;
}

DocumentPixels::~DocumentPixels() {
  // @@protoc_insertion_point(destructor:recostream.pb.DocumentPixels)
  SharedDtor();
}

void DocumentPixels::SharedDtor() {
}

void DocumentPixels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentPixels::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentPixels& DocumentPixels::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentPixels* DocumentPixels::New(::google::protobuf::Arena* arena) const {
  DocumentPixels* n = new DocumentPixels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentPixels::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.DocumentPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_pixels_.Clear();
  click_pixels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentPixels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.DocumentPixels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string show_pixels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_show_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_pixels(this->show_pixels_size() - 1).data(),
            static_cast<int>(this->show_pixels(this->show_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentPixels.show_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string click_pixels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_pixels(this->click_pixels_size() - 1).data(),
            static_cast<int>(this->click_pixels(this->click_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.DocumentPixels.click_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.DocumentPixels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.DocumentPixels)
  return false;
#undef DO_
}

void DocumentPixels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.DocumentPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string show_pixels = 1;
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_pixels(i).data(), static_cast<int>(this->show_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentPixels.show_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->show_pixels(i), output);
  }

  // repeated string click_pixels = 2;
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_pixels(i).data(), static_cast<int>(this->click_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentPixels.click_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->click_pixels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.DocumentPixels)
}

::google::protobuf::uint8* DocumentPixels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.DocumentPixels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string show_pixels = 1;
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_pixels(i).data(), static_cast<int>(this->show_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentPixels.show_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->show_pixels(i), target);
  }

  // repeated string click_pixels = 2;
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_pixels(i).data(), static_cast<int>(this->click_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.DocumentPixels.click_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->click_pixels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.DocumentPixels)
  return target;
}

size_t DocumentPixels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.DocumentPixels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string show_pixels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->show_pixels_size());
  for (int i = 0, n = this->show_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->show_pixels(i));
  }

  // repeated string click_pixels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->click_pixels_size());
  for (int i = 0, n = this->click_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_pixels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentPixels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.DocumentPixels)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentPixels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentPixels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.DocumentPixels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.DocumentPixels)
    MergeFrom(*source);
  }
}

void DocumentPixels::MergeFrom(const DocumentPixels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.DocumentPixels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  show_pixels_.MergeFrom(from.show_pixels_);
  click_pixels_.MergeFrom(from.click_pixels_);
}

void DocumentPixels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.DocumentPixels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentPixels::CopyFrom(const DocumentPixels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.DocumentPixels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentPixels::IsInitialized() const {
  return true;
}

void DocumentPixels::Swap(DocumentPixels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentPixels::InternalSwap(DocumentPixels* other) {
  using std::swap;
  show_pixels_.InternalSwap(&other->show_pixels_);
  click_pixels_.InternalSwap(&other->click_pixels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentPixels::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentPixels

// repeated string show_pixels = 1;
int DocumentPixels::show_pixels_size() const {
  return show_pixels_.size();
}
void DocumentPixels::clear_show_pixels() {
  show_pixels_.Clear();
}
const ::std::string& DocumentPixels::show_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Get(index);
}
::std::string* DocumentPixels::mutable_show_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Mutable(index);
}
void DocumentPixels::set_show_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.show_pixels)
  show_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DocumentPixels::set_show_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.show_pixels)
  show_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void DocumentPixels::set_show_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentPixels.show_pixels)
}
void DocumentPixels::set_show_pixels(int index, const char* value, size_t size) {
  show_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentPixels.show_pixels)
}
::std::string* DocumentPixels::add_show_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Add();
}
void DocumentPixels::add_show_pixels(const ::std::string& value) {
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.show_pixels)
}
#if LANG_CXX11
void DocumentPixels::add_show_pixels(::std::string&& value) {
  show_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.show_pixels)
}
#endif
void DocumentPixels::add_show_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentPixels.show_pixels)
}
void DocumentPixels::add_show_pixels(const char* value, size_t size) {
  show_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentPixels.show_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentPixels::show_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentPixels::mutable_show_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentPixels.show_pixels)
  return &show_pixels_;
}

// repeated string click_pixels = 2;
int DocumentPixels::click_pixels_size() const {
  return click_pixels_.size();
}
void DocumentPixels::clear_click_pixels() {
  click_pixels_.Clear();
}
const ::std::string& DocumentPixels::click_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Get(index);
}
::std::string* DocumentPixels::mutable_click_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Mutable(index);
}
void DocumentPixels::set_click_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.click_pixels)
  click_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DocumentPixels::set_click_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.click_pixels)
  click_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void DocumentPixels::set_click_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentPixels.click_pixels)
}
void DocumentPixels::set_click_pixels(int index, const char* value, size_t size) {
  click_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentPixels.click_pixels)
}
::std::string* DocumentPixels::add_click_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Add();
}
void DocumentPixels::add_click_pixels(const ::std::string& value) {
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.click_pixels)
}
#if LANG_CXX11
void DocumentPixels::add_click_pixels(::std::string&& value) {
  click_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.click_pixels)
}
#endif
void DocumentPixels::add_click_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentPixels.click_pixels)
}
void DocumentPixels::add_click_pixels(const char* value, size_t size) {
  click_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentPixels.click_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentPixels::click_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentPixels::mutable_click_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentPixels.click_pixels)
  return &click_pixels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceInfo::kTitleFieldNumber;
const int SourceInfo::kFaviconUrlFieldNumber;
const int SourceInfo::kFaviconBase64FieldNumber;
const int SourceInfo::kSubscribedFieldNumber;
const int SourceInfo::kShortTitleFieldNumber;
const int SourceInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceInfo::SourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.SourceInfo)
}
SourceInfo::SourceInfo(const SourceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon_url()) {
    favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
  }
  favicon_base64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon_base64()) {
    favicon_base64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_base64_);
  }
  short_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_title()) {
    short_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_title_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  subscribed_ = from.subscribed_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.SourceInfo)
}

void SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_base64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribed_ = false;
}

SourceInfo::~SourceInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.SourceInfo)
  SharedDtor();
}

void SourceInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_base64_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceInfo::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceInfo& SourceInfo::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceInfo* SourceInfo::New(::google::protobuf::Arena* arena) const {
  SourceInfo* n = new SourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!favicon_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!favicon_base64_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_base64_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!short_title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*short_title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
  }
  subscribed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SourceInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->favicon_url().data(), static_cast<int>(this->favicon_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SourceInfo.favicon_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon_base64 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_base64()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->favicon_base64().data(), static_cast<int>(this->favicon_base64().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SourceInfo.favicon_base64");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool subscribed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_subscribed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_title().data(), static_cast<int>(this->short_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SourceInfo.short_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SourceInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.SourceInfo)
  return false;
#undef DO_
}

void SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string favicon_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_url().data(), static_cast<int>(this->favicon_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.favicon_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->favicon_url(), output);
  }

  // optional string favicon_base64 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_base64().data(), static_cast<int>(this->favicon_base64().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.favicon_base64");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->favicon_base64(), output);
  }

  // optional bool subscribed = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->subscribed(), output);
  }

  // optional string short_title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_title().data(), static_cast<int>(this->short_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.short_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->short_title(), output);
  }

  // optional string type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.SourceInfo)
}

::google::protobuf::uint8* SourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string favicon_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_url().data(), static_cast<int>(this->favicon_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.favicon_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->favicon_url(), target);
  }

  // optional string favicon_base64 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->favicon_base64().data(), static_cast<int>(this->favicon_base64().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.favicon_base64");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->favicon_base64(), target);
  }

  // optional bool subscribed = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->subscribed(), target);
  }

  // optional string short_title = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_title().data(), static_cast<int>(this->short_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.short_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->short_title(), target);
  }

  // optional string type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SourceInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.SourceInfo)
  return target;
}

size_t SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.SourceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string favicon_url = 2;
    if (has_favicon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional string favicon_base64 = 3;
    if (has_favicon_base64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_base64());
    }

    // optional string short_title = 5;
    if (has_short_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_title());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bool subscribed = 4;
    if (has_subscribed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.SourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.SourceInfo)
    MergeFrom(*source);
  }
}

void SourceInfo::MergeFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_favicon_url();
      favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_favicon_base64();
      favicon_base64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_base64_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_short_title();
      short_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_title_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000020u) {
      subscribed_ = from.subscribed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceInfo::CopyFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceInfo::IsInitialized() const {
  return true;
}

void SourceInfo::Swap(SourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceInfo::InternalSwap(SourceInfo* other) {
  using std::swap;
  title_.Swap(&other->title_);
  favicon_url_.Swap(&other->favicon_url_);
  favicon_base64_.Swap(&other->favicon_base64_);
  short_title_.Swap(&other->short_title_);
  type_.Swap(&other->type_);
  swap(subscribed_, other->subscribed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceInfo::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceInfo

// optional string title = 1;
bool SourceInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& SourceInfo::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.title)
  return title_.GetNoArena();
}
void SourceInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.title)
}
#if LANG_CXX11
void SourceInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.title)
}
#endif
void SourceInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.title)
}
void SourceInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.title)
}
::std::string* SourceInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceInfo::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.title)
}

// optional string favicon_url = 2;
bool SourceInfo::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceInfo::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceInfo::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceInfo::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_url();
}
const ::std::string& SourceInfo::favicon_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.favicon_url)
  return favicon_url_.GetNoArena();
}
void SourceInfo::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.favicon_url)
}
#if LANG_CXX11
void SourceInfo::set_favicon_url(::std::string&& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.favicon_url)
}
#endif
void SourceInfo::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.favicon_url)
}
void SourceInfo::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.favicon_url)
}
::std::string* SourceInfo::mutable_favicon_url() {
  set_has_favicon_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.favicon_url)
  return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceInfo::release_favicon_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.favicon_url)
  clear_has_favicon_url();
  return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceInfo::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url != NULL) {
    set_has_favicon_url();
  } else {
    clear_has_favicon_url();
  }
  favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.favicon_url)
}

// optional string favicon_base64 = 3;
bool SourceInfo::has_favicon_base64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceInfo::set_has_favicon_base64() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceInfo::clear_has_favicon_base64() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceInfo::clear_favicon_base64() {
  favicon_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_base64();
}
const ::std::string& SourceInfo::favicon_base64() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.favicon_base64)
  return favicon_base64_.GetNoArena();
}
void SourceInfo::set_favicon_base64(const ::std::string& value) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.favicon_base64)
}
#if LANG_CXX11
void SourceInfo::set_favicon_base64(::std::string&& value) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.favicon_base64)
}
#endif
void SourceInfo::set_favicon_base64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.favicon_base64)
}
void SourceInfo::set_favicon_base64(const char* value, size_t size) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.favicon_base64)
}
::std::string* SourceInfo::mutable_favicon_base64() {
  set_has_favicon_base64();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.favicon_base64)
  return favicon_base64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceInfo::release_favicon_base64() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.favicon_base64)
  clear_has_favicon_base64();
  return favicon_base64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceInfo::set_allocated_favicon_base64(::std::string* favicon_base64) {
  if (favicon_base64 != NULL) {
    set_has_favicon_base64();
  } else {
    clear_has_favicon_base64();
  }
  favicon_base64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_base64);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.favicon_base64)
}

// optional bool subscribed = 4;
bool SourceInfo::has_subscribed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SourceInfo::set_has_subscribed() {
  _has_bits_[0] |= 0x00000020u;
}
void SourceInfo::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000020u;
}
void SourceInfo::clear_subscribed() {
  subscribed_ = false;
  clear_has_subscribed();
}
bool SourceInfo::subscribed() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.subscribed)
  return subscribed_;
}
void SourceInfo::set_subscribed(bool value) {
  set_has_subscribed();
  subscribed_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.subscribed)
}

// optional string short_title = 5;
bool SourceInfo::has_short_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceInfo::set_has_short_title() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceInfo::clear_has_short_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceInfo::clear_short_title() {
  short_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_title();
}
const ::std::string& SourceInfo::short_title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.short_title)
  return short_title_.GetNoArena();
}
void SourceInfo::set_short_title(const ::std::string& value) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.short_title)
}
#if LANG_CXX11
void SourceInfo::set_short_title(::std::string&& value) {
  set_has_short_title();
  short_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.short_title)
}
#endif
void SourceInfo::set_short_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.short_title)
}
void SourceInfo::set_short_title(const char* value, size_t size) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.short_title)
}
::std::string* SourceInfo::mutable_short_title() {
  set_has_short_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.short_title)
  return short_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceInfo::release_short_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.short_title)
  clear_has_short_title();
  return short_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceInfo::set_allocated_short_title(::std::string* short_title) {
  if (short_title != NULL) {
    set_has_short_title();
  } else {
    clear_has_short_title();
  }
  short_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.short_title)
}

// optional string type = 6;
bool SourceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& SourceInfo::type() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.type)
  return type_.GetNoArena();
}
void SourceInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.type)
}
#if LANG_CXX11
void SourceInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.type)
}
#endif
void SourceInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.type)
}
void SourceInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.type)
}
::std::string* SourceInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceInfo::release_type() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PulseVideos::kMainVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PulseVideos::PulseVideos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.PulseVideos)
}
PulseVideos::PulseVideos(const PulseVideos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_main_video()) {
    main_video_ = new ::recostream::pb::PulseVideo(*from.main_video_);
  } else {
    main_video_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.PulseVideos)
}

void PulseVideos::SharedCtor() {
  _cached_size_ = 0;
  main_video_ = NULL;
}

PulseVideos::~PulseVideos() {
  // @@protoc_insertion_point(destructor:recostream.pb.PulseVideos)
  SharedDtor();
}

void PulseVideos::SharedDtor() {
  if (this != internal_default_instance()) delete main_video_;
}

void PulseVideos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PulseVideos::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PulseVideos& PulseVideos::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

PulseVideos* PulseVideos::New(::google::protobuf::Arena* arena) const {
  PulseVideos* n = new PulseVideos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PulseVideos::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_main_video()) {
    GOOGLE_DCHECK(main_video_ != NULL);
    main_video_->::recostream::pb::PulseVideo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PulseVideos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.PulseVideos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .recostream.pb.PulseVideo main_video = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_video()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.PulseVideos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.PulseVideos)
  return false;
#undef DO_
}

void PulseVideos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .recostream.pb.PulseVideo main_video = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->main_video_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.PulseVideos)
}

::google::protobuf::uint8* PulseVideos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.PulseVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .recostream.pb.PulseVideo main_video = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->main_video_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.PulseVideos)
  return target;
}

size_t PulseVideos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.PulseVideos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .recostream.pb.PulseVideo main_video = 1;
  if (has_main_video()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->main_video_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PulseVideos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.PulseVideos)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseVideos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PulseVideos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.PulseVideos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.PulseVideos)
    MergeFrom(*source);
  }
}

void PulseVideos::MergeFrom(const PulseVideos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.PulseVideos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_main_video()) {
    mutable_main_video()->::recostream::pb::PulseVideo::MergeFrom(from.main_video());
  }
}

void PulseVideos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.PulseVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseVideos::CopyFrom(const PulseVideos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.PulseVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseVideos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_main_video()) {
    if (!this->main_video_->IsInitialized()) return false;
  }
  return true;
}

void PulseVideos::Swap(PulseVideos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PulseVideos::InternalSwap(PulseVideos* other) {
  using std::swap;
  swap(main_video_, other->main_video_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PulseVideos::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PulseVideos

// required .recostream.pb.PulseVideo main_video = 1;
bool PulseVideos::has_main_video() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PulseVideos::set_has_main_video() {
  _has_bits_[0] |= 0x00000001u;
}
void PulseVideos::clear_has_main_video() {
  _has_bits_[0] &= ~0x00000001u;
}
void PulseVideos::clear_main_video() {
  if (main_video_ != NULL) main_video_->::recostream::pb::PulseVideo::Clear();
  clear_has_main_video();
}
const ::recostream::pb::PulseVideo& PulseVideos::main_video() const {
  const ::recostream::pb::PulseVideo* p = main_video_;
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideos.main_video)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PulseVideo*>(
      &::recostream::pb::_PulseVideo_default_instance_);
}
::recostream::pb::PulseVideo* PulseVideos::mutable_main_video() {
  set_has_main_video();
  if (main_video_ == NULL) {
    main_video_ = new ::recostream::pb::PulseVideo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.PulseVideos.main_video)
  return main_video_;
}
::recostream::pb::PulseVideo* PulseVideos::release_main_video() {
  // @@protoc_insertion_point(field_release:recostream.pb.PulseVideos.main_video)
  clear_has_main_video();
  ::recostream::pb::PulseVideo* temp = main_video_;
  main_video_ = NULL;
  return temp;
}
void PulseVideos::set_allocated_main_video(::recostream::pb::PulseVideo* main_video) {
  delete main_video_;
  main_video_ = main_video;
  if (main_video) {
    set_has_main_video();
  } else {
    clear_has_main_video();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PulseVideos.main_video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PulseVideo::kVideoUrlFieldNumber;
const int PulseVideo::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PulseVideo::PulseVideo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.PulseVideo)
}
PulseVideo::PulseVideo(const PulseVideo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_url()) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.PulseVideo)
}

void PulseVideo::SharedCtor() {
  _cached_size_ = 0;
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
}

PulseVideo::~PulseVideo() {
  // @@protoc_insertion_point(destructor:recostream.pb.PulseVideo)
  SharedDtor();
}

void PulseVideo::SharedDtor() {
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PulseVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PulseVideo::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PulseVideo& PulseVideo::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

PulseVideo* PulseVideo::New(::google::protobuf::Arena* arena) const {
  PulseVideo* n = new PulseVideo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PulseVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_video_url()) {
    GOOGLE_DCHECK(!video_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*video_url_.UnsafeRawStringPointer())->clear();
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PulseVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.PulseVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string video_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_url().data(), static_cast<int>(this->video_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.PulseVideo.video_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.PulseVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.PulseVideo)
  return false;
#undef DO_
}

void PulseVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PulseVideo.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video_url(), output);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.PulseVideo)
}

::google::protobuf::uint8* PulseVideo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.PulseVideo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string video_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_url().data(), static_cast<int>(this->video_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PulseVideo.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->video_url(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.PulseVideo)
  return target;
}

size_t PulseVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.PulseVideo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string video_url = 1;
  if (has_video_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }
  // optional int32 duration = 2;
  if (has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PulseVideo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.PulseVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseVideo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PulseVideo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.PulseVideo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.PulseVideo)
    MergeFrom(*source);
  }
}

void PulseVideo::MergeFrom(const PulseVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.PulseVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_video_url();
      video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PulseVideo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.PulseVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseVideo::CopyFrom(const PulseVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.PulseVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PulseVideo::Swap(PulseVideo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PulseVideo::InternalSwap(PulseVideo* other) {
  using std::swap;
  video_url_.Swap(&other->video_url_);
  swap(duration_, other->duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PulseVideo::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PulseVideo

// required string video_url = 1;
bool PulseVideo::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PulseVideo::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PulseVideo::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PulseVideo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
const ::std::string& PulseVideo::video_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideo.video_url)
  return video_url_.GetNoArena();
}
void PulseVideo::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PulseVideo.video_url)
}
#if LANG_CXX11
void PulseVideo::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PulseVideo.video_url)
}
#endif
void PulseVideo::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PulseVideo.video_url)
}
void PulseVideo::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PulseVideo.video_url)
}
::std::string* PulseVideo::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PulseVideo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PulseVideo::release_video_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.PulseVideo.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PulseVideo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PulseVideo.video_url)
}

// optional int32 duration = 2;
bool PulseVideo::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PulseVideo::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void PulseVideo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void PulseVideo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 PulseVideo::duration() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideo.duration)
  return duration_;
}
void PulseVideo::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PulseVideo.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kDocIdFieldNumber;
const int Document::kSourceIdFieldNumber;
const int Document::kSnippetFieldNumber;
const int Document::kTitleFieldNumber;
const int Document::kUrlFieldNumber;
const int Document::kImagesFieldNumber;
const int Document::kSiteHashFieldNumber;
const int Document::kTypeFieldNumber;
const int Document::kSourceInfoFieldNumber;
const int Document::kIsFulltextFieldNumber;
const int Document::kAmpUrlFieldNumber;
const int Document::kSlugFieldNumber;
const int Document::kVideosFieldNumber;
const int Document::kRedirectUrlFieldNumber;
const int Document::kExternalUrlFieldNumber;
const int Document::kAdvertDocIdFieldNumber;
const int Document::kMappingDateFieldNumber;
const int Document::kEridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amp_url()) {
    amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
  }
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_slug()) {
    slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_url()) {
    redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
  }
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_url()) {
    external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
  }
  mapping_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mapping_date()) {
    mapping_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapping_date_);
  }
  erid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_erid()) {
    erid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.erid_);
  }
  if (from.has_source_info()) {
    source_info_ = new ::recostream::pb::SourceInfo(*from.source_info_);
  } else {
    source_info_ = NULL;
  }
  if (from.has_videos()) {
    videos_ = new ::recostream::pb::PulseVideos(*from.videos_);
  } else {
    videos_ = NULL;
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&advert_doc_id_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(advert_doc_id_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  erid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advert_doc_id_) -
      reinterpret_cast<char*>(&source_info_)) + sizeof(advert_doc_id_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:recostream.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapping_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  erid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_info_;
  if (this != internal_default_instance()) delete videos_;
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snippet_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!amp_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amp_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!slug_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*slug_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!external_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*external_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!mapping_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mapping_date_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!erid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*erid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(source_info_ != NULL);
      source_info_->::recostream::pb::SourceInfo::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(videos_ != NULL);
      videos_->::recostream::pb::PulseVideos::Clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_fulltext_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(is_fulltext_));
  }
  advert_doc_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string snippet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .recostream.pb.DocumentImage images = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 site_hash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Document.Type type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::Document_Type_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::Document_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.SourceInfo source_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fulltext = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amp_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->amp_url().data(), static_cast<int>(this->amp_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.amp_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string slug = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slug().data(), static_cast<int>(this->slug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.slug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.PulseVideos videos = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_url = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_url().data(), static_cast<int>(this->redirect_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.redirect_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_url = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_url().data(), static_cast<int>(this->external_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.external_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 advert_doc_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_advert_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advert_doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mapping_date = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapping_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapping_date().data(), static_cast<int>(this->mapping_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.mapping_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string erid = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_erid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->erid().data(), static_cast<int>(this->erid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Document.erid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // required int64 source_id = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->source_id(), output);
  }

  // required string snippet = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snippet(), output);
  }

  // required string title = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // repeated .recostream.pb.DocumentImage images = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->images(static_cast<int>(i)), output);
  }

  // required int64 site_hash = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->site_hash(), output);
  }

  // optional .cosmo.pb.Document.Type type = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional .recostream.pb.SourceInfo source_info = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->source_info_, output);
  }

  // optional bool is_fulltext = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_fulltext(), output);
  }

  // optional string amp_url = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp_url().data(), static_cast<int>(this->amp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.amp_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->amp_url(), output);
  }

  // optional string slug = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slug().data(), static_cast<int>(this->slug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.slug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->slug(), output);
  }

  // optional .recostream.pb.PulseVideos videos = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->videos_, output);
  }

  // optional string redirect_url = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), static_cast<int>(this->redirect_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.redirect_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->redirect_url(), output);
  }

  // optional string external_url = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.external_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->external_url(), output);
  }

  // optional uint32 advert_doc_id = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->advert_doc_id(), output);
  }

  // optional string mapping_date = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapping_date().data(), static_cast<int>(this->mapping_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.mapping_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->mapping_date(), output);
  }

  // optional string erid = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->erid().data(), static_cast<int>(this->erid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.erid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->erid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // required int64 source_id = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->source_id(), target);
  }

  // required string snippet = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snippet(), target);
  }

  // required string title = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // repeated .recostream.pb.DocumentImage images = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->images(static_cast<int>(i)), deterministic, target);
  }

  // required int64 site_hash = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->site_hash(), target);
  }

  // optional .cosmo.pb.Document.Type type = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional .recostream.pb.SourceInfo source_info = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->source_info_, deterministic, target);
  }

  // optional bool is_fulltext = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_fulltext(), target);
  }

  // optional string amp_url = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp_url().data(), static_cast<int>(this->amp_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.amp_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->amp_url(), target);
  }

  // optional string slug = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slug().data(), static_cast<int>(this->slug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.slug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->slug(), target);
  }

  // optional .recostream.pb.PulseVideos videos = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->videos_, deterministic, target);
  }

  // optional string redirect_url = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_url().data(), static_cast<int>(this->redirect_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.redirect_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->redirect_url(), target);
  }

  // optional string external_url = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_url().data(), static_cast<int>(this->external_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.external_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->external_url(), target);
  }

  // optional uint32 advert_doc_id = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->advert_doc_id(), target);
  }

  // optional string mapping_date = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapping_date().data(), static_cast<int>(this->mapping_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.mapping_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mapping_date(), target);
  }

  // optional string erid = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->erid().data(), static_cast<int>(this->erid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Document.erid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->erid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.Document)
  return target;
}

size_t Document::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.Document)
  size_t total_size = 0;

  if (has_snippet()) {
    // required string snippet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());
  }

  if (has_title()) {
    // required string title = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_doc_id()) {
    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  if (has_source_id()) {
    // required int64 source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_site_hash()) {
    // required int64 site_hash = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->site_hash());
  }

  return total_size;
}
size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.Document)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003807) ^ 0x00003807) == 0) {  // All required fields are present.
    // required string snippet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());

    // required string title = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());

    // required int64 source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int64 site_hash = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->site_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .recostream.pb.DocumentImage images = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string amp_url = 11;
    if (has_amp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp_url());
    }

    // optional string slug = 12;
    if (has_slug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slug());
    }

    // optional string redirect_url = 14;
    if (has_redirect_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_url());
    }

    // optional string external_url = 15;
    if (has_external_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_url());
    }

    // optional string mapping_date = 17;
    if (has_mapping_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapping_date());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string erid = 18;
    if (has_erid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->erid());
    }

    // optional .recostream.pb.SourceInfo source_info = 9;
    if (has_source_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_info_);
    }

    // optional .recostream.pb.PulseVideos videos = 13;
    if (has_videos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->videos_);
    }

  }
  if (_has_bits_[8 / 32] & 49152u) {
    // optional .cosmo.pb.Document.Type type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool is_fulltext = 10;
    if (has_is_fulltext()) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 advert_doc_id = 16;
  if (has_advert_doc_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advert_doc_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_amp_url();
      amp_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_slug();
      slug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slug_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_redirect_url();
      redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_external_url();
      external_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_mapping_date();
      mapping_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapping_date_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_erid();
      erid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.erid_);
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_source_info()->::recostream::pb::SourceInfo::MergeFrom(from.source_info());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_videos()->::recostream::pb::PulseVideos::MergeFrom(from.videos());
    }
    if (cached_has_bits & 0x00000800u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      site_hash_ = from.site_hash_;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_fulltext_ = from.is_fulltext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_advert_doc_id(from.advert_doc_id());
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003807) != 0x00003807) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  if (has_videos()) {
    if (!this->videos_->IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  snippet_.Swap(&other->snippet_);
  title_.Swap(&other->title_);
  url_.Swap(&other->url_);
  amp_url_.Swap(&other->amp_url_);
  slug_.Swap(&other->slug_);
  redirect_url_.Swap(&other->redirect_url_);
  external_url_.Swap(&other->external_url_);
  mapping_date_.Swap(&other->mapping_date_);
  erid_.Swap(&other->erid_);
  swap(source_info_, other->source_info_);
  swap(videos_, other->videos_);
  swap(doc_id_, other->doc_id_);
  swap(source_id_, other->source_id_);
  swap(site_hash_, other->site_hash_);
  swap(type_, other->type_);
  swap(is_fulltext_, other->is_fulltext_);
  swap(advert_doc_id_, other->advert_doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// required int64 doc_id = 1;
bool Document::has_doc_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Document::set_has_doc_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Document::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.doc_id)
  return doc_id_;
}
void Document::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.doc_id)
}

// required int64 source_id = 2;
bool Document::has_source_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Document::set_has_source_id() {
  _has_bits_[0] |= 0x00001000u;
}
void Document::clear_has_source_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void Document::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 Document::source_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.source_id)
  return source_id_;
}
void Document::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.source_id)
}

// required string snippet = 3;
bool Document::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_snippet() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& Document::snippet() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.snippet)
  return snippet_.GetNoArena();
}
void Document::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.snippet)
}
#if LANG_CXX11
void Document::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.snippet)
}
#endif
void Document::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.snippet)
}
void Document::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.snippet)
}
::std::string* Document::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_snippet() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.snippet)
}

// required string title = 4;
bool Document::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Document::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.title)
  return title_.GetNoArena();
}
void Document::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.title)
}
#if LANG_CXX11
void Document::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.title)
}
#endif
void Document::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.title)
}
void Document::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.title)
}
::std::string* Document::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.title)
}

// required string url = 5;
bool Document::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Document::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void Document::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void Document::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Document::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.url)
  return url_.GetNoArena();
}
void Document::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.url)
}
#if LANG_CXX11
void Document::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.url)
}
#endif
void Document::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.url)
}
void Document::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.url)
}
::std::string* Document::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.url)
}

// repeated .recostream.pb.DocumentImage images = 6;
int Document::images_size() const {
  return images_.size();
}
void Document::clear_images() {
  images_.Clear();
}
const ::recostream::pb::DocumentImage& Document::images(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.images)
  return images_.Get(index);
}
::recostream::pb::DocumentImage* Document::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.images)
  return images_.Mutable(index);
}
::recostream::pb::DocumentImage* Document::add_images() {
  // @@protoc_insertion_point(field_add:recostream.pb.Document.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
Document::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.Document.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
Document::images() const {
  // @@protoc_insertion_point(field_list:recostream.pb.Document.images)
  return images_;
}

// required int64 site_hash = 7;
bool Document::has_site_hash() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Document::set_has_site_hash() {
  _has_bits_[0] |= 0x00002000u;
}
void Document::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00002000u;
}
void Document::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 Document::site_hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.site_hash)
  return site_hash_;
}
void Document::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.site_hash)
}

// optional .cosmo.pb.Document.Type type = 8;
bool Document::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Document::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
void Document::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void Document::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
void Document::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.type)
}

// optional .recostream.pb.SourceInfo source_info = 9;
bool Document::has_source_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Document::set_has_source_info() {
  _has_bits_[0] |= 0x00000200u;
}
void Document::clear_has_source_info() {
  _has_bits_[0] &= ~0x00000200u;
}
void Document::clear_source_info() {
  if (source_info_ != NULL) source_info_->::recostream::pb::SourceInfo::Clear();
  clear_has_source_info();
}
const ::recostream::pb::SourceInfo& Document::source_info() const {
  const ::recostream::pb::SourceInfo* p = source_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.Document.source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::SourceInfo*>(
      &::recostream::pb::_SourceInfo_default_instance_);
}
::recostream::pb::SourceInfo* Document::mutable_source_info() {
  set_has_source_info();
  if (source_info_ == NULL) {
    source_info_ = new ::recostream::pb::SourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.source_info)
  return source_info_;
}
::recostream::pb::SourceInfo* Document::release_source_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.source_info)
  clear_has_source_info();
  ::recostream::pb::SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
void Document::set_allocated_source_info(::recostream::pb::SourceInfo* source_info) {
  delete source_info_;
  source_info_ = source_info;
  if (source_info) {
    set_has_source_info();
  } else {
    clear_has_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.source_info)
}

// optional bool is_fulltext = 10;
bool Document::has_is_fulltext() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Document::set_has_is_fulltext() {
  _has_bits_[0] |= 0x00008000u;
}
void Document::clear_has_is_fulltext() {
  _has_bits_[0] &= ~0x00008000u;
}
void Document::clear_is_fulltext() {
  is_fulltext_ = false;
  clear_has_is_fulltext();
}
bool Document::is_fulltext() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.is_fulltext)
  return is_fulltext_;
}
void Document::set_is_fulltext(bool value) {
  set_has_is_fulltext();
  is_fulltext_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.is_fulltext)
}

// optional string amp_url = 11;
bool Document::has_amp_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Document::set_has_amp_url() {
  _has_bits_[0] |= 0x00000008u;
}
void Document::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void Document::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
const ::std::string& Document::amp_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.amp_url)
  return amp_url_.GetNoArena();
}
void Document::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.amp_url)
}
#if LANG_CXX11
void Document::set_amp_url(::std::string&& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.amp_url)
}
#endif
void Document::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.amp_url)
}
void Document::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.amp_url)
}
::std::string* Document::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_amp_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.amp_url)
}

// optional string slug = 12;
bool Document::has_slug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Document::set_has_slug() {
  _has_bits_[0] |= 0x00000010u;
}
void Document::clear_has_slug() {
  _has_bits_[0] &= ~0x00000010u;
}
void Document::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slug();
}
const ::std::string& Document::slug() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.slug)
  return slug_.GetNoArena();
}
void Document::set_slug(const ::std::string& value) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.slug)
}
#if LANG_CXX11
void Document::set_slug(::std::string&& value) {
  set_has_slug();
  slug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.slug)
}
#endif
void Document::set_slug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.slug)
}
void Document::set_slug(const char* value, size_t size) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.slug)
}
::std::string* Document::mutable_slug() {
  set_has_slug();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_slug() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.slug)
  clear_has_slug();
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    set_has_slug();
  } else {
    clear_has_slug();
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.slug)
}

// optional .recostream.pb.PulseVideos videos = 13;
bool Document::has_videos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Document::set_has_videos() {
  _has_bits_[0] |= 0x00000400u;
}
void Document::clear_has_videos() {
  _has_bits_[0] &= ~0x00000400u;
}
void Document::clear_videos() {
  if (videos_ != NULL) videos_->::recostream::pb::PulseVideos::Clear();
  clear_has_videos();
}
const ::recostream::pb::PulseVideos& Document::videos() const {
  const ::recostream::pb::PulseVideos* p = videos_;
  // @@protoc_insertion_point(field_get:recostream.pb.Document.videos)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PulseVideos*>(
      &::recostream::pb::_PulseVideos_default_instance_);
}
::recostream::pb::PulseVideos* Document::mutable_videos() {
  set_has_videos();
  if (videos_ == NULL) {
    videos_ = new ::recostream::pb::PulseVideos;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.videos)
  return videos_;
}
::recostream::pb::PulseVideos* Document::release_videos() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.videos)
  clear_has_videos();
  ::recostream::pb::PulseVideos* temp = videos_;
  videos_ = NULL;
  return temp;
}
void Document::set_allocated_videos(::recostream::pb::PulseVideos* videos) {
  delete videos_;
  videos_ = videos;
  if (videos) {
    set_has_videos();
  } else {
    clear_has_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.videos)
}

// optional string redirect_url = 14;
bool Document::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Document::set_has_redirect_url() {
  _has_bits_[0] |= 0x00000020u;
}
void Document::clear_has_redirect_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void Document::clear_redirect_url() {
  redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_url();
}
const ::std::string& Document::redirect_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.redirect_url)
  return redirect_url_.GetNoArena();
}
void Document::set_redirect_url(const ::std::string& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.redirect_url)
}
#if LANG_CXX11
void Document::set_redirect_url(::std::string&& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.redirect_url)
}
#endif
void Document::set_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.redirect_url)
}
void Document::set_redirect_url(const char* value, size_t size) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.redirect_url)
}
::std::string* Document::mutable_redirect_url() {
  set_has_redirect_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.redirect_url)
  return redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_redirect_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.redirect_url)
  clear_has_redirect_url();
  return redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_redirect_url(::std::string* redirect_url) {
  if (redirect_url != NULL) {
    set_has_redirect_url();
  } else {
    clear_has_redirect_url();
  }
  redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.redirect_url)
}

// optional string external_url = 15;
bool Document::has_external_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Document::set_has_external_url() {
  _has_bits_[0] |= 0x00000040u;
}
void Document::clear_has_external_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void Document::clear_external_url() {
  external_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_url();
}
const ::std::string& Document::external_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.external_url)
  return external_url_.GetNoArena();
}
void Document::set_external_url(const ::std::string& value) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.external_url)
}
#if LANG_CXX11
void Document::set_external_url(::std::string&& value) {
  set_has_external_url();
  external_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.external_url)
}
#endif
void Document::set_external_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.external_url)
}
void Document::set_external_url(const char* value, size_t size) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.external_url)
}
::std::string* Document::mutable_external_url() {
  set_has_external_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.external_url)
  return external_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_external_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.external_url)
  clear_has_external_url();
  return external_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_external_url(::std::string* external_url) {
  if (external_url != NULL) {
    set_has_external_url();
  } else {
    clear_has_external_url();
  }
  external_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.external_url)
}

// optional uint32 advert_doc_id = 16;
bool Document::has_advert_doc_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Document::set_has_advert_doc_id() {
  _has_bits_[0] |= 0x00010000u;
}
void Document::clear_has_advert_doc_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void Document::clear_advert_doc_id() {
  advert_doc_id_ = 0u;
  clear_has_advert_doc_id();
}
::google::protobuf::uint32 Document::advert_doc_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.advert_doc_id)
  return advert_doc_id_;
}
void Document::set_advert_doc_id(::google::protobuf::uint32 value) {
  set_has_advert_doc_id();
  advert_doc_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.advert_doc_id)
}

// optional string mapping_date = 17;
bool Document::has_mapping_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Document::set_has_mapping_date() {
  _has_bits_[0] |= 0x00000080u;
}
void Document::clear_has_mapping_date() {
  _has_bits_[0] &= ~0x00000080u;
}
void Document::clear_mapping_date() {
  mapping_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapping_date();
}
const ::std::string& Document::mapping_date() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.mapping_date)
  return mapping_date_.GetNoArena();
}
void Document::set_mapping_date(const ::std::string& value) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.mapping_date)
}
#if LANG_CXX11
void Document::set_mapping_date(::std::string&& value) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.mapping_date)
}
#endif
void Document::set_mapping_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.mapping_date)
}
void Document::set_mapping_date(const char* value, size_t size) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.mapping_date)
}
::std::string* Document::mutable_mapping_date() {
  set_has_mapping_date();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.mapping_date)
  return mapping_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_mapping_date() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.mapping_date)
  clear_has_mapping_date();
  return mapping_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_mapping_date(::std::string* mapping_date) {
  if (mapping_date != NULL) {
    set_has_mapping_date();
  } else {
    clear_has_mapping_date();
  }
  mapping_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapping_date);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.mapping_date)
}

// optional string erid = 18;
bool Document::has_erid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Document::set_has_erid() {
  _has_bits_[0] |= 0x00000100u;
}
void Document::clear_has_erid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Document::clear_erid() {
  erid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_erid();
}
const ::std::string& Document::erid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.erid)
  return erid_.GetNoArena();
}
void Document::set_erid(const ::std::string& value) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.erid)
}
#if LANG_CXX11
void Document::set_erid(::std::string&& value) {
  set_has_erid();
  erid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.erid)
}
#endif
void Document::set_erid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.erid)
}
void Document::set_erid(const char* value, size_t size) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.erid)
}
::std::string* Document::mutable_erid() {
  set_has_erid();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.erid)
  return erid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_erid() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.erid)
  clear_has_erid();
  return erid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_erid(::std::string* erid) {
  if (erid != NULL) {
    set_has_erid();
  } else {
    clear_has_erid();
  }
  erid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), erid);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.erid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Advert::kBannerIdFieldNumber;
const int Advert::kTitleFieldNumber;
const int Advert::kSnippetFieldNumber;
const int Advert::kUrlFieldNumber;
const int Advert::kDisclaimerFieldNumber;
const int Advert::kAgeRestrictionsFieldNumber;
const int Advert::kImagesFieldNumber;
const int Advert::kPixelsFieldNumber;
const int Advert::kAboutCompanyFieldNumber;
const int Advert::kAdvertTemplateIdFieldNumber;
const int Advert::kRawJsonAnswerFieldNumber;
const int Advert::kDomainNameFieldNumber;
const int Advert::kIsNativeFieldNumber;
const int Advert::kSizeFieldNumber;
const int Advert::kInnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Advert::Advert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.Advert)
}
Advert::Advert(const Advert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      images_(from.images_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  disclaimer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_disclaimer()) {
    disclaimer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disclaimer_);
  }
  age_restrictions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_age_restrictions()) {
    age_restrictions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.age_restrictions_);
  }
  about_company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_about_company()) {
    about_company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.about_company_);
  }
  advert_template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_advert_template_id()) {
    advert_template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advert_template_id_);
  }
  raw_json_answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_json_answer()) {
    raw_json_answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_json_answer_);
  }
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain_name()) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  inn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inn()) {
    inn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inn_);
  }
  if (from.has_pixels()) {
    pixels_ = new ::recostream::pb::DocumentPixels(*from.pixels_);
  } else {
    pixels_ = NULL;
  }
  ::memcpy(&banner_id_, &from.banner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&banner_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.Advert)
}

void Advert::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disclaimer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_restrictions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  about_company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advert_template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_json_answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&pixels_)) + sizeof(size_));
}

Advert::~Advert() {
  // @@protoc_insertion_point(destructor:recostream.pb.Advert)
  SharedDtor();
}

void Advert::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disclaimer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_restrictions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  about_company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advert_template_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_json_answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pixels_;
}

void Advert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Advert::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Advert& Advert::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

Advert* Advert::New(::google::protobuf::Arena* arena) const {
  Advert* n = new Advert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Advert::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.Advert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!snippet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snippet_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!disclaimer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*disclaimer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!age_restrictions_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*age_restrictions_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!about_company_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*about_company_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!advert_template_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*advert_template_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!raw_json_answer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*raw_json_answer_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!domain_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!inn_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inn_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(pixels_ != NULL);
      pixels_->::recostream::pb::DocumentPixels::Clear();
    }
  }
  if (cached_has_bits & 14336u) {
    ::memset(&banner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&banner_id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Advert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.Advert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_banner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string snippet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snippet().data(), static_cast<int>(this->snippet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.snippet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string disclaimer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disclaimer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->disclaimer().data(), static_cast<int>(this->disclaimer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.disclaimer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string age_restrictions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_age_restrictions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->age_restrictions().data(), static_cast<int>(this->age_restrictions().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.age_restrictions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .recostream.pb.DocumentImage images = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.DocumentPixels pixels = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string about_company = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_about_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->about_company().data(), static_cast<int>(this->about_company().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.about_company");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string advert_template_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advert_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advert_template_id().data(), static_cast<int>(this->advert_template_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.advert_template_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string raw_json_answer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_json_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->raw_json_answer().data(), static_cast<int>(this->raw_json_answer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.raw_json_answer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain_name().data(), static_cast<int>(this->domain_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.domain_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_native = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_native();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_native_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inn = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), static_cast<int>(this->inn().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.Advert.inn");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.Advert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.Advert)
  return false;
#undef DO_
}

void Advert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.Advert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 banner_id = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banner_id(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string snippet = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snippet(), output);
  }

  // required string url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional string disclaimer = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disclaimer().data(), static_cast<int>(this->disclaimer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.disclaimer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->disclaimer(), output);
  }

  // optional string age_restrictions = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->age_restrictions().data(), static_cast<int>(this->age_restrictions().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.age_restrictions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->age_restrictions(), output);
  }

  // repeated .recostream.pb.DocumentImage images = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->images(static_cast<int>(i)), output);
  }

  // optional .recostream.pb.DocumentPixels pixels = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pixels_, output);
  }

  // optional string about_company = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->about_company().data(), static_cast<int>(this->about_company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.about_company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->about_company(), output);
  }

  // optional string advert_template_id = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advert_template_id().data(), static_cast<int>(this->advert_template_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.advert_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->advert_template_id(), output);
  }

  // optional string raw_json_answer = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_json_answer().data(), static_cast<int>(this->raw_json_answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.raw_json_answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->raw_json_answer(), output);
  }

  // optional string domain_name = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain_name().data(), static_cast<int>(this->domain_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->domain_name(), output);
  }

  // optional bool is_native = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_native(), output);
  }

  // optional int32 size = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->size(), output);
  }

  // optional string inn = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), static_cast<int>(this->inn().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->inn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.Advert)
}

::google::protobuf::uint8* Advert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.Advert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 banner_id = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banner_id(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string snippet = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snippet().data(), static_cast<int>(this->snippet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snippet(), target);
  }

  // required string url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional string disclaimer = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disclaimer().data(), static_cast<int>(this->disclaimer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.disclaimer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->disclaimer(), target);
  }

  // optional string age_restrictions = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->age_restrictions().data(), static_cast<int>(this->age_restrictions().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.age_restrictions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->age_restrictions(), target);
  }

  // repeated .recostream.pb.DocumentImage images = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->images_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->images(static_cast<int>(i)), deterministic, target);
  }

  // optional .recostream.pb.DocumentPixels pixels = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->pixels_, deterministic, target);
  }

  // optional string about_company = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->about_company().data(), static_cast<int>(this->about_company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.about_company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->about_company(), target);
  }

  // optional string advert_template_id = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advert_template_id().data(), static_cast<int>(this->advert_template_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.advert_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->advert_template_id(), target);
  }

  // optional string raw_json_answer = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raw_json_answer().data(), static_cast<int>(this->raw_json_answer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.raw_json_answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->raw_json_answer(), target);
  }

  // optional string domain_name = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain_name().data(), static_cast<int>(this->domain_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->domain_name(), target);
  }

  // optional bool is_native = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_native(), target);
  }

  // optional int32 size = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->size(), target);
  }

  // optional string inn = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), static_cast<int>(this->inn().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.Advert.inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->inn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.Advert)
  return target;
}

size_t Advert::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.Advert)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_snippet()) {
    // required string snippet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());
  }

  if (has_url()) {
    // required string url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_banner_id()) {
    // required int32 banner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banner_id());
  }

  return total_size;
}
size_t Advert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.Advert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000807) ^ 0x00000807) == 0) {  // All required fields are present.
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string snippet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snippet());

    // required string url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required int32 banner_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .recostream.pb.DocumentImage images = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->images_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string disclaimer = 5;
    if (has_disclaimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disclaimer());
    }

    // optional string age_restrictions = 6;
    if (has_age_restrictions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->age_restrictions());
    }

    // optional string about_company = 9;
    if (has_about_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->about_company());
    }

    // optional string advert_template_id = 10;
    if (has_advert_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advert_template_id());
    }

    // optional string raw_json_answer = 11;
    if (has_raw_json_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_json_answer());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string domain_name = 12;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }

    // optional string inn = 15;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional .recostream.pb.DocumentPixels pixels = 8;
    if (has_pixels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pixels_);
    }

  }
  if (_has_bits_[8 / 32] & 12288u) {
    // optional bool is_native = 13;
    if (has_is_native()) {
      total_size += 1 + 1;
    }

    // optional int32 size = 14;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Advert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.Advert)
  GOOGLE_DCHECK_NE(&from, this);
  const Advert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Advert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.Advert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.Advert)
    MergeFrom(*source);
  }
}

void Advert::MergeFrom(const Advert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.Advert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_snippet();
      snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_disclaimer();
      disclaimer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disclaimer_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_age_restrictions();
      age_restrictions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.age_restrictions_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_about_company();
      about_company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.about_company_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_advert_template_id();
      advert_template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advert_template_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_raw_json_answer();
      raw_json_answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_json_answer_);
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_domain_name();
      domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_inn();
      inn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inn_);
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_pixels()->::recostream::pb::DocumentPixels::MergeFrom(from.pixels());
    }
    if (cached_has_bits & 0x00000800u) {
      banner_id_ = from.banner_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_native_ = from.is_native_;
    }
    if (cached_has_bits & 0x00002000u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Advert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.Advert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Advert::CopyFrom(const Advert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.Advert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Advert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000807) != 0x00000807) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->images())) return false;
  return true;
}

void Advert::Swap(Advert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Advert::InternalSwap(Advert* other) {
  using std::swap;
  images_.InternalSwap(&other->images_);
  title_.Swap(&other->title_);
  snippet_.Swap(&other->snippet_);
  url_.Swap(&other->url_);
  disclaimer_.Swap(&other->disclaimer_);
  age_restrictions_.Swap(&other->age_restrictions_);
  about_company_.Swap(&other->about_company_);
  advert_template_id_.Swap(&other->advert_template_id_);
  raw_json_answer_.Swap(&other->raw_json_answer_);
  domain_name_.Swap(&other->domain_name_);
  inn_.Swap(&other->inn_);
  swap(pixels_, other->pixels_);
  swap(banner_id_, other->banner_id_);
  swap(is_native_, other->is_native_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Advert::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Advert

// required int32 banner_id = 1;
bool Advert::has_banner_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Advert::set_has_banner_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Advert::clear_has_banner_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Advert::clear_banner_id() {
  banner_id_ = 0;
  clear_has_banner_id();
}
::google::protobuf::int32 Advert::banner_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.banner_id)
  return banner_id_;
}
void Advert::set_banner_id(::google::protobuf::int32 value) {
  set_has_banner_id();
  banner_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.banner_id)
}

// required string title = 2;
bool Advert::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Advert::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void Advert::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void Advert::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Advert::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.title)
  return title_.GetNoArena();
}
void Advert::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.title)
}
#if LANG_CXX11
void Advert::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.title)
}
#endif
void Advert::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.title)
}
void Advert::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.title)
}
::std::string* Advert::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.title)
}

// required string snippet = 3;
bool Advert::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Advert::set_has_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
void Advert::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
void Advert::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
const ::std::string& Advert::snippet() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.snippet)
  return snippet_.GetNoArena();
}
void Advert::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.snippet)
}
#if LANG_CXX11
void Advert::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.snippet)
}
#endif
void Advert::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.snippet)
}
void Advert::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.snippet)
}
::std::string* Advert::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_snippet() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.snippet)
}

// required string url = 4;
bool Advert::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Advert::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void Advert::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void Advert::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& Advert::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.url)
  return url_.GetNoArena();
}
void Advert::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.url)
}
#if LANG_CXX11
void Advert::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.url)
}
#endif
void Advert::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.url)
}
void Advert::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.url)
}
::std::string* Advert::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.url)
}

// optional string disclaimer = 5;
bool Advert::has_disclaimer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Advert::set_has_disclaimer() {
  _has_bits_[0] |= 0x00000008u;
}
void Advert::clear_has_disclaimer() {
  _has_bits_[0] &= ~0x00000008u;
}
void Advert::clear_disclaimer() {
  disclaimer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disclaimer();
}
const ::std::string& Advert::disclaimer() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.disclaimer)
  return disclaimer_.GetNoArena();
}
void Advert::set_disclaimer(const ::std::string& value) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.disclaimer)
}
#if LANG_CXX11
void Advert::set_disclaimer(::std::string&& value) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.disclaimer)
}
#endif
void Advert::set_disclaimer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.disclaimer)
}
void Advert::set_disclaimer(const char* value, size_t size) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.disclaimer)
}
::std::string* Advert::mutable_disclaimer() {
  set_has_disclaimer();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.disclaimer)
  return disclaimer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_disclaimer() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.disclaimer)
  clear_has_disclaimer();
  return disclaimer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_disclaimer(::std::string* disclaimer) {
  if (disclaimer != NULL) {
    set_has_disclaimer();
  } else {
    clear_has_disclaimer();
  }
  disclaimer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disclaimer);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.disclaimer)
}

// optional string age_restrictions = 6;
bool Advert::has_age_restrictions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Advert::set_has_age_restrictions() {
  _has_bits_[0] |= 0x00000010u;
}
void Advert::clear_has_age_restrictions() {
  _has_bits_[0] &= ~0x00000010u;
}
void Advert::clear_age_restrictions() {
  age_restrictions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age_restrictions();
}
const ::std::string& Advert::age_restrictions() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.age_restrictions)
  return age_restrictions_.GetNoArena();
}
void Advert::set_age_restrictions(const ::std::string& value) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.age_restrictions)
}
#if LANG_CXX11
void Advert::set_age_restrictions(::std::string&& value) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.age_restrictions)
}
#endif
void Advert::set_age_restrictions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.age_restrictions)
}
void Advert::set_age_restrictions(const char* value, size_t size) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.age_restrictions)
}
::std::string* Advert::mutable_age_restrictions() {
  set_has_age_restrictions();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.age_restrictions)
  return age_restrictions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_age_restrictions() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.age_restrictions)
  clear_has_age_restrictions();
  return age_restrictions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_age_restrictions(::std::string* age_restrictions) {
  if (age_restrictions != NULL) {
    set_has_age_restrictions();
  } else {
    clear_has_age_restrictions();
  }
  age_restrictions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age_restrictions);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.age_restrictions)
}

// repeated .recostream.pb.DocumentImage images = 7;
int Advert::images_size() const {
  return images_.size();
}
void Advert::clear_images() {
  images_.Clear();
}
const ::recostream::pb::DocumentImage& Advert::images(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.images)
  return images_.Get(index);
}
::recostream::pb::DocumentImage* Advert::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.images)
  return images_.Mutable(index);
}
::recostream::pb::DocumentImage* Advert::add_images() {
  // @@protoc_insertion_point(field_add:recostream.pb.Advert.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
Advert::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.Advert.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
Advert::images() const {
  // @@protoc_insertion_point(field_list:recostream.pb.Advert.images)
  return images_;
}

// optional .recostream.pb.DocumentPixels pixels = 8;
bool Advert::has_pixels() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Advert::set_has_pixels() {
  _has_bits_[0] |= 0x00000400u;
}
void Advert::clear_has_pixels() {
  _has_bits_[0] &= ~0x00000400u;
}
void Advert::clear_pixels() {
  if (pixels_ != NULL) pixels_->::recostream::pb::DocumentPixels::Clear();
  clear_has_pixels();
}
const ::recostream::pb::DocumentPixels& Advert::pixels() const {
  const ::recostream::pb::DocumentPixels* p = pixels_;
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.pixels)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DocumentPixels*>(
      &::recostream::pb::_DocumentPixels_default_instance_);
}
::recostream::pb::DocumentPixels* Advert::mutable_pixels() {
  set_has_pixels();
  if (pixels_ == NULL) {
    pixels_ = new ::recostream::pb::DocumentPixels;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.pixels)
  return pixels_;
}
::recostream::pb::DocumentPixels* Advert::release_pixels() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.pixels)
  clear_has_pixels();
  ::recostream::pb::DocumentPixels* temp = pixels_;
  pixels_ = NULL;
  return temp;
}
void Advert::set_allocated_pixels(::recostream::pb::DocumentPixels* pixels) {
  delete pixels_;
  pixels_ = pixels;
  if (pixels) {
    set_has_pixels();
  } else {
    clear_has_pixels();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.pixels)
}

// optional string about_company = 9;
bool Advert::has_about_company() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Advert::set_has_about_company() {
  _has_bits_[0] |= 0x00000020u;
}
void Advert::clear_has_about_company() {
  _has_bits_[0] &= ~0x00000020u;
}
void Advert::clear_about_company() {
  about_company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_about_company();
}
const ::std::string& Advert::about_company() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.about_company)
  return about_company_.GetNoArena();
}
void Advert::set_about_company(const ::std::string& value) {
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.about_company)
}
#if LANG_CXX11
void Advert::set_about_company(::std::string&& value) {
  set_has_about_company();
  about_company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.about_company)
}
#endif
void Advert::set_about_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.about_company)
}
void Advert::set_about_company(const char* value, size_t size) {
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.about_company)
}
::std::string* Advert::mutable_about_company() {
  set_has_about_company();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.about_company)
  return about_company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_about_company() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.about_company)
  clear_has_about_company();
  return about_company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_about_company(::std::string* about_company) {
  if (about_company != NULL) {
    set_has_about_company();
  } else {
    clear_has_about_company();
  }
  about_company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), about_company);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.about_company)
}

// optional string advert_template_id = 10;
bool Advert::has_advert_template_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Advert::set_has_advert_template_id() {
  _has_bits_[0] |= 0x00000040u;
}
void Advert::clear_has_advert_template_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void Advert::clear_advert_template_id() {
  advert_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_advert_template_id();
}
const ::std::string& Advert::advert_template_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.advert_template_id)
  return advert_template_id_.GetNoArena();
}
void Advert::set_advert_template_id(const ::std::string& value) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.advert_template_id)
}
#if LANG_CXX11
void Advert::set_advert_template_id(::std::string&& value) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.advert_template_id)
}
#endif
void Advert::set_advert_template_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.advert_template_id)
}
void Advert::set_advert_template_id(const char* value, size_t size) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.advert_template_id)
}
::std::string* Advert::mutable_advert_template_id() {
  set_has_advert_template_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.advert_template_id)
  return advert_template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_advert_template_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.advert_template_id)
  clear_has_advert_template_id();
  return advert_template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_advert_template_id(::std::string* advert_template_id) {
  if (advert_template_id != NULL) {
    set_has_advert_template_id();
  } else {
    clear_has_advert_template_id();
  }
  advert_template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advert_template_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.advert_template_id)
}

// optional string raw_json_answer = 11;
bool Advert::has_raw_json_answer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Advert::set_has_raw_json_answer() {
  _has_bits_[0] |= 0x00000080u;
}
void Advert::clear_has_raw_json_answer() {
  _has_bits_[0] &= ~0x00000080u;
}
void Advert::clear_raw_json_answer() {
  raw_json_answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_json_answer();
}
const ::std::string& Advert::raw_json_answer() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.raw_json_answer)
  return raw_json_answer_.GetNoArena();
}
void Advert::set_raw_json_answer(const ::std::string& value) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.raw_json_answer)
}
#if LANG_CXX11
void Advert::set_raw_json_answer(::std::string&& value) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.raw_json_answer)
}
#endif
void Advert::set_raw_json_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.raw_json_answer)
}
void Advert::set_raw_json_answer(const char* value, size_t size) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.raw_json_answer)
}
::std::string* Advert::mutable_raw_json_answer() {
  set_has_raw_json_answer();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.raw_json_answer)
  return raw_json_answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_raw_json_answer() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.raw_json_answer)
  clear_has_raw_json_answer();
  return raw_json_answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_raw_json_answer(::std::string* raw_json_answer) {
  if (raw_json_answer != NULL) {
    set_has_raw_json_answer();
  } else {
    clear_has_raw_json_answer();
  }
  raw_json_answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_json_answer);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.raw_json_answer)
}

// optional string domain_name = 12;
bool Advert::has_domain_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Advert::set_has_domain_name() {
  _has_bits_[0] |= 0x00000100u;
}
void Advert::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void Advert::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain_name();
}
const ::std::string& Advert::domain_name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.domain_name)
  return domain_name_.GetNoArena();
}
void Advert::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.domain_name)
}
#if LANG_CXX11
void Advert::set_domain_name(::std::string&& value) {
  set_has_domain_name();
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.domain_name)
}
#endif
void Advert::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.domain_name)
}
void Advert::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.domain_name)
}
::std::string* Advert::mutable_domain_name() {
  set_has_domain_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_domain_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.domain_name)
  clear_has_domain_name();
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    set_has_domain_name();
  } else {
    clear_has_domain_name();
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.domain_name)
}

// optional bool is_native = 13;
bool Advert::has_is_native() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Advert::set_has_is_native() {
  _has_bits_[0] |= 0x00001000u;
}
void Advert::clear_has_is_native() {
  _has_bits_[0] &= ~0x00001000u;
}
void Advert::clear_is_native() {
  is_native_ = false;
  clear_has_is_native();
}
bool Advert::is_native() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.is_native)
  return is_native_;
}
void Advert::set_is_native(bool value) {
  set_has_is_native();
  is_native_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.is_native)
}

// optional int32 size = 14;
bool Advert::has_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Advert::set_has_size() {
  _has_bits_[0] |= 0x00002000u;
}
void Advert::clear_has_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void Advert::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 Advert::size() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.size)
  return size_;
}
void Advert::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.size)
}

// optional string inn = 15;
bool Advert::has_inn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Advert::set_has_inn() {
  _has_bits_[0] |= 0x00000200u;
}
void Advert::clear_has_inn() {
  _has_bits_[0] &= ~0x00000200u;
}
void Advert::clear_inn() {
  inn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inn();
}
const ::std::string& Advert::inn() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.inn)
  return inn_.GetNoArena();
}
void Advert::set_inn(const ::std::string& value) {
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.inn)
}
#if LANG_CXX11
void Advert::set_inn(::std::string&& value) {
  set_has_inn();
  inn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.inn)
}
#endif
void Advert::set_inn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.inn)
}
void Advert::set_inn(const char* value, size_t size) {
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.inn)
}
::std::string* Advert::mutable_inn() {
  set_has_inn();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.inn)
  return inn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Advert::release_inn() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.inn)
  clear_has_inn();
  return inn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Advert::set_allocated_inn(::std::string* inn) {
  if (inn != NULL) {
    set_has_inn();
  } else {
    clear_has_inn();
  }
  inn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inn);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.inn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoResultItem::kDocumentFieldNumber;
const int RecoResultItem::kAdvertFieldNumber;
const int RecoResultItem::kHashFieldNumber;
const int RecoResultItem::kMetaInfoFieldNumber;
const int RecoResultItem::kServeNoticeUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoResultItem::RecoResultItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.RecoResultItem)
}
RecoResultItem::RecoResultItem(const RecoResultItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      serve_notice_url_(from.serve_notice_url_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta_info()) {
    meta_info_ = new ::recostream::pb::DocumentMetaInfo(*from.meta_info_);
  } else {
    meta_info_ = NULL;
  }
  hash_ = from.hash_;
  clear_has_value();
  switch (from.value_case()) {
    case kDocument: {
      mutable_document()->::recostream::pb::Document::MergeFrom(from.document());
      break;
    }
    case kAdvert: {
      mutable_advert()->::recostream::pb::Advert::MergeFrom(from.advert());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.RecoResultItem)
}

void RecoResultItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&meta_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&meta_info_)) + sizeof(hash_));
  clear_has_value();
}

RecoResultItem::~RecoResultItem() {
  // @@protoc_insertion_point(destructor:recostream.pb.RecoResultItem)
  SharedDtor();
}

void RecoResultItem::SharedDtor() {
  if (this != internal_default_instance()) delete meta_info_;
  if (has_value()) {
    clear_value();
  }
}

void RecoResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoResultItem::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecoResultItem& RecoResultItem::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecoResultItem* RecoResultItem::New(::google::protobuf::Arena* arena) const {
  RecoResultItem* n = new RecoResultItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecoResultItem::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:recostream.pb.RecoResultItem)
  switch (value_case()) {
    case kDocument: {
      delete value_.document_;
      break;
    }
    case kAdvert: {
      delete value_.advert_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RecoResultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.RecoResultItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serve_notice_url_.Clear();
  if (has_meta_info()) {
    GOOGLE_DCHECK(meta_info_ != NULL);
    meta_info_->::recostream::pb::DocumentMetaInfo::Clear();
  }
  hash_ = GOOGLE_LONGLONG(0);
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecoResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.RecoResultItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.DocumentMetaInfo meta_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string serve_notice_url = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serve_notice_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serve_notice_url(this->serve_notice_url_size() - 1).data(),
            static_cast<int>(this->serve_notice_url(this->serve_notice_url_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.RecoResultItem.serve_notice_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.Document document = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.Advert advert = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.RecoResultItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.RecoResultItem)
  return false;
#undef DO_
}

void RecoResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.RecoResultItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 hash = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hash(), output);
  }

  // optional .recostream.pb.DocumentMetaInfo meta_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->meta_info_, output);
  }

  // repeated string serve_notice_url = 30;
  for (int i = 0, n = this->serve_notice_url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serve_notice_url(i).data(), static_cast<int>(this->serve_notice_url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.RecoResultItem.serve_notice_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->serve_notice_url(i), output);
  }

  switch (value_case()) {
    case kDocument:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        101, *value_.document_, output);
      break;
    case kAdvert:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        102, *value_.advert_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.RecoResultItem)
}

::google::protobuf::uint8* RecoResultItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.RecoResultItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hash(), target);
  }

  // optional .recostream.pb.DocumentMetaInfo meta_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->meta_info_, deterministic, target);
  }

  // repeated string serve_notice_url = 30;
  for (int i = 0, n = this->serve_notice_url_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serve_notice_url(i).data(), static_cast<int>(this->serve_notice_url(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.RecoResultItem.serve_notice_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->serve_notice_url(i), target);
  }

  switch (value_case()) {
    case kDocument:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          101, *value_.document_, deterministic, target);
      break;
    case kAdvert:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          102, *value_.advert_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.RecoResultItem)
  return target;
}

size_t RecoResultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.RecoResultItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string serve_notice_url = 30;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->serve_notice_url_size());
  for (int i = 0, n = this->serve_notice_url_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serve_notice_url(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .recostream.pb.DocumentMetaInfo meta_info = 2;
    if (has_meta_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meta_info_);
    }

    // optional int64 hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hash());
    }

  }
  switch (value_case()) {
    // optional .recostream.pb.Document document = 101;
    case kDocument: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.document_);
      break;
    }
    // optional .recostream.pb.Advert advert = 102;
    case kAdvert: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.advert_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoResultItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.RecoResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoResultItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecoResultItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.RecoResultItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.RecoResultItem)
    MergeFrom(*source);
  }
}

void RecoResultItem::MergeFrom(const RecoResultItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.RecoResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serve_notice_url_.MergeFrom(from.serve_notice_url_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_meta_info()->::recostream::pb::DocumentMetaInfo::MergeFrom(from.meta_info());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kDocument: {
      mutable_document()->::recostream::pb::Document::MergeFrom(from.document());
      break;
    }
    case kAdvert: {
      mutable_advert()->::recostream::pb::Advert::MergeFrom(from.advert());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void RecoResultItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.RecoResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoResultItem::CopyFrom(const RecoResultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.RecoResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoResultItem::IsInitialized() const {
  if (has_meta_info()) {
    if (!this->meta_info_->IsInitialized()) return false;
  }
  switch (value_case()) {
    case kDocument: {
      if (has_document()) {
        if (!this->document().IsInitialized()) return false;
      }
      break;
    }
    case kAdvert: {
      if (has_advert()) {
        if (!this->advert().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void RecoResultItem::Swap(RecoResultItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoResultItem::InternalSwap(RecoResultItem* other) {
  using std::swap;
  serve_notice_url_.InternalSwap(&other->serve_notice_url_);
  swap(meta_info_, other->meta_info_);
  swap(hash_, other->hash_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecoResultItem::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecoResultItem

// optional .recostream.pb.Document document = 101;
bool RecoResultItem::has_document() const {
  return value_case() == kDocument;
}
void RecoResultItem::set_has_document() {
  _oneof_case_[0] = kDocument;
}
void RecoResultItem::clear_document() {
  if (has_document()) {
    delete value_.document_;
    clear_has_value();
  }
}
 const ::recostream::pb::Document& RecoResultItem::document() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.document)
  return has_document()
      ? *value_.document_
      : ::recostream::pb::Document::default_instance();
}
::recostream::pb::Document* RecoResultItem::mutable_document() {
  if (!has_document()) {
    clear_value();
    set_has_document();
    value_.document_ = new ::recostream::pb::Document;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.document)
  return value_.document_;
}
::recostream::pb::Document* RecoResultItem::release_document() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.document)
  if (has_document()) {
    clear_has_value();
    ::recostream::pb::Document* temp = value_.document_;
    value_.document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RecoResultItem::set_allocated_document(::recostream::pb::Document* document) {
  clear_value();
  if (document) {
    set_has_document();
    value_.document_ = document;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.document)
}

// optional .recostream.pb.Advert advert = 102;
bool RecoResultItem::has_advert() const {
  return value_case() == kAdvert;
}
void RecoResultItem::set_has_advert() {
  _oneof_case_[0] = kAdvert;
}
void RecoResultItem::clear_advert() {
  if (has_advert()) {
    delete value_.advert_;
    clear_has_value();
  }
}
 const ::recostream::pb::Advert& RecoResultItem::advert() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.advert)
  return has_advert()
      ? *value_.advert_
      : ::recostream::pb::Advert::default_instance();
}
::recostream::pb::Advert* RecoResultItem::mutable_advert() {
  if (!has_advert()) {
    clear_value();
    set_has_advert();
    value_.advert_ = new ::recostream::pb::Advert;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.advert)
  return value_.advert_;
}
::recostream::pb::Advert* RecoResultItem::release_advert() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.advert)
  if (has_advert()) {
    clear_has_value();
    ::recostream::pb::Advert* temp = value_.advert_;
    value_.advert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RecoResultItem::set_allocated_advert(::recostream::pb::Advert* advert) {
  clear_value();
  if (advert) {
    set_has_advert();
    value_.advert_ = advert;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.advert)
}

// optional int64 hash = 1;
bool RecoResultItem::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecoResultItem::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void RecoResultItem::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecoResultItem::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
::google::protobuf::int64 RecoResultItem::hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.hash)
  return hash_;
}
void RecoResultItem::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.hash)
}

// optional .recostream.pb.DocumentMetaInfo meta_info = 2;
bool RecoResultItem::has_meta_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecoResultItem::set_has_meta_info() {
  _has_bits_[0] |= 0x00000001u;
}
void RecoResultItem::clear_has_meta_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecoResultItem::clear_meta_info() {
  if (meta_info_ != NULL) meta_info_->::recostream::pb::DocumentMetaInfo::Clear();
  clear_has_meta_info();
}
const ::recostream::pb::DocumentMetaInfo& RecoResultItem::meta_info() const {
  const ::recostream::pb::DocumentMetaInfo* p = meta_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DocumentMetaInfo*>(
      &::recostream::pb::_DocumentMetaInfo_default_instance_);
}
::recostream::pb::DocumentMetaInfo* RecoResultItem::mutable_meta_info() {
  set_has_meta_info();
  if (meta_info_ == NULL) {
    meta_info_ = new ::recostream::pb::DocumentMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.meta_info)
  return meta_info_;
}
::recostream::pb::DocumentMetaInfo* RecoResultItem::release_meta_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.meta_info)
  clear_has_meta_info();
  ::recostream::pb::DocumentMetaInfo* temp = meta_info_;
  meta_info_ = NULL;
  return temp;
}
void RecoResultItem::set_allocated_meta_info(::recostream::pb::DocumentMetaInfo* meta_info) {
  delete meta_info_;
  meta_info_ = meta_info;
  if (meta_info) {
    set_has_meta_info();
  } else {
    clear_has_meta_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.meta_info)
}

// repeated string serve_notice_url = 30;
int RecoResultItem::serve_notice_url_size() const {
  return serve_notice_url_.size();
}
void RecoResultItem::clear_serve_notice_url() {
  serve_notice_url_.Clear();
}
const ::std::string& RecoResultItem::serve_notice_url(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Get(index);
}
::std::string* RecoResultItem::mutable_serve_notice_url(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Mutable(index);
}
void RecoResultItem::set_serve_notice_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.serve_notice_url)
  serve_notice_url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RecoResultItem::set_serve_notice_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.serve_notice_url)
  serve_notice_url_.Mutable(index)->assign(std::move(value));
}
#endif
void RecoResultItem::set_serve_notice_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serve_notice_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.RecoResultItem.serve_notice_url)
}
void RecoResultItem::set_serve_notice_url(int index, const char* value, size_t size) {
  serve_notice_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.RecoResultItem.serve_notice_url)
}
::std::string* RecoResultItem::add_serve_notice_url() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Add();
}
void RecoResultItem::add_serve_notice_url(const ::std::string& value) {
  serve_notice_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResultItem.serve_notice_url)
}
#if LANG_CXX11
void RecoResultItem::add_serve_notice_url(::std::string&& value) {
  serve_notice_url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResultItem.serve_notice_url)
}
#endif
void RecoResultItem::add_serve_notice_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serve_notice_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.RecoResultItem.serve_notice_url)
}
void RecoResultItem::add_serve_notice_url(const char* value, size_t size) {
  serve_notice_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.RecoResultItem.serve_notice_url)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecoResultItem::serve_notice_url() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RecoResultItem::mutable_serve_notice_url() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RecoResultItem.serve_notice_url)
  return &serve_notice_url_;
}

bool RecoResultItem::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void RecoResultItem::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
RecoResultItem::ValueCase RecoResultItem::value_case() const {
  return RecoResultItem::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProviderDebugInfo::kCosmoInfoFieldNumber;
const int ProviderDebugInfo::kNameFieldNumber;
const int ProviderDebugInfo::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProviderDebugInfo::ProviderDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ProviderDebugInfo)
}
ProviderDebugInfo::ProviderDebugInfo(const ProviderDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kCosmoInfo: {
      mutable_cosmo_info()->::cosmo::pb::DebugInfo::MergeFrom(from.cosmo_info());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ProviderDebugInfo)
}

void ProviderDebugInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

ProviderDebugInfo::~ProviderDebugInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.ProviderDebugInfo)
  SharedDtor();
}

void ProviderDebugInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void ProviderDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProviderDebugInfo::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProviderDebugInfo& ProviderDebugInfo::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProviderDebugInfo* ProviderDebugInfo::New(::google::protobuf::Arena* arena) const {
  ProviderDebugInfo* n = new ProviderDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProviderDebugInfo::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:recostream.pb.ProviderDebugInfo)
  switch (value_case()) {
    case kCosmoInfo: {
      delete value_.cosmo_info_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ProviderDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ProviderDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProviderDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ProviderDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ProviderDebugInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.Error errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DebugInfo cosmo_info = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cosmo_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ProviderDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ProviderDebugInfo)
  return false;
#undef DO_
}

void ProviderDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ProviderDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProviderDebugInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .cosmo.pb.Error errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->errors(static_cast<int>(i)), output);
  }

  // optional .cosmo.pb.DebugInfo cosmo_info = 101;
  if (has_cosmo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *value_.cosmo_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ProviderDebugInfo)
}

::google::protobuf::uint8* ProviderDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ProviderDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProviderDebugInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .cosmo.pb.Error errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // optional .cosmo.pb.DebugInfo cosmo_info = 101;
  if (has_cosmo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *value_.cosmo_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ProviderDebugInfo)
  return target;
}

size_t ProviderDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ProviderDebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.Error errors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // optional .cosmo.pb.DebugInfo cosmo_info = 101;
    case kCosmoInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.cosmo_info_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProviderDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ProviderDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProviderDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProviderDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ProviderDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ProviderDebugInfo)
    MergeFrom(*source);
  }
}

void ProviderDebugInfo::MergeFrom(const ProviderDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ProviderDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.value_case()) {
    case kCosmoInfo: {
      mutable_cosmo_info()->::cosmo::pb::DebugInfo::MergeFrom(from.cosmo_info());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ProviderDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ProviderDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProviderDebugInfo::CopyFrom(const ProviderDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ProviderDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderDebugInfo::IsInitialized() const {
  switch (value_case()) {
    case kCosmoInfo: {
      if (has_cosmo_info()) {
        if (!this->cosmo_info().IsInitialized()) return false;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void ProviderDebugInfo::Swap(ProviderDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProviderDebugInfo::InternalSwap(ProviderDebugInfo* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  name_.Swap(&other->name_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProviderDebugInfo::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProviderDebugInfo

// optional .cosmo.pb.DebugInfo cosmo_info = 101;
bool ProviderDebugInfo::has_cosmo_info() const {
  return value_case() == kCosmoInfo;
}
void ProviderDebugInfo::set_has_cosmo_info() {
  _oneof_case_[0] = kCosmoInfo;
}
void ProviderDebugInfo::clear_cosmo_info() {
  if (has_cosmo_info()) {
    delete value_.cosmo_info_;
    clear_has_value();
  }
}
 const ::cosmo::pb::DebugInfo& ProviderDebugInfo::cosmo_info() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.cosmo_info)
  return has_cosmo_info()
      ? *value_.cosmo_info_
      : ::cosmo::pb::DebugInfo::default_instance();
}
::cosmo::pb::DebugInfo* ProviderDebugInfo::mutable_cosmo_info() {
  if (!has_cosmo_info()) {
    clear_value();
    set_has_cosmo_info();
    value_.cosmo_info_ = new ::cosmo::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.cosmo_info)
  return value_.cosmo_info_;
}
::cosmo::pb::DebugInfo* ProviderDebugInfo::release_cosmo_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderDebugInfo.cosmo_info)
  if (has_cosmo_info()) {
    clear_has_value();
    ::cosmo::pb::DebugInfo* temp = value_.cosmo_info_;
    value_.cosmo_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ProviderDebugInfo::set_allocated_cosmo_info(::cosmo::pb::DebugInfo* cosmo_info) {
  clear_value();
  if (cosmo_info) {
    set_has_cosmo_info();
    value_.cosmo_info_ = cosmo_info;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderDebugInfo.cosmo_info)
}

// optional string name = 1;
bool ProviderDebugInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProviderDebugInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProviderDebugInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProviderDebugInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ProviderDebugInfo::name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.name)
  return name_.GetNoArena();
}
void ProviderDebugInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ProviderDebugInfo.name)
}
#if LANG_CXX11
void ProviderDebugInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ProviderDebugInfo.name)
}
#endif
void ProviderDebugInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ProviderDebugInfo.name)
}
void ProviderDebugInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ProviderDebugInfo.name)
}
::std::string* ProviderDebugInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProviderDebugInfo::release_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderDebugInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProviderDebugInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderDebugInfo.name)
}

// repeated .cosmo.pb.Error errors = 2;
int ProviderDebugInfo::errors_size() const {
  return errors_.size();
}
void ProviderDebugInfo::clear_errors() {
  errors_.Clear();
}
const ::cosmo::pb::Error& ProviderDebugInfo::errors(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Get(index);
}
::cosmo::pb::Error* ProviderDebugInfo::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Mutable(index);
}
::cosmo::pb::Error* ProviderDebugInfo::add_errors() {
  // @@protoc_insertion_point(field_add:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
ProviderDebugInfo::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ProviderDebugInfo.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
ProviderDebugInfo::errors() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ProviderDebugInfo.errors)
  return errors_;
}

bool ProviderDebugInfo::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ProviderDebugInfo::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ProviderDebugInfo::ValueCase ProviderDebugInfo::value_case() const {
  return ProviderDebugInfo::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugInfo::kProvidersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugInfo::DebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.DebugInfo)
}
DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      providers_(from.providers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.DebugInfo)
}

void DebugInfo::SharedCtor() {
  _cached_size_ = 0;
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.DebugInfo)
  SharedDtor();
}

void DebugInfo::SharedDtor() {
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfo::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugInfo& DebugInfo::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugInfo* DebugInfo::New(::google::protobuf::Arena* arena) const {
  DebugInfo* n = new DebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  providers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .recostream.pb.ProviderDebugInfo providers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_providers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.DebugInfo)
  return false;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProviderDebugInfo providers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->providers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->providers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.DebugInfo)
}

::google::protobuf::uint8* DebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.DebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProviderDebugInfo providers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->providers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->providers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.DebugInfo)
  return target;
}

size_t DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.DebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .recostream.pb.ProviderDebugInfo providers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->providers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.DebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.DebugInfo)
    MergeFrom(*source);
  }
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  providers_.MergeFrom(from.providers_);
}

void DebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->providers())) return false;
  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugInfo::InternalSwap(DebugInfo* other) {
  using std::swap;
  providers_.InternalSwap(&other->providers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugInfo::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugInfo

// repeated .recostream.pb.ProviderDebugInfo providers = 1;
int DebugInfo::providers_size() const {
  return providers_.size();
}
void DebugInfo::clear_providers() {
  providers_.Clear();
}
const ::recostream::pb::ProviderDebugInfo& DebugInfo::providers(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DebugInfo.providers)
  return providers_.Get(index);
}
::recostream::pb::ProviderDebugInfo* DebugInfo::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DebugInfo.providers)
  return providers_.Mutable(index);
}
::recostream::pb::ProviderDebugInfo* DebugInfo::add_providers() {
  // @@protoc_insertion_point(field_add:recostream.pb.DebugInfo.providers)
  return providers_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >*
DebugInfo::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DebugInfo.providers)
  return &providers_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >&
DebugInfo::providers() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DebugInfo.providers)
  return providers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankedSources::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankedSources::RankedSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.RankedSources)
}
RankedSources::RankedSources(const RankedSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.RankedSources)
}

void RankedSources::SharedCtor() {
  _cached_size_ = 0;
}

RankedSources::~RankedSources() {
  // @@protoc_insertion_point(destructor:recostream.pb.RankedSources)
  SharedDtor();
}

void RankedSources::SharedDtor() {
}

void RankedSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankedSources::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankedSources& RankedSources::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankedSources* RankedSources::New(::google::protobuf::Arena* arena) const {
  RankedSources* n = new RankedSources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankedSources::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.RankedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankedSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.RankedSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.Source sources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.RankedSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.RankedSources)
  return false;
#undef DO_
}

void RankedSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.RankedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Source sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.RankedSources)
}

::google::protobuf::uint8* RankedSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.RankedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Source sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sources(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.RankedSources)
  return target;
}

size_t RankedSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.RankedSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.Source sources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankedSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.RankedSources)
  GOOGLE_DCHECK_NE(&from, this);
  const RankedSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankedSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.RankedSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.RankedSources)
    MergeFrom(*source);
  }
}

void RankedSources::MergeFrom(const RankedSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.RankedSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
}

void RankedSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.RankedSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankedSources::CopyFrom(const RankedSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.RankedSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankedSources::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sources())) return false;
  return true;
}

void RankedSources::Swap(RankedSources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankedSources::InternalSwap(RankedSources* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankedSources::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankedSources

// repeated .cosmo.pb.Source sources = 1;
int RankedSources::sources_size() const {
  return sources_.size();
}
void RankedSources::clear_sources() {
  sources_.Clear();
}
const ::cosmo::pb::Source& RankedSources::sources(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RankedSources.sources)
  return sources_.Get(index);
}
::cosmo::pb::Source* RankedSources::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RankedSources.sources)
  return sources_.Mutable(index);
}
::cosmo::pb::Source* RankedSources::add_sources() {
  // @@protoc_insertion_point(field_add:recostream.pb.RankedSources.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
RankedSources::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RankedSources.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
RankedSources::sources() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RankedSources.sources)
  return sources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankedCategories::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankedCategories::RankedCategories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.RankedCategories)
}
RankedCategories::RankedCategories(const RankedCategories& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.RankedCategories)
}

void RankedCategories::SharedCtor() {
  _cached_size_ = 0;
}

RankedCategories::~RankedCategories() {
  // @@protoc_insertion_point(destructor:recostream.pb.RankedCategories)
  SharedDtor();
}

void RankedCategories::SharedDtor() {
}

void RankedCategories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankedCategories::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankedCategories& RankedCategories::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankedCategories* RankedCategories::New(::google::protobuf::Arena* arena) const {
  RankedCategories* n = new RankedCategories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankedCategories::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.RankedCategories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankedCategories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.RankedCategories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.Category categories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.RankedCategories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.RankedCategories)
  return false;
#undef DO_
}

void RankedCategories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.RankedCategories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Category categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.RankedCategories)
}

::google::protobuf::uint8* RankedCategories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.RankedCategories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.Category categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.RankedCategories)
  return target;
}

size_t RankedCategories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.RankedCategories)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.Category categories = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankedCategories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.RankedCategories)
  GOOGLE_DCHECK_NE(&from, this);
  const RankedCategories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankedCategories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.RankedCategories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.RankedCategories)
    MergeFrom(*source);
  }
}

void RankedCategories::MergeFrom(const RankedCategories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.RankedCategories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
}

void RankedCategories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.RankedCategories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankedCategories::CopyFrom(const RankedCategories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.RankedCategories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankedCategories::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->categories())) return false;
  return true;
}

void RankedCategories::Swap(RankedCategories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankedCategories::InternalSwap(RankedCategories* other) {
  using std::swap;
  categories_.InternalSwap(&other->categories_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankedCategories::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankedCategories

// repeated .cosmo.pb.Category categories = 1;
int RankedCategories::categories_size() const {
  return categories_.size();
}
void RankedCategories::clear_categories() {
  categories_.Clear();
}
const ::cosmo::pb::Category& RankedCategories::categories(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RankedCategories.categories)
  return categories_.Get(index);
}
::cosmo::pb::Category* RankedCategories::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RankedCategories.categories)
  return categories_.Mutable(index);
}
::cosmo::pb::Category* RankedCategories::add_categories() {
  // @@protoc_insertion_point(field_add:recostream.pb.RankedCategories.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
RankedCategories::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RankedCategories.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
RankedCategories::categories() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RankedCategories.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoResult::kMetaInfoFieldNumber;
const int RecoResult::kItemsFieldNumber;
const int RecoResult::kDebugInfoFieldNumber;
const int RecoResult::kRankedSourcesFieldNumber;
const int RecoResult::kRankedCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoResult::RecoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.RecoResult)
}
RecoResult::RecoResult(const RecoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta_info()) {
    meta_info_ = new ::recostream::pb::ResultMetaInfo(*from.meta_info_);
  } else {
    meta_info_ = NULL;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::recostream::pb::DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = NULL;
  }
  if (from.has_ranked_sources()) {
    ranked_sources_ = new ::recostream::pb::RankedSources(*from.ranked_sources_);
  } else {
    ranked_sources_ = NULL;
  }
  if (from.has_ranked_categories()) {
    ranked_categories_ = new ::recostream::pb::RankedCategories(*from.ranked_categories_);
  } else {
    ranked_categories_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.RecoResult)
}

void RecoResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&meta_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranked_categories_) -
      reinterpret_cast<char*>(&meta_info_)) + sizeof(ranked_categories_));
}

RecoResult::~RecoResult() {
  // @@protoc_insertion_point(destructor:recostream.pb.RecoResult)
  SharedDtor();
}

void RecoResult::SharedDtor() {
  if (this != internal_default_instance()) delete meta_info_;
  if (this != internal_default_instance()) delete debug_info_;
  if (this != internal_default_instance()) delete ranked_sources_;
  if (this != internal_default_instance()) delete ranked_categories_;
}

void RecoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoResult::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecoResult& RecoResult::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecoResult* RecoResult::New(::google::protobuf::Arena* arena) const {
  RecoResult* n = new RecoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.RecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(meta_info_ != NULL);
      meta_info_->::recostream::pb::ResultMetaInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debug_info_ != NULL);
      debug_info_->::recostream::pb::DebugInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ranked_sources_ != NULL);
      ranked_sources_->::recostream::pb::RankedSources::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ranked_categories_ != NULL);
      ranked_categories_->::recostream::pb::RankedCategories::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.RecoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .recostream.pb.ResultMetaInfo meta_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .recostream.pb.RecoResultItem items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.DebugInfo debug_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.RankedSources ranked_sources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranked_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.RankedCategories ranked_categories = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranked_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.RecoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.RecoResult)
  return false;
#undef DO_
}

void RecoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.RecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.ResultMetaInfo meta_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->meta_info_, output);
  }

  // repeated .recostream.pb.RecoResultItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(static_cast<int>(i)), output);
  }

  // optional .recostream.pb.DebugInfo debug_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->debug_info_, output);
  }

  // optional .recostream.pb.RankedSources ranked_sources = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ranked_sources_, output);
  }

  // optional .recostream.pb.RankedCategories ranked_categories = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ranked_categories_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.RecoResult)
}

::google::protobuf::uint8* RecoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.RecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.ResultMetaInfo meta_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->meta_info_, deterministic, target);
  }

  // repeated .recostream.pb.RecoResultItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items(static_cast<int>(i)), deterministic, target);
  }

  // optional .recostream.pb.DebugInfo debug_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->debug_info_, deterministic, target);
  }

  // optional .recostream.pb.RankedSources ranked_sources = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ranked_sources_, deterministic, target);
  }

  // optional .recostream.pb.RankedCategories ranked_categories = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ranked_categories_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.RecoResult)
  return target;
}

size_t RecoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.RecoResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .recostream.pb.RecoResultItem items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .recostream.pb.ResultMetaInfo meta_info = 2;
    if (has_meta_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meta_info_);
    }

    // optional .recostream.pb.DebugInfo debug_info = 4;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_info_);
    }

    // optional .recostream.pb.RankedSources ranked_sources = 5;
    if (has_ranked_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ranked_sources_);
    }

    // optional .recostream.pb.RankedCategories ranked_categories = 6;
    if (has_ranked_categories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ranked_categories_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.RecoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.RecoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.RecoResult)
    MergeFrom(*source);
  }
}

void RecoResult::MergeFrom(const RecoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.RecoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_meta_info()->::recostream::pb::ResultMetaInfo::MergeFrom(from.meta_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_debug_info()->::recostream::pb::DebugInfo::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ranked_sources()->::recostream::pb::RankedSources::MergeFrom(from.ranked_sources());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ranked_categories()->::recostream::pb::RankedCategories::MergeFrom(from.ranked_categories());
    }
  }
}

void RecoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.RecoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoResult::CopyFrom(const RecoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.RecoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoResult::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_meta_info()) {
    if (!this->meta_info_->IsInitialized()) return false;
  }
  if (has_debug_info()) {
    if (!this->debug_info_->IsInitialized()) return false;
  }
  if (has_ranked_sources()) {
    if (!this->ranked_sources_->IsInitialized()) return false;
  }
  if (has_ranked_categories()) {
    if (!this->ranked_categories_->IsInitialized()) return false;
  }
  return true;
}

void RecoResult::Swap(RecoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoResult::InternalSwap(RecoResult* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(meta_info_, other->meta_info_);
  swap(debug_info_, other->debug_info_);
  swap(ranked_sources_, other->ranked_sources_);
  swap(ranked_categories_, other->ranked_categories_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecoResult::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecoResult

// optional .recostream.pb.ResultMetaInfo meta_info = 2;
bool RecoResult::has_meta_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecoResult::set_has_meta_info() {
  _has_bits_[0] |= 0x00000001u;
}
void RecoResult::clear_has_meta_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecoResult::clear_meta_info() {
  if (meta_info_ != NULL) meta_info_->::recostream::pb::ResultMetaInfo::Clear();
  clear_has_meta_info();
}
const ::recostream::pb::ResultMetaInfo& RecoResult::meta_info() const {
  const ::recostream::pb::ResultMetaInfo* p = meta_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::ResultMetaInfo*>(
      &::recostream::pb::_ResultMetaInfo_default_instance_);
}
::recostream::pb::ResultMetaInfo* RecoResult::mutable_meta_info() {
  set_has_meta_info();
  if (meta_info_ == NULL) {
    meta_info_ = new ::recostream::pb::ResultMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.meta_info)
  return meta_info_;
}
::recostream::pb::ResultMetaInfo* RecoResult::release_meta_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.meta_info)
  clear_has_meta_info();
  ::recostream::pb::ResultMetaInfo* temp = meta_info_;
  meta_info_ = NULL;
  return temp;
}
void RecoResult::set_allocated_meta_info(::recostream::pb::ResultMetaInfo* meta_info) {
  delete meta_info_;
  meta_info_ = meta_info;
  if (meta_info) {
    set_has_meta_info();
  } else {
    clear_has_meta_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.meta_info)
}

// repeated .recostream.pb.RecoResultItem items = 3;
int RecoResult::items_size() const {
  return items_.size();
}
void RecoResult::clear_items() {
  items_.Clear();
}
const ::recostream::pb::RecoResultItem& RecoResult::items(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.items)
  return items_.Get(index);
}
::recostream::pb::RecoResultItem* RecoResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.items)
  return items_.Mutable(index);
}
::recostream::pb::RecoResultItem* RecoResult::add_items() {
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResult.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >*
RecoResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RecoResult.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >&
RecoResult::items() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RecoResult.items)
  return items_;
}

// optional .recostream.pb.DebugInfo debug_info = 4;
bool RecoResult::has_debug_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecoResult::set_has_debug_info() {
  _has_bits_[0] |= 0x00000002u;
}
void RecoResult::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecoResult::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::recostream::pb::DebugInfo::Clear();
  clear_has_debug_info();
}
const ::recostream::pb::DebugInfo& RecoResult::debug_info() const {
  const ::recostream::pb::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DebugInfo*>(
      &::recostream::pb::_DebugInfo_default_instance_);
}
::recostream::pb::DebugInfo* RecoResult::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::recostream::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.debug_info)
  return debug_info_;
}
::recostream::pb::DebugInfo* RecoResult::release_debug_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.debug_info)
  clear_has_debug_info();
  ::recostream::pb::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
void RecoResult::set_allocated_debug_info(::recostream::pb::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.debug_info)
}

// optional .recostream.pb.RankedSources ranked_sources = 5;
bool RecoResult::has_ranked_sources() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecoResult::set_has_ranked_sources() {
  _has_bits_[0] |= 0x00000004u;
}
void RecoResult::clear_has_ranked_sources() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecoResult::clear_ranked_sources() {
  if (ranked_sources_ != NULL) ranked_sources_->::recostream::pb::RankedSources::Clear();
  clear_has_ranked_sources();
}
const ::recostream::pb::RankedSources& RecoResult::ranked_sources() const {
  const ::recostream::pb::RankedSources* p = ranked_sources_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.ranked_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RankedSources*>(
      &::recostream::pb::_RankedSources_default_instance_);
}
::recostream::pb::RankedSources* RecoResult::mutable_ranked_sources() {
  set_has_ranked_sources();
  if (ranked_sources_ == NULL) {
    ranked_sources_ = new ::recostream::pb::RankedSources;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.ranked_sources)
  return ranked_sources_;
}
::recostream::pb::RankedSources* RecoResult::release_ranked_sources() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.ranked_sources)
  clear_has_ranked_sources();
  ::recostream::pb::RankedSources* temp = ranked_sources_;
  ranked_sources_ = NULL;
  return temp;
}
void RecoResult::set_allocated_ranked_sources(::recostream::pb::RankedSources* ranked_sources) {
  delete ranked_sources_;
  ranked_sources_ = ranked_sources;
  if (ranked_sources) {
    set_has_ranked_sources();
  } else {
    clear_has_ranked_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.ranked_sources)
}

// optional .recostream.pb.RankedCategories ranked_categories = 6;
bool RecoResult::has_ranked_categories() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecoResult::set_has_ranked_categories() {
  _has_bits_[0] |= 0x00000008u;
}
void RecoResult::clear_has_ranked_categories() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecoResult::clear_ranked_categories() {
  if (ranked_categories_ != NULL) ranked_categories_->::recostream::pb::RankedCategories::Clear();
  clear_has_ranked_categories();
}
const ::recostream::pb::RankedCategories& RecoResult::ranked_categories() const {
  const ::recostream::pb::RankedCategories* p = ranked_categories_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.ranked_categories)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RankedCategories*>(
      &::recostream::pb::_RankedCategories_default_instance_);
}
::recostream::pb::RankedCategories* RecoResult::mutable_ranked_categories() {
  set_has_ranked_categories();
  if (ranked_categories_ == NULL) {
    ranked_categories_ = new ::recostream::pb::RankedCategories;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.ranked_categories)
  return ranked_categories_;
}
::recostream::pb::RankedCategories* RecoResult::release_ranked_categories() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.ranked_categories)
  clear_has_ranked_categories();
  ::recostream::pb::RankedCategories* temp = ranked_categories_;
  ranked_categories_ = NULL;
  return temp;
}
void RecoResult::set_allocated_ranked_categories(::recostream::pb::RankedCategories* ranked_categories) {
  delete ranked_categories_;
  ranked_categories_ = ranked_categories;
  if (ranked_categories) {
    set_has_ranked_categories();
  } else {
    clear_has_ranked_categories();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.ranked_categories)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackedRecoResult::kStreamIdFieldNumber;
const int PackedRecoResult::kHashFieldNumber;
const int PackedRecoResult::kTimestampFieldNumber;
const int PackedRecoResult::kRecoResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackedRecoResult::PackedRecoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.PackedRecoResult)
}
PackedRecoResult::PackedRecoResult(const PackedRecoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_id()) {
    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_reco_result()) {
    reco_result_ = new ::recostream::pb::RecoResult(*from.reco_result_);
  } else {
    reco_result_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.PackedRecoResult)
}

void PackedRecoResult::SharedCtor() {
  _cached_size_ = 0;
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reco_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&reco_result_)) + sizeof(timestamp_));
}

PackedRecoResult::~PackedRecoResult() {
  // @@protoc_insertion_point(destructor:recostream.pb.PackedRecoResult)
  SharedDtor();
}

void PackedRecoResult::SharedDtor() {
  stream_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reco_result_;
}

void PackedRecoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackedRecoResult::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackedRecoResult& PackedRecoResult::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackedRecoResult* PackedRecoResult::New(::google::protobuf::Arena* arena) const {
  PackedRecoResult* n = new PackedRecoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackedRecoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.PackedRecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!stream_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reco_result_ != NULL);
      reco_result_->::recostream::pb::RecoResult::Clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackedRecoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.PackedRecoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_id().data(), static_cast<int>(this->stream_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.PackedRecoResult.stream_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.PackedRecoResult.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .recostream.pb.RecoResult reco_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reco_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.PackedRecoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.PackedRecoResult)
  return false;
#undef DO_
}

void PackedRecoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.PackedRecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PackedRecoResult.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PackedRecoResult.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // required int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // required .recostream.pb.RecoResult reco_result = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reco_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.PackedRecoResult)
}

::google::protobuf::uint8* PackedRecoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.PackedRecoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_id().data(), static_cast<int>(this->stream_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PackedRecoResult.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PackedRecoResult.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required int64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // required .recostream.pb.RecoResult reco_result = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reco_result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.PackedRecoResult)
  return target;
}

size_t PackedRecoResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.PackedRecoResult)
  size_t total_size = 0;

  if (has_stream_id()) {
    // required string stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  if (has_hash()) {
    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_reco_result()) {
    // required .recostream.pb.RecoResult reco_result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reco_result_);
  }

  if (has_timestamp()) {
    // required int64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t PackedRecoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.PackedRecoResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string stream_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());

    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required .recostream.pb.RecoResult reco_result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reco_result_);

    // required int64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackedRecoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.PackedRecoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PackedRecoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackedRecoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.PackedRecoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.PackedRecoResult)
    MergeFrom(*source);
  }
}

void PackedRecoResult::MergeFrom(const PackedRecoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.PackedRecoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stream_id();
      stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reco_result()->::recostream::pb::RecoResult::MergeFrom(from.reco_result());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackedRecoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.PackedRecoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackedRecoResult::CopyFrom(const PackedRecoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.PackedRecoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedRecoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_reco_result()) {
    if (!this->reco_result_->IsInitialized()) return false;
  }
  return true;
}

void PackedRecoResult::Swap(PackedRecoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackedRecoResult::InternalSwap(PackedRecoResult* other) {
  using std::swap;
  stream_id_.Swap(&other->stream_id_);
  hash_.Swap(&other->hash_);
  swap(reco_result_, other->reco_result_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackedRecoResult::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackedRecoResult

// required string stream_id = 1;
bool PackedRecoResult::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackedRecoResult::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PackedRecoResult::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackedRecoResult::clear_stream_id() {
  stream_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_id();
}
const ::std::string& PackedRecoResult::stream_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.stream_id)
  return stream_id_.GetNoArena();
}
void PackedRecoResult::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.stream_id)
}
#if LANG_CXX11
void PackedRecoResult::set_stream_id(::std::string&& value) {
  set_has_stream_id();
  stream_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PackedRecoResult.stream_id)
}
#endif
void PackedRecoResult::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PackedRecoResult.stream_id)
}
void PackedRecoResult::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PackedRecoResult.stream_id)
}
::std::string* PackedRecoResult::mutable_stream_id() {
  set_has_stream_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.stream_id)
  return stream_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackedRecoResult::release_stream_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.stream_id)
  clear_has_stream_id();
  return stream_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackedRecoResult::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    set_has_stream_id();
  } else {
    clear_has_stream_id();
  }
  stream_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.stream_id)
}

// required string hash = 2;
bool PackedRecoResult::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackedRecoResult::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void PackedRecoResult::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackedRecoResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& PackedRecoResult::hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.hash)
  return hash_.GetNoArena();
}
void PackedRecoResult::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.hash)
}
#if LANG_CXX11
void PackedRecoResult::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PackedRecoResult.hash)
}
#endif
void PackedRecoResult::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PackedRecoResult.hash)
}
void PackedRecoResult::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PackedRecoResult.hash)
}
::std::string* PackedRecoResult::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackedRecoResult::release_hash() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackedRecoResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.hash)
}

// required int64 timestamp = 3;
bool PackedRecoResult::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PackedRecoResult::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void PackedRecoResult::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void PackedRecoResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PackedRecoResult::timestamp() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.timestamp)
  return timestamp_;
}
void PackedRecoResult::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.timestamp)
}

// required .recostream.pb.RecoResult reco_result = 4;
bool PackedRecoResult::has_reco_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PackedRecoResult::set_has_reco_result() {
  _has_bits_[0] |= 0x00000004u;
}
void PackedRecoResult::clear_has_reco_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void PackedRecoResult::clear_reco_result() {
  if (reco_result_ != NULL) reco_result_->::recostream::pb::RecoResult::Clear();
  clear_has_reco_result();
}
const ::recostream::pb::RecoResult& PackedRecoResult::reco_result() const {
  const ::recostream::pb::RecoResult* p = reco_result_;
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.reco_result)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RecoResult*>(
      &::recostream::pb::_RecoResult_default_instance_);
}
::recostream::pb::RecoResult* PackedRecoResult::mutable_reco_result() {
  set_has_reco_result();
  if (reco_result_ == NULL) {
    reco_result_ = new ::recostream::pb::RecoResult;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.reco_result)
  return reco_result_;
}
::recostream::pb::RecoResult* PackedRecoResult::release_reco_result() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.reco_result)
  clear_has_reco_result();
  ::recostream::pb::RecoResult* temp = reco_result_;
  reco_result_ = NULL;
  return temp;
}
void PackedRecoResult::set_allocated_reco_result(::recostream::pb::RecoResult* reco_result) {
  delete reco_result_;
  reco_result_ = reco_result;
  if (reco_result) {
    set_has_reco_result();
  } else {
    clear_has_reco_result();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.reco_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedPromoInfo::kReadupPixelsFieldNumber;
const int SavedPromoInfo::kRedirectPixelsFieldNumber;
const int SavedPromoInfo::kPulseUtmLabelsFieldNumber;
const int SavedPromoInfo::kIdAcFieldNumber;
const int SavedPromoInfo::kRubPriceFieldNumber;
const int SavedPromoInfo::kUserGeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedPromoInfo::SavedPromoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.SavedPromoInfo)
}
SavedPromoInfo::SavedPromoInfo(const SavedPromoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      readup_pixels_(from.readup_pixels_),
      redirect_pixels_(from.redirect_pixels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pulse_utm_labels_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pulse_utm_labels()) {
    pulse_utm_labels_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pulse_utm_labels_);
  }
  rub_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rub_price()) {
    rub_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rub_price_);
  }
  user_geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_geo()) {
    user_geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_geo_);
  }
  id_ac_ = from.id_ac_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.SavedPromoInfo)
}

void SavedPromoInfo::SharedCtor() {
  _cached_size_ = 0;
  pulse_utm_labels_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rub_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ac_ = GOOGLE_LONGLONG(0);
}

SavedPromoInfo::~SavedPromoInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.SavedPromoInfo)
  SharedDtor();
}

void SavedPromoInfo::SharedDtor() {
  pulse_utm_labels_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rub_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SavedPromoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedPromoInfo::descriptor() {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SavedPromoInfo& SavedPromoInfo::default_instance() {
  protobuf_recostream_5freco_5fresult_2eproto::InitDefaults();
  return *internal_default_instance();
}

SavedPromoInfo* SavedPromoInfo::New(::google::protobuf::Arena* arena) const {
  SavedPromoInfo* n = new SavedPromoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SavedPromoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.SavedPromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readup_pixels_.Clear();
  redirect_pixels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!pulse_utm_labels_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pulse_utm_labels_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!rub_price_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rub_price_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!user_geo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_geo_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ac_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SavedPromoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.SavedPromoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string readup_pixels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_readup_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readup_pixels(this->readup_pixels_size() - 1).data(),
            static_cast<int>(this->readup_pixels(this->readup_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SavedPromoInfo.readup_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirect_pixels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirect_pixels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_pixels(this->redirect_pixels_size() - 1).data(),
            static_cast<int>(this->redirect_pixels(this->redirect_pixels_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SavedPromoInfo.redirect_pixels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pulse_utm_labels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pulse_utm_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SavedPromoInfo.pulse_utm_labels");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 id_ac = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_id_ac();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_ac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rub_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rub_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rub_price().data(), static_cast<int>(this->rub_price().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SavedPromoInfo.rub_price");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_geo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_geo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_geo().data(), static_cast<int>(this->user_geo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SavedPromoInfo.user_geo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.SavedPromoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.SavedPromoInfo)
  return false;
#undef DO_
}

void SavedPromoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.SavedPromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string readup_pixels = 1;
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup_pixels(i).data(), static_cast<int>(this->readup_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.readup_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->readup_pixels(i), output);
  }

  // repeated string redirect_pixels = 2;
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_pixels(i).data(), static_cast<int>(this->redirect_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.redirect_pixels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->redirect_pixels(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pulse_utm_labels = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.pulse_utm_labels");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pulse_utm_labels(), output);
  }

  // optional int64 id_ac = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->id_ac(), output);
  }

  // optional string rub_price = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rub_price().data(), static_cast<int>(this->rub_price().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.rub_price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rub_price(), output);
  }

  // optional string user_geo = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_geo().data(), static_cast<int>(this->user_geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.user_geo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->user_geo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.SavedPromoInfo)
}

::google::protobuf::uint8* SavedPromoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.SavedPromoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string readup_pixels = 1;
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readup_pixels(i).data(), static_cast<int>(this->readup_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.readup_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->readup_pixels(i), target);
  }

  // repeated string redirect_pixels = 2;
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_pixels(i).data(), static_cast<int>(this->redirect_pixels(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.redirect_pixels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->redirect_pixels(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pulse_utm_labels = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pulse_utm_labels().data(), static_cast<int>(this->pulse_utm_labels().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.pulse_utm_labels");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pulse_utm_labels(), target);
  }

  // optional int64 id_ac = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->id_ac(), target);
  }

  // optional string rub_price = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rub_price().data(), static_cast<int>(this->rub_price().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.rub_price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rub_price(), target);
  }

  // optional string user_geo = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_geo().data(), static_cast<int>(this->user_geo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SavedPromoInfo.user_geo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->user_geo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.SavedPromoInfo)
  return target;
}

size_t SavedPromoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.SavedPromoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string readup_pixels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->readup_pixels_size());
  for (int i = 0, n = this->readup_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->readup_pixels(i));
  }

  // repeated string redirect_pixels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->redirect_pixels_size());
  for (int i = 0, n = this->redirect_pixels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirect_pixels(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string pulse_utm_labels = 10;
    if (has_pulse_utm_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pulse_utm_labels());
    }

    // optional string rub_price = 12;
    if (has_rub_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rub_price());
    }

    // optional string user_geo = 13;
    if (has_user_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_geo());
    }

    // optional int64 id_ac = 11;
    if (has_id_ac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id_ac());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedPromoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.SavedPromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedPromoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedPromoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.SavedPromoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.SavedPromoInfo)
    MergeFrom(*source);
  }
}

void SavedPromoInfo::MergeFrom(const SavedPromoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.SavedPromoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readup_pixels_.MergeFrom(from.readup_pixels_);
  redirect_pixels_.MergeFrom(from.redirect_pixels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pulse_utm_labels();
      pulse_utm_labels_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pulse_utm_labels_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_rub_price();
      rub_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rub_price_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_geo();
      user_geo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_geo_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ac_ = from.id_ac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SavedPromoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.SavedPromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedPromoInfo::CopyFrom(const SavedPromoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.SavedPromoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedPromoInfo::IsInitialized() const {
  return true;
}

void SavedPromoInfo::Swap(SavedPromoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SavedPromoInfo::InternalSwap(SavedPromoInfo* other) {
  using std::swap;
  readup_pixels_.InternalSwap(&other->readup_pixels_);
  redirect_pixels_.InternalSwap(&other->redirect_pixels_);
  pulse_utm_labels_.Swap(&other->pulse_utm_labels_);
  rub_price_.Swap(&other->rub_price_);
  user_geo_.Swap(&other->user_geo_);
  swap(id_ac_, other->id_ac_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SavedPromoInfo::GetMetadata() const {
  protobuf_recostream_5freco_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5freco_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SavedPromoInfo

// repeated string readup_pixels = 1;
int SavedPromoInfo::readup_pixels_size() const {
  return readup_pixels_.size();
}
void SavedPromoInfo::clear_readup_pixels() {
  readup_pixels_.Clear();
}
const ::std::string& SavedPromoInfo::readup_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Get(index);
}
::std::string* SavedPromoInfo::mutable_readup_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Mutable(index);
}
void SavedPromoInfo::set_readup_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SavedPromoInfo::set_readup_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void SavedPromoInfo::set_readup_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.readup_pixels)
}
void SavedPromoInfo::set_readup_pixels(int index, const char* value, size_t size) {
  readup_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.readup_pixels)
}
::std::string* SavedPromoInfo::add_readup_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Add();
}
void SavedPromoInfo::add_readup_pixels(const ::std::string& value) {
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.readup_pixels)
}
#if LANG_CXX11
void SavedPromoInfo::add_readup_pixels(::std::string&& value) {
  readup_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.readup_pixels)
}
#endif
void SavedPromoInfo::add_readup_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.SavedPromoInfo.readup_pixels)
}
void SavedPromoInfo::add_readup_pixels(const char* value, size_t size) {
  readup_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.SavedPromoInfo.readup_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SavedPromoInfo::readup_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SavedPromoInfo::mutable_readup_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.SavedPromoInfo.readup_pixels)
  return &readup_pixels_;
}

// repeated string redirect_pixels = 2;
int SavedPromoInfo::redirect_pixels_size() const {
  return redirect_pixels_.size();
}
void SavedPromoInfo::clear_redirect_pixels() {
  redirect_pixels_.Clear();
}
const ::std::string& SavedPromoInfo::redirect_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Get(index);
}
::std::string* SavedPromoInfo::mutable_redirect_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Mutable(index);
}
void SavedPromoInfo::set_redirect_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SavedPromoInfo::set_redirect_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
void SavedPromoInfo::set_redirect_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.redirect_pixels)
}
void SavedPromoInfo::set_redirect_pixels(int index, const char* value, size_t size) {
  redirect_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.redirect_pixels)
}
::std::string* SavedPromoInfo::add_redirect_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Add();
}
void SavedPromoInfo::add_redirect_pixels(const ::std::string& value) {
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.redirect_pixels)
}
#if LANG_CXX11
void SavedPromoInfo::add_redirect_pixels(::std::string&& value) {
  redirect_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.redirect_pixels)
}
#endif
void SavedPromoInfo::add_redirect_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.SavedPromoInfo.redirect_pixels)
}
void SavedPromoInfo::add_redirect_pixels(const char* value, size_t size) {
  redirect_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.SavedPromoInfo.redirect_pixels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SavedPromoInfo::redirect_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SavedPromoInfo::mutable_redirect_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.SavedPromoInfo.redirect_pixels)
  return &redirect_pixels_;
}

// optional string pulse_utm_labels = 10;
bool SavedPromoInfo::has_pulse_utm_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SavedPromoInfo::set_has_pulse_utm_labels() {
  _has_bits_[0] |= 0x00000001u;
}
void SavedPromoInfo::clear_has_pulse_utm_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
void SavedPromoInfo::clear_pulse_utm_labels() {
  pulse_utm_labels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pulse_utm_labels();
}
const ::std::string& SavedPromoInfo::pulse_utm_labels() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.GetNoArena();
}
void SavedPromoInfo::set_pulse_utm_labels(const ::std::string& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
#if LANG_CXX11
void SavedPromoInfo::set_pulse_utm_labels(::std::string&& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
#endif
void SavedPromoInfo::set_pulse_utm_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
void SavedPromoInfo::set_pulse_utm_labels(const char* value, size_t size) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
::std::string* SavedPromoInfo::mutable_pulse_utm_labels() {
  set_has_pulse_utm_labels();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SavedPromoInfo::release_pulse_utm_labels() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  clear_has_pulse_utm_labels();
  return pulse_utm_labels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SavedPromoInfo::set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels) {
  if (pulse_utm_labels != NULL) {
    set_has_pulse_utm_labels();
  } else {
    clear_has_pulse_utm_labels();
  }
  pulse_utm_labels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pulse_utm_labels);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}

// optional int64 id_ac = 11;
bool SavedPromoInfo::has_id_ac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SavedPromoInfo::set_has_id_ac() {
  _has_bits_[0] |= 0x00000008u;
}
void SavedPromoInfo::clear_has_id_ac() {
  _has_bits_[0] &= ~0x00000008u;
}
void SavedPromoInfo::clear_id_ac() {
  id_ac_ = GOOGLE_LONGLONG(0);
  clear_has_id_ac();
}
::google::protobuf::int64 SavedPromoInfo::id_ac() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.id_ac)
  return id_ac_;
}
void SavedPromoInfo::set_id_ac(::google::protobuf::int64 value) {
  set_has_id_ac();
  id_ac_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.id_ac)
}

// optional string rub_price = 12;
bool SavedPromoInfo::has_rub_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SavedPromoInfo::set_has_rub_price() {
  _has_bits_[0] |= 0x00000002u;
}
void SavedPromoInfo::clear_has_rub_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void SavedPromoInfo::clear_rub_price() {
  rub_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rub_price();
}
const ::std::string& SavedPromoInfo::rub_price() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.rub_price)
  return rub_price_.GetNoArena();
}
void SavedPromoInfo::set_rub_price(const ::std::string& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.rub_price)
}
#if LANG_CXX11
void SavedPromoInfo::set_rub_price(::std::string&& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.rub_price)
}
#endif
void SavedPromoInfo::set_rub_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.rub_price)
}
void SavedPromoInfo::set_rub_price(const char* value, size_t size) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.rub_price)
}
::std::string* SavedPromoInfo::mutable_rub_price() {
  set_has_rub_price();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.rub_price)
  return rub_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SavedPromoInfo::release_rub_price() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.rub_price)
  clear_has_rub_price();
  return rub_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SavedPromoInfo::set_allocated_rub_price(::std::string* rub_price) {
  if (rub_price != NULL) {
    set_has_rub_price();
  } else {
    clear_has_rub_price();
  }
  rub_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rub_price);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.rub_price)
}

// optional string user_geo = 13;
bool SavedPromoInfo::has_user_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SavedPromoInfo::set_has_user_geo() {
  _has_bits_[0] |= 0x00000004u;
}
void SavedPromoInfo::clear_has_user_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
void SavedPromoInfo::clear_user_geo() {
  user_geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_geo();
}
const ::std::string& SavedPromoInfo::user_geo() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.user_geo)
  return user_geo_.GetNoArena();
}
void SavedPromoInfo::set_user_geo(const ::std::string& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.user_geo)
}
#if LANG_CXX11
void SavedPromoInfo::set_user_geo(::std::string&& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.user_geo)
}
#endif
void SavedPromoInfo::set_user_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.user_geo)
}
void SavedPromoInfo::set_user_geo(const char* value, size_t size) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.user_geo)
}
::std::string* SavedPromoInfo::mutable_user_geo() {
  set_has_user_geo();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.user_geo)
  return user_geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SavedPromoInfo::release_user_geo() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.user_geo)
  clear_has_user_geo();
  return user_geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SavedPromoInfo::set_allocated_user_geo(::std::string* user_geo) {
  if (user_geo != NULL) {
    set_has_user_geo();
  } else {
    clear_has_user_geo();
  }
  user_geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_geo);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.user_geo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace recostream

// @@protoc_insertion_point(global_scope)
