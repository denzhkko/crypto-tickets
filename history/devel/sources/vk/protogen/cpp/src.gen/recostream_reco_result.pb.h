// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recostream_reco_result.proto

#ifndef PROTOBUF_recostream_5freco_5fresult_2eproto__INCLUDED
#define PROTOBUF_recostream_5freco_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "recostream_pixel_info.pb.h"
#include "cosmo_result.pb.h"
// @@protoc_insertion_point(includes)
namespace recostream {
namespace pb {
class Advert;
class AdvertDefaultTypeInternal;
extern AdvertDefaultTypeInternal _Advert_default_instance_;
class DebugInfo;
class DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class DocumentImage;
class DocumentImageDefaultTypeInternal;
extern DocumentImageDefaultTypeInternal _DocumentImage_default_instance_;
class DocumentPixels;
class DocumentPixelsDefaultTypeInternal;
extern DocumentPixelsDefaultTypeInternal _DocumentPixels_default_instance_;
class PackedRecoResult;
class PackedRecoResultDefaultTypeInternal;
extern PackedRecoResultDefaultTypeInternal _PackedRecoResult_default_instance_;
class ProviderDebugInfo;
class ProviderDebugInfoDefaultTypeInternal;
extern ProviderDebugInfoDefaultTypeInternal _ProviderDebugInfo_default_instance_;
class PulseVideo;
class PulseVideoDefaultTypeInternal;
extern PulseVideoDefaultTypeInternal _PulseVideo_default_instance_;
class PulseVideos;
class PulseVideosDefaultTypeInternal;
extern PulseVideosDefaultTypeInternal _PulseVideos_default_instance_;
class RankedCategories;
class RankedCategoriesDefaultTypeInternal;
extern RankedCategoriesDefaultTypeInternal _RankedCategories_default_instance_;
class RankedSources;
class RankedSourcesDefaultTypeInternal;
extern RankedSourcesDefaultTypeInternal _RankedSources_default_instance_;
class RecoResult;
class RecoResultDefaultTypeInternal;
extern RecoResultDefaultTypeInternal _RecoResult_default_instance_;
class RecoResultItem;
class RecoResultItemDefaultTypeInternal;
extern RecoResultItemDefaultTypeInternal _RecoResultItem_default_instance_;
class SavedPromoInfo;
class SavedPromoInfoDefaultTypeInternal;
extern SavedPromoInfoDefaultTypeInternal _SavedPromoInfo_default_instance_;
class SourceInfo;
class SourceInfoDefaultTypeInternal;
extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
}  // namespace pb
}  // namespace recostream

namespace recostream {
namespace pb {

namespace protobuf_recostream_5freco_5fresult_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_recostream_5freco_5fresult_2eproto

// ===================================================================

class DocumentImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.DocumentImage) */ {
 public:
  DocumentImage();
  virtual ~DocumentImage();

  DocumentImage(const DocumentImage& from);

  inline DocumentImage& operator=(const DocumentImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentImage(DocumentImage&& from) noexcept
    : DocumentImage() {
    *this = ::std::move(from);
  }

  inline DocumentImage& operator=(DocumentImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentImage& default_instance();

  static inline const DocumentImage* internal_default_instance() {
    return reinterpret_cast<const DocumentImage*>(
               &_DocumentImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DocumentImage* other);
  friend void swap(DocumentImage& a, DocumentImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentImage* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentImage& from);
  void MergeFrom(const DocumentImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 7;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string key = 4;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string mb_name = 5;
  bool has_mb_name() const;
  void clear_mb_name();
  static const int kMbNameFieldNumber = 5;
  const ::std::string& mb_name() const;
  void set_mb_name(const ::std::string& value);
  #if LANG_CXX11
  void set_mb_name(::std::string&& value);
  #endif
  void set_mb_name(const char* value);
  void set_mb_name(const char* value, size_t size);
  ::std::string* mutable_mb_name();
  ::std::string* release_mb_name();
  void set_allocated_mb_name(::std::string* mb_name);

  // optional string img_url = 6;
  bool has_img_url() const;
  void clear_img_url();
  static const int kImgUrlFieldNumber = 6;
  const ::std::string& img_url() const;
  void set_img_url(const ::std::string& value);
  #if LANG_CXX11
  void set_img_url(::std::string&& value);
  #endif
  void set_img_url(const char* value);
  void set_img_url(const char* value, size_t size);
  ::std::string* mutable_img_url();
  ::std::string* release_img_url();
  void set_allocated_img_url(::std::string* img_url);

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.DocumentImage)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_url();
  void clear_has_url();
  void set_has_key();
  void clear_has_key();
  void set_has_mb_name();
  void clear_has_mb_name();
  void set_has_img_url();
  void clear_has_img_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr mb_name_;
  ::google::protobuf::internal::ArenaStringPtr img_url_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentPixels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.DocumentPixels) */ {
 public:
  DocumentPixels();
  virtual ~DocumentPixels();

  DocumentPixels(const DocumentPixels& from);

  inline DocumentPixels& operator=(const DocumentPixels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentPixels(DocumentPixels&& from) noexcept
    : DocumentPixels() {
    *this = ::std::move(from);
  }

  inline DocumentPixels& operator=(DocumentPixels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentPixels& default_instance();

  static inline const DocumentPixels* internal_default_instance() {
    return reinterpret_cast<const DocumentPixels*>(
               &_DocumentPixels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DocumentPixels* other);
  friend void swap(DocumentPixels& a, DocumentPixels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentPixels* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentPixels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentPixels& from);
  void MergeFrom(const DocumentPixels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentPixels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string show_pixels = 1;
  int show_pixels_size() const;
  void clear_show_pixels();
  static const int kShowPixelsFieldNumber = 1;
  const ::std::string& show_pixels(int index) const;
  ::std::string* mutable_show_pixels(int index);
  void set_show_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_show_pixels(int index, ::std::string&& value);
  #endif
  void set_show_pixels(int index, const char* value);
  void set_show_pixels(int index, const char* value, size_t size);
  ::std::string* add_show_pixels();
  void add_show_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_show_pixels(::std::string&& value);
  #endif
  void add_show_pixels(const char* value);
  void add_show_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& show_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_show_pixels();

  // repeated string click_pixels = 2;
  int click_pixels_size() const;
  void clear_click_pixels();
  static const int kClickPixelsFieldNumber = 2;
  const ::std::string& click_pixels(int index) const;
  ::std::string* mutable_click_pixels(int index);
  void set_click_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_click_pixels(int index, ::std::string&& value);
  #endif
  void set_click_pixels(int index, const char* value);
  void set_click_pixels(int index, const char* value, size_t size);
  ::std::string* add_click_pixels();
  void add_click_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_click_pixels(::std::string&& value);
  #endif
  void add_click_pixels(const char* value);
  void add_click_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& click_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_click_pixels();

  // @@protoc_insertion_point(class_scope:recostream.pb.DocumentPixels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> show_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> click_pixels_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.SourceInfo) */ {
 public:
  SourceInfo();
  virtual ~SourceInfo();

  SourceInfo(const SourceInfo& from);

  inline SourceInfo& operator=(const SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceInfo(SourceInfo&& from) noexcept
    : SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceInfo& default_instance();

  static inline const SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceInfo*>(
               &_SourceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SourceInfo* other);
  friend void swap(SourceInfo& a, SourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceInfo& from);
  void MergeFrom(const SourceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string favicon_url = 2;
  bool has_favicon_url() const;
  void clear_favicon_url();
  static const int kFaviconUrlFieldNumber = 2;
  const ::std::string& favicon_url() const;
  void set_favicon_url(const ::std::string& value);
  #if LANG_CXX11
  void set_favicon_url(::std::string&& value);
  #endif
  void set_favicon_url(const char* value);
  void set_favicon_url(const char* value, size_t size);
  ::std::string* mutable_favicon_url();
  ::std::string* release_favicon_url();
  void set_allocated_favicon_url(::std::string* favicon_url);

  // optional string favicon_base64 = 3;
  bool has_favicon_base64() const;
  void clear_favicon_base64();
  static const int kFaviconBase64FieldNumber = 3;
  const ::std::string& favicon_base64() const;
  void set_favicon_base64(const ::std::string& value);
  #if LANG_CXX11
  void set_favicon_base64(::std::string&& value);
  #endif
  void set_favicon_base64(const char* value);
  void set_favicon_base64(const char* value, size_t size);
  ::std::string* mutable_favicon_base64();
  ::std::string* release_favicon_base64();
  void set_allocated_favicon_base64(::std::string* favicon_base64);

  // optional string short_title = 5;
  bool has_short_title() const;
  void clear_short_title();
  static const int kShortTitleFieldNumber = 5;
  const ::std::string& short_title() const;
  void set_short_title(const ::std::string& value);
  #if LANG_CXX11
  void set_short_title(::std::string&& value);
  #endif
  void set_short_title(const char* value);
  void set_short_title(const char* value, size_t size);
  ::std::string* mutable_short_title();
  ::std::string* release_short_title();
  void set_allocated_short_title(::std::string* short_title);

  // optional string type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bool subscribed = 4;
  bool has_subscribed() const;
  void clear_subscribed();
  static const int kSubscribedFieldNumber = 4;
  bool subscribed() const;
  void set_subscribed(bool value);

  // @@protoc_insertion_point(class_scope:recostream.pb.SourceInfo)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_favicon_url();
  void clear_has_favicon_url();
  void set_has_favicon_base64();
  void clear_has_favicon_base64();
  void set_has_subscribed();
  void clear_has_subscribed();
  void set_has_short_title();
  void clear_has_short_title();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr favicon_url_;
  ::google::protobuf::internal::ArenaStringPtr favicon_base64_;
  ::google::protobuf::internal::ArenaStringPtr short_title_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  bool subscribed_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PulseVideos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.PulseVideos) */ {
 public:
  PulseVideos();
  virtual ~PulseVideos();

  PulseVideos(const PulseVideos& from);

  inline PulseVideos& operator=(const PulseVideos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseVideos(PulseVideos&& from) noexcept
    : PulseVideos() {
    *this = ::std::move(from);
  }

  inline PulseVideos& operator=(PulseVideos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseVideos& default_instance();

  static inline const PulseVideos* internal_default_instance() {
    return reinterpret_cast<const PulseVideos*>(
               &_PulseVideos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PulseVideos* other);
  friend void swap(PulseVideos& a, PulseVideos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseVideos* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseVideos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseVideos& from);
  void MergeFrom(const PulseVideos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseVideos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .recostream.pb.PulseVideo main_video = 1;
  bool has_main_video() const;
  void clear_main_video();
  static const int kMainVideoFieldNumber = 1;
  const ::recostream::pb::PulseVideo& main_video() const;
  ::recostream::pb::PulseVideo* mutable_main_video();
  ::recostream::pb::PulseVideo* release_main_video();
  void set_allocated_main_video(::recostream::pb::PulseVideo* main_video);

  // @@protoc_insertion_point(class_scope:recostream.pb.PulseVideos)
 private:
  void set_has_main_video();
  void clear_has_main_video();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::recostream::pb::PulseVideo* main_video_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PulseVideo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.PulseVideo) */ {
 public:
  PulseVideo();
  virtual ~PulseVideo();

  PulseVideo(const PulseVideo& from);

  inline PulseVideo& operator=(const PulseVideo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PulseVideo(PulseVideo&& from) noexcept
    : PulseVideo() {
    *this = ::std::move(from);
  }

  inline PulseVideo& operator=(PulseVideo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PulseVideo& default_instance();

  static inline const PulseVideo* internal_default_instance() {
    return reinterpret_cast<const PulseVideo*>(
               &_PulseVideo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PulseVideo* other);
  friend void swap(PulseVideo& a, PulseVideo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PulseVideo* New() const PROTOBUF_FINAL { return New(NULL); }

  PulseVideo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PulseVideo& from);
  void MergeFrom(const PulseVideo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PulseVideo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string video_url = 1;
  bool has_video_url() const;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 1;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // optional int32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.PulseVideo)
 private:
  void set_has_video_url();
  void clear_has_video_url();
  void set_has_duration();
  void clear_has_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  ::google::protobuf::int32 duration_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .recostream.pb.DocumentImage images = 6;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 6;
  const ::recostream::pb::DocumentImage& images(int index) const;
  ::recostream::pb::DocumentImage* mutable_images(int index);
  ::recostream::pb::DocumentImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
      images() const;

  // required string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // required string title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string url = 5;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string amp_url = 11;
  bool has_amp_url() const;
  void clear_amp_url();
  static const int kAmpUrlFieldNumber = 11;
  const ::std::string& amp_url() const;
  void set_amp_url(const ::std::string& value);
  #if LANG_CXX11
  void set_amp_url(::std::string&& value);
  #endif
  void set_amp_url(const char* value);
  void set_amp_url(const char* value, size_t size);
  ::std::string* mutable_amp_url();
  ::std::string* release_amp_url();
  void set_allocated_amp_url(::std::string* amp_url);

  // optional string slug = 12;
  bool has_slug() const;
  void clear_slug();
  static const int kSlugFieldNumber = 12;
  const ::std::string& slug() const;
  void set_slug(const ::std::string& value);
  #if LANG_CXX11
  void set_slug(::std::string&& value);
  #endif
  void set_slug(const char* value);
  void set_slug(const char* value, size_t size);
  ::std::string* mutable_slug();
  ::std::string* release_slug();
  void set_allocated_slug(::std::string* slug);

  // optional string redirect_url = 14;
  bool has_redirect_url() const;
  void clear_redirect_url();
  static const int kRedirectUrlFieldNumber = 14;
  const ::std::string& redirect_url() const;
  void set_redirect_url(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect_url(::std::string&& value);
  #endif
  void set_redirect_url(const char* value);
  void set_redirect_url(const char* value, size_t size);
  ::std::string* mutable_redirect_url();
  ::std::string* release_redirect_url();
  void set_allocated_redirect_url(::std::string* redirect_url);

  // optional string external_url = 15;
  bool has_external_url() const;
  void clear_external_url();
  static const int kExternalUrlFieldNumber = 15;
  const ::std::string& external_url() const;
  void set_external_url(const ::std::string& value);
  #if LANG_CXX11
  void set_external_url(::std::string&& value);
  #endif
  void set_external_url(const char* value);
  void set_external_url(const char* value, size_t size);
  ::std::string* mutable_external_url();
  ::std::string* release_external_url();
  void set_allocated_external_url(::std::string* external_url);

  // optional string mapping_date = 17;
  bool has_mapping_date() const;
  void clear_mapping_date();
  static const int kMappingDateFieldNumber = 17;
  const ::std::string& mapping_date() const;
  void set_mapping_date(const ::std::string& value);
  #if LANG_CXX11
  void set_mapping_date(::std::string&& value);
  #endif
  void set_mapping_date(const char* value);
  void set_mapping_date(const char* value, size_t size);
  ::std::string* mutable_mapping_date();
  ::std::string* release_mapping_date();
  void set_allocated_mapping_date(::std::string* mapping_date);

  // optional string erid = 18;
  bool has_erid() const;
  void clear_erid();
  static const int kEridFieldNumber = 18;
  const ::std::string& erid() const;
  void set_erid(const ::std::string& value);
  #if LANG_CXX11
  void set_erid(::std::string&& value);
  #endif
  void set_erid(const char* value);
  void set_erid(const char* value, size_t size);
  ::std::string* mutable_erid();
  ::std::string* release_erid();
  void set_allocated_erid(::std::string* erid);

  // optional .recostream.pb.SourceInfo source_info = 9;
  bool has_source_info() const;
  void clear_source_info();
  static const int kSourceInfoFieldNumber = 9;
  const ::recostream::pb::SourceInfo& source_info() const;
  ::recostream::pb::SourceInfo* mutable_source_info();
  ::recostream::pb::SourceInfo* release_source_info();
  void set_allocated_source_info(::recostream::pb::SourceInfo* source_info);

  // optional .recostream.pb.PulseVideos videos = 13;
  bool has_videos() const;
  void clear_videos();
  static const int kVideosFieldNumber = 13;
  const ::recostream::pb::PulseVideos& videos() const;
  ::recostream::pb::PulseVideos* mutable_videos();
  ::recostream::pb::PulseVideos* release_videos();
  void set_allocated_videos(::recostream::pb::PulseVideos* videos);

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // required int64 source_id = 2;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int64 site_hash = 7;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 7;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // optional .cosmo.pb.Document.Type type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::cosmo::pb::Document_Type type() const;
  void set_type(::cosmo::pb::Document_Type value);

  // optional bool is_fulltext = 10;
  bool has_is_fulltext() const;
  void clear_is_fulltext();
  static const int kIsFulltextFieldNumber = 10;
  bool is_fulltext() const;
  void set_is_fulltext(bool value);

  // optional uint32 advert_doc_id = 16;
  bool has_advert_doc_id() const;
  void clear_advert_doc_id();
  static const int kAdvertDocIdFieldNumber = 16;
  ::google::protobuf::uint32 advert_doc_id() const;
  void set_advert_doc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.Document)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_snippet();
  void clear_has_snippet();
  void set_has_title();
  void clear_has_title();
  void set_has_url();
  void clear_has_url();
  void set_has_site_hash();
  void clear_has_site_hash();
  void set_has_type();
  void clear_has_type();
  void set_has_source_info();
  void clear_has_source_info();
  void set_has_is_fulltext();
  void clear_has_is_fulltext();
  void set_has_amp_url();
  void clear_has_amp_url();
  void set_has_slug();
  void clear_has_slug();
  void set_has_videos();
  void clear_has_videos();
  void set_has_redirect_url();
  void clear_has_redirect_url();
  void set_has_external_url();
  void clear_has_external_url();
  void set_has_advert_doc_id();
  void clear_has_advert_doc_id();
  void set_has_mapping_date();
  void clear_has_mapping_date();
  void set_has_erid();
  void clear_has_erid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage > images_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr amp_url_;
  ::google::protobuf::internal::ArenaStringPtr slug_;
  ::google::protobuf::internal::ArenaStringPtr redirect_url_;
  ::google::protobuf::internal::ArenaStringPtr external_url_;
  ::google::protobuf::internal::ArenaStringPtr mapping_date_;
  ::google::protobuf::internal::ArenaStringPtr erid_;
  ::recostream::pb::SourceInfo* source_info_;
  ::recostream::pb::PulseVideos* videos_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 site_hash_;
  int type_;
  bool is_fulltext_;
  ::google::protobuf::uint32 advert_doc_id_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Advert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.Advert) */ {
 public:
  Advert();
  virtual ~Advert();

  Advert(const Advert& from);

  inline Advert& operator=(const Advert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Advert(Advert&& from) noexcept
    : Advert() {
    *this = ::std::move(from);
  }

  inline Advert& operator=(Advert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Advert& default_instance();

  static inline const Advert* internal_default_instance() {
    return reinterpret_cast<const Advert*>(
               &_Advert_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Advert* other);
  friend void swap(Advert& a, Advert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Advert* New() const PROTOBUF_FINAL { return New(NULL); }

  Advert* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Advert& from);
  void MergeFrom(const Advert& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Advert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .recostream.pb.DocumentImage images = 7;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 7;
  const ::recostream::pb::DocumentImage& images(int index) const;
  ::recostream::pb::DocumentImage* mutable_images(int index);
  ::recostream::pb::DocumentImage* add_images();
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
      images() const;

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // required string url = 4;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string disclaimer = 5;
  bool has_disclaimer() const;
  void clear_disclaimer();
  static const int kDisclaimerFieldNumber = 5;
  const ::std::string& disclaimer() const;
  void set_disclaimer(const ::std::string& value);
  #if LANG_CXX11
  void set_disclaimer(::std::string&& value);
  #endif
  void set_disclaimer(const char* value);
  void set_disclaimer(const char* value, size_t size);
  ::std::string* mutable_disclaimer();
  ::std::string* release_disclaimer();
  void set_allocated_disclaimer(::std::string* disclaimer);

  // optional string age_restrictions = 6;
  bool has_age_restrictions() const;
  void clear_age_restrictions();
  static const int kAgeRestrictionsFieldNumber = 6;
  const ::std::string& age_restrictions() const;
  void set_age_restrictions(const ::std::string& value);
  #if LANG_CXX11
  void set_age_restrictions(::std::string&& value);
  #endif
  void set_age_restrictions(const char* value);
  void set_age_restrictions(const char* value, size_t size);
  ::std::string* mutable_age_restrictions();
  ::std::string* release_age_restrictions();
  void set_allocated_age_restrictions(::std::string* age_restrictions);

  // optional string about_company = 9;
  bool has_about_company() const;
  void clear_about_company();
  static const int kAboutCompanyFieldNumber = 9;
  const ::std::string& about_company() const;
  void set_about_company(const ::std::string& value);
  #if LANG_CXX11
  void set_about_company(::std::string&& value);
  #endif
  void set_about_company(const char* value);
  void set_about_company(const char* value, size_t size);
  ::std::string* mutable_about_company();
  ::std::string* release_about_company();
  void set_allocated_about_company(::std::string* about_company);

  // optional string advert_template_id = 10;
  bool has_advert_template_id() const;
  void clear_advert_template_id();
  static const int kAdvertTemplateIdFieldNumber = 10;
  const ::std::string& advert_template_id() const;
  void set_advert_template_id(const ::std::string& value);
  #if LANG_CXX11
  void set_advert_template_id(::std::string&& value);
  #endif
  void set_advert_template_id(const char* value);
  void set_advert_template_id(const char* value, size_t size);
  ::std::string* mutable_advert_template_id();
  ::std::string* release_advert_template_id();
  void set_allocated_advert_template_id(::std::string* advert_template_id);

  // optional string raw_json_answer = 11;
  bool has_raw_json_answer() const;
  void clear_raw_json_answer();
  static const int kRawJsonAnswerFieldNumber = 11;
  const ::std::string& raw_json_answer() const;
  void set_raw_json_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_json_answer(::std::string&& value);
  #endif
  void set_raw_json_answer(const char* value);
  void set_raw_json_answer(const char* value, size_t size);
  ::std::string* mutable_raw_json_answer();
  ::std::string* release_raw_json_answer();
  void set_allocated_raw_json_answer(::std::string* raw_json_answer);

  // optional string domain_name = 12;
  bool has_domain_name() const;
  void clear_domain_name();
  static const int kDomainNameFieldNumber = 12;
  const ::std::string& domain_name() const;
  void set_domain_name(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_name(::std::string&& value);
  #endif
  void set_domain_name(const char* value);
  void set_domain_name(const char* value, size_t size);
  ::std::string* mutable_domain_name();
  ::std::string* release_domain_name();
  void set_allocated_domain_name(::std::string* domain_name);

  // optional string inn = 15;
  bool has_inn() const;
  void clear_inn();
  static const int kInnFieldNumber = 15;
  const ::std::string& inn() const;
  void set_inn(const ::std::string& value);
  #if LANG_CXX11
  void set_inn(::std::string&& value);
  #endif
  void set_inn(const char* value);
  void set_inn(const char* value, size_t size);
  ::std::string* mutable_inn();
  ::std::string* release_inn();
  void set_allocated_inn(::std::string* inn);

  // optional .recostream.pb.DocumentPixels pixels = 8;
  bool has_pixels() const;
  void clear_pixels();
  static const int kPixelsFieldNumber = 8;
  const ::recostream::pb::DocumentPixels& pixels() const;
  ::recostream::pb::DocumentPixels* mutable_pixels();
  ::recostream::pb::DocumentPixels* release_pixels();
  void set_allocated_pixels(::recostream::pb::DocumentPixels* pixels);

  // required int32 banner_id = 1;
  bool has_banner_id() const;
  void clear_banner_id();
  static const int kBannerIdFieldNumber = 1;
  ::google::protobuf::int32 banner_id() const;
  void set_banner_id(::google::protobuf::int32 value);

  // optional bool is_native = 13;
  bool has_is_native() const;
  void clear_is_native();
  static const int kIsNativeFieldNumber = 13;
  bool is_native() const;
  void set_is_native(bool value);

  // optional int32 size = 14;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 14;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.Advert)
 private:
  void set_has_banner_id();
  void clear_has_banner_id();
  void set_has_title();
  void clear_has_title();
  void set_has_snippet();
  void clear_has_snippet();
  void set_has_url();
  void clear_has_url();
  void set_has_disclaimer();
  void clear_has_disclaimer();
  void set_has_age_restrictions();
  void clear_has_age_restrictions();
  void set_has_pixels();
  void clear_has_pixels();
  void set_has_about_company();
  void clear_has_about_company();
  void set_has_advert_template_id();
  void clear_has_advert_template_id();
  void set_has_raw_json_answer();
  void clear_has_raw_json_answer();
  void set_has_domain_name();
  void clear_has_domain_name();
  void set_has_is_native();
  void clear_has_is_native();
  void set_has_size();
  void clear_has_size();
  void set_has_inn();
  void clear_has_inn();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage > images_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr disclaimer_;
  ::google::protobuf::internal::ArenaStringPtr age_restrictions_;
  ::google::protobuf::internal::ArenaStringPtr about_company_;
  ::google::protobuf::internal::ArenaStringPtr advert_template_id_;
  ::google::protobuf::internal::ArenaStringPtr raw_json_answer_;
  ::google::protobuf::internal::ArenaStringPtr domain_name_;
  ::google::protobuf::internal::ArenaStringPtr inn_;
  ::recostream::pb::DocumentPixels* pixels_;
  ::google::protobuf::int32 banner_id_;
  bool is_native_;
  ::google::protobuf::int32 size_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoResultItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.RecoResultItem) */ {
 public:
  RecoResultItem();
  virtual ~RecoResultItem();

  RecoResultItem(const RecoResultItem& from);

  inline RecoResultItem& operator=(const RecoResultItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoResultItem(RecoResultItem&& from) noexcept
    : RecoResultItem() {
    *this = ::std::move(from);
  }

  inline RecoResultItem& operator=(RecoResultItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoResultItem& default_instance();

  enum ValueCase {
    kDocument = 101,
    kAdvert = 102,
    VALUE_NOT_SET = 0,
  };

  static inline const RecoResultItem* internal_default_instance() {
    return reinterpret_cast<const RecoResultItem*>(
               &_RecoResultItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RecoResultItem* other);
  friend void swap(RecoResultItem& a, RecoResultItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoResultItem* New() const PROTOBUF_FINAL { return New(NULL); }

  RecoResultItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecoResultItem& from);
  void MergeFrom(const RecoResultItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecoResultItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string serve_notice_url = 30;
  int serve_notice_url_size() const;
  void clear_serve_notice_url();
  static const int kServeNoticeUrlFieldNumber = 30;
  const ::std::string& serve_notice_url(int index) const;
  ::std::string* mutable_serve_notice_url(int index);
  void set_serve_notice_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_serve_notice_url(int index, ::std::string&& value);
  #endif
  void set_serve_notice_url(int index, const char* value);
  void set_serve_notice_url(int index, const char* value, size_t size);
  ::std::string* add_serve_notice_url();
  void add_serve_notice_url(const ::std::string& value);
  #if LANG_CXX11
  void add_serve_notice_url(::std::string&& value);
  #endif
  void add_serve_notice_url(const char* value);
  void add_serve_notice_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& serve_notice_url() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serve_notice_url();

  // optional .recostream.pb.DocumentMetaInfo meta_info = 2;
  bool has_meta_info() const;
  void clear_meta_info();
  static const int kMetaInfoFieldNumber = 2;
  const ::recostream::pb::DocumentMetaInfo& meta_info() const;
  ::recostream::pb::DocumentMetaInfo* mutable_meta_info();
  ::recostream::pb::DocumentMetaInfo* release_meta_info();
  void set_allocated_meta_info(::recostream::pb::DocumentMetaInfo* meta_info);

  // optional int64 hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::int64 hash() const;
  void set_hash(::google::protobuf::int64 value);

  // optional .recostream.pb.Document document = 101;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 101;
  const ::recostream::pb::Document& document() const;
  ::recostream::pb::Document* mutable_document();
  ::recostream::pb::Document* release_document();
  void set_allocated_document(::recostream::pb::Document* document);

  // optional .recostream.pb.Advert advert = 102;
  bool has_advert() const;
  void clear_advert();
  static const int kAdvertFieldNumber = 102;
  const ::recostream::pb::Advert& advert() const;
  ::recostream::pb::Advert* mutable_advert();
  ::recostream::pb::Advert* release_advert();
  void set_allocated_advert(::recostream::pb::Advert* advert);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:recostream.pb.RecoResultItem)
 private:
  void set_has_document();
  void set_has_advert();
  void set_has_hash();
  void clear_has_hash();
  void set_has_meta_info();
  void clear_has_meta_info();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serve_notice_url_;
  ::recostream::pb::DocumentMetaInfo* meta_info_;
  ::google::protobuf::int64 hash_;
  union ValueUnion {
    ValueUnion() {}
    ::recostream::pb::Document* document_;
    ::recostream::pb::Advert* advert_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProviderDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.ProviderDebugInfo) */ {
 public:
  ProviderDebugInfo();
  virtual ~ProviderDebugInfo();

  ProviderDebugInfo(const ProviderDebugInfo& from);

  inline ProviderDebugInfo& operator=(const ProviderDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProviderDebugInfo(ProviderDebugInfo&& from) noexcept
    : ProviderDebugInfo() {
    *this = ::std::move(from);
  }

  inline ProviderDebugInfo& operator=(ProviderDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProviderDebugInfo& default_instance();

  enum ValueCase {
    kCosmoInfo = 101,
    VALUE_NOT_SET = 0,
  };

  static inline const ProviderDebugInfo* internal_default_instance() {
    return reinterpret_cast<const ProviderDebugInfo*>(
               &_ProviderDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ProviderDebugInfo* other);
  friend void swap(ProviderDebugInfo& a, ProviderDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProviderDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ProviderDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProviderDebugInfo& from);
  void MergeFrom(const ProviderDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProviderDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.Error errors = 2;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  const ::cosmo::pb::Error& errors(int index) const;
  ::cosmo::pb::Error* mutable_errors(int index);
  ::cosmo::pb::Error* add_errors();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
      mutable_errors();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
      errors() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .cosmo.pb.DebugInfo cosmo_info = 101;
  bool has_cosmo_info() const;
  void clear_cosmo_info();
  static const int kCosmoInfoFieldNumber = 101;
  const ::cosmo::pb::DebugInfo& cosmo_info() const;
  ::cosmo::pb::DebugInfo* mutable_cosmo_info();
  ::cosmo::pb::DebugInfo* release_cosmo_info();
  void set_allocated_cosmo_info(::cosmo::pb::DebugInfo* cosmo_info);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:recostream.pb.ProviderDebugInfo)
 private:
  void set_has_cosmo_info();
  void set_has_name();
  void clear_has_name();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::cosmo::pb::DebugInfo* cosmo_info_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.DebugInfo) */ {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DebugInfo* other);
  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .recostream.pb.ProviderDebugInfo providers = 1;
  int providers_size() const;
  void clear_providers();
  static const int kProvidersFieldNumber = 1;
  const ::recostream::pb::ProviderDebugInfo& providers(int index) const;
  ::recostream::pb::ProviderDebugInfo* mutable_providers(int index);
  ::recostream::pb::ProviderDebugInfo* add_providers();
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >*
      mutable_providers();
  const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >&
      providers() const;

  // @@protoc_insertion_point(class_scope:recostream.pb.DebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo > providers_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankedSources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.RankedSources) */ {
 public:
  RankedSources();
  virtual ~RankedSources();

  RankedSources(const RankedSources& from);

  inline RankedSources& operator=(const RankedSources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankedSources(RankedSources&& from) noexcept
    : RankedSources() {
    *this = ::std::move(from);
  }

  inline RankedSources& operator=(RankedSources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankedSources& default_instance();

  static inline const RankedSources* internal_default_instance() {
    return reinterpret_cast<const RankedSources*>(
               &_RankedSources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RankedSources* other);
  friend void swap(RankedSources& a, RankedSources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankedSources* New() const PROTOBUF_FINAL { return New(NULL); }

  RankedSources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankedSources& from);
  void MergeFrom(const RankedSources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankedSources* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.Source sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  const ::cosmo::pb::Source& sources(int index) const;
  ::cosmo::pb::Source* mutable_sources(int index);
  ::cosmo::pb::Source* add_sources();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
      sources() const;

  // @@protoc_insertion_point(class_scope:recostream.pb.RankedSources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source > sources_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankedCategories : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.RankedCategories) */ {
 public:
  RankedCategories();
  virtual ~RankedCategories();

  RankedCategories(const RankedCategories& from);

  inline RankedCategories& operator=(const RankedCategories& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankedCategories(RankedCategories&& from) noexcept
    : RankedCategories() {
    *this = ::std::move(from);
  }

  inline RankedCategories& operator=(RankedCategories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankedCategories& default_instance();

  static inline const RankedCategories* internal_default_instance() {
    return reinterpret_cast<const RankedCategories*>(
               &_RankedCategories_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(RankedCategories* other);
  friend void swap(RankedCategories& a, RankedCategories& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankedCategories* New() const PROTOBUF_FINAL { return New(NULL); }

  RankedCategories* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankedCategories& from);
  void MergeFrom(const RankedCategories& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankedCategories* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.Category categories = 1;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 1;
  const ::cosmo::pb::Category& categories(int index) const;
  ::cosmo::pb::Category* mutable_categories(int index);
  ::cosmo::pb::Category* add_categories();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
      categories() const;

  // @@protoc_insertion_point(class_scope:recostream.pb.RankedCategories)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category > categories_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.RecoResult) */ {
 public:
  RecoResult();
  virtual ~RecoResult();

  RecoResult(const RecoResult& from);

  inline RecoResult& operator=(const RecoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoResult(RecoResult&& from) noexcept
    : RecoResult() {
    *this = ::std::move(from);
  }

  inline RecoResult& operator=(RecoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoResult& default_instance();

  static inline const RecoResult* internal_default_instance() {
    return reinterpret_cast<const RecoResult*>(
               &_RecoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RecoResult* other);
  friend void swap(RecoResult& a, RecoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RecoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecoResult& from);
  void MergeFrom(const RecoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .recostream.pb.RecoResultItem items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::recostream::pb::RecoResultItem& items(int index) const;
  ::recostream::pb::RecoResultItem* mutable_items(int index);
  ::recostream::pb::RecoResultItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >&
      items() const;

  // optional .recostream.pb.ResultMetaInfo meta_info = 2;
  bool has_meta_info() const;
  void clear_meta_info();
  static const int kMetaInfoFieldNumber = 2;
  const ::recostream::pb::ResultMetaInfo& meta_info() const;
  ::recostream::pb::ResultMetaInfo* mutable_meta_info();
  ::recostream::pb::ResultMetaInfo* release_meta_info();
  void set_allocated_meta_info(::recostream::pb::ResultMetaInfo* meta_info);

  // optional .recostream.pb.DebugInfo debug_info = 4;
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  const ::recostream::pb::DebugInfo& debug_info() const;
  ::recostream::pb::DebugInfo* mutable_debug_info();
  ::recostream::pb::DebugInfo* release_debug_info();
  void set_allocated_debug_info(::recostream::pb::DebugInfo* debug_info);

  // optional .recostream.pb.RankedSources ranked_sources = 5;
  bool has_ranked_sources() const;
  void clear_ranked_sources();
  static const int kRankedSourcesFieldNumber = 5;
  const ::recostream::pb::RankedSources& ranked_sources() const;
  ::recostream::pb::RankedSources* mutable_ranked_sources();
  ::recostream::pb::RankedSources* release_ranked_sources();
  void set_allocated_ranked_sources(::recostream::pb::RankedSources* ranked_sources);

  // optional .recostream.pb.RankedCategories ranked_categories = 6;
  bool has_ranked_categories() const;
  void clear_ranked_categories();
  static const int kRankedCategoriesFieldNumber = 6;
  const ::recostream::pb::RankedCategories& ranked_categories() const;
  ::recostream::pb::RankedCategories* mutable_ranked_categories();
  ::recostream::pb::RankedCategories* release_ranked_categories();
  void set_allocated_ranked_categories(::recostream::pb::RankedCategories* ranked_categories);

  // @@protoc_insertion_point(class_scope:recostream.pb.RecoResult)
 private:
  void set_has_meta_info();
  void clear_has_meta_info();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_ranked_sources();
  void clear_has_ranked_sources();
  void set_has_ranked_categories();
  void clear_has_ranked_categories();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem > items_;
  ::recostream::pb::ResultMetaInfo* meta_info_;
  ::recostream::pb::DebugInfo* debug_info_;
  ::recostream::pb::RankedSources* ranked_sources_;
  ::recostream::pb::RankedCategories* ranked_categories_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackedRecoResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.PackedRecoResult) */ {
 public:
  PackedRecoResult();
  virtual ~PackedRecoResult();

  PackedRecoResult(const PackedRecoResult& from);

  inline PackedRecoResult& operator=(const PackedRecoResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedRecoResult(PackedRecoResult&& from) noexcept
    : PackedRecoResult() {
    *this = ::std::move(from);
  }

  inline PackedRecoResult& operator=(PackedRecoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedRecoResult& default_instance();

  static inline const PackedRecoResult* internal_default_instance() {
    return reinterpret_cast<const PackedRecoResult*>(
               &_PackedRecoResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PackedRecoResult* other);
  friend void swap(PackedRecoResult& a, PackedRecoResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedRecoResult* New() const PROTOBUF_FINAL { return New(NULL); }

  PackedRecoResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackedRecoResult& from);
  void MergeFrom(const PackedRecoResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackedRecoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stream_id(::std::string&& value);
  #endif
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);

  // required string hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // required .recostream.pb.RecoResult reco_result = 4;
  bool has_reco_result() const;
  void clear_reco_result();
  static const int kRecoResultFieldNumber = 4;
  const ::recostream::pb::RecoResult& reco_result() const;
  ::recostream::pb::RecoResult* mutable_reco_result();
  ::recostream::pb::RecoResult* release_reco_result();
  void set_allocated_reco_result(::recostream::pb::RecoResult* reco_result);

  // required int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.PackedRecoResult)
 private:
  void set_has_stream_id();
  void clear_has_stream_id();
  void set_has_hash();
  void clear_has_hash();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_reco_result();
  void clear_has_reco_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::recostream::pb::RecoResult* reco_result_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SavedPromoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recostream.pb.SavedPromoInfo) */ {
 public:
  SavedPromoInfo();
  virtual ~SavedPromoInfo();

  SavedPromoInfo(const SavedPromoInfo& from);

  inline SavedPromoInfo& operator=(const SavedPromoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SavedPromoInfo(SavedPromoInfo&& from) noexcept
    : SavedPromoInfo() {
    *this = ::std::move(from);
  }

  inline SavedPromoInfo& operator=(SavedPromoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedPromoInfo& default_instance();

  static inline const SavedPromoInfo* internal_default_instance() {
    return reinterpret_cast<const SavedPromoInfo*>(
               &_SavedPromoInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SavedPromoInfo* other);
  friend void swap(SavedPromoInfo& a, SavedPromoInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavedPromoInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SavedPromoInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SavedPromoInfo& from);
  void MergeFrom(const SavedPromoInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SavedPromoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string readup_pixels = 1;
  int readup_pixels_size() const;
  void clear_readup_pixels();
  static const int kReadupPixelsFieldNumber = 1;
  const ::std::string& readup_pixels(int index) const;
  ::std::string* mutable_readup_pixels(int index);
  void set_readup_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_readup_pixels(int index, ::std::string&& value);
  #endif
  void set_readup_pixels(int index, const char* value);
  void set_readup_pixels(int index, const char* value, size_t size);
  ::std::string* add_readup_pixels();
  void add_readup_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_readup_pixels(::std::string&& value);
  #endif
  void add_readup_pixels(const char* value);
  void add_readup_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& readup_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_readup_pixels();

  // repeated string redirect_pixels = 2;
  int redirect_pixels_size() const;
  void clear_redirect_pixels();
  static const int kRedirectPixelsFieldNumber = 2;
  const ::std::string& redirect_pixels(int index) const;
  ::std::string* mutable_redirect_pixels(int index);
  void set_redirect_pixels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_redirect_pixels(int index, ::std::string&& value);
  #endif
  void set_redirect_pixels(int index, const char* value);
  void set_redirect_pixels(int index, const char* value, size_t size);
  ::std::string* add_redirect_pixels();
  void add_redirect_pixels(const ::std::string& value);
  #if LANG_CXX11
  void add_redirect_pixels(::std::string&& value);
  #endif
  void add_redirect_pixels(const char* value);
  void add_redirect_pixels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& redirect_pixels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_redirect_pixels();

  // optional string pulse_utm_labels = 10;
  bool has_pulse_utm_labels() const;
  void clear_pulse_utm_labels();
  static const int kPulseUtmLabelsFieldNumber = 10;
  const ::std::string& pulse_utm_labels() const;
  void set_pulse_utm_labels(const ::std::string& value);
  #if LANG_CXX11
  void set_pulse_utm_labels(::std::string&& value);
  #endif
  void set_pulse_utm_labels(const char* value);
  void set_pulse_utm_labels(const char* value, size_t size);
  ::std::string* mutable_pulse_utm_labels();
  ::std::string* release_pulse_utm_labels();
  void set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels);

  // optional string rub_price = 12;
  bool has_rub_price() const;
  void clear_rub_price();
  static const int kRubPriceFieldNumber = 12;
  const ::std::string& rub_price() const;
  void set_rub_price(const ::std::string& value);
  #if LANG_CXX11
  void set_rub_price(::std::string&& value);
  #endif
  void set_rub_price(const char* value);
  void set_rub_price(const char* value, size_t size);
  ::std::string* mutable_rub_price();
  ::std::string* release_rub_price();
  void set_allocated_rub_price(::std::string* rub_price);

  // optional string user_geo = 13;
  bool has_user_geo() const;
  void clear_user_geo();
  static const int kUserGeoFieldNumber = 13;
  const ::std::string& user_geo() const;
  void set_user_geo(const ::std::string& value);
  #if LANG_CXX11
  void set_user_geo(::std::string&& value);
  #endif
  void set_user_geo(const char* value);
  void set_user_geo(const char* value, size_t size);
  ::std::string* mutable_user_geo();
  ::std::string* release_user_geo();
  void set_allocated_user_geo(::std::string* user_geo);

  // optional int64 id_ac = 11;
  bool has_id_ac() const;
  void clear_id_ac();
  static const int kIdAcFieldNumber = 11;
  ::google::protobuf::int64 id_ac() const;
  void set_id_ac(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:recostream.pb.SavedPromoInfo)
 private:
  void set_has_pulse_utm_labels();
  void clear_has_pulse_utm_labels();
  void set_has_id_ac();
  void clear_has_id_ac();
  void set_has_rub_price();
  void clear_has_rub_price();
  void set_has_user_geo();
  void clear_has_user_geo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> readup_pixels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> redirect_pixels_;
  ::google::protobuf::internal::ArenaStringPtr pulse_utm_labels_;
  ::google::protobuf::internal::ArenaStringPtr rub_price_;
  ::google::protobuf::internal::ArenaStringPtr user_geo_;
  ::google::protobuf::int64 id_ac_;
  friend struct protobuf_recostream_5freco_5fresult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentImage

// required int32 width = 1;
inline bool DocumentImage::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentImage::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 DocumentImage::width() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.width)
  return width_;
}
inline void DocumentImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.width)
}

// required int32 height = 2;
inline bool DocumentImage::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentImage::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 DocumentImage::height() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.height)
  return height_;
}
inline void DocumentImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.height)
}

// required string url = 3;
inline bool DocumentImage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentImage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentImage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentImage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DocumentImage::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.url)
  return url_.GetNoArena();
}
inline void DocumentImage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.url)
}
#if LANG_CXX11
inline void DocumentImage::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.url)
}
#endif
inline void DocumentImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.url)
}
inline void DocumentImage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.url)
}
inline ::std::string* DocumentImage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentImage::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentImage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.url)
}

// required string key = 4;
inline bool DocumentImage::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentImage::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentImage::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentImage::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DocumentImage::key() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.key)
  return key_.GetNoArena();
}
inline void DocumentImage::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.key)
}
#if LANG_CXX11
inline void DocumentImage::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.key)
}
#endif
inline void DocumentImage::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.key)
}
inline void DocumentImage::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.key)
}
inline ::std::string* DocumentImage::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentImage::release_key() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentImage::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.key)
}

// required string mb_name = 5;
inline bool DocumentImage::has_mb_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentImage::set_has_mb_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentImage::clear_has_mb_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentImage::clear_mb_name() {
  mb_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mb_name();
}
inline const ::std::string& DocumentImage::mb_name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.mb_name)
  return mb_name_.GetNoArena();
}
inline void DocumentImage::set_mb_name(const ::std::string& value) {
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.mb_name)
}
#if LANG_CXX11
inline void DocumentImage::set_mb_name(::std::string&& value) {
  set_has_mb_name();
  mb_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.mb_name)
}
#endif
inline void DocumentImage::set_mb_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.mb_name)
}
inline void DocumentImage::set_mb_name(const char* value, size_t size) {
  set_has_mb_name();
  mb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.mb_name)
}
inline ::std::string* DocumentImage::mutable_mb_name() {
  set_has_mb_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.mb_name)
  return mb_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentImage::release_mb_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.mb_name)
  clear_has_mb_name();
  return mb_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentImage::set_allocated_mb_name(::std::string* mb_name) {
  if (mb_name != NULL) {
    set_has_mb_name();
  } else {
    clear_has_mb_name();
  }
  mb_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.mb_name)
}

// optional string img_url = 6;
inline bool DocumentImage::has_img_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentImage::set_has_img_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentImage::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentImage::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
inline const ::std::string& DocumentImage::img_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.img_url)
  return img_url_.GetNoArena();
}
inline void DocumentImage::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.img_url)
}
#if LANG_CXX11
inline void DocumentImage::set_img_url(::std::string&& value) {
  set_has_img_url();
  img_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.DocumentImage.img_url)
}
#endif
inline void DocumentImage::set_img_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.img_url)
}
inline void DocumentImage::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.img_url)
}
inline ::std::string* DocumentImage::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentImage::release_img_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.DocumentImage.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentImage::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.DocumentImage.img_url)
}

// repeated string tags = 7;
inline int DocumentImage::tags_size() const {
  return tags_.size();
}
inline void DocumentImage::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& DocumentImage::tags(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentImage.tags)
  return tags_.Get(index);
}
inline ::std::string* DocumentImage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentImage.tags)
  return tags_.Mutable(index);
}
inline void DocumentImage::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocumentImage::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentImage.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocumentImage::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentImage.tags)
}
inline void DocumentImage::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentImage.tags)
}
inline ::std::string* DocumentImage::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentImage.tags)
  return tags_.Add();
}
inline void DocumentImage::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentImage.tags)
}
#if LANG_CXX11
inline void DocumentImage::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentImage.tags)
}
#endif
inline void DocumentImage::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentImage.tags)
}
inline void DocumentImage::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentImage.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentImage::tags() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentImage.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentImage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentImage.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// DocumentPixels

// repeated string show_pixels = 1;
inline int DocumentPixels::show_pixels_size() const {
  return show_pixels_.size();
}
inline void DocumentPixels::clear_show_pixels() {
  show_pixels_.Clear();
}
inline const ::std::string& DocumentPixels::show_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Get(index);
}
inline ::std::string* DocumentPixels::mutable_show_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Mutable(index);
}
inline void DocumentPixels::set_show_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.show_pixels)
  show_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocumentPixels::set_show_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.show_pixels)
  show_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocumentPixels::set_show_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentPixels.show_pixels)
}
inline void DocumentPixels::set_show_pixels(int index, const char* value, size_t size) {
  show_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentPixels.show_pixels)
}
inline ::std::string* DocumentPixels::add_show_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_.Add();
}
inline void DocumentPixels::add_show_pixels(const ::std::string& value) {
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.show_pixels)
}
#if LANG_CXX11
inline void DocumentPixels::add_show_pixels(::std::string&& value) {
  show_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.show_pixels)
}
#endif
inline void DocumentPixels::add_show_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  show_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentPixels.show_pixels)
}
inline void DocumentPixels::add_show_pixels(const char* value, size_t size) {
  show_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentPixels.show_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentPixels::show_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentPixels.show_pixels)
  return show_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentPixels::mutable_show_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentPixels.show_pixels)
  return &show_pixels_;
}

// repeated string click_pixels = 2;
inline int DocumentPixels::click_pixels_size() const {
  return click_pixels_.size();
}
inline void DocumentPixels::clear_click_pixels() {
  click_pixels_.Clear();
}
inline const ::std::string& DocumentPixels::click_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Get(index);
}
inline ::std::string* DocumentPixels::mutable_click_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Mutable(index);
}
inline void DocumentPixels::set_click_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.click_pixels)
  click_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocumentPixels::set_click_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.DocumentPixels.click_pixels)
  click_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocumentPixels::set_click_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.DocumentPixels.click_pixels)
}
inline void DocumentPixels::set_click_pixels(int index, const char* value, size_t size) {
  click_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.DocumentPixels.click_pixels)
}
inline ::std::string* DocumentPixels::add_click_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_.Add();
}
inline void DocumentPixels::add_click_pixels(const ::std::string& value) {
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.click_pixels)
}
#if LANG_CXX11
inline void DocumentPixels::add_click_pixels(::std::string&& value) {
  click_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.DocumentPixels.click_pixels)
}
#endif
inline void DocumentPixels::add_click_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  click_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.DocumentPixels.click_pixels)
}
inline void DocumentPixels::add_click_pixels(const char* value, size_t size) {
  click_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.DocumentPixels.click_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentPixels::click_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DocumentPixels.click_pixels)
  return click_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentPixels::mutable_click_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DocumentPixels.click_pixels)
  return &click_pixels_;
}

// -------------------------------------------------------------------

// SourceInfo

// optional string title = 1;
inline bool SourceInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SourceInfo::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.title)
  return title_.GetNoArena();
}
inline void SourceInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.title)
}
#if LANG_CXX11
inline void SourceInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.title)
}
#endif
inline void SourceInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.title)
}
inline void SourceInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.title)
}
inline ::std::string* SourceInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.title)
}

// optional string favicon_url = 2;
inline bool SourceInfo::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceInfo::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceInfo::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceInfo::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_url();
}
inline const ::std::string& SourceInfo::favicon_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.favicon_url)
  return favicon_url_.GetNoArena();
}
inline void SourceInfo::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.favicon_url)
}
#if LANG_CXX11
inline void SourceInfo::set_favicon_url(::std::string&& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.favicon_url)
}
#endif
inline void SourceInfo::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.favicon_url)
}
inline void SourceInfo::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.favicon_url)
}
inline ::std::string* SourceInfo::mutable_favicon_url() {
  set_has_favicon_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.favicon_url)
  return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_favicon_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.favicon_url)
  clear_has_favicon_url();
  return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url != NULL) {
    set_has_favicon_url();
  } else {
    clear_has_favicon_url();
  }
  favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.favicon_url)
}

// optional string favicon_base64 = 3;
inline bool SourceInfo::has_favicon_base64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceInfo::set_has_favicon_base64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceInfo::clear_has_favicon_base64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceInfo::clear_favicon_base64() {
  favicon_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_base64();
}
inline const ::std::string& SourceInfo::favicon_base64() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.favicon_base64)
  return favicon_base64_.GetNoArena();
}
inline void SourceInfo::set_favicon_base64(const ::std::string& value) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.favicon_base64)
}
#if LANG_CXX11
inline void SourceInfo::set_favicon_base64(::std::string&& value) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.favicon_base64)
}
#endif
inline void SourceInfo::set_favicon_base64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.favicon_base64)
}
inline void SourceInfo::set_favicon_base64(const char* value, size_t size) {
  set_has_favicon_base64();
  favicon_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.favicon_base64)
}
inline ::std::string* SourceInfo::mutable_favicon_base64() {
  set_has_favicon_base64();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.favicon_base64)
  return favicon_base64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_favicon_base64() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.favicon_base64)
  clear_has_favicon_base64();
  return favicon_base64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_favicon_base64(::std::string* favicon_base64) {
  if (favicon_base64 != NULL) {
    set_has_favicon_base64();
  } else {
    clear_has_favicon_base64();
  }
  favicon_base64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_base64);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.favicon_base64)
}

// optional bool subscribed = 4;
inline bool SourceInfo::has_subscribed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SourceInfo::set_has_subscribed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SourceInfo::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SourceInfo::clear_subscribed() {
  subscribed_ = false;
  clear_has_subscribed();
}
inline bool SourceInfo::subscribed() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.subscribed)
  return subscribed_;
}
inline void SourceInfo::set_subscribed(bool value) {
  set_has_subscribed();
  subscribed_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.subscribed)
}

// optional string short_title = 5;
inline bool SourceInfo::has_short_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceInfo::set_has_short_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceInfo::clear_has_short_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceInfo::clear_short_title() {
  short_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_title();
}
inline const ::std::string& SourceInfo::short_title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.short_title)
  return short_title_.GetNoArena();
}
inline void SourceInfo::set_short_title(const ::std::string& value) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.short_title)
}
#if LANG_CXX11
inline void SourceInfo::set_short_title(::std::string&& value) {
  set_has_short_title();
  short_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.short_title)
}
#endif
inline void SourceInfo::set_short_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.short_title)
}
inline void SourceInfo::set_short_title(const char* value, size_t size) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.short_title)
}
inline ::std::string* SourceInfo::mutable_short_title() {
  set_has_short_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.short_title)
  return short_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_short_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.short_title)
  clear_has_short_title();
  return short_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_short_title(::std::string* short_title) {
  if (short_title != NULL) {
    set_has_short_title();
  } else {
    clear_has_short_title();
  }
  short_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.short_title)
}

// optional string type = 6;
inline bool SourceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SourceInfo::type() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SourceInfo.type)
  return type_.GetNoArena();
}
inline void SourceInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SourceInfo.type)
}
#if LANG_CXX11
inline void SourceInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SourceInfo.type)
}
#endif
inline void SourceInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SourceInfo.type)
}
inline void SourceInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SourceInfo.type)
}
inline ::std::string* SourceInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SourceInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceInfo::release_type() {
  // @@protoc_insertion_point(field_release:recostream.pb.SourceInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SourceInfo.type)
}

// -------------------------------------------------------------------

// PulseVideos

// required .recostream.pb.PulseVideo main_video = 1;
inline bool PulseVideos::has_main_video() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseVideos::set_has_main_video() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseVideos::clear_has_main_video() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseVideos::clear_main_video() {
  if (main_video_ != NULL) main_video_->::recostream::pb::PulseVideo::Clear();
  clear_has_main_video();
}
inline const ::recostream::pb::PulseVideo& PulseVideos::main_video() const {
  const ::recostream::pb::PulseVideo* p = main_video_;
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideos.main_video)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PulseVideo*>(
      &::recostream::pb::_PulseVideo_default_instance_);
}
inline ::recostream::pb::PulseVideo* PulseVideos::mutable_main_video() {
  set_has_main_video();
  if (main_video_ == NULL) {
    main_video_ = new ::recostream::pb::PulseVideo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.PulseVideos.main_video)
  return main_video_;
}
inline ::recostream::pb::PulseVideo* PulseVideos::release_main_video() {
  // @@protoc_insertion_point(field_release:recostream.pb.PulseVideos.main_video)
  clear_has_main_video();
  ::recostream::pb::PulseVideo* temp = main_video_;
  main_video_ = NULL;
  return temp;
}
inline void PulseVideos::set_allocated_main_video(::recostream::pb::PulseVideo* main_video) {
  delete main_video_;
  main_video_ = main_video;
  if (main_video) {
    set_has_main_video();
  } else {
    clear_has_main_video();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PulseVideos.main_video)
}

// -------------------------------------------------------------------

// PulseVideo

// required string video_url = 1;
inline bool PulseVideo::has_video_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PulseVideo::set_has_video_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PulseVideo::clear_has_video_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PulseVideo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_url();
}
inline const ::std::string& PulseVideo::video_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideo.video_url)
  return video_url_.GetNoArena();
}
inline void PulseVideo::set_video_url(const ::std::string& value) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PulseVideo.video_url)
}
#if LANG_CXX11
inline void PulseVideo::set_video_url(::std::string&& value) {
  set_has_video_url();
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PulseVideo.video_url)
}
#endif
inline void PulseVideo::set_video_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PulseVideo.video_url)
}
inline void PulseVideo::set_video_url(const char* value, size_t size) {
  set_has_video_url();
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PulseVideo.video_url)
}
inline ::std::string* PulseVideo::mutable_video_url() {
  set_has_video_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PulseVideo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PulseVideo::release_video_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.PulseVideo.video_url)
  clear_has_video_url();
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PulseVideo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    set_has_video_url();
  } else {
    clear_has_video_url();
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PulseVideo.video_url)
}

// optional int32 duration = 2;
inline bool PulseVideo::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PulseVideo::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PulseVideo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PulseVideo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 PulseVideo::duration() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PulseVideo.duration)
  return duration_;
}
inline void PulseVideo::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PulseVideo.duration)
}

// -------------------------------------------------------------------

// Document

// required int64 doc_id = 1;
inline bool Document::has_doc_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Document::set_has_doc_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Document::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.doc_id)
  return doc_id_;
}
inline void Document::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.doc_id)
}

// required int64 source_id = 2;
inline bool Document::has_source_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Document::set_has_source_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Document::clear_has_source_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Document::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 Document::source_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.source_id)
  return source_id_;
}
inline void Document::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.source_id)
}

// required string snippet = 3;
inline bool Document::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_snippet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& Document::snippet() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.snippet)
  return snippet_.GetNoArena();
}
inline void Document::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.snippet)
}
#if LANG_CXX11
inline void Document::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.snippet)
}
#endif
inline void Document::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.snippet)
}
inline void Document::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.snippet)
}
inline ::std::string* Document::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_snippet() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.snippet)
}

// required string title = 4;
inline bool Document::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Document::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.title)
  return title_.GetNoArena();
}
inline void Document::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.title)
}
#if LANG_CXX11
inline void Document::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.title)
}
#endif
inline void Document::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.title)
}
inline void Document::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.title)
}
inline ::std::string* Document::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.title)
}

// required string url = 5;
inline bool Document::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Document::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.url)
  return url_.GetNoArena();
}
inline void Document::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.url)
}
#if LANG_CXX11
inline void Document::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.url)
}
#endif
inline void Document::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.url)
}
inline void Document::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.url)
}
inline ::std::string* Document::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.url)
}

// repeated .recostream.pb.DocumentImage images = 6;
inline int Document::images_size() const {
  return images_.size();
}
inline void Document::clear_images() {
  images_.Clear();
}
inline const ::recostream::pb::DocumentImage& Document::images(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.images)
  return images_.Get(index);
}
inline ::recostream::pb::DocumentImage* Document::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.images)
  return images_.Mutable(index);
}
inline ::recostream::pb::DocumentImage* Document::add_images() {
  // @@protoc_insertion_point(field_add:recostream.pb.Document.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
Document::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.Document.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
Document::images() const {
  // @@protoc_insertion_point(field_list:recostream.pb.Document.images)
  return images_;
}

// required int64 site_hash = 7;
inline bool Document::has_site_hash() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Document::set_has_site_hash() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Document::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Document::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 Document::site_hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.site_hash)
  return site_hash_;
}
inline void Document::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.site_hash)
}

// optional .cosmo.pb.Document.Type type = 8;
inline bool Document::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Document::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Document::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Document::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cosmo::pb::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
inline void Document::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.type)
}

// optional .recostream.pb.SourceInfo source_info = 9;
inline bool Document::has_source_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_source_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_source_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_source_info() {
  if (source_info_ != NULL) source_info_->::recostream::pb::SourceInfo::Clear();
  clear_has_source_info();
}
inline const ::recostream::pb::SourceInfo& Document::source_info() const {
  const ::recostream::pb::SourceInfo* p = source_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.Document.source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::SourceInfo*>(
      &::recostream::pb::_SourceInfo_default_instance_);
}
inline ::recostream::pb::SourceInfo* Document::mutable_source_info() {
  set_has_source_info();
  if (source_info_ == NULL) {
    source_info_ = new ::recostream::pb::SourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.source_info)
  return source_info_;
}
inline ::recostream::pb::SourceInfo* Document::release_source_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.source_info)
  clear_has_source_info();
  ::recostream::pb::SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
inline void Document::set_allocated_source_info(::recostream::pb::SourceInfo* source_info) {
  delete source_info_;
  source_info_ = source_info;
  if (source_info) {
    set_has_source_info();
  } else {
    clear_has_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.source_info)
}

// optional bool is_fulltext = 10;
inline bool Document::has_is_fulltext() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Document::set_has_is_fulltext() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Document::clear_has_is_fulltext() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Document::clear_is_fulltext() {
  is_fulltext_ = false;
  clear_has_is_fulltext();
}
inline bool Document::is_fulltext() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.is_fulltext)
  return is_fulltext_;
}
inline void Document::set_is_fulltext(bool value) {
  set_has_is_fulltext();
  is_fulltext_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.is_fulltext)
}

// optional string amp_url = 11;
inline bool Document::has_amp_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_amp_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_amp_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp_url();
}
inline const ::std::string& Document::amp_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.amp_url)
  return amp_url_.GetNoArena();
}
inline void Document::set_amp_url(const ::std::string& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.amp_url)
}
#if LANG_CXX11
inline void Document::set_amp_url(::std::string&& value) {
  set_has_amp_url();
  amp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.amp_url)
}
#endif
inline void Document::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.amp_url)
}
inline void Document::set_amp_url(const char* value, size_t size) {
  set_has_amp_url();
  amp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.amp_url)
}
inline ::std::string* Document::mutable_amp_url() {
  set_has_amp_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.amp_url)
  return amp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_amp_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.amp_url)
  clear_has_amp_url();
  return amp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_amp_url(::std::string* amp_url) {
  if (amp_url != NULL) {
    set_has_amp_url();
  } else {
    clear_has_amp_url();
  }
  amp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.amp_url)
}

// optional string slug = 12;
inline bool Document::has_slug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_slug() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_slug() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_slug() {
  slug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slug();
}
inline const ::std::string& Document::slug() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.slug)
  return slug_.GetNoArena();
}
inline void Document::set_slug(const ::std::string& value) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.slug)
}
#if LANG_CXX11
inline void Document::set_slug(::std::string&& value) {
  set_has_slug();
  slug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.slug)
}
#endif
inline void Document::set_slug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.slug)
}
inline void Document::set_slug(const char* value, size_t size) {
  set_has_slug();
  slug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.slug)
}
inline ::std::string* Document::mutable_slug() {
  set_has_slug();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.slug)
  return slug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_slug() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.slug)
  clear_has_slug();
  return slug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_slug(::std::string* slug) {
  if (slug != NULL) {
    set_has_slug();
  } else {
    clear_has_slug();
  }
  slug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.slug)
}

// optional .recostream.pb.PulseVideos videos = 13;
inline bool Document::has_videos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Document::set_has_videos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Document::clear_has_videos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Document::clear_videos() {
  if (videos_ != NULL) videos_->::recostream::pb::PulseVideos::Clear();
  clear_has_videos();
}
inline const ::recostream::pb::PulseVideos& Document::videos() const {
  const ::recostream::pb::PulseVideos* p = videos_;
  // @@protoc_insertion_point(field_get:recostream.pb.Document.videos)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PulseVideos*>(
      &::recostream::pb::_PulseVideos_default_instance_);
}
inline ::recostream::pb::PulseVideos* Document::mutable_videos() {
  set_has_videos();
  if (videos_ == NULL) {
    videos_ = new ::recostream::pb::PulseVideos;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.videos)
  return videos_;
}
inline ::recostream::pb::PulseVideos* Document::release_videos() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.videos)
  clear_has_videos();
  ::recostream::pb::PulseVideos* temp = videos_;
  videos_ = NULL;
  return temp;
}
inline void Document::set_allocated_videos(::recostream::pb::PulseVideos* videos) {
  delete videos_;
  videos_ = videos;
  if (videos) {
    set_has_videos();
  } else {
    clear_has_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.videos)
}

// optional string redirect_url = 14;
inline bool Document::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_redirect_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_redirect_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_redirect_url() {
  redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_url();
}
inline const ::std::string& Document::redirect_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.redirect_url)
  return redirect_url_.GetNoArena();
}
inline void Document::set_redirect_url(const ::std::string& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.redirect_url)
}
#if LANG_CXX11
inline void Document::set_redirect_url(::std::string&& value) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.redirect_url)
}
#endif
inline void Document::set_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.redirect_url)
}
inline void Document::set_redirect_url(const char* value, size_t size) {
  set_has_redirect_url();
  redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.redirect_url)
}
inline ::std::string* Document::mutable_redirect_url() {
  set_has_redirect_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.redirect_url)
  return redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_redirect_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.redirect_url)
  clear_has_redirect_url();
  return redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_redirect_url(::std::string* redirect_url) {
  if (redirect_url != NULL) {
    set_has_redirect_url();
  } else {
    clear_has_redirect_url();
  }
  redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.redirect_url)
}

// optional string external_url = 15;
inline bool Document::has_external_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Document::set_has_external_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Document::clear_has_external_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Document::clear_external_url() {
  external_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_url();
}
inline const ::std::string& Document::external_url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.external_url)
  return external_url_.GetNoArena();
}
inline void Document::set_external_url(const ::std::string& value) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.external_url)
}
#if LANG_CXX11
inline void Document::set_external_url(::std::string&& value) {
  set_has_external_url();
  external_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.external_url)
}
#endif
inline void Document::set_external_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.external_url)
}
inline void Document::set_external_url(const char* value, size_t size) {
  set_has_external_url();
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.external_url)
}
inline ::std::string* Document::mutable_external_url() {
  set_has_external_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.external_url)
  return external_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_external_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.external_url)
  clear_has_external_url();
  return external_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_external_url(::std::string* external_url) {
  if (external_url != NULL) {
    set_has_external_url();
  } else {
    clear_has_external_url();
  }
  external_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.external_url)
}

// optional uint32 advert_doc_id = 16;
inline bool Document::has_advert_doc_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Document::set_has_advert_doc_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Document::clear_has_advert_doc_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Document::clear_advert_doc_id() {
  advert_doc_id_ = 0u;
  clear_has_advert_doc_id();
}
inline ::google::protobuf::uint32 Document::advert_doc_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.advert_doc_id)
  return advert_doc_id_;
}
inline void Document::set_advert_doc_id(::google::protobuf::uint32 value) {
  set_has_advert_doc_id();
  advert_doc_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Document.advert_doc_id)
}

// optional string mapping_date = 17;
inline bool Document::has_mapping_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Document::set_has_mapping_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Document::clear_has_mapping_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Document::clear_mapping_date() {
  mapping_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapping_date();
}
inline const ::std::string& Document::mapping_date() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.mapping_date)
  return mapping_date_.GetNoArena();
}
inline void Document::set_mapping_date(const ::std::string& value) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.mapping_date)
}
#if LANG_CXX11
inline void Document::set_mapping_date(::std::string&& value) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.mapping_date)
}
#endif
inline void Document::set_mapping_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.mapping_date)
}
inline void Document::set_mapping_date(const char* value, size_t size) {
  set_has_mapping_date();
  mapping_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.mapping_date)
}
inline ::std::string* Document::mutable_mapping_date() {
  set_has_mapping_date();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.mapping_date)
  return mapping_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_mapping_date() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.mapping_date)
  clear_has_mapping_date();
  return mapping_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_mapping_date(::std::string* mapping_date) {
  if (mapping_date != NULL) {
    set_has_mapping_date();
  } else {
    clear_has_mapping_date();
  }
  mapping_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapping_date);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.mapping_date)
}

// optional string erid = 18;
inline bool Document::has_erid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_erid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_erid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_erid() {
  erid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_erid();
}
inline const ::std::string& Document::erid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Document.erid)
  return erid_.GetNoArena();
}
inline void Document::set_erid(const ::std::string& value) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Document.erid)
}
#if LANG_CXX11
inline void Document::set_erid(::std::string&& value) {
  set_has_erid();
  erid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Document.erid)
}
#endif
inline void Document::set_erid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Document.erid)
}
inline void Document::set_erid(const char* value, size_t size) {
  set_has_erid();
  erid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Document.erid)
}
inline ::std::string* Document::mutable_erid() {
  set_has_erid();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Document.erid)
  return erid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_erid() {
  // @@protoc_insertion_point(field_release:recostream.pb.Document.erid)
  clear_has_erid();
  return erid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_erid(::std::string* erid) {
  if (erid != NULL) {
    set_has_erid();
  } else {
    clear_has_erid();
  }
  erid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), erid);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Document.erid)
}

// -------------------------------------------------------------------

// Advert

// required int32 banner_id = 1;
inline bool Advert::has_banner_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Advert::set_has_banner_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Advert::clear_has_banner_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Advert::clear_banner_id() {
  banner_id_ = 0;
  clear_has_banner_id();
}
inline ::google::protobuf::int32 Advert::banner_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.banner_id)
  return banner_id_;
}
inline void Advert::set_banner_id(::google::protobuf::int32 value) {
  set_has_banner_id();
  banner_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.banner_id)
}

// required string title = 2;
inline bool Advert::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Advert::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Advert::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Advert::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Advert::title() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.title)
  return title_.GetNoArena();
}
inline void Advert::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.title)
}
#if LANG_CXX11
inline void Advert::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.title)
}
#endif
inline void Advert::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.title)
}
inline void Advert::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.title)
}
inline ::std::string* Advert::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_title() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.title)
}

// required string snippet = 3;
inline bool Advert::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Advert::set_has_snippet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Advert::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Advert::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& Advert::snippet() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.snippet)
  return snippet_.GetNoArena();
}
inline void Advert::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.snippet)
}
#if LANG_CXX11
inline void Advert::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.snippet)
}
#endif
inline void Advert::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.snippet)
}
inline void Advert::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.snippet)
}
inline ::std::string* Advert::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_snippet() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.snippet)
}

// required string url = 4;
inline bool Advert::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Advert::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Advert::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Advert::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Advert::url() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.url)
  return url_.GetNoArena();
}
inline void Advert::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.url)
}
#if LANG_CXX11
inline void Advert::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.url)
}
#endif
inline void Advert::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.url)
}
inline void Advert::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.url)
}
inline ::std::string* Advert::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_url() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.url)
}

// optional string disclaimer = 5;
inline bool Advert::has_disclaimer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Advert::set_has_disclaimer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Advert::clear_has_disclaimer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Advert::clear_disclaimer() {
  disclaimer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disclaimer();
}
inline const ::std::string& Advert::disclaimer() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.disclaimer)
  return disclaimer_.GetNoArena();
}
inline void Advert::set_disclaimer(const ::std::string& value) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.disclaimer)
}
#if LANG_CXX11
inline void Advert::set_disclaimer(::std::string&& value) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.disclaimer)
}
#endif
inline void Advert::set_disclaimer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.disclaimer)
}
inline void Advert::set_disclaimer(const char* value, size_t size) {
  set_has_disclaimer();
  disclaimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.disclaimer)
}
inline ::std::string* Advert::mutable_disclaimer() {
  set_has_disclaimer();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.disclaimer)
  return disclaimer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_disclaimer() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.disclaimer)
  clear_has_disclaimer();
  return disclaimer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_disclaimer(::std::string* disclaimer) {
  if (disclaimer != NULL) {
    set_has_disclaimer();
  } else {
    clear_has_disclaimer();
  }
  disclaimer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disclaimer);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.disclaimer)
}

// optional string age_restrictions = 6;
inline bool Advert::has_age_restrictions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Advert::set_has_age_restrictions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Advert::clear_has_age_restrictions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Advert::clear_age_restrictions() {
  age_restrictions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age_restrictions();
}
inline const ::std::string& Advert::age_restrictions() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.age_restrictions)
  return age_restrictions_.GetNoArena();
}
inline void Advert::set_age_restrictions(const ::std::string& value) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.age_restrictions)
}
#if LANG_CXX11
inline void Advert::set_age_restrictions(::std::string&& value) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.age_restrictions)
}
#endif
inline void Advert::set_age_restrictions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.age_restrictions)
}
inline void Advert::set_age_restrictions(const char* value, size_t size) {
  set_has_age_restrictions();
  age_restrictions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.age_restrictions)
}
inline ::std::string* Advert::mutable_age_restrictions() {
  set_has_age_restrictions();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.age_restrictions)
  return age_restrictions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_age_restrictions() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.age_restrictions)
  clear_has_age_restrictions();
  return age_restrictions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_age_restrictions(::std::string* age_restrictions) {
  if (age_restrictions != NULL) {
    set_has_age_restrictions();
  } else {
    clear_has_age_restrictions();
  }
  age_restrictions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age_restrictions);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.age_restrictions)
}

// repeated .recostream.pb.DocumentImage images = 7;
inline int Advert::images_size() const {
  return images_.size();
}
inline void Advert::clear_images() {
  images_.Clear();
}
inline const ::recostream::pb::DocumentImage& Advert::images(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.images)
  return images_.Get(index);
}
inline ::recostream::pb::DocumentImage* Advert::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.images)
  return images_.Mutable(index);
}
inline ::recostream::pb::DocumentImage* Advert::add_images() {
  // @@protoc_insertion_point(field_add:recostream.pb.Advert.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >*
Advert::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.Advert.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::recostream::pb::DocumentImage >&
Advert::images() const {
  // @@protoc_insertion_point(field_list:recostream.pb.Advert.images)
  return images_;
}

// optional .recostream.pb.DocumentPixels pixels = 8;
inline bool Advert::has_pixels() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Advert::set_has_pixels() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Advert::clear_has_pixels() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Advert::clear_pixels() {
  if (pixels_ != NULL) pixels_->::recostream::pb::DocumentPixels::Clear();
  clear_has_pixels();
}
inline const ::recostream::pb::DocumentPixels& Advert::pixels() const {
  const ::recostream::pb::DocumentPixels* p = pixels_;
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.pixels)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DocumentPixels*>(
      &::recostream::pb::_DocumentPixels_default_instance_);
}
inline ::recostream::pb::DocumentPixels* Advert::mutable_pixels() {
  set_has_pixels();
  if (pixels_ == NULL) {
    pixels_ = new ::recostream::pb::DocumentPixels;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.pixels)
  return pixels_;
}
inline ::recostream::pb::DocumentPixels* Advert::release_pixels() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.pixels)
  clear_has_pixels();
  ::recostream::pb::DocumentPixels* temp = pixels_;
  pixels_ = NULL;
  return temp;
}
inline void Advert::set_allocated_pixels(::recostream::pb::DocumentPixels* pixels) {
  delete pixels_;
  pixels_ = pixels;
  if (pixels) {
    set_has_pixels();
  } else {
    clear_has_pixels();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.pixels)
}

// optional string about_company = 9;
inline bool Advert::has_about_company() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Advert::set_has_about_company() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Advert::clear_has_about_company() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Advert::clear_about_company() {
  about_company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_about_company();
}
inline const ::std::string& Advert::about_company() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.about_company)
  return about_company_.GetNoArena();
}
inline void Advert::set_about_company(const ::std::string& value) {
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.about_company)
}
#if LANG_CXX11
inline void Advert::set_about_company(::std::string&& value) {
  set_has_about_company();
  about_company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.about_company)
}
#endif
inline void Advert::set_about_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.about_company)
}
inline void Advert::set_about_company(const char* value, size_t size) {
  set_has_about_company();
  about_company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.about_company)
}
inline ::std::string* Advert::mutable_about_company() {
  set_has_about_company();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.about_company)
  return about_company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_about_company() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.about_company)
  clear_has_about_company();
  return about_company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_about_company(::std::string* about_company) {
  if (about_company != NULL) {
    set_has_about_company();
  } else {
    clear_has_about_company();
  }
  about_company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), about_company);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.about_company)
}

// optional string advert_template_id = 10;
inline bool Advert::has_advert_template_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Advert::set_has_advert_template_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Advert::clear_has_advert_template_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Advert::clear_advert_template_id() {
  advert_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_advert_template_id();
}
inline const ::std::string& Advert::advert_template_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.advert_template_id)
  return advert_template_id_.GetNoArena();
}
inline void Advert::set_advert_template_id(const ::std::string& value) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.advert_template_id)
}
#if LANG_CXX11
inline void Advert::set_advert_template_id(::std::string&& value) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.advert_template_id)
}
#endif
inline void Advert::set_advert_template_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.advert_template_id)
}
inline void Advert::set_advert_template_id(const char* value, size_t size) {
  set_has_advert_template_id();
  advert_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.advert_template_id)
}
inline ::std::string* Advert::mutable_advert_template_id() {
  set_has_advert_template_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.advert_template_id)
  return advert_template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_advert_template_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.advert_template_id)
  clear_has_advert_template_id();
  return advert_template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_advert_template_id(::std::string* advert_template_id) {
  if (advert_template_id != NULL) {
    set_has_advert_template_id();
  } else {
    clear_has_advert_template_id();
  }
  advert_template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advert_template_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.advert_template_id)
}

// optional string raw_json_answer = 11;
inline bool Advert::has_raw_json_answer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Advert::set_has_raw_json_answer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Advert::clear_has_raw_json_answer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Advert::clear_raw_json_answer() {
  raw_json_answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_json_answer();
}
inline const ::std::string& Advert::raw_json_answer() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.raw_json_answer)
  return raw_json_answer_.GetNoArena();
}
inline void Advert::set_raw_json_answer(const ::std::string& value) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.raw_json_answer)
}
#if LANG_CXX11
inline void Advert::set_raw_json_answer(::std::string&& value) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.raw_json_answer)
}
#endif
inline void Advert::set_raw_json_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.raw_json_answer)
}
inline void Advert::set_raw_json_answer(const char* value, size_t size) {
  set_has_raw_json_answer();
  raw_json_answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.raw_json_answer)
}
inline ::std::string* Advert::mutable_raw_json_answer() {
  set_has_raw_json_answer();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.raw_json_answer)
  return raw_json_answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_raw_json_answer() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.raw_json_answer)
  clear_has_raw_json_answer();
  return raw_json_answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_raw_json_answer(::std::string* raw_json_answer) {
  if (raw_json_answer != NULL) {
    set_has_raw_json_answer();
  } else {
    clear_has_raw_json_answer();
  }
  raw_json_answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_json_answer);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.raw_json_answer)
}

// optional string domain_name = 12;
inline bool Advert::has_domain_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Advert::set_has_domain_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Advert::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Advert::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain_name();
}
inline const ::std::string& Advert::domain_name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.domain_name)
  return domain_name_.GetNoArena();
}
inline void Advert::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.domain_name)
}
#if LANG_CXX11
inline void Advert::set_domain_name(::std::string&& value) {
  set_has_domain_name();
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.domain_name)
}
#endif
inline void Advert::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.domain_name)
}
inline void Advert::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.domain_name)
}
inline ::std::string* Advert::mutable_domain_name() {
  set_has_domain_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_domain_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.domain_name)
  clear_has_domain_name();
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    set_has_domain_name();
  } else {
    clear_has_domain_name();
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.domain_name)
}

// optional bool is_native = 13;
inline bool Advert::has_is_native() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Advert::set_has_is_native() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Advert::clear_has_is_native() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Advert::clear_is_native() {
  is_native_ = false;
  clear_has_is_native();
}
inline bool Advert::is_native() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.is_native)
  return is_native_;
}
inline void Advert::set_is_native(bool value) {
  set_has_is_native();
  is_native_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.is_native)
}

// optional int32 size = 14;
inline bool Advert::has_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Advert::set_has_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Advert::clear_has_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Advert::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Advert::size() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.size)
  return size_;
}
inline void Advert::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.size)
}

// optional string inn = 15;
inline bool Advert::has_inn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Advert::set_has_inn() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Advert::clear_has_inn() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Advert::clear_inn() {
  inn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inn();
}
inline const ::std::string& Advert::inn() const {
  // @@protoc_insertion_point(field_get:recostream.pb.Advert.inn)
  return inn_.GetNoArena();
}
inline void Advert::set_inn(const ::std::string& value) {
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.Advert.inn)
}
#if LANG_CXX11
inline void Advert::set_inn(::std::string&& value) {
  set_has_inn();
  inn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.Advert.inn)
}
#endif
inline void Advert::set_inn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.Advert.inn)
}
inline void Advert::set_inn(const char* value, size_t size) {
  set_has_inn();
  inn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.Advert.inn)
}
inline ::std::string* Advert::mutable_inn() {
  set_has_inn();
  // @@protoc_insertion_point(field_mutable:recostream.pb.Advert.inn)
  return inn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advert::release_inn() {
  // @@protoc_insertion_point(field_release:recostream.pb.Advert.inn)
  clear_has_inn();
  return inn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advert::set_allocated_inn(::std::string* inn) {
  if (inn != NULL) {
    set_has_inn();
  } else {
    clear_has_inn();
  }
  inn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inn);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.Advert.inn)
}

// -------------------------------------------------------------------

// RecoResultItem

// optional .recostream.pb.Document document = 101;
inline bool RecoResultItem::has_document() const {
  return value_case() == kDocument;
}
inline void RecoResultItem::set_has_document() {
  _oneof_case_[0] = kDocument;
}
inline void RecoResultItem::clear_document() {
  if (has_document()) {
    delete value_.document_;
    clear_has_value();
  }
}
inline  const ::recostream::pb::Document& RecoResultItem::document() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.document)
  return has_document()
      ? *value_.document_
      : ::recostream::pb::Document::default_instance();
}
inline ::recostream::pb::Document* RecoResultItem::mutable_document() {
  if (!has_document()) {
    clear_value();
    set_has_document();
    value_.document_ = new ::recostream::pb::Document;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.document)
  return value_.document_;
}
inline ::recostream::pb::Document* RecoResultItem::release_document() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.document)
  if (has_document()) {
    clear_has_value();
    ::recostream::pb::Document* temp = value_.document_;
    value_.document_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RecoResultItem::set_allocated_document(::recostream::pb::Document* document) {
  clear_value();
  if (document) {
    set_has_document();
    value_.document_ = document;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.document)
}

// optional .recostream.pb.Advert advert = 102;
inline bool RecoResultItem::has_advert() const {
  return value_case() == kAdvert;
}
inline void RecoResultItem::set_has_advert() {
  _oneof_case_[0] = kAdvert;
}
inline void RecoResultItem::clear_advert() {
  if (has_advert()) {
    delete value_.advert_;
    clear_has_value();
  }
}
inline  const ::recostream::pb::Advert& RecoResultItem::advert() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.advert)
  return has_advert()
      ? *value_.advert_
      : ::recostream::pb::Advert::default_instance();
}
inline ::recostream::pb::Advert* RecoResultItem::mutable_advert() {
  if (!has_advert()) {
    clear_value();
    set_has_advert();
    value_.advert_ = new ::recostream::pb::Advert;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.advert)
  return value_.advert_;
}
inline ::recostream::pb::Advert* RecoResultItem::release_advert() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.advert)
  if (has_advert()) {
    clear_has_value();
    ::recostream::pb::Advert* temp = value_.advert_;
    value_.advert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RecoResultItem::set_allocated_advert(::recostream::pb::Advert* advert) {
  clear_value();
  if (advert) {
    set_has_advert();
    value_.advert_ = advert;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.advert)
}

// optional int64 hash = 1;
inline bool RecoResultItem::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoResultItem::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoResultItem::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoResultItem::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::int64 RecoResultItem::hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.hash)
  return hash_;
}
inline void RecoResultItem::set_hash(::google::protobuf::int64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.hash)
}

// optional .recostream.pb.DocumentMetaInfo meta_info = 2;
inline bool RecoResultItem::has_meta_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoResultItem::set_has_meta_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoResultItem::clear_has_meta_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoResultItem::clear_meta_info() {
  if (meta_info_ != NULL) meta_info_->::recostream::pb::DocumentMetaInfo::Clear();
  clear_has_meta_info();
}
inline const ::recostream::pb::DocumentMetaInfo& RecoResultItem::meta_info() const {
  const ::recostream::pb::DocumentMetaInfo* p = meta_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DocumentMetaInfo*>(
      &::recostream::pb::_DocumentMetaInfo_default_instance_);
}
inline ::recostream::pb::DocumentMetaInfo* RecoResultItem::mutable_meta_info() {
  set_has_meta_info();
  if (meta_info_ == NULL) {
    meta_info_ = new ::recostream::pb::DocumentMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.meta_info)
  return meta_info_;
}
inline ::recostream::pb::DocumentMetaInfo* RecoResultItem::release_meta_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResultItem.meta_info)
  clear_has_meta_info();
  ::recostream::pb::DocumentMetaInfo* temp = meta_info_;
  meta_info_ = NULL;
  return temp;
}
inline void RecoResultItem::set_allocated_meta_info(::recostream::pb::DocumentMetaInfo* meta_info) {
  delete meta_info_;
  meta_info_ = meta_info;
  if (meta_info) {
    set_has_meta_info();
  } else {
    clear_has_meta_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResultItem.meta_info)
}

// repeated string serve_notice_url = 30;
inline int RecoResultItem::serve_notice_url_size() const {
  return serve_notice_url_.size();
}
inline void RecoResultItem::clear_serve_notice_url() {
  serve_notice_url_.Clear();
}
inline const ::std::string& RecoResultItem::serve_notice_url(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Get(index);
}
inline ::std::string* RecoResultItem::mutable_serve_notice_url(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Mutable(index);
}
inline void RecoResultItem::set_serve_notice_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.serve_notice_url)
  serve_notice_url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RecoResultItem::set_serve_notice_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.RecoResultItem.serve_notice_url)
  serve_notice_url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RecoResultItem::set_serve_notice_url(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serve_notice_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.RecoResultItem.serve_notice_url)
}
inline void RecoResultItem::set_serve_notice_url(int index, const char* value, size_t size) {
  serve_notice_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.RecoResultItem.serve_notice_url)
}
inline ::std::string* RecoResultItem::add_serve_notice_url() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_.Add();
}
inline void RecoResultItem::add_serve_notice_url(const ::std::string& value) {
  serve_notice_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResultItem.serve_notice_url)
}
#if LANG_CXX11
inline void RecoResultItem::add_serve_notice_url(::std::string&& value) {
  serve_notice_url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResultItem.serve_notice_url)
}
#endif
inline void RecoResultItem::add_serve_notice_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serve_notice_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.RecoResultItem.serve_notice_url)
}
inline void RecoResultItem::add_serve_notice_url(const char* value, size_t size) {
  serve_notice_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.RecoResultItem.serve_notice_url)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecoResultItem::serve_notice_url() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RecoResultItem.serve_notice_url)
  return serve_notice_url_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RecoResultItem::mutable_serve_notice_url() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RecoResultItem.serve_notice_url)
  return &serve_notice_url_;
}

inline bool RecoResultItem::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void RecoResultItem::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline RecoResultItem::ValueCase RecoResultItem::value_case() const {
  return RecoResultItem::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProviderDebugInfo

// optional .cosmo.pb.DebugInfo cosmo_info = 101;
inline bool ProviderDebugInfo::has_cosmo_info() const {
  return value_case() == kCosmoInfo;
}
inline void ProviderDebugInfo::set_has_cosmo_info() {
  _oneof_case_[0] = kCosmoInfo;
}
inline void ProviderDebugInfo::clear_cosmo_info() {
  if (has_cosmo_info()) {
    delete value_.cosmo_info_;
    clear_has_value();
  }
}
inline  const ::cosmo::pb::DebugInfo& ProviderDebugInfo::cosmo_info() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.cosmo_info)
  return has_cosmo_info()
      ? *value_.cosmo_info_
      : ::cosmo::pb::DebugInfo::default_instance();
}
inline ::cosmo::pb::DebugInfo* ProviderDebugInfo::mutable_cosmo_info() {
  if (!has_cosmo_info()) {
    clear_value();
    set_has_cosmo_info();
    value_.cosmo_info_ = new ::cosmo::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.cosmo_info)
  return value_.cosmo_info_;
}
inline ::cosmo::pb::DebugInfo* ProviderDebugInfo::release_cosmo_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderDebugInfo.cosmo_info)
  if (has_cosmo_info()) {
    clear_has_value();
    ::cosmo::pb::DebugInfo* temp = value_.cosmo_info_;
    value_.cosmo_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ProviderDebugInfo::set_allocated_cosmo_info(::cosmo::pb::DebugInfo* cosmo_info) {
  clear_value();
  if (cosmo_info) {
    set_has_cosmo_info();
    value_.cosmo_info_ = cosmo_info;
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderDebugInfo.cosmo_info)
}

// optional string name = 1;
inline bool ProviderDebugInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProviderDebugInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProviderDebugInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProviderDebugInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ProviderDebugInfo::name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.name)
  return name_.GetNoArena();
}
inline void ProviderDebugInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ProviderDebugInfo.name)
}
#if LANG_CXX11
inline void ProviderDebugInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ProviderDebugInfo.name)
}
#endif
inline void ProviderDebugInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ProviderDebugInfo.name)
}
inline void ProviderDebugInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ProviderDebugInfo.name)
}
inline ::std::string* ProviderDebugInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProviderDebugInfo::release_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProviderDebugInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProviderDebugInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProviderDebugInfo.name)
}

// repeated .cosmo.pb.Error errors = 2;
inline int ProviderDebugInfo::errors_size() const {
  return errors_.size();
}
inline void ProviderDebugInfo::clear_errors() {
  errors_.Clear();
}
inline const ::cosmo::pb::Error& ProviderDebugInfo::errors(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Get(index);
}
inline ::cosmo::pb::Error* ProviderDebugInfo::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Mutable(index);
}
inline ::cosmo::pb::Error* ProviderDebugInfo::add_errors() {
  // @@protoc_insertion_point(field_add:recostream.pb.ProviderDebugInfo.errors)
  return errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >*
ProviderDebugInfo::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ProviderDebugInfo.errors)
  return &errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Error >&
ProviderDebugInfo::errors() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ProviderDebugInfo.errors)
  return errors_;
}

inline bool ProviderDebugInfo::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ProviderDebugInfo::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ProviderDebugInfo::ValueCase ProviderDebugInfo::value_case() const {
  return ProviderDebugInfo::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DebugInfo

// repeated .recostream.pb.ProviderDebugInfo providers = 1;
inline int DebugInfo::providers_size() const {
  return providers_.size();
}
inline void DebugInfo::clear_providers() {
  providers_.Clear();
}
inline const ::recostream::pb::ProviderDebugInfo& DebugInfo::providers(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.DebugInfo.providers)
  return providers_.Get(index);
}
inline ::recostream::pb::ProviderDebugInfo* DebugInfo::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.DebugInfo.providers)
  return providers_.Mutable(index);
}
inline ::recostream::pb::ProviderDebugInfo* DebugInfo::add_providers() {
  // @@protoc_insertion_point(field_add:recostream.pb.DebugInfo.providers)
  return providers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >*
DebugInfo::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.DebugInfo.providers)
  return &providers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProviderDebugInfo >&
DebugInfo::providers() const {
  // @@protoc_insertion_point(field_list:recostream.pb.DebugInfo.providers)
  return providers_;
}

// -------------------------------------------------------------------

// RankedSources

// repeated .cosmo.pb.Source sources = 1;
inline int RankedSources::sources_size() const {
  return sources_.size();
}
inline void RankedSources::clear_sources() {
  sources_.Clear();
}
inline const ::cosmo::pb::Source& RankedSources::sources(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RankedSources.sources)
  return sources_.Get(index);
}
inline ::cosmo::pb::Source* RankedSources::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RankedSources.sources)
  return sources_.Mutable(index);
}
inline ::cosmo::pb::Source* RankedSources::add_sources() {
  // @@protoc_insertion_point(field_add:recostream.pb.RankedSources.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >*
RankedSources::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RankedSources.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Source >&
RankedSources::sources() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RankedSources.sources)
  return sources_;
}

// -------------------------------------------------------------------

// RankedCategories

// repeated .cosmo.pb.Category categories = 1;
inline int RankedCategories::categories_size() const {
  return categories_.size();
}
inline void RankedCategories::clear_categories() {
  categories_.Clear();
}
inline const ::cosmo::pb::Category& RankedCategories::categories(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RankedCategories.categories)
  return categories_.Get(index);
}
inline ::cosmo::pb::Category* RankedCategories::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RankedCategories.categories)
  return categories_.Mutable(index);
}
inline ::cosmo::pb::Category* RankedCategories::add_categories() {
  // @@protoc_insertion_point(field_add:recostream.pb.RankedCategories.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >*
RankedCategories::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RankedCategories.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Category >&
RankedCategories::categories() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RankedCategories.categories)
  return categories_;
}

// -------------------------------------------------------------------

// RecoResult

// optional .recostream.pb.ResultMetaInfo meta_info = 2;
inline bool RecoResult::has_meta_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoResult::set_has_meta_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoResult::clear_has_meta_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoResult::clear_meta_info() {
  if (meta_info_ != NULL) meta_info_->::recostream::pb::ResultMetaInfo::Clear();
  clear_has_meta_info();
}
inline const ::recostream::pb::ResultMetaInfo& RecoResult::meta_info() const {
  const ::recostream::pb::ResultMetaInfo* p = meta_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.meta_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::ResultMetaInfo*>(
      &::recostream::pb::_ResultMetaInfo_default_instance_);
}
inline ::recostream::pb::ResultMetaInfo* RecoResult::mutable_meta_info() {
  set_has_meta_info();
  if (meta_info_ == NULL) {
    meta_info_ = new ::recostream::pb::ResultMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.meta_info)
  return meta_info_;
}
inline ::recostream::pb::ResultMetaInfo* RecoResult::release_meta_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.meta_info)
  clear_has_meta_info();
  ::recostream::pb::ResultMetaInfo* temp = meta_info_;
  meta_info_ = NULL;
  return temp;
}
inline void RecoResult::set_allocated_meta_info(::recostream::pb::ResultMetaInfo* meta_info) {
  delete meta_info_;
  meta_info_ = meta_info;
  if (meta_info) {
    set_has_meta_info();
  } else {
    clear_has_meta_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.meta_info)
}

// repeated .recostream.pb.RecoResultItem items = 3;
inline int RecoResult::items_size() const {
  return items_.size();
}
inline void RecoResult::clear_items() {
  items_.Clear();
}
inline const ::recostream::pb::RecoResultItem& RecoResult::items(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.items)
  return items_.Get(index);
}
inline ::recostream::pb::RecoResultItem* RecoResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.items)
  return items_.Mutable(index);
}
inline ::recostream::pb::RecoResultItem* RecoResult::add_items() {
  // @@protoc_insertion_point(field_add:recostream.pb.RecoResult.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >*
RecoResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.RecoResult.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::recostream::pb::RecoResultItem >&
RecoResult::items() const {
  // @@protoc_insertion_point(field_list:recostream.pb.RecoResult.items)
  return items_;
}

// optional .recostream.pb.DebugInfo debug_info = 4;
inline bool RecoResult::has_debug_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoResult::set_has_debug_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoResult::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoResult::clear_debug_info() {
  if (debug_info_ != NULL) debug_info_->::recostream::pb::DebugInfo::Clear();
  clear_has_debug_info();
}
inline const ::recostream::pb::DebugInfo& RecoResult::debug_info() const {
  const ::recostream::pb::DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::DebugInfo*>(
      &::recostream::pb::_DebugInfo_default_instance_);
}
inline ::recostream::pb::DebugInfo* RecoResult::mutable_debug_info() {
  set_has_debug_info();
  if (debug_info_ == NULL) {
    debug_info_ = new ::recostream::pb::DebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.debug_info)
  return debug_info_;
}
inline ::recostream::pb::DebugInfo* RecoResult::release_debug_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.debug_info)
  clear_has_debug_info();
  ::recostream::pb::DebugInfo* temp = debug_info_;
  debug_info_ = NULL;
  return temp;
}
inline void RecoResult::set_allocated_debug_info(::recostream::pb::DebugInfo* debug_info) {
  delete debug_info_;
  debug_info_ = debug_info;
  if (debug_info) {
    set_has_debug_info();
  } else {
    clear_has_debug_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.debug_info)
}

// optional .recostream.pb.RankedSources ranked_sources = 5;
inline bool RecoResult::has_ranked_sources() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoResult::set_has_ranked_sources() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoResult::clear_has_ranked_sources() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoResult::clear_ranked_sources() {
  if (ranked_sources_ != NULL) ranked_sources_->::recostream::pb::RankedSources::Clear();
  clear_has_ranked_sources();
}
inline const ::recostream::pb::RankedSources& RecoResult::ranked_sources() const {
  const ::recostream::pb::RankedSources* p = ranked_sources_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.ranked_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RankedSources*>(
      &::recostream::pb::_RankedSources_default_instance_);
}
inline ::recostream::pb::RankedSources* RecoResult::mutable_ranked_sources() {
  set_has_ranked_sources();
  if (ranked_sources_ == NULL) {
    ranked_sources_ = new ::recostream::pb::RankedSources;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.ranked_sources)
  return ranked_sources_;
}
inline ::recostream::pb::RankedSources* RecoResult::release_ranked_sources() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.ranked_sources)
  clear_has_ranked_sources();
  ::recostream::pb::RankedSources* temp = ranked_sources_;
  ranked_sources_ = NULL;
  return temp;
}
inline void RecoResult::set_allocated_ranked_sources(::recostream::pb::RankedSources* ranked_sources) {
  delete ranked_sources_;
  ranked_sources_ = ranked_sources;
  if (ranked_sources) {
    set_has_ranked_sources();
  } else {
    clear_has_ranked_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.ranked_sources)
}

// optional .recostream.pb.RankedCategories ranked_categories = 6;
inline bool RecoResult::has_ranked_categories() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecoResult::set_has_ranked_categories() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecoResult::clear_has_ranked_categories() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecoResult::clear_ranked_categories() {
  if (ranked_categories_ != NULL) ranked_categories_->::recostream::pb::RankedCategories::Clear();
  clear_has_ranked_categories();
}
inline const ::recostream::pb::RankedCategories& RecoResult::ranked_categories() const {
  const ::recostream::pb::RankedCategories* p = ranked_categories_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoResult.ranked_categories)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RankedCategories*>(
      &::recostream::pb::_RankedCategories_default_instance_);
}
inline ::recostream::pb::RankedCategories* RecoResult::mutable_ranked_categories() {
  set_has_ranked_categories();
  if (ranked_categories_ == NULL) {
    ranked_categories_ = new ::recostream::pb::RankedCategories;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoResult.ranked_categories)
  return ranked_categories_;
}
inline ::recostream::pb::RankedCategories* RecoResult::release_ranked_categories() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoResult.ranked_categories)
  clear_has_ranked_categories();
  ::recostream::pb::RankedCategories* temp = ranked_categories_;
  ranked_categories_ = NULL;
  return temp;
}
inline void RecoResult::set_allocated_ranked_categories(::recostream::pb::RankedCategories* ranked_categories) {
  delete ranked_categories_;
  ranked_categories_ = ranked_categories;
  if (ranked_categories) {
    set_has_ranked_categories();
  } else {
    clear_has_ranked_categories();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoResult.ranked_categories)
}

// -------------------------------------------------------------------

// PackedRecoResult

// required string stream_id = 1;
inline bool PackedRecoResult::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackedRecoResult::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackedRecoResult::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackedRecoResult::clear_stream_id() {
  stream_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_id();
}
inline const ::std::string& PackedRecoResult::stream_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.stream_id)
  return stream_id_.GetNoArena();
}
inline void PackedRecoResult::set_stream_id(const ::std::string& value) {
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.stream_id)
}
#if LANG_CXX11
inline void PackedRecoResult::set_stream_id(::std::string&& value) {
  set_has_stream_id();
  stream_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PackedRecoResult.stream_id)
}
#endif
inline void PackedRecoResult::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PackedRecoResult.stream_id)
}
inline void PackedRecoResult::set_stream_id(const char* value, size_t size) {
  set_has_stream_id();
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PackedRecoResult.stream_id)
}
inline ::std::string* PackedRecoResult::mutable_stream_id() {
  set_has_stream_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.stream_id)
  return stream_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackedRecoResult::release_stream_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.stream_id)
  clear_has_stream_id();
  return stream_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackedRecoResult::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    set_has_stream_id();
  } else {
    clear_has_stream_id();
  }
  stream_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.stream_id)
}

// required string hash = 2;
inline bool PackedRecoResult::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackedRecoResult::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackedRecoResult::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackedRecoResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& PackedRecoResult::hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.hash)
  return hash_.GetNoArena();
}
inline void PackedRecoResult::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.hash)
}
#if LANG_CXX11
inline void PackedRecoResult::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PackedRecoResult.hash)
}
#endif
inline void PackedRecoResult::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PackedRecoResult.hash)
}
inline void PackedRecoResult::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PackedRecoResult.hash)
}
inline ::std::string* PackedRecoResult::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackedRecoResult::release_hash() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackedRecoResult::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.hash)
}

// required int64 timestamp = 3;
inline bool PackedRecoResult::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackedRecoResult::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackedRecoResult::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackedRecoResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 PackedRecoResult::timestamp() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.timestamp)
  return timestamp_;
}
inline void PackedRecoResult::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PackedRecoResult.timestamp)
}

// required .recostream.pb.RecoResult reco_result = 4;
inline bool PackedRecoResult::has_reco_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackedRecoResult::set_has_reco_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackedRecoResult::clear_has_reco_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackedRecoResult::clear_reco_result() {
  if (reco_result_ != NULL) reco_result_->::recostream::pb::RecoResult::Clear();
  clear_has_reco_result();
}
inline const ::recostream::pb::RecoResult& PackedRecoResult::reco_result() const {
  const ::recostream::pb::RecoResult* p = reco_result_;
  // @@protoc_insertion_point(field_get:recostream.pb.PackedRecoResult.reco_result)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::RecoResult*>(
      &::recostream::pb::_RecoResult_default_instance_);
}
inline ::recostream::pb::RecoResult* PackedRecoResult::mutable_reco_result() {
  set_has_reco_result();
  if (reco_result_ == NULL) {
    reco_result_ = new ::recostream::pb::RecoResult;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.PackedRecoResult.reco_result)
  return reco_result_;
}
inline ::recostream::pb::RecoResult* PackedRecoResult::release_reco_result() {
  // @@protoc_insertion_point(field_release:recostream.pb.PackedRecoResult.reco_result)
  clear_has_reco_result();
  ::recostream::pb::RecoResult* temp = reco_result_;
  reco_result_ = NULL;
  return temp;
}
inline void PackedRecoResult::set_allocated_reco_result(::recostream::pb::RecoResult* reco_result) {
  delete reco_result_;
  reco_result_ = reco_result;
  if (reco_result) {
    set_has_reco_result();
  } else {
    clear_has_reco_result();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PackedRecoResult.reco_result)
}

// -------------------------------------------------------------------

// SavedPromoInfo

// repeated string readup_pixels = 1;
inline int SavedPromoInfo::readup_pixels_size() const {
  return readup_pixels_.size();
}
inline void SavedPromoInfo::clear_readup_pixels() {
  readup_pixels_.Clear();
}
inline const ::std::string& SavedPromoInfo::readup_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Get(index);
}
inline ::std::string* SavedPromoInfo::mutable_readup_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Mutable(index);
}
inline void SavedPromoInfo::set_readup_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SavedPromoInfo::set_readup_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.readup_pixels)
  readup_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SavedPromoInfo::set_readup_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.readup_pixels)
}
inline void SavedPromoInfo::set_readup_pixels(int index, const char* value, size_t size) {
  readup_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.readup_pixels)
}
inline ::std::string* SavedPromoInfo::add_readup_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_.Add();
}
inline void SavedPromoInfo::add_readup_pixels(const ::std::string& value) {
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.readup_pixels)
}
#if LANG_CXX11
inline void SavedPromoInfo::add_readup_pixels(::std::string&& value) {
  readup_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.readup_pixels)
}
#endif
inline void SavedPromoInfo::add_readup_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  readup_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.SavedPromoInfo.readup_pixels)
}
inline void SavedPromoInfo::add_readup_pixels(const char* value, size_t size) {
  readup_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.SavedPromoInfo.readup_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SavedPromoInfo::readup_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.SavedPromoInfo.readup_pixels)
  return readup_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SavedPromoInfo::mutable_readup_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.SavedPromoInfo.readup_pixels)
  return &readup_pixels_;
}

// repeated string redirect_pixels = 2;
inline int SavedPromoInfo::redirect_pixels_size() const {
  return redirect_pixels_.size();
}
inline void SavedPromoInfo::clear_redirect_pixels() {
  redirect_pixels_.Clear();
}
inline const ::std::string& SavedPromoInfo::redirect_pixels(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Get(index);
}
inline ::std::string* SavedPromoInfo::mutable_redirect_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Mutable(index);
}
inline void SavedPromoInfo::set_redirect_pixels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SavedPromoInfo::set_redirect_pixels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.redirect_pixels)
  redirect_pixels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SavedPromoInfo::set_redirect_pixels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.redirect_pixels)
}
inline void SavedPromoInfo::set_redirect_pixels(int index, const char* value, size_t size) {
  redirect_pixels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.redirect_pixels)
}
inline ::std::string* SavedPromoInfo::add_redirect_pixels() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_.Add();
}
inline void SavedPromoInfo::add_redirect_pixels(const ::std::string& value) {
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.redirect_pixels)
}
#if LANG_CXX11
inline void SavedPromoInfo::add_redirect_pixels(::std::string&& value) {
  redirect_pixels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.SavedPromoInfo.redirect_pixels)
}
#endif
inline void SavedPromoInfo::add_redirect_pixels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirect_pixels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.SavedPromoInfo.redirect_pixels)
}
inline void SavedPromoInfo::add_redirect_pixels(const char* value, size_t size) {
  redirect_pixels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.SavedPromoInfo.redirect_pixels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SavedPromoInfo::redirect_pixels() const {
  // @@protoc_insertion_point(field_list:recostream.pb.SavedPromoInfo.redirect_pixels)
  return redirect_pixels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SavedPromoInfo::mutable_redirect_pixels() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.SavedPromoInfo.redirect_pixels)
  return &redirect_pixels_;
}

// optional string pulse_utm_labels = 10;
inline bool SavedPromoInfo::has_pulse_utm_labels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SavedPromoInfo::set_has_pulse_utm_labels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SavedPromoInfo::clear_has_pulse_utm_labels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SavedPromoInfo::clear_pulse_utm_labels() {
  pulse_utm_labels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pulse_utm_labels();
}
inline const ::std::string& SavedPromoInfo::pulse_utm_labels() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.GetNoArena();
}
inline void SavedPromoInfo::set_pulse_utm_labels(const ::std::string& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
#if LANG_CXX11
inline void SavedPromoInfo::set_pulse_utm_labels(::std::string&& value) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
#endif
inline void SavedPromoInfo::set_pulse_utm_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
inline void SavedPromoInfo::set_pulse_utm_labels(const char* value, size_t size) {
  set_has_pulse_utm_labels();
  pulse_utm_labels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}
inline ::std::string* SavedPromoInfo::mutable_pulse_utm_labels() {
  set_has_pulse_utm_labels();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  return pulse_utm_labels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SavedPromoInfo::release_pulse_utm_labels() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.pulse_utm_labels)
  clear_has_pulse_utm_labels();
  return pulse_utm_labels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SavedPromoInfo::set_allocated_pulse_utm_labels(::std::string* pulse_utm_labels) {
  if (pulse_utm_labels != NULL) {
    set_has_pulse_utm_labels();
  } else {
    clear_has_pulse_utm_labels();
  }
  pulse_utm_labels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pulse_utm_labels);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.pulse_utm_labels)
}

// optional int64 id_ac = 11;
inline bool SavedPromoInfo::has_id_ac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SavedPromoInfo::set_has_id_ac() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SavedPromoInfo::clear_has_id_ac() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SavedPromoInfo::clear_id_ac() {
  id_ac_ = GOOGLE_LONGLONG(0);
  clear_has_id_ac();
}
inline ::google::protobuf::int64 SavedPromoInfo::id_ac() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.id_ac)
  return id_ac_;
}
inline void SavedPromoInfo::set_id_ac(::google::protobuf::int64 value) {
  set_has_id_ac();
  id_ac_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.id_ac)
}

// optional string rub_price = 12;
inline bool SavedPromoInfo::has_rub_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SavedPromoInfo::set_has_rub_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SavedPromoInfo::clear_has_rub_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SavedPromoInfo::clear_rub_price() {
  rub_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rub_price();
}
inline const ::std::string& SavedPromoInfo::rub_price() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.rub_price)
  return rub_price_.GetNoArena();
}
inline void SavedPromoInfo::set_rub_price(const ::std::string& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.rub_price)
}
#if LANG_CXX11
inline void SavedPromoInfo::set_rub_price(::std::string&& value) {
  set_has_rub_price();
  rub_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.rub_price)
}
#endif
inline void SavedPromoInfo::set_rub_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.rub_price)
}
inline void SavedPromoInfo::set_rub_price(const char* value, size_t size) {
  set_has_rub_price();
  rub_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.rub_price)
}
inline ::std::string* SavedPromoInfo::mutable_rub_price() {
  set_has_rub_price();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.rub_price)
  return rub_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SavedPromoInfo::release_rub_price() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.rub_price)
  clear_has_rub_price();
  return rub_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SavedPromoInfo::set_allocated_rub_price(::std::string* rub_price) {
  if (rub_price != NULL) {
    set_has_rub_price();
  } else {
    clear_has_rub_price();
  }
  rub_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rub_price);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.rub_price)
}

// optional string user_geo = 13;
inline bool SavedPromoInfo::has_user_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SavedPromoInfo::set_has_user_geo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SavedPromoInfo::clear_has_user_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SavedPromoInfo::clear_user_geo() {
  user_geo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_geo();
}
inline const ::std::string& SavedPromoInfo::user_geo() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SavedPromoInfo.user_geo)
  return user_geo_.GetNoArena();
}
inline void SavedPromoInfo::set_user_geo(const ::std::string& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SavedPromoInfo.user_geo)
}
#if LANG_CXX11
inline void SavedPromoInfo::set_user_geo(::std::string&& value) {
  set_has_user_geo();
  user_geo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SavedPromoInfo.user_geo)
}
#endif
inline void SavedPromoInfo::set_user_geo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SavedPromoInfo.user_geo)
}
inline void SavedPromoInfo::set_user_geo(const char* value, size_t size) {
  set_has_user_geo();
  user_geo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SavedPromoInfo.user_geo)
}
inline ::std::string* SavedPromoInfo::mutable_user_geo() {
  set_has_user_geo();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SavedPromoInfo.user_geo)
  return user_geo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SavedPromoInfo::release_user_geo() {
  // @@protoc_insertion_point(field_release:recostream.pb.SavedPromoInfo.user_geo)
  clear_has_user_geo();
  return user_geo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SavedPromoInfo::set_allocated_user_geo(::std::string* user_geo) {
  if (user_geo != NULL) {
    set_has_user_geo();
  } else {
    clear_has_user_geo();
  }
  user_geo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_geo);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SavedPromoInfo.user_geo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace recostream

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_recostream_5freco_5fresult_2eproto__INCLUDED
