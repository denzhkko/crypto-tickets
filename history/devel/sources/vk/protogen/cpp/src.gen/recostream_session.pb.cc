// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recostream_session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recostream_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace recostream {
namespace pb {
class LoginStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginState>
     _instance;
} _LoginState_default_instance_;
class CosmoState_CacheCursorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoState_CacheCursor>
     _instance;
} _CosmoState_CacheCursor_default_instance_;
class CosmoState_StatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoState_Stats>
     _instance;
} _CosmoState_Stats_default_instance_;
class CosmoState_ExperimentInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoState_ExperimentInfo>
     _instance;
} _CosmoState_ExperimentInfo_default_instance_;
class CosmoStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoState>
     _instance;
} _CosmoState_default_instance_;
class CosmoSources_StatesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoSources::CosmoSources_StatesEntry>
     _instance;
} _CosmoSources_StatesEntry_default_instance_;
class CosmoSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoSources>
     _instance;
} _CosmoSources_default_instance_;
class TargetStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TargetState>
     _instance;
} _TargetState_default_instance_;
class TargetSources_StatesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TargetSources::TargetSources_StatesEntry>
     _instance;
} _TargetSources_StatesEntry_default_instance_;
class TargetSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TargetSources>
     _instance;
} _TargetSources_default_instance_;
class ResultsPageState_BlockStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResultsPageState_BlockState>
     _instance;
} _ResultsPageState_BlockState_default_instance_;
class ResultsPageStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResultsPageState>
     _instance;
} _ResultsPageState_default_instance_;
class PPNStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PPNState>
     _instance;
} _PPNState_default_instance_;
class SubscriptionState_SubscriptionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubscriptionState_SubscriptionInfo>
     _instance;
} _SubscriptionState_SubscriptionInfo_default_instance_;
class SubscriptionStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubscriptionState>
     _instance;
} _SubscriptionState_default_instance_;
class RecoSessionStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecoSessionState>
     _instance;
} _RecoSessionState_default_instance_;
class ProfileSettingFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileSettingField>
     _instance;
} _ProfileSettingField_default_instance_;
class ProfileSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileSettings>
     _instance;
} _ProfileSettings_default_instance_;

namespace protobuf_recostream_5fsession_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, is_anonymous_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, from_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, advert_sitename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, category_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, many_vids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, many_emails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, vk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, ok_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, idfa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginState, gaid_),
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_CacheCursor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_CacheCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_CacheCursor, record_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_CacheCursor, pos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_Stats, skipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_Stats, bahroma_missed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_Stats, banned_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_ExperimentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_ExperimentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState_ExperimentInfo, experiment_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState, cache_cursor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoState, experiment_info_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoSources, states_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetState, last_banners_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSources, states_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState_BlockState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState_BlockState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState_BlockState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState_BlockState, used_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState_BlockState, block_layout_position_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, layout_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, blocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, terminated_providers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, lenta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultsPageState, document_hashes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPNState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPNState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPNState, results_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPNState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PPNState, creation_ts_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState_SubscriptionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState_SubscriptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState_SubscriptionInfo, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState_SubscriptionInfo, last_ts_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, block_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, show_category_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, show_cold_sources_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, user_source_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, category_subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionState, cold_sources_subscription_),
  0,
  3,
  4,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, login_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, results_page_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, cosmo_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, ppn_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, target_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, subscription_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, cold_lenta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoSessionState, creation_ts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettingField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettingField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettingField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettingField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileSettings, settings_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(LoginState)},
  { 31, 38, sizeof(CosmoState_CacheCursor)},
  { 40, 48, sizeof(CosmoState_Stats)},
  { 51, 57, sizeof(CosmoState_ExperimentInfo)},
  { 58, 66, sizeof(CosmoState)},
  { 69, 75, sizeof(CosmoSources)},
  { 76, 82, sizeof(TargetState)},
  { 83, 89, sizeof(TargetSources)},
  { 90, 98, sizeof(ResultsPageState_BlockState)},
  { 101, 111, sizeof(ResultsPageState)},
  { 116, 124, sizeof(PPNState)},
  { 127, 134, sizeof(SubscriptionState_SubscriptionInfo)},
  { 136, 147, sizeof(SubscriptionState)},
  { 153, 166, sizeof(RecoSessionState)},
  { 174, 181, sizeof(ProfileSettingField)},
  { 183, 189, sizeof(ProfileSettings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoState_CacheCursor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoState_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoState_ExperimentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoSources_StatesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetSources_StatesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultsPageState_BlockState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultsPageState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PPNState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubscriptionState_SubscriptionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubscriptionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecoSessionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileSettingField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileSettings_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "recostream_session.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[5].reflection = CosmoSources::CosmoSources_StatesEntry::CreateReflection(file_level_metadata[5].descriptor, _CosmoSources_StatesEntry_default_instance_._instance.get_mutable());
file_level_metadata[8].reflection = TargetSources::TargetSources_StatesEntry::CreateReflection(file_level_metadata[8].descriptor, _TargetSources_StatesEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LoginState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginState_default_instance_);_CosmoState_CacheCursor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoState_CacheCursor_default_instance_);_CosmoState_Stats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoState_Stats_default_instance_);_CosmoState_ExperimentInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoState_ExperimentInfo_default_instance_);_CosmoState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoState_default_instance_);_CosmoSources_StatesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoSources_StatesEntry_default_instance_);_CosmoSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoSources_default_instance_);_TargetState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TargetState_default_instance_);_TargetSources_StatesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TargetSources_StatesEntry_default_instance_);_TargetSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TargetSources_default_instance_);_ResultsPageState_BlockState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResultsPageState_BlockState_default_instance_);_ResultsPageState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResultsPageState_default_instance_);_PPNState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PPNState_default_instance_);_SubscriptionState_SubscriptionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubscriptionState_SubscriptionInfo_default_instance_);_SubscriptionState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubscriptionState_default_instance_);_RecoSessionState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecoSessionState_default_instance_);_ProfileSettingField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileSettingField_default_instance_);_ProfileSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileSettings_default_instance_);_CosmoState_default_instance_._instance.get_mutable()->cache_cursor_ = const_cast< ::recostream::pb::CosmoState_CacheCursor*>(
      ::recostream::pb::CosmoState_CacheCursor::internal_default_instance());
  _CosmoState_default_instance_._instance.get_mutable()->stats_ = const_cast< ::recostream::pb::CosmoState_Stats*>(
      ::recostream::pb::CosmoState_Stats::internal_default_instance());
  _CosmoState_default_instance_._instance.get_mutable()->experiment_info_ = const_cast< ::recostream::pb::CosmoState_ExperimentInfo*>(
      ::recostream::pb::CosmoState_ExperimentInfo::internal_default_instance());
  _CosmoSources_StatesEntry_default_instance_._instance.get_mutable()->set_default_instance(_CosmoSources_StatesEntry_default_instance_._instance.get_mutable());
  _CosmoSources_StatesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _TargetSources_StatesEntry_default_instance_._instance.get_mutable()->set_default_instance(_TargetSources_StatesEntry_default_instance_._instance.get_mutable());
  _TargetSources_StatesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SubscriptionState_default_instance_._instance.get_mutable()->category_subscription_ = const_cast< ::recostream::pb::SubscriptionState_SubscriptionInfo*>(
      ::recostream::pb::SubscriptionState_SubscriptionInfo::internal_default_instance());
  _SubscriptionState_default_instance_._instance.get_mutable()->cold_sources_subscription_ = const_cast< ::recostream::pb::SubscriptionState_SubscriptionInfo*>(
      ::recostream::pb::SubscriptionState_SubscriptionInfo::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->login_state_ = const_cast< ::recostream::pb::LoginState*>(
      ::recostream::pb::LoginState::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->results_page_state_ = const_cast< ::recostream::pb::ResultsPageState*>(
      ::recostream::pb::ResultsPageState::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->cosmo_sources_ = const_cast< ::recostream::pb::CosmoSources*>(
      ::recostream::pb::CosmoSources::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->ppn_state_ = const_cast< ::recostream::pb::PPNState*>(
      ::recostream::pb::PPNState::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->target_sources_ = const_cast< ::recostream::pb::TargetSources*>(
      ::recostream::pb::TargetSources::internal_default_instance());
  _RecoSessionState_default_instance_._instance.get_mutable()->subscription_state_ = const_cast< ::recostream::pb::SubscriptionState*>(
      ::recostream::pb::SubscriptionState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030recostream_session.proto\022\rrecostream.p"
      "b\"\364\001\n\nLoginState\022\017\n\007user_id\030\001 \002(\003\022\013\n\003vid"
      "\030\002 \001(\004\022\r\n\005split\030\003 \001(\005\022\024\n\014is_anonymous\030\004 "
      "\001(\010\022\022\n\nfrom_label\030\005 \001(\t\022\027\n\017advert_sitena"
      "me\030\006 \001(\003\022\024\n\014category_ids\030\007 \001(\t\022\021\n\tmany_v"
      "ids\030\010 \003(\t\022\023\n\013many_emails\030\t \003(\t\022\r\n\005vk_id\030"
      "\n \001(\t\022\r\n\005ok_id\030\013 \001(\t\022\014\n\004idfa\030\014 \001(\t\022\014\n\004ga"
      "id\030\r \001(\t\"\326\002\n\nCosmoState\022;\n\014cache_cursor\030"
      "\001 \001(\0132%.recostream.pb.CosmoState.CacheCu"
      "rsor\022.\n\005stats\030\002 \001(\0132\037.recostream.pb.Cosm"
      "oState.Stats\022A\n\017experiment_info\030\003 \001(\0132(."
      "recostream.pb.CosmoState.ExperimentInfo\032"
      "-\n\013CacheCursor\022\021\n\trecord_id\030\001 \002(\t\022\013\n\003pos"
      "\030\002 \002(\005\032@\n\005Stats\022\017\n\007skipped\030\001 \001(\005\022\026\n\016bahr"
      "oma_missed\030\002 \001(\005\022\016\n\006banned\030\003 \001(\005\032\'\n\016Expe"
      "rimentInfo\022\025\n\rexperiment_id\030\001 \002(\r\"\221\001\n\014Co"
      "smoSources\0227\n\006states\030\001 \003(\0132\'.recostream."
      "pb.CosmoSources.StatesEntry\032H\n\013StatesEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001(\0132\031.recostr"
      "eam.pb.CosmoState:\0028\001\"#\n\013TargetState\022\024\n\014"
      "last_banners\030\001 \003(\005\"\224\001\n\rTargetSources\0228\n\006"
      "states\030\001 \003(\0132(.recostream.pb.TargetSourc"
      "es.StatesEntry\032I\n\013StatesEntry\022\013\n\003key\030\001 \001"
      "(\t\022)\n\005value\030\002 \001(\0132\032.recostream.pb.Target"
      "State:\0028\001\"\200\002\n\020ResultsPageState\022\027\n\017layout"
      "_position\030\001 \001(\005\022:\n\006blocks\030\003 \003(\0132*.recost"
      "ream.pb.ResultsPageState.BlockState\022\034\n\024t"
      "erminated_providers\030\005 \003(\t\022\r\n\005lenta\030\006 \003(\r"
      "\022\027\n\017document_hashes\030\007 \003(\003\032Q\n\nBlockState\022"
      "\014\n\004name\030\001 \001(\t\022\026\n\016used_positions\030\002 \001(\005\022\035\n"
      "\025block_layout_position\030\003 \001(\005\"K\n\010PPNState"
      "\022\024\n\014results_hash\030\001 \001(\t\022\020\n\010position\030\002 \001(\005"
      "\022\027\n\013creation_ts\030\003 \001(\003B\002\030\001\"\360\002\n\021Subscripti"
      "onState\022\022\n\nblock_name\030\001 \001(\t\022\"\n\032show_cate"
      "gory_subscription\030\003 \001(\010\022&\n\036show_cold_sou"
      "rces_subscription\030\004 \001(\010\022!\n\031user_source_s"
      "ubscriptions\030\005 \003(\003\022P\n\025category_subscript"
      "ion\030\006 \001(\01321.recostream.pb.SubscriptionSt"
      "ate.SubscriptionInfo\022T\n\031cold_sources_sub"
      "scription\030\007 \001(\01321.recostream.pb.Subscrip"
      "tionState.SubscriptionInfo\0320\n\020Subscripti"
      "onInfo\022\013\n\003cnt\030\001 \002(\r\022\017\n\007last_ts\030\002 \001(\003\"\374\002\n"
      "\020RecoSessionState\022.\n\013login_state\030\001 \001(\0132\031"
      ".recostream.pb.LoginState\022;\n\022results_pag"
      "e_state\030\003 \001(\0132\037.recostream.pb.ResultsPag"
      "eState\0222\n\rcosmo_sources\030\004 \001(\0132\033.recostre"
      "am.pb.CosmoSources\022*\n\tppn_state\030\005 \001(\0132\027."
      "recostream.pb.PPNState\0224\n\016target_sources"
      "\030\006 \001(\0132\034.recostream.pb.TargetSources\022<\n\022"
      "subscription_state\030\007 \001(\0132 .recostream.pb"
      ".SubscriptionState\022\022\n\ncold_lenta\030\010 \001(\010\022\023"
      "\n\013creation_ts\030d \001(\003\"1\n\023ProfileSettingFie"
      "ld\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"G\n\017Profil"
      "eSettings\0224\n\010settings\030\001 \003(\0132\".recostream"
      ".pb.ProfileSettingField"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recostream_session.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_recostream_5fsession_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginState::kUserIdFieldNumber;
const int LoginState::kVidFieldNumber;
const int LoginState::kSplitFieldNumber;
const int LoginState::kIsAnonymousFieldNumber;
const int LoginState::kFromLabelFieldNumber;
const int LoginState::kAdvertSitenameFieldNumber;
const int LoginState::kCategoryIdsFieldNumber;
const int LoginState::kManyVidsFieldNumber;
const int LoginState::kManyEmailsFieldNumber;
const int LoginState::kVkIdFieldNumber;
const int LoginState::kOkIdFieldNumber;
const int LoginState::kIdfaFieldNumber;
const int LoginState::kGaidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginState::LoginState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.LoginState)
}
LoginState::LoginState(const LoginState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      many_vids_(from.many_vids_),
      many_emails_(from.many_emails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_label()) {
    from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
  }
  category_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category_ids()) {
    category_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_ids_);
  }
  vk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vk_id()) {
    vk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_id_);
  }
  ok_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ok_id()) {
    ok_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_id_);
  }
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_idfa()) {
    idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
  }
  gaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gaid()) {
    gaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaid_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&advert_sitename_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(advert_sitename_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.LoginState)
}

void LoginState::SharedCtor() {
  _cached_size_ = 0;
  from_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ids_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advert_sitename_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(advert_sitename_));
}

LoginState::~LoginState() {
  // @@protoc_insertion_point(destructor:recostream.pb.LoginState)
  SharedDtor();
}

void LoginState::SharedDtor() {
  from_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ids_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gaid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginState& LoginState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginState* LoginState::New(::google::protobuf::Arena* arena) const {
  LoginState* n = new LoginState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.LoginState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  many_vids_.Clear();
  many_emails_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_label_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!category_ids_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_ids_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!vk_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vk_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!ok_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ok_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!idfa_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*idfa_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!gaid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gaid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vid_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(vid_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&split_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&advert_sitename_) -
        reinterpret_cast<char*>(&split_)) + sizeof(advert_sitename_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.LoginState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 vid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 split = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_split();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_anonymous = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_anonymous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_label().data(), static_cast<int>(this->from_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.from_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 advert_sitename = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_advert_sitename();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &advert_sitename_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category_ids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category_ids().data(), static_cast<int>(this->category_ids().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.category_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string many_vids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_many_vids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->many_vids(this->many_vids_size() - 1).data(),
            static_cast<int>(this->many_vids(this->many_vids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.many_vids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string many_emails = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_many_emails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->many_emails(this->many_emails_size() - 1).data(),
            static_cast<int>(this->many_emails(this->many_emails_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.many_emails");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vk_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vk_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vk_id().data(), static_cast<int>(this->vk_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.vk_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ok_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ok_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ok_id().data(), static_cast<int>(this->ok_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.ok_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string idfa = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), static_cast<int>(this->idfa().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.idfa");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gaid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gaid().data(), static_cast<int>(this->gaid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.LoginState.gaid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.LoginState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.LoginState)
  return false;
#undef DO_
}

void LoginState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.LoginState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional uint64 vid = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vid(), output);
  }

  // optional int32 split = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->split(), output);
  }

  // optional bool is_anonymous = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_anonymous(), output);
  }

  // optional string from_label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.from_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->from_label(), output);
  }

  // optional int64 advert_sitename = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->advert_sitename(), output);
  }

  // optional string category_ids = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_ids().data(), static_cast<int>(this->category_ids().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.category_ids");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->category_ids(), output);
  }

  // repeated string many_vids = 8;
  for (int i = 0, n = this->many_vids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->many_vids(i).data(), static_cast<int>(this->many_vids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.many_vids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->many_vids(i), output);
  }

  // repeated string many_emails = 9;
  for (int i = 0, n = this->many_emails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->many_emails(i).data(), static_cast<int>(this->many_emails(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.many_emails");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->many_emails(i), output);
  }

  // optional string vk_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk_id().data(), static_cast<int>(this->vk_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.vk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->vk_id(), output);
  }

  // optional string ok_id = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok_id().data(), static_cast<int>(this->ok_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.ok_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ok_id(), output);
  }

  // optional string idfa = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->idfa(), output);
  }

  // optional string gaid = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gaid().data(), static_cast<int>(this->gaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.gaid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->gaid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.LoginState)
}

::google::protobuf::uint8* LoginState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.LoginState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 vid = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vid(), target);
  }

  // optional int32 split = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->split(), target);
  }

  // optional bool is_anonymous = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_anonymous(), target);
  }

  // optional string from_label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_label().data(), static_cast<int>(this->from_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.from_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from_label(), target);
  }

  // optional int64 advert_sitename = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->advert_sitename(), target);
  }

  // optional string category_ids = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_ids().data(), static_cast<int>(this->category_ids().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.category_ids");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->category_ids(), target);
  }

  // repeated string many_vids = 8;
  for (int i = 0, n = this->many_vids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->many_vids(i).data(), static_cast<int>(this->many_vids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.many_vids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->many_vids(i), target);
  }

  // repeated string many_emails = 9;
  for (int i = 0, n = this->many_emails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->many_emails(i).data(), static_cast<int>(this->many_emails(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.many_emails");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->many_emails(i), target);
  }

  // optional string vk_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk_id().data(), static_cast<int>(this->vk_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.vk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vk_id(), target);
  }

  // optional string ok_id = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok_id().data(), static_cast<int>(this->ok_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.ok_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ok_id(), target);
  }

  // optional string idfa = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->idfa(), target);
  }

  // optional string gaid = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gaid().data(), static_cast<int>(this->gaid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.LoginState.gaid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->gaid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.LoginState)
  return target;
}

size_t LoginState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.LoginState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }
  // repeated string many_vids = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->many_vids_size());
  for (int i = 0, n = this->many_vids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->many_vids(i));
  }

  // repeated string many_emails = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->many_emails_size());
  for (int i = 0, n = this->many_emails_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->many_emails(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string from_label = 5;
    if (has_from_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_label());
    }

    // optional string category_ids = 7;
    if (has_category_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_ids());
    }

    // optional string vk_id = 10;
    if (has_vk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vk_id());
    }

    // optional string ok_id = 11;
    if (has_ok_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ok_id());
    }

    // optional string idfa = 12;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string gaid = 13;
    if (has_gaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gaid());
    }

  }
  // optional uint64 vid = 2;
  if (has_vid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vid());
  }

  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 split = 3;
    if (has_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->split());
    }

    // optional bool is_anonymous = 4;
    if (has_is_anonymous()) {
      total_size += 1 + 1;
    }

    // optional int64 advert_sitename = 6;
    if (has_advert_sitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->advert_sitename());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.LoginState)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.LoginState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.LoginState)
    MergeFrom(*source);
  }
}

void LoginState::MergeFrom(const LoginState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.LoginState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  many_vids_.MergeFrom(from.many_vids_);
  many_emails_.MergeFrom(from.many_emails_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_label();
      from_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_category_ids();
      category_ids_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_ids_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_vk_id();
      vk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ok_id();
      ok_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_idfa();
      idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_gaid();
      gaid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gaid_);
    }
    if (cached_has_bits & 0x00000040u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      vid_ = from.vid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_anonymous_ = from.is_anonymous_;
    }
    if (cached_has_bits & 0x00000400u) {
      advert_sitename_ = from.advert_sitename_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.LoginState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginState::CopyFrom(const LoginState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.LoginState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  return true;
}

void LoginState::Swap(LoginState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginState::InternalSwap(LoginState* other) {
  using std::swap;
  many_vids_.InternalSwap(&other->many_vids_);
  many_emails_.InternalSwap(&other->many_emails_);
  from_label_.Swap(&other->from_label_);
  category_ids_.Swap(&other->category_ids_);
  vk_id_.Swap(&other->vk_id_);
  ok_id_.Swap(&other->ok_id_);
  idfa_.Swap(&other->idfa_);
  gaid_.Swap(&other->gaid_);
  swap(user_id_, other->user_id_);
  swap(vid_, other->vid_);
  swap(split_, other->split_);
  swap(is_anonymous_, other->is_anonymous_);
  swap(advert_sitename_, other->advert_sitename_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginState

// required int64 user_id = 1;
bool LoginState::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginState::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginState::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginState::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 LoginState::user_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.user_id)
  return user_id_;
}
void LoginState::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.user_id)
}

// optional uint64 vid = 2;
bool LoginState::has_vid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LoginState::set_has_vid() {
  _has_bits_[0] |= 0x00000080u;
}
void LoginState::clear_has_vid() {
  _has_bits_[0] &= ~0x00000080u;
}
void LoginState::clear_vid() {
  vid_ = GOOGLE_ULONGLONG(0);
  clear_has_vid();
}
::google::protobuf::uint64 LoginState::vid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.vid)
  return vid_;
}
void LoginState::set_vid(::google::protobuf::uint64 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.vid)
}

// optional int32 split = 3;
bool LoginState::has_split() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoginState::set_has_split() {
  _has_bits_[0] |= 0x00000100u;
}
void LoginState::clear_has_split() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoginState::clear_split() {
  split_ = 0;
  clear_has_split();
}
::google::protobuf::int32 LoginState::split() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.split)
  return split_;
}
void LoginState::set_split(::google::protobuf::int32 value) {
  set_has_split();
  split_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.split)
}

// optional bool is_anonymous = 4;
bool LoginState::has_is_anonymous() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LoginState::set_has_is_anonymous() {
  _has_bits_[0] |= 0x00000200u;
}
void LoginState::clear_has_is_anonymous() {
  _has_bits_[0] &= ~0x00000200u;
}
void LoginState::clear_is_anonymous() {
  is_anonymous_ = false;
  clear_has_is_anonymous();
}
bool LoginState::is_anonymous() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.is_anonymous)
  return is_anonymous_;
}
void LoginState::set_is_anonymous(bool value) {
  set_has_is_anonymous();
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.is_anonymous)
}

// optional string from_label = 5;
bool LoginState::has_from_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginState::set_has_from_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginState::clear_has_from_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginState::clear_from_label() {
  from_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_label();
}
const ::std::string& LoginState::from_label() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.from_label)
  return from_label_.GetNoArena();
}
void LoginState::set_from_label(const ::std::string& value) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.from_label)
}
#if LANG_CXX11
void LoginState::set_from_label(::std::string&& value) {
  set_has_from_label();
  from_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.from_label)
}
#endif
void LoginState::set_from_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.from_label)
}
void LoginState::set_from_label(const char* value, size_t size) {
  set_has_from_label();
  from_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.from_label)
}
::std::string* LoginState::mutable_from_label() {
  set_has_from_label();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.from_label)
  return from_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_from_label() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.from_label)
  clear_has_from_label();
  return from_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_from_label(::std::string* from_label) {
  if (from_label != NULL) {
    set_has_from_label();
  } else {
    clear_has_from_label();
  }
  from_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_label);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.from_label)
}

// optional int64 advert_sitename = 6;
bool LoginState::has_advert_sitename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LoginState::set_has_advert_sitename() {
  _has_bits_[0] |= 0x00000400u;
}
void LoginState::clear_has_advert_sitename() {
  _has_bits_[0] &= ~0x00000400u;
}
void LoginState::clear_advert_sitename() {
  advert_sitename_ = GOOGLE_LONGLONG(0);
  clear_has_advert_sitename();
}
::google::protobuf::int64 LoginState::advert_sitename() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.advert_sitename)
  return advert_sitename_;
}
void LoginState::set_advert_sitename(::google::protobuf::int64 value) {
  set_has_advert_sitename();
  advert_sitename_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.advert_sitename)
}

// optional string category_ids = 7;
bool LoginState::has_category_ids() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginState::set_has_category_ids() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginState::clear_has_category_ids() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginState::clear_category_ids() {
  category_ids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_ids();
}
const ::std::string& LoginState::category_ids() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.category_ids)
  return category_ids_.GetNoArena();
}
void LoginState::set_category_ids(const ::std::string& value) {
  set_has_category_ids();
  category_ids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.category_ids)
}
#if LANG_CXX11
void LoginState::set_category_ids(::std::string&& value) {
  set_has_category_ids();
  category_ids_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.category_ids)
}
#endif
void LoginState::set_category_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_ids();
  category_ids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.category_ids)
}
void LoginState::set_category_ids(const char* value, size_t size) {
  set_has_category_ids();
  category_ids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.category_ids)
}
::std::string* LoginState::mutable_category_ids() {
  set_has_category_ids();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.category_ids)
  return category_ids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_category_ids() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.category_ids)
  clear_has_category_ids();
  return category_ids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_category_ids(::std::string* category_ids) {
  if (category_ids != NULL) {
    set_has_category_ids();
  } else {
    clear_has_category_ids();
  }
  category_ids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_ids);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.category_ids)
}

// repeated string many_vids = 8;
int LoginState::many_vids_size() const {
  return many_vids_.size();
}
void LoginState::clear_many_vids() {
  many_vids_.Clear();
}
const ::std::string& LoginState::many_vids(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.many_vids)
  return many_vids_.Get(index);
}
::std::string* LoginState::mutable_many_vids(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.many_vids)
  return many_vids_.Mutable(index);
}
void LoginState::set_many_vids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.many_vids)
  many_vids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LoginState::set_many_vids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.many_vids)
  many_vids_.Mutable(index)->assign(std::move(value));
}
#endif
void LoginState::set_many_vids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  many_vids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.many_vids)
}
void LoginState::set_many_vids(int index, const char* value, size_t size) {
  many_vids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.many_vids)
}
::std::string* LoginState::add_many_vids() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.LoginState.many_vids)
  return many_vids_.Add();
}
void LoginState::add_many_vids(const ::std::string& value) {
  many_vids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.LoginState.many_vids)
}
#if LANG_CXX11
void LoginState::add_many_vids(::std::string&& value) {
  many_vids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.LoginState.many_vids)
}
#endif
void LoginState::add_many_vids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  many_vids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.LoginState.many_vids)
}
void LoginState::add_many_vids(const char* value, size_t size) {
  many_vids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.LoginState.many_vids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoginState::many_vids() const {
  // @@protoc_insertion_point(field_list:recostream.pb.LoginState.many_vids)
  return many_vids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LoginState::mutable_many_vids() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.LoginState.many_vids)
  return &many_vids_;
}

// repeated string many_emails = 9;
int LoginState::many_emails_size() const {
  return many_emails_.size();
}
void LoginState::clear_many_emails() {
  many_emails_.Clear();
}
const ::std::string& LoginState::many_emails(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.many_emails)
  return many_emails_.Get(index);
}
::std::string* LoginState::mutable_many_emails(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.many_emails)
  return many_emails_.Mutable(index);
}
void LoginState::set_many_emails(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.many_emails)
  many_emails_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LoginState::set_many_emails(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.many_emails)
  many_emails_.Mutable(index)->assign(std::move(value));
}
#endif
void LoginState::set_many_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  many_emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.many_emails)
}
void LoginState::set_many_emails(int index, const char* value, size_t size) {
  many_emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.many_emails)
}
::std::string* LoginState::add_many_emails() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.LoginState.many_emails)
  return many_emails_.Add();
}
void LoginState::add_many_emails(const ::std::string& value) {
  many_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.LoginState.many_emails)
}
#if LANG_CXX11
void LoginState::add_many_emails(::std::string&& value) {
  many_emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.LoginState.many_emails)
}
#endif
void LoginState::add_many_emails(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  many_emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.LoginState.many_emails)
}
void LoginState::add_many_emails(const char* value, size_t size) {
  many_emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.LoginState.many_emails)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoginState::many_emails() const {
  // @@protoc_insertion_point(field_list:recostream.pb.LoginState.many_emails)
  return many_emails_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LoginState::mutable_many_emails() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.LoginState.many_emails)
  return &many_emails_;
}

// optional string vk_id = 10;
bool LoginState::has_vk_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginState::set_has_vk_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginState::clear_has_vk_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginState::clear_vk_id() {
  vk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vk_id();
}
const ::std::string& LoginState::vk_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.vk_id)
  return vk_id_.GetNoArena();
}
void LoginState::set_vk_id(const ::std::string& value) {
  set_has_vk_id();
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.vk_id)
}
#if LANG_CXX11
void LoginState::set_vk_id(::std::string&& value) {
  set_has_vk_id();
  vk_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.vk_id)
}
#endif
void LoginState::set_vk_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk_id();
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.vk_id)
}
void LoginState::set_vk_id(const char* value, size_t size) {
  set_has_vk_id();
  vk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.vk_id)
}
::std::string* LoginState::mutable_vk_id() {
  set_has_vk_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.vk_id)
  return vk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_vk_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.vk_id)
  clear_has_vk_id();
  return vk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_vk_id(::std::string* vk_id) {
  if (vk_id != NULL) {
    set_has_vk_id();
  } else {
    clear_has_vk_id();
  }
  vk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.vk_id)
}

// optional string ok_id = 11;
bool LoginState::has_ok_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginState::set_has_ok_id() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginState::clear_has_ok_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginState::clear_ok_id() {
  ok_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok_id();
}
const ::std::string& LoginState::ok_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.ok_id)
  return ok_id_.GetNoArena();
}
void LoginState::set_ok_id(const ::std::string& value) {
  set_has_ok_id();
  ok_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.ok_id)
}
#if LANG_CXX11
void LoginState::set_ok_id(::std::string&& value) {
  set_has_ok_id();
  ok_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.ok_id)
}
#endif
void LoginState::set_ok_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok_id();
  ok_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.ok_id)
}
void LoginState::set_ok_id(const char* value, size_t size) {
  set_has_ok_id();
  ok_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.ok_id)
}
::std::string* LoginState::mutable_ok_id() {
  set_has_ok_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.ok_id)
  return ok_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_ok_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.ok_id)
  clear_has_ok_id();
  return ok_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_ok_id(::std::string* ok_id) {
  if (ok_id != NULL) {
    set_has_ok_id();
  } else {
    clear_has_ok_id();
  }
  ok_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.ok_id)
}

// optional string idfa = 12;
bool LoginState::has_idfa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginState::set_has_idfa() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginState::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginState::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
const ::std::string& LoginState::idfa() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.idfa)
  return idfa_.GetNoArena();
}
void LoginState::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.idfa)
}
#if LANG_CXX11
void LoginState::set_idfa(::std::string&& value) {
  set_has_idfa();
  idfa_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.idfa)
}
#endif
void LoginState::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.idfa)
}
void LoginState::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.idfa)
}
::std::string* LoginState::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_idfa() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.idfa)
}

// optional string gaid = 13;
bool LoginState::has_gaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginState::set_has_gaid() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginState::clear_has_gaid() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginState::clear_gaid() {
  gaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gaid();
}
const ::std::string& LoginState::gaid() const {
  // @@protoc_insertion_point(field_get:recostream.pb.LoginState.gaid)
  return gaid_.GetNoArena();
}
void LoginState::set_gaid(const ::std::string& value) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.LoginState.gaid)
}
#if LANG_CXX11
void LoginState::set_gaid(::std::string&& value) {
  set_has_gaid();
  gaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.LoginState.gaid)
}
#endif
void LoginState::set_gaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.LoginState.gaid)
}
void LoginState::set_gaid(const char* value, size_t size) {
  set_has_gaid();
  gaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.LoginState.gaid)
}
::std::string* LoginState::mutable_gaid() {
  set_has_gaid();
  // @@protoc_insertion_point(field_mutable:recostream.pb.LoginState.gaid)
  return gaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginState::release_gaid() {
  // @@protoc_insertion_point(field_release:recostream.pb.LoginState.gaid)
  clear_has_gaid();
  return gaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginState::set_allocated_gaid(::std::string* gaid) {
  if (gaid != NULL) {
    set_has_gaid();
  } else {
    clear_has_gaid();
  }
  gaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaid);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.LoginState.gaid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoState_CacheCursor::kRecordIdFieldNumber;
const int CosmoState_CacheCursor::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoState_CacheCursor::CosmoState_CacheCursor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.CosmoState.CacheCursor)
}
CosmoState_CacheCursor::CosmoState_CacheCursor(const CosmoState_CacheCursor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_id()) {
    record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
  }
  pos_ = from.pos_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.CosmoState.CacheCursor)
}

void CosmoState_CacheCursor::SharedCtor() {
  _cached_size_ = 0;
  record_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
}

CosmoState_CacheCursor::~CosmoState_CacheCursor() {
  // @@protoc_insertion_point(destructor:recostream.pb.CosmoState.CacheCursor)
  SharedDtor();
}

void CosmoState_CacheCursor::SharedDtor() {
  record_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmoState_CacheCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoState_CacheCursor::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoState_CacheCursor& CosmoState_CacheCursor::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoState_CacheCursor* CosmoState_CacheCursor::New(::google::protobuf::Arena* arena) const {
  CosmoState_CacheCursor* n = new CosmoState_CacheCursor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoState_CacheCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.CosmoState.CacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_record_id()) {
    GOOGLE_DCHECK(!record_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*record_id_.UnsafeRawStringPointer())->clear();
  }
  pos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoState_CacheCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.CosmoState.CacheCursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string record_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_id().data(), static_cast<int>(this->record_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.CosmoState.CacheCursor.record_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.CosmoState.CacheCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.CosmoState.CacheCursor)
  return false;
#undef DO_
}

void CosmoState_CacheCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.CosmoState.CacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_id().data(), static_cast<int>(this->record_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.CosmoState.CacheCursor.record_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->record_id(), output);
  }

  // required int32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.CosmoState.CacheCursor)
}

::google::protobuf::uint8* CosmoState_CacheCursor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.CosmoState.CacheCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_id().data(), static_cast<int>(this->record_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.CosmoState.CacheCursor.record_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->record_id(), target);
  }

  // required int32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.CosmoState.CacheCursor)
  return target;
}

size_t CosmoState_CacheCursor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.CosmoState.CacheCursor)
  size_t total_size = 0;

  if (has_record_id()) {
    // required string record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_id());
  }

  if (has_pos()) {
    // required int32 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  return total_size;
}
size_t CosmoState_CacheCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.CosmoState.CacheCursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_id());

    // required int32 pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoState_CacheCursor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.CosmoState.CacheCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoState_CacheCursor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoState_CacheCursor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.CosmoState.CacheCursor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.CosmoState.CacheCursor)
    MergeFrom(*source);
  }
}

void CosmoState_CacheCursor::MergeFrom(const CosmoState_CacheCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.CosmoState.CacheCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_id();
      record_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CosmoState_CacheCursor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.CosmoState.CacheCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoState_CacheCursor::CopyFrom(const CosmoState_CacheCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.CosmoState.CacheCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoState_CacheCursor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CosmoState_CacheCursor::Swap(CosmoState_CacheCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoState_CacheCursor::InternalSwap(CosmoState_CacheCursor* other) {
  using std::swap;
  record_id_.Swap(&other->record_id_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoState_CacheCursor::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoState_CacheCursor

// required string record_id = 1;
bool CosmoState_CacheCursor::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoState_CacheCursor::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoState_CacheCursor::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoState_CacheCursor::clear_record_id() {
  record_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_id();
}
const ::std::string& CosmoState_CacheCursor::record_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.CacheCursor.record_id)
  return record_id_.GetNoArena();
}
void CosmoState_CacheCursor::set_record_id(const ::std::string& value) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.CacheCursor.record_id)
}
#if LANG_CXX11
void CosmoState_CacheCursor::set_record_id(::std::string&& value) {
  set_has_record_id();
  record_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.CosmoState.CacheCursor.record_id)
}
#endif
void CosmoState_CacheCursor::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.CosmoState.CacheCursor.record_id)
}
void CosmoState_CacheCursor::set_record_id(const char* value, size_t size) {
  set_has_record_id();
  record_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.CosmoState.CacheCursor.record_id)
}
::std::string* CosmoState_CacheCursor::mutable_record_id() {
  set_has_record_id();
  // @@protoc_insertion_point(field_mutable:recostream.pb.CosmoState.CacheCursor.record_id)
  return record_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmoState_CacheCursor::release_record_id() {
  // @@protoc_insertion_point(field_release:recostream.pb.CosmoState.CacheCursor.record_id)
  clear_has_record_id();
  return record_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmoState_CacheCursor::set_allocated_record_id(::std::string* record_id) {
  if (record_id != NULL) {
    set_has_record_id();
  } else {
    clear_has_record_id();
  }
  record_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_id);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.CosmoState.CacheCursor.record_id)
}

// required int32 pos = 2;
bool CosmoState_CacheCursor::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoState_CacheCursor::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoState_CacheCursor::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoState_CacheCursor::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
::google::protobuf::int32 CosmoState_CacheCursor::pos() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.CacheCursor.pos)
  return pos_;
}
void CosmoState_CacheCursor::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.CacheCursor.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoState_Stats::kSkippedFieldNumber;
const int CosmoState_Stats::kBahromaMissedFieldNumber;
const int CosmoState_Stats::kBannedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoState_Stats::CosmoState_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.CosmoState.Stats)
}
CosmoState_Stats::CosmoState_Stats(const CosmoState_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skipped_, &from.skipped_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&skipped_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.CosmoState.Stats)
}

void CosmoState_Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&skipped_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banned_) -
      reinterpret_cast<char*>(&skipped_)) + sizeof(banned_));
}

CosmoState_Stats::~CosmoState_Stats() {
  // @@protoc_insertion_point(destructor:recostream.pb.CosmoState.Stats)
  SharedDtor();
}

void CosmoState_Stats::SharedDtor() {
}

void CosmoState_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoState_Stats::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoState_Stats& CosmoState_Stats::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoState_Stats* CosmoState_Stats::New(::google::protobuf::Arena* arena) const {
  CosmoState_Stats* n = new CosmoState_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoState_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.CosmoState.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&skipped_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&skipped_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoState_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.CosmoState.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skipped = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_skipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bahroma_missed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bahroma_missed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bahroma_missed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.CosmoState.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.CosmoState.Stats)
  return false;
#undef DO_
}

void CosmoState_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.CosmoState.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 skipped = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skipped(), output);
  }

  // optional int32 bahroma_missed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bahroma_missed(), output);
  }

  // optional int32 banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.CosmoState.Stats)
}

::google::protobuf::uint8* CosmoState_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.CosmoState.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 skipped = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skipped(), target);
  }

  // optional int32 bahroma_missed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bahroma_missed(), target);
  }

  // optional int32 banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.CosmoState.Stats)
  return target;
}

size_t CosmoState_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.CosmoState.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 skipped = 1;
    if (has_skipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skipped());
    }

    // optional int32 bahroma_missed = 2;
    if (has_bahroma_missed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bahroma_missed());
    }

    // optional int32 banned = 3;
    if (has_banned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banned());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoState_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.CosmoState.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoState_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoState_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.CosmoState.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.CosmoState.Stats)
    MergeFrom(*source);
  }
}

void CosmoState_Stats::MergeFrom(const CosmoState_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.CosmoState.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      skipped_ = from.skipped_;
    }
    if (cached_has_bits & 0x00000002u) {
      bahroma_missed_ = from.bahroma_missed_;
    }
    if (cached_has_bits & 0x00000004u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CosmoState_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.CosmoState.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoState_Stats::CopyFrom(const CosmoState_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.CosmoState.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoState_Stats::IsInitialized() const {
  return true;
}

void CosmoState_Stats::Swap(CosmoState_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoState_Stats::InternalSwap(CosmoState_Stats* other) {
  using std::swap;
  swap(skipped_, other->skipped_);
  swap(bahroma_missed_, other->bahroma_missed_);
  swap(banned_, other->banned_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoState_Stats::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoState_Stats

// optional int32 skipped = 1;
bool CosmoState_Stats::has_skipped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoState_Stats::set_has_skipped() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoState_Stats::clear_has_skipped() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoState_Stats::clear_skipped() {
  skipped_ = 0;
  clear_has_skipped();
}
::google::protobuf::int32 CosmoState_Stats::skipped() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.Stats.skipped)
  return skipped_;
}
void CosmoState_Stats::set_skipped(::google::protobuf::int32 value) {
  set_has_skipped();
  skipped_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.Stats.skipped)
}

// optional int32 bahroma_missed = 2;
bool CosmoState_Stats::has_bahroma_missed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoState_Stats::set_has_bahroma_missed() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoState_Stats::clear_has_bahroma_missed() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoState_Stats::clear_bahroma_missed() {
  bahroma_missed_ = 0;
  clear_has_bahroma_missed();
}
::google::protobuf::int32 CosmoState_Stats::bahroma_missed() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.Stats.bahroma_missed)
  return bahroma_missed_;
}
void CosmoState_Stats::set_bahroma_missed(::google::protobuf::int32 value) {
  set_has_bahroma_missed();
  bahroma_missed_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.Stats.bahroma_missed)
}

// optional int32 banned = 3;
bool CosmoState_Stats::has_banned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CosmoState_Stats::set_has_banned() {
  _has_bits_[0] |= 0x00000004u;
}
void CosmoState_Stats::clear_has_banned() {
  _has_bits_[0] &= ~0x00000004u;
}
void CosmoState_Stats::clear_banned() {
  banned_ = 0;
  clear_has_banned();
}
::google::protobuf::int32 CosmoState_Stats::banned() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.Stats.banned)
  return banned_;
}
void CosmoState_Stats::set_banned(::google::protobuf::int32 value) {
  set_has_banned();
  banned_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.Stats.banned)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoState_ExperimentInfo::kExperimentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoState_ExperimentInfo::CosmoState_ExperimentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.CosmoState.ExperimentInfo)
}
CosmoState_ExperimentInfo::CosmoState_ExperimentInfo(const CosmoState_ExperimentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  experiment_id_ = from.experiment_id_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.CosmoState.ExperimentInfo)
}

void CosmoState_ExperimentInfo::SharedCtor() {
  _cached_size_ = 0;
  experiment_id_ = 0u;
}

CosmoState_ExperimentInfo::~CosmoState_ExperimentInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.CosmoState.ExperimentInfo)
  SharedDtor();
}

void CosmoState_ExperimentInfo::SharedDtor() {
}

void CosmoState_ExperimentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoState_ExperimentInfo::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoState_ExperimentInfo& CosmoState_ExperimentInfo::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoState_ExperimentInfo* CosmoState_ExperimentInfo::New(::google::protobuf::Arena* arena) const {
  CosmoState_ExperimentInfo* n = new CosmoState_ExperimentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoState_ExperimentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.CosmoState.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiment_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoState_ExperimentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.CosmoState.ExperimentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 experiment_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.CosmoState.ExperimentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.CosmoState.ExperimentInfo)
  return false;
#undef DO_
}

void CosmoState_ExperimentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.CosmoState.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->experiment_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.CosmoState.ExperimentInfo)
}

::google::protobuf::uint8* CosmoState_ExperimentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.CosmoState.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->experiment_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.CosmoState.ExperimentInfo)
  return target;
}

size_t CosmoState_ExperimentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.CosmoState.ExperimentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 experiment_id = 1;
  if (has_experiment_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoState_ExperimentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.CosmoState.ExperimentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoState_ExperimentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoState_ExperimentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.CosmoState.ExperimentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.CosmoState.ExperimentInfo)
    MergeFrom(*source);
  }
}

void CosmoState_ExperimentInfo::MergeFrom(const CosmoState_ExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.CosmoState.ExperimentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_experiment_id()) {
    set_experiment_id(from.experiment_id());
  }
}

void CosmoState_ExperimentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.CosmoState.ExperimentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoState_ExperimentInfo::CopyFrom(const CosmoState_ExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.CosmoState.ExperimentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoState_ExperimentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CosmoState_ExperimentInfo::Swap(CosmoState_ExperimentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoState_ExperimentInfo::InternalSwap(CosmoState_ExperimentInfo* other) {
  using std::swap;
  swap(experiment_id_, other->experiment_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoState_ExperimentInfo::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoState_ExperimentInfo

// required uint32 experiment_id = 1;
bool CosmoState_ExperimentInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoState_ExperimentInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoState_ExperimentInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoState_ExperimentInfo::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 CosmoState_ExperimentInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.ExperimentInfo.experiment_id)
  return experiment_id_;
}
void CosmoState_ExperimentInfo::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.CosmoState.ExperimentInfo.experiment_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoState::kCacheCursorFieldNumber;
const int CosmoState::kStatsFieldNumber;
const int CosmoState::kExperimentInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoState::CosmoState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.CosmoState)
}
CosmoState::CosmoState(const CosmoState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cache_cursor()) {
    cache_cursor_ = new ::recostream::pb::CosmoState_CacheCursor(*from.cache_cursor_);
  } else {
    cache_cursor_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::recostream::pb::CosmoState_Stats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_experiment_info()) {
    experiment_info_ = new ::recostream::pb::CosmoState_ExperimentInfo(*from.experiment_info_);
  } else {
    experiment_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.CosmoState)
}

void CosmoState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cache_cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&experiment_info_) -
      reinterpret_cast<char*>(&cache_cursor_)) + sizeof(experiment_info_));
}

CosmoState::~CosmoState() {
  // @@protoc_insertion_point(destructor:recostream.pb.CosmoState)
  SharedDtor();
}

void CosmoState::SharedDtor() {
  if (this != internal_default_instance()) delete cache_cursor_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete experiment_info_;
}

void CosmoState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoState& CosmoState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoState* CosmoState::New(::google::protobuf::Arena* arena) const {
  CosmoState* n = new CosmoState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.CosmoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cache_cursor_ != NULL);
      cache_cursor_->::recostream::pb::CosmoState_CacheCursor::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->::recostream::pb::CosmoState_Stats::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(experiment_info_ != NULL);
      experiment_info_->::recostream::pb::CosmoState_ExperimentInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.CosmoState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .recostream.pb.CosmoState.CacheCursor cache_cursor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cache_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.CosmoState.Stats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.CosmoState.ExperimentInfo experiment_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experiment_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.CosmoState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.CosmoState)
  return false;
#undef DO_
}

void CosmoState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.CosmoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.CosmoState.CacheCursor cache_cursor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cache_cursor_, output);
  }

  // optional .recostream.pb.CosmoState.Stats stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_, output);
  }

  // optional .recostream.pb.CosmoState.ExperimentInfo experiment_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->experiment_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.CosmoState)
}

::google::protobuf::uint8* CosmoState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.CosmoState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.CosmoState.CacheCursor cache_cursor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cache_cursor_, deterministic, target);
  }

  // optional .recostream.pb.CosmoState.Stats stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_, deterministic, target);
  }

  // optional .recostream.pb.CosmoState.ExperimentInfo experiment_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->experiment_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.CosmoState)
  return target;
}

size_t CosmoState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.CosmoState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .recostream.pb.CosmoState.CacheCursor cache_cursor = 1;
    if (has_cache_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cache_cursor_);
    }

    // optional .recostream.pb.CosmoState.Stats stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

    // optional .recostream.pb.CosmoState.ExperimentInfo experiment_info = 3;
    if (has_experiment_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->experiment_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.CosmoState)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.CosmoState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.CosmoState)
    MergeFrom(*source);
  }
}

void CosmoState::MergeFrom(const CosmoState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.CosmoState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cache_cursor()->::recostream::pb::CosmoState_CacheCursor::MergeFrom(from.cache_cursor());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats()->::recostream::pb::CosmoState_Stats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_experiment_info()->::recostream::pb::CosmoState_ExperimentInfo::MergeFrom(from.experiment_info());
    }
  }
}

void CosmoState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.CosmoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoState::CopyFrom(const CosmoState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.CosmoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoState::IsInitialized() const {
  if (has_cache_cursor()) {
    if (!this->cache_cursor_->IsInitialized()) return false;
  }
  if (has_experiment_info()) {
    if (!this->experiment_info_->IsInitialized()) return false;
  }
  return true;
}

void CosmoState::Swap(CosmoState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoState::InternalSwap(CosmoState* other) {
  using std::swap;
  swap(cache_cursor_, other->cache_cursor_);
  swap(stats_, other->stats_);
  swap(experiment_info_, other->experiment_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoState

// optional .recostream.pb.CosmoState.CacheCursor cache_cursor = 1;
bool CosmoState::has_cache_cursor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoState::set_has_cache_cursor() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoState::clear_has_cache_cursor() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoState::clear_cache_cursor() {
  if (cache_cursor_ != NULL) cache_cursor_->::recostream::pb::CosmoState_CacheCursor::Clear();
  clear_has_cache_cursor();
}
const ::recostream::pb::CosmoState_CacheCursor& CosmoState::cache_cursor() const {
  const ::recostream::pb::CosmoState_CacheCursor* p = cache_cursor_;
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.cache_cursor)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::CosmoState_CacheCursor*>(
      &::recostream::pb::_CosmoState_CacheCursor_default_instance_);
}
::recostream::pb::CosmoState_CacheCursor* CosmoState::mutable_cache_cursor() {
  set_has_cache_cursor();
  if (cache_cursor_ == NULL) {
    cache_cursor_ = new ::recostream::pb::CosmoState_CacheCursor;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.CosmoState.cache_cursor)
  return cache_cursor_;
}
::recostream::pb::CosmoState_CacheCursor* CosmoState::release_cache_cursor() {
  // @@protoc_insertion_point(field_release:recostream.pb.CosmoState.cache_cursor)
  clear_has_cache_cursor();
  ::recostream::pb::CosmoState_CacheCursor* temp = cache_cursor_;
  cache_cursor_ = NULL;
  return temp;
}
void CosmoState::set_allocated_cache_cursor(::recostream::pb::CosmoState_CacheCursor* cache_cursor) {
  delete cache_cursor_;
  cache_cursor_ = cache_cursor;
  if (cache_cursor) {
    set_has_cache_cursor();
  } else {
    clear_has_cache_cursor();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.CosmoState.cache_cursor)
}

// optional .recostream.pb.CosmoState.Stats stats = 2;
bool CosmoState::has_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoState::set_has_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoState::clear_has_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoState::clear_stats() {
  if (stats_ != NULL) stats_->::recostream::pb::CosmoState_Stats::Clear();
  clear_has_stats();
}
const ::recostream::pb::CosmoState_Stats& CosmoState::stats() const {
  const ::recostream::pb::CosmoState_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::CosmoState_Stats*>(
      &::recostream::pb::_CosmoState_Stats_default_instance_);
}
::recostream::pb::CosmoState_Stats* CosmoState::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::recostream::pb::CosmoState_Stats;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.CosmoState.stats)
  return stats_;
}
::recostream::pb::CosmoState_Stats* CosmoState::release_stats() {
  // @@protoc_insertion_point(field_release:recostream.pb.CosmoState.stats)
  clear_has_stats();
  ::recostream::pb::CosmoState_Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void CosmoState::set_allocated_stats(::recostream::pb::CosmoState_Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.CosmoState.stats)
}

// optional .recostream.pb.CosmoState.ExperimentInfo experiment_info = 3;
bool CosmoState::has_experiment_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CosmoState::set_has_experiment_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CosmoState::clear_has_experiment_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CosmoState::clear_experiment_info() {
  if (experiment_info_ != NULL) experiment_info_->::recostream::pb::CosmoState_ExperimentInfo::Clear();
  clear_has_experiment_info();
}
const ::recostream::pb::CosmoState_ExperimentInfo& CosmoState::experiment_info() const {
  const ::recostream::pb::CosmoState_ExperimentInfo* p = experiment_info_;
  // @@protoc_insertion_point(field_get:recostream.pb.CosmoState.experiment_info)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::CosmoState_ExperimentInfo*>(
      &::recostream::pb::_CosmoState_ExperimentInfo_default_instance_);
}
::recostream::pb::CosmoState_ExperimentInfo* CosmoState::mutable_experiment_info() {
  set_has_experiment_info();
  if (experiment_info_ == NULL) {
    experiment_info_ = new ::recostream::pb::CosmoState_ExperimentInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.CosmoState.experiment_info)
  return experiment_info_;
}
::recostream::pb::CosmoState_ExperimentInfo* CosmoState::release_experiment_info() {
  // @@protoc_insertion_point(field_release:recostream.pb.CosmoState.experiment_info)
  clear_has_experiment_info();
  ::recostream::pb::CosmoState_ExperimentInfo* temp = experiment_info_;
  experiment_info_ = NULL;
  return temp;
}
void CosmoState::set_allocated_experiment_info(::recostream::pb::CosmoState_ExperimentInfo* experiment_info) {
  delete experiment_info_;
  experiment_info_ = experiment_info;
  if (experiment_info) {
    set_has_experiment_info();
  } else {
    clear_has_experiment_info();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.CosmoState.experiment_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

CosmoSources::CosmoSources_StatesEntry::CosmoSources_StatesEntry() {}
CosmoSources::CosmoSources_StatesEntry::CosmoSources_StatesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata CosmoSources::CosmoSources_StatesEntry::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[5];
}
void CosmoSources::CosmoSources_StatesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void CosmoSources::CosmoSources_StatesEntry::MergeFrom(const CosmoSources_StatesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoSources::kStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoSources::CosmoSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.CosmoSources)
}
CosmoSources::CosmoSources(const CosmoSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  states_.MergeFrom(from.states_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.CosmoSources)
}

void CosmoSources::SharedCtor() {
  _cached_size_ = 0;
}

CosmoSources::~CosmoSources() {
  // @@protoc_insertion_point(destructor:recostream.pb.CosmoSources)
  SharedDtor();
}

void CosmoSources::SharedDtor() {
}

void CosmoSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoSources::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoSources& CosmoSources::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoSources* CosmoSources::New(::google::protobuf::Arena* arena) const {
  CosmoSources* n = new CosmoSources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoSources::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.CosmoSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.CosmoSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .recostream.pb.CosmoState> states = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          CosmoSources_StatesEntry::Parser< ::google::protobuf::internal::MapField<
              CosmoSources_StatesEntry,
              ::std::string, ::recostream::pb::CosmoState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState > > parser(&states_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.CosmoSources.StatesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.CosmoSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.CosmoSources)
  return false;
#undef DO_
}

void CosmoSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.CosmoSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .recostream.pb.CosmoState> states = 1;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "recostream.pb.CosmoSources.StatesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->states().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CosmoSources_StatesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CosmoSources_StatesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.CosmoSources)
}

::google::protobuf::uint8* CosmoSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.CosmoSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .recostream.pb.CosmoState> states = 1;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "recostream.pb.CosmoSources.StatesEntry.key");
      }
    };

    if (deterministic &&
        this->states().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CosmoSources_StatesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CosmoSources_StatesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.CosmoSources)
  return target;
}

size_t CosmoSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.CosmoSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .recostream.pb.CosmoState> states = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->states_size());
  {
    ::google::protobuf::scoped_ptr<CosmoSources_StatesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >::const_iterator
        it = this->states().begin();
        it != this->states().end(); ++it) {
      entry.reset(states_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.CosmoSources)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.CosmoSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.CosmoSources)
    MergeFrom(*source);
  }
}

void CosmoSources::MergeFrom(const CosmoSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.CosmoSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void CosmoSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.CosmoSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoSources::CopyFrom(const CosmoSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.CosmoSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoSources::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->states())) return false;
  return true;
}

void CosmoSources::Swap(CosmoSources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoSources::InternalSwap(CosmoSources* other) {
  using std::swap;
  states_.Swap(&other->states_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoSources::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoSources

// map<string, .recostream.pb.CosmoState> states = 1;
int CosmoSources::states_size() const {
  return states_.size();
}
void CosmoSources::clear_states() {
  states_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >&
CosmoSources::states() const {
  // @@protoc_insertion_point(field_map:recostream.pb.CosmoSources.states)
  return states_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::recostream::pb::CosmoState >*
CosmoSources::mutable_states() {
  // @@protoc_insertion_point(field_mutable_map:recostream.pb.CosmoSources.states)
  return states_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetState::kLastBannersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetState::TargetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.TargetState)
}
TargetState::TargetState(const TargetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      last_banners_(from.last_banners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.TargetState)
}

void TargetState::SharedCtor() {
  _cached_size_ = 0;
}

TargetState::~TargetState() {
  // @@protoc_insertion_point(destructor:recostream.pb.TargetState)
  SharedDtor();
}

void TargetState::SharedDtor() {
}

void TargetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetState& TargetState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetState* TargetState::New(::google::protobuf::Arena* arena) const {
  TargetState* n = new TargetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.TargetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_banners_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.TargetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 last_banners = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_last_banners())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_last_banners())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.TargetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.TargetState)
  return false;
#undef DO_
}

void TargetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.TargetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 last_banners = 1;
  for (int i = 0, n = this->last_banners_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->last_banners(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.TargetState)
}

::google::protobuf::uint8* TargetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.TargetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 last_banners = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->last_banners_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.TargetState)
  return target;
}

size_t TargetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.TargetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 last_banners = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->last_banners_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->last_banners_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.TargetState)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.TargetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.TargetState)
    MergeFrom(*source);
  }
}

void TargetState::MergeFrom(const TargetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.TargetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_banners_.MergeFrom(from.last_banners_);
}

void TargetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.TargetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetState::CopyFrom(const TargetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.TargetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetState::IsInitialized() const {
  return true;
}

void TargetState::Swap(TargetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetState::InternalSwap(TargetState* other) {
  using std::swap;
  last_banners_.InternalSwap(&other->last_banners_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetState

// repeated int32 last_banners = 1;
int TargetState::last_banners_size() const {
  return last_banners_.size();
}
void TargetState::clear_last_banners() {
  last_banners_.Clear();
}
::google::protobuf::int32 TargetState::last_banners(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.TargetState.last_banners)
  return last_banners_.Get(index);
}
void TargetState::set_last_banners(int index, ::google::protobuf::int32 value) {
  last_banners_.Set(index, value);
  // @@protoc_insertion_point(field_set:recostream.pb.TargetState.last_banners)
}
void TargetState::add_last_banners(::google::protobuf::int32 value) {
  last_banners_.Add(value);
  // @@protoc_insertion_point(field_add:recostream.pb.TargetState.last_banners)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TargetState::last_banners() const {
  // @@protoc_insertion_point(field_list:recostream.pb.TargetState.last_banners)
  return last_banners_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TargetState::mutable_last_banners() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.TargetState.last_banners)
  return &last_banners_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TargetSources::TargetSources_StatesEntry::TargetSources_StatesEntry() {}
TargetSources::TargetSources_StatesEntry::TargetSources_StatesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata TargetSources::TargetSources_StatesEntry::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[8];
}
void TargetSources::TargetSources_StatesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void TargetSources::TargetSources_StatesEntry::MergeFrom(const TargetSources_StatesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetSources::kStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetSources::TargetSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.TargetSources)
}
TargetSources::TargetSources(const TargetSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  states_.MergeFrom(from.states_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.TargetSources)
}

void TargetSources::SharedCtor() {
  _cached_size_ = 0;
}

TargetSources::~TargetSources() {
  // @@protoc_insertion_point(destructor:recostream.pb.TargetSources)
  SharedDtor();
}

void TargetSources::SharedDtor() {
}

void TargetSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetSources::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetSources& TargetSources::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetSources* TargetSources::New(::google::protobuf::Arena* arena) const {
  TargetSources* n = new TargetSources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetSources::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.TargetSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.TargetSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .recostream.pb.TargetState> states = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          TargetSources_StatesEntry::Parser< ::google::protobuf::internal::MapField<
              TargetSources_StatesEntry,
              ::std::string, ::recostream::pb::TargetState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState > > parser(&states_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.TargetSources.StatesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.TargetSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.TargetSources)
  return false;
#undef DO_
}

void TargetSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.TargetSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .recostream.pb.TargetState> states = 1;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "recostream.pb.TargetSources.StatesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->states().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TargetSources_StatesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TargetSources_StatesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.TargetSources)
}

::google::protobuf::uint8* TargetSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.TargetSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .recostream.pb.TargetState> states = 1;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "recostream.pb.TargetSources.StatesEntry.key");
      }
    };

    if (deterministic &&
        this->states().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TargetSources_StatesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TargetSources_StatesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.TargetSources)
  return target;
}

size_t TargetSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.TargetSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .recostream.pb.TargetState> states = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->states_size());
  {
    ::google::protobuf::scoped_ptr<TargetSources_StatesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >::const_iterator
        it = this->states().begin();
        it != this->states().end(); ++it) {
      entry.reset(states_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.TargetSources)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.TargetSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.TargetSources)
    MergeFrom(*source);
  }
}

void TargetSources::MergeFrom(const TargetSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.TargetSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void TargetSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.TargetSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSources::CopyFrom(const TargetSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.TargetSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSources::IsInitialized() const {
  return true;
}

void TargetSources::Swap(TargetSources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetSources::InternalSwap(TargetSources* other) {
  using std::swap;
  states_.Swap(&other->states_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetSources::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetSources

// map<string, .recostream.pb.TargetState> states = 1;
int TargetSources::states_size() const {
  return states_.size();
}
void TargetSources::clear_states() {
  states_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >&
TargetSources::states() const {
  // @@protoc_insertion_point(field_map:recostream.pb.TargetSources.states)
  return states_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::recostream::pb::TargetState >*
TargetSources::mutable_states() {
  // @@protoc_insertion_point(field_mutable_map:recostream.pb.TargetSources.states)
  return states_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultsPageState_BlockState::kNameFieldNumber;
const int ResultsPageState_BlockState::kUsedPositionsFieldNumber;
const int ResultsPageState_BlockState::kBlockLayoutPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultsPageState_BlockState::ResultsPageState_BlockState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ResultsPageState.BlockState)
}
ResultsPageState_BlockState::ResultsPageState_BlockState(const ResultsPageState_BlockState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&used_positions_, &from.used_positions_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_layout_position_) -
    reinterpret_cast<char*>(&used_positions_)) + sizeof(block_layout_position_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ResultsPageState.BlockState)
}

void ResultsPageState_BlockState::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&used_positions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_layout_position_) -
      reinterpret_cast<char*>(&used_positions_)) + sizeof(block_layout_position_));
}

ResultsPageState_BlockState::~ResultsPageState_BlockState() {
  // @@protoc_insertion_point(destructor:recostream.pb.ResultsPageState.BlockState)
  SharedDtor();
}

void ResultsPageState_BlockState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResultsPageState_BlockState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultsPageState_BlockState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultsPageState_BlockState& ResultsPageState_BlockState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultsPageState_BlockState* ResultsPageState_BlockState::New(::google::protobuf::Arena* arena) const {
  ResultsPageState_BlockState* n = new ResultsPageState_BlockState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultsPageState_BlockState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ResultsPageState.BlockState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&used_positions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_layout_position_) -
        reinterpret_cast<char*>(&used_positions_)) + sizeof(block_layout_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultsPageState_BlockState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ResultsPageState.BlockState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ResultsPageState.BlockState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 used_positions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_used_positions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_positions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 block_layout_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_block_layout_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_layout_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ResultsPageState.BlockState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ResultsPageState.BlockState)
  return false;
#undef DO_
}

void ResultsPageState_BlockState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ResultsPageState.BlockState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultsPageState.BlockState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 used_positions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_positions(), output);
  }

  // optional int32 block_layout_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_layout_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ResultsPageState.BlockState)
}

::google::protobuf::uint8* ResultsPageState_BlockState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ResultsPageState.BlockState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultsPageState.BlockState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 used_positions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_positions(), target);
  }

  // optional int32 block_layout_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block_layout_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ResultsPageState.BlockState)
  return target;
}

size_t ResultsPageState_BlockState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ResultsPageState.BlockState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 used_positions = 2;
    if (has_used_positions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_positions());
    }

    // optional int32 block_layout_position = 3;
    if (has_block_layout_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_layout_position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultsPageState_BlockState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ResultsPageState.BlockState)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultsPageState_BlockState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultsPageState_BlockState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ResultsPageState.BlockState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ResultsPageState.BlockState)
    MergeFrom(*source);
  }
}

void ResultsPageState_BlockState::MergeFrom(const ResultsPageState_BlockState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ResultsPageState.BlockState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      used_positions_ = from.used_positions_;
    }
    if (cached_has_bits & 0x00000004u) {
      block_layout_position_ = from.block_layout_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultsPageState_BlockState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ResultsPageState.BlockState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultsPageState_BlockState::CopyFrom(const ResultsPageState_BlockState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ResultsPageState.BlockState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultsPageState_BlockState::IsInitialized() const {
  return true;
}

void ResultsPageState_BlockState::Swap(ResultsPageState_BlockState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultsPageState_BlockState::InternalSwap(ResultsPageState_BlockState* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(used_positions_, other->used_positions_);
  swap(block_layout_position_, other->block_layout_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultsPageState_BlockState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultsPageState_BlockState

// optional string name = 1;
bool ResultsPageState_BlockState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultsPageState_BlockState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultsPageState_BlockState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultsPageState_BlockState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ResultsPageState_BlockState::name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.BlockState.name)
  return name_.GetNoArena();
}
void ResultsPageState_BlockState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.BlockState.name)
}
#if LANG_CXX11
void ResultsPageState_BlockState::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ResultsPageState.BlockState.name)
}
#endif
void ResultsPageState_BlockState::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ResultsPageState.BlockState.name)
}
void ResultsPageState_BlockState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ResultsPageState.BlockState.name)
}
::std::string* ResultsPageState_BlockState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultsPageState.BlockState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultsPageState_BlockState::release_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.ResultsPageState.BlockState.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultsPageState_BlockState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ResultsPageState.BlockState.name)
}

// optional int32 used_positions = 2;
bool ResultsPageState_BlockState::has_used_positions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResultsPageState_BlockState::set_has_used_positions() {
  _has_bits_[0] |= 0x00000002u;
}
void ResultsPageState_BlockState::clear_has_used_positions() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResultsPageState_BlockState::clear_used_positions() {
  used_positions_ = 0;
  clear_has_used_positions();
}
::google::protobuf::int32 ResultsPageState_BlockState::used_positions() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.BlockState.used_positions)
  return used_positions_;
}
void ResultsPageState_BlockState::set_used_positions(::google::protobuf::int32 value) {
  set_has_used_positions();
  used_positions_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.BlockState.used_positions)
}

// optional int32 block_layout_position = 3;
bool ResultsPageState_BlockState::has_block_layout_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResultsPageState_BlockState::set_has_block_layout_position() {
  _has_bits_[0] |= 0x00000004u;
}
void ResultsPageState_BlockState::clear_has_block_layout_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResultsPageState_BlockState::clear_block_layout_position() {
  block_layout_position_ = 0;
  clear_has_block_layout_position();
}
::google::protobuf::int32 ResultsPageState_BlockState::block_layout_position() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.BlockState.block_layout_position)
  return block_layout_position_;
}
void ResultsPageState_BlockState::set_block_layout_position(::google::protobuf::int32 value) {
  set_has_block_layout_position();
  block_layout_position_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.BlockState.block_layout_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultsPageState::kLayoutPositionFieldNumber;
const int ResultsPageState::kBlocksFieldNumber;
const int ResultsPageState::kTerminatedProvidersFieldNumber;
const int ResultsPageState::kLentaFieldNumber;
const int ResultsPageState::kDocumentHashesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultsPageState::ResultsPageState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ResultsPageState)
}
ResultsPageState::ResultsPageState(const ResultsPageState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blocks_(from.blocks_),
      terminated_providers_(from.terminated_providers_),
      lenta_(from.lenta_),
      document_hashes_(from.document_hashes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layout_position_ = from.layout_position_;
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ResultsPageState)
}

void ResultsPageState::SharedCtor() {
  _cached_size_ = 0;
  layout_position_ = 0;
}

ResultsPageState::~ResultsPageState() {
  // @@protoc_insertion_point(destructor:recostream.pb.ResultsPageState)
  SharedDtor();
}

void ResultsPageState::SharedDtor() {
}

void ResultsPageState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultsPageState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultsPageState& ResultsPageState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultsPageState* ResultsPageState::New(::google::protobuf::Arena* arena) const {
  ResultsPageState* n = new ResultsPageState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultsPageState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ResultsPageState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  terminated_providers_.Clear();
  lenta_.Clear();
  document_hashes_.Clear();
  layout_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultsPageState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ResultsPageState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layout_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_layout_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layout_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .recostream.pb.ResultsPageState.BlockState blocks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string terminated_providers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_terminated_providers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->terminated_providers(this->terminated_providers_size() - 1).data(),
            static_cast<int>(this->terminated_providers(this->terminated_providers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ResultsPageState.terminated_providers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 lenta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_lenta())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lenta())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 document_hashes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_document_hashes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_document_hashes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ResultsPageState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ResultsPageState)
  return false;
#undef DO_
}

void ResultsPageState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ResultsPageState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layout_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layout_position(), output);
  }

  // repeated .recostream.pb.ResultsPageState.BlockState blocks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blocks(static_cast<int>(i)), output);
  }

  // repeated string terminated_providers = 5;
  for (int i = 0, n = this->terminated_providers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terminated_providers(i).data(), static_cast<int>(this->terminated_providers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultsPageState.terminated_providers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->terminated_providers(i), output);
  }

  // repeated uint32 lenta = 6;
  for (int i = 0, n = this->lenta_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->lenta(i), output);
  }

  // repeated int64 document_hashes = 7;
  for (int i = 0, n = this->document_hashes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->document_hashes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ResultsPageState)
}

::google::protobuf::uint8* ResultsPageState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ResultsPageState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layout_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layout_position(), target);
  }

  // repeated .recostream.pb.ResultsPageState.BlockState blocks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->blocks(static_cast<int>(i)), deterministic, target);
  }

  // repeated string terminated_providers = 5;
  for (int i = 0, n = this->terminated_providers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terminated_providers(i).data(), static_cast<int>(this->terminated_providers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ResultsPageState.terminated_providers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->terminated_providers(i), target);
  }

  // repeated uint32 lenta = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->lenta_, target);

  // repeated int64 document_hashes = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->document_hashes_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ResultsPageState)
  return target;
}

size_t ResultsPageState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ResultsPageState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .recostream.pb.ResultsPageState.BlockState blocks = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks(static_cast<int>(i)));
    }
  }

  // repeated string terminated_providers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->terminated_providers_size());
  for (int i = 0, n = this->terminated_providers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->terminated_providers(i));
  }

  // repeated uint32 lenta = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->lenta_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lenta_size());
    total_size += data_size;
  }

  // repeated int64 document_hashes = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->document_hashes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->document_hashes_size());
    total_size += data_size;
  }

  // optional int32 layout_position = 1;
  if (has_layout_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->layout_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultsPageState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ResultsPageState)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultsPageState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultsPageState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ResultsPageState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ResultsPageState)
    MergeFrom(*source);
  }
}

void ResultsPageState::MergeFrom(const ResultsPageState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ResultsPageState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  terminated_providers_.MergeFrom(from.terminated_providers_);
  lenta_.MergeFrom(from.lenta_);
  document_hashes_.MergeFrom(from.document_hashes_);
  if (from.has_layout_position()) {
    set_layout_position(from.layout_position());
  }
}

void ResultsPageState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ResultsPageState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultsPageState::CopyFrom(const ResultsPageState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ResultsPageState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultsPageState::IsInitialized() const {
  return true;
}

void ResultsPageState::Swap(ResultsPageState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultsPageState::InternalSwap(ResultsPageState* other) {
  using std::swap;
  blocks_.InternalSwap(&other->blocks_);
  terminated_providers_.InternalSwap(&other->terminated_providers_);
  lenta_.InternalSwap(&other->lenta_);
  document_hashes_.InternalSwap(&other->document_hashes_);
  swap(layout_position_, other->layout_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultsPageState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultsPageState

// optional int32 layout_position = 1;
bool ResultsPageState::has_layout_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultsPageState::set_has_layout_position() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultsPageState::clear_has_layout_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultsPageState::clear_layout_position() {
  layout_position_ = 0;
  clear_has_layout_position();
}
::google::protobuf::int32 ResultsPageState::layout_position() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.layout_position)
  return layout_position_;
}
void ResultsPageState::set_layout_position(::google::protobuf::int32 value) {
  set_has_layout_position();
  layout_position_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.layout_position)
}

// repeated .recostream.pb.ResultsPageState.BlockState blocks = 3;
int ResultsPageState::blocks_size() const {
  return blocks_.size();
}
void ResultsPageState::clear_blocks() {
  blocks_.Clear();
}
const ::recostream::pb::ResultsPageState_BlockState& ResultsPageState::blocks(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.blocks)
  return blocks_.Get(index);
}
::recostream::pb::ResultsPageState_BlockState* ResultsPageState::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultsPageState.blocks)
  return blocks_.Mutable(index);
}
::recostream::pb::ResultsPageState_BlockState* ResultsPageState::add_blocks() {
  // @@protoc_insertion_point(field_add:recostream.pb.ResultsPageState.blocks)
  return blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::ResultsPageState_BlockState >*
ResultsPageState::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ResultsPageState.blocks)
  return &blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ResultsPageState_BlockState >&
ResultsPageState::blocks() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ResultsPageState.blocks)
  return blocks_;
}

// repeated string terminated_providers = 5;
int ResultsPageState::terminated_providers_size() const {
  return terminated_providers_.size();
}
void ResultsPageState::clear_terminated_providers() {
  terminated_providers_.Clear();
}
const ::std::string& ResultsPageState::terminated_providers(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.terminated_providers)
  return terminated_providers_.Get(index);
}
::std::string* ResultsPageState::mutable_terminated_providers(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ResultsPageState.terminated_providers)
  return terminated_providers_.Mutable(index);
}
void ResultsPageState::set_terminated_providers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.terminated_providers)
  terminated_providers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ResultsPageState::set_terminated_providers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.terminated_providers)
  terminated_providers_.Mutable(index)->assign(std::move(value));
}
#endif
void ResultsPageState::set_terminated_providers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  terminated_providers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:recostream.pb.ResultsPageState.terminated_providers)
}
void ResultsPageState::set_terminated_providers(int index, const char* value, size_t size) {
  terminated_providers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ResultsPageState.terminated_providers)
}
::std::string* ResultsPageState::add_terminated_providers() {
  // @@protoc_insertion_point(field_add_mutable:recostream.pb.ResultsPageState.terminated_providers)
  return terminated_providers_.Add();
}
void ResultsPageState::add_terminated_providers(const ::std::string& value) {
  terminated_providers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:recostream.pb.ResultsPageState.terminated_providers)
}
#if LANG_CXX11
void ResultsPageState::add_terminated_providers(::std::string&& value) {
  terminated_providers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:recostream.pb.ResultsPageState.terminated_providers)
}
#endif
void ResultsPageState::add_terminated_providers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  terminated_providers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:recostream.pb.ResultsPageState.terminated_providers)
}
void ResultsPageState::add_terminated_providers(const char* value, size_t size) {
  terminated_providers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:recostream.pb.ResultsPageState.terminated_providers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResultsPageState::terminated_providers() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ResultsPageState.terminated_providers)
  return terminated_providers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ResultsPageState::mutable_terminated_providers() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ResultsPageState.terminated_providers)
  return &terminated_providers_;
}

// repeated uint32 lenta = 6;
int ResultsPageState::lenta_size() const {
  return lenta_.size();
}
void ResultsPageState::clear_lenta() {
  lenta_.Clear();
}
::google::protobuf::uint32 ResultsPageState::lenta(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.lenta)
  return lenta_.Get(index);
}
void ResultsPageState::set_lenta(int index, ::google::protobuf::uint32 value) {
  lenta_.Set(index, value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.lenta)
}
void ResultsPageState::add_lenta(::google::protobuf::uint32 value) {
  lenta_.Add(value);
  // @@protoc_insertion_point(field_add:recostream.pb.ResultsPageState.lenta)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ResultsPageState::lenta() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ResultsPageState.lenta)
  return lenta_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ResultsPageState::mutable_lenta() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ResultsPageState.lenta)
  return &lenta_;
}

// repeated int64 document_hashes = 7;
int ResultsPageState::document_hashes_size() const {
  return document_hashes_.size();
}
void ResultsPageState::clear_document_hashes() {
  document_hashes_.Clear();
}
::google::protobuf::int64 ResultsPageState::document_hashes(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ResultsPageState.document_hashes)
  return document_hashes_.Get(index);
}
void ResultsPageState::set_document_hashes(int index, ::google::protobuf::int64 value) {
  document_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:recostream.pb.ResultsPageState.document_hashes)
}
void ResultsPageState::add_document_hashes(::google::protobuf::int64 value) {
  document_hashes_.Add(value);
  // @@protoc_insertion_point(field_add:recostream.pb.ResultsPageState.document_hashes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResultsPageState::document_hashes() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ResultsPageState.document_hashes)
  return document_hashes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResultsPageState::mutable_document_hashes() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ResultsPageState.document_hashes)
  return &document_hashes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PPNState::kResultsHashFieldNumber;
const int PPNState::kPositionFieldNumber;
const int PPNState::kCreationTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PPNState::PPNState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.PPNState)
}
PPNState::PPNState(const PPNState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_results_hash()) {
    results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.results_hash_);
  }
  ::memcpy(&creation_ts_, &from.creation_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&creation_ts_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.PPNState)
}

void PPNState::SharedCtor() {
  _cached_size_ = 0;
  results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&creation_ts_)) + sizeof(position_));
}

PPNState::~PPNState() {
  // @@protoc_insertion_point(destructor:recostream.pb.PPNState)
  SharedDtor();
}

void PPNState::SharedDtor() {
  results_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PPNState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PPNState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PPNState& PPNState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

PPNState* PPNState::New(::google::protobuf::Arena* arena) const {
  PPNState* n = new PPNState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PPNState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.PPNState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_results_hash()) {
    GOOGLE_DCHECK(!results_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*results_hash_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&creation_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&creation_ts_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PPNState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.PPNState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string results_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_results_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->results_hash().data(), static_cast<int>(this->results_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.PPNState.results_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 creation_ts = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_creation_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.PPNState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.PPNState)
  return false;
#undef DO_
}

void PPNState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.PPNState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string results_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->results_hash().data(), static_cast<int>(this->results_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PPNState.results_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->results_hash(), output);
  }

  // optional int32 position = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int64 creation_ts = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creation_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.PPNState)
}

::google::protobuf::uint8* PPNState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.PPNState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string results_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->results_hash().data(), static_cast<int>(this->results_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.PPNState.results_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->results_hash(), target);
  }

  // optional int32 position = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  // optional int64 creation_ts = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->creation_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.PPNState)
  return target;
}

size_t PPNState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.PPNState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string results_hash = 1;
    if (has_results_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->results_hash());
    }

    // optional int64 creation_ts = 3 [deprecated = true];
    if (has_creation_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_ts());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PPNState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.PPNState)
  GOOGLE_DCHECK_NE(&from, this);
  const PPNState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PPNState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.PPNState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.PPNState)
    MergeFrom(*source);
  }
}

void PPNState::MergeFrom(const PPNState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.PPNState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_results_hash();
      results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.results_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      creation_ts_ = from.creation_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PPNState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.PPNState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPNState::CopyFrom(const PPNState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.PPNState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPNState::IsInitialized() const {
  return true;
}

void PPNState::Swap(PPNState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PPNState::InternalSwap(PPNState* other) {
  using std::swap;
  results_hash_.Swap(&other->results_hash_);
  swap(creation_ts_, other->creation_ts_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PPNState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PPNState

// optional string results_hash = 1;
bool PPNState::has_results_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PPNState::set_has_results_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void PPNState::clear_has_results_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void PPNState::clear_results_hash() {
  results_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_results_hash();
}
const ::std::string& PPNState::results_hash() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PPNState.results_hash)
  return results_hash_.GetNoArena();
}
void PPNState::set_results_hash(const ::std::string& value) {
  set_has_results_hash();
  results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.PPNState.results_hash)
}
#if LANG_CXX11
void PPNState::set_results_hash(::std::string&& value) {
  set_has_results_hash();
  results_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.PPNState.results_hash)
}
#endif
void PPNState::set_results_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_results_hash();
  results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.PPNState.results_hash)
}
void PPNState::set_results_hash(const char* value, size_t size) {
  set_has_results_hash();
  results_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.PPNState.results_hash)
}
::std::string* PPNState::mutable_results_hash() {
  set_has_results_hash();
  // @@protoc_insertion_point(field_mutable:recostream.pb.PPNState.results_hash)
  return results_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PPNState::release_results_hash() {
  // @@protoc_insertion_point(field_release:recostream.pb.PPNState.results_hash)
  clear_has_results_hash();
  return results_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PPNState::set_allocated_results_hash(::std::string* results_hash) {
  if (results_hash != NULL) {
    set_has_results_hash();
  } else {
    clear_has_results_hash();
  }
  results_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results_hash);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.PPNState.results_hash)
}

// optional int32 position = 2;
bool PPNState::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PPNState::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void PPNState::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void PPNState::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 PPNState::position() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PPNState.position)
  return position_;
}
void PPNState::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PPNState.position)
}

// optional int64 creation_ts = 3 [deprecated = true];
bool PPNState::has_creation_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PPNState::set_has_creation_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void PPNState::clear_has_creation_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void PPNState::clear_creation_ts() {
  creation_ts_ = GOOGLE_LONGLONG(0);
  clear_has_creation_ts();
}
::google::protobuf::int64 PPNState::creation_ts() const {
  // @@protoc_insertion_point(field_get:recostream.pb.PPNState.creation_ts)
  return creation_ts_;
}
void PPNState::set_creation_ts(::google::protobuf::int64 value) {
  set_has_creation_ts();
  creation_ts_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.PPNState.creation_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionState_SubscriptionInfo::kCntFieldNumber;
const int SubscriptionState_SubscriptionInfo::kLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionState_SubscriptionInfo::SubscriptionState_SubscriptionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.SubscriptionState.SubscriptionInfo)
}
SubscriptionState_SubscriptionInfo::SubscriptionState_SubscriptionInfo(const SubscriptionState_SubscriptionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_ts_, &from.last_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&cnt_) -
    reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.SubscriptionState.SubscriptionInfo)
}

void SubscriptionState_SubscriptionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cnt_) -
      reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
}

SubscriptionState_SubscriptionInfo::~SubscriptionState_SubscriptionInfo() {
  // @@protoc_insertion_point(destructor:recostream.pb.SubscriptionState.SubscriptionInfo)
  SharedDtor();
}

void SubscriptionState_SubscriptionInfo::SharedDtor() {
}

void SubscriptionState_SubscriptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionState_SubscriptionInfo::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscriptionState_SubscriptionInfo& SubscriptionState_SubscriptionInfo::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubscriptionState_SubscriptionInfo* SubscriptionState_SubscriptionInfo::New(::google::protobuf::Arena* arena) const {
  SubscriptionState_SubscriptionInfo* n = new SubscriptionState_SubscriptionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscriptionState_SubscriptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnt_) -
        reinterpret_cast<char*>(&last_ts_)) + sizeof(cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscriptionState_SubscriptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.SubscriptionState.SubscriptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.SubscriptionState.SubscriptionInfo)
  return false;
#undef DO_
}

void SubscriptionState_SubscriptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cnt(), output);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.SubscriptionState.SubscriptionInfo)
}

::google::protobuf::uint8* SubscriptionState_SubscriptionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cnt(), target);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.SubscriptionState.SubscriptionInfo)
  return target;
}

size_t SubscriptionState_SubscriptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 cnt = 1;
  if (has_cnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cnt());
  }
  // optional int64 last_ts = 2;
  if (has_last_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionState_SubscriptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionState_SubscriptionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscriptionState_SubscriptionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.SubscriptionState.SubscriptionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.SubscriptionState.SubscriptionInfo)
    MergeFrom(*source);
  }
}

void SubscriptionState_SubscriptionInfo::MergeFrom(const SubscriptionState_SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_ts_ = from.last_ts_;
    }
    if (cached_has_bits & 0x00000002u) {
      cnt_ = from.cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionState_SubscriptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionState_SubscriptionInfo::CopyFrom(const SubscriptionState_SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.SubscriptionState.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionState_SubscriptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SubscriptionState_SubscriptionInfo::Swap(SubscriptionState_SubscriptionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionState_SubscriptionInfo::InternalSwap(SubscriptionState_SubscriptionInfo* other) {
  using std::swap;
  swap(last_ts_, other->last_ts_);
  swap(cnt_, other->cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscriptionState_SubscriptionInfo::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscriptionState_SubscriptionInfo

// required uint32 cnt = 1;
bool SubscriptionState_SubscriptionInfo::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubscriptionState_SubscriptionInfo::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void SubscriptionState_SubscriptionInfo::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubscriptionState_SubscriptionInfo::clear_cnt() {
  cnt_ = 0u;
  clear_has_cnt();
}
::google::protobuf::uint32 SubscriptionState_SubscriptionInfo::cnt() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.SubscriptionInfo.cnt)
  return cnt_;
}
void SubscriptionState_SubscriptionInfo::set_cnt(::google::protobuf::uint32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.SubscriptionInfo.cnt)
}

// optional int64 last_ts = 2;
bool SubscriptionState_SubscriptionInfo::has_last_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubscriptionState_SubscriptionInfo::set_has_last_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void SubscriptionState_SubscriptionInfo::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubscriptionState_SubscriptionInfo::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 SubscriptionState_SubscriptionInfo::last_ts() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.SubscriptionInfo.last_ts)
  return last_ts_;
}
void SubscriptionState_SubscriptionInfo::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.SubscriptionInfo.last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionState::kBlockNameFieldNumber;
const int SubscriptionState::kShowCategorySubscriptionFieldNumber;
const int SubscriptionState::kShowColdSourcesSubscriptionFieldNumber;
const int SubscriptionState::kUserSourceSubscriptionsFieldNumber;
const int SubscriptionState::kCategorySubscriptionFieldNumber;
const int SubscriptionState::kColdSourcesSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionState::SubscriptionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.SubscriptionState)
}
SubscriptionState::SubscriptionState(const SubscriptionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_source_subscriptions_(from.user_source_subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block_name()) {
    block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
  }
  if (from.has_category_subscription()) {
    category_subscription_ = new ::recostream::pb::SubscriptionState_SubscriptionInfo(*from.category_subscription_);
  } else {
    category_subscription_ = NULL;
  }
  if (from.has_cold_sources_subscription()) {
    cold_sources_subscription_ = new ::recostream::pb::SubscriptionState_SubscriptionInfo(*from.cold_sources_subscription_);
  } else {
    cold_sources_subscription_ = NULL;
  }
  ::memcpy(&show_category_subscription_, &from.show_category_subscription_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_cold_sources_subscription_) -
    reinterpret_cast<char*>(&show_category_subscription_)) + sizeof(show_cold_sources_subscription_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.SubscriptionState)
}

void SubscriptionState::SharedCtor() {
  _cached_size_ = 0;
  block_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&category_subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_cold_sources_subscription_) -
      reinterpret_cast<char*>(&category_subscription_)) + sizeof(show_cold_sources_subscription_));
}

SubscriptionState::~SubscriptionState() {
  // @@protoc_insertion_point(destructor:recostream.pb.SubscriptionState)
  SharedDtor();
}

void SubscriptionState::SharedDtor() {
  block_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete category_subscription_;
  if (this != internal_default_instance()) delete cold_sources_subscription_;
}

void SubscriptionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscriptionState& SubscriptionState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubscriptionState* SubscriptionState::New(::google::protobuf::Arena* arena) const {
  SubscriptionState* n = new SubscriptionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscriptionState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.SubscriptionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_source_subscriptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!block_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*block_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(category_subscription_ != NULL);
      category_subscription_->::recostream::pb::SubscriptionState_SubscriptionInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cold_sources_subscription_ != NULL);
      cold_sources_subscription_->::recostream::pb::SubscriptionState_SubscriptionInfo::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&show_category_subscription_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_cold_sources_subscription_) -
        reinterpret_cast<char*>(&show_category_subscription_)) + sizeof(show_cold_sources_subscription_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscriptionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.SubscriptionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block_name().data(), static_cast<int>(this->block_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.SubscriptionState.block_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_category_subscription = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_show_category_subscription();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_category_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_cold_sources_subscription = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_show_cold_sources_subscription();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_cold_sources_subscription_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 user_source_subscriptions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_user_source_subscriptions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_source_subscriptions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.SubscriptionState.SubscriptionInfo category_subscription = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.SubscriptionState.SubscriptionInfo cold_sources_subscription = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cold_sources_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.SubscriptionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.SubscriptionState)
  return false;
#undef DO_
}

void SubscriptionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.SubscriptionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string block_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SubscriptionState.block_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->block_name(), output);
  }

  // optional bool show_category_subscription = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_category_subscription(), output);
  }

  // optional bool show_cold_sources_subscription = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_cold_sources_subscription(), output);
  }

  // repeated int64 user_source_subscriptions = 5;
  for (int i = 0, n = this->user_source_subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->user_source_subscriptions(i), output);
  }

  // optional .recostream.pb.SubscriptionState.SubscriptionInfo category_subscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->category_subscription_, output);
  }

  // optional .recostream.pb.SubscriptionState.SubscriptionInfo cold_sources_subscription = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cold_sources_subscription_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.SubscriptionState)
}

::google::protobuf::uint8* SubscriptionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.SubscriptionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string block_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_name().data(), static_cast<int>(this->block_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.SubscriptionState.block_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_name(), target);
  }

  // optional bool show_category_subscription = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show_category_subscription(), target);
  }

  // optional bool show_cold_sources_subscription = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_cold_sources_subscription(), target);
  }

  // repeated int64 user_source_subscriptions = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->user_source_subscriptions_, target);

  // optional .recostream.pb.SubscriptionState.SubscriptionInfo category_subscription = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->category_subscription_, deterministic, target);
  }

  // optional .recostream.pb.SubscriptionState.SubscriptionInfo cold_sources_subscription = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->cold_sources_subscription_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.SubscriptionState)
  return target;
}

size_t SubscriptionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.SubscriptionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 user_source_subscriptions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->user_source_subscriptions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_source_subscriptions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string block_name = 1;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }

    // optional .recostream.pb.SubscriptionState.SubscriptionInfo category_subscription = 6;
    if (has_category_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->category_subscription_);
    }

    // optional .recostream.pb.SubscriptionState.SubscriptionInfo cold_sources_subscription = 7;
    if (has_cold_sources_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cold_sources_subscription_);
    }

    // optional bool show_category_subscription = 3;
    if (has_show_category_subscription()) {
      total_size += 1 + 1;
    }

    // optional bool show_cold_sources_subscription = 4;
    if (has_show_cold_sources_subscription()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.SubscriptionState)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscriptionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.SubscriptionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.SubscriptionState)
    MergeFrom(*source);
  }
}

void SubscriptionState::MergeFrom(const SubscriptionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.SubscriptionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_source_subscriptions_.MergeFrom(from.user_source_subscriptions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_block_name();
      block_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_category_subscription()->::recostream::pb::SubscriptionState_SubscriptionInfo::MergeFrom(from.category_subscription());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cold_sources_subscription()->::recostream::pb::SubscriptionState_SubscriptionInfo::MergeFrom(from.cold_sources_subscription());
    }
    if (cached_has_bits & 0x00000008u) {
      show_category_subscription_ = from.show_category_subscription_;
    }
    if (cached_has_bits & 0x00000010u) {
      show_cold_sources_subscription_ = from.show_cold_sources_subscription_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.SubscriptionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionState::CopyFrom(const SubscriptionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.SubscriptionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionState::IsInitialized() const {
  if (has_category_subscription()) {
    if (!this->category_subscription_->IsInitialized()) return false;
  }
  if (has_cold_sources_subscription()) {
    if (!this->cold_sources_subscription_->IsInitialized()) return false;
  }
  return true;
}

void SubscriptionState::Swap(SubscriptionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionState::InternalSwap(SubscriptionState* other) {
  using std::swap;
  user_source_subscriptions_.InternalSwap(&other->user_source_subscriptions_);
  block_name_.Swap(&other->block_name_);
  swap(category_subscription_, other->category_subscription_);
  swap(cold_sources_subscription_, other->cold_sources_subscription_);
  swap(show_category_subscription_, other->show_category_subscription_);
  swap(show_cold_sources_subscription_, other->show_cold_sources_subscription_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscriptionState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscriptionState

// optional string block_name = 1;
bool SubscriptionState::has_block_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubscriptionState::set_has_block_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SubscriptionState::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubscriptionState::clear_block_name() {
  block_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_name();
}
const ::std::string& SubscriptionState::block_name() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.block_name)
  return block_name_.GetNoArena();
}
void SubscriptionState::set_block_name(const ::std::string& value) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.block_name)
}
#if LANG_CXX11
void SubscriptionState::set_block_name(::std::string&& value) {
  set_has_block_name();
  block_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.SubscriptionState.block_name)
}
#endif
void SubscriptionState::set_block_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.SubscriptionState.block_name)
}
void SubscriptionState::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  block_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.SubscriptionState.block_name)
}
::std::string* SubscriptionState::mutable_block_name() {
  set_has_block_name();
  // @@protoc_insertion_point(field_mutable:recostream.pb.SubscriptionState.block_name)
  return block_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscriptionState::release_block_name() {
  // @@protoc_insertion_point(field_release:recostream.pb.SubscriptionState.block_name)
  clear_has_block_name();
  return block_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscriptionState::set_allocated_block_name(::std::string* block_name) {
  if (block_name != NULL) {
    set_has_block_name();
  } else {
    clear_has_block_name();
  }
  block_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_name);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SubscriptionState.block_name)
}

// optional bool show_category_subscription = 3;
bool SubscriptionState::has_show_category_subscription() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SubscriptionState::set_has_show_category_subscription() {
  _has_bits_[0] |= 0x00000008u;
}
void SubscriptionState::clear_has_show_category_subscription() {
  _has_bits_[0] &= ~0x00000008u;
}
void SubscriptionState::clear_show_category_subscription() {
  show_category_subscription_ = false;
  clear_has_show_category_subscription();
}
bool SubscriptionState::show_category_subscription() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.show_category_subscription)
  return show_category_subscription_;
}
void SubscriptionState::set_show_category_subscription(bool value) {
  set_has_show_category_subscription();
  show_category_subscription_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.show_category_subscription)
}

// optional bool show_cold_sources_subscription = 4;
bool SubscriptionState::has_show_cold_sources_subscription() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SubscriptionState::set_has_show_cold_sources_subscription() {
  _has_bits_[0] |= 0x00000010u;
}
void SubscriptionState::clear_has_show_cold_sources_subscription() {
  _has_bits_[0] &= ~0x00000010u;
}
void SubscriptionState::clear_show_cold_sources_subscription() {
  show_cold_sources_subscription_ = false;
  clear_has_show_cold_sources_subscription();
}
bool SubscriptionState::show_cold_sources_subscription() const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.show_cold_sources_subscription)
  return show_cold_sources_subscription_;
}
void SubscriptionState::set_show_cold_sources_subscription(bool value) {
  set_has_show_cold_sources_subscription();
  show_cold_sources_subscription_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.show_cold_sources_subscription)
}

// repeated int64 user_source_subscriptions = 5;
int SubscriptionState::user_source_subscriptions_size() const {
  return user_source_subscriptions_.size();
}
void SubscriptionState::clear_user_source_subscriptions() {
  user_source_subscriptions_.Clear();
}
::google::protobuf::int64 SubscriptionState::user_source_subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.user_source_subscriptions)
  return user_source_subscriptions_.Get(index);
}
void SubscriptionState::set_user_source_subscriptions(int index, ::google::protobuf::int64 value) {
  user_source_subscriptions_.Set(index, value);
  // @@protoc_insertion_point(field_set:recostream.pb.SubscriptionState.user_source_subscriptions)
}
void SubscriptionState::add_user_source_subscriptions(::google::protobuf::int64 value) {
  user_source_subscriptions_.Add(value);
  // @@protoc_insertion_point(field_add:recostream.pb.SubscriptionState.user_source_subscriptions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SubscriptionState::user_source_subscriptions() const {
  // @@protoc_insertion_point(field_list:recostream.pb.SubscriptionState.user_source_subscriptions)
  return user_source_subscriptions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SubscriptionState::mutable_user_source_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.SubscriptionState.user_source_subscriptions)
  return &user_source_subscriptions_;
}

// optional .recostream.pb.SubscriptionState.SubscriptionInfo category_subscription = 6;
bool SubscriptionState::has_category_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubscriptionState::set_has_category_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
void SubscriptionState::clear_has_category_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubscriptionState::clear_category_subscription() {
  if (category_subscription_ != NULL) category_subscription_->::recostream::pb::SubscriptionState_SubscriptionInfo::Clear();
  clear_has_category_subscription();
}
const ::recostream::pb::SubscriptionState_SubscriptionInfo& SubscriptionState::category_subscription() const {
  const ::recostream::pb::SubscriptionState_SubscriptionInfo* p = category_subscription_;
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.category_subscription)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::SubscriptionState_SubscriptionInfo*>(
      &::recostream::pb::_SubscriptionState_SubscriptionInfo_default_instance_);
}
::recostream::pb::SubscriptionState_SubscriptionInfo* SubscriptionState::mutable_category_subscription() {
  set_has_category_subscription();
  if (category_subscription_ == NULL) {
    category_subscription_ = new ::recostream::pb::SubscriptionState_SubscriptionInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.SubscriptionState.category_subscription)
  return category_subscription_;
}
::recostream::pb::SubscriptionState_SubscriptionInfo* SubscriptionState::release_category_subscription() {
  // @@protoc_insertion_point(field_release:recostream.pb.SubscriptionState.category_subscription)
  clear_has_category_subscription();
  ::recostream::pb::SubscriptionState_SubscriptionInfo* temp = category_subscription_;
  category_subscription_ = NULL;
  return temp;
}
void SubscriptionState::set_allocated_category_subscription(::recostream::pb::SubscriptionState_SubscriptionInfo* category_subscription) {
  delete category_subscription_;
  category_subscription_ = category_subscription;
  if (category_subscription) {
    set_has_category_subscription();
  } else {
    clear_has_category_subscription();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SubscriptionState.category_subscription)
}

// optional .recostream.pb.SubscriptionState.SubscriptionInfo cold_sources_subscription = 7;
bool SubscriptionState::has_cold_sources_subscription() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SubscriptionState::set_has_cold_sources_subscription() {
  _has_bits_[0] |= 0x00000004u;
}
void SubscriptionState::clear_has_cold_sources_subscription() {
  _has_bits_[0] &= ~0x00000004u;
}
void SubscriptionState::clear_cold_sources_subscription() {
  if (cold_sources_subscription_ != NULL) cold_sources_subscription_->::recostream::pb::SubscriptionState_SubscriptionInfo::Clear();
  clear_has_cold_sources_subscription();
}
const ::recostream::pb::SubscriptionState_SubscriptionInfo& SubscriptionState::cold_sources_subscription() const {
  const ::recostream::pb::SubscriptionState_SubscriptionInfo* p = cold_sources_subscription_;
  // @@protoc_insertion_point(field_get:recostream.pb.SubscriptionState.cold_sources_subscription)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::SubscriptionState_SubscriptionInfo*>(
      &::recostream::pb::_SubscriptionState_SubscriptionInfo_default_instance_);
}
::recostream::pb::SubscriptionState_SubscriptionInfo* SubscriptionState::mutable_cold_sources_subscription() {
  set_has_cold_sources_subscription();
  if (cold_sources_subscription_ == NULL) {
    cold_sources_subscription_ = new ::recostream::pb::SubscriptionState_SubscriptionInfo;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.SubscriptionState.cold_sources_subscription)
  return cold_sources_subscription_;
}
::recostream::pb::SubscriptionState_SubscriptionInfo* SubscriptionState::release_cold_sources_subscription() {
  // @@protoc_insertion_point(field_release:recostream.pb.SubscriptionState.cold_sources_subscription)
  clear_has_cold_sources_subscription();
  ::recostream::pb::SubscriptionState_SubscriptionInfo* temp = cold_sources_subscription_;
  cold_sources_subscription_ = NULL;
  return temp;
}
void SubscriptionState::set_allocated_cold_sources_subscription(::recostream::pb::SubscriptionState_SubscriptionInfo* cold_sources_subscription) {
  delete cold_sources_subscription_;
  cold_sources_subscription_ = cold_sources_subscription;
  if (cold_sources_subscription) {
    set_has_cold_sources_subscription();
  } else {
    clear_has_cold_sources_subscription();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.SubscriptionState.cold_sources_subscription)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoSessionState::kLoginStateFieldNumber;
const int RecoSessionState::kResultsPageStateFieldNumber;
const int RecoSessionState::kCosmoSourcesFieldNumber;
const int RecoSessionState::kPpnStateFieldNumber;
const int RecoSessionState::kTargetSourcesFieldNumber;
const int RecoSessionState::kSubscriptionStateFieldNumber;
const int RecoSessionState::kColdLentaFieldNumber;
const int RecoSessionState::kCreationTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoSessionState::RecoSessionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.RecoSessionState)
}
RecoSessionState::RecoSessionState(const RecoSessionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login_state()) {
    login_state_ = new ::recostream::pb::LoginState(*from.login_state_);
  } else {
    login_state_ = NULL;
  }
  if (from.has_results_page_state()) {
    results_page_state_ = new ::recostream::pb::ResultsPageState(*from.results_page_state_);
  } else {
    results_page_state_ = NULL;
  }
  if (from.has_cosmo_sources()) {
    cosmo_sources_ = new ::recostream::pb::CosmoSources(*from.cosmo_sources_);
  } else {
    cosmo_sources_ = NULL;
  }
  if (from.has_ppn_state()) {
    ppn_state_ = new ::recostream::pb::PPNState(*from.ppn_state_);
  } else {
    ppn_state_ = NULL;
  }
  if (from.has_target_sources()) {
    target_sources_ = new ::recostream::pb::TargetSources(*from.target_sources_);
  } else {
    target_sources_ = NULL;
  }
  if (from.has_subscription_state()) {
    subscription_state_ = new ::recostream::pb::SubscriptionState(*from.subscription_state_);
  } else {
    subscription_state_ = NULL;
  }
  ::memcpy(&cold_lenta_, &from.cold_lenta_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_ts_) -
    reinterpret_cast<char*>(&cold_lenta_)) + sizeof(creation_ts_));
  // @@protoc_insertion_point(copy_constructor:recostream.pb.RecoSessionState)
}

void RecoSessionState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_ts_) -
      reinterpret_cast<char*>(&login_state_)) + sizeof(creation_ts_));
}

RecoSessionState::~RecoSessionState() {
  // @@protoc_insertion_point(destructor:recostream.pb.RecoSessionState)
  SharedDtor();
}

void RecoSessionState::SharedDtor() {
  if (this != internal_default_instance()) delete login_state_;
  if (this != internal_default_instance()) delete results_page_state_;
  if (this != internal_default_instance()) delete cosmo_sources_;
  if (this != internal_default_instance()) delete ppn_state_;
  if (this != internal_default_instance()) delete target_sources_;
  if (this != internal_default_instance()) delete subscription_state_;
}

void RecoSessionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoSessionState::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecoSessionState& RecoSessionState::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecoSessionState* RecoSessionState::New(::google::protobuf::Arena* arena) const {
  RecoSessionState* n = new RecoSessionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecoSessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.RecoSessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(login_state_ != NULL);
      login_state_->::recostream::pb::LoginState::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(results_page_state_ != NULL);
      results_page_state_->::recostream::pb::ResultsPageState::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cosmo_sources_ != NULL);
      cosmo_sources_->::recostream::pb::CosmoSources::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ppn_state_ != NULL);
      ppn_state_->::recostream::pb::PPNState::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(target_sources_ != NULL);
      target_sources_->::recostream::pb::TargetSources::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(subscription_state_ != NULL);
      subscription_state_->::recostream::pb::SubscriptionState::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&cold_lenta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_ts_) -
        reinterpret_cast<char*>(&cold_lenta_)) + sizeof(creation_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecoSessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.RecoSessionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .recostream.pb.LoginState login_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.ResultsPageState results_page_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_results_page_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.CosmoSources cosmo_sources = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cosmo_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.PPNState ppn_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ppn_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.TargetSources target_sources = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .recostream.pb.SubscriptionState subscription_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscription_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cold_lenta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cold_lenta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cold_lenta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 creation_ts = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_creation_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.RecoSessionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.RecoSessionState)
  return false;
#undef DO_
}

void RecoSessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.RecoSessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.LoginState login_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_state_, output);
  }

  // optional .recostream.pb.ResultsPageState results_page_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->results_page_state_, output);
  }

  // optional .recostream.pb.CosmoSources cosmo_sources = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cosmo_sources_, output);
  }

  // optional .recostream.pb.PPNState ppn_state = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ppn_state_, output);
  }

  // optional .recostream.pb.TargetSources target_sources = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->target_sources_, output);
  }

  // optional .recostream.pb.SubscriptionState subscription_state = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->subscription_state_, output);
  }

  // optional bool cold_lenta = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cold_lenta(), output);
  }

  // optional int64 creation_ts = 100;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->creation_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.RecoSessionState)
}

::google::protobuf::uint8* RecoSessionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.RecoSessionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .recostream.pb.LoginState login_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_state_, deterministic, target);
  }

  // optional .recostream.pb.ResultsPageState results_page_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->results_page_state_, deterministic, target);
  }

  // optional .recostream.pb.CosmoSources cosmo_sources = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cosmo_sources_, deterministic, target);
  }

  // optional .recostream.pb.PPNState ppn_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ppn_state_, deterministic, target);
  }

  // optional .recostream.pb.TargetSources target_sources = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->target_sources_, deterministic, target);
  }

  // optional .recostream.pb.SubscriptionState subscription_state = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->subscription_state_, deterministic, target);
  }

  // optional bool cold_lenta = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cold_lenta(), target);
  }

  // optional int64 creation_ts = 100;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->creation_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.RecoSessionState)
  return target;
}

size_t RecoSessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.RecoSessionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .recostream.pb.LoginState login_state = 1;
    if (has_login_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_state_);
    }

    // optional .recostream.pb.ResultsPageState results_page_state = 3;
    if (has_results_page_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->results_page_state_);
    }

    // optional .recostream.pb.CosmoSources cosmo_sources = 4;
    if (has_cosmo_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cosmo_sources_);
    }

    // optional .recostream.pb.PPNState ppn_state = 5;
    if (has_ppn_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ppn_state_);
    }

    // optional .recostream.pb.TargetSources target_sources = 6;
    if (has_target_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->target_sources_);
    }

    // optional .recostream.pb.SubscriptionState subscription_state = 7;
    if (has_subscription_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subscription_state_);
    }

    // optional bool cold_lenta = 8;
    if (has_cold_lenta()) {
      total_size += 1 + 1;
    }

    // optional int64 creation_ts = 100;
    if (has_creation_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoSessionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.RecoSessionState)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoSessionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecoSessionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.RecoSessionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.RecoSessionState)
    MergeFrom(*source);
  }
}

void RecoSessionState::MergeFrom(const RecoSessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.RecoSessionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login_state()->::recostream::pb::LoginState::MergeFrom(from.login_state());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_results_page_state()->::recostream::pb::ResultsPageState::MergeFrom(from.results_page_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cosmo_sources()->::recostream::pb::CosmoSources::MergeFrom(from.cosmo_sources());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ppn_state()->::recostream::pb::PPNState::MergeFrom(from.ppn_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_target_sources()->::recostream::pb::TargetSources::MergeFrom(from.target_sources());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_subscription_state()->::recostream::pb::SubscriptionState::MergeFrom(from.subscription_state());
    }
    if (cached_has_bits & 0x00000040u) {
      cold_lenta_ = from.cold_lenta_;
    }
    if (cached_has_bits & 0x00000080u) {
      creation_ts_ = from.creation_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecoSessionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.RecoSessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoSessionState::CopyFrom(const RecoSessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.RecoSessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoSessionState::IsInitialized() const {
  if (has_login_state()) {
    if (!this->login_state_->IsInitialized()) return false;
  }
  if (has_cosmo_sources()) {
    if (!this->cosmo_sources_->IsInitialized()) return false;
  }
  if (has_subscription_state()) {
    if (!this->subscription_state_->IsInitialized()) return false;
  }
  return true;
}

void RecoSessionState::Swap(RecoSessionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoSessionState::InternalSwap(RecoSessionState* other) {
  using std::swap;
  swap(login_state_, other->login_state_);
  swap(results_page_state_, other->results_page_state_);
  swap(cosmo_sources_, other->cosmo_sources_);
  swap(ppn_state_, other->ppn_state_);
  swap(target_sources_, other->target_sources_);
  swap(subscription_state_, other->subscription_state_);
  swap(cold_lenta_, other->cold_lenta_);
  swap(creation_ts_, other->creation_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecoSessionState::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecoSessionState

// optional .recostream.pb.LoginState login_state = 1;
bool RecoSessionState::has_login_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecoSessionState::set_has_login_state() {
  _has_bits_[0] |= 0x00000001u;
}
void RecoSessionState::clear_has_login_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecoSessionState::clear_login_state() {
  if (login_state_ != NULL) login_state_->::recostream::pb::LoginState::Clear();
  clear_has_login_state();
}
const ::recostream::pb::LoginState& RecoSessionState::login_state() const {
  const ::recostream::pb::LoginState* p = login_state_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.login_state)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::LoginState*>(
      &::recostream::pb::_LoginState_default_instance_);
}
::recostream::pb::LoginState* RecoSessionState::mutable_login_state() {
  set_has_login_state();
  if (login_state_ == NULL) {
    login_state_ = new ::recostream::pb::LoginState;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.login_state)
  return login_state_;
}
::recostream::pb::LoginState* RecoSessionState::release_login_state() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.login_state)
  clear_has_login_state();
  ::recostream::pb::LoginState* temp = login_state_;
  login_state_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_login_state(::recostream::pb::LoginState* login_state) {
  delete login_state_;
  login_state_ = login_state;
  if (login_state) {
    set_has_login_state();
  } else {
    clear_has_login_state();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.login_state)
}

// optional .recostream.pb.ResultsPageState results_page_state = 3;
bool RecoSessionState::has_results_page_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecoSessionState::set_has_results_page_state() {
  _has_bits_[0] |= 0x00000002u;
}
void RecoSessionState::clear_has_results_page_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecoSessionState::clear_results_page_state() {
  if (results_page_state_ != NULL) results_page_state_->::recostream::pb::ResultsPageState::Clear();
  clear_has_results_page_state();
}
const ::recostream::pb::ResultsPageState& RecoSessionState::results_page_state() const {
  const ::recostream::pb::ResultsPageState* p = results_page_state_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.results_page_state)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::ResultsPageState*>(
      &::recostream::pb::_ResultsPageState_default_instance_);
}
::recostream::pb::ResultsPageState* RecoSessionState::mutable_results_page_state() {
  set_has_results_page_state();
  if (results_page_state_ == NULL) {
    results_page_state_ = new ::recostream::pb::ResultsPageState;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.results_page_state)
  return results_page_state_;
}
::recostream::pb::ResultsPageState* RecoSessionState::release_results_page_state() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.results_page_state)
  clear_has_results_page_state();
  ::recostream::pb::ResultsPageState* temp = results_page_state_;
  results_page_state_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_results_page_state(::recostream::pb::ResultsPageState* results_page_state) {
  delete results_page_state_;
  results_page_state_ = results_page_state;
  if (results_page_state) {
    set_has_results_page_state();
  } else {
    clear_has_results_page_state();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.results_page_state)
}

// optional .recostream.pb.CosmoSources cosmo_sources = 4;
bool RecoSessionState::has_cosmo_sources() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecoSessionState::set_has_cosmo_sources() {
  _has_bits_[0] |= 0x00000004u;
}
void RecoSessionState::clear_has_cosmo_sources() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecoSessionState::clear_cosmo_sources() {
  if (cosmo_sources_ != NULL) cosmo_sources_->::recostream::pb::CosmoSources::Clear();
  clear_has_cosmo_sources();
}
const ::recostream::pb::CosmoSources& RecoSessionState::cosmo_sources() const {
  const ::recostream::pb::CosmoSources* p = cosmo_sources_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.cosmo_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::CosmoSources*>(
      &::recostream::pb::_CosmoSources_default_instance_);
}
::recostream::pb::CosmoSources* RecoSessionState::mutable_cosmo_sources() {
  set_has_cosmo_sources();
  if (cosmo_sources_ == NULL) {
    cosmo_sources_ = new ::recostream::pb::CosmoSources;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.cosmo_sources)
  return cosmo_sources_;
}
::recostream::pb::CosmoSources* RecoSessionState::release_cosmo_sources() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.cosmo_sources)
  clear_has_cosmo_sources();
  ::recostream::pb::CosmoSources* temp = cosmo_sources_;
  cosmo_sources_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_cosmo_sources(::recostream::pb::CosmoSources* cosmo_sources) {
  delete cosmo_sources_;
  cosmo_sources_ = cosmo_sources;
  if (cosmo_sources) {
    set_has_cosmo_sources();
  } else {
    clear_has_cosmo_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.cosmo_sources)
}

// optional .recostream.pb.PPNState ppn_state = 5;
bool RecoSessionState::has_ppn_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecoSessionState::set_has_ppn_state() {
  _has_bits_[0] |= 0x00000008u;
}
void RecoSessionState::clear_has_ppn_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecoSessionState::clear_ppn_state() {
  if (ppn_state_ != NULL) ppn_state_->::recostream::pb::PPNState::Clear();
  clear_has_ppn_state();
}
const ::recostream::pb::PPNState& RecoSessionState::ppn_state() const {
  const ::recostream::pb::PPNState* p = ppn_state_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.ppn_state)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::PPNState*>(
      &::recostream::pb::_PPNState_default_instance_);
}
::recostream::pb::PPNState* RecoSessionState::mutable_ppn_state() {
  set_has_ppn_state();
  if (ppn_state_ == NULL) {
    ppn_state_ = new ::recostream::pb::PPNState;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.ppn_state)
  return ppn_state_;
}
::recostream::pb::PPNState* RecoSessionState::release_ppn_state() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.ppn_state)
  clear_has_ppn_state();
  ::recostream::pb::PPNState* temp = ppn_state_;
  ppn_state_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_ppn_state(::recostream::pb::PPNState* ppn_state) {
  delete ppn_state_;
  ppn_state_ = ppn_state;
  if (ppn_state) {
    set_has_ppn_state();
  } else {
    clear_has_ppn_state();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.ppn_state)
}

// optional .recostream.pb.TargetSources target_sources = 6;
bool RecoSessionState::has_target_sources() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RecoSessionState::set_has_target_sources() {
  _has_bits_[0] |= 0x00000010u;
}
void RecoSessionState::clear_has_target_sources() {
  _has_bits_[0] &= ~0x00000010u;
}
void RecoSessionState::clear_target_sources() {
  if (target_sources_ != NULL) target_sources_->::recostream::pb::TargetSources::Clear();
  clear_has_target_sources();
}
const ::recostream::pb::TargetSources& RecoSessionState::target_sources() const {
  const ::recostream::pb::TargetSources* p = target_sources_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.target_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::TargetSources*>(
      &::recostream::pb::_TargetSources_default_instance_);
}
::recostream::pb::TargetSources* RecoSessionState::mutable_target_sources() {
  set_has_target_sources();
  if (target_sources_ == NULL) {
    target_sources_ = new ::recostream::pb::TargetSources;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.target_sources)
  return target_sources_;
}
::recostream::pb::TargetSources* RecoSessionState::release_target_sources() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.target_sources)
  clear_has_target_sources();
  ::recostream::pb::TargetSources* temp = target_sources_;
  target_sources_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_target_sources(::recostream::pb::TargetSources* target_sources) {
  delete target_sources_;
  target_sources_ = target_sources;
  if (target_sources) {
    set_has_target_sources();
  } else {
    clear_has_target_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.target_sources)
}

// optional .recostream.pb.SubscriptionState subscription_state = 7;
bool RecoSessionState::has_subscription_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RecoSessionState::set_has_subscription_state() {
  _has_bits_[0] |= 0x00000020u;
}
void RecoSessionState::clear_has_subscription_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void RecoSessionState::clear_subscription_state() {
  if (subscription_state_ != NULL) subscription_state_->::recostream::pb::SubscriptionState::Clear();
  clear_has_subscription_state();
}
const ::recostream::pb::SubscriptionState& RecoSessionState::subscription_state() const {
  const ::recostream::pb::SubscriptionState* p = subscription_state_;
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.subscription_state)
  return p != NULL ? *p : *reinterpret_cast<const ::recostream::pb::SubscriptionState*>(
      &::recostream::pb::_SubscriptionState_default_instance_);
}
::recostream::pb::SubscriptionState* RecoSessionState::mutable_subscription_state() {
  set_has_subscription_state();
  if (subscription_state_ == NULL) {
    subscription_state_ = new ::recostream::pb::SubscriptionState;
  }
  // @@protoc_insertion_point(field_mutable:recostream.pb.RecoSessionState.subscription_state)
  return subscription_state_;
}
::recostream::pb::SubscriptionState* RecoSessionState::release_subscription_state() {
  // @@protoc_insertion_point(field_release:recostream.pb.RecoSessionState.subscription_state)
  clear_has_subscription_state();
  ::recostream::pb::SubscriptionState* temp = subscription_state_;
  subscription_state_ = NULL;
  return temp;
}
void RecoSessionState::set_allocated_subscription_state(::recostream::pb::SubscriptionState* subscription_state) {
  delete subscription_state_;
  subscription_state_ = subscription_state;
  if (subscription_state) {
    set_has_subscription_state();
  } else {
    clear_has_subscription_state();
  }
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.RecoSessionState.subscription_state)
}

// optional bool cold_lenta = 8;
bool RecoSessionState::has_cold_lenta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RecoSessionState::set_has_cold_lenta() {
  _has_bits_[0] |= 0x00000040u;
}
void RecoSessionState::clear_has_cold_lenta() {
  _has_bits_[0] &= ~0x00000040u;
}
void RecoSessionState::clear_cold_lenta() {
  cold_lenta_ = false;
  clear_has_cold_lenta();
}
bool RecoSessionState::cold_lenta() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.cold_lenta)
  return cold_lenta_;
}
void RecoSessionState::set_cold_lenta(bool value) {
  set_has_cold_lenta();
  cold_lenta_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.RecoSessionState.cold_lenta)
}

// optional int64 creation_ts = 100;
bool RecoSessionState::has_creation_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RecoSessionState::set_has_creation_ts() {
  _has_bits_[0] |= 0x00000080u;
}
void RecoSessionState::clear_has_creation_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
void RecoSessionState::clear_creation_ts() {
  creation_ts_ = GOOGLE_LONGLONG(0);
  clear_has_creation_ts();
}
::google::protobuf::int64 RecoSessionState::creation_ts() const {
  // @@protoc_insertion_point(field_get:recostream.pb.RecoSessionState.creation_ts)
  return creation_ts_;
}
void RecoSessionState::set_creation_ts(::google::protobuf::int64 value) {
  set_has_creation_ts();
  creation_ts_ = value;
  // @@protoc_insertion_point(field_set:recostream.pb.RecoSessionState.creation_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileSettingField::kKeyFieldNumber;
const int ProfileSettingField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileSettingField::ProfileSettingField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ProfileSettingField)
}
ProfileSettingField::ProfileSettingField(const ProfileSettingField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ProfileSettingField)
}

void ProfileSettingField::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProfileSettingField::~ProfileSettingField() {
  // @@protoc_insertion_point(destructor:recostream.pb.ProfileSettingField)
  SharedDtor();
}

void ProfileSettingField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfileSettingField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileSettingField::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileSettingField& ProfileSettingField::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileSettingField* ProfileSettingField::New(::google::protobuf::Arena* arena) const {
  ProfileSettingField* n = new ProfileSettingField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileSettingField::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ProfileSettingField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileSettingField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ProfileSettingField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ProfileSettingField.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recostream.pb.ProfileSettingField.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ProfileSettingField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ProfileSettingField)
  return false;
#undef DO_
}

void ProfileSettingField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ProfileSettingField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProfileSettingField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProfileSettingField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ProfileSettingField)
}

::google::protobuf::uint8* ProfileSettingField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ProfileSettingField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProfileSettingField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recostream.pb.ProfileSettingField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ProfileSettingField)
  return target;
}

size_t ProfileSettingField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:recostream.pb.ProfileSettingField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t ProfileSettingField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ProfileSettingField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileSettingField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ProfileSettingField)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSettingField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileSettingField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ProfileSettingField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ProfileSettingField)
    MergeFrom(*source);
  }
}

void ProfileSettingField::MergeFrom(const ProfileSettingField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ProfileSettingField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void ProfileSettingField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ProfileSettingField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSettingField::CopyFrom(const ProfileSettingField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ProfileSettingField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSettingField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProfileSettingField::Swap(ProfileSettingField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileSettingField::InternalSwap(ProfileSettingField* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileSettingField::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileSettingField

// required string key = 1;
bool ProfileSettingField::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfileSettingField::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfileSettingField::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfileSettingField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ProfileSettingField::key() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProfileSettingField.key)
  return key_.GetNoArena();
}
void ProfileSettingField::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ProfileSettingField.key)
}
#if LANG_CXX11
void ProfileSettingField::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ProfileSettingField.key)
}
#endif
void ProfileSettingField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ProfileSettingField.key)
}
void ProfileSettingField::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ProfileSettingField.key)
}
::std::string* ProfileSettingField::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProfileSettingField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileSettingField::release_key() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProfileSettingField.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileSettingField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProfileSettingField.key)
}

// required string value = 2;
bool ProfileSettingField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfileSettingField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfileSettingField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfileSettingField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& ProfileSettingField::value() const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProfileSettingField.value)
  return value_.GetNoArena();
}
void ProfileSettingField::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recostream.pb.ProfileSettingField.value)
}
#if LANG_CXX11
void ProfileSettingField::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recostream.pb.ProfileSettingField.value)
}
#endif
void ProfileSettingField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recostream.pb.ProfileSettingField.value)
}
void ProfileSettingField::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recostream.pb.ProfileSettingField.value)
}
::std::string* ProfileSettingField::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProfileSettingField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileSettingField::release_value() {
  // @@protoc_insertion_point(field_release:recostream.pb.ProfileSettingField.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileSettingField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:recostream.pb.ProfileSettingField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileSettings::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileSettings::ProfileSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_recostream_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:recostream.pb.ProfileSettings)
}
ProfileSettings::ProfileSettings(const ProfileSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:recostream.pb.ProfileSettings)
}

void ProfileSettings::SharedCtor() {
  _cached_size_ = 0;
}

ProfileSettings::~ProfileSettings() {
  // @@protoc_insertion_point(destructor:recostream.pb.ProfileSettings)
  SharedDtor();
}

void ProfileSettings::SharedDtor() {
}

void ProfileSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileSettings::descriptor() {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileSettings& ProfileSettings::default_instance() {
  protobuf_recostream_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileSettings* ProfileSettings::New(::google::protobuf::Arena* arena) const {
  ProfileSettings* n = new ProfileSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:recostream.pb.ProfileSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:recostream.pb.ProfileSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .recostream.pb.ProfileSettingField settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:recostream.pb.ProfileSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:recostream.pb.ProfileSettings)
  return false;
#undef DO_
}

void ProfileSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:recostream.pb.ProfileSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProfileSettingField settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:recostream.pb.ProfileSettings)
}

::google::protobuf::uint8* ProfileSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:recostream.pb.ProfileSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .recostream.pb.ProfileSettingField settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->settings(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recostream.pb.ProfileSettings)
  return target;
}

size_t ProfileSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recostream.pb.ProfileSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .recostream.pb.ProfileSettingField settings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:recostream.pb.ProfileSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:recostream.pb.ProfileSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:recostream.pb.ProfileSettings)
    MergeFrom(*source);
  }
}

void ProfileSettings::MergeFrom(const ProfileSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recostream.pb.ProfileSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void ProfileSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:recostream.pb.ProfileSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileSettings::CopyFrom(const ProfileSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recostream.pb.ProfileSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileSettings::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->settings())) return false;
  return true;
}

void ProfileSettings::Swap(ProfileSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileSettings::InternalSwap(ProfileSettings* other) {
  using std::swap;
  settings_.InternalSwap(&other->settings_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileSettings::GetMetadata() const {
  protobuf_recostream_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_recostream_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileSettings

// repeated .recostream.pb.ProfileSettingField settings = 1;
int ProfileSettings::settings_size() const {
  return settings_.size();
}
void ProfileSettings::clear_settings() {
  settings_.Clear();
}
const ::recostream::pb::ProfileSettingField& ProfileSettings::settings(int index) const {
  // @@protoc_insertion_point(field_get:recostream.pb.ProfileSettings.settings)
  return settings_.Get(index);
}
::recostream::pb::ProfileSettingField* ProfileSettings::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:recostream.pb.ProfileSettings.settings)
  return settings_.Mutable(index);
}
::recostream::pb::ProfileSettingField* ProfileSettings::add_settings() {
  // @@protoc_insertion_point(field_add:recostream.pb.ProfileSettings.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::recostream::pb::ProfileSettingField >*
ProfileSettings::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:recostream.pb.ProfileSettings.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::recostream::pb::ProfileSettingField >&
ProfileSettings::settings() const {
  // @@protoc_insertion_point(field_list:recostream.pb.ProfileSettings.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace recostream

// @@protoc_insertion_point(global_scope)
