// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class SampledProfile_ProcessTypesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile::SampledProfile_ProcessTypesEntry>
     _instance;
} _SampledProfile_ProcessTypesEntry_default_instance_;
class SampledProfile_ThreadTypesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile::SampledProfile_ThreadTypesEntry>
     _instance;
} _SampledProfile_ThreadTypesEntry_default_instance_;
class SampledProfileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile>
     _instance;
} _SampledProfile_default_instance_;

namespace protobuf_sampled_5fprofile_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, trigger_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, process_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, thread_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, ms_after_boot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, ms_after_login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, suspend_duration_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, ms_after_resume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, num_tabs_restored_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, ms_after_restore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, perf_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, call_stack_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, perf_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, cpu_max_frequency_mhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, psi_cpu_last_10s_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampledProfile, psi_cpu_last_60s_pct_),
  5,
  10,
  11,
  ~0u,
  ~0u,
  3,
  4,
  7,
  8,
  6,
  9,
  0,
  1,
  2,
  ~0u,
  12,
  13,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(SampledProfile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampledProfile_ProcessTypesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampledProfile_ThreadTypesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampledProfile_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sampled_profile.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = SampledProfile::SampledProfile_ProcessTypesEntry::CreateReflection(file_level_metadata[0].descriptor, _SampledProfile_ProcessTypesEntry_default_instance_._instance.get_mutable());
file_level_metadata[1].reflection = SampledProfile::SampledProfile_ThreadTypesEntry::CreateReflection(file_level_metadata[1].descriptor, _SampledProfile_ThreadTypesEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metrics::protobuf_call_5fstack_5fprofile_2eproto::InitDefaults();
  ::metrics::protobuf_execution_5fcontext_2eproto::InitDefaults();
  ::metrics::protobuf_perf_5fdata_2eproto::InitDefaults();
  ::metrics::protobuf_perf_5fstat_2eproto::InitDefaults();
  _SampledProfile_ProcessTypesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SampledProfile_ProcessTypesEntry_default_instance_);_SampledProfile_ThreadTypesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SampledProfile_ThreadTypesEntry_default_instance_);_SampledProfile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SampledProfile_default_instance_);_SampledProfile_ProcessTypesEntry_default_instance_._instance.get_mutable()->set_default_instance(_SampledProfile_ProcessTypesEntry_default_instance_._instance.get_mutable());
  _SampledProfile_ProcessTypesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SampledProfile_ThreadTypesEntry_default_instance_._instance.get_mutable()->set_default_instance(_SampledProfile_ThreadTypesEntry_default_instance_._instance.get_mutable());
  _SampledProfile_ThreadTypesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SampledProfile_default_instance_._instance.get_mutable()->perf_data_ = const_cast< ::metrics::PerfDataProto*>(
      ::metrics::PerfDataProto::internal_default_instance());
  _SampledProfile_default_instance_._instance.get_mutable()->call_stack_profile_ = const_cast< ::metrics::CallStackProfile*>(
      ::metrics::CallStackProfile::internal_default_instance());
  _SampledProfile_default_instance_._instance.get_mutable()->perf_stat_ = const_cast< ::metrics::PerfStatProto*>(
      ::metrics::PerfStatProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025sampled_profile.proto\022\007metrics\032\030call_s"
      "tack_profile.proto\032\027execution_context.pr"
      "oto\032\017perf_data.proto\032\017perf_stat.proto\"\350\007"
      "\n\016SampledProfile\022;\n\rtrigger_event\030\001 \001(\0162"
      "$.metrics.SampledProfile.TriggerEvent\022!\n"
      "\007process\030\013 \001(\0162\020.metrics.Process\022\037\n\006thre"
      "ad\030\014 \001(\0162\017.metrics.Thread\022@\n\rprocess_typ"
      "es\030\r \003(\0132).metrics.SampledProfile.Proces"
      "sTypesEntry\022>\n\014thread_types\030\016 \003(\0132(.metr"
      "ics.SampledProfile.ThreadTypesEntry\022\025\n\rm"
      "s_after_boot\030\002 \001(\003\022\026\n\016ms_after_login\030\003 \001"
      "(\003\022\033\n\023suspend_duration_ms\030\005 \001(\003\022\027\n\017ms_af"
      "ter_resume\030\006 \001(\003\022\031\n\021num_tabs_restored\030\007 "
      "\001(\005\022\030\n\020ms_after_restore\030\010 \001(\003\022)\n\tperf_da"
      "ta\030\004 \001(\0132\026.metrics.PerfDataProto\0225\n\022call"
      "_stack_profile\030\t \001(\0132\031.metrics.CallStack"
      "Profile\022)\n\tperf_stat\030\n \001(\0132\026.metrics.Per"
      "fStatProto\022\035\n\025cpu_max_frequency_mhz\030\017 \003("
      "\r\022\034\n\024psi_cpu_last_10s_pct\030\020 \001(\002\022\034\n\024psi_c"
      "pu_last_60s_pct\030\021 \001(\002\032E\n\021ProcessTypesEnt"
      "ry\022\013\n\003key\030\001 \001(\r\022\037\n\005value\030\002 \001(\0162\020.metrics"
      ".Process:\0028\001\032C\n\020ThreadTypesEntry\022\013\n\003key\030"
      "\001 \001(\r\022\036\n\005value\030\002 \001(\0162\017.metrics.Thread:\0028"
      "\001\"\304\001\n\014TriggerEvent\022\031\n\025UNKNOWN_TRIGGER_EV"
      "ENT\020\000\022\027\n\023PERIODIC_COLLECTION\020\001\022\027\n\023RESUME"
      "_FROM_SUSPEND\020\002\022\023\n\017RESTORE_SESSION\020\003\022\023\n\017"
      "PROCESS_STARTUP\020\004\022\016\n\nJANKY_TASK\020\005\022\017\n\013THR"
      "EAD_HUNG\020\006\022\034\n\030PERIODIC_HEAP_COLLECTION\020\007"
      "B7\n\037org.chromium.components.metricsB\024Sam"
      "pledProfileProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sampled_profile.proto", &protobuf_RegisterTypes);
  ::metrics::protobuf_call_5fstack_5fprofile_2eproto::AddDescriptors();
  ::metrics::protobuf_execution_5fcontext_2eproto::AddDescriptors();
  ::metrics::protobuf_perf_5fdata_2eproto::AddDescriptors();
  ::metrics::protobuf_perf_5fstat_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sampled_5fprofile_2eproto

const ::google::protobuf::EnumDescriptor* SampledProfile_TriggerEvent_descriptor() {
  protobuf_sampled_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sampled_5fprofile_2eproto::file_level_enum_descriptors[0];
}
bool SampledProfile_TriggerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
const SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
const SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
const SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
const SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_HEAP_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
const int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

SampledProfile::SampledProfile_ProcessTypesEntry::SampledProfile_ProcessTypesEntry() {}
SampledProfile::SampledProfile_ProcessTypesEntry::SampledProfile_ProcessTypesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SampledProfile::SampledProfile_ProcessTypesEntry::GetMetadata() const {
  protobuf_sampled_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sampled_5fprofile_2eproto::file_level_metadata[0];
}
void SampledProfile::SampledProfile_ProcessTypesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SampledProfile::SampledProfile_ProcessTypesEntry::MergeFrom(const SampledProfile_ProcessTypesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SampledProfile::SampledProfile_ThreadTypesEntry::SampledProfile_ThreadTypesEntry() {}
SampledProfile::SampledProfile_ThreadTypesEntry::SampledProfile_ThreadTypesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SampledProfile::SampledProfile_ThreadTypesEntry::GetMetadata() const {
  protobuf_sampled_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sampled_5fprofile_2eproto::file_level_metadata[1];
}
void SampledProfile::SampledProfile_ThreadTypesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SampledProfile::SampledProfile_ThreadTypesEntry::MergeFrom(const SampledProfile_ThreadTypesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampledProfile::kTriggerEventFieldNumber;
const int SampledProfile::kProcessFieldNumber;
const int SampledProfile::kThreadFieldNumber;
const int SampledProfile::kProcessTypesFieldNumber;
const int SampledProfile::kThreadTypesFieldNumber;
const int SampledProfile::kMsAfterBootFieldNumber;
const int SampledProfile::kMsAfterLoginFieldNumber;
const int SampledProfile::kSuspendDurationMsFieldNumber;
const int SampledProfile::kMsAfterResumeFieldNumber;
const int SampledProfile::kNumTabsRestoredFieldNumber;
const int SampledProfile::kMsAfterRestoreFieldNumber;
const int SampledProfile::kPerfDataFieldNumber;
const int SampledProfile::kCallStackProfileFieldNumber;
const int SampledProfile::kPerfStatFieldNumber;
const int SampledProfile::kCpuMaxFrequencyMhzFieldNumber;
const int SampledProfile::kPsiCpuLast10SPctFieldNumber;
const int SampledProfile::kPsiCpuLast60SPctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampledProfile::SampledProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sampled_5fprofile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SampledProfile)
}
SampledProfile::SampledProfile(const SampledProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cpu_max_frequency_mhz_(from.cpu_max_frequency_mhz_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  if (from.has_perf_data()) {
    perf_data_ = new ::metrics::PerfDataProto(*from.perf_data_);
  } else {
    perf_data_ = NULL;
  }
  if (from.has_call_stack_profile()) {
    call_stack_profile_ = new ::metrics::CallStackProfile(*from.call_stack_profile_);
  } else {
    call_stack_profile_ = NULL;
  }
  if (from.has_perf_stat()) {
    perf_stat_ = new ::metrics::PerfStatProto(*from.perf_stat_);
  } else {
    perf_stat_ = NULL;
  }
  ::memcpy(&ms_after_boot_, &from.ms_after_boot_,
    static_cast<size_t>(reinterpret_cast<char*>(&psi_cpu_last_60s_pct_) -
    reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(psi_cpu_last_60s_pct_));
  // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

void SampledProfile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&perf_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psi_cpu_last_60s_pct_) -
      reinterpret_cast<char*>(&perf_data_)) + sizeof(psi_cpu_last_60s_pct_));
}

SampledProfile::~SampledProfile() {
  // @@protoc_insertion_point(destructor:metrics.SampledProfile)
  SharedDtor();
}

void SampledProfile::SharedDtor() {
  if (this != internal_default_instance()) delete perf_data_;
  if (this != internal_default_instance()) delete call_stack_profile_;
  if (this != internal_default_instance()) delete perf_stat_;
}

void SampledProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampledProfile::descriptor() {
  protobuf_sampled_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sampled_5fprofile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampledProfile& SampledProfile::default_instance() {
  protobuf_sampled_5fprofile_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampledProfile* SampledProfile::New(::google::protobuf::Arena* arena) const {
  SampledProfile* n = new SampledProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampledProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_types_.Clear();
  thread_types_.Clear();
  cpu_max_frequency_mhz_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perf_data_ != NULL);
      perf_data_->::metrics::PerfDataProto::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_stack_profile_ != NULL);
      call_stack_profile_->::metrics::CallStackProfile::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(perf_stat_ != NULL);
      perf_stat_->::metrics::PerfStatProto::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ms_after_boot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suspend_duration_ms_) -
        reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(suspend_duration_ms_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&ms_after_resume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&psi_cpu_last_60s_pct_) -
        reinterpret_cast<char*>(&ms_after_resume_)) + sizeof(psi_cpu_last_60s_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampledProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.SampledProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SampledProfile_TriggerEvent_IsValid(value)) {
            set_trigger_event(static_cast< ::metrics::SampledProfile_TriggerEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_boot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ms_after_boot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ms_after_login();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto perf_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perf_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 suspend_duration_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_suspend_duration_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suspend_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_resume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ms_after_resume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_tabs_restored = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_tabs_restored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tabs_restored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_restore = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ms_after_restore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_restore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perf_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Process process = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Process_IsValid(value)) {
            set_process(static_cast< ::metrics::Process >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Thread thread = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Thread_IsValid(value)) {
            set_thread(static_cast< ::metrics::Thread >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Process> process_types = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry(process_types_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::metrics::Process_IsValid(*entry->mutable_value())) {
              (*mutable_process_types())[entry->key()] =
                  static_cast< ::metrics::Process >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(13, data);
            }
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Thread> thread_types = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry(thread_types_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::metrics::Thread_IsValid(*entry->mutable_value())) {
              (*mutable_thread_types())[entry->key()] =
                  static_cast< ::metrics::Thread >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(14, data);
            }
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cpu_max_frequency_mhz = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_cpu_max_frequency_mhz())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cpu_max_frequency_mhz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float psi_cpu_last_10s_pct = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_psi_cpu_last_10s_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &psi_cpu_last_10s_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float psi_cpu_last_60s_pct = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_psi_cpu_last_60s_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &psi_cpu_last_60s_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SampledProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SampledProfile)
  return false;
#undef DO_
}

void SampledProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trigger_event(), output);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ms_after_boot(), output);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ms_after_login(), output);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->perf_data_, output);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->suspend_duration_ms(), output);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ms_after_resume(), output);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_tabs_restored(), output);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ms_after_restore(), output);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->call_stack_profile_, output);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->perf_stat_, output);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->process(), output);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->thread(), output);
  }

  // map<uint32, .metrics.Process> process_types = 13;
  if (!this->process_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->process_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->process_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  if (!this->thread_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->thread_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->thread_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  for (int i = 0, n = this->cpu_max_frequency_mhz_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->cpu_max_frequency_mhz(i), output);
  }

  // optional float psi_cpu_last_10s_pct = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->psi_cpu_last_10s_pct(), output);
  }

  // optional float psi_cpu_last_60s_pct = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->psi_cpu_last_60s_pct(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.SampledProfile)
}

::google::protobuf::uint8* SampledProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trigger_event(), target);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ms_after_boot(), target);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ms_after_login(), target);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->perf_data_, deterministic, target);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->suspend_duration_ms(), target);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ms_after_resume(), target);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_tabs_restored(), target);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ms_after_restore(), target);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->call_stack_profile_, deterministic, target);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->perf_stat_, deterministic, target);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->process(), target);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->thread(), target);
  }

  // map<uint32, .metrics.Process> process_types = 13;
  if (!this->process_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->process_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->process_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  if (!this->thread_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->thread_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->thread_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->cpu_max_frequency_mhz_, target);

  // optional float psi_cpu_last_10s_pct = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->psi_cpu_last_10s_pct(), target);
  }

  // optional float psi_cpu_last_60s_pct = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->psi_cpu_last_60s_pct(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.SampledProfile)
  return target;
}

size_t SampledProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<uint32, .metrics.Process> process_types = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->process_types_size());
  {
    ::google::protobuf::scoped_ptr<SampledProfile_ProcessTypesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
        it = this->process_types().begin();
        it != this->process_types().end(); ++it) {
      entry.reset(process_types_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->thread_types_size());
  {
    ::google::protobuf::scoped_ptr<SampledProfile_ThreadTypesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
        it = this->thread_types().begin();
        it != this->thread_types().end(); ++it) {
      entry.reset(thread_types_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 cpu_max_frequency_mhz = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cpu_max_frequency_mhz_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cpu_max_frequency_mhz_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .metrics.PerfDataProto perf_data = 4;
    if (has_perf_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perf_data_);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (has_call_stack_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->call_stack_profile_);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (has_perf_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perf_stat_);
    }

    // optional int64 ms_after_boot = 2;
    if (has_ms_after_boot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_boot());
    }

    // optional int64 ms_after_login = 3;
    if (has_ms_after_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_login());
    }

    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (has_trigger_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_event());
    }

    // optional int32 num_tabs_restored = 7;
    if (has_num_tabs_restored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tabs_restored());
    }

    // optional int64 suspend_duration_ms = 5;
    if (has_suspend_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->suspend_duration_ms());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int64 ms_after_resume = 6;
    if (has_ms_after_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_resume());
    }

    // optional int64 ms_after_restore = 8;
    if (has_ms_after_restore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_restore());
    }

    // optional .metrics.Process process = 11;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process());
    }

    // optional .metrics.Thread thread = 12;
    if (has_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->thread());
    }

    // optional float psi_cpu_last_10s_pct = 16;
    if (has_psi_cpu_last_10s_pct()) {
      total_size += 2 + 4;
    }

    // optional float psi_cpu_last_60s_pct = 17;
    if (has_psi_cpu_last_60s_pct()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampledProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SampledProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampledProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.SampledProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.SampledProfile)
    MergeFrom(*source);
  }
}

void SampledProfile::MergeFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  cpu_max_frequency_mhz_.MergeFrom(from.cpu_max_frequency_mhz_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from.perf_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from.call_stack_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from.perf_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      ms_after_boot_ = from.ms_after_boot_;
    }
    if (cached_has_bits & 0x00000010u) {
      ms_after_login_ = from.ms_after_login_;
    }
    if (cached_has_bits & 0x00000020u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_tabs_restored_ = from.num_tabs_restored_;
    }
    if (cached_has_bits & 0x00000080u) {
      suspend_duration_ms_ = from.suspend_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      ms_after_resume_ = from.ms_after_resume_;
    }
    if (cached_has_bits & 0x00000200u) {
      ms_after_restore_ = from.ms_after_restore_;
    }
    if (cached_has_bits & 0x00000400u) {
      process_ = from.process_;
    }
    if (cached_has_bits & 0x00000800u) {
      thread_ = from.thread_;
    }
    if (cached_has_bits & 0x00001000u) {
      psi_cpu_last_10s_pct_ = from.psi_cpu_last_10s_pct_;
    }
    if (cached_has_bits & 0x00002000u) {
      psi_cpu_last_60s_pct_ = from.psi_cpu_last_60s_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampledProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampledProfile::CopyFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampledProfile::IsInitialized() const {
  return true;
}

void SampledProfile::Swap(SampledProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampledProfile::InternalSwap(SampledProfile* other) {
  using std::swap;
  process_types_.Swap(&other->process_types_);
  thread_types_.Swap(&other->thread_types_);
  cpu_max_frequency_mhz_.InternalSwap(&other->cpu_max_frequency_mhz_);
  swap(perf_data_, other->perf_data_);
  swap(call_stack_profile_, other->call_stack_profile_);
  swap(perf_stat_, other->perf_stat_);
  swap(ms_after_boot_, other->ms_after_boot_);
  swap(ms_after_login_, other->ms_after_login_);
  swap(trigger_event_, other->trigger_event_);
  swap(num_tabs_restored_, other->num_tabs_restored_);
  swap(suspend_duration_ms_, other->suspend_duration_ms_);
  swap(ms_after_resume_, other->ms_after_resume_);
  swap(ms_after_restore_, other->ms_after_restore_);
  swap(process_, other->process_);
  swap(thread_, other->thread_);
  swap(psi_cpu_last_10s_pct_, other->psi_cpu_last_10s_pct_);
  swap(psi_cpu_last_60s_pct_, other->psi_cpu_last_60s_pct_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampledProfile::GetMetadata() const {
  protobuf_sampled_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sampled_5fprofile_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampledProfile

// optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
bool SampledProfile::has_trigger_event() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SampledProfile::set_has_trigger_event() {
  _has_bits_[0] |= 0x00000020u;
}
void SampledProfile::clear_has_trigger_event() {
  _has_bits_[0] &= ~0x00000020u;
}
void SampledProfile::clear_trigger_event() {
  trigger_event_ = 0;
  clear_has_trigger_event();
}
::metrics::SampledProfile_TriggerEvent SampledProfile::trigger_event() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.trigger_event)
  return static_cast< ::metrics::SampledProfile_TriggerEvent >(trigger_event_);
}
void SampledProfile::set_trigger_event(::metrics::SampledProfile_TriggerEvent value) {
  assert(::metrics::SampledProfile_TriggerEvent_IsValid(value));
  set_has_trigger_event();
  trigger_event_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.trigger_event)
}

// optional .metrics.Process process = 11;
bool SampledProfile::has_process() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SampledProfile::set_has_process() {
  _has_bits_[0] |= 0x00000400u;
}
void SampledProfile::clear_has_process() {
  _has_bits_[0] &= ~0x00000400u;
}
void SampledProfile::clear_process() {
  process_ = 0;
  clear_has_process();
}
::metrics::Process SampledProfile::process() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.process)
  return static_cast< ::metrics::Process >(process_);
}
void SampledProfile::set_process(::metrics::Process value) {
  assert(::metrics::Process_IsValid(value));
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.process)
}

// optional .metrics.Thread thread = 12;
bool SampledProfile::has_thread() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SampledProfile::set_has_thread() {
  _has_bits_[0] |= 0x00000800u;
}
void SampledProfile::clear_has_thread() {
  _has_bits_[0] &= ~0x00000800u;
}
void SampledProfile::clear_thread() {
  thread_ = 0;
  clear_has_thread();
}
::metrics::Thread SampledProfile::thread() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.thread)
  return static_cast< ::metrics::Thread >(thread_);
}
void SampledProfile::set_thread(::metrics::Thread value) {
  assert(::metrics::Thread_IsValid(value));
  set_has_thread();
  thread_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.thread)
}

// map<uint32, .metrics.Process> process_types = 13;
int SampledProfile::process_types_size() const {
  return process_types_.size();
}
void SampledProfile::clear_process_types() {
  process_types_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >&
SampledProfile::process_types() const {
  // @@protoc_insertion_point(field_map:metrics.SampledProfile.process_types)
  return process_types_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >*
SampledProfile::mutable_process_types() {
  // @@protoc_insertion_point(field_mutable_map:metrics.SampledProfile.process_types)
  return process_types_.MutableMap();
}

// map<uint32, .metrics.Thread> thread_types = 14;
int SampledProfile::thread_types_size() const {
  return thread_types_.size();
}
void SampledProfile::clear_thread_types() {
  thread_types_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >&
SampledProfile::thread_types() const {
  // @@protoc_insertion_point(field_map:metrics.SampledProfile.thread_types)
  return thread_types_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >*
SampledProfile::mutable_thread_types() {
  // @@protoc_insertion_point(field_mutable_map:metrics.SampledProfile.thread_types)
  return thread_types_.MutableMap();
}

// optional int64 ms_after_boot = 2;
bool SampledProfile::has_ms_after_boot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SampledProfile::set_has_ms_after_boot() {
  _has_bits_[0] |= 0x00000008u;
}
void SampledProfile::clear_has_ms_after_boot() {
  _has_bits_[0] &= ~0x00000008u;
}
void SampledProfile::clear_ms_after_boot() {
  ms_after_boot_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_boot();
}
::google::protobuf::int64 SampledProfile::ms_after_boot() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_boot)
  return ms_after_boot_;
}
void SampledProfile::set_ms_after_boot(::google::protobuf::int64 value) {
  set_has_ms_after_boot();
  ms_after_boot_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_boot)
}

// optional int64 ms_after_login = 3;
bool SampledProfile::has_ms_after_login() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SampledProfile::set_has_ms_after_login() {
  _has_bits_[0] |= 0x00000010u;
}
void SampledProfile::clear_has_ms_after_login() {
  _has_bits_[0] &= ~0x00000010u;
}
void SampledProfile::clear_ms_after_login() {
  ms_after_login_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_login();
}
::google::protobuf::int64 SampledProfile::ms_after_login() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_login)
  return ms_after_login_;
}
void SampledProfile::set_ms_after_login(::google::protobuf::int64 value) {
  set_has_ms_after_login();
  ms_after_login_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_login)
}

// optional int64 suspend_duration_ms = 5;
bool SampledProfile::has_suspend_duration_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SampledProfile::set_has_suspend_duration_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void SampledProfile::clear_has_suspend_duration_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void SampledProfile::clear_suspend_duration_ms() {
  suspend_duration_ms_ = GOOGLE_LONGLONG(0);
  clear_has_suspend_duration_ms();
}
::google::protobuf::int64 SampledProfile::suspend_duration_ms() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.suspend_duration_ms)
  return suspend_duration_ms_;
}
void SampledProfile::set_suspend_duration_ms(::google::protobuf::int64 value) {
  set_has_suspend_duration_ms();
  suspend_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.suspend_duration_ms)
}

// optional int64 ms_after_resume = 6;
bool SampledProfile::has_ms_after_resume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SampledProfile::set_has_ms_after_resume() {
  _has_bits_[0] |= 0x00000100u;
}
void SampledProfile::clear_has_ms_after_resume() {
  _has_bits_[0] &= ~0x00000100u;
}
void SampledProfile::clear_ms_after_resume() {
  ms_after_resume_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_resume();
}
::google::protobuf::int64 SampledProfile::ms_after_resume() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_resume)
  return ms_after_resume_;
}
void SampledProfile::set_ms_after_resume(::google::protobuf::int64 value) {
  set_has_ms_after_resume();
  ms_after_resume_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_resume)
}

// optional int32 num_tabs_restored = 7;
bool SampledProfile::has_num_tabs_restored() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SampledProfile::set_has_num_tabs_restored() {
  _has_bits_[0] |= 0x00000040u;
}
void SampledProfile::clear_has_num_tabs_restored() {
  _has_bits_[0] &= ~0x00000040u;
}
void SampledProfile::clear_num_tabs_restored() {
  num_tabs_restored_ = 0;
  clear_has_num_tabs_restored();
}
::google::protobuf::int32 SampledProfile::num_tabs_restored() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.num_tabs_restored)
  return num_tabs_restored_;
}
void SampledProfile::set_num_tabs_restored(::google::protobuf::int32 value) {
  set_has_num_tabs_restored();
  num_tabs_restored_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.num_tabs_restored)
}

// optional int64 ms_after_restore = 8;
bool SampledProfile::has_ms_after_restore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SampledProfile::set_has_ms_after_restore() {
  _has_bits_[0] |= 0x00000200u;
}
void SampledProfile::clear_has_ms_after_restore() {
  _has_bits_[0] &= ~0x00000200u;
}
void SampledProfile::clear_ms_after_restore() {
  ms_after_restore_ = GOOGLE_LONGLONG(0);
  clear_has_ms_after_restore();
}
::google::protobuf::int64 SampledProfile::ms_after_restore() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_restore)
  return ms_after_restore_;
}
void SampledProfile::set_ms_after_restore(::google::protobuf::int64 value) {
  set_has_ms_after_restore();
  ms_after_restore_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_restore)
}

// optional .metrics.PerfDataProto perf_data = 4;
bool SampledProfile::has_perf_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SampledProfile::set_has_perf_data() {
  _has_bits_[0] |= 0x00000001u;
}
void SampledProfile::clear_has_perf_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void SampledProfile::clear_perf_data() {
  if (perf_data_ != NULL) perf_data_->::metrics::PerfDataProto::Clear();
  clear_has_perf_data();
}
const ::metrics::PerfDataProto& SampledProfile::perf_data() const {
  const ::metrics::PerfDataProto* p = perf_data_;
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_data)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::PerfDataProto*>(
      &::metrics::_PerfDataProto_default_instance_);
}
::metrics::PerfDataProto* SampledProfile::mutable_perf_data() {
  set_has_perf_data();
  if (perf_data_ == NULL) {
    perf_data_ = new ::metrics::PerfDataProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_data)
  return perf_data_;
}
::metrics::PerfDataProto* SampledProfile::release_perf_data() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_data)
  clear_has_perf_data();
  ::metrics::PerfDataProto* temp = perf_data_;
  perf_data_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_perf_data(::metrics::PerfDataProto* perf_data) {
  delete perf_data_;
  perf_data_ = perf_data;
  if (perf_data) {
    set_has_perf_data();
  } else {
    clear_has_perf_data();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_data)
}

// optional .metrics.CallStackProfile call_stack_profile = 9;
bool SampledProfile::has_call_stack_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SampledProfile::set_has_call_stack_profile() {
  _has_bits_[0] |= 0x00000002u;
}
void SampledProfile::clear_has_call_stack_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
void SampledProfile::clear_call_stack_profile() {
  if (call_stack_profile_ != NULL) call_stack_profile_->::metrics::CallStackProfile::Clear();
  clear_has_call_stack_profile();
}
const ::metrics::CallStackProfile& SampledProfile::call_stack_profile() const {
  const ::metrics::CallStackProfile* p = call_stack_profile_;
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.call_stack_profile)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::CallStackProfile*>(
      &::metrics::_CallStackProfile_default_instance_);
}
::metrics::CallStackProfile* SampledProfile::mutable_call_stack_profile() {
  set_has_call_stack_profile();
  if (call_stack_profile_ == NULL) {
    call_stack_profile_ = new ::metrics::CallStackProfile;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.call_stack_profile)
  return call_stack_profile_;
}
::metrics::CallStackProfile* SampledProfile::release_call_stack_profile() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.call_stack_profile)
  clear_has_call_stack_profile();
  ::metrics::CallStackProfile* temp = call_stack_profile_;
  call_stack_profile_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_call_stack_profile(::metrics::CallStackProfile* call_stack_profile) {
  delete call_stack_profile_;
  call_stack_profile_ = call_stack_profile;
  if (call_stack_profile) {
    set_has_call_stack_profile();
  } else {
    clear_has_call_stack_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.call_stack_profile)
}

// optional .metrics.PerfStatProto perf_stat = 10;
bool SampledProfile::has_perf_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SampledProfile::set_has_perf_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void SampledProfile::clear_has_perf_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void SampledProfile::clear_perf_stat() {
  if (perf_stat_ != NULL) perf_stat_->::metrics::PerfStatProto::Clear();
  clear_has_perf_stat();
}
const ::metrics::PerfStatProto& SampledProfile::perf_stat() const {
  const ::metrics::PerfStatProto* p = perf_stat_;
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::PerfStatProto*>(
      &::metrics::_PerfStatProto_default_instance_);
}
::metrics::PerfStatProto* SampledProfile::mutable_perf_stat() {
  set_has_perf_stat();
  if (perf_stat_ == NULL) {
    perf_stat_ = new ::metrics::PerfStatProto;
  }
  // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_stat)
  return perf_stat_;
}
::metrics::PerfStatProto* SampledProfile::release_perf_stat() {
  // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_stat)
  clear_has_perf_stat();
  ::metrics::PerfStatProto* temp = perf_stat_;
  perf_stat_ = NULL;
  return temp;
}
void SampledProfile::set_allocated_perf_stat(::metrics::PerfStatProto* perf_stat) {
  delete perf_stat_;
  perf_stat_ = perf_stat;
  if (perf_stat) {
    set_has_perf_stat();
  } else {
    clear_has_perf_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_stat)
}

// repeated uint32 cpu_max_frequency_mhz = 15;
int SampledProfile::cpu_max_frequency_mhz_size() const {
  return cpu_max_frequency_mhz_.size();
}
void SampledProfile::clear_cpu_max_frequency_mhz() {
  cpu_max_frequency_mhz_.Clear();
}
::google::protobuf::uint32 SampledProfile::cpu_max_frequency_mhz(int index) const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.cpu_max_frequency_mhz)
  return cpu_max_frequency_mhz_.Get(index);
}
void SampledProfile::set_cpu_max_frequency_mhz(int index, ::google::protobuf::uint32 value) {
  cpu_max_frequency_mhz_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.cpu_max_frequency_mhz)
}
void SampledProfile::add_cpu_max_frequency_mhz(::google::protobuf::uint32 value) {
  cpu_max_frequency_mhz_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.SampledProfile.cpu_max_frequency_mhz)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SampledProfile::cpu_max_frequency_mhz() const {
  // @@protoc_insertion_point(field_list:metrics.SampledProfile.cpu_max_frequency_mhz)
  return cpu_max_frequency_mhz_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SampledProfile::mutable_cpu_max_frequency_mhz() {
  // @@protoc_insertion_point(field_mutable_list:metrics.SampledProfile.cpu_max_frequency_mhz)
  return &cpu_max_frequency_mhz_;
}

// optional float psi_cpu_last_10s_pct = 16;
bool SampledProfile::has_psi_cpu_last_10s_pct() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SampledProfile::set_has_psi_cpu_last_10s_pct() {
  _has_bits_[0] |= 0x00001000u;
}
void SampledProfile::clear_has_psi_cpu_last_10s_pct() {
  _has_bits_[0] &= ~0x00001000u;
}
void SampledProfile::clear_psi_cpu_last_10s_pct() {
  psi_cpu_last_10s_pct_ = 0;
  clear_has_psi_cpu_last_10s_pct();
}
float SampledProfile::psi_cpu_last_10s_pct() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.psi_cpu_last_10s_pct)
  return psi_cpu_last_10s_pct_;
}
void SampledProfile::set_psi_cpu_last_10s_pct(float value) {
  set_has_psi_cpu_last_10s_pct();
  psi_cpu_last_10s_pct_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.psi_cpu_last_10s_pct)
}

// optional float psi_cpu_last_60s_pct = 17;
bool SampledProfile::has_psi_cpu_last_60s_pct() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SampledProfile::set_has_psi_cpu_last_60s_pct() {
  _has_bits_[0] |= 0x00002000u;
}
void SampledProfile::clear_has_psi_cpu_last_60s_pct() {
  _has_bits_[0] &= ~0x00002000u;
}
void SampledProfile::clear_psi_cpu_last_60s_pct() {
  psi_cpu_last_60s_pct_ = 0;
  clear_has_psi_cpu_last_60s_pct();
}
float SampledProfile::psi_cpu_last_60s_pct() const {
  // @@protoc_insertion_point(field_get:metrics.SampledProfile.psi_cpu_last_60s_pct)
  return psi_cpu_last_60s_pct_;
}
void SampledProfile::set_psi_cpu_last_60s_pct(float value) {
  set_has_psi_cpu_last_60s_pct();
  psi_cpu_last_60s_pct_ = value;
  // @@protoc_insertion_point(field_set:metrics.SampledProfile.psi_cpu_last_60s_pct)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
